parameters:
  - name: build_configuration
    displayName: Build configuration
    type: string
    default: Release
    values:
    - Release
    - Debug
  - name: version_prefix
    displayName: Version prefix
    type: string
    default: 9.0.0
  - name: include_suffix
    displayName: Append version suffix
    type: boolean
    default: true
  - name: version_suffix
    displayName: Version suffix
    type: string
    default: ci.$(Build.BuildNumber)
  - name: codesign
    displayName: Enable code signing
    type: boolean
    default: false
  - name: skip_test
    displayName: Skip tests
    type: boolean
    default: false
  - name: publish_nightly
    displayName: Publish to orleans-nightly
    type: boolean
    default: false
  - name: publish_nuget
    displayName: Publish to nuget.org
    type: boolean
    default: false
  - name: frameworks
    displayName: Frameworks
    type: object
    default:
    - net8.0
  - name: tests_categories
    displayName: Test categories
    type: object
    default:
    - BVT
    - SlowBVT
    - Functional
  - name: runCodeQL3000
    default: false
    displayName: Run CodeQL3000 tasks
    type: boolean

jobs:

# Approval needed for publishing to nuget.org
- ${{ if and(eq(parameters.codesign, true), eq(parameters.publish_nuget, true)) }}:
  - job: PreDeploymentApprovalJob
    displayName: Pre-Deployment Approval
    condition: succeeded()
    timeoutInMinutes: 2880
    pool: server
    steps:
    - task: ManualValidation@1
      inputs:
        notifyUsers: ${{ variables.notifyUsers }}
        approvers: ${{ variables.approvers }}

# Build, sign dlls, build nuget pkgs, then sign them
- job: Build
  displayName: Build and create NuGet packages
  dependsOn: PreDeploymentApprovalJob
  variables:
    ${{ if eq(parameters.codesign, true) }}:
      microbuild_signing: true
      publishVstsFeed: 'public/orleans-nightly'
    ${{ else }}:
      microbuild_signing: false
  ${{ if ne(variables['System.TeamProject'], 'GitHub - PR Builds') }}:
    templateContext:
      outputs:
      - output: pipelineArtifact
        targetPath: '$(build.sourcesdirectory)/Artifacts/${{parameters.build_configuration}}'
        artifactName: nuget
      # Publish packages to nightly
      - ${{ if and(eq(parameters.codesign, true), eq(parameters.publish_nightly, true)) }}:
        - output: nuget
          useDotNetTask: false
          packageParentPath: $(Pipeline.Workspace)
          packagesToPush: $(build.sourcesdirectory)/Artifacts/${{parameters.build_configuration}}/**/*.nupkg
          nuGetFeedType: internal
          publishVstsFeed: $(publishVstsFeed)
          allowPackageConflicts: true
      - ${{ if and(eq(parameters.codesign, true), eq(parameters.publish_nuget, true)) }}:
        - output: nuget
          condition: succeeded()
          useDotNetTask: false
          packageParentPath: $(Pipeline.Workspace)
          packagesToPush: $(build.sourcesdirectory)/Artifacts/${{parameters.build_configuration}}/**/*.nupkg
          nuGetFeedType: external
          publishFeedCredentials: dotnet-orleans-nuget
          publishPackageMetadata: true
          allowPackageConflicts: true
  steps:
  - ${{ if eq(variables.microbuild_signing, true) }}:
    - task: MicroBuildSigningPlugin@4
      displayName: Install MicroBuild plugin
      inputs:
        signType: real
        zipSources: false
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
      env:
        TeamName: Orleans
        MicroBuildOutputFolderOverride: '$(Agent.TempDirectory)'
  - checkout: self
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      useGlobalJson: true
  - ${{ if eq(variables.runCodeQL3000, 'true') }}:
    - task: CodeQL3000Init@0
      displayName: CodeQL Initialize
    # This task only tags a build if it actually does CodeQL3000 work.
    # Those tasks no-op while the analysis is considered up to date i.e. for runs w/in a few days of each other.
    - script: "echo ##vso[build.addbuildtag]CodeQL3000"
      displayName: 'Set CI CodeQL3000 tag'
      condition: ne(variables.CODEQL_DIST,'')
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      arguments: '$(build_flags) /bl:${{parameters.build_configuration}}-Build.binlog /p:Configuration=${{parameters.build_configuration}} $(solution)'
    env:
      VersionPrefix: ${{parameters.version_prefix}}
      ${{ if eq(parameters.include_suffix, true) }}:
        VersionSuffix: ${{parameters.version_suffix}}
      OfficialBuild: $(official_build)
  - ${{ if eq(variables.runCodeQL3000, 'true') }}:
    - task: CodeQL3000Finalize@0
      displayName: CodeQL Finalize
  - task: CmdLine@2
    displayName: Pack
    inputs:
      script: 'dotnet pack --no-build --no-restore $(build_flags) /bl:${{parameters.build_configuration}}-Pack.binlog /p:Configuration=${{parameters.build_configuration}} $(solution)'
    env:
      VersionPrefix: ${{parameters.version_prefix}}
      ${{ if eq(parameters.include_suffix, true) }}:
        VersionSuffix: ${{parameters.version_suffix}}
      OfficialBuild: $(official_build)
  # Signing
  - ${{ if eq(variables.microbuild_signing, true) }}:
    - task: NuGetCommand@2
      displayName: "Install packages for signing"
      inputs:
        command: 'custom'
        arguments: 'install sign/packages.config -ConfigFile sign/Nuget.Config'
    - task: MSBuild@1
      displayName: "Sign binaries and packages"
      inputs:
        solution: sign/sign.proj
        msbuildArguments: -t:sign -p:Configuration=${{parameters.build_configuration}}

# Tests
- ${{ if and(eq(parameters.skip_test, false), ne(variables.runCodeQL3000, 'true')) }}:
  - ${{ each category in parameters.tests_categories }}:
    - ${{ each framework in parameters.frameworks }}:
      - job:
        displayName: ${{category}} on ${{framework}}
        timeoutInMinutes: 120
        dependsOn: Build
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: '$(Build.ArtifactStagingDirectory)/test_outputs_${{category}}_${{framework}}_$(Build.BuildId)'
            artifactName: 'test_outputs_${{category}}_${{framework}}_$(System.JobAttempt)'
            condition: succeededOrFailed()
        steps:
        - checkout: self
        - task: UseDotNet@2
          inputs:
            useGlobalJson: true
          displayName: 'Use .NET Core sdk'
        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            command: build
            arguments: '$(build_flags) /bl:${{parameters.build_configuration}}-Build.binlog /p:Configuration=${{parameters.build_configuration}} $(solution)'
        - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
          - task: AzureCLI@2
            displayName: Azure Login
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            inputs:
              azureSubscription: 'dotnet-orleans-test'
              useGlobalConfig: true
              addSpnToEnvironment: true
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                # Extract TenantId and ServicePrincipalId from the connection
                Write-Host "##vso[task.setvariable variable=tenantId]$($env:tenantId)"
                Write-Host "##vso[task.setvariable variable=servicePrincipalId;issecret=true]$($env:servicePrincipalId)"
                # AzurePipelinesCredential expect the GUID of the connection, not the name, so let's get it here
                Write-Host "##vso[task.setvariable variable=serviceConnectionId]$($env:SERVICE_CONNECTION_ID)"
                Get-ChildItem env:
        - task: DotNetCoreCLI@2
          displayName: Test
          ${{ if eq(variables['System.TeamProject'], 'internal') }}:
            env:
              AZURE_TENANT_ID: $(tenantId)
              AZURE_CLIENT_ID: $(servicePrincipalId)
              SERVICE_CONNECTION_ID: $(serviceConnectionId)
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          inputs:
            command: 'test'
            testRunTitle: ${{category}} on ${{framework}}
            arguments: '--no-build --logger "trx;LogFilePrefix=testresults-${{framework}}-${{category}}" --framework ${{framework}} --configuration "${{parameters.build_configuration}}" --filter Category=${{category}} --blame-crash-dump-type full --blame-hang-timeout 10m --blame-hang-dump-type full -- -parallel none -noshadow'
            publishTestResults: false # Doesn't merge correctly, use the explicit PublishTestResults task instead
        - task: PublishTestResults@2
          displayName: Publishing test results
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: VSTest
            testResultsFiles: '**/testresults-*.trx'
            mergeTestResults: true
            testRunTitle: ${{category}} on ${{framework}}
        - task: CopyFiles@2
          displayName: 'Copy test logs'
          condition: succeededOrFailed()
          inputs:
            Contents: '**\*.log'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/test_outputs_${{category}}_${{framework}}_$(Build.BuildId)'
            OverWrite: true
        - task: CopyFiles@2
          displayName: 'Copy crash dumps'
          condition: succeededOrFailed()
          inputs:
            Contents: '**\*.dmp'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/test_outputs_${{category}}_${{framework}}_$(Build.BuildId)'
            OverWrite: true
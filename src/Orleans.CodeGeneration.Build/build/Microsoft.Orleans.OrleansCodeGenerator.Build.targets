<Project TreatAsLocalProperty="CodeGenDirectory;IsCore;MSBuildIsCore;TargetIsCore;TaskAssembly;OutputFileName;CoreAssembly;FullAssembly;GeneratorAssembly;CodeGeneratorEnabled;CodeGenCompileInputCache">

  <PropertyGroup Condition="'$(OrleansCodeGeneratorAssembly)' != ''">
    <!-- OrleansCodeGeneratorAssembly is used here to override the MSBuildIsCore value during Orleans.sln builds -->
    <MSBuildIsCore></MSBuildIsCore>
    <TargetIsCore></TargetIsCore>
    <!-- For non-windows OS we force .Net Core  -->
    <MSBuildIsCore Condition="'$(OS)' != 'Windows_NT'">true</MSBuildIsCore>
    <TargetIsCore Condition="'$(OS)' != 'Windows_NT'">true</TargetIsCore>
    <TaskAssembly>$(OrleansCodeGeneratorAssembly)</TaskAssembly>
    <GeneratorAssembly>$(OrleansCodeGeneratorAssembly)</GeneratorAssembly>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OrleansCodeGeneratorAssembly)' == ''">
    <CoreAssembly20>$(MSBuildThisFileDirectory)..\tasks\netcoreapp2.0\Orleans.CodeGeneration.Build.dll</CoreAssembly20>
    <CoreAssembly21>$(MSBuildThisFileDirectory)..\tasks\netcoreapp2.1\Orleans.CodeGeneration.Build.dll</CoreAssembly21>
    <FullAssembly>$(MSBuildThisFileDirectory)..\tasks\net461\Orleans.CodeGeneration.Build.exe</FullAssembly>

    <CoreAssembly Condition="$(TargetFramework.Equals('netcoreapp2.0')) or $(TargetFramework.Equals('netstandard2.0'))">$(CoreAssembly20)</CoreAssembly>
    <CoreAssembly Condition="$(TargetFramework.Equals('netcoreapp2.1')) or $(TargetFramework.Equals('netstandard2.1'))">$(CoreAssembly21)</CoreAssembly>
    <!-- Fallback to 2.0 assembly if needed -->
    <CoreAssembly Condition="$(CoreAssembly) == ''">$(CoreAssembly20)</CoreAssembly>

    <!-- Specify the assembly containing the MSBuild tasks. -->
    <MSBuildIsCore Condition="'$(MSBuildRuntimeType)' == 'Core' or '$(OS)' != 'Windows_NT'">true</MSBuildIsCore>
    <TaskAssembly Condition="'$(MSBuildIsCore)' == 'true'">$(CoreAssembly)</TaskAssembly>
    <TaskAssembly Condition="'$(MSBuildIsCore)' != 'true'">$(FullAssembly)</TaskAssembly>

    <!-- When the MSBuild host is full-framework, we defer to PATH for dotnet -->
    <DotNetHost Condition="'$(MSBuildIsCore)' != 'true'">dotnet</DotNetHost>

    <!-- Specify the assembly containing the code generator. -->
    <TargetIsCore Condition="$(TargetFramework.StartsWith('netcore')) or $(TargetFramework.StartsWith('netstandard')) or '$(OS)' != 'Windows_NT'">true</TargetIsCore>
    <GeneratorAssembly Condition="'$(TargetIsCore)' == 'true'">$(CoreAssembly)</GeneratorAssembly>
    <GeneratorAssembly Condition="'$(TargetIsCore)' != 'true'">$(FullAssembly)</GeneratorAssembly>
  </PropertyGroup>

  <PropertyGroup>
    <OrleansCodeGenLogLevel Condition="'$(OrleansCodeGenLogLevel)' == ''">Warning</OrleansCodeGenLogLevel>
    <CodeGenDirectory Condition="'$([System.IO.Path]::IsPathRooted($(IntermediateOutputPath)))' == 'true'">$(IntermediateOutputPath)</CodeGenDirectory>
    <CodeGenDirectory Condition="'$(CodeGenDirectory)' == ''">$(ProjectDir)$(IntermediateOutputPath)</CodeGenDirectory>
    <OutputFileName>$(CodeGenDirectory)$(TargetName).orleans.g.cs</OutputFileName>
    <CodeGeneratorEnabled Condition="'$(OrleansCodeGenPrecompile)'!='true' and '$(DesignTimeBuild)' != 'true'">true</CodeGeneratorEnabled>
    <CodeGenCompileInputCache Condition="Exists('$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache')">$(IntermediateOutputPath)$(MSBuildProjectFile).CoreCompileInputs.cache</CodeGenCompileInputCache>
  </PropertyGroup>

  <UsingTask TaskName="Orleans.CodeGeneration.GetDotNetHost" AssemblyFile="$(TaskAssembly)" Condition="'$(CodeGeneratorEnabled)' == 'true' and '$(DotNetHost)' == '' and '$(MSBuildIsCore)' == 'true'" />

  <!-- This target is run just before Compile for an Orleans Grain Interface Project -->
  <Target Name="GenerateOrleansCode"
          AfterTargets="ResolveReferences"
          BeforeTargets="AssignTargetPaths"
          Condition="'$(CodeGeneratorEnabled)' == 'true'"
          Inputs="@(Compile);@(ReferencePath);$(CodeGenCompileInputCache)"
          Outputs="$(OutputFileName)">
    <PropertyGroup>
      <ExcludeCodeGen>$(DefineConstants);EXCLUDE_CODEGEN</ExcludeCodeGen>
      <IntermediateOutputPath>$(IntermediateOutputPath)codegen\</IntermediateOutputPath>
      <InputAssembly>$(IntermediateOutputPath)$(TargetName)$(TargetExt)</InputAssembly>
      <ArgsFile>$(IntermediateOutputPath)$(TargetName).orleans.g.args.txt</ArgsFile>
    </PropertyGroup>
    <Orleans.CodeGeneration.GetDotNetHost Condition="'$(DotNetHost)' == '' and '$(TargetIsCore)' == 'true' ">
      <Output TaskParameter="DotNetHost" PropertyName="DotNetHost" />
    </Orleans.CodeGeneration.GetDotNetHost>
    <ItemGroup>
      <CodeGenArgs Include="/waitForDebugger" Condition="'$(OrleansCodeGenWaitForDebugger)' != ''" />
      <CodeGenArgs Include="/in:$(InputAssembly)"/>
      <CodeGenArgs Include="/out:$(OutputFileName)"/>
      <CodeGenArgs Include="/loglevel:$(OrleansCodeGenLogLevel)"/>
      <CodeGenArgs Include="@(ReferencePath->'/r:%(Identity)')"/>
    </ItemGroup>
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Targets="Build"
      Properties="IntermediateOutputPath=$(IntermediateOutputPath);OrleansCodeGenPrecompile=true;DefineConstants=$(ExcludeCodeGen);DesignTimeBuild=true;PreserveCompilationContext=true"
      UnloadProjectsOnCompletion="true"
      UseResultsCache="false" />
    <Message Text="[OrleansCodeGeneration] - Code-gen args file=$(ArgsFile)"/>
    <WriteLinesToFile Overwrite="true" File="$(ArgsFile)" Lines="@(CodeGenArgs)"/>
    <Message Text="[OrleansCodeGeneration] - Precompiled assembly"/>

    <!-- If building a .NET Core or .NET Standard target, use dotnet to execute the process. -->
    <Exec Command="&quot;$(DotNetHost)&quot; &quot;$(GeneratorAssembly)&quot; &quot;@$(ArgsFile)&quot;" Outputs="$(OutputFileName)" Condition=" '$(TargetIsCore)' == 'true' or $(OS) != 'Windows_NT' ">
      <Output TaskParameter="Outputs" ItemName="Compile" />
      <Output TaskParameter="Outputs" ItemName="FileWrites" />
    </Exec>

    <!-- If building a Full .NET target, execute the process directly. -->
    <Exec Command="&quot;$(GeneratorAssembly)&quot; &quot;@$(ArgsFile)&quot;" Outputs="$(OutputFileName)" Condition=" '$(TargetIsCore)' != 'true' and $(OS) == 'Windows_NT' ">
      <Output TaskParameter="Outputs" ItemName="Compile" />
      <Output TaskParameter="Outputs" ItemName="FileWrites" />
    </Exec>
  </Target>

  <Target Name="IncludeCodegenOutputDuringDesignTimeBuild"
        BeforeTargets="AssignTargetPaths"
        Condition="'$(CodeGeneratorEnabled)' != 'true' and Exists('$(OutputFileName)')">
    <ItemGroup>
      <Compile Include="$(OutputFileName)"/>
      <FileWrites Include="$(OutputFileName)"/>
    </ItemGroup>
  </Target>
</Project>
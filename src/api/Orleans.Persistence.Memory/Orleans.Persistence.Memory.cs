//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class MemoryGrainStorageOptions : Storage.IStorageProviderSerializerOptions
    {
        public const int DEFAULT_INIT_STAGE = 10000;
        public const int NumStorageGrainsDefaultValue = 10;
        public Storage.IGrainStorageSerializer GrainStorageSerializer { get { throw null; } set { } }

        public int InitStage { get { throw null; } set { } }

        public int NumStorageGrains { get { throw null; } set { } }
    }

    public partial class MemoryGrainStorageOptionsValidator : IConfigurationValidator
    {
        public MemoryGrainStorageOptionsValidator(MemoryGrainStorageOptions options, string name) { }

        public void ValidateConfiguration() { }
    }
}

namespace Orleans.Hosting
{
    public static partial class MemoryGrainStorageSiloBuilderExtensions
    {
        public static ISiloBuilder AddMemoryGrainStorage(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.MemoryGrainStorageOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddMemoryGrainStorage(this ISiloBuilder builder, string name, System.Action<Configuration.MemoryGrainStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddMemoryGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.MemoryGrainStorageOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddMemoryGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Configuration.MemoryGrainStorageOptions> configureOptions) { throw null; }
    }
}

namespace Orleans.Storage
{
    [System.Diagnostics.DebuggerDisplay("MemoryStore:{name}")]
    public partial class MemoryGrainStorage : IGrainStorage, System.IDisposable
    {
        public MemoryGrainStorage(string name, Configuration.MemoryGrainStorageOptions options, Microsoft.Extensions.Logging.ILogger<MemoryGrainStorage> logger, IGrainFactory grainFactory, IGrainStorageSerializer defaultGrainStorageSerializer, Serialization.Serializers.IActivatorProvider activatorProvider) { }

        public virtual System.Threading.Tasks.Task ClearStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public void Dispose() { }

        public virtual System.Threading.Tasks.Task ReadStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public virtual System.Threading.Tasks.Task WriteStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }
    }

    public static partial class MemoryGrainStorageFactory
    {
        public static MemoryGrainStorage Create(System.IServiceProvider services, string name) { throw null; }
    }

    [System.Diagnostics.DebuggerDisplay("MemoryStore:{Name},WithLatency:{latency}")]
    public partial class MemoryGrainStorageWithLatency : IGrainStorage
    {
        public MemoryGrainStorageWithLatency(string name, MemoryStorageWithLatencyOptions options, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, IGrainFactory grainFactory, Serialization.Serializers.IActivatorProvider activatorProvider, IGrainStorageSerializer defaultGrainStorageSerializer) { }

        public System.Threading.Tasks.Task ClearStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public System.Threading.Tasks.Task ReadStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public System.Threading.Tasks.Task WriteStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }
    }

    public partial class MemoryStorageWithLatencyOptions : Configuration.MemoryGrainStorageOptions
    {
        public static readonly System.TimeSpan DefaultLatency;
        public System.TimeSpan Latency { get { throw null; } set { } }

        public bool MockCallsOnly { get { throw null; } set { } }
    }
}
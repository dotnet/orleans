//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class AzureTableGrainDirectoryOptions : GrainDirectory.AzureStorage.AzureStorageOperationOptions
    {
        public const string DEFAULT_TABLE_NAME = "GrainDirectory";
        public override string TableName { get { throw null; } set { } }
    }

    public partial class AzureTableGrainDirectoryOptionsValidator : GrainDirectory.AzureStorage.AzureStorageOperationOptionsValidator<AzureTableGrainDirectoryOptions>
    {
        public AzureTableGrainDirectoryOptionsValidator(AzureTableGrainDirectoryOptions options, string name) : base(default!, default!) { }
    }
}

namespace Orleans.GrainDirectory.AzureStorage
{
    public partial class AzureStorageOperationOptions
    {
        public Azure.Data.Tables.TableClientOptions ClientOptions { get { throw null; } set { } }

        public AzureStoragePolicyOptions StoragePolicyOptions { get { throw null; } }

        public virtual string TableName { get { throw null; } set { } }

        public Azure.Data.Tables.TableServiceClient TableServiceClient { get { throw null; } set { } }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Func<System.Threading.Tasks.Task<Azure.Data.Tables.TableServiceClient>> createClientCallback) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(string connectionString) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.AzureSasCredential azureSasCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.Core.TokenCredential tokenCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.Data.Tables.TableSharedKeyCredential sharedKeyCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri) { }
    }

    public partial class AzureStorageOperationOptionsValidator<TOptions> : IConfigurationValidator where TOptions : AzureStorageOperationOptions
    {
        public AzureStorageOperationOptionsValidator(TOptions options, string name = null) { }

        public string Name { get { throw null; } }

        public TOptions Options { get { throw null; } }

        public virtual void ValidateConfiguration() { }
    }

    public partial class AzureStoragePolicyOptions
    {
        public System.TimeSpan CreationTimeout { get { throw null; } set { } }

        public int MaxBulkUpdateRows { get { throw null; } set { } }

        public int MaxCreationRetries { get { throw null; } set { } }

        public int MaxOperationRetries { get { throw null; } set { } }

        public System.TimeSpan OperationTimeout { get { throw null; } set { } }

        public System.TimeSpan PauseBetweenCreationRetries { get { throw null; } set { } }

        public System.TimeSpan PauseBetweenOperationRetries { get { throw null; } set { } }
    }

    public partial class AzureTableGrainDirectory : IGrainDirectory, ILifecycleParticipant<Runtime.ISiloLifecycle>
    {
        public AzureTableGrainDirectory(Configuration.AzureTableGrainDirectoryOptions directoryOptions, Microsoft.Extensions.Options.IOptions<Configuration.ClusterOptions> clusterOptions, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }

        public System.Threading.Tasks.Task InitializeIfNeeded(System.Threading.CancellationToken ct = default) { throw null; }

        public System.Threading.Tasks.Task<Runtime.GrainAddress?> Lookup(Runtime.GrainId grainId) { throw null; }

        public void Participate(Runtime.ISiloLifecycle lifecycle) { }

        public System.Threading.Tasks.Task<Runtime.GrainAddress?> Register(Runtime.GrainAddress address, Runtime.GrainAddress? previousAddress) { throw null; }

        public System.Threading.Tasks.Task<Runtime.GrainAddress?> Register(Runtime.GrainAddress address) { throw null; }

        public System.Threading.Tasks.Task Unregister(Runtime.GrainAddress address) { throw null; }

        public System.Threading.Tasks.Task UnregisterMany(System.Collections.Generic.List<Runtime.GrainAddress> addresses) { throw null; }

        public System.Threading.Tasks.Task UnregisterSilos(System.Collections.Generic.List<Runtime.SiloAddress> siloAddresses) { throw null; }
    }
}

namespace Orleans.Hosting
{
    public static partial class AzureTableGrainDirectoryServiceCollectionExtensions
    {
    }

    public static partial class AzureTableGrainDirectorySiloBuilderExtensions
    {
        public static ISiloBuilder AddAzureTableGrainDirectory(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureTableGrainDirectoryOptions>> configureOptions) { throw null; }

        public static ISiloBuilder AddAzureTableGrainDirectory(this ISiloBuilder builder, string name, System.Action<Configuration.AzureTableGrainDirectoryOptions> configureOptions) { throw null; }

        public static ISiloBuilder UseAzureTableGrainDirectoryAsDefault(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureTableGrainDirectoryOptions>> configureOptions) { throw null; }

        public static ISiloBuilder UseAzureTableGrainDirectoryAsDefault(this ISiloBuilder builder, System.Action<Configuration.AzureTableGrainDirectoryOptions> configureOptions) { throw null; }
    }
}
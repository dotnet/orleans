//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Journaling
{
    public sealed partial class AzureAppendBlobStateMachineStorageOptions
    {
        public const string DEFAULT_CONTAINER_NAME = "state";
        public const int DEFAULT_INIT_STAGE = 10000;
        public Azure.Storage.Blobs.BlobServiceClient? BlobServiceClient { get { throw null; } set { } }

        public System.Func<System.IServiceProvider, AzureAppendBlobStateMachineStorageOptions, IBlobContainerFactory> BuildContainerFactory { get { throw null; } set { } }

        public Azure.Storage.Blobs.BlobClientOptions? ClientOptions { get { throw null; } set { } }

        public string ContainerName { get { throw null; } set { } }

        public System.Func<Runtime.GrainId, string> GetBlobName { get { throw null; } set { } }

        public int InitStage { get { throw null; } set { } }

        public void ConfigureBlobServiceClient(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<Azure.Storage.Blobs.BlobServiceClient>> createClientCallback) { }

        public void ConfigureBlobServiceClient(string connectionString) { }

        public void ConfigureBlobServiceClient(System.Uri serviceUri, Azure.AzureSasCredential azureSasCredential) { }

        public void ConfigureBlobServiceClient(System.Uri serviceUri, Azure.Core.TokenCredential tokenCredential) { }

        public void ConfigureBlobServiceClient(System.Uri serviceUri, Azure.Storage.StorageSharedKeyCredential sharedKeyCredential) { }

        public void ConfigureBlobServiceClient(System.Uri serviceUri) { }
    }

    public static partial class AzureBlobStorageHostingExtensions
    {
        public static Hosting.ISiloBuilder AddAzureAppendBlobStateMachineStorage(this Hosting.ISiloBuilder builder, System.Action<AzureAppendBlobStateMachineStorageOptions>? configure) { throw null; }

        public static Hosting.ISiloBuilder AddAzureAppendBlobStateMachineStorage(this Hosting.ISiloBuilder builder) { throw null; }
    }

    public partial interface IBlobContainerFactory
    {
        Azure.Storage.Blobs.BlobContainerClient GetBlobContainerClient(Runtime.GrainId grainId);
        System.Threading.Tasks.Task InitializeAsync(Azure.Storage.Blobs.BlobServiceClient client, System.Threading.CancellationToken cancellationToken);
    }
}
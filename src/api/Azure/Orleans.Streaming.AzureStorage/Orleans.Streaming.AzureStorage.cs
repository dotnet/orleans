//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.AzureUtils
{
    public partial class AzureQueueDataManager
    {
        public AzureQueueDataManager(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, string queueName, Configuration.AzureQueueOptions options) { }

        public AzureQueueDataManager(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, string queueName, string storageConnectionString, System.TimeSpan? visibilityTimeout = null) { }

        public string QueueName { get { throw null; } }

        public System.Threading.Tasks.Task AddQueueMessage(string message) { throw null; }

        public System.Threading.Tasks.Task ClearQueue() { throw null; }

        public System.Threading.Tasks.Task DeleteQueue() { throw null; }

        public System.Threading.Tasks.Task DeleteQueueMessage(Azure.Storage.Queues.Models.QueueMessage message) { throw null; }

        public System.Threading.Tasks.Task<int> GetApproximateMessageCount() { throw null; }

        public System.Threading.Tasks.Task<Azure.Storage.Queues.Models.QueueMessage> GetQueueMessage() { throw null; }

        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Azure.Storage.Queues.Models.QueueMessage>> GetQueueMessages(int? count = null) { throw null; }

        public System.Threading.Tasks.Task InitQueueAsync() { throw null; }

        public System.Threading.Tasks.Task<Azure.Storage.Queues.Models.PeekedMessage> PeekQueueMessage() { throw null; }
    }
}

namespace Orleans.Configuration
{
    public partial class AzureBlobLeaseProviderOptions
    {
        public const string DefaultBlobContainerName = "Leases";
        public string BlobContainerName { get { throw null; } set { } }

        public Azure.Storage.Blobs.BlobServiceClient BlobServiceClient { get { throw null; } set { } }

        [System.Obsolete("Set the BlobServiceClient property directly.")]
        public Azure.Storage.Blobs.BlobClientOptions ClientOptions { get { throw null; } set { } }

        [System.Obsolete("Set the BlobServiceClient property directly.")]
        public void ConfigureBlobServiceClient(System.Func<System.Threading.Tasks.Task<Azure.Storage.Blobs.BlobServiceClient>> createClientCallback) { }

        [System.Obsolete("Set the BlobServiceClient property directly.")]
        public void ConfigureBlobServiceClient(string connectionString) { }

        [System.Obsolete("Set the BlobServiceClient property directly.")]
        public void ConfigureBlobServiceClient(System.Uri serviceUri, Azure.AzureSasCredential azureSasCredential) { }

        [System.Obsolete("Set the BlobServiceClient property directly.")]
        public void ConfigureBlobServiceClient(System.Uri serviceUri, Azure.Core.TokenCredential tokenCredential) { }

        [System.Obsolete("Set the BlobServiceClient property directly.")]
        public void ConfigureBlobServiceClient(System.Uri serviceUri, Azure.Storage.StorageSharedKeyCredential sharedKeyCredential) { }

        [System.Obsolete("Set the BlobServiceClient property directly.")]
        public void ConfigureBlobServiceClient(System.Uri serviceUri) { }
    }

    public partial class AzureBlobLeaseProviderOptionsValidator : IConfigurationValidator
    {
        public AzureBlobLeaseProviderOptionsValidator(Microsoft.Extensions.Options.IOptions<AzureBlobLeaseProviderOptions> options) { }

        public static IConfigurationValidator Create(System.IServiceProvider services, string name) { throw null; }

        public void ValidateConfiguration() { }
    }

    public partial class AzureQueueOptions
    {
        [System.Obsolete("Set the QueueServiceClient property directly.")]
        public Azure.Storage.Queues.QueueClientOptions ClientOptions { get { throw null; } set { } }

        public System.TimeSpan? MessageVisibilityTimeout { get { throw null; } set { } }

        public System.Collections.Generic.List<string> QueueNames { get { throw null; } set { } }

        public Azure.Storage.Queues.QueueServiceClient QueueServiceClient { get { throw null; } set { } }

        [System.Obsolete("Set the QueueServiceClient property directly.")]
        public void ConfigureQueueServiceClient(System.Func<System.Threading.Tasks.Task<Azure.Storage.Queues.QueueServiceClient>> createClientCallback) { }

        [System.Obsolete("Set the QueueServiceClient property directly.")]
        public void ConfigureQueueServiceClient(string connectionString) { }

        [System.Obsolete("Set the QueueServiceClient property directly.")]
        public void ConfigureQueueServiceClient(System.Uri serviceUri, Azure.AzureSasCredential azureSasCredential) { }

        [System.Obsolete("Set the QueueServiceClient property directly.")]
        public void ConfigureQueueServiceClient(System.Uri serviceUri, Azure.Core.TokenCredential tokenCredential) { }

        [System.Obsolete("Set the QueueServiceClient property directly.")]
        public void ConfigureQueueServiceClient(System.Uri serviceUri, Azure.Storage.StorageSharedKeyCredential sharedKeyCredential) { }

        [System.Obsolete("Set the QueueServiceClient property directly.")]
        public void ConfigureQueueServiceClient(System.Uri serviceUri) { }
    }

    public partial class AzureQueueOptionsValidator : IConfigurationValidator
    {
        internal AzureQueueOptionsValidator() { }

        public static IConfigurationValidator Create(System.IServiceProvider services, string name) { throw null; }

        public void ValidateConfiguration() { }
    }
}

namespace Orleans.Hosting
{
    public static partial class AzureQueueStreamConfiguratorExtensions
    {
        public static void ConfigureAzureQueue(this IAzureQueueStreamConfigurator configurator, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureQueueOptions>> configureOptions) { }

        public static void ConfigureQueueDataAdapter(this IAzureQueueStreamConfigurator configurator, System.Func<System.IServiceProvider, string, Streams.IQueueDataAdapter<string, Streams.IBatchContainer>> factory) { }

        public static void ConfigureQueueDataAdapter<TQueueDataAdapter>(this IAzureQueueStreamConfigurator configurator)
            where TQueueDataAdapter : Streams.IQueueDataAdapter<string, Streams.IBatchContainer> { }
    }

    public sealed partial class AzureQueueStreamProviderBuilder : Providers.IProviderBuilder<ISiloBuilder>, Providers.IProviderBuilder<IClientBuilder>
    {
        public void Configure(IClientBuilder builder, string name, Microsoft.Extensions.Configuration.IConfigurationSection configurationSection) { }

        public void Configure(ISiloBuilder builder, string name, Microsoft.Extensions.Configuration.IConfigurationSection configurationSection) { }
    }

    public static partial class ClientBuilderExtensions
    {
        public static IClientBuilder AddAzureQueueStreams(this IClientBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureQueueOptions>> configureOptions) { throw null; }

        public static IClientBuilder AddAzureQueueStreams(this IClientBuilder builder, string name, System.Action<ClusterClientAzureQueueStreamConfigurator> configure) { throw null; }
    }

    public partial class ClusterClientAzureQueueStreamConfigurator : ClusterClientPersistentStreamConfigurator, IClusterClientAzureQueueStreamConfigurator, IAzureQueueStreamConfigurator, INamedServiceConfigurator, IClusterClientPersistentStreamConfigurator, IPersistentStreamConfigurator
    {
        public ClusterClientAzureQueueStreamConfigurator(string name, IClientBuilder builder) : base(default!, default!, default!) { }
    }

    public partial interface IAzureQueueStreamConfigurator : INamedServiceConfigurator
    {
    }

    public partial interface IClusterClientAzureQueueStreamConfigurator : IAzureQueueStreamConfigurator, INamedServiceConfigurator, IClusterClientPersistentStreamConfigurator, IPersistentStreamConfigurator
    {
    }

    public partial interface ISiloAzureQueueStreamConfigurator : IAzureQueueStreamConfigurator, INamedServiceConfigurator, ISiloPersistentStreamConfigurator, IPersistentStreamConfigurator
    {
    }

    public partial class SiloAzureQueueStreamConfigurator : SiloPersistentStreamConfigurator, ISiloAzureQueueStreamConfigurator, IAzureQueueStreamConfigurator, INamedServiceConfigurator, ISiloPersistentStreamConfigurator, IPersistentStreamConfigurator
    {
        public SiloAzureQueueStreamConfigurator(string name, System.Action<System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>> configureServicesDelegate) : base(default!, default!, default!) { }
    }

    public static partial class SiloAzureQueueStreamConfiguratorExtensions
    {
        public static void ConfigureCacheSize(this ISiloAzureQueueStreamConfigurator configurator, int cacheSize = 4096) { }
    }

    public static partial class SiloBuilderExtensions
    {
        public static ISiloBuilder AddAzureQueueStreams(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureQueueOptions>> configureOptions) { throw null; }

        public static ISiloBuilder AddAzureQueueStreams(this ISiloBuilder builder, string name, System.Action<SiloAzureQueueStreamConfigurator> configure) { throw null; }

        public static ISiloBuilder UseAzureBlobLeaseProvider(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureBlobLeaseProviderOptions>> configureOptions) { throw null; }

        public static void UseAzureBlobLeaseProvider(this ISiloPersistentStreamConfigurator configurator, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureBlobLeaseProviderOptions>> configureOptions) { }
    }
}

namespace Orleans.LeaseProviders
{
    public partial class AzureBlobLeaseProvider : ILeaseProvider
    {
        public AzureBlobLeaseProvider(Microsoft.Extensions.Options.IOptions<Configuration.AzureBlobLeaseProviderOptions> options) { }

        public System.Threading.Tasks.Task<AcquireLeaseResult[]> Acquire(string category, LeaseRequest[] leaseRequests) { throw null; }

        public static ILeaseProvider Create(System.IServiceProvider services, string name) { throw null; }

        public System.Threading.Tasks.Task Release(string category, AcquiredLease[] acquiredLeases) { throw null; }

        public System.Threading.Tasks.Task<AcquireLeaseResult[]> Renew(string category, AcquiredLease[] acquiredLeases) { throw null; }
    }
}

namespace Orleans.Providers.Streams.AzureQueue
{
    public partial class AzureQueueAdapterFactory : Orleans.Streams.IQueueAdapterFactory
    {
        public AzureQueueAdapterFactory(string name, Configuration.AzureQueueOptions options, Configuration.SimpleQueueCacheOptions cacheOptions, Orleans.Streams.IQueueDataAdapter<string, Orleans.Streams.IBatchContainer> dataAdapter, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }

        protected System.Func<Orleans.Streams.QueueId, System.Threading.Tasks.Task<Orleans.Streams.IStreamFailureHandler>> StreamFailureHandlerFactory { set { } }

        public static AzureQueueAdapterFactory Create(System.IServiceProvider services, string name) { throw null; }

        public virtual System.Threading.Tasks.Task<Orleans.Streams.IQueueAdapter> CreateAdapter() { throw null; }

        public System.Threading.Tasks.Task<Orleans.Streams.IStreamFailureHandler> GetDeliveryFailureHandler(Orleans.Streams.QueueId queueId) { throw null; }

        public virtual Orleans.Streams.IQueueAdapterCache GetQueueAdapterCache() { throw null; }

        public Orleans.Streams.IStreamQueueMapper GetStreamQueueMapper() { throw null; }

        public virtual void Init() { }
    }

    [SerializationCallbacks(typeof(Runtime.OnDeserializedCallbacks))]
    public partial class AzureQueueDataAdapterV1 : Orleans.Streams.IQueueDataAdapter<string, Orleans.Streams.IBatchContainer>, Orleans.Streams.IQueueDataAdapter<string>, Serialization.IOnDeserialized
    {
        public AzureQueueDataAdapterV1(Serialization.Serializer serializer) { }

        public Orleans.Streams.IBatchContainer FromQueueMessage(string cloudMsg, long sequenceId) { throw null; }

        void Serialization.IOnDeserialized.OnDeserialized(Serialization.DeserializationContext context) { }

        public string ToQueueMessage<T>(Runtime.StreamId streamId, System.Collections.Generic.IEnumerable<T> events, Orleans.Streams.StreamSequenceToken token, System.Collections.Generic.Dictionary<string, object> requestContext) { throw null; }
    }

    [SerializationCallbacks(typeof(Runtime.OnDeserializedCallbacks))]
    public partial class AzureQueueDataAdapterV2 : Orleans.Streams.IQueueDataAdapter<string, Orleans.Streams.IBatchContainer>, Orleans.Streams.IQueueDataAdapter<string>, Serialization.IOnDeserialized
    {
        public AzureQueueDataAdapterV2(Serialization.Serializer serializer) { }

        public Orleans.Streams.IBatchContainer FromQueueMessage(string cloudMsg, long sequenceId) { throw null; }

        void Serialization.IOnDeserialized.OnDeserialized(Serialization.DeserializationContext context) { }

        public string ToQueueMessage<T>(Runtime.StreamId streamId, System.Collections.Generic.IEnumerable<T> events, Orleans.Streams.StreamSequenceToken token, System.Collections.Generic.Dictionary<string, object> requestContext) { throw null; }
    }

    public partial class AzureQueueStreamProviderUtils
    {
        public static System.Threading.Tasks.Task ClearAllUsedAzureQueues(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, System.Collections.Generic.List<string> azureQueueNames, Configuration.AzureQueueOptions queueOptions) { throw null; }

        public static System.Threading.Tasks.Task ClearAllUsedAzureQueues(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, System.Collections.Generic.List<string> azureQueueNames, string storageConnectionString) { throw null; }

        public static System.Threading.Tasks.Task DeleteAllUsedAzureQueues(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, System.Collections.Generic.List<string> azureQueueNames, Configuration.AzureQueueOptions queueOptions) { throw null; }

        public static System.Threading.Tasks.Task DeleteAllUsedAzureQueues(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, System.Collections.Generic.List<string> azureQueueNames, string storageConnectionString) { throw null; }

        public static System.Collections.Generic.List<string> GenerateDefaultAzureQueueNames(string serviceId, string providerName) { throw null; }
    }
}

namespace Orleans.Providers.Streams.PersistentStreams
{
    public partial class AzureTableStorageStreamFailureHandler<TEntity> : Orleans.Streams.IStreamFailureHandler where TEntity : StreamDeliveryFailureEntity, new()
    {
        public AzureTableStorageStreamFailureHandler(Serialization.Serializer<Orleans.Streams.StreamSequenceToken> serializer, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, bool faultOnFailure, string clusterId, Streaming.AzureStorage.AzureStorageOperationOptions azureStorageOptions, System.Func<TEntity> createEntity = null) { }

        public bool ShouldFaultSubsriptionOnError { get { throw null; } }

        public System.Threading.Tasks.Task InitAsync() { throw null; }

        public System.Threading.Tasks.Task OnDeliveryFailure(Runtime.GuidId subscriptionId, string streamProviderName, Runtime.StreamId streamId, Orleans.Streams.StreamSequenceToken sequenceToken) { throw null; }

        public System.Threading.Tasks.Task OnSubscriptionFailure(Runtime.GuidId subscriptionId, string streamProviderName, Runtime.StreamId streamId, Orleans.Streams.StreamSequenceToken sequenceToken) { throw null; }
    }

    public partial class StreamDeliveryFailureEntity : Azure.Data.Tables.ITableEntity
    {
        public Azure.ETag ETag { get { throw null; } set { } }

        public string PartitionKey { get { throw null; } set { } }

        public string RowKey { get { throw null; } set { } }

        public byte[] SequenceToken { get { throw null; } set { } }

        public string StreamGuid { get { throw null; } set { } }

        public string StreamNamespace { get { throw null; } set { } }

        public string StreamProviderName { get { throw null; } set { } }

        public System.Guid SubscriptionId { get { throw null; } set { } }

        public System.DateTimeOffset? Timestamp { get { throw null; } set { } }

        public virtual Orleans.Streams.StreamSequenceToken GetSequenceToken(Serialization.Serializer<Orleans.Streams.StreamSequenceToken> serializer) { throw null; }

        public static string MakeDefaultPartitionKey(string streamProviderName, string deploymentId) { throw null; }

        protected static long ReverseOrderTimestampTicks() { throw null; }

        public virtual void SetPartitionKey(string deploymentId) { }

        public virtual void SetRowkey() { }

        public virtual void SetSequenceToken(Serialization.Serializer<Orleans.Streams.StreamSequenceToken> serializer, Orleans.Streams.StreamSequenceToken token) { }
    }
}

namespace Orleans.Streaming.AzureStorage
{
    public partial class AzureStorageOperationOptions
    {
        public Azure.Data.Tables.TableClientOptions ClientOptions { get { throw null; } set { } }

        public AzureStoragePolicyOptions StoragePolicyOptions { get { throw null; } }

        public virtual string TableName { get { throw null; } set { } }

        public Azure.Data.Tables.TableServiceClient TableServiceClient { get { throw null; } set { } }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Func<System.Threading.Tasks.Task<Azure.Data.Tables.TableServiceClient>> createClientCallback) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(string connectionString) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.AzureSasCredential azureSasCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.Core.TokenCredential tokenCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.Data.Tables.TableSharedKeyCredential sharedKeyCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri) { }
    }

    public partial class AzureStorageOperationOptionsValidator<TOptions> : IConfigurationValidator where TOptions : AzureStorageOperationOptions
    {
        public AzureStorageOperationOptionsValidator(TOptions options, string name = null) { }

        public string Name { get { throw null; } }

        public TOptions Options { get { throw null; } }

        public virtual void ValidateConfiguration() { }
    }

    public partial class AzureStoragePolicyOptions
    {
        public System.TimeSpan CreationTimeout { get { throw null; } set { } }

        public int MaxBulkUpdateRows { get { throw null; } set { } }

        public int MaxCreationRetries { get { throw null; } set { } }

        public int MaxOperationRetries { get { throw null; } set { } }

        public System.TimeSpan OperationTimeout { get { throw null; } set { } }

        public System.TimeSpan PauseBetweenCreationRetries { get { throw null; } set { } }

        public System.TimeSpan PauseBetweenOperationRetries { get { throw null; } set { } }
    }
}
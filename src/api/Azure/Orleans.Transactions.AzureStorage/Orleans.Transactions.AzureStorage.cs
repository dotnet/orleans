//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class AzureTableTransactionalStateOptions : Transactions.AzureStorage.AzureStorageOperationOptions
    {
        public const int DEFAULT_INIT_STAGE = 10000;
        public int InitStage { get { throw null; } set { } }

        public override string TableName { get { throw null; } set { } }
    }

    public partial class AzureTableTransactionalStateOptionsValidator : Transactions.AzureStorage.AzureStorageOperationOptionsValidator<AzureTableTransactionalStateOptions>
    {
        public AzureTableTransactionalStateOptionsValidator(AzureTableTransactionalStateOptions options, string name) : base(default!, default!) { }
    }
}

namespace Orleans.Hosting
{
    public static partial class AzureTableTransactionServicecollectionExtensions
    {
    }

    public static partial class AzureTableTransactionSiloBuilderExtensions
    {
        public static ISiloBuilder AddAzureTableTransactionalStateStorage(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureTableTransactionalStateOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddAzureTableTransactionalStateStorage(this ISiloBuilder builder, string name, System.Action<Configuration.AzureTableTransactionalStateOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddAzureTableTransactionalStateStorageAsDefault(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AzureTableTransactionalStateOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddAzureTableTransactionalStateStorageAsDefault(this ISiloBuilder builder, System.Action<Configuration.AzureTableTransactionalStateOptions> configureOptions) { throw null; }
    }
}

namespace Orleans.Transactions.AzureStorage
{
    public partial class AzureStorageOperationOptions
    {
        public Azure.Data.Tables.TableClientOptions ClientOptions { get { throw null; } set { } }

        public AzureStoragePolicyOptions StoragePolicyOptions { get { throw null; } }

        public virtual string TableName { get { throw null; } set { } }

        public Azure.Data.Tables.TableServiceClient TableServiceClient { get { throw null; } set { } }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Func<System.Threading.Tasks.Task<Azure.Data.Tables.TableServiceClient>> createClientCallback) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(string connectionString) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.AzureSasCredential azureSasCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.Core.TokenCredential tokenCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.Data.Tables.TableSharedKeyCredential sharedKeyCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri) { }
    }

    public partial class AzureStorageOperationOptionsValidator<TOptions> : IConfigurationValidator where TOptions : AzureStorageOperationOptions
    {
        public AzureStorageOperationOptionsValidator(TOptions options, string name = null) { }

        public string Name { get { throw null; } }

        public TOptions Options { get { throw null; } }

        public virtual void ValidateConfiguration() { }
    }

    public partial class AzureStoragePolicyOptions
    {
        public System.TimeSpan CreationTimeout { get { throw null; } set { } }

        public int MaxBulkUpdateRows { get { throw null; } set { } }

        public int MaxCreationRetries { get { throw null; } set { } }

        public int MaxOperationRetries { get { throw null; } set { } }

        public System.TimeSpan OperationTimeout { get { throw null; } set { } }

        public System.TimeSpan PauseBetweenCreationRetries { get { throw null; } set { } }

        public System.TimeSpan PauseBetweenOperationRetries { get { throw null; } set { } }
    }

    public partial class AzureTableTransactionalStateStorageFactory : Abstractions.ITransactionalStateStorageFactory, ILifecycleParticipant<Runtime.ISiloLifecycle>
    {
        public AzureTableTransactionalStateStorageFactory(string name, Configuration.AzureTableTransactionalStateOptions options, Microsoft.Extensions.Options.IOptions<Configuration.ClusterOptions> clusterOptions, System.IServiceProvider services, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }

        public static Abstractions.ITransactionalStateStorageFactory Create(System.IServiceProvider services, string name) { throw null; }

        public Abstractions.ITransactionalStateStorage<TState> Create<TState>(string stateName, Runtime.IGrainContext context)
            where TState : class, new() { throw null; }

        public void Participate(Runtime.ISiloLifecycle lifecycle) { }
    }

    public partial class AzureTableTransactionalStateStorage<TState> : Abstractions.ITransactionalStateStorage<TState> where TState : class, new()
    {
        public AzureTableTransactionalStateStorage(Azure.Data.Tables.TableClient table, string partition, Newtonsoft.Json.JsonSerializerSettings JsonSettings, Microsoft.Extensions.Logging.ILogger<AzureTableTransactionalStateStorage<TState>> logger) { }

        public System.Threading.Tasks.Task<Abstractions.TransactionalStorageLoadResponse<TState>> Load() { throw null; }

        public System.Threading.Tasks.Task<string> Store(string expectedETag, Abstractions.TransactionalStateMetaData metadata, System.Collections.Generic.List<Abstractions.PendingTransactionState<TState>> statesToPrepare, long? commitUpTo, long? abortAfter) { throw null; }
    }
}
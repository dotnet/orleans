//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Hosting
{
    public static partial class HostingExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCosmosGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.Cosmos.CosmosGrainStorageOptions>>? configureOptions = null) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCosmosGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Persistence.Cosmos.CosmosGrainStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorage(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.Cosmos.CosmosGrainStorageOptions>>? configureOptions = null) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorage(this ISiloBuilder builder, string name, System.Action<Persistence.Cosmos.CosmosGrainStorageOptions> configureOptions, System.Type customPartitionKeyProviderType) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorage(this ISiloBuilder builder, string name, System.Action<Persistence.Cosmos.CosmosGrainStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorage(this ISiloBuilder builder, string name, System.Type customPartitionKeyProviderType, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.Cosmos.CosmosGrainStorageOptions>>? configureOptions = null) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorage<TPartitionKeyProvider>(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.Cosmos.CosmosGrainStorageOptions>>? configureOptions = null)
            where TPartitionKeyProvider : class, Persistence.Cosmos.IPartitionKeyProvider { throw null; }

        public static ISiloBuilder AddCosmosGrainStorage<TPartitionKeyProvider>(this ISiloBuilder builder, string name, System.Action<Persistence.Cosmos.CosmosGrainStorageOptions> configureOptions)
            where TPartitionKeyProvider : class, Persistence.Cosmos.IPartitionKeyProvider { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCosmosGrainStorageAsDefault(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.Cosmos.CosmosGrainStorageOptions>>? configureOptions = null) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddCosmosGrainStorageAsDefault(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Persistence.Cosmos.CosmosGrainStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.Cosmos.CosmosGrainStorageOptions>>? configureOptions = null) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Persistence.Cosmos.CosmosGrainStorageOptions> configureOptions, System.Type customPartitionKeyProviderType) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Persistence.Cosmos.CosmosGrainStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorageAsDefault(this ISiloBuilder builder, System.Type customPartitionKeyProviderType, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.Cosmos.CosmosGrainStorageOptions>>? configureOptions = null) { throw null; }

        public static ISiloBuilder AddCosmosGrainStorageAsDefault<TPartitionKeyProvider>(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.Cosmos.CosmosGrainStorageOptions>>? configureOptions = null)
            where TPartitionKeyProvider : class, Persistence.Cosmos.IPartitionKeyProvider { throw null; }

        public static ISiloBuilder AddCosmosGrainStorageAsDefault<TPartitionKeyProvider>(this ISiloBuilder builder, System.Action<Persistence.Cosmos.CosmosGrainStorageOptions> configureOptions)
            where TPartitionKeyProvider : class, Persistence.Cosmos.IPartitionKeyProvider { throw null; }
    }
}

namespace Orleans.Persistence.Cosmos
{
    [GenerateSerializer]
    public partial class CosmosConditionNotSatisfiedException : Storage.InconsistentStateException
    {
        public CosmosConditionNotSatisfiedException() { }

        [System.Obsolete]
        protected CosmosConditionNotSatisfiedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public CosmosConditionNotSatisfiedException(string grainType, Runtime.GrainId grainId, string collection, string storedEtag, string currentEtag) { }

        public CosmosConditionNotSatisfiedException(string msg, System.Exception exc) { }

        public CosmosConditionNotSatisfiedException(string errorMsg, string grainType, Runtime.GrainId grainId, string collection, string storedEtag, string currentEtag) { }

        public CosmosConditionNotSatisfiedException(string msg) { }

        [Id(2)]
        public string Collection { get { throw null; } }

        [Id(0)]
        public string GrainId { get { throw null; } }

        [Id(1)]
        public string GrainType { get { throw null; } }

        [System.Obsolete]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }

    public sealed partial class CosmosGrainStorage : Storage.IGrainStorage, ILifecycleParticipant<Runtime.ISiloLifecycle>
    {
        public CosmosGrainStorage(string name, CosmosGrainStorageOptions options, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, System.IServiceProvider serviceProvider, Microsoft.Extensions.Options.IOptions<Configuration.ClusterOptions> clusterOptions, IPartitionKeyProvider partitionKeyProvider, Serialization.Serializers.IActivatorProvider activatorProvider) { }

        public System.Threading.Tasks.Task ClearStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public void Participate(Runtime.ISiloLifecycle lifecycle) { }

        public System.Threading.Tasks.Task ReadStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public System.Threading.Tasks.Task WriteStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }
    }

    public partial class CosmosGrainStorageOptions : CosmosOptions
    {
        public const int DEFAULT_INIT_STAGE = 10000;
        public bool DeleteStateOnClear { get { throw null; } set { } }

        public int InitStage { get { throw null; } set { } }

        public string PartitionKeyPath { get { throw null; } set { } }

        public System.Collections.Generic.List<string> StateFieldsToIndex { get { throw null; } set { } }
    }

    public abstract partial class CosmosOptions
    {
        public bool CleanResourcesOnInitialization { get { throw null; } set { } }

        public Microsoft.Azure.Cosmos.CosmosClientOptions ClientOptions { get { throw null; } set { } }

        public string ContainerName { get { throw null; } set { } }

        public Microsoft.Azure.Cosmos.ThroughputProperties? ContainerThroughputProperties { get { throw null; } set { } }

        public string DatabaseName { get { throw null; } set { } }

        public int? DatabaseThroughput { get { throw null; } set { } }

        public bool IsResourceCreationEnabled { get { throw null; } set { } }

        public ICosmosOperationExecutor OperationExecutor { get { throw null; } set { } }

        public void ConfigureCosmosClient(System.Func<System.IServiceProvider, System.Threading.Tasks.ValueTask<Microsoft.Azure.Cosmos.CosmosClient>> createClient) { }

        public void ConfigureCosmosClient(string accountEndpoint, Azure.AzureKeyCredential authKeyOrResourceTokenCredential) { }

        public void ConfigureCosmosClient(string accountEndpoint, Azure.Core.TokenCredential tokenCredential) { }

        public void ConfigureCosmosClient(string accountEndpoint, string authKeyOrResourceToken) { }

        public void ConfigureCosmosClient(string connectionString) { }
    }

    public partial class CosmosOptionsValidator<TOptions> : IConfigurationValidator where TOptions : CosmosOptions
    {
        public CosmosOptionsValidator(TOptions options, string name) { }

        public void ValidateConfiguration() { }
    }

    public static partial class CosmosStorageFactory
    {
        public static CosmosGrainStorage Create(System.IServiceProvider services, string name) { throw null; }
    }

    public partial interface ICosmosOperationExecutor
    {
        System.Threading.Tasks.Task<TResult> ExecuteOperation<TArg, TResult>(System.Func<TArg, System.Threading.Tasks.Task<TResult>> func, TArg arg);
    }

    public partial interface IPartitionKeyProvider
    {
        System.Threading.Tasks.ValueTask<string> GetPartitionKey(string grainType, Runtime.GrainId grainId);
    }
}

namespace OrleansCodeGen.Orleans.Persistence.Cosmos
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_CosmosConditionNotSatisfiedException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_CosmosConditionNotSatisfiedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException instance) { }

        public global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_CosmosConditionNotSatisfiedException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException, global::Orleans.Storage.InconsistentStateException>
    {
        public Copier_CosmosConditionNotSatisfiedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }

        public override void DeepCopy(global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException input, global::Orleans.Persistence.Cosmos.CosmosConditionNotSatisfiedException output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }
}
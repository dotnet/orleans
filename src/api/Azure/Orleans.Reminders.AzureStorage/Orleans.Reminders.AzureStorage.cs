//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Hosting
{
    public static partial class AzureStorageReminderServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection UseAzureTableReminderService(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Reminders.AzureStorage.AzureTableReminderStorageOptions>> configureOptions) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection UseAzureTableReminderService(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Reminders.AzureStorage.AzureTableReminderStorageOptions> configure) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection UseAzureTableReminderService(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string connectionString) { throw null; }
    }

    public static partial class AzureStorageReminderSiloBuilderExtensions
    {
        public static ISiloBuilder UseAzureTableReminderService(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Reminders.AzureStorage.AzureTableReminderStorageOptions>> configureOptions) { throw null; }

        public static ISiloBuilder UseAzureTableReminderService(this ISiloBuilder builder, System.Action<Reminders.AzureStorage.AzureTableReminderStorageOptions> configure) { throw null; }

        public static ISiloBuilder UseAzureTableReminderService(this ISiloBuilder builder, string connectionString) { throw null; }
    }
}

namespace Orleans.Reminders.AzureStorage
{
    public partial class AzureStorageOperationOptions
    {
        public Azure.Data.Tables.TableClientOptions ClientOptions { get { throw null; } set { } }

        public AzureStoragePolicyOptions StoragePolicyOptions { get { throw null; } }

        public virtual string TableName { get { throw null; } set { } }

        public Azure.Data.Tables.TableServiceClient TableServiceClient { get { throw null; } set { } }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Func<System.Threading.Tasks.Task<Azure.Data.Tables.TableServiceClient>> createClientCallback) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(string connectionString) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.AzureSasCredential azureSasCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.Core.TokenCredential tokenCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri, Azure.Data.Tables.TableSharedKeyCredential sharedKeyCredential) { }

        [System.Obsolete("Set the TableServiceClient property directly.")]
        public void ConfigureTableServiceClient(System.Uri serviceUri) { }
    }

    public partial class AzureStorageOperationOptionsValidator<TOptions> : IConfigurationValidator where TOptions : AzureStorageOperationOptions
    {
        public AzureStorageOperationOptionsValidator(TOptions options, string name = null) { }

        public string Name { get { throw null; } }

        public TOptions Options { get { throw null; } }

        public virtual void ValidateConfiguration() { }
    }

    public partial class AzureStoragePolicyOptions
    {
        public System.TimeSpan CreationTimeout { get { throw null; } set { } }

        public int MaxBulkUpdateRows { get { throw null; } set { } }

        public int MaxCreationRetries { get { throw null; } set { } }

        public int MaxOperationRetries { get { throw null; } set { } }

        public System.TimeSpan OperationTimeout { get { throw null; } set { } }

        public System.TimeSpan PauseBetweenCreationRetries { get { throw null; } set { } }

        public System.TimeSpan PauseBetweenOperationRetries { get { throw null; } set { } }
    }

    public partial class AzureTableReminderStorageOptions : AzureStorageOperationOptions
    {
        public const string DEFAULT_TABLE_NAME = "OrleansReminders";
        public override string TableName { get { throw null; } set { } }
    }

    public partial class AzureTableReminderStorageOptionsValidator : AzureStorageOperationOptionsValidator<AzureTableReminderStorageOptions>
    {
        public AzureTableReminderStorageOptionsValidator(AzureTableReminderStorageOptions options, string name) : base(default!, default!) { }
    }
}

namespace Orleans.Runtime.ReminderService
{
    public sealed partial class AzureBasedReminderTable : IReminderTable
    {
        public AzureBasedReminderTable(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.ClusterOptions> clusterOptions, Microsoft.Extensions.Options.IOptions<Reminders.AzureStorage.AzureTableReminderStorageOptions> storageOptions) { }

        public System.Threading.Tasks.Task<ReminderEntry> ReadRow(GrainId grainId, string reminderName) { throw null; }

        public System.Threading.Tasks.Task<ReminderTableData> ReadRows(GrainId grainId) { throw null; }

        public System.Threading.Tasks.Task<ReminderTableData> ReadRows(uint begin, uint end) { throw null; }

        public System.Threading.Tasks.Task<bool> RemoveRow(GrainId grainId, string reminderName, string eTag) { throw null; }

        public System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        public System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        public System.Threading.Tasks.Task TestOnlyClearTable() { throw null; }

        public System.Threading.Tasks.Task<string> UpsertRow(ReminderEntry entry) { throw null; }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class AdoNetClusteringClientOptions
    {
        [Redact]
        public string ConnectionString { get { throw null; } set { } }

        public string Invariant { get { throw null; } set { } }
    }

    public partial class AdoNetClusteringClientOptionsValidator : IConfigurationValidator
    {
        public AdoNetClusteringClientOptionsValidator(Microsoft.Extensions.Options.IOptions<AdoNetClusteringClientOptions> options) { }

        public void ValidateConfiguration() { }
    }

    public partial class AdoNetClusteringSiloOptions
    {
        [Redact]
        public string ConnectionString { get { throw null; } set { } }

        public string Invariant { get { throw null; } set { } }
    }

    public partial class AdoNetClusteringSiloOptionsValidator : IConfigurationValidator
    {
        public AdoNetClusteringSiloOptionsValidator(Microsoft.Extensions.Options.IOptions<AdoNetClusteringSiloOptions> options) { }

        public void ValidateConfiguration() { }
    }
}

namespace Orleans.Hosting
{
    public static partial class AdoNetHostingExtensions
    {
        public static IClientBuilder UseAdoNetClustering(this IClientBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AdoNetClusteringClientOptions>> configureOptions) { throw null; }

        public static IClientBuilder UseAdoNetClustering(this IClientBuilder builder, System.Action<Configuration.AdoNetClusteringClientOptions> configureOptions) { throw null; }

        public static ISiloBuilder UseAdoNetClustering(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AdoNetClusteringSiloOptions>> configureOptions) { throw null; }

        public static ISiloBuilder UseAdoNetClustering(this ISiloBuilder builder, System.Action<Configuration.AdoNetClusteringSiloOptions> configureOptions) { throw null; }
    }
}

namespace Orleans.Runtime.Membership
{
    public partial class AdoNetGatewayListProvider : Orleans.Messaging.IGatewayListProvider
    {
        public AdoNetGatewayListProvider(Microsoft.Extensions.Logging.ILogger<AdoNetGatewayListProvider> logger, System.IServiceProvider serviceProvider, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.AdoNetClusteringClientOptions> options, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.GatewayOptions> gatewayOptions, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.ClusterOptions> clusterOptions) { }

        public bool IsUpdatable { get { throw null; } }

        public System.TimeSpan MaxStaleness { get { throw null; } }

        public System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Uri>> GetGateways() { throw null; }

        public System.Threading.Tasks.Task InitializeGatewayListProvider() { throw null; }
    }
}

namespace Orleans.Runtime.MembershipService
{
    public partial class AdoNetClusteringTable : IMembershipTable
    {
        public AdoNetClusteringTable(System.IServiceProvider serviceProvider, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.ClusterOptions> clusterOptions, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.AdoNetClusteringSiloOptions> clusteringOptions, Microsoft.Extensions.Logging.ILogger<AdoNetClusteringTable> logger) { }

        public System.Threading.Tasks.Task CleanupDefunctSiloEntries(System.DateTimeOffset beforeDate) { throw null; }

        public System.Threading.Tasks.Task DeleteMembershipTableEntries(string clusterId) { throw null; }

        public System.Threading.Tasks.Task InitializeMembershipTable(bool tryInitTableVersion) { throw null; }

        public System.Threading.Tasks.Task<bool> InsertRow(MembershipEntry entry, TableVersion tableVersion) { throw null; }

        public System.Threading.Tasks.Task<MembershipTableData> ReadAll() { throw null; }

        public System.Threading.Tasks.Task<MembershipTableData> ReadRow(SiloAddress key) { throw null; }

        public System.Threading.Tasks.Task UpdateIAmAlive(MembershipEntry entry) { throw null; }

        public System.Threading.Tasks.Task<bool> UpdateRow(MembershipEntry entry, string etag, TableVersion tableVersion) { throw null; }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class AdoNetGrainStorageOptions : Storage.IStorageProviderSerializerOptions
    {
        public const string DEFAULT_ADONET_INVARIANT = "System.Data.SqlClient";
        public const int DEFAULT_INIT_STAGE = 10000;
        [Redact]
        public string ConnectionString { get { throw null; } set { } }

        public Storage.IGrainStorageSerializer GrainStorageSerializer { get { throw null; } set { } }

        public Storage.IStorageHasherPicker HashPicker { get { throw null; } set { } }

        public int InitStage { get { throw null; } set { } }

        public string Invariant { get { throw null; } set { } }

        public void UseOrleans3CompatibleHasher() { }
    }

    public partial class AdoNetGrainStorageOptionsValidator : IConfigurationValidator
    {
        public AdoNetGrainStorageOptionsValidator(AdoNetGrainStorageOptions configurationOptions, string name) { }

        public void ValidateConfiguration() { }
    }

    public partial class DefaultAdoNetGrainStorageOptionsHashPickerConfigurator : Microsoft.Extensions.Options.IPostConfigureOptions<AdoNetGrainStorageOptions>
    {
        public void PostConfigure(string name, AdoNetGrainStorageOptions options) { }
    }
}

namespace Orleans.Hosting
{
    public static partial class AdoNetGrainStorageServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAdoNetGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Configuration.AdoNetGrainStorageOptions> configureOptions) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAdoNetGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AdoNetGrainStorageOptions>> configureOptions = null) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAdoNetGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Configuration.AdoNetGrainStorageOptions> configureOptions) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddAdoNetGrainStorageAsDefault(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AdoNetGrainStorageOptions>> configureOptions = null) { throw null; }
    }

    public static partial class AdoNetGrainStorageSiloBuilderExtensions
    {
        public static ISiloBuilder AddAdoNetGrainStorage(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AdoNetGrainStorageOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddAdoNetGrainStorage(this ISiloBuilder builder, string name, System.Action<Configuration.AdoNetGrainStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddAdoNetGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.AdoNetGrainStorageOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddAdoNetGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Configuration.AdoNetGrainStorageOptions> configureOptions) { throw null; }
    }
}

namespace Orleans.Storage
{
    [System.Diagnostics.DebuggerDisplay("Name = {Name}, ConnectionString = {Storage.ConnectionString}")]
    public partial class AdoNetGrainStorage : IGrainStorage, ILifecycleParticipant<Runtime.ISiloLifecycle>
    {
        public const string BinaryFormatSerializerTag = "BinaryFormatSerializer";
        public const string DefaultInitializationQuery = "SELECT QueryKey, QueryText FROM OrleansQuery WHERE QueryKey = 'WriteToStorageKey' OR QueryKey = 'ReadFromStorageKey' OR QueryKey = 'ClearStorageKey'";
        public const string JsonFormatSerializerTag = "JsonFormatSerializer";
        public const string XmlFormatSerializerTag = "XmlFormatSerializer";
        public AdoNetGrainStorage(Serialization.Serializers.IActivatorProvider activatorProvider, Microsoft.Extensions.Logging.ILogger<AdoNetGrainStorage> logger, Microsoft.Extensions.Options.IOptions<Configuration.AdoNetGrainStorageOptions> options, Microsoft.Extensions.Options.IOptions<Configuration.ClusterOptions> clusterOptions, string name) { }

        public RelationalStorageProviderQueries CurrentOperationalQueries { get { throw null; } set { } }

        public IStorageHasherPicker HashPicker { get { throw null; } set { } }

        public IGrainStorageSerializer Serializer { get { throw null; } set { } }

        public System.Threading.Tasks.Task ClearStateAsync<T>(string grainType, Runtime.GrainId grainReference, IGrainState<T> grainState) { throw null; }

        public void Participate(Runtime.ISiloLifecycle lifecycle) { }

        public System.Threading.Tasks.Task ReadStateAsync<T>(string grainType, Runtime.GrainId grainReference, IGrainState<T> grainState) { throw null; }

        public System.Threading.Tasks.Task WriteStateAsync<T>(string grainType, Runtime.GrainId grainReference, IGrainState<T> grainState) { throw null; }
    }

    public static partial class AdoNetGrainStorageFactory
    {
        public static AdoNetGrainStorage Create(System.IServiceProvider services, string name) { throw null; }
    }

    public partial interface IHasher
    {
        string Description { get; }

        int Hash(byte[] data);
    }

    public partial interface IStorageHasherPicker
    {
        System.Collections.Generic.ICollection<IHasher> HashProviders { get; }

        IHasher PickHasher<T>(string serviceId, string storageProviderInstanceName, string grainType, Runtime.GrainId grainId, IGrainState<T> grainState, string tag = null);
    }

    public partial class Orleans3CompatibleStorageHashPicker : IStorageHasherPicker
    {
        public System.Collections.Generic.ICollection<IHasher> HashProviders { get { throw null; } }

        public IHasher PickHasher<T>(string serviceId, string storageProviderInstanceName, string grainType, Runtime.GrainId grainId, IGrainState<T> grainState, string tag = null) { throw null; }
    }

    public sealed partial class OrleansDefaultHasher : IHasher
    {
        public string Description { get { throw null; } }

        public int Hash(byte[] data) { throw null; }
    }

    public partial class RelationalStorageProviderQueries
    {
        public RelationalStorageProviderQueries(string writeToStorage, string readFromStorage, string clearState) { }

        public string ClearState { get { throw null; } set { } }

        public string ReadFromStorage { get { throw null; } set { } }

        public string WriteToStorage { get { throw null; } }
    }

    public partial class StorageHasherPicker : IStorageHasherPicker
    {
        public StorageHasherPicker(System.Collections.Generic.IEnumerable<IHasher> hashProviders) { }

        public System.Collections.Generic.ICollection<IHasher> HashProviders { get { throw null; } }

        public IHasher PickHasher<T>(string serviceId, string storageProviderInstanceName, string grainType, Runtime.GrainId grainId, IGrainState<T> grainState, string tag = null) { throw null; }
    }
}
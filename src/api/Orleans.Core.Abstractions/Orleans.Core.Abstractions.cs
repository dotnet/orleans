//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans
{
    public readonly partial struct DeactivationReason
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public DeactivationReason(DeactivationReasonCode code, System.Exception exception, string text) { }

        public DeactivationReason(DeactivationReasonCode code, string text) { }

        public string Description { get { throw null; } }

        public System.Exception Exception { get { throw null; } }

        public DeactivationReasonCode ReasonCode { get { throw null; } }

        public override readonly string ToString() { throw null; }
    }

    [GenerateSerializer]
    public enum DeactivationReasonCode : byte
    {
        None = 0,
        ShuttingDown = 1,
        ActivationFailed = 2,
        DirectoryFailure = 3,
        ActivationIdle = 4,
        ActivationUnresponsive = 5,
        DuplicateActivation = 6,
        IncompatibleRequest = 7,
        ApplicationError = 8,
        ApplicationRequested = 9,
        Migrating = 10,
        RuntimeRequested = 11
    }

    public enum ErrorCode
    {
        Runtime = 100000,
        Runtime_Error_100001 = 100001,
        Logger_ProcessCrashing = 100002,
        Runtime_Error_100002 = 100002,
        Runtime_Error_100003 = 100003,
        Runtime_Error_100004 = 100004,
        Runtime_Error_100005 = 100005,
        Runtime_Error_100006 = 100006,
        Runtime_Error_100007 = 100007,
        Runtime_Error_100008 = 100008,
        Runtime_Error_100009 = 100009,
        Runtime_Error_100010 = 100010,
        Runtime_Error_100011 = 100011,
        Runtime_Error_100012 = 100012,
        Runtime_Error_100013 = 100013,
        Runtime_Error_100014 = 100014,
        Runtime_Error_100015 = 100015,
        Runtime_Error_100016 = 100016,
        Runtime_Error_100017 = 100017,
        Runtime_Error_100018 = 100018,
        Runtime_Error_100019 = 100019,
        Runtime_Error_100020 = 100020,
        ProxyClient_ReceiveError = 100021,
        Runtime_Error_100021 = 100021,
        Runtime_Error_100022 = 100022,
        Runtime_Error_100023 = 100023,
        Runtime_Error_100024 = 100024,
        Runtime_Error_100025 = 100025,
        Runtime_Error_100026 = 100026,
        Runtime_Error_100027 = 100027,
        Runtime_Error_100028 = 100028,
        Runtime_Error_100029 = 100029,
        Runtime_Error_100030 = 100030,
        Runtime_Error_100031 = 100031,
        Runtime_Error_100032 = 100032,
        Runtime_Error_100033 = 100033,
        Ser_IncompatibleIntermediateType = 100033,
        Runtime_Error_100034 = 100034,
        Ser_CannotConstructBaseObj = 100034,
        Runtime_Error_100035 = 100035,
        Ser_IncompatibleType = 100035,
        Runtime_Error_100036 = 100036,
        Runtime_Error_100037 = 100037,
        TimerCallbackError = 100037,
        Runtime_Error_100039 = 100039,
        Runtime_Error_100040 = 100040,
        Runtime_Error_100041 = 100041,
        Runtime_Error_100042 = 100042,
        Runtime_Error_100043 = 100043,
        Runtime_Error_100044 = 100044,
        Runtime_Error_100045 = 100045,
        Runtime_Error_100046 = 100046,
        Loader_NotGrainAssembly = 100047,
        Runtime_Error_100047 = 100047,
        Loader_TypeLoadError = 100048,
        Runtime_Error_100048 = 100048,
        Loader_ProxyLoadError = 100049,
        Runtime_Error_100049 = 100049,
        Runtime_Error_100050 = 100050,
        Runtime_Error_100051 = 100051,
        Runtime_Error_100052 = 100052,
        Runtime_Error_100053 = 100053,
        Runtime_Error_100054 = 100054,
        Runtime_Error_100055 = 100055,
        Runtime_Error_100056 = 100056,
        Runtime_Error_100057 = 100057,
        Runtime_Error_100058 = 100058,
        Runtime_Error_100059 = 100059,
        Runtime_Error_100060 = 100060,
        Runtime_Error_100061 = 100061,
        Runtime_Error_100062 = 100062,
        Runtime_Error_100063 = 100063,
        Runtime_Error_100064 = 100064,
        Runtime_Error_100065 = 100065,
        Runtime_Error_100066 = 100066,
        Runtime_Error_100067 = 100067,
        Runtime_Error_100068 = 100068,
        Runtime_Error_100069 = 100069,
        Runtime_Error_100070 = 100070,
        Dispatcher_SelectTarget_Failed = 100071,
        Runtime_Error_100071 = 100071,
        Dispatcher_InvalidEnum_Direction = 100072,
        Runtime_Error_100072 = 100072,
        Dispatcher_NoCallbackForRejectionResp = 100073,
        Runtime_Error_100073 = 100073,
        Runtime_Error_100074 = 100074,
        Dispatcher_InvalidEnum_RejectionType = 100075,
        Runtime_Error_100075 = 100075,
        Dispatcher_NoCallbackForResp = 100076,
        Runtime_Error_100076 = 100076,
        Dispatcher_InvalidMsg_Direction = 100077,
        Runtime_Error_100077 = 100077,
        Runtime_Error_100078 = 100078,
        Runtime_Error_100079 = 100079,
        Runtime_Error_100080 = 100080,
        Runtime_Error_100081 = 100081,
        Runtime_Error_100082 = 100082,
        Runtime_Error_100083 = 100083,
        Runtime_Error_100084 = 100084,
        Runtime_Error_100085 = 100085,
        Runtime_Error_100086 = 100086,
        Runtime_Error_100087 = 100087,
        Runtime_Error_100088 = 100088,
        Runtime_Error_100089 = 100089,
        Runtime_Error_100090 = 100090,
        Runtime_Error_100091 = 100091,
        Runtime_Error_100092 = 100092,
        Runtime_Error_100093 = 100093,
        Runtime_Error_100094 = 100094,
        Runtime_Error_100095 = 100095,
        Runtime_Error_100096 = 100096,
        Runtime_Error_100097 = 100097,
        Runtime_Error_100098 = 100098,
        Runtime_Error_100099 = 100099,
        Runtime_Error_100100 = 100100,
        Runtime_Error_100101 = 100101,
        Runtime_Error_100102 = 100102,
        Runtime_Error_100103 = 100103,
        Runtime_Error_100104 = 100104,
        Runtime_Error_100105 = 100105,
        Runtime_Error_100106 = 100106,
        Runtime_Error_100107 = 100107,
        Runtime_Error_100108 = 100108,
        Runtime_Error_100109 = 100109,
        Runtime_Error_100110 = 100110,
        Runtime_Error_100111 = 100111,
        Runtime_Error_100112 = 100112,
        Runtime_Error_100113 = 100113,
        Runtime_Error_100114 = 100114,
        Runtime_Error_100115 = 100115,
        Runtime_Error_100116 = 100116,
        Runtime_Error_100117 = 100117,
        Runtime_Error_100118 = 100118,
        Runtime_Error_100119 = 100119,
        Runtime_Error_100120 = 100120,
        Runtime_Error_100121 = 100121,
        Runtime_Error_100122 = 100122,
        Runtime_Error_100123 = 100123,
        Runtime_Error_100124 = 100124,
        Runtime_Error_100125 = 100125,
        Runtime_Error_100126 = 100126,
        Runtime_Error_100127 = 100127,
        Runtime_Error_100128 = 100128,
        Runtime_Error_100129 = 100129,
        Runtime_Error_100130 = 100130,
        Runtime_Error_100131 = 100131,
        Runtime_Error_100132 = 100132,
        Runtime_Error_100133 = 100133,
        Runtime_Error_100134 = 100134,
        Runtime_Error_100135 = 100135,
        Runtime_Error_100136 = 100136,
        Runtime_Error_100137 = 100137,
        Runtime_Error_100138 = 100138,
        Runtime_Error_100139 = 100139,
        Runtime_Error_100140 = 100140,
        Runtime_Error_100141 = 100141,
        Runtime_Error_100142 = 100142,
        Runtime_Error_100143 = 100143,
        Runtime_Error_100144 = 100144,
        Runtime_Error_100145 = 100145,
        Runtime_Error_100146 = 100146,
        Dispatcher_Intermediate_GetOrCreateActivation = 100147,
        Runtime_Error_100147 = 100147,
        Dispatcher_NoTargetActivation = 100148,
        Runtime_Error_100148 = 100148,
        Runtime_Error_100149 = 100149,
        Runtime_Error_100150 = 100150,
        SiloHeartbeatTimerStalled = 100150,
        Runtime_Error_100151 = 100151,
        Dispatcher_QueueingRequestBadTargetState = 100152,
        Runtime_Error_100152 = 100152,
        Runtime_Error_100153 = 100153,
        Runtime_Error_100154 = 100154,
        Runtime_Error_100155 = 100155,
        Runtime_Error_100156 = 100156,
        Runtime_Error_100157 = 100157,
        Runtime_Error_100158 = 100158,
        ProxyClient_SerializationError = 100159,
        Runtime_Error_100159 = 100159,
        Runtime_Error_100160 = 100160,
        ProxyClient_SocketSendError = 100161,
        Runtime_Error_100161 = 100161,
        Runtime_Error_100162 = 100162,
        ProxyClient_ByteCountMismatch = 100163,
        Runtime_Error_100163 = 100163,
        Runtime_Error_100164 = 100164,
        Runtime_Error_100165 = 100165,
        Runtime_Error_100166 = 100166,
        Runtime_Error_100167 = 100167,
        Runtime_Error_100168 = 100168,
        Runtime_Error_100169 = 100169,
        Runtime_Error_100170 = 100170,
        Runtime_Error_100171 = 100171,
        Runtime_Error_100172 = 100172,
        Runtime_Error_100173 = 100173,
        Runtime_Error_100174 = 100174,
        Runtime_Error_100175 = 100175,
        Runtime_Error_100176 = 100176,
        Runtime_Error_100177 = 100177,
        ProxyClient_CannotConnect = 100178,
        Runtime_Error_100178 = 100178,
        Runtime_Error_100179 = 100179,
        Runtime_Error_100180 = 100180,
        Runtime_Error_100181 = 100181,
        Runtime_Error_100182 = 100182,
        Runtime_Error_100183 = 100183,
        Runtime_Error_100184 = 100184,
        Runtime_Error_100185 = 100185,
        Runtime_Error_100186 = 100186,
        Runtime_Error_100187 = 100187,
        Runtime_Error_100188 = 100188,
        Runtime_Error_100189 = 100189,
        Runtime_Error_100190 = 100190,
        Runtime_Error_100191 = 100191,
        Runtime_Error_100192 = 100192,
        Runtime_Error_100193 = 100193,
        Runtime_Error_100194 = 100194,
        Runtime_Error_100195 = 100195,
        Runtime_Error_100196 = 100196,
        Runtime_Error_100197 = 100197,
        Runtime_Error_100198 = 100198,
        Runtime_Error_100199 = 100199,
        Runtime_Error_100200 = 100200,
        Runtime_Error_100201 = 100201,
        Runtime_Error_100202 = 100202,
        Runtime_Error_100203 = 100203,
        Runtime_Error_100204 = 100204,
        Runtime_Error_100205 = 100205,
        Runtime_Error_100206 = 100206,
        Runtime_Error_100207 = 100207,
        Runtime_Error_100208 = 100208,
        Runtime_Error_100209 = 100209,
        Runtime_Error_100210 = 100210,
        Runtime_Error_100211 = 100211,
        Runtime_Error_100212 = 100212,
        Runtime_Error_100213 = 100213,
        Runtime_Error_100214 = 100214,
        Runtime_Error_100215 = 100215,
        Runtime_Error_100216 = 100216,
        Runtime_Error_100217 = 100217,
        Runtime_Error_100218 = 100218,
        Runtime_Error_100219 = 100219,
        Runtime_Error_100220 = 100220,
        Runtime_Error_100221 = 100221,
        Runtime_Error_100222 = 100222,
        Runtime_Error_100223 = 100223,
        Runtime_Error_100224 = 100224,
        MembershipCantWriteLivenessDisabled = 100225,
        Runtime_Error_100225 = 100225,
        Runtime_Error_100226 = 100226,
        Runtime_Error_100227 = 100227,
        Runtime_Error_100228 = 100228,
        Runtime_Error_100229 = 100229,
        Runtime_Error_100230 = 100230,
        Runtime_Error_100231 = 100231,
        Runtime_Error_100232 = 100232,
        Runtime_Error_100233 = 100233,
        Runtime_Error_100234 = 100234,
        Runtime_Error_100235 = 100235,
        Runtime_Error_100236 = 100236,
        Runtime_Error_100237 = 100237,
        Runtime_Error_100238 = 100238,
        Runtime_Error_100239 = 100239,
        Runtime_Error_100240 = 100240,
        Runtime_Error_100241 = 100241,
        Runtime_Error_100242 = 100242,
        Runtime_Error_100243 = 100243,
        Runtime_Error_100244 = 100244,
        Runtime_Error_100245 = 100245,
        Runtime_Error_100246 = 100246,
        Runtime_Error_100247 = 100247,
        Runtime_Error_100248 = 100248,
        Runtime_Error_100249 = 100249,
        Runtime_Error_100250 = 100250,
        Runtime_Error_100251 = 100251,
        Runtime_Error_100252 = 100252,
        Runtime_Error_100253 = 100253,
        Runtime_Error_100254 = 100254,
        Runtime_Error_100255 = 100255,
        Runtime_Error_100256 = 100256,
        Runtime_Error_100257 = 100257,
        Runtime_Error_100258 = 100258,
        Runtime_Error_100259 = 100259,
        Runtime_Error_100260 = 100260,
        Runtime_Error_100261 = 100261,
        Runtime_Error_100262 = 100262,
        Runtime_Error_100263 = 100263,
        Runtime_Error_100264 = 100264,
        Runtime_Error_100265 = 100265,
        Runtime_Error_100266 = 100266,
        Runtime_Error_100267 = 100267,
        Runtime_Error_100268 = 100268,
        Runtime_Error_100269 = 100269,
        Runtime_Error_100270 = 100270,
        Runtime_Error_100271 = 100271,
        Runtime_Error_100272 = 100272,
        Runtime_Error_100273 = 100273,
        Runtime_Error_100274 = 100274,
        Runtime_Error_100275 = 100275,
        Runtime_Error_100276 = 100276,
        Runtime_Error_100277 = 100277,
        Runtime_Error_100278 = 100278,
        Runtime_Error_100279 = 100279,
        Runtime_Error_100280 = 100280,
        Runtime_Error_100281 = 100281,
        Runtime_Error_100282 = 100282,
        Runtime_Error_100283 = 100283,
        Runtime_Error_100284 = 100284,
        Runtime_Error_100285 = 100285,
        Runtime_Error_100286 = 100286,
        Runtime_Error_100287 = 100287,
        Runtime_Error_100288 = 100288,
        Runtime_Error_100289 = 100289,
        Runtime_Error_100290 = 100290,
        Runtime_Error_100291 = 100291,
        Runtime_Error_100292 = 100292,
        Runtime_Error_100293 = 100293,
        Runtime_Error_100294 = 100294,
        Runtime_Error_100295 = 100295,
        Runtime_Error_100296 = 100296,
        Runtime_Error_100297 = 100297,
        Runtime_Error_100298 = 100298,
        Dispatcher_InjectingRejection = 100299,
        Runtime_Error_100299 = 100299,
        Dispatcher_InjectingMessageLoss = 100300,
        Runtime_Error_100300 = 100300,
        Runtime_Error_100301 = 100301,
        Runtime_Error_100302 = 100302,
        Dispatcher_UnknownTypeCode = 100303,
        Runtime_Error_100303 = 100303,
        Runtime_Error_100304 = 100304,
        Runtime_Error_100305 = 100305,
        Runtime_Error_100306 = 100306,
        Runtime_Error_100307 = 100307,
        Runtime_Error_100308 = 100308,
        Runtime_Error_100309 = 100309,
        Runtime_Error_100310 = 100310,
        Runtime_Error_100311 = 100311,
        Runtime_Error_100312 = 100312,
        ClientInitializing = 100313,
        ClientStarting = 100314,
        ClientError = 100315,
        Runtime_Error_100316 = 100316,
        Runtime_Error_100317 = 100317,
        Runtime_Error_100318 = 100318,
        Runtime_Error_100319 = 100319,
        Runtime_Error_100320 = 100320,
        Runtime_Error_100321 = 100321,
        GrainInvokeException = 100322,
        Runtime_Error_100323 = 100323,
        Runtime_Error_100324 = 100324,
        Runtime_Error_100325 = 100325,
        Runtime_Error_100326 = 100326,
        Runtime_Error_100327 = 100327,
        Runtime_Error_100328 = 100328,
        Runtime_Error_100329 = 100329,
        Runtime_Error_100330 = 100330,
        Runtime_Error_100331 = 100331,
        SiloBase = 100400,
        SiloStarting = 100401,
        SiloStarted = 100402,
        SiloInitializing = 100403,
        SiloGcSetting = 100404,
        SiloGcWarning = 100405,
        SiloSetDeploymentId = 100406,
        SiloSetSiloEndpoint = 100407,
        SiloSetProxyEndpoint = 100408,
        SiloSetSeedNode = 100409,
        SiloAddSeedNode = 100410,
        SiloSetPrimaryNode = 100411,
        SiloSetWorkingDir = 100412,
        SiloStopped = 100413,
        SiloStopping = 100414,
        SiloInitConfig = 100415,
        SiloDebugDump = 100416,
        SiloShuttingDown = 100417,
        SiloShutDown = 100418,
        SiloFailedToStopMembership = 100419,
        SiloIgnoreErrorDuringStop = 100420,
        SiloCannotResetHeartbeatTimer = 100421,
        SiloInitializingFinished = 100422,
        SiloSetSiloType = 100423,
        SiloStartupEventName = 100424,
        SiloStartupEventCreated = 100425,
        SiloStartupEventOpened = 100426,
        SiloStopInProgress = 100427,
        WaitingForSiloStop = 100428,
        CannotCheckRoleEnvironment = 100429,
        SiloConfiguredThreadPool = 100430,
        SiloFailedToConfigureThreadPool = 100431,
        SetSiloLivenessType = 100434,
        SiloEndpointConfigError = 100435,
        SiloConfiguredServicePointManager = 100436,
        SiloCallingProviderInit = 100437,
        SetReminderServiceType = 100438,
        SiloStartError = 100439,
        SiloConfigDeprecated = 100440,
        SiloShutdownEventName = 100441,
        SiloShutdownEventCreated = 100442,
        SiloShutdownEventOpened = 100443,
        SiloShutdownEventReceived = 100444,
        SiloLoadedDI = 100445,
        SiloFailedToLoadDI = 100446,
        SiloFileNotFoundLoadingDI = 100447,
        SiloStartupEventFailure = 100448,
        SiloShutdownEventFailure = 100449,
        LifecycleStartFailure = 100450,
        LifecycleStopFailure = 100451,
        SiloStartPerfMeasure = 100452,
        LifecycleStagesReport = 100453,
        CatalogBase = 100500,
        CatalogNonExistingActivation1 = 100501,
        Catalog_UnregisterManyAsync = 100502,
        Catalog_DestroyActivations = 100503,
        Catalog_UnknownActivation = 100504,
        Catalog_ActivationException = 100505,
        Catalog_GetApproximateSiloStatuses = 100506,
        Catalog_BeforeCollection = 100507,
        Catalog_AfterCollection = 100508,
        Catalog_ShutdownActivations_1 = 100509,
        CatalogNonExistingActivation2 = 100510,
        Catalog_BeforeCallingActivate = 100511,
        Catalog_AfterCallingActivate = 100512,
        Catalog_ErrorCallingActivate = 100513,
        Catalog_BeforeCallingDeactivate = 100514,
        Catalog_AfterCallingDeactivate = 100515,
        Catalog_ErrorCallingDeactivate = 100516,
        Catalog_MissingTypeOnCreate = 100517,
        Catalog_ResendDuplicateFailed = 100518,
        Catalog_NullGetTypeAndStrategies = 100519,
        Catalog_DuplicateActivation = 100520,
        Catalog_RegistrationFailure = 100521,
        Catalog_Warn_ActivationTooManyRequests = 100522,
        Catalog_Reject_ActivationTooManyRequests = 100523,
        Catalog_SiloStatusChangeNotification = 100524,
        Catalog_SiloStatusChangeNotification_Exception = 100525,
        Catalog_AttemptToCollectActivationEarly = 100526,
        Catalog_DeactivateActivation_Exception = 100527,
        Catalog_ActivationDirectory_Statistics = 100528,
        Catalog_UnregisterMessageTarget1 = 100529,
        Catalog_UnregisterMessageTarget2 = 100530,
        Catalog_UnregisterMessageTarget3 = 100531,
        Catalog_UnregisterMessageTarget4 = 100532,
        Catalog_Failed_SetupActivationState = 100533,
        Catalog_Failed_InvokeActivate = 100534,
        Catalog_RerouteAllQueuedMessages = 100535,
        Catalog_WaitForAllTimersToFinish_Exception = 100536,
        Catalog_ActivationCollector_BadState_1 = 100537,
        Catalog_ActivationCollector_BadState_2 = 100538,
        Catalog_DestroyActivations_Done = 100539,
        Catalog_ShutdownActivations_2 = 100540,
        Catalog_ShutdownActivations_3 = 100541,
        Catalog_DeactivateStreamResources_Exception = 100542,
        Catalog_FinishDeactivateActivation_Exception = 100543,
        Catalog_FinishGrainDeactivateAndCleanupStreams_Exception = 100544,
        Catalog_DeactivateAllActivations = 100545,
        Catalog_ActivationCollector_BadState_3 = 100546,
        Catalog_UnregisterAsync = 100547,
        MembershipBase = 100600,
        MembershipNodeMigrated = 100601,
        MembershipNodeRestarted = 100602,
        MembershipStarting = 100603,
        MembershipBecomeActive = 100604,
        MembershipFinishBecomeActive = 100605,
        MembershipShutDown = 100606,
        MembershipStop = 100607,
        MembershipReadTable = 100608,
        MembershipKillMyself = 100609,
        MembershipVotingForKill = 100610,
        MembershipMarkingAsDead = 100611,
        MembershipWatchList = 100612,
        MembershipMissedPing = 100613,
        MembershipSendingPreJoinPing = 100614,
        MembershipFailedToWrite = 100615,
        MembershipFailedToWriteConditional = 100616,
        MembershipFoundMyselfDead1 = 100617,
        MembershipFoundMyselfDead2 = 100618,
        MembershipDetectedOlder = 100619,
        MembershipDetectedNewer = 100620,
        MembershipDelayedTableUpdateTimer = 100621,
        MembershipDelayedProbeOtherSilosTimer = 100622,
        MembershipFailedToReadSilo = 100623,
        MembershipDelayedIAmAliveUpdateTimer = 100624,
        MembershipMissedIAmAliveTableUpdate = 100625,
        MembershipLocalSubscriberException = 100626,
        MembershipKillMyselfLocally = 100627,
        MembershipFoundMyselfDead3 = 100628,
        MembershipMarkDeadWriteFailed = 100629,
        MembershipTableGrainInit1 = 100630,
        MembershipTableGrainInit2 = 100631,
        MembershipTableGrainInit3 = 100632,
        MembershipTableGrainInit4 = 100633,
        MembershipReadAll_1 = 100634,
        MembershipFactory1 = 100635,
        MembershipFactory2 = 100636,
        MembershipGrainBasedTable1 = 100637,
        MembershipGrainBasedTable2 = 100638,
        MembershipGrainBasedTable3 = 100639,
        MembershipFileBasedTable1 = 100640,
        MembershipFileBasedTable2 = 100641,
        MembershipFileBasedTable3 = 100642,
        MembershipFileBasedTable4 = 100643,
        MembershipPingedSiloNotInWatchList = 100644,
        MembershipReadAll_2 = 100645,
        MembershipFailedToStart = 100646,
        MembershipFailedToBecomeActive = 100647,
        MembershipFailedToStop = 100648,
        MembershipFailedToShutdown = 100649,
        MembershipFailedToKillMyself = 100650,
        MembershipFailedToSuspect = 100651,
        MembershipReadAll_Cleanup = 100652,
        MembershipShutDownFailure = 100653,
        MembershipKillMyselfFailure = 100654,
        MembershipGossipProcessingFailure = 100655,
        MembershipGossipSendFailure = 100656,
        MembershipTimerProcessingFailure = 100657,
        MembershipSendPingFailure = 100658,
        MembershipUpdateIAmAliveFailure = 100659,
        MembershipStartingIAmAliveTimer = 100660,
        MembershipJoiningPreconditionFailure = 100661,
        MembershipCleanDeadEntriesFailure = 100662,
        MembershipJoining = 100663,
        MembershipFailedToJoin = 100664,
        NSMembershipStarting = 100670,
        NSMembershipBecomeActive = 100671,
        NSMembershipFailedToBecomeActive = 100672,
        NSMembershipShutDown = 100673,
        NSMembershipStop = 100674,
        NSMembershipKillMyself = 100675,
        NSMembershipKillMyselfLocally = 100676,
        NSMembershipNotificationProcessingFailure = 100677,
        NSMembershipReadAll_1 = 100678,
        NSMembershipReadAll_2 = 100679,
        NSMembershipFoundMyselfDead2 = 100680,
        NSMembershipDetectedOlder = 100681,
        NSMembershipDetectedNewer = 100682,
        NSMembershipTimerProcessingFailure = 100683,
        NSMembershipShutDownFailure = 100684,
        NSMembershipKillMyselfFailure = 100685,
        NSMembershipNSDetails = 100686,
        SSMT_ReadRowError = 100687,
        SSMT_ReadAllError = 100688,
        SSMT_InsertRowError = 100689,
        SSMT_UpdateRowError = 100690,
        SSMT_MergeRowError = 100691,
        SSMT_EtagMismatch_Insert = 100692,
        SSMT_EtagMismatch_Update = 100693,
        PerfCounterBase = 100700,
        PerfCounterNotFound = 100701,
        PerfCounterStarting = 100702,
        PerfCounterStopping = 100703,
        PerfCounterDumpAll = 100704,
        PerfCounterWriteErrors = 100705,
        PerfCounterWriteSuccess = 100706,
        PerfCounterWriteTooManyErrors = 100707,
        PerfCounterNotRegistered = 100708,
        PerfCounterUnableToConnect = 100709,
        PerfCounterUnableToWrite = 100710,
        PerfCounterWriting = 100711,
        PerfCounterSkipping = 100712,
        PerfMetricsStoppingTimer = 100713,
        PerfMetricsStartingTimer = 100714,
        PerfStatistics = 100715,
        PerfCounterRegistering = 100716,
        PerfCounterTimerError = 100717,
        TimerChangeError = 100717,
        PerfCounterCategoryCheckError = 100718,
        PerfCounterConnectError = 100719,
        PerfCounterFailedToInitialize = 100720,
        ProxyClientBase = 100900,
        ProxyClientUnhandledExceptionWhileSending = 100901,
        ProxyClientUnhandledExceptionWhileReceiving = 100902,
        ProxyClient_CannotSend = 100903,
        ProxyClient_CannotSend_NoGateway = 100904,
        ProxyClient_DroppingMsg = 100905,
        ProxyClient_RejectingMsg = 100906,
        ProxyClient_MsgSent = 100907,
        ProxyClient_Connected = 100908,
        ProxyClient_PauseBeforeRetry = 100909,
        ProxyClient_MsgCtrNotRunning = 100910,
        ProxyClient_DeadGateway = 100911,
        ProxyClient_MarkGatewayDead = 100912,
        ProxyClient_MarkGatewayDisconnected = 100913,
        ProxyClient_GatewayConnStarted = 100914,
        ProxyClient_CreatedGatewayUnordered = 100915,
        ProxyClient_CreatedGatewayToGrain = 100916,
        ProxyClient_NewBucketIndex = 100917,
        ProxyClient_QueueRequest = 100918,
        ProxyClient_ThreadAbort = 100919,
        ProxyClient_OperationCancelled = 100920,
        ProxyClient_GetGateways = 100921,
        ProxyClient_NetworkError = 100922,
        ProxyClient_SendException = 100923,
        ProxyClient_OGC_TargetNotFound = 100924,
        ProxyClient_OGC_SendResponseFailed = 100925,
        ProxyClient_OGC_SendExceptionResponseFailed = 100926,
        ProxyClient_OGC_UnhandledExceptionInOneWayInvoke = 100927,
        ProxyClient_ClientInvokeCallback_Error = 100928,
        ProxyClient_StartDone = 100929,
        ProxyClient_OGC_TargetNotFound_2 = 100930,
        ProxyClient_AppDomain_Unload = 100931,
        ProxyClient_GatewayUnknownStatus = 100932,
        ProxyClient_FailedToUnregisterCallback = 100933,
        MessagingBase = 101000,
        Messaging_IMA_DroppingConnection = 101001,
        Messaging_Dispatcher_DiscardRejection = 101002,
        MessagingBeginReceiveException = 101003,
        MessagingBeginAcceptSocketException = 101004,
        MessagingAcceptingSocketClosed = 101005,
        MessagingEndAcceptSocketException = 101006,
        MessagingUnexpectedSendError = 101007,
        MessagingSendingRejection = 101008,
        MessagingMessageFromUnknownActivation = 101009,
        Messaging_IMA_OpenedListeningSocket = 101010,
        Messaging_IMA_AcceptCallbackNullState = 101011,
        Messaging_IMA_AcceptCallbackUnexpectedState = 101012,
        Messaging_IMA_NewBeginReceiveException = 101013,
        Messaging_Socket_ReceiveError = 101014,
        Messaging_IMA_ClosingSocket = 101015,
        Messaging_OutgoingMS_DroppingMessage = 101016,
        MessagingProcessReceiveBufferException = 101017,
        Messaging_LargeMsg_Outgoing = 101018,
        Messaging_LargeMsg_Incoming = 101019,
        Messaging_SiloNetworkError = 101020,
        Messaging_UnableToGetSendingSocket = 101021,
        Messaging_ExceptionSending = 101022,
        Messaging_CountMismatchSending = 101023,
        Messaging_ExceptionReceiving = 101024,
        Messaging_ExceptionBeginReceiving = 101025,
        Messaging_IMA_ExceptionAccepting = 101026,
        Messaging_IMA_BadBufferReceived = 101027,
        Messaging_IMA_ActivationOverloaded = 101028,
        Messaging_SerializationError = 101029,
        Messaging_UnableToDeserializeBody = 101030,
        Messaging_Dispatcher_TryForward = 101031,
        Messaging_Dispatcher_TryForwardFailed = 101032,
        Messaging_Dispatcher_ForwardingRequests = 101033,
        Messaging_SimulatedMessageLoss = 101034,
        Messaging_Dispatcher_ReturnToOriginCluster = 101035,
        MessagingAcceptAsyncSocketException = 101036,
        Messaging_ExceptionReceiveAsync = 101037,
        Messaging_DroppingExpiredMessage = 101038,
        Messaging_DroppingBlockedMessage = 101039,
        Messaging_Inbound_Enqueue = 101040,
        Messaging_Inbound_Dequeue = 101041,
        Messaging_Dispatcher_Rejected = 101042,
        DirectoryBase = 101100,
        DirectoryBothPrimaryAndBackupForGrain = 101101,
        DirectoryPartitionPredecessorExpected = 101102,
        DirectoryUnexpectedDelta = 101104,
        Directory_SiloStatusChangeNotification_Exception = 101105,
        SchedulerBase = 101200,
        SchedulerWorkerPoolThreadQueueWaitTime = 101201,
        SchedulerWorkItemGroupQueueWaitTime = 101202,
        SchedulerStatistics = 101203,
        SchedulerFinishShutdown = 101204,
        SchedulerNullActivation = 101205,
        SchedulerExceptionFromExecute = 101206,
        SchedulerNullContext = 101207,
        SchedulerTaskExecuteIncomplete1 = 101208,
        WaitCalledInsideGrain = 101209,
        SchedulerStatus = 101210,
        WaitCalledInServerCode = 101211,
        ExecutorTurnTooLong = 101212,
        SchedulerTooManyPendingItems = 101213,
        SchedulerTurnTooLong2 = 101214,
        SchedulerTurnTooLong3 = 101215,
        SchedulerWorkGroupShuttingDown = 101216,
        SchedulerEnqueueWorkWhenShutdown = 101217,
        SchedulerNotExecuteWhenShutdown = 101218,
        SchedulerAppTurnsStopped_1 = 101219,
        SchedulerWorkGroupStopping = 101220,
        SchedulerSkipWorkStopping = 101221,
        SchedulerSkipWorkCancelled = 101222,
        SchedulerTaskRunningOnWrongScheduler1 = 101223,
        SchedulerQueueWorkItemWrongCall = 101224,
        SchedulerQueueTaskWrongCall = 101225,
        SchedulerTaskExecuteIncomplete2 = 101226,
        SchedulerTaskExecuteIncomplete3 = 101227,
        SchedulerTaskExecuteIncomplete4 = 101228,
        SchedulerTaskWaitIncomplete = 101229,
        ExecutorWorkerThreadExc = 101230,
        SchedulerQueueWorkItemWrongContext = 101231,
        SchedulerAppTurnsStopped_2 = 101232,
        ExecutorProcessingError = 101233,
        GatewayBase = 101300,
        GatewayClientOpenedSocket = 101301,
        GatewayClientClosedSocket = 101302,
        GatewayDroppingClient = 101303,
        GatewayTryingToSendToUnrecognizedClient = 101304,
        GatewayByteCountMismatch = 101305,
        GatewayExceptionSendingToClient = 101306,
        GatewayAcceptor_SocketClosed = 101307,
        GatewayAcceptor_ExceptionReceiving = 101308,
        GatewayManager_FoundKnownGateways = 101309,
        MessageAcceptor_Connection = 101310,
        MessageAcceptor_NotAProxiedConnection = 101311,
        MessageAcceptor_UnexpectedProxiedConnection = 101312,
        GatewayManager_NoGateways = 101313,
        GatewayNetworkError = 101314,
        GatewayFailedToParse = 101315,
        ClientRegistrarFailedToRegister = 101316,
        ClientRegistrarFailedToRegister_2 = 101317,
        ClientRegistrarFailedToUnregister = 101318,
        ClientRegistrarTimerFailed = 101319,
        GatewayAcceptor_WrongClusterId = 101320,
        GatewayManager_AllGatewaysDead = 101321,
        GatewayAcceptor_InvalidSize = 101322,
        TimerBase = 101400,
        TimerDisposeError = 101401,
        TimerStopError = 101402,
        TimerQueueTickError = 101403,
        TimerChanging = 101404,
        TimerBeforeCallback = 101405,
        TimerAfterCallback = 101406,
        TimerNextTick = 101407,
        TimerDisposing = 101408,
        TimerStopped = 101409,
        Timer_TimerInsideGrainIsNotTicking = 101410,
        Timer_TimerInsideGrainIsDelayed = 101411,
        Timer_SafeTimerIsNotTicking = 101412,
        Timer_GrainTimerCallbackError = 101413,
        Timer_InvalidContext = 101414,
        DispatcherBase = 101500,
        Dispatcher_SelectTarget_FailPending = 101501,
        Dispatcher_RegisterCallback_Replaced = 101502,
        Dispatcher_Send_BufferResponse = 101503,
        Dispatcher_Send_AddressedMessage = 101504,
        Dispatcher_Receive_InvalidActivation = 101505,
        Dispatcher_WriteGrainFailed = 101506,
        Dispatcher_ActivationEndedTurn_Waiting = 101507,
        Dispatcher_Retarget = 101508,
        Dispatcher_TryAcceptMessage = 101509,
        Dispatcher_UpdateReceiveOrder = 101510,
        Dispatcher_ReceiveOrderCorrelation = 101511,
        Dispatcher_AddSendOrder = 101512,
        Dispatcher_AddSendOrderNoPrior = 101513,
        Dispatcher_AddSendOrder_PriorIds = 101514,
        Dispatcher_AddSendOrder_First = 101515,
        Dispatcher_EnqueueMessage = 101516,
        Dispatcher_AddressMsg = 101517,
        Dispatcher_AddressMsg_GrainOrder = 101518,
        Dispatcher_AddressMsg_NullingLastSentTo = 101519,
        Dispatcher_AddressMsg_SMPlacement = 101520,
        Dispatcher_AddressMsg_UnregisteredClient = 101521,
        Dispatcher_AddressMsg_SelectTarget = 101522,
        Dispatcher_HandleMsg = 101523,
        Dispatcher_OnActivationCompletedRequest_Waiting = 101524,
        IGC_DisposeError = 101525,
        IGC_SendRequest_NullContext = 101526,
        IGC_SniffIncomingMessage_Exc = 101527,
        Dispatcher_DetectedDeadlock = 101528,
        Dispatcher_ActivationOverloaded = 101530,
        IGC_SendResponseFailed = 101531,
        IGC_SendExceptionResponseFailed = 101532,
        IGC_UnhandledExceptionInInvoke = 101533,
        Dispatcher_ExtendedMessageProcessing = 101534,
        Dispatcher_FailedToUnregisterNonExistingAct = 101535,
        Dispatcher_NoGrainInstance = 101536,
        Dispatcher_RuntimeStatisticsUnavailable = 101537,
        Dispatcher_InvalidActivation = 101538,
        InvokeWorkItem_UnhandledExceptionInInvoke = 101539,
        Dispatcher_ErrorCreatingActivation = 101540,
        Dispatcher_StuckActivation = 101541,
        Dispatcher_FailedToUnregisterCallback = 101542,
        SerializationBase = 101600,
        Ser_AssemblyLoadError = 101601,
        Ser_BadRegisterSerializer = 101602,
        Ser_AssemblyLoadErrorDetails = 101603,
        Ser_AssemblyLoadSuccess = 101604,
        Ser_LargeObjectAllocated = 101605,
        LoaderBase = 101700,
        Loader_AssemblyLookupFailed = 101701,
        Loader_AssemblyLookupResolved = 101702,
        Loader_LoadingFromDir = 101703,
        Loader_LoadingFromFile = 101704,
        Loader_DirNotFound = 101705,
        Loader_LoadingSerInfo = 101706,
        Loader_LoadingGrainType = 101707,
        Loader_SkippingFile = 101708,
        Loader_SkippingDynamicAssembly = 101709,
        Loader_AssemblyInspectError = 101710,
        Loader_GrainTypeFullList = 101711,
        Loader_IgnoreAbstractGrainClass = 101712,
        Loader_AssemblyInspectionError = 101713,
        Loader_FoundBinary = 101714,
        Loader_IgnoreNonPublicGrainClass = 101715,
        Loader_UnexpectedException = 101716,
        Loader_SkippingBadAssembly = 101717,
        Loader_TypeLoadError_2 = 101718,
        Loader_TypeLoadError_3 = 101719,
        Loader_TypeLoadError_4 = 101720,
        Loader_LoadAndCreateInstance_Failure = 101721,
        Loader_TryLoadAndCreateInstance_Failure = 101722,
        Loader_TypeLoadError_5 = 101723,
        Loader_AssemblyLoadError = 101724,
        PlacementBase = 101800,
        Placement_RuntimeStatisticsUpdateFailure_1 = 101801,
        Placement_RuntimeStatisticsUpdateFailure_2 = 101802,
        Placement_RuntimeStatisticsUpdateFailure_3 = 101803,
        Placement_ActivationCountBasedDirector_NoSilos = 101804,
        StorageProviderBase = 102200,
        StorageProvider_ReadFailed = 102202,
        StorageProvider_WriteFailed = 102203,
        StorageProvider_DeleteFailed = 102204,
        StorageProvider_ForceReRead = 102205,
        SerializationManagerBase = 102400,
        SerMgr_TypeRegistrationFailure = 102401,
        SerMgr_MissingRegisterMethod = 102402,
        SerMgr_ErrorBindingMethods = 102403,
        SerMgr_ErrorLoadingAssemblyTypes = 102404,
        SerMgr_TooLongSerialize = 102405,
        SerMgr_TooLongDeserialize = 102406,
        SerMgr_TooLongDeepCopy = 102407,
        SerMgr_IgnoreAssembly = 102408,
        SerMgr_TypeRegistrationFailureIgnore = 102409,
        SerMgr_ArtifactReport = 102410,
        SerMgr_UnavailableSerializer = 102411,
        SerMgr_SerializationMethodsMissing = 102412,
        WatchdogBase = 102600,
        Watchdog_ParticipantThrownException = 102601,
        Watchdog_InternalError = 102602,
        Watchdog_HealthCheckFailure = 102603,
        LoggerBase = 102700,
        Logger_LogMessageTruncated = 102701,
        WFServiceBase = 102800,
        WFService_Error_1 = 102801,
        WFService_Error_2 = 102802,
        WFService_Error_3 = 102803,
        WFService_Error_4 = 102804,
        WFService_Error_5 = 102805,
        WFService_Error_6 = 102806,
        WFService_Error_7 = 102807,
        WFService_Error_8 = 102808,
        WFService_Error_9 = 102809,
        ReminderServiceBase = 102900,
        RS_Register_TableError = 102905,
        RS_Register_AlreadyRegistered = 102907,
        RS_Register_InvalidPeriod = 102908,
        RS_Register_NotRemindable = 102909,
        RS_NotResponsible = 102910,
        RS_Unregister_NotFoundLocally = 102911,
        RS_Unregister_TableError = 102912,
        RS_Table_Insert = 102913,
        RS_Table_Remove = 102914,
        RS_Tick_Delivery_Error = 102915,
        RS_Not_Started = 102916,
        RS_UnregisterGrain_TableError = 102917,
        RS_GrainBasedTable1 = 102918,
        RS_Factory1 = 102919,
        RS_FailedToReadTableAndStartTimer = 102920,
        RS_TableGrainInit1 = 102921,
        RS_TableGrainInit2 = 102922,
        RS_TableGrainInit3 = 102923,
        RS_GrainBasedTable2 = 102924,
        RS_ServiceStarting = 102925,
        RS_ServiceStarted = 102926,
        RS_ServiceStopping = 102927,
        RS_RegisterOrUpdate = 102928,
        RS_Unregister = 102929,
        RS_Stop = 102930,
        RS_RemoveFromTable = 102931,
        RS_GetReminder = 102932,
        RS_GetReminders = 102933,
        RS_RangeChanged = 102934,
        RS_LocalStop = 102935,
        RS_Started = 102936,
        RS_ServiceInitialLoadFailing = 102937,
        RS_ServiceInitialLoadFailed = 102938,
        RS_FastReminderInterval = 102939,
        ConsistentRingProviderBase = 103000,
        CRP_Local_Subscriber_Exception = 103001,
        CRP_ForGrains_Local_Subscriber_Exception_1 = 103002,
        CRP_Added_Silo = 103003,
        CRP_Removed_Silo = 103004,
        CRP_Notify = 103005,
        CRP_ForGrains_Local_Subscriber_Exception_2 = 103006,
        ProviderManagerBase = 103100,
        Provider_InstanceConstructionError1 = 103101,
        Provider_Loaded = 103102,
        Provider_AssemblyLoadError = 103103,
        Provider_CatalogNoStorageProvider_1 = 103104,
        Provider_CatalogNoStorageProvider_2 = 103105,
        Provider_CatalogStorageProviderAllocated = 103106,
        Provider_NoDefaultProvider = 103107,
        Provider_ConfiguredProviderNotLoaded = 103108,
        Provider_ErrorFromInit = 103109,
        Provider_IgnoringExplicitSet = 103110,
        Provider_NotLoaded = 103111,
        Provider_Manager_Already_Loaded = 103112,
        Provider_CatalogNoStorageProvider_3 = 103113,
        Provider_ProviderLoadedOk = 103114,
        Provider_ProviderNotFound = 103115,
        Provider_ProviderNotControllable = 103116,
        Provider_CatalogNoLogConsistencyProvider = 103117,
        Provider_CatalogLogConsistencyProviderAllocated = 103118,
        Provider_ErrorFromClose = 103119,
        PersistentStreamPullingAgentBase = 103300,
        PersistentStreamPullingAgent_01 = 103301,
        PersistentStreamPullingAgent_02 = 103302,
        PersistentStreamPullingAgent_03 = 103303,
        PersistentStreamPullingAgent_04 = 103304,
        PersistentStreamPullingAgent_05 = 103305,
        PersistentStreamPullingAgent_06 = 103306,
        PersistentStreamPullingAgent_07 = 103307,
        PersistentStreamPullingAgent_08 = 103308,
        PersistentStreamPullingAgent_09 = 103309,
        PersistentStreamPullingAgent_10 = 103310,
        PersistentStreamPullingAgent_11 = 103311,
        PersistentStreamPullingAgent_12 = 103312,
        PersistentStreamPullingAgent_13 = 103313,
        PersistentStreamPullingAgent_14 = 103314,
        PersistentStreamPullingAgent_15 = 103315,
        PersistentStreamPullingAgent_16 = 103316,
        PersistentStreamPullingAgent_17 = 103317,
        PersistentStreamPullingAgent_18 = 103318,
        PersistentStreamPullingAgent_19 = 103319,
        PersistentStreamPullingAgent_20 = 103320,
        PersistentStreamPullingAgent_21 = 103321,
        PersistentStreamPullingAgent_22 = 103322,
        PersistentStreamPullingAgent_23 = 103323,
        PersistentStreamPullingAgent_24 = 103324,
        PersistentStreamPullingAgent_25 = 103325,
        PersistentStreamPullingAgent_26 = 103326,
        PersistentStreamPullingAgent_27 = 103327,
        PersistentStreamPullingAgent_28 = 103328,
        StreamProviderManagerBase = 103400,
        StreamProvider_FailedToDispose = 103401,
        StreamProvider_ProducerFailedToUnregister = 103402,
        StreamProvider_NoStreamForItem = 103403,
        StreamProvider_AddObserverException = 103404,
        Stream_ExtensionNotInstalled = 103405,
        Stream_ProducerIsDead = 103406,
        StreamProvider_NoStreamForBatch = 103407,
        StreamProvider_ConsumerFailedToUnregister = 103408,
        Stream_ConsumerIsDead = 103409,
        Stream_RegisterProducerFailed = 103410,
        Stream_UnregisterProducerFailed = 103411,
        Stream_RegisterConsumerFailed = 103412,
        Stream_UnregisterConsumerFailed = 103413,
        Stream_SetSubscriptionToFaultedFailed = 103414,
        PersistentStreamPullingManagerBase = 103500,
        PersistentStreamPullingManager_01 = 103501,
        PersistentStreamPullingManager_02 = 103502,
        PersistentStreamPullingManager_03 = 103503,
        PersistentStreamPullingManager_04 = 103504,
        PersistentStreamPullingManager_05 = 103505,
        PersistentStreamPullingManager_06 = 103506,
        PersistentStreamPullingManager_07 = 103507,
        PersistentStreamPullingManager_08 = 103508,
        PersistentStreamPullingManager_09 = 103509,
        PersistentStreamPullingManager_10 = 103510,
        PersistentStreamPullingManager_11 = 103511,
        PersistentStreamPullingManager_12 = 103512,
        PersistentStreamPullingManager_13 = 103513,
        PersistentStreamPullingManager_14 = 103514,
        PersistentStreamPullingManager_15 = 103515,
        PersistentStreamPullingManager_16 = 103516,
        PersistentStreamPullingManager_Starting = 103517,
        PersistentStreamPullingManager_Stopping = 103518,
        PersistentStreamPullingManager_Started = 103519,
        PersistentStreamPullingManager_Stopped = 103520,
        PersistentStreamPullingManager_AlreadyStarted = 103521,
        PersistentStreamPullingManager_AlreadyStopped = 103522,
        PersistentStreamPullingManager_PeriodicPrint = 103523,
        AzureServiceRuntimeWrapper = 103700,
        AzureServiceRuntime_NotLoaded = 103701,
        AzureServiceRuntime_FailedToLoad = 103702,
        CodeGenBase = 103800,
        CodeGenCompilationFailed = 103801,
        CodeGenCompilationSucceeded = 103802,
        CodeGenSourceGenerated = 103803,
        CodeGenSerializerGenerator = 103804,
        CodeGenIgnoringTypes = 103805,
        CodeGenDllMissing = 103806,
        CodeGenSystemTypeRequiresSerializer = 103807,
        MultiClusterNetworkBase = 103900,
        MultiClusterNetwork_Starting = 103901,
        MultiClusterNetwork_Started = 103902,
        MultiClusterNetwork_FailedToStart = 103903,
        MultiClusterNetwork_LocalSubscriberException = 103904,
        MultiClusterNetwork_GossipCommunicationFailure = 103905,
        MultiClusterNetwork_NoChannelsConfigured = 103906,
        CancellationTokenManagerBase = 104000,
        CancellationTokenCancelFailed = 104001,
        CancellationExtensionCreationFailed = 104002,
        GlobalSingleInstanceBase = 104100,
        GlobalSingleInstance_ProtocolError = 104101,
        GlobalSingleInstance_WarningInvalidOrigin = 104102,
        GlobalSingleInstance_MaintainerException = 104103,
        GlobalSingleInstance_MultipleOwners = 104104,
        TypeManagerBase = 104200,
        TypeManager_GetSiloGrainInterfaceMapError = 104201,
        TypeManager_GetClusterGrainTypeResolverError = 104202,
        LogConsistencyBase = 104300,
        LogConsistency_UserCodeException = 104301,
        LogConsistency_CaughtException = 104302,
        LogConsistency_ProtocolError = 104303,
        LogConsistency_ProtocolFatalError = 104304,
        ServiceFabricBase = 104400,
        TransactionsBase = 104500,
        Transactions_SendingTMRequest = 104501,
        Transactions_ReceivedTMResponse = 104502,
        Transactions_TMError = 104503,
        OSBase = 104600,
        OS_InvalidOS = 104601
    }

    public abstract partial class Grain : IGrainBase, Runtime.IAddressable
    {
        protected Grain() { }

        protected Grain(Runtime.IGrainContext grainContext, Runtime.IGrainRuntime? grainRuntime = null) { }

        public Runtime.IGrainContext GrainContext { get { throw null; } }

        protected IGrainFactory GrainFactory { get { throw null; } }

        public Runtime.GrainReference GrainReference { get { throw null; } }

        public string IdentityString { get { throw null; } }

        public string RuntimeIdentity { get { throw null; } }

        protected internal System.IServiceProvider ServiceProvider { get { throw null; } }

        protected void DeactivateOnIdle() { }

        protected void DelayDeactivation(System.TimeSpan timeSpan) { }

        protected void MigrateOnIdle() { }

        public virtual System.Threading.Tasks.Task OnActivateAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        public virtual System.Threading.Tasks.Task OnDeactivateAsync(DeactivationReason reason, System.Threading.CancellationToken cancellationToken) { throw null; }

        [System.Obsolete("Use 'this.RegisterGrainTimer(callback, state, new() { DueTime = dueTime, Period = period, Interleave = true })' instead.")]
        protected System.IDisposable RegisterTimer(System.Func<object?, System.Threading.Tasks.Task> callback, object? state, System.TimeSpan dueTime, System.TimeSpan period) { throw null; }
    }

    public static partial class GrainBaseExtensions
    {
        public static void DeactivateOnIdle(this IGrainBase grain) { }

        public static void MigrateOnIdle(this IGrainBase grain) { }

        public static Runtime.IGrainTimer RegisterGrainTimer(this IGrainBase grain, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> callback, Runtime.GrainTimerCreationOptions options) { throw null; }

        public static Runtime.IGrainTimer RegisterGrainTimer(this IGrainBase grain, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> callback, System.TimeSpan dueTime, System.TimeSpan period) { throw null; }

        public static Runtime.IGrainTimer RegisterGrainTimer(this IGrainBase grain, System.Func<System.Threading.Tasks.Task> callback, Runtime.GrainTimerCreationOptions options) { throw null; }

        public static Runtime.IGrainTimer RegisterGrainTimer(this IGrainBase grain, System.Func<System.Threading.Tasks.Task> callback, System.TimeSpan dueTime, System.TimeSpan period) { throw null; }

        public static Runtime.IGrainTimer RegisterGrainTimer<TState>(this IGrainBase grain, System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback, TState state, Runtime.GrainTimerCreationOptions options) { throw null; }

        public static Runtime.IGrainTimer RegisterGrainTimer<TState>(this IGrainBase grain, System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback, TState state, System.TimeSpan dueTime, System.TimeSpan period) { throw null; }

        public static Runtime.IGrainTimer RegisterGrainTimer<TState>(this IGrainBase grain, System.Func<TState, System.Threading.Tasks.Task> callback, TState state, Runtime.GrainTimerCreationOptions options) { throw null; }

        public static Runtime.IGrainTimer RegisterGrainTimer<TState>(this IGrainBase grain, System.Func<TState, System.Threading.Tasks.Task> callback, TState state, System.TimeSpan dueTime, System.TimeSpan period) { throw null; }
    }

    public delegate System.Threading.Tasks.Task GrainCallFilterDelegate(IGrainCallContext context);
    [Immutable]
    public sealed partial class GrainCancellationToken : System.IDisposable
    {
        internal GrainCancellationToken() { }

        public System.Threading.CancellationToken CancellationToken { get { throw null; } }

        public void Dispose() { }
    }

    public sealed partial class GrainCancellationTokenSource : System.IDisposable
    {
        public bool IsCancellationRequested { get { throw null; } }

        public GrainCancellationToken Token { get { throw null; } }

        public System.Threading.Tasks.Task Cancel() { throw null; }

        public void Dispose() { }
    }

    public static partial class GrainContextComponentExtensions
    {
        public static TComponent GetGrainExtension<TComponent>(this Runtime.IGrainContext context)
            where TComponent : class, Runtime.IGrainExtension { throw null; }
    }

    public static partial class GrainExtensions
    {
        public static object AsReference(this Runtime.IAddressable grain, System.Type interfaceType) { throw null; }

        public static TGrainInterface AsReference<TGrainInterface>(this Runtime.IAddressable grain) { throw null; }

        public static object Cast(this Runtime.IAddressable grain, System.Type interfaceType) { throw null; }

        public static TGrainInterface Cast<TGrainInterface>(this Runtime.IAddressable grain) { throw null; }

        public static Runtime.GrainId GetGrainId(this Runtime.IAddressable grain) { throw null; }

        public static System.Guid GetPrimaryKey(this Runtime.IAddressable grain, out string keyExt) { throw null; }

        public static System.Guid GetPrimaryKey(this Runtime.IAddressable grain) { throw null; }

        public static long GetPrimaryKeyLong(this Runtime.IAddressable grain, out string keyExt) { throw null; }

        public static long GetPrimaryKeyLong(this Runtime.IAddressable grain) { throw null; }

        public static string GetPrimaryKeyString(this Runtime.IAddressable grain) { throw null; }

        public static bool IsPrimaryKeyBasedOnLong(this Runtime.IAddressable grain) { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public sealed partial class GrainTypeAttribute : System.Attribute, Metadata.IGrainTypeProviderAttribute
    {
        public GrainTypeAttribute(string grainType) { }

        public Runtime.GrainType GetGrainType(System.IServiceProvider services, System.Type type) { throw null; }
    }

    public partial class Grain<TGrainState> : Grain
    {
        protected Grain() { }

        protected Grain(Core.IStorage<TGrainState> storage) { }

        protected TGrainState State { get { throw null; } set { } }

        protected virtual System.Threading.Tasks.Task ClearStateAsync() { throw null; }

        protected virtual System.Threading.Tasks.Task ReadStateAsync() { throw null; }

        protected virtual System.Threading.Tasks.Task WriteStateAsync() { throw null; }
    }

    public partial interface IConfigurationValidator
    {
        void ValidateConfiguration();
    }

    public partial interface IGrain : Runtime.IAddressable
    {
    }

    public partial interface IGrainBase
    {
        Runtime.IGrainContext GrainContext { get; }

        System.Threading.Tasks.Task OnActivateAsync(System.Threading.CancellationToken token);
        System.Threading.Tasks.Task OnDeactivateAsync(DeactivationReason reason, System.Threading.CancellationToken token);
    }

    public partial interface IGrainCallContext
    {
        object Grain { get; }

        System.Reflection.MethodInfo InterfaceMethod { get; }

        string InterfaceName { get; }

        Runtime.GrainInterfaceType InterfaceType { get; }

        string MethodName { get; }

        Serialization.Invocation.IInvokable Request { get; }

        Serialization.Invocation.Response? Response { get; set; }

        object? Result { get; set; }

        Runtime.GrainId? SourceId { get; }

        Runtime.GrainId TargetId { get; }

        System.Threading.Tasks.Task Invoke();
    }

    public partial interface IGrainFactory
    {
        TGrainObserverInterface CreateObjectReference<TGrainObserverInterface>(IGrainObserver obj)
            where TGrainObserverInterface : IGrainObserver;
        void DeleteObjectReference<TGrainObserverInterface>(IGrainObserver obj)
            where TGrainObserverInterface : IGrainObserver;
        Runtime.IAddressable GetGrain(Runtime.GrainId grainId, Runtime.GrainInterfaceType interfaceType);
        Runtime.IAddressable GetGrain(Runtime.GrainId grainId);
        IGrain GetGrain(System.Type grainInterfaceType, System.Guid grainPrimaryKey, string keyExtension);
        IGrain GetGrain(System.Type grainInterfaceType, System.Guid grainPrimaryKey);
        IGrain GetGrain(System.Type grainInterfaceType, long grainPrimaryKey, string keyExtension);
        IGrain GetGrain(System.Type grainInterfaceType, long grainPrimaryKey);
        IGrain GetGrain(System.Type grainInterfaceType, string grainPrimaryKey);
        TGrainInterface GetGrain<TGrainInterface>(Runtime.GrainId grainId)
            where TGrainInterface : Runtime.IAddressable;
        TGrainInterface GetGrain<TGrainInterface>(System.Guid primaryKey, string keyExtension, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithGuidCompoundKey;
        TGrainInterface GetGrain<TGrainInterface>(System.Guid primaryKey, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithGuidKey;
        TGrainInterface GetGrain<TGrainInterface>(long primaryKey, string keyExtension, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithIntegerCompoundKey;
        TGrainInterface GetGrain<TGrainInterface>(long primaryKey, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithIntegerKey;
        TGrainInterface GetGrain<TGrainInterface>(string primaryKey, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithStringKey;
    }

    public partial interface IGrainObserver : Runtime.IAddressable
    {
    }

    public partial interface IGrainWithGuidCompoundKey : IGrain, Runtime.IAddressable
    {
    }

    public partial interface IGrainWithGuidKey : IGrain, Runtime.IAddressable
    {
    }

    public partial interface IGrainWithIntegerCompoundKey : IGrain, Runtime.IAddressable
    {
    }

    public partial interface IGrainWithIntegerKey : IGrain, Runtime.IAddressable
    {
    }

    public partial interface IGrainWithStringKey : IGrain, Runtime.IAddressable
    {
    }

    public partial interface IIncomingGrainCallContext : IGrainCallContext
    {
        System.Reflection.MethodInfo ImplementationMethod { get; }

        Runtime.IGrainContext TargetContext { get; }
    }

    public partial interface IIncomingGrainCallFilter
    {
        System.Threading.Tasks.Task Invoke(IIncomingGrainCallContext context);
    }

    public partial interface ILifecycleObservable
    {
        System.IDisposable Subscribe(string observerName, int stage, ILifecycleObserver observer);
    }

    public partial interface ILifecycleObserver
    {
        System.Threading.Tasks.Task OnStart(System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task OnStop(System.Threading.CancellationToken cancellationToken = default);
    }

    public partial interface ILifecycleParticipant<TLifecycleObservable>
        where TLifecycleObservable : ILifecycleObservable
    {
        void Participate(TLifecycleObservable lifecycle);
    }

    public partial interface ILifecycleSubject : ILifecycleObservable, ILifecycleObserver
    {
    }

    public delegate System.Threading.Tasks.Task IncomingGrainCallFilterDelegate(IIncomingGrainCallContext context);
    public partial interface IOutgoingGrainCallContext : IGrainCallContext
    {
        Runtime.IGrainContext? SourceContext { get; }
    }

    public partial interface IOutgoingGrainCallFilter
    {
        System.Threading.Tasks.Task Invoke(IOutgoingGrainCallContext context);
    }

    public partial interface ISystemTarget : Runtime.IAddressable
    {
    }

    public partial interface IVersionManager
    {
        System.Threading.Tasks.Task SetCompatibilityStrategy(Runtime.GrainInterfaceType interfaceType, Versions.Compatibility.CompatibilityStrategy strategy);
        System.Threading.Tasks.Task SetCompatibilityStrategy(Versions.Compatibility.CompatibilityStrategy strategy);
        System.Threading.Tasks.Task SetSelectorStrategy(Runtime.GrainInterfaceType interfaceType, Versions.Selector.VersionSelectorStrategy strategy);
        System.Threading.Tasks.Task SetSelectorStrategy(Versions.Selector.VersionSelectorStrategy strategy);
    }

    public static partial class LifecycleExtensions
    {
        public static System.IDisposable Subscribe(this ILifecycleObservable observable, int stage, ILifecycleObserver observer) { throw null; }

        public static System.IDisposable Subscribe(this ILifecycleObservable observable, string observerName, int stage, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> onStart, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> onStop) { throw null; }

        public static System.IDisposable Subscribe(this ILifecycleObservable observable, string observerName, int stage, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> onStart) { throw null; }

        public static System.IDisposable Subscribe<TObserver>(this ILifecycleObservable observable, int stage, ILifecycleObserver observer) { throw null; }

        public static System.IDisposable Subscribe<TObserver>(this ILifecycleObservable observable, int stage, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> onStart, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> onStop) { throw null; }

        public static System.IDisposable Subscribe<TObserver>(this ILifecycleObservable observable, int stage, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> onStart) { throw null; }
    }

    public delegate System.Threading.Tasks.Task OutgoingGrainCallFilterDelegate(IOutgoingGrainCallContext context);
    public static partial class PublicOrleansTaskExtensions
    {
        public static void Ignore(this System.Threading.Tasks.Task task) { }
    }

    public static partial class StableHash
    {
        public static uint ComputeHash(System.ReadOnlySpan<byte> data) { throw null; }

        public static uint ComputeHash(string data) { throw null; }
    }
}

namespace Orleans.CodeGeneration
{
    [System.Flags]
    [GenerateSerializer]
    public enum InvokeMethodOptions
    {
        None = 0,
        OneWay = 1,
        ReadOnly = 2,
        AlwaysInterleave = 4,
        Unordered = 8
    }

    [System.AttributeUsage(System.AttributeTargets.Interface)]
    public sealed partial class VersionAttribute : System.Attribute, Metadata.IGrainInterfacePropertiesProviderAttribute
    {
        public VersionAttribute(ushort version) { }

        public ushort Version { get { throw null; } }

        void Metadata.IGrainInterfacePropertiesProviderAttribute.Populate(System.IServiceProvider services, System.Type type, System.Collections.Generic.Dictionary<string, string> properties) { }
    }
}

namespace Orleans.Concurrency
{
    [InvokableCustomInitializer("AddInvokeMethodOptions", CodeGeneration.InvokeMethodOptions.AlwaysInterleave)]
    [System.AttributeUsage(System.AttributeTargets.Method)]
    public sealed partial class AlwaysInterleaveAttribute : System.Attribute
    {
    }

    public static partial class ImmutableExtensions
    {
        public static Immutable<T> AsImmutable<T>(this T value) { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    public readonly partial struct Immutable<T>
    {
        [Id(0)]
        public readonly T Value;
        public Immutable(T value) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class MayInterleaveAttribute : System.Attribute, Metadata.IGrainPropertiesProviderAttribute
    {
        public MayInterleaveAttribute(string callbackMethodName) { }

        public void Populate(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    [InvokableCustomInitializer("AddInvokeMethodOptions", CodeGeneration.InvokeMethodOptions.OneWay)]
    [System.AttributeUsage(System.AttributeTargets.Method)]
    public sealed partial class OneWayAttribute : System.Attribute
    {
    }

    [InvokableCustomInitializer("AddInvokeMethodOptions", CodeGeneration.InvokeMethodOptions.ReadOnly)]
    [System.AttributeUsage(System.AttributeTargets.Method)]
    public sealed partial class ReadOnlyAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class ReentrantAttribute : System.Attribute, Metadata.IGrainPropertiesProviderAttribute
    {
        public void Populate(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class StatelessWorkerAttribute : Placement.PlacementAttribute, Metadata.IGrainPropertiesProviderAttribute
    {
        public StatelessWorkerAttribute() : base(default!) { }

        public StatelessWorkerAttribute(int maxLocalWorkers, bool removeIdleWorkers) : base(default!) { }

        public StatelessWorkerAttribute(int maxLocalWorkers) : base(default!) { }

        public override void Populate(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Interface)]
    public sealed partial class UnorderedAttribute : System.Attribute
    {
    }
}

namespace Orleans.Core
{
    public partial interface IStorage
    {
        string Etag { get; }

        bool RecordExists { get; }

        System.Threading.Tasks.Task ClearStateAsync();
        System.Threading.Tasks.Task ClearStateAsync(System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task ReadStateAsync();
        System.Threading.Tasks.Task ReadStateAsync(System.Threading.CancellationToken cancellationToken);
        System.Threading.Tasks.Task WriteStateAsync();
        System.Threading.Tasks.Task WriteStateAsync(System.Threading.CancellationToken cancellationToken);
    }

    public partial interface IStorage<TState> : IStorage
    {
        TState State { get; set; }
    }
}

namespace Orleans.Core.Internal
{
    public partial interface ICallChainReentrantGrainContext
    {
        void OnEnterReentrantSection(System.Guid reentrancyId);
        void OnExitReentrantSection(System.Guid reentrancyId);
    }

    public partial interface IGrainManagementExtension : Runtime.IGrainExtension, Runtime.IAddressable
    {
        System.Threading.Tasks.ValueTask DeactivateOnIdle();
        System.Threading.Tasks.ValueTask MigrateOnIdle();
    }
}

namespace Orleans.GrainDirectory
{
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class GrainDirectoryAttribute : System.Attribute, Metadata.IGrainPropertiesProviderAttribute
    {
        public const string DEFAULT_GRAIN_DIRECTORY = "default";
        public GrainDirectoryAttribute() { }

        public GrainDirectoryAttribute(string grainDirectoryName) { }

        public string GrainDirectoryName { get { throw null; } set { } }

        public void Populate(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    public partial interface IGrainDirectory
    {
        System.Threading.Tasks.Task<Runtime.GrainAddress?> Lookup(Runtime.GrainId grainId);
        System.Threading.Tasks.Task<Runtime.GrainAddress?> Register(Runtime.GrainAddress address, Runtime.GrainAddress? previousAddress);
        System.Threading.Tasks.Task<Runtime.GrainAddress?> Register(Runtime.GrainAddress address);
        System.Threading.Tasks.Task Unregister(Runtime.GrainAddress address);
        System.Threading.Tasks.Task UnregisterSilos(System.Collections.Generic.List<Runtime.SiloAddress> siloAddresses);
    }
}

namespace Orleans.Metadata
{
    public sealed partial class AttributeGrainBindingsProvider : IGrainPropertiesProvider
    {
        public AttributeGrainBindingsProvider(System.IServiceProvider serviceProvider) { }

        public void Populate(System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    public sealed partial class AttributeGrainPropertiesProvider : IGrainPropertiesProvider
    {
        public AttributeGrainPropertiesProvider(System.IServiceProvider serviceProvider) { }

        public void Populate(System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    public partial class AttributeGrainTypeProvider : IGrainTypeProvider
    {
        public AttributeGrainTypeProvider(System.IServiceProvider serviceProvider) { }

        public bool TryGetGrainType(System.Type grainClass, out Runtime.GrainType grainType) { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class ClusterManifest
    {
        public ClusterManifest(MajorMinorVersion version, System.Collections.Immutable.ImmutableDictionary<Runtime.SiloAddress, GrainManifest> silos) { }

        [Id(2)]
        public System.Collections.Immutable.ImmutableArray<GrainManifest> AllGrainManifests { get { throw null; } }

        [Id(1)]
        public System.Collections.Immutable.ImmutableDictionary<Runtime.SiloAddress, GrainManifest> Silos { get { throw null; } }

        [Id(0)]
        public MajorMinorVersion Version { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false)]
    public sealed partial class DefaultGrainTypeAttribute : System.Attribute, IGrainInterfacePropertiesProviderAttribute
    {
        public DefaultGrainTypeAttribute(string grainType) { }

        void IGrainInterfacePropertiesProviderAttribute.Populate(System.IServiceProvider services, System.Type type, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class GrainInterfaceProperties
    {
        public GrainInterfaceProperties(System.Collections.Immutable.ImmutableDictionary<string, string> values) { }

        [Id(0)]
        public System.Collections.Immutable.ImmutableDictionary<string, string> Properties { get { throw null; } }

        public string ToDetailedString() { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class GrainManifest
    {
        public GrainManifest(System.Collections.Immutable.ImmutableDictionary<Runtime.GrainType, GrainProperties> grains, System.Collections.Immutable.ImmutableDictionary<Runtime.GrainInterfaceType, GrainInterfaceProperties> interfaces) { }

        [Id(1)]
        public System.Collections.Immutable.ImmutableDictionary<Runtime.GrainType, GrainProperties> Grains { get { throw null; } }

        [Id(0)]
        public System.Collections.Immutable.ImmutableDictionary<Runtime.GrainInterfaceType, GrainInterfaceProperties> Interfaces { get { throw null; } }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class GrainProperties
    {
        public GrainProperties(System.Collections.Immutable.ImmutableDictionary<string, string> values) { }

        [Id(0)]
        public System.Collections.Immutable.ImmutableDictionary<string, string> Properties { get { throw null; } }

        public string ToDetailedString() { throw null; }
    }

    public partial interface IGrainBindingsProviderAttribute
    {
        System.Collections.Generic.IEnumerable<System.Collections.Generic.Dictionary<string, string>> GetBindings(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType);
    }

    public partial interface IGrainInterfacePropertiesProvider
    {
        void Populate(System.Type interfaceType, Runtime.GrainInterfaceType grainInterfaceType, System.Collections.Generic.Dictionary<string, string> properties);
    }

    public partial interface IGrainInterfacePropertiesProviderAttribute
    {
        void Populate(System.IServiceProvider services, System.Type interfaceType, System.Collections.Generic.Dictionary<string, string> properties);
    }

    public partial interface IGrainPropertiesProvider
    {
        void Populate(System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties);
    }

    public partial interface IGrainPropertiesProviderAttribute
    {
        void Populate(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties);
    }

    public partial interface IGrainTypeProvider
    {
        bool TryGetGrainType(System.Type type, out Runtime.GrainType grainType);
    }

    public partial interface IGrainTypeProviderAttribute
    {
        Runtime.GrainType GetGrainType(System.IServiceProvider services, System.Type type);
    }

    [GenerateSerializer]
    [Immutable]
    public readonly partial struct MajorMinorVersion : System.IComparable<MajorMinorVersion>, System.IEquatable<MajorMinorVersion>
    {
        private readonly int _dummyPrimitive;
        public MajorMinorVersion(long majorVersion, long minorVersion) { }

        [Id(0)]
        public long Major { get { throw null; } }

        [Id(1)]
        public long Minor { get { throw null; } }

        public static MajorMinorVersion MinValue { get { throw null; } }

        public static MajorMinorVersion Zero { get { throw null; } }

        public readonly int CompareTo(MajorMinorVersion other) { throw null; }

        public readonly bool Equals(MajorMinorVersion other) { throw null; }

        public override readonly bool Equals(object obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(MajorMinorVersion left, MajorMinorVersion right) { throw null; }

        public static bool operator >(MajorMinorVersion left, MajorMinorVersion right) { throw null; }

        public static bool operator >=(MajorMinorVersion left, MajorMinorVersion right) { throw null; }

        public static bool operator !=(MajorMinorVersion left, MajorMinorVersion right) { throw null; }

        public static bool operator <(MajorMinorVersion left, MajorMinorVersion right) { throw null; }

        public static bool operator <=(MajorMinorVersion left, MajorMinorVersion right) { throw null; }

        public static MajorMinorVersion Parse(string value) { throw null; }

        public override readonly string ToString() { throw null; }
    }

    public static partial class WellKnownGrainInterfaceProperties
    {
        public const string DefaultGrainType = "primary-grain-type";
        public const string TypeName = "type-name";
        public const string Version = "version";
    }

    public static partial class WellKnownGrainTypeProperties
    {
        public const string BindingPrefix = "binding";
        public const string BindingTypeKey = "type";
        public const string BroadcastChannelBindingPatternKey = "channel-pattern";
        public const string BroadcastChannelBindingTypeValue = "broadcast-channel";
        public const string ChannelIdMapperKey = "channelid-mapper";
        public const string FullTypeName = "full-type-name";
        public const string GrainDirectory = "directory-policy";
        public const string IdleDeactivationPeriod = "idle-duration";
        public const string Immovable = "immovable";
        public const string ImplementedInterfacePrefix = "interface.";
        public const string IndefiniteIdleDeactivationPeriodValue = "indefinite";
        public const string LegacyGrainKeyType = "legacy-grain-key-type";
        public const string MayInterleavePredicate = "may-interleave-predicate";
        public const string PlacementFilter = "placement-filter";
        public const string PlacementStrategy = "placement-strategy";
        public const string Reentrant = "reentrant";
        public const string StreamBindingIncludeNamespaceKey = "include-namespace";
        public const string StreamBindingPatternKey = "pattern";
        public const string StreamBindingTypeValue = "stream";
        public const string StreamIdMapperKey = "streamid-mapper";
        public const string TypeName = "type-name";
        public const string Unordered = "unordered";
    }
}

namespace Orleans.Placement
{
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public sealed partial class ActivationCountBasedPlacementAttribute : PlacementAttribute
    {
        public ActivationCountBasedPlacementAttribute() : base(default!) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public sealed partial class HashBasedPlacementAttribute : PlacementAttribute
    {
        public HashBasedPlacementAttribute() : base(default!) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public sealed partial class ImmovableAttribute : System.Attribute, Metadata.IGrainPropertiesProviderAttribute
    {
        public ImmovableAttribute(ImmovableKind kind = ImmovableKind.Any) { }

        public ImmovableKind Kind { get { throw null; } }

        public void Populate(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    [System.Flags]
    public enum ImmovableKind : byte
    {
        Repartitioner = 1,
        Rebalancer = 2,
        Any = 3
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public abstract partial class PlacementAttribute : System.Attribute, Metadata.IGrainPropertiesProviderAttribute
    {
        protected PlacementAttribute(Runtime.PlacementStrategy placement) { }

        public Runtime.PlacementStrategy PlacementStrategy { get { throw null; } }

        public virtual void Populate(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public abstract partial class PlacementFilterAttribute : System.Attribute, Metadata.IGrainPropertiesProviderAttribute
    {
        protected PlacementFilterAttribute(PlacementFilterStrategy placement) { }

        public PlacementFilterStrategy PlacementFilterStrategy { get { throw null; } }

        public virtual void Populate(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    public abstract partial class PlacementFilterStrategy
    {
        protected PlacementFilterStrategy(int order) { }

        public int Order { get { throw null; } }

        public virtual void AdditionalInitialize(Metadata.GrainProperties properties) { }

        protected virtual System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> GetAdditionalGrainProperties(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.IReadOnlyDictionary<string, string> existingProperties) { throw null; }

        protected string? GetPlacementFilterGrainProperty(string key, Metadata.GrainProperties properties) { throw null; }

        public void Initialize(Metadata.GrainProperties properties) { }

        public void PopulateGrainProperties(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public sealed partial class PreferLocalPlacementAttribute : PlacementAttribute
    {
        public PreferLocalPlacementAttribute() : base(default!) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public sealed partial class RandomPlacementAttribute : PlacementAttribute
    {
        public RandomPlacementAttribute() : base(default!) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public sealed partial class ResourceOptimizedPlacementAttribute : PlacementAttribute
    {
        public ResourceOptimizedPlacementAttribute() : base(default!) { }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public sealed partial class SiloRoleBasedPlacementAttribute : PlacementAttribute
    {
        public SiloRoleBasedPlacementAttribute() : base(default!) { }
    }
}

namespace Orleans.Providers
{
    public partial interface IProviderBuilder<TBuilder>
    {
        void Configure(TBuilder builder, string name, Microsoft.Extensions.Configuration.IConfigurationSection configurationSection);
    }

    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class LogConsistencyProviderAttribute : System.Attribute
    {
        public string ProviderName { get { throw null; } set { } }
    }

    public static partial class ProviderConstants
    {
        public const string DEFAULT_LOG_CONSISTENCY_PROVIDER_NAME = "Default";
        public const string DEFAULT_PUBSUB_PROVIDER_NAME = "PubSubStore";
        public const string DEFAULT_STORAGE_PROVIDER_NAME = "Default";
    }

    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class StorageProviderAttribute : System.Attribute
    {
        public string ProviderName { get { throw null; } set { } }
    }
}

namespace Orleans.Runtime
{
    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class ActivationCountBasedPlacement : PlacementStrategy
    {
    }

    [GenerateSerializer]
    [Immutable]
    [System.Text.Json.Serialization.JsonConverter(typeof(ActivationIdConverter))]
    public readonly partial struct ActivationId : System.IEquatable<ActivationId>, System.ISpanFormattable, System.IFormattable
    {
        private readonly int _dummyPrimitive;
        public ActivationId(System.Guid key) { }

        public bool IsDefault { get { throw null; } }

        public readonly bool Equals(ActivationId other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public static ActivationId FromParsableString(string activationId) { throw null; }

        public static ActivationId GetDeterministic(GrainId grain) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static ActivationId NewId() { throw null; }

        public static bool operator ==(ActivationId left, ActivationId right) { throw null; }

        public static bool operator !=(ActivationId left, ActivationId right) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public readonly string ToParsableString() { throw null; }

        public override readonly string ToString() { throw null; }
    }

    public sealed partial class ActivationIdConverter : System.Text.Json.Serialization.JsonConverter<ActivationId>
    {
        public override ActivationId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { throw null; }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, ActivationId value, System.Text.Json.JsonSerializerOptions options) { }
    }

    public static partial class AsyncEnumerableExtensions
    {
        public static System.Collections.Generic.IAsyncEnumerable<T> WithBatchSize<T>(this System.Collections.Generic.IAsyncEnumerable<T> self, int maxBatchSize) { throw null; }
    }

    [GenerateSerializer]
    [SuppressReferenceTracking]
    [Invocation.ReturnValueProxy("InitializeRequest")]
    public abstract partial class AsyncEnumerableRequest<T> : RequestBase, System.Collections.Generic.IAsyncEnumerable<T>, IAsyncEnumerableRequest<T>, IRequest, Orleans.Serialization.Invocation.IInvokable, System.IDisposable
    {
        [Id(0)]
        public int MaxBatchSize { get { throw null; } set { } }

        public System.Collections.Generic.IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<T> InitializeRequest(GrainReference targetGrainReference) { throw null; }

        public override System.Threading.Tasks.ValueTask<Orleans.Serialization.Invocation.Response> Invoke() { throw null; }

        public System.Collections.Generic.IAsyncEnumerable<T> InvokeImplementation() { throw null; }

        protected abstract System.Collections.Generic.IAsyncEnumerable<T> InvokeInner();
    }

    public partial class AttributeGrainInterfaceTypeProvider : IGrainInterfaceTypeProvider
    {
        public AttributeGrainInterfaceTypeProvider(System.IServiceProvider serviceProvider) { }

        public bool TryGetGrainInterfaceType(System.Type type, out GrainInterfaceType grainInterfaceType) { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class ClientNotAvailableException : OrleansException
    {
        internal ClientNotAvailableException() { }
    }

    [GenerateSerializer]
    public sealed partial class EnumerationAbortedException : System.Exception
    {
        public EnumerationAbortedException() { }

        [System.Obsolete]
        protected EnumerationAbortedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public EnumerationAbortedException(string message, System.Exception innerException) { }

        public EnumerationAbortedException(string message) { }
    }

    [GenerateSerializer]
    public enum EnumerationResult
    {
        Heartbeat = 1,
        Element = 2,
        Batch = 4,
        Completed = 8,
        CompletedWithElement = 10,
        CompletedWithBatch = 12,
        MissingEnumeratorError = 16,
        Error = 32,
        Canceled = 64
    }

    [GenerateSerializer]
    public sealed partial class GatewayTooBusyException : OrleansException
    {
        public GatewayTooBusyException() { }

        public GatewayTooBusyException(string message, System.Exception innerException) { }

        public GatewayTooBusyException(string message) { }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class GrainAddress : System.IEquatable<GrainAddress>, System.ISpanFormattable, System.IFormattable
    {
        public ActivationId ActivationId { get { throw null; } init { } }

        public GrainId GrainId { get { throw null; } init { } }

        [System.Text.Json.Serialization.JsonIgnore]
        public bool IsComplete { get { throw null; } }

        [Id(3)]
        public MembershipVersion MembershipVersion { get { throw null; } init { } }

        [Id(2)]
        public SiloAddress? SiloAddress { get { throw null; } init { } }

        public bool Equals(GrainAddress? other) { throw null; }

        public override bool Equals(object? obj) { throw null; }

        public override int GetHashCode() { throw null; }

        public bool Matches(GrainAddress? other) { throw null; }

        string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public string ToFullString() { throw null; }

        public override string ToString() { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class GrainAddressCacheUpdate : System.ISpanFormattable, System.IFormattable
    {
        public GrainAddressCacheUpdate(GrainAddress invalidAddress, GrainAddress? validAddress) { }

        public GrainId GrainId { get { throw null; } }

        public ActivationId InvalidActivationId { get { throw null; } }

        public GrainAddress InvalidGrainAddress { get { throw null; } }

        public SiloAddress? InvalidSiloAddress { get { throw null; } }

        public GrainAddress? ValidGrainAddress { get { throw null; } }

        string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public string ToFullString() { throw null; }

        public override string ToString() { throw null; }
    }

    public static partial class GrainContextExtensions
    {
        [System.Obsolete("This method is error-prone: waiting deactivation to complete from within the grain being deactivated will usually result in a deadlock.")]
        public static System.Threading.Tasks.Task DeactivateAsync(this IGrainContext grainContext, DeactivationReason deactivationReason, System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class GrainExtensionNotInstalledException : OrleansException
    {
        public GrainExtensionNotInstalledException() { }

        public GrainExtensionNotInstalledException(string message, System.Exception innerException) { }

        public GrainExtensionNotInstalledException(string message) { }
    }

    [GenerateSerializer]
    [Immutable]
    [System.Text.Json.Serialization.JsonConverter(typeof(GrainIdJsonConverter))]
    public readonly partial struct GrainId : System.IEquatable<GrainId>, System.IComparable<GrainId>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable, System.IFormattable, System.ISpanParsable<GrainId>, System.IParsable<GrainId>
    {
        public GrainId(GrainType type, IdSpan key) { }

        public bool IsDefault { get { throw null; } }

        public IdSpan Key { get { throw null; } }

        public GrainType Type { get { throw null; } }

        public readonly int CompareTo(GrainId other) { throw null; }

        public static GrainId Create(GrainType type, IdSpan key) { throw null; }

        public static GrainId Create(GrainType type, string key) { throw null; }

        public static GrainId Create(string type, string key) { throw null; }

        public readonly bool Equals(GrainId other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public readonly void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public readonly uint GetUniformHashCode() { throw null; }

        public static bool operator ==(GrainId left, GrainId right) { throw null; }

        public static bool operator !=(GrainId left, GrainId right) { throw null; }

        static GrainId System.ISpanParsable<GrainId>.Parse(System.ReadOnlySpan<char> value, System.IFormatProvider? provider) { throw null; }

        static GrainId System.IParsable<GrainId>.Parse(string value, System.IFormatProvider? provider) { throw null; }

        public static GrainId Parse(string value) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string ToString() { throw null; }

        static bool System.ISpanParsable<GrainId>.TryParse(System.ReadOnlySpan<char> value, System.IFormatProvider? provider, out GrainId result) { throw null; }

        public static bool TryParse(string? value, out GrainId result) { throw null; }

        static bool System.IParsable<GrainId>.TryParse(string? value, System.IFormatProvider? provider, out GrainId result) { throw null; }
    }

    public sealed partial class GrainIdJsonConverter : System.Text.Json.Serialization.JsonConverter<GrainId>
    {
        public override GrainId Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { throw null; }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, GrainId value, System.Text.Json.JsonSerializerOptions options) { }
    }

    public static partial class GrainIdKeyExtensions
    {
        public static IdSpan CreateGuidKey(System.Guid key, System.ReadOnlySpan<byte> keyExtension) { throw null; }

        public static IdSpan CreateGuidKey(System.Guid key, string? keyExtension) { throw null; }

        public static IdSpan CreateGuidKey(System.Guid key) { throw null; }

        public static IdSpan CreateIntegerKey(long key, System.ReadOnlySpan<byte> keyExtension) { throw null; }

        public static IdSpan CreateIntegerKey(long key, string? keyExtension) { throw null; }

        public static IdSpan CreateIntegerKey(long key) { throw null; }

        public static System.Guid GetGuidKey(this GrainId grainId, out string? keyExt) { throw null; }

        public static System.Guid GetGuidKey(this GrainId grainId) { throw null; }

        public static long GetIntegerKey(this GrainId grainId, out string? keyExt) { throw null; }

        public static long GetIntegerKey(this GrainId grainId) { throw null; }

        public static bool TryGetGuidKey(this GrainId grainId, out System.Guid key, out string? keyExt) { throw null; }

        public static bool TryGetIntegerKey(this GrainId grainId, out long key, out string? keyExt) { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    public readonly partial struct GrainInterfaceType : System.IEquatable<GrainInterfaceType>, System.ISpanFormattable, System.IFormattable
    {
        public GrainInterfaceType(IdSpan value) { }

        public GrainInterfaceType(string value) { }

        public bool IsDefault { get { throw null; } }

        public IdSpan Value { get { throw null; } }

        public static GrainInterfaceType Create(string value) { throw null; }

        public readonly bool Equals(GrainInterfaceType other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(GrainInterfaceType left, GrainInterfaceType right) { throw null; }

        public static bool operator !=(GrainInterfaceType left, GrainInterfaceType right) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string? ToString() { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = false)]
    public sealed partial class GrainInterfaceTypeAttribute : System.Attribute, IGrainInterfaceTypeProviderAttribute
    {
        public GrainInterfaceTypeAttribute(string value) { }

        public GrainInterfaceType GetGrainInterfaceType(System.IServiceProvider services, System.Type type) { throw null; }
    }

    public static partial class GrainLifecycleStage
    {
        public const int Activate = 2000;
        public const int First = int.MinValue;
        public const int Last = int.MaxValue;
        public const int SetupState = 1000;
    }

    [Alias("GrainRef")]
    [DefaultInvokableBaseType(typeof(System.Threading.Tasks.ValueTask<>), typeof(Request<>))]
    [DefaultInvokableBaseType(typeof(System.Threading.Tasks.ValueTask), typeof(Request))]
    [DefaultInvokableBaseType(typeof(System.Threading.Tasks.Task<>), typeof(TaskRequest<>))]
    [DefaultInvokableBaseType(typeof(System.Threading.Tasks.Task), typeof(TaskRequest))]
    [DefaultInvokableBaseType(typeof(void), typeof(VoidRequest))]
    [DefaultInvokableBaseType(typeof(System.Collections.Generic.IAsyncEnumerable<>), typeof(AsyncEnumerableRequest<>))]
    public partial class GrainReference : IAddressable, System.IEquatable<GrainReference>, System.ISpanFormattable, System.IFormattable
    {
        protected GrainReference(GrainReferenceShared shared, IdSpan key) { }

        protected Orleans.Serialization.Serializers.CodecProvider CodecProvider { get { throw null; } }

        protected Orleans.Serialization.Cloning.CopyContextPool CopyContextPool { get { throw null; } }

        public GrainId GrainId { get { throw null; } }

        public virtual string InterfaceName { get { throw null; } }

        public GrainInterfaceType InterfaceType { get { throw null; } }

        public ushort InterfaceVersion { get { throw null; } }

        public virtual TGrainInterface Cast<TGrainInterface>()
            where TGrainInterface : IAddressable { throw null; }

        public bool Equals(GrainReference other) { throw null; }

        public override bool Equals(object obj) { throw null; }

        public override int GetHashCode() { throw null; }

        protected TInvokable GetInvokable<TInvokable>() { throw null; }

        public uint GetUniformHashCode() { throw null; }

        protected void Invoke(IRequest methodDescription) { }

        protected System.Threading.Tasks.ValueTask InvokeAsync(IRequest methodDescription) { throw null; }

        protected System.Threading.Tasks.ValueTask<T> InvokeAsync<T>(IRequest methodDescription) { throw null; }

        public static bool operator ==(GrainReference reference1, GrainReference reference2) { throw null; }

        public static bool operator !=(GrainReference reference1, GrainReference reference2) { throw null; }

        string System.IFormattable.ToString(string format, System.IFormatProvider formatProvider) { throw null; }

        bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider) { throw null; }

        public sealed override string ToString() { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class GrainReferenceNotBoundException : OrleansException
    {
        internal GrainReferenceNotBoundException() { }
    }

    public partial class GrainReferenceShared
    {
        public GrainReferenceShared(GrainType grainType, GrainInterfaceType grainInterfaceType, ushort interfaceVersion, IGrainReferenceRuntime runtime, CodeGeneration.InvokeMethodOptions invokeMethodOptions, Orleans.Serialization.Serializers.CodecProvider codecProvider, Orleans.Serialization.Cloning.CopyContextPool copyContextPool, System.IServiceProvider serviceProvider) { }

        public Orleans.Serialization.Serializers.CodecProvider CodecProvider { get { throw null; } }

        public Orleans.Serialization.Cloning.CopyContextPool CopyContextPool { get { throw null; } }

        public GrainType GrainType { get { throw null; } }

        public GrainInterfaceType InterfaceType { get { throw null; } }

        public ushort InterfaceVersion { get { throw null; } }

        public CodeGeneration.InvokeMethodOptions InvokeMethodOptions { get { throw null; } }

        public IGrainReferenceRuntime Runtime { get { throw null; } }

        public System.IServiceProvider ServiceProvider { get { throw null; } }
    }

    public readonly partial struct GrainTimerCreationOptions
    {
        private readonly int _dummyPrimitive;
        public GrainTimerCreationOptions() { }

        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
        public GrainTimerCreationOptions(System.TimeSpan dueTime, System.TimeSpan period) { }

        public required System.TimeSpan DueTime { get { throw null; } init { } }

        public bool Interleave { get { throw null; } init { } }

        public bool KeepAlive { get { throw null; } init { } }

        public required System.TimeSpan Period { get { throw null; } init { } }
    }

    [GenerateSerializer]
    [Immutable]
    public readonly partial struct GrainType : System.IEquatable<GrainType>, System.IComparable<GrainType>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable, System.IFormattable
    {
        public GrainType(IdSpan id) { }

        public GrainType(byte[] value) { }

        public bool IsDefault { get { throw null; } }

        public IdSpan Value { get { throw null; } }

        public readonly System.ReadOnlySpan<byte> AsSpan() { throw null; }

        public readonly int CompareTo(GrainType other) { throw null; }

        public static GrainType Create(string value) { throw null; }

        public readonly bool Equals(GrainType obj) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public readonly void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public readonly uint GetUniformHashCode() { throw null; }

        public static bool operator ==(GrainType left, GrainType right) { throw null; }

        public static explicit operator IdSpan(GrainType kind) { throw null; }

        public static explicit operator GrainType(IdSpan id) { throw null; }

        public static bool operator !=(GrainType left, GrainType right) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string? ToString() { throw null; }

        public static byte[]? UnsafeGetArray(GrainType id) { throw null; }
    }

    public static partial class GrainTypePrefix
    {
        public static readonly GrainType ClientGrainType;
        public const string ClientPrefix = "sys.client";
        public static readonly System.ReadOnlyMemory<byte> ClientPrefixBytes;
        public const string GrainServicePrefix = "sys.svc.user.";
        public static readonly System.ReadOnlyMemory<byte> GrainServicePrefixBytes;
        public const string LegacyGrainPrefix = "sys.grain.v1.";
        public static readonly System.ReadOnlyMemory<byte> LegacyGrainPrefixBytes;
        public const string SystemPrefix = "sys.";
        public const string SystemTargetPrefix = "sys.svc.";
        public static readonly System.ReadOnlyMemory<byte> SystemTargetPrefixBytes;
        public static bool IsClient(this in GrainId id) { throw null; }

        public static bool IsClient(this in GrainType type) { throw null; }

        public static bool IsGrainService(this in GrainType type) { throw null; }

        public static bool IsLegacyGrain(this in GrainType type) { throw null; }

        public static bool IsSystemTarget(this in GrainId id) { throw null; }

        public static bool IsSystemTarget(this in GrainType type) { throw null; }
    }

    [Immutable]
    [GenerateSerializer]
    public sealed partial class GuidId : System.IEquatable<GuidId>, System.IComparable<GuidId>, System.Runtime.Serialization.ISerializable
    {
        internal GuidId() { }

        [Id(0)]
        public readonly System.Guid Guid;
        public int CompareTo(GuidId? other) { throw null; }

        public bool Equals(GuidId? other) { throw null; }

        public override bool Equals(object? obj) { throw null; }

        public static GuidId GetGuidId(System.Guid guid) { throw null; }

        public override int GetHashCode() { throw null; }

        public static GuidId GetNewGuidId() { throw null; }

        public void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public static bool operator ==(GuidId? left, GuidId? right) { throw null; }

        public static bool operator !=(GuidId? left, GuidId? right) { throw null; }

        public override string ToString() { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class HashBasedPlacement : PlacementStrategy
    {
    }

    [GenerateMethodSerializers(typeof(GrainReference), false)]
    public partial interface IAddressable
    {
    }

    public partial interface IAsyncEnumerableGrainExtension : IGrainExtension, IAddressable
    {
        [Concurrency.AlwaysInterleave]
        System.Threading.Tasks.ValueTask DisposeAsync(System.Guid requestId);
        [Concurrency.AlwaysInterleave]
        System.Threading.Tasks.ValueTask<(EnumerationResult Status, object Value)> MoveNext<T>(System.Guid requestId);
        [Concurrency.AlwaysInterleave]
        System.Threading.Tasks.ValueTask<(EnumerationResult Status, object Value)> StartEnumeration<T>(System.Guid requestId, IAsyncEnumerableRequest<T> request);
    }

    public partial interface IAsyncEnumerableRequest<T> : IRequest, Orleans.Serialization.Invocation.IInvokable, System.IDisposable
    {
        int MaxBatchSize { get; set; }

        System.Collections.Generic.IAsyncEnumerable<T> InvokeImplementation();
    }

    public partial interface IDehydrationContext
    {
        System.Collections.Generic.IEnumerable<string> Keys { get; }

        void AddBytes(string key, System.ReadOnlySpan<byte> value);
        void AddBytes<T>(string key, System.Action<T, System.Buffers.IBufferWriter<byte>> valueWriter, T value);
        bool TryAddValue<T>(string key, T? value);
    }

    [GenerateSerializer]
    [Immutable]
    public readonly partial struct IdSpan : System.IEquatable<IdSpan>, System.IComparable<IdSpan>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable, System.IFormattable
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public IdSpan(byte[] value) { }

        public bool IsDefault { get { throw null; } }

        public System.ReadOnlyMemory<byte> Value { get { throw null; } }

        public readonly System.ReadOnlySpan<byte> AsSpan() { throw null; }

        public readonly int CompareTo(IdSpan other) { throw null; }

        public static IdSpan Create(string id) { throw null; }

        public readonly bool Equals(IdSpan obj) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public readonly void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public readonly uint GetUniformHashCode() { throw null; }

        public static bool operator ==(IdSpan left, IdSpan right) { throw null; }

        public static bool operator !=(IdSpan left, IdSpan right) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string? ToString() { throw null; }

        public readonly bool TryFormat(System.Span<char> destination, out int charsWritten) { throw null; }

        public static IdSpan UnsafeCreate(byte[]? value, int hashCode) { throw null; }

        public static byte[]? UnsafeGetArray(IdSpan id) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class IdSpanCodec : Orleans.Serialization.Codecs.IFieldCodec<IdSpan>, Orleans.Serialization.Codecs.IFieldCodec
    {
        public static IdSpan ReadRaw<TInput>(ref Orleans.Serialization.Buffers.Reader<TInput> reader) { throw null; }

        public IdSpan ReadValue<TInput>(ref Orleans.Serialization.Buffers.Reader<TInput> reader, Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, IdSpan value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteRaw<TBufferWriter>(ref Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, IdSpan value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public partial interface IGrainContext : Orleans.Serialization.Invocation.ITargetHolder, System.IEquatable<IGrainContext>
    {
        ActivationId ActivationId { get; }

        System.IServiceProvider ActivationServices { get; }

        GrainAddress Address { get; }

        System.Threading.Tasks.Task Deactivated { get; }

        GrainId GrainId { get; }

        object? GrainInstance { get; }

        GrainReference GrainReference { get; }

        IGrainLifecycle ObservableLifecycle { get; }

        IWorkItemScheduler Scheduler { get; }

        void Activate(System.Collections.Generic.Dictionary<string, object>? requestContext, System.Threading.CancellationToken cancellationToken = default);
        void Deactivate(DeactivationReason deactivationReason, System.Threading.CancellationToken cancellationToken = default);
        void Migrate(System.Collections.Generic.Dictionary<string, object>? requestContext, System.Threading.CancellationToken cancellationToken = default);
        void ReceiveMessage(object message);
        void Rehydrate(IRehydrationContext context);
        void SetComponent<TComponent>(TComponent? value)
            where TComponent : class;
    }

    public partial interface IGrainContextAccessor
    {
        IGrainContext GrainContext { get; }
    }

    [GenerateMethodSerializers(typeof(GrainReference), true)]
    public partial interface IGrainExtension : IAddressable
    {
    }

    public partial interface IGrainExtensionBinder
    {
        TExtensionInterface GetExtension<TExtensionInterface>()
            where TExtensionInterface : class, IGrainExtension;
        (TExtension, TExtensionInterface) GetOrSetExtension<TExtension, TExtensionInterface>(System.Func<TExtension> newExtensionFunc)
            where TExtension : class, TExtensionInterface where TExtensionInterface : class, IGrainExtension;
    }

    public partial interface IGrainInterfaceTypeProvider
    {
        bool TryGetGrainInterfaceType(System.Type type, out GrainInterfaceType grainInterfaceType);
    }

    public partial interface IGrainInterfaceTypeProviderAttribute
    {
        GrainInterfaceType GetGrainInterfaceType(System.IServiceProvider services, System.Type type);
    }

    public partial interface IGrainLifecycle : ILifecycleObservable
    {
        void AddMigrationParticipant(IGrainMigrationParticipant participant);
        void RemoveMigrationParticipant(IGrainMigrationParticipant participant);
    }

    public partial interface IGrainMigrationParticipant
    {
        void OnDehydrate(IDehydrationContext dehydrationContext);
        void OnRehydrate(IRehydrationContext rehydrationContext);
    }

    public partial interface IGrainReferenceRuntime
    {
        object Cast(IAddressable grain, System.Type interfaceType);
        void InvokeMethod(GrainReference reference, Orleans.Serialization.Invocation.IInvokable request, CodeGeneration.InvokeMethodOptions options);
        System.Threading.Tasks.ValueTask InvokeMethodAsync(GrainReference reference, Orleans.Serialization.Invocation.IInvokable request, CodeGeneration.InvokeMethodOptions options);
        System.Threading.Tasks.ValueTask<T> InvokeMethodAsync<T>(GrainReference reference, Orleans.Serialization.Invocation.IInvokable request, CodeGeneration.InvokeMethodOptions options);
    }

    public partial interface IGrainRuntime
    {
        IGrainFactory GrainFactory { get; }

        System.IServiceProvider ServiceProvider { get; }

        SiloAddress SiloAddress { get; }

        string SiloIdentity { get; }

        System.TimeProvider TimeProvider { get; }

        Timers.ITimerRegistry TimerRegistry { get; }

        void DeactivateOnIdle(IGrainContext grainContext);
        void DelayDeactivation(IGrainContext grainContext, System.TimeSpan timeSpan);
        Core.IStorage<TGrainState> GetStorage<TGrainState>(IGrainContext grainContext);
    }

    public partial interface IGrainTimer : System.IDisposable
    {
        void Change(System.TimeSpan dueTime, System.TimeSpan period);
    }

    public partial interface IRehydrationContext
    {
        System.Collections.Generic.IEnumerable<string> Keys { get; }

        bool TryGetBytes(string key, out System.Buffers.ReadOnlySequence<byte> value);
        bool TryGetValue<T>(string key, out T? value);
    }

    public partial interface IRequest : Orleans.Serialization.Invocation.IInvokable, System.IDisposable
    {
        CodeGeneration.InvokeMethodOptions Options { get; }

        void AddInvokeMethodOptions(CodeGeneration.InvokeMethodOptions options);
        string ToMethodCallString(IRequest request);
        string ToString(IRequest request);
    }

    public partial interface IWorkItemScheduler
    {
        void QueueAction(System.Action action);
        void QueueAction(System.Action<object> action, object state);
        void QueueTask(System.Threading.Tasks.Task task);
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class LegacyGrainId : System.IEquatable<LegacyGrainId>, System.IComparable<LegacyGrainId>
    {
        internal LegacyGrainId() { }

        public UniqueKey.Category Category { get { throw null; } }

        public string IdentityString { get { throw null; } }

        public bool IsClient { get { throw null; } }

        public bool IsGrain { get { throw null; } }

        public bool IsLongKey { get { throw null; } }

        public bool IsSystemTarget { get { throw null; } }

        public System.Guid PrimaryKey { get { throw null; } }

        public long PrimaryKeyLong { get { throw null; } }

        public string PrimaryKeyString { get { throw null; } }

        public int TypeCode { get { throw null; } }

        public int CompareTo(LegacyGrainId other) { throw null; }

        public static GrainType CreateGrainTypeForGrain(int typeCode) { throw null; }

        public static GrainType CreateGrainTypeForSystemTarget(int typeCode) { throw null; }

        public bool Equals(LegacyGrainId other) { throw null; }

        public override bool Equals(object obj) { throw null; }

        public static LegacyGrainId FromGrainId(GrainId id) { throw null; }

        public override int GetHashCode() { throw null; }

        public uint GetHashCode_Modulo(uint umod) { throw null; }

        public System.Guid GetPrimaryKey(out string keyExt) { throw null; }

        public long GetPrimaryKeyLong(out string keyExt) { throw null; }

        public uint GetUniformHashCode() { throw null; }

        public static bool IsLegacyGrainType(System.Type type) { throw null; }

        public static bool IsLegacyKeyExtGrainType(System.Type type) { throw null; }

        public static LegacyGrainId NewClientId() { throw null; }

        public static LegacyGrainId NewId() { throw null; }

        public static implicit operator GrainId(LegacyGrainId legacy) { throw null; }

        public GrainId ToGrainId() { throw null; }

        public override string ToString() { throw null; }

        public static bool TryConvertFromGrainId(GrainId id, out LegacyGrainId legacyId) { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class LimitExceededException : OrleansException
    {
        public LimitExceededException() { }

        public LimitExceededException(string message, System.Exception innerException) { }

        public LimitExceededException(string limitName, int current, int threshold, object extraInfo) { }

        public LimitExceededException(string message) { }
    }

    public static partial class LogFormatter
    {
        public const int MAX_LOG_MESSAGE_SIZE = 20000;
        public static System.DateTime ParseDate(string dateStr) { throw null; }

        public static string PrintDate(System.DateTime date) { throw null; }

        public static string PrintException(System.Exception exception) { throw null; }

        public static string PrintTime(System.DateTime date) { throw null; }

        public static void SetExceptionDecoder(System.Type exceptionType, System.Func<System.Exception, string> decoder) { }
    }

    [GenerateSerializer]
    [Immutable]
    [System.Text.Json.Serialization.JsonConverter(typeof(MembershipVersionConverter))]
    public readonly partial struct MembershipVersion : System.IComparable<MembershipVersion>, System.IEquatable<MembershipVersion>
    {
        private readonly int _dummyPrimitive;
        public MembershipVersion(long version) { }

        public static MembershipVersion MinValue { get { throw null; } }

        [Id(0)]
        public long Value { get { throw null; } init { } }

        public readonly int CompareTo(MembershipVersion other) { throw null; }

        public readonly bool Equals(MembershipVersion other) { throw null; }

        public override readonly bool Equals(object obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(MembershipVersion left, MembershipVersion right) { throw null; }

        public static bool operator >(MembershipVersion left, MembershipVersion right) { throw null; }

        public static bool operator >=(MembershipVersion left, MembershipVersion right) { throw null; }

        public static bool operator !=(MembershipVersion left, MembershipVersion right) { throw null; }

        public static bool operator <(MembershipVersion left, MembershipVersion right) { throw null; }

        public static bool operator <=(MembershipVersion left, MembershipVersion right) { throw null; }

        public override readonly string ToString() { throw null; }
    }

    public sealed partial class MembershipVersionConverter : System.Text.Json.Serialization.JsonConverter<MembershipVersion>
    {
        public override MembershipVersion Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { throw null; }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, MembershipVersion value, System.Text.Json.JsonSerializerOptions options) { }
    }

    [GenerateSerializer]
    public sealed partial class OrleansConfigurationException : System.Exception
    {
        public OrleansConfigurationException(string message, System.Exception innerException) { }

        public OrleansConfigurationException(string message) { }
    }

    [GenerateSerializer]
    public partial class OrleansException : System.Exception
    {
        public OrleansException() { }

        [System.Obsolete]
        protected OrleansException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public OrleansException(string message, System.Exception innerException) { }

        public OrleansException(string message) { }
    }

    [GenerateSerializer]
    public sealed partial class OrleansLifecycleCanceledException : OrleansException
    {
        internal OrleansLifecycleCanceledException() { }
    }

    [GenerateSerializer]
    public partial class OrleansMessageRejectionException : OrleansException
    {
        [System.Obsolete]
        protected OrleansMessageRejectionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }

    [SerializerTransparent]
    public abstract partial class PlacementStrategy
    {
        public virtual bool IsUsingGrainDirectory { get { throw null; } }

        public virtual void Initialize(Metadata.GrainProperties properties) { }

        public virtual void PopulateGrainProperties(System.IServiceProvider services, System.Type grainClass, GrainType grainType, System.Collections.Generic.Dictionary<string, string> properties) { }
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class PreferLocalPlacement : PlacementStrategy
    {
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class RandomPlacement : PlacementStrategy
    {
    }

    [SerializerTransparent]
    public abstract partial class Request : RequestBase
    {
        public sealed override System.Threading.Tasks.ValueTask<Orleans.Serialization.Invocation.Response> Invoke() { throw null; }

        protected abstract System.Threading.Tasks.ValueTask InvokeInner();
    }

    [SuppressReferenceTracking]
    [SerializerTransparent]
    public abstract partial class RequestBase : IRequest, Orleans.Serialization.Invocation.IInvokable, System.IDisposable
    {
        public CodeGeneration.InvokeMethodOptions Options { get { throw null; } protected set { } }

        public void AddInvokeMethodOptions(CodeGeneration.InvokeMethodOptions options) { }

        public abstract void Dispose();
        public abstract string GetActivityName();
        public virtual object GetArgument(int index) { throw null; }

        public virtual int GetArgumentCount() { throw null; }

        public virtual System.Threading.CancellationToken GetCancellationToken() { throw null; }

        public virtual System.TimeSpan? GetDefaultResponseTimeout() { throw null; }

        public abstract string GetInterfaceName();
        public abstract System.Type GetInterfaceType();
        public abstract System.Reflection.MethodInfo GetMethod();
        public abstract string GetMethodName();
        public abstract object GetTarget();
        public abstract System.Threading.Tasks.ValueTask<Orleans.Serialization.Invocation.Response> Invoke();
        public virtual void SetArgument(int index, object value) { }

        public abstract void SetTarget(Orleans.Serialization.Invocation.ITargetHolder holder);
        public override string ToString() { throw null; }

        public virtual bool TryCancel() { throw null; }
    }

    public static partial class RequestContext
    {
        public static System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>> Entries { get { throw null; } }

        public static System.Collections.Generic.IEnumerable<string> Keys { get { throw null; } }

        public static System.Guid ReentrancyId { get { throw null; } set { } }

        public static ReentrancySection AllowCallChainReentrancy() { throw null; }

        public static void Clear() { }

        public static object Get(string key) { throw null; }

        public static bool Remove(string key) { throw null; }

        public static void Set(string key, object value) { }

        public static ReentrancySection SuppressCallChainReentrancy() { throw null; }

        public readonly partial struct ReentrancySection : System.IDisposable
        {
            private readonly int _dummyPrimitive;
            public ReentrancySection(System.Guid originalReentrancyId, System.Guid newReentrancyId) { }

            public readonly void Dispose() { }
        }
    }

    [SerializerTransparent]
    public abstract partial class Request<TResult> : RequestBase
    {
        public sealed override System.Threading.Tasks.ValueTask<Orleans.Serialization.Invocation.Response> Invoke() { throw null; }

        protected abstract System.Threading.Tasks.ValueTask<TResult> InvokeInner();
    }

    public sealed partial class ResourceOptimizedPlacement : PlacementStrategy
    {
    }

    [Immutable]
    [System.Text.Json.Serialization.JsonConverter(typeof(SiloAddressConverter))]
    [System.Diagnostics.DebuggerDisplay("SiloAddress {ToString()}")]
    [SuppressReferenceTracking]
    public sealed partial class SiloAddress : System.IEquatable<SiloAddress>, System.IComparable<SiloAddress>, System.ISpanFormattable, System.IFormattable
    {
        internal SiloAddress() { }

        [Id(0)]
        public System.Net.IPEndPoint Endpoint { get { throw null; } }

        [Id(1)]
        public int Generation { get { throw null; } }

        public bool IsClient { get { throw null; } }

        public static SiloAddress Zero { get { throw null; } }

        public static int AllocateNewGeneration() { throw null; }

        public int CompareTo(SiloAddress? other) { throw null; }

        public bool Equals(SiloAddress? other) { throw null; }

        public override bool Equals(object? obj) { throw null; }

        public static SiloAddress FromParsableString(string addr) { throw null; }

        public static SiloAddress FromUtf8String(System.ReadOnlySpan<byte> addr) { throw null; }

        public int GetConsistentHashCode() { throw null; }

        public override int GetHashCode() { throw null; }

        public uint[] GetUniformHashCodes(int numHashes) { throw null; }

        public bool IsPredecessorOf(SiloAddress other) { throw null; }

        public bool IsSuccessorOf(SiloAddress other) { throw null; }

        public static SiloAddress New(System.Net.IPAddress address, int port, int generation) { throw null; }

        public static SiloAddress New(System.Net.IPEndPoint ep, int gen) { throw null; }

        string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public string ToParsableString() { throw null; }

        public override string ToString() { throw null; }

        public string ToStringWithHashCode() { throw null; }
    }

    public sealed partial class SiloAddressConverter : System.Text.Json.Serialization.JsonConverter<SiloAddress>
    {
        public override SiloAddress Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) { throw null; }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, SiloAddress value, System.Text.Json.JsonSerializerOptions options) { }
    }

    public partial class SiloRoleBasedPlacement : PlacementStrategy
    {
    }

    [GenerateSerializer]
    public sealed partial class SiloUnavailableException : OrleansMessageRejectionException
    {
        public SiloUnavailableException() : base(default!, default) { }

        public SiloUnavailableException(string message, System.Exception innerException) : base(default!, default) { }

        public SiloUnavailableException(string msg) : base(default!, default) { }
    }

    [Immutable]
    public readonly partial struct SystemTargetGrainId : System.IEquatable<SystemTargetGrainId>, System.IComparable<SystemTargetGrainId>, System.ISpanFormattable, System.IFormattable
    {
        public GrainId GrainId { get { throw null; } }

        public readonly int CompareTo(SystemTargetGrainId other) { throw null; }

        public static SystemTargetGrainId Create(GrainType kind, SiloAddress address, string? extraIdentifier) { throw null; }

        public static SystemTargetGrainId Create(GrainType kind, SiloAddress address) { throw null; }

        public static GrainId CreateGrainServiceGrainId(int typeCode, string grainSystemId, SiloAddress address) { throw null; }

        public static GrainType CreateGrainType(string name) { throw null; }

        public readonly bool Equals(SystemTargetGrainId other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public readonly SiloAddress GetSiloAddress() { throw null; }

        public static bool IsSystemTargetGrainId(in GrainId id) { throw null; }

        public static bool operator ==(SystemTargetGrainId left, SystemTargetGrainId right) { throw null; }

        public static bool operator >(SystemTargetGrainId left, SystemTargetGrainId right) { throw null; }

        public static bool operator >=(SystemTargetGrainId left, SystemTargetGrainId right) { throw null; }

        public static bool operator !=(SystemTargetGrainId left, SystemTargetGrainId right) { throw null; }

        public static bool operator <(SystemTargetGrainId left, SystemTargetGrainId right) { throw null; }

        public static bool operator <=(SystemTargetGrainId left, SystemTargetGrainId right) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string ToString() { throw null; }

        public static bool TryParse(GrainId grainId, out SystemTargetGrainId systemTargetId) { throw null; }

        public readonly SystemTargetGrainId WithSiloAddress(SiloAddress siloAddress) { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class SystemTargetPlacementStrategy : PlacementStrategy
    {
        public static SystemTargetPlacementStrategy Instance { get { throw null; } }

        public override bool IsUsingGrainDirectory { get { throw null; } }
    }

    [SerializerTransparent]
    public abstract partial class TaskRequest : RequestBase
    {
        public sealed override System.Threading.Tasks.ValueTask<Orleans.Serialization.Invocation.Response> Invoke() { throw null; }

        protected abstract System.Threading.Tasks.Task InvokeInner();
    }

    [SerializerTransparent]
    public abstract partial class TaskRequest<TResult> : RequestBase
    {
        public sealed override System.Threading.Tasks.ValueTask<Orleans.Serialization.Invocation.Response> Invoke() { throw null; }

        protected abstract System.Threading.Tasks.Task<TResult> InvokeInner();
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class UniqueKey : System.IComparable<UniqueKey>, System.IEquatable<UniqueKey>
    {
        public int BaseTypeCode { get { throw null; } }

        public bool HasKeyExt { get { throw null; } }

        public Category IdCategory { get { throw null; } }

        public bool IsLongKey { get { throw null; } }

        public bool IsSystemTargetKey { get { throw null; } }

        [Id(3)]
        public string KeyExt { get { throw null; } }

        [Id(0)]
        public ulong N0 { get { throw null; } }

        [Id(1)]
        public ulong N1 { get { throw null; } }

        [Id(2)]
        public ulong TypeCodeData { get { throw null; } }

        public int CompareTo(UniqueKey other) { throw null; }

        public bool Equals(UniqueKey other) { throw null; }

        public override bool Equals(object o) { throw null; }

        public override int GetHashCode() { throw null; }

        public static UniqueKey NewGrainServiceKey(short key, long typeData) { throw null; }

        public static UniqueKey NewGrainServiceKey(string key, long typeData) { throw null; }

        public static UniqueKey NewKey() { throw null; }

        public static UniqueKey NewSystemTargetKey(System.Guid guid, long typeData) { throw null; }

        public static UniqueKey NewSystemTargetKey(short systemId) { throw null; }

        public System.Guid PrimaryKeyToGuid() { throw null; }

        public System.Guid PrimaryKeyToGuid(out string extendedKey) { throw null; }

        public long PrimaryKeyToLong() { throw null; }

        public long PrimaryKeyToLong(out string extendedKey) { throw null; }

        public override string ToString() { throw null; }

        public enum Category : byte
        {
            None = 0,
            SystemTarget = 1,
            SystemGrain = 2,
            Grain = 3,
            Client = 4,
            KeyExtGrain = 6,
            KeyExtSystemTarget = 8
        }
    }

    public static partial class Utils
    {
        public static float AverageTicksToMilliSeconds(float ticks) { throw null; }

        public static System.Collections.Generic.IEnumerable<System.Collections.Generic.List<T>> BatchIEnumerable<T>(this System.Collections.Generic.IEnumerable<T> sequence, int batchSize) { throw null; }

        public static string DictionaryToString<T1, T2>(System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<T1, T2>> dict, System.Func<T2, string?>? toString = null, string? separator = null) { throw null; }

        public static string EnumerableToString<T>(System.Collections.Generic.IEnumerable<T>? collection, System.Func<T, string>? toString = null, string separator = ", ", bool putInBrackets = true) { throw null; }

        public static string GetStackTrace(int skipFrames = 0) { throw null; }

        public static void SafeExecute(System.Action action, Microsoft.Extensions.Logging.ILogger? logger = null, string? caller = null) { }

        public static void SafeExecute(System.Action action) { }

        public static System.Threading.Tasks.Task SafeExecuteAsync(System.Threading.Tasks.Task task) { throw null; }

        public static long TicksToMilliSeconds(long ticks) { throw null; }

        public static string TimeSpanToString(System.TimeSpan timeSpan) { throw null; }

        public static SiloAddress? ToGatewayAddress(this System.Uri uri) { throw null; }

        public static System.Uri ToGatewayUri(this SiloAddress address) { throw null; }

        public static System.Uri ToGatewayUri(this System.Net.IPEndPoint ep) { throw null; }

        public static System.Net.IPEndPoint? ToIPEndPoint(this System.Uri uri) { throw null; }
    }

    [SerializerTransparent]
    public abstract partial class VoidRequest : RequestBase
    {
        public sealed override System.Threading.Tasks.ValueTask<Orleans.Serialization.Invocation.Response> Invoke() { throw null; }

        protected abstract void InvokeInner();
    }

    [GenerateSerializer]
    public partial class WrappedException : OrleansException
    {
        [System.Obsolete]
        protected WrappedException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public WrappedException(string message) { }

        [Id(0)]
        public string OriginalExceptionType { get { throw null; } set { } }

        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        public static void CreateAndRethrow(System.Exception exception) { }

        [System.Obsolete]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public override string ToString() { throw null; }
    }
}

namespace Orleans.Runtime.Serialization
{
    [RegisterSerializer]
    public sealed partial class SiloAddressCodec : Orleans.Serialization.Codecs.IFieldCodec<SiloAddress>, Orleans.Serialization.Codecs.IFieldCodec
    {
        public SiloAddress ReadValue<TReaderInput>(ref Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, SiloAddress? value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace Orleans.Serialization
{
    public abstract partial class DeserializationContext
    {
        public abstract object RuntimeClient { get; }
        public abstract System.IServiceProvider ServiceProvider { get; }
    }

    public partial interface IOnDeserialized
    {
        void OnDeserialized(DeserializationContext context);
    }
}

namespace Orleans.Services
{
    public partial interface IGrainService : ISystemTarget, Runtime.IAddressable
    {
    }

    public partial interface IGrainServiceClient<TGrainService>
        where TGrainService : IGrainService
    {
    }
}

namespace Orleans.Statistics
{
    [Immutable]
    [GenerateSerializer]
    [Alias("Orleans.Statistics.EnvironmentStatistics")]
    public readonly partial struct EnvironmentStatistics
    {
        [Id(2)]
        public readonly long AvailableMemoryBytes;
        [Id(0)]
        public readonly float CpuUsagePercentage;
        [Id(3)]
        public readonly long MaximumAvailableMemoryBytes;
        [Id(1)]
        public readonly long MemoryUsageBytes;
    }

    [System.Obsolete("This functionality will be removed, use IEnvironmentStatisticsProvider.GetEnvironmentStatistics instead.")]
    public partial interface IAppEnvironmentStatistics
    {
        long? MemoryUsage { get; }
    }

    public partial interface IEnvironmentStatisticsProvider
    {
        EnvironmentStatistics GetEnvironmentStatistics();
    }

    [System.Obsolete("This functionality will be removed, use IEnvironmentStatisticsProvider.GetEnvironmentStatistics instead.")]
    public partial interface IHostEnvironmentStatistics
    {
        long? AvailableMemory { get; }

        float? CpuUsage { get; }

        long? TotalPhysicalMemory { get; }
    }
}

namespace Orleans.Timers
{
    public partial interface ITimerRegistry
    {
        Runtime.IGrainTimer RegisterGrainTimer<TState>(Runtime.IGrainContext grainContext, System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback, TState state, Runtime.GrainTimerCreationOptions options);
        [System.Obsolete("Use 'RegisterGrainTimer(grainContext, callback, state, new() { DueTime = dueTime, Period = period, Interleave = true })' instead.")]
        System.IDisposable RegisterTimer(Runtime.IGrainContext grainContext, System.Func<object?, System.Threading.Tasks.Task> callback, object? state, System.TimeSpan dueTime, System.TimeSpan period);
    }
}

namespace Orleans.Versions
{
    public partial interface IVersionStore : IVersionManager
    {
        bool IsEnabled { get; }

        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Runtime.GrainInterfaceType, Compatibility.CompatibilityStrategy>> GetCompatibilityStrategies();
        System.Threading.Tasks.Task<Compatibility.CompatibilityStrategy> GetCompatibilityStrategy();
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Runtime.GrainInterfaceType, Selector.VersionSelectorStrategy>> GetSelectorStrategies();
        System.Threading.Tasks.Task<Selector.VersionSelectorStrategy> GetSelectorStrategy();
    }
}

namespace Orleans.Versions.Compatibility
{
    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class AllVersionsCompatible : CompatibilityStrategy
    {
        public static AllVersionsCompatible Singleton { get { throw null; } }
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class BackwardCompatible : CompatibilityStrategy
    {
        public static BackwardCompatible Singleton { get { throw null; } }
    }

    [SerializerTransparent]
    public abstract partial class CompatibilityStrategy
    {
    }

    public partial interface ICompatibilityDirector
    {
        bool IsCompatible(ushort requestedVersion, ushort currentVersion);
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class StrictVersionCompatible : CompatibilityStrategy
    {
        public static StrictVersionCompatible Singleton { get { throw null; } }
    }
}

namespace Orleans.Versions.Selector
{
    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class AllCompatibleVersions : VersionSelectorStrategy
    {
        public static AllCompatibleVersions Singleton { get { throw null; } }
    }

    public partial interface IVersionSelector
    {
        ushort[] GetSuitableVersion(ushort requestedVersion, ushort[] availableVersions, Compatibility.ICompatibilityDirector compatibilityDirector);
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class LatestVersion : VersionSelectorStrategy
    {
        public static LatestVersion Singleton { get { throw null; } }
    }

    [GenerateSerializer]
    [Immutable]
    [SuppressReferenceTracking]
    public sealed partial class MinimumVersion : VersionSelectorStrategy
    {
        public static MinimumVersion Singleton { get { throw null; } }
    }

    [SerializerTransparent]
    public abstract partial class VersionSelectorStrategy
    {
    }
}

namespace OrleansCodeGen.Orleans
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_DeactivationReasonCode : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.DeactivationReasonCode>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public global::Orleans.DeactivationReasonCode ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.DeactivationReasonCode value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace OrleansCodeGen.Orleans.CodeGeneration
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_InvokeMethodOptions : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.CodeGeneration.InvokeMethodOptions>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public global::Orleans.CodeGeneration.InvokeMethodOptions ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.CodeGeneration.InvokeMethodOptions value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace OrleansCodeGen.Orleans.Concurrency
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Immutable<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Concurrency.Immutable<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Concurrency.Immutable<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_Immutable(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Concurrency.Immutable<T> instance) { }

        public global::Orleans.Concurrency.Immutable<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Concurrency.Immutable<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Concurrency.Immutable<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Immutable<T> : global::Orleans.Serialization.Cloning.ShallowCopier<global::Orleans.Concurrency.Immutable<T>>
    {
    }
}

namespace OrleansCodeGen.Orleans.Core.Internal
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 instance) { }

        public Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 instance) { }

        public Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 DeepCopy(Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 DeepCopy(Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), "Ext", typeof(global::Orleans.Core.Internal.IGrainManagementExtension), typeof(global::Orleans.Core.Internal.IGrainManagementExtension), "1B9614D1" })]
    public sealed partial class Invokable_IGrainManagementExtension_GrainReference_Ext_1B9614D1 : global::Orleans.Runtime.Request
    {
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.ValueTask InvokeInner() { throw null; }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), "Ext", typeof(global::Orleans.Core.Internal.IGrainManagementExtension), typeof(global::Orleans.Core.Internal.IGrainManagementExtension), "4CC93B45" })]
    public sealed partial class Invokable_IGrainManagementExtension_GrainReference_Ext_4CC93B45 : global::Orleans.Runtime.Request
    {
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.ValueTask InvokeInner() { throw null; }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }
}

namespace OrleansCodeGen.Orleans.Metadata
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ClusterManifest : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Metadata.ClusterManifest>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ClusterManifest(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Metadata.ClusterManifest> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Metadata.ClusterManifest instance) { }

        public global::Orleans.Metadata.ClusterManifest ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Metadata.ClusterManifest instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Metadata.ClusterManifest value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainInterfaceProperties : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Metadata.GrainInterfaceProperties>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GrainInterfaceProperties(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Metadata.GrainInterfaceProperties> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Metadata.GrainInterfaceProperties instance) { }

        public global::Orleans.Metadata.GrainInterfaceProperties ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Metadata.GrainInterfaceProperties instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Metadata.GrainInterfaceProperties value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainManifest : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Metadata.GrainManifest>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GrainManifest(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Metadata.GrainManifest> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Metadata.GrainManifest instance) { }

        public global::Orleans.Metadata.GrainManifest ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Metadata.GrainManifest instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Metadata.GrainManifest value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainProperties : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Metadata.GrainProperties>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GrainProperties(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Metadata.GrainProperties> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Metadata.GrainProperties instance) { }

        public global::Orleans.Metadata.GrainProperties ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Metadata.GrainProperties instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Metadata.GrainProperties value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_MajorMinorVersion : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Metadata.MajorMinorVersion>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Metadata.MajorMinorVersion>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Metadata.MajorMinorVersion instance) { }

        public global::Orleans.Metadata.MajorMinorVersion ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Metadata.MajorMinorVersion instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Metadata.MajorMinorVersion value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace OrleansCodeGen.Orleans.Runtime
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ActivationCountBasedPlacement : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.ActivationCountBasedPlacement>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.ActivationCountBasedPlacement instance) { }

        public global::Orleans.Runtime.ActivationCountBasedPlacement ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.ActivationCountBasedPlacement instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.ActivationCountBasedPlacement value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ActivationId : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.ActivationId>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Runtime.ActivationId>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Runtime.ActivationId instance) { }

        public global::Orleans.Runtime.ActivationId ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Runtime.ActivationId instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.ActivationId value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_AsyncEnumerableRequest<T> : global::Orleans.Serialization.Serializers.AbstractTypeSerializer<global::Orleans.Runtime.AsyncEnumerableRequest<T>>
    {
        public override void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.AsyncEnumerableRequest<T> instance) { }

        public override void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.AsyncEnumerableRequest<T> instance) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ClientNotAvailableException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.ClientNotAvailableException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ClientNotAvailableException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.ClientNotAvailableException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.ClientNotAvailableException instance) { }

        public global::Orleans.Runtime.ClientNotAvailableException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.ClientNotAvailableException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.ClientNotAvailableException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_EnumerationAbortedException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.EnumerationAbortedException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_EnumerationAbortedException(global::Orleans.Serialization.Serializers.IBaseCodec<System.Exception> _baseTypeSerializer) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.EnumerationAbortedException instance) { }

        public global::Orleans.Runtime.EnumerationAbortedException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.EnumerationAbortedException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.EnumerationAbortedException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_EnumerationResult : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.EnumerationResult>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public global::Orleans.Runtime.EnumerationResult ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.EnumerationResult value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GatewayTooBusyException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GatewayTooBusyException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GatewayTooBusyException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.GatewayTooBusyException instance) { }

        public global::Orleans.Runtime.GatewayTooBusyException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.GatewayTooBusyException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GatewayTooBusyException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainAddress : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GrainAddress>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GrainAddress(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.GrainAddress instance) { }

        public global::Orleans.Runtime.GrainAddress ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.GrainAddress instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GrainAddress value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainAddressCacheUpdate : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GrainAddressCacheUpdate>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GrainAddressCacheUpdate(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.GrainAddressCacheUpdate> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.GrainAddressCacheUpdate instance) { }

        public global::Orleans.Runtime.GrainAddressCacheUpdate ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.GrainAddressCacheUpdate instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GrainAddressCacheUpdate value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainExtensionNotInstalledException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GrainExtensionNotInstalledException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GrainExtensionNotInstalledException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.GrainExtensionNotInstalledException instance) { }

        public global::Orleans.Runtime.GrainExtensionNotInstalledException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.GrainExtensionNotInstalledException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GrainExtensionNotInstalledException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainId : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GrainId>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Runtime.GrainId>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_GrainId(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Runtime.GrainId instance) { }

        public global::Orleans.Runtime.GrainId ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Runtime.GrainId instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GrainId value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainInterfaceType : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GrainInterfaceType>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Runtime.GrainInterfaceType>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_GrainInterfaceType(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Runtime.GrainInterfaceType instance) { }

        public global::Orleans.Runtime.GrainInterfaceType ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Runtime.GrainInterfaceType instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GrainInterfaceType value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainReferenceNotBoundException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GrainReferenceNotBoundException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GrainReferenceNotBoundException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.GrainReferenceNotBoundException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.GrainReferenceNotBoundException instance) { }

        public global::Orleans.Runtime.GrainReferenceNotBoundException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.GrainReferenceNotBoundException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GrainReferenceNotBoundException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GrainType : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GrainType>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Runtime.GrainType>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_GrainType(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Runtime.GrainType instance) { }

        public global::Orleans.Runtime.GrainType ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Runtime.GrainType instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GrainType value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GuidId : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.GuidId>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GuidId(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.GuidId> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.GuidId instance) { }

        public global::Orleans.Runtime.GuidId ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.GuidId instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.GuidId value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_HashBasedPlacement : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.HashBasedPlacement>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.HashBasedPlacement instance) { }

        public global::Orleans.Runtime.HashBasedPlacement ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.HashBasedPlacement instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.HashBasedPlacement value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_IdSpan : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.IdSpan>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Runtime.IdSpan>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Runtime.IdSpan instance) { }

        public global::Orleans.Runtime.IdSpan ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Runtime.IdSpan instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.IdSpan value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T>>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> instance) { }

        public Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 instance) { }

        public Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T>>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> instance) { }

        public Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_LegacyGrainId : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.LegacyGrainId>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_LegacyGrainId(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.LegacyGrainId> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.LegacyGrainId instance) { }

        public global::Orleans.Runtime.LegacyGrainId ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.LegacyGrainId instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.LegacyGrainId value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_LimitExceededException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.LimitExceededException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_LimitExceededException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.LimitExceededException instance) { }

        public global::Orleans.Runtime.LimitExceededException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.LimitExceededException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.LimitExceededException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_MembershipVersion : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.MembershipVersion>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Runtime.MembershipVersion>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Runtime.MembershipVersion instance) { }

        public global::Orleans.Runtime.MembershipVersion ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Runtime.MembershipVersion instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.MembershipVersion value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_OrleansConfigurationException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.OrleansConfigurationException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_OrleansConfigurationException(global::Orleans.Serialization.Serializers.IBaseCodec<System.Exception> _baseTypeSerializer, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.OrleansConfigurationException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.OrleansConfigurationException instance) { }

        public global::Orleans.Runtime.OrleansConfigurationException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.OrleansConfigurationException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.OrleansConfigurationException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_OrleansException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.OrleansException>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Runtime.OrleansException>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_OrleansException(global::Orleans.Serialization.Serializers.IBaseCodec<System.Exception> _baseTypeSerializer) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.OrleansException instance) { }

        public global::Orleans.Runtime.OrleansException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.OrleansException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.OrleansException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_OrleansLifecycleCanceledException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.OrleansLifecycleCanceledException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_OrleansLifecycleCanceledException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.OrleansLifecycleCanceledException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.OrleansLifecycleCanceledException instance) { }

        public global::Orleans.Runtime.OrleansLifecycleCanceledException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.OrleansLifecycleCanceledException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.OrleansLifecycleCanceledException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_OrleansMessageRejectionException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.OrleansMessageRejectionException>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Runtime.OrleansMessageRejectionException>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_OrleansMessageRejectionException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.OrleansMessageRejectionException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.OrleansMessageRejectionException instance) { }

        public global::Orleans.Runtime.OrleansMessageRejectionException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.OrleansMessageRejectionException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.OrleansMessageRejectionException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_PreferLocalPlacement : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.PreferLocalPlacement>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.PreferLocalPlacement instance) { }

        public global::Orleans.Runtime.PreferLocalPlacement ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.PreferLocalPlacement instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.PreferLocalPlacement value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_RandomPlacement : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.RandomPlacement>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.RandomPlacement instance) { }

        public global::Orleans.Runtime.RandomPlacement ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.RandomPlacement instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.RandomPlacement value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SiloUnavailableException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.SiloUnavailableException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_SiloUnavailableException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.SiloUnavailableException instance) { }

        public global::Orleans.Runtime.SiloUnavailableException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.SiloUnavailableException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.SiloUnavailableException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SystemTargetPlacementStrategy : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.SystemTargetPlacementStrategy>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.SystemTargetPlacementStrategy instance) { }

        public global::Orleans.Runtime.SystemTargetPlacementStrategy ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.SystemTargetPlacementStrategy instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.SystemTargetPlacementStrategy value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_UniqueKey : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.UniqueKey>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.UniqueKey instance) { }

        public global::Orleans.Runtime.UniqueKey ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.UniqueKey instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.UniqueKey value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_WrappedException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.WrappedException>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Runtime.WrappedException>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_WrappedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.WrappedException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.WrappedException instance) { }

        public global::Orleans.Runtime.WrappedException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.WrappedException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.WrappedException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_AsyncEnumerableRequest<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Runtime.AsyncEnumerableRequest<T>>, global::Orleans.Serialization.Cloning.IDeepCopier, global::Orleans.Serialization.Cloning.IBaseCopier<global::Orleans.Runtime.AsyncEnumerableRequest<T>>, global::Orleans.Serialization.Cloning.IBaseCopier
    {
        public void DeepCopy(global::Orleans.Runtime.AsyncEnumerableRequest<T> input, global::Orleans.Runtime.AsyncEnumerableRequest<T> output, global::Orleans.Serialization.Cloning.CopyContext context) { }

        public global::Orleans.Runtime.AsyncEnumerableRequest<T> DeepCopy(global::Orleans.Runtime.AsyncEnumerableRequest<T> original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ClientNotAvailableException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.ClientNotAvailableException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_ClientNotAvailableException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_EnumerationAbortedException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.EnumerationAbortedException, System.Exception>
    {
        public Copier_EnumerationAbortedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_GatewayTooBusyException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.GatewayTooBusyException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_GatewayTooBusyException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_GrainExtensionNotInstalledException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.GrainExtensionNotInstalledException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_GrainExtensionNotInstalledException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_GrainReferenceNotBoundException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.GrainReferenceNotBoundException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_GrainReferenceNotBoundException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> DeepCopy(Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 DeepCopy(Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> DeepCopy(Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_LimitExceededException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.LimitExceededException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_LimitExceededException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_OrleansConfigurationException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.OrleansConfigurationException, System.Exception>
    {
        public Copier_OrleansConfigurationException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_OrleansException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.OrleansException, System.Exception>
    {
        public Copier_OrleansException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_OrleansLifecycleCanceledException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.OrleansLifecycleCanceledException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_OrleansLifecycleCanceledException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_OrleansMessageRejectionException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.OrleansMessageRejectionException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_OrleansMessageRejectionException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_SiloUnavailableException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.SiloUnavailableException, global::Orleans.Runtime.OrleansMessageRejectionException>
    {
        public Copier_SiloUnavailableException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_WrappedException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.WrappedException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_WrappedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }

        public override void DeepCopy(global::Orleans.Runtime.WrappedException input, global::Orleans.Runtime.WrappedException output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), "Ext", typeof(global::Orleans.Runtime.IAsyncEnumerableGrainExtension), typeof(global::Orleans.Runtime.IAsyncEnumerableGrainExtension), "370CD5AB" })]
    public sealed partial class Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_370CD5AB_1<T> : global::Orleans.Runtime.Request<(global::Orleans.Runtime.EnumerationResult, object)>
    {
        public System.Guid arg0;
        public global::Orleans.Runtime.IAsyncEnumerableRequest<T> arg1;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.ValueTask<(global::Orleans.Runtime.EnumerationResult, object)> InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), "Ext", typeof(global::Orleans.Runtime.IAsyncEnumerableGrainExtension), typeof(global::Orleans.Runtime.IAsyncEnumerableGrainExtension), "3C6D7209" })]
    public sealed partial class Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_3C6D7209 : global::Orleans.Runtime.Request
    {
        public System.Guid arg0;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.ValueTask InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), "Ext", typeof(global::Orleans.Runtime.IAsyncEnumerableGrainExtension), typeof(global::Orleans.Runtime.IAsyncEnumerableGrainExtension), "A7FA7E30" })]
    public sealed partial class Invokable_IAsyncEnumerableGrainExtension_GrainReference_Ext_A7FA7E30_1<T> : global::Orleans.Runtime.Request<(global::Orleans.Runtime.EnumerationResult, object)>
    {
        public System.Guid arg0;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.ValueTask<(global::Orleans.Runtime.EnumerationResult, object)> InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }
}

namespace OrleansCodeGen.Orleans.Statistics
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_EnvironmentStatistics : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Statistics.EnvironmentStatistics>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Statistics.EnvironmentStatistics>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Statistics.EnvironmentStatistics instance) { }

        public global::Orleans.Statistics.EnvironmentStatistics ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Statistics.EnvironmentStatistics instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Statistics.EnvironmentStatistics value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace OrleansCodeGen.Orleans.Versions.Compatibility
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_AllVersionsCompatible : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Versions.Compatibility.AllVersionsCompatible>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Versions.Compatibility.AllVersionsCompatible instance) { }

        public global::Orleans.Versions.Compatibility.AllVersionsCompatible ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Versions.Compatibility.AllVersionsCompatible instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Versions.Compatibility.AllVersionsCompatible value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_BackwardCompatible : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Versions.Compatibility.BackwardCompatible>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Versions.Compatibility.BackwardCompatible instance) { }

        public global::Orleans.Versions.Compatibility.BackwardCompatible ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Versions.Compatibility.BackwardCompatible instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Versions.Compatibility.BackwardCompatible value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_StrictVersionCompatible : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Versions.Compatibility.StrictVersionCompatible>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Versions.Compatibility.StrictVersionCompatible instance) { }

        public global::Orleans.Versions.Compatibility.StrictVersionCompatible ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Versions.Compatibility.StrictVersionCompatible instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Versions.Compatibility.StrictVersionCompatible value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace OrleansCodeGen.Orleans.Versions.Selector
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_AllCompatibleVersions : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Versions.Selector.AllCompatibleVersions>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Versions.Selector.AllCompatibleVersions instance) { }

        public global::Orleans.Versions.Selector.AllCompatibleVersions ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Versions.Selector.AllCompatibleVersions instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Versions.Selector.AllCompatibleVersions value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_LatestVersion : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Versions.Selector.LatestVersion>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Versions.Selector.LatestVersion instance) { }

        public global::Orleans.Versions.Selector.LatestVersion ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Versions.Selector.LatestVersion instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Versions.Selector.LatestVersion value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_MinimumVersion : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Versions.Selector.MinimumVersion>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Versions.Selector.MinimumVersion instance) { }

        public global::Orleans.Versions.Selector.MinimumVersion ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Versions.Selector.MinimumVersion instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Versions.Selector.MinimumVersion value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans
{
    public static partial class TlsConnectionBuilderExtensions
    {
        public static void UseClientTls(this Microsoft.AspNetCore.Connections.IConnectionBuilder builder, Connections.Security.TlsOptions options) { }

        public static void UseServerTls(this Microsoft.AspNetCore.Connections.IConnectionBuilder builder, Connections.Security.TlsOptions options) { }
    }
}

namespace Orleans.Connections.Security
{
    public static partial class CertificateLoader
    {
        public static System.Security.Cryptography.X509Certificates.X509Certificate2 LoadFromStoreCert(string subject, string storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, bool allowInvalid, bool server) { throw null; }
    }

    public delegate System.Security.Cryptography.X509Certificates.X509Certificate ClientCertificateSelectionCallback(object sender, string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection localCertificates, System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate, string[] acceptableIssuers);
    public partial interface ITlsApplicationProtocolFeature
    {
        System.ReadOnlyMemory<byte> ApplicationProtocol { get; }
    }

    public partial interface ITlsConnectionFeature
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2 RemoteCertificate { get; set; }

        System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetRemoteCertificateAsync(System.Threading.CancellationToken cancellationToken);
    }

    public partial interface ITlsHandshakeFeature
    {
        System.Security.Authentication.CipherAlgorithmType CipherAlgorithm { get; }

        int CipherStrength { get; }

        System.Security.Authentication.HashAlgorithmType HashAlgorithm { get; }

        int HashStrength { get; }

        System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm { get; }

        int KeyExchangeStrength { get; }

        System.Security.Authentication.SslProtocols Protocol { get; }
    }

    public enum RemoteCertificateMode
    {
        NoCertificate = 0,
        AllowCertificate = 1,
        RequireCertificate = 2
    }

    public delegate bool RemoteCertificateValidator(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors policyErrors);
    public delegate System.Security.Cryptography.X509Certificates.X509Certificate ServerCertificateSelectionCallback(object sender, string hostName);
    public partial class TlsClientAuthenticationOptions
    {
        public System.Security.Cryptography.X509Certificates.X509RevocationMode CertificateRevocationCheckMode { get { throw null; } set { } }

        public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get { throw null; } set { } }

        public System.Security.Authentication.SslProtocols EnabledSslProtocols { get { throw null; } set { } }

        public ClientCertificateSelectionCallback LocalCertificateSelectionCallback { get { throw null; } set { } }

        public object SslClientAuthenticationOptions { get { throw null; } }

        public string TargetHost { get { throw null; } set { } }
    }

    public partial class TlsOptions
    {
        public bool CheckCertificateRevocation { get { throw null; } set { } }

        public RemoteCertificateMode ClientCertificateMode { get { throw null; } set { } }

        public System.TimeSpan HandshakeTimeout { get { throw null; } set { } }

        public System.Security.Cryptography.X509Certificates.X509Certificate2 LocalCertificate { get { throw null; } set { } }

        public System.Func<object, string, System.Security.Cryptography.X509Certificates.X509CertificateCollection, System.Security.Cryptography.X509Certificates.X509Certificate, string[], System.Security.Cryptography.X509Certificates.X509Certificate2> LocalClientCertificateSelector { get { throw null; } set { } }

        public System.Func<Microsoft.AspNetCore.Connections.ConnectionContext, string, System.Security.Cryptography.X509Certificates.X509Certificate2> LocalServerCertificateSelector { get { throw null; } set { } }

        public System.Action<Microsoft.AspNetCore.Connections.ConnectionContext, TlsClientAuthenticationOptions> OnAuthenticateAsClient { get { throw null; } set { } }

        public System.Action<Microsoft.AspNetCore.Connections.ConnectionContext, TlsServerAuthenticationOptions> OnAuthenticateAsServer { get { throw null; } set { } }

        public RemoteCertificateMode RemoteCertificateMode { get { throw null; } set { } }

        public RemoteCertificateValidator RemoteCertificateValidation { get { throw null; } set { } }

        public System.Security.Authentication.SslProtocols SslProtocols { get { throw null; } set { } }

        public void AllowAnyRemoteCertificate() { }
    }

    public partial class TlsServerAuthenticationOptions
    {
        public System.Security.Cryptography.X509Certificates.X509RevocationMode CertificateRevocationCheckMode { get { throw null; } set { } }

        public bool ClientCertificateRequired { get { throw null; } set { } }

        public System.Security.Authentication.SslProtocols EnabledSslProtocols { get { throw null; } set { } }

        public System.Security.Cryptography.X509Certificates.X509Certificate ServerCertificate { get { throw null; } set { } }

        public ServerCertificateSelectionCallback ServerCertificateSelectionCallback { get { throw null; } set { } }

        public object SslServerAuthenticationOptions { get { throw null; } }
    }
}

namespace Orleans.Hosting
{
    public static partial class OrleansConnectionSecurityHostingExtensions
    {
        public static IClientBuilder UseTls(this IClientBuilder builder, System.Action<Connections.Security.TlsOptions> configureOptions) { throw null; }

        public static IClientBuilder UseTls(this IClientBuilder builder, System.Security.Cryptography.X509Certificates.StoreName storeName, string subject, bool allowInvalid, System.Security.Cryptography.X509Certificates.StoreLocation location, System.Action<Connections.Security.TlsOptions> configureOptions) { throw null; }

        public static IClientBuilder UseTls(this IClientBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Action<Connections.Security.TlsOptions> configureOptions) { throw null; }

        public static IClientBuilder UseTls(this IClientBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { throw null; }

        public static ISiloBuilder UseTls(this ISiloBuilder builder, System.Action<Connections.Security.TlsOptions> configureOptions) { throw null; }

        public static ISiloBuilder UseTls(this ISiloBuilder builder, System.Security.Cryptography.X509Certificates.StoreName storeName, string subject, bool allowInvalid, System.Security.Cryptography.X509Certificates.StoreLocation location, System.Action<Connections.Security.TlsOptions> configureOptions) { throw null; }

        public static ISiloBuilder UseTls(this ISiloBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Action<Connections.Security.TlsOptions> configureOptions) { throw null; }

        public static ISiloBuilder UseTls(this ISiloBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) { throw null; }
    }
}
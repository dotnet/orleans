//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.Hosting
{
    public static partial class RedisClusteringIClientBuilderExtensions
    {
        public static Orleans.Hosting.IClientBuilder UseRedisClustering(this Orleans.Hosting.IClientBuilder builder, System.Action<Orleans.Clustering.Redis.RedisClusteringOptions> configuration) { throw null; }

        public static Orleans.Hosting.IClientBuilder UseRedisClustering(this Orleans.Hosting.IClientBuilder builder, string redisConnectionString) { throw null; }
    }

    public static partial class RedisClusteringISiloBuilderExtensions
    {
        public static Orleans.Hosting.ISiloBuilder UseRedisClustering(this Orleans.Hosting.ISiloBuilder builder, System.Action<Orleans.Clustering.Redis.RedisClusteringOptions> configuration) { throw null; }

        public static Orleans.Hosting.ISiloBuilder UseRedisClustering(this Orleans.Hosting.ISiloBuilder builder, string redisConnectionString) { throw null; }
    }
}

namespace Orleans.Clustering.Redis
{
    public partial class RedisClusteringException : System.Exception
    {
        public RedisClusteringException() { }

        [System.Obsolete]
        protected RedisClusteringException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public RedisClusteringException(string message, System.Exception innerException) { }

        public RedisClusteringException(string message) { }
    }

    public partial class RedisClusteringOptions
    {
        public StackExchange.Redis.ConfigurationOptions ConfigurationOptions { get { throw null; } set { } }

        public System.Func<RedisClusteringOptions, System.Threading.Tasks.Task<StackExchange.Redis.IConnectionMultiplexer>> CreateMultiplexer { get { throw null; } set { } }

        public System.Func<Configuration.ClusterOptions, StackExchange.Redis.RedisKey> CreateRedisKey { get { throw null; } set { } }

        public System.TimeSpan? EntryExpiry { get { throw null; } set { } }

        public static System.Threading.Tasks.Task<StackExchange.Redis.IConnectionMultiplexer> DefaultCreateMultiplexer(RedisClusteringOptions options) { throw null; }

        public static StackExchange.Redis.RedisKey DefaultCreateRedisKey(Configuration.ClusterOptions clusterOptions) { throw null; }
    }

    public partial class RedisClusteringOptionsValidator : IConfigurationValidator
    {
        public RedisClusteringOptionsValidator(Microsoft.Extensions.Options.IOptions<RedisClusteringOptions> options) { }

        public void ValidateConfiguration() { }
    }
}
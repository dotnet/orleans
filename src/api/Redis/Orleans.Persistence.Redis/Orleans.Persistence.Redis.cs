//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Hosting
{
    public static partial class RedisGrainStorageServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddRedisGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.RedisStorageOptions>> configureOptions = null) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddRedisGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Persistence.RedisStorageOptions> configureOptions) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddRedisGrainStorageAsDefault(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.RedisStorageOptions>> configureOptions = null) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddRedisGrainStorageAsDefault(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Persistence.RedisStorageOptions> configureOptions) { throw null; }
    }

    public static partial class RedisSiloBuilderExtensions
    {
        public static ISiloBuilder AddRedisGrainStorage(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.RedisStorageOptions>> configureOptionsBuilder) { throw null; }

        public static ISiloBuilder AddRedisGrainStorage(this ISiloBuilder builder, string name, System.Action<Persistence.RedisStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddRedisGrainStorage(this ISiloBuilder builder, string name) { throw null; }

        public static ISiloBuilder AddRedisGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Persistence.RedisStorageOptions>> configureOptionsBuilder) { throw null; }

        public static ISiloBuilder AddRedisGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Persistence.RedisStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddRedisGrainStorageAsDefault(this ISiloBuilder builder) { throw null; }
    }
}

namespace Orleans.Persistence
{
    public partial class RedisGrainStorage : Storage.IGrainStorage, ILifecycleParticipant<Runtime.ISiloLifecycle>
    {
        public RedisGrainStorage(string name, RedisStorageOptions options, Storage.IGrainStorageSerializer grainStorageSerializer, Microsoft.Extensions.Options.IOptions<Configuration.ClusterOptions> clusterOptions, Serialization.Serializers.IActivatorProvider activatorProvider, Microsoft.Extensions.Logging.ILogger<RedisGrainStorage> logger) { }

        public System.Threading.Tasks.Task ClearStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public void Participate(Runtime.ISiloLifecycle lifecycle) { }

        public System.Threading.Tasks.Task ReadStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public System.Threading.Tasks.Task WriteStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }
    }

    public static partial class RedisGrainStorageFactory
    {
        public static RedisGrainStorage Create(System.IServiceProvider services, string name) { throw null; }
    }

    public partial class RedisStorageOptions : Storage.IStorageProviderSerializerOptions
    {
        public StackExchange.Redis.ConfigurationOptions? ConfigurationOptions { get { throw null; } set { } }

        public System.Func<RedisStorageOptions, System.Threading.Tasks.Task<StackExchange.Redis.IConnectionMultiplexer>> CreateMultiplexer { get { throw null; } set { } }

        public bool DeleteStateOnClear { get { throw null; } set { } }

        public System.TimeSpan? EntryExpiry { get { throw null; } set { } }

        public System.Func<string, Runtime.GrainId, StackExchange.Redis.RedisKey>? GetStorageKey { get { throw null; } set { } }

        public Storage.IGrainStorageSerializer? GrainStorageSerializer { get { throw null; } set { } }

        public int InitStage { get { throw null; } set { } }

        public static System.Threading.Tasks.Task<StackExchange.Redis.IConnectionMultiplexer> DefaultCreateMultiplexer(RedisStorageOptions options) { throw null; }
    }

    public static partial class RedisStorageOptionsExtensions
    {
        public static void UseGetRedisKeyIgnoringGrainType(this Microsoft.Extensions.Options.OptionsBuilder<RedisStorageOptions> optionsBuilder) { }
    }
}

namespace Orleans.Persistence.Redis
{
    [GenerateSerializer]
    public partial class RedisStorageException : System.Exception
    {
        public RedisStorageException() { }

        [System.Obsolete]
        protected RedisStorageException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public RedisStorageException(string message, System.Exception inner) { }

        public RedisStorageException(string message) { }
    }
}

namespace OrleansCodeGen.Orleans.Persistence.Redis
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_RedisStorageException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Persistence.Redis.RedisStorageException>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Persistence.Redis.RedisStorageException>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_RedisStorageException(global::Orleans.Serialization.Serializers.IBaseCodec<System.Exception> _baseTypeSerializer) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Persistence.Redis.RedisStorageException instance) { }

        public global::Orleans.Persistence.Redis.RedisStorageException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Persistence.Redis.RedisStorageException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Persistence.Redis.RedisStorageException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_RedisStorageException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Persistence.Redis.RedisStorageException, System.Exception>
    {
        public Copier_RedisStorageException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }
}
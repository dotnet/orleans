//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class SqsOptions
    {
        [Redact]
        public string ConnectionString { get { throw null; } set { } }
    }
}

namespace Orleans.Hosting
{
    public static partial class ClientBuilderExtensions
    {
        public static IClientBuilder AddSqsStreams(this IClientBuilder builder, string name, System.Action<Configuration.SqsOptions> configureOptions) { throw null; }

        public static IClientBuilder AddSqsStreams(this IClientBuilder builder, string name, System.Action<ClusterClientSqsStreamConfigurator> configure) { throw null; }
    }

    public partial class ClusterClientSqsStreamConfigurator : ClusterClientPersistentStreamConfigurator
    {
        public ClusterClientSqsStreamConfigurator(string name, IClientBuilder builder) : base(default!, default!, default!) { }

        public ClusterClientSqsStreamConfigurator ConfigurePartitioning(int numOfparitions = 8) { throw null; }

        public ClusterClientSqsStreamConfigurator ConfigureSqs(System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.SqsOptions>> configureOptions) { throw null; }
    }

    public static partial class SiloBuilderExtensions
    {
        public static ISiloBuilder AddSqsStreams(this ISiloBuilder builder, string name, System.Action<Configuration.SqsOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddSqsStreams(this ISiloBuilder builder, string name, System.Action<SiloSqsStreamConfigurator> configure) { throw null; }
    }

    public partial class SiloSqsStreamConfigurator : SiloPersistentStreamConfigurator
    {
        public SiloSqsStreamConfigurator(string name, System.Action<System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>> configureServicesDelegate) : base(default!, default!, default!) { }

        public SiloSqsStreamConfigurator ConfigureCache(int cacheSize = 4096) { throw null; }

        public SiloSqsStreamConfigurator ConfigurePartitioning(int numOfparitions = 8) { throw null; }

        public SiloSqsStreamConfigurator ConfigureSqs(System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.SqsOptions>> configureOptions) { throw null; }
    }
}

namespace OrleansAWSUtils.Streams
{
    public partial class SQSAdapterFactory : Orleans.Streams.IQueueAdapterFactory
    {
        public SQSAdapterFactory(string name, Orleans.Configuration.SqsOptions sqsOptions, Orleans.Configuration.HashRingStreamQueueMapperOptions queueMapperOptions, Orleans.Configuration.SimpleQueueCacheOptions cacheOptions, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.ClusterOptions> clusterOptions, Orleans.Serialization.Serializer serializer, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }

        protected System.Func<Orleans.Streams.QueueId, System.Threading.Tasks.Task<Orleans.Streams.IStreamFailureHandler>> StreamFailureHandlerFactory { set { } }

        public static SQSAdapterFactory Create(System.IServiceProvider services, string name) { throw null; }

        public virtual System.Threading.Tasks.Task<Orleans.Streams.IQueueAdapter> CreateAdapter() { throw null; }

        public System.Threading.Tasks.Task<Orleans.Streams.IStreamFailureHandler> GetDeliveryFailureHandler(Orleans.Streams.QueueId queueId) { throw null; }

        public virtual Orleans.Streams.IQueueAdapterCache GetQueueAdapterCache() { throw null; }

        public Orleans.Streams.IStreamQueueMapper GetStreamQueueMapper() { throw null; }

        public virtual void Init() { }
    }

    public partial class SQSStreamProviderUtils
    {
        public static System.Threading.Tasks.Task DeleteAllUsedQueues(string providerName, string clusterId, string storageConnectionString, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { throw null; }
    }
}
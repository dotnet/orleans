//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class DynamoDBGrainStorageOptionsValidator : IConfigurationValidator
    {
        public DynamoDBGrainStorageOptionsValidator(DynamoDBStorageOptions options, string name) { }

        public void ValidateConfiguration() { }
    }

    public partial class DynamoDBStorageOptions : Persistence.DynamoDB.DynamoDBClientOptions, Storage.IStorageProviderSerializerOptions
    {
        public const int DEFAULT_INIT_STAGE = 10000;
        public bool CreateIfNotExists { get { throw null; } set { } }

        public bool DeleteStateOnClear { get { throw null; } set { } }

        public Storage.IGrainStorageSerializer GrainStorageSerializer { get { throw null; } set { } }

        public int InitStage { get { throw null; } set { } }

        public int ReadCapacityUnits { get { throw null; } set { } }

        public string ServiceId { get { throw null; } set { } }

        public string TableName { get { throw null; } set { } }

        public System.TimeSpan? TimeToLive { get { throw null; } set { } }

        public bool UpdateIfExists { get { throw null; } set { } }

        public bool UseProvisionedThroughput { get { throw null; } set { } }

        public int WriteCapacityUnits { get { throw null; } set { } }
    }
}

namespace Orleans.Hosting
{
    public static partial class DynamoDBGrainStorageServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDynamoDBGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.DynamoDBStorageOptions>> configureOptions = null) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDynamoDBGrainStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Configuration.DynamoDBStorageOptions> configureOptions) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDynamoDBGrainStorageAsDefault(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.DynamoDBStorageOptions>> configureOptions = null) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddDynamoDBGrainStorageAsDefault(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Configuration.DynamoDBStorageOptions> configureOptions) { throw null; }
    }

    public static partial class DynamoDBGrainStorageSiloBuilderExtensions
    {
        public static ISiloBuilder AddDynamoDBGrainStorage(this ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.DynamoDBStorageOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddDynamoDBGrainStorage(this ISiloBuilder builder, string name, System.Action<Configuration.DynamoDBStorageOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddDynamoDBGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.DynamoDBStorageOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddDynamoDBGrainStorageAsDefault(this ISiloBuilder builder, System.Action<Configuration.DynamoDBStorageOptions> configureOptions) { throw null; }
    }
}

namespace Orleans.Persistence.DynamoDB
{
    public partial class DynamoDBClientOptions
    {
        [Redact]
        public string AccessKey { get { throw null; } set { } }

        public string ProfileName { get { throw null; } set { } }

        [Redact]
        public string SecretKey { get { throw null; } set { } }

        public string Service { get { throw null; } set { } }

        public string Token { get { throw null; } set { } }
    }
}

namespace Orleans.Storage
{
    public partial class DynamoDBGrainStorage : IGrainStorage, ILifecycleParticipant<Runtime.ISiloLifecycle>
    {
        public DynamoDBGrainStorage(string name, Configuration.DynamoDBStorageOptions options, Serialization.Serializers.IActivatorProvider activatorProvider, Microsoft.Extensions.Logging.ILogger<DynamoDBGrainStorage> logger) { }

        public System.Threading.Tasks.Task ClearStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public System.Threading.Tasks.Task Close(System.Threading.CancellationToken ct) { throw null; }

        public System.Threading.Tasks.Task Init(System.Threading.CancellationToken ct) { throw null; }

        public void Participate(Runtime.ISiloLifecycle lifecycle) { }

        public System.Threading.Tasks.Task ReadStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public System.Threading.Tasks.Task WriteStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }
    }

    public static partial class DynamoDBGrainStorageFactory
    {
        public static DynamoDBGrainStorage Create(System.IServiceProvider services, string name) { throw null; }
    }
}
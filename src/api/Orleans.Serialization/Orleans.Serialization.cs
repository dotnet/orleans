//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Serialization
{
    [GenerateSerializer]
    public sealed partial class CodecNotFoundException : SerializerException
    {
        public CodecNotFoundException(string message) { }
    }

    public sealed partial class DeepCopier
    {
        public DeepCopier(Serializers.CodecProvider codecProvider, Cloning.CopyContextPool contextPool) { }

        public T Copy<T>(T value) { throw null; }

        public DeepCopier<T> GetCopier<T>() { throw null; }
    }

    public sealed partial class DeepCopier<T>
    {
        public DeepCopier(Cloning.IDeepCopier<T> copier, Cloning.CopyContextPool contextPool) { }

        public T Copy(T value) { throw null; }
    }

    [Alias("ISerializable")]
    public partial class DotNetSerializableCodec : Serializers.IGeneralizedCodec, Codecs.IFieldCodec
    {
        public static readonly System.Type CodecType;
        public DotNetSerializableCodec(TypeSystem.TypeConverter typeResolver) { }

        [System.Security.SecurityCritical]
        public bool IsSupportedType(System.Type type) { throw null; }

        [System.Security.SecurityCritical]
        public object ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        [System.Security.SecurityCritical]
        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    [RegisterCopier]
    [Alias("Exception")]
    public sealed partial class ExceptionCodec : Codecs.IFieldCodec<System.Exception>, Codecs.IFieldCodec, Serializers.IBaseCodec<System.Exception>, Serializers.IBaseCodec, Serializers.IGeneralizedCodec, Serializers.IGeneralizedBaseCodec, Serializers.IBaseCodec<object>, Cloning.IBaseCopier<System.Exception>, Cloning.IBaseCopier
    {
        public ExceptionCodec(TypeSystem.TypeConverter typeConverter, Codecs.IFieldCodec<System.Collections.Generic.Dictionary<object, object>> dictionaryCodec, Cloning.IDeepCopier<System.Collections.Generic.Dictionary<object, object>> dictionaryCopier, Cloning.IDeepCopier<System.Exception> exceptionCopier, Microsoft.Extensions.Options.IOptions<ExceptionSerializationOptions> exceptionSerializationOptions) { }

        public void DeepCopy(System.Exception input, System.Exception output, Cloning.CopyContext context) { }

        public void Deserialize<TInput>(ref Buffers.Reader<TInput> reader, System.Exception value) { }

        public void Deserialize<TInput>(ref Buffers.Reader<TInput> reader, object value) { }

        public System.Exception DeserializeException<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public System.Collections.Generic.Dictionary<object, object> GetDataProperty(System.Exception exception) { throw null; }

        public System.Runtime.Serialization.SerializationInfo GetObjectData(System.Exception value) { throw null; }

        public bool IsSupportedType(System.Type type) { throw null; }

        object Codecs.IFieldCodec.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public System.Exception ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Exception value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void SerializeException<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Exception value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void SetBaseProperties(System.Exception value, string message, string stackTrace, System.Exception innerException, int hResult, System.Collections.Generic.Dictionary<object, object> data) { }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Exception value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public partial class ExceptionSerializationOptions
    {
        public System.Func<System.Type, bool> SupportedExceptionTypeFilter { get { throw null; } set { } }

        public System.Collections.Generic.HashSet<string> SupportedNamespacePrefixes { get { throw null; } }
    }

    [GenerateSerializer]
    public sealed partial class ExtendedWireTypeInvalidException : SerializerException
    {
    }

    [GenerateSerializer]
    public sealed partial class FieldIdNotPresentException : SerializerException
    {
    }

    [GenerateSerializer]
    public sealed partial class FieldTypeInvalidException : SerializerException
    {
    }

    [GenerateSerializer]
    public sealed partial class FieldTypeMissingException : SerializerException
    {
        public FieldTypeMissingException(System.Type type) { }
    }

    [GenerateSerializer]
    public sealed partial class IllegalTypeException : SerializerException
    {
        public IllegalTypeException(string typeName) { }

        [Id(0)]
        public string TypeName { get { throw null; } }

        [System.Obsolete]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }

    public partial interface ISerializerBuilder
    {
        Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }
    }

    public partial interface ITypeConverter
    {
        bool TryFormat(System.Type type, out string formatted);
        bool TryParse(string formatted, out System.Type type);
    }

    public partial interface ITypeFilter
    {
        bool? IsTypeAllowed(System.Type type);
    }

    public partial interface ITypeNameFilter
    {
        bool? IsTypeNameAllowed(string typeName, string assemblyName);
    }

    public sealed partial class ObjectSerializer
    {
        public ObjectSerializer(Session.SerializerSessionPool sessionPool) { }

        public bool CanSerialize(System.Type type) { throw null; }

        public object Deserialize(System.ArraySegment<byte> source, Session.SerializerSession session, System.Type type) { throw null; }

        public object Deserialize(System.ArraySegment<byte> source, System.Type type) { throw null; }

        public object Deserialize(System.Buffers.ReadOnlySequence<byte> source, Session.SerializerSession session, System.Type type) { throw null; }

        public object Deserialize(System.Buffers.ReadOnlySequence<byte> source, System.Type type) { throw null; }

        public object Deserialize(byte[] source, Session.SerializerSession session, System.Type type) { throw null; }

        public object Deserialize(byte[] source, System.Type type) { throw null; }

        public object Deserialize(System.IO.Stream source, Session.SerializerSession session, System.Type type) { throw null; }

        public object Deserialize(System.IO.Stream source, System.Type type) { throw null; }

        public object Deserialize(System.ReadOnlyMemory<byte> source, Session.SerializerSession session, System.Type type) { throw null; }

        public object Deserialize(System.ReadOnlyMemory<byte> source, System.Type type) { throw null; }

        public object Deserialize(System.ReadOnlySpan<byte> source, Session.SerializerSession session, System.Type type) { throw null; }

        public object Deserialize(System.ReadOnlySpan<byte> source, System.Type type) { throw null; }

        public object Deserialize<TInput>(ref Buffers.Reader<TInput> source, System.Type type) { throw null; }

        public int Serialize(object value, System.ArraySegment<byte> destination, Session.SerializerSession session, System.Type type) { throw null; }

        public int Serialize(object value, System.ArraySegment<byte> destination, System.Type type) { throw null; }

        public int Serialize(object value, byte[] destination, Session.SerializerSession session, System.Type type) { throw null; }

        public int Serialize(object value, byte[] destination, System.Type type) { throw null; }

        public void Serialize(object value, System.IO.Stream destination, Session.SerializerSession session, System.Type type, int sizeHint = 0) { }

        public void Serialize(object value, System.IO.Stream destination, System.Type type, int sizeHint = 0) { }

        public void Serialize(object value, ref System.Memory<byte> destination, Session.SerializerSession session, System.Type type) { }

        public void Serialize(object value, ref System.Memory<byte> destination, System.Type type) { }

        public void Serialize(object value, ref System.Span<byte> destination, Session.SerializerSession session, System.Type type) { }

        public void Serialize(object value, ref System.Span<byte> destination, System.Type type) { }

        public void Serialize<TBufferWriter>(object value, TBufferWriter destination, Session.SerializerSession session, System.Type type)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<TBufferWriter>(object value, TBufferWriter destination, System.Type type)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<TBufferWriter>(object value, ref Buffers.Writer<TBufferWriter> destination, System.Type type)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [GenerateSerializer]
    public sealed partial class ReferenceFieldNotSupportedException : SerializerException
    {
        public ReferenceFieldNotSupportedException(System.Type targetType) { }

        [Id(0)]
        public System.Type TargetReferenceType { get { throw null; } }

        [System.Obsolete]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }

    [GenerateSerializer]
    public sealed partial class ReferenceNotFoundException : SerializerException
    {
        public ReferenceNotFoundException(System.Type targetType, uint targetId) { }

        [Id(0)]
        public uint TargetReference { get { throw null; } }

        [Id(1)]
        public System.Type TargetReferenceType { get { throw null; } }

        [System.Obsolete]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }

    [GenerateSerializer]
    public sealed partial class RequiredFieldMissingException : SerializerException
    {
        public RequiredFieldMissingException(string message) { }
    }

    [GenerateSerializer]
    public sealed partial class SchemaTypeInvalidException : SerializerException
    {
    }

    public partial class SerializationConstructorNotFoundException : System.Exception
    {
        [System.Security.SecurityCritical]
        [System.Obsolete]
        protected SerializationConstructorNotFoundException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        [System.Security.SecurityCritical]
        public SerializationConstructorNotFoundException(System.Type type) { }
    }

    public sealed partial class Serializer
    {
        public Serializer(Session.SerializerSessionPool sessionPool) { }

        public Session.SerializerSessionPool SessionPool { get { throw null; } }

        public bool CanSerialize(System.Type type) { throw null; }

        public bool CanSerialize<T>() { throw null; }

        public T Deserialize<T>(Buffers.PooledBuffer.BufferSlice source, Session.SerializerSession session) { throw null; }

        public T Deserialize<T>(Buffers.PooledBuffer.BufferSlice source) { throw null; }

        public T Deserialize<T>(System.ArraySegment<byte> source, Session.SerializerSession session) { throw null; }

        public T Deserialize<T>(System.ArraySegment<byte> source) { throw null; }

        public T Deserialize<T>(System.Buffers.ReadOnlySequence<byte> source, Session.SerializerSession session) { throw null; }

        public T Deserialize<T>(System.Buffers.ReadOnlySequence<byte> source) { throw null; }

        public T Deserialize<T>(byte[] source, Session.SerializerSession session) { throw null; }

        public T Deserialize<T>(byte[] source) { throw null; }

        public T Deserialize<T>(System.IO.Stream source, Session.SerializerSession session) { throw null; }

        public T Deserialize<T>(System.IO.Stream source) { throw null; }

        public T Deserialize<T>(System.ReadOnlyMemory<byte> source, Session.SerializerSession session) { throw null; }

        public T Deserialize<T>(System.ReadOnlyMemory<byte> source) { throw null; }

        public T Deserialize<T>(System.ReadOnlySpan<byte> source, Session.SerializerSession session) { throw null; }

        public T Deserialize<T>(System.ReadOnlySpan<byte> source) { throw null; }

        public T Deserialize<T, TInput>(ref Buffers.Reader<TInput> source) { throw null; }

        public Serializer<T> GetSerializer<T>() { throw null; }

        public int Serialize<T>(T value, System.ArraySegment<byte> destination, Session.SerializerSession session) { throw null; }

        public int Serialize<T>(T value, System.ArraySegment<byte> destination) { throw null; }

        public int Serialize<T>(T value, byte[] destination, Session.SerializerSession session) { throw null; }

        public int Serialize<T>(T value, byte[] destination) { throw null; }

        public void Serialize<T>(T value, System.IO.Stream destination, Session.SerializerSession session, int sizeHint = 0) { }

        public void Serialize<T>(T value, System.IO.Stream destination, int sizeHint = 0) { }

        public void Serialize<T>(T value, ref System.Memory<byte> destination, Session.SerializerSession session) { }

        public void Serialize<T>(T value, ref System.Memory<byte> destination) { }

        public void Serialize<T>(T value, ref System.Span<byte> destination, Session.SerializerSession session) { }

        public void Serialize<T>(T value, ref System.Span<byte> destination) { }

        public void Serialize<T, TBufferWriter>(T value, TBufferWriter destination, Session.SerializerSession session)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<T, TBufferWriter>(T value, TBufferWriter destination)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<T, TBufferWriter>(T value, ref Buffers.Writer<TBufferWriter> destination)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public byte[] SerializeToArray<T>(T value) { throw null; }
    }

    public static partial class SerializerBuilderExtensions
    {
        public static ISerializerBuilder AddAssembly(this ISerializerBuilder builder, System.Reflection.Assembly assembly) { throw null; }

        public static ISerializerBuilder Configure(this ISerializerBuilder builder, Microsoft.Extensions.Options.IConfigureOptions<Configuration.TypeManifestOptions> configure) { throw null; }

        public static ISerializerBuilder Configure(this ISerializerBuilder builder, System.Action<Configuration.TypeManifestOptions> configure) { throw null; }

        public static ISerializerBuilder Configure(this ISerializerBuilder builder, System.Func<System.IServiceProvider, Microsoft.Extensions.Options.IConfigureOptions<Configuration.TypeManifestOptions>> factory) { throw null; }
    }

    public static partial class SerializerConfigurationAnalyzer
    {
        public static System.Collections.Generic.Dictionary<System.Type, SerializerConfigurationComplaint> AnalyzeSerializerAvailability(Serializers.ICodecProvider codecProvider, Configuration.TypeManifestOptions options) { throw null; }

        public partial class SerializerConfigurationComplaint
        {
            public bool HasCopier { get { throw null; } set { } }

            public bool HasSerializer { get { throw null; } set { } }

            public System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.HashSet<System.Reflection.MethodInfo>> Methods { get { throw null; } }
        }
    }

    [GenerateSerializer]
    public partial class SerializerException : System.Exception
    {
        public SerializerException() { }

        [System.Obsolete]
        protected SerializerException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public SerializerException(string message, System.Exception innerException) { }

        public SerializerException(string message) { }
    }

    public sealed partial class Serializer<T>
    {
        public Serializer(Codecs.IFieldCodec<T> codec, Session.SerializerSessionPool sessionPool) { }

        public Serializer(Session.SerializerSessionPool sessionPool) { }

        public T Deserialize(Buffers.PooledBuffer.BufferSlice source, Session.SerializerSession session) { throw null; }

        public T Deserialize(Buffers.PooledBuffer.BufferSlice source) { throw null; }

        public T Deserialize(System.ArraySegment<byte> source, Session.SerializerSession session) { throw null; }

        public T Deserialize(System.ArraySegment<byte> source) { throw null; }

        public T Deserialize(System.Buffers.ReadOnlySequence<byte> source, Session.SerializerSession session) { throw null; }

        public T Deserialize(System.Buffers.ReadOnlySequence<byte> source) { throw null; }

        public T Deserialize(byte[] source, Session.SerializerSession session) { throw null; }

        public T Deserialize(byte[] source) { throw null; }

        public T Deserialize(System.IO.Stream source, Session.SerializerSession session) { throw null; }

        public T Deserialize(System.IO.Stream source) { throw null; }

        public T Deserialize(System.ReadOnlyMemory<byte> source, Session.SerializerSession session) { throw null; }

        public T Deserialize(System.ReadOnlyMemory<byte> source) { throw null; }

        public T Deserialize(System.ReadOnlySpan<byte> source, Session.SerializerSession session) { throw null; }

        public T Deserialize(System.ReadOnlySpan<byte> source) { throw null; }

        public T Deserialize<TInput>(ref Buffers.Reader<TInput> source) { throw null; }

        public int Serialize(T value, byte[] destination, Session.SerializerSession session) { throw null; }

        public int Serialize(T value, byte[] destination) { throw null; }

        public void Serialize(T value, System.IO.Stream destination, Session.SerializerSession session, int sizeHint = 0) { }

        public void Serialize(T value, System.IO.Stream destination, int sizeHint = 0) { }

        public void Serialize(T value, ref System.Memory<byte> destination, Session.SerializerSession session) { }

        public void Serialize(T value, ref System.Memory<byte> destination) { }

        public void Serialize(T value, ref System.Span<byte> destination, Session.SerializerSession session) { }

        public void Serialize(T value, ref System.Span<byte> destination) { }

        public void Serialize<TBufferWriter>(T value, TBufferWriter destination, Session.SerializerSession session)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<TBufferWriter>(T value, TBufferWriter destination)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<TBufferWriter>(T value, ref Buffers.Writer<TBufferWriter> destination)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public byte[] SerializeToArray(T value) { throw null; }
    }

    public static partial class ServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddSerializer(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<ISerializerBuilder> configure = null) { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class TypeMissingException : SerializerException
    {
    }

    [System.Diagnostics.DebuggerDisplay("{GetDebuggerDisplay(),nq}")]
    public sealed partial class UnavailableExceptionFallbackException : System.Exception
    {
        public UnavailableExceptionFallbackException() { }

        [System.Obsolete]
        public UnavailableExceptionFallbackException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public UnavailableExceptionFallbackException(string message, System.Exception innerException) { }

        public string ExceptionType { get { throw null; } }

        public System.Collections.Generic.Dictionary<string, object> Properties { get { throw null; } }

        public override string ToString() { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class UnexpectedLengthPrefixValueException : SerializerException
    {
        public UnexpectedLengthPrefixValueException(string typeName, uint expectedLength, uint actualLength) { }

        public UnexpectedLengthPrefixValueException(string message) { }
    }

    [GenerateSerializer]
    public sealed partial class UnknownReferencedTypeException : SerializerException
    {
        public UnknownReferencedTypeException(uint reference) { }

        [Id(0)]
        public uint Reference { get { throw null; } set { } }

        [System.Obsolete]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }

    [GenerateSerializer]
    public sealed partial class UnknownWellKnownTypeException : SerializerException
    {
        public UnknownWellKnownTypeException(uint id) { }

        [Id(0)]
        public uint Id { get { throw null; } set { } }

        [System.Obsolete]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }

    [GenerateSerializer]
    public sealed partial class UnsupportedWireTypeException : SerializerException
    {
        public UnsupportedWireTypeException() { }

        public UnsupportedWireTypeException(string message) { }
    }

    public sealed partial class ValueSerializer<T>
        where T : struct
    {
        public ValueSerializer(Serializers.IValueSerializerProvider codecProvider, Session.SerializerSessionPool sessionPool) { }

        public void Deserialize(System.ArraySegment<byte> source, scoped ref T result, Session.SerializerSession session) { }

        public void Deserialize(System.ArraySegment<byte> source, scoped ref T result) { }

        public void Deserialize(System.Buffers.ReadOnlySequence<byte> source, scoped ref T result, Session.SerializerSession session) { }

        public void Deserialize(System.Buffers.ReadOnlySequence<byte> source, scoped ref T result) { }

        public void Deserialize(byte[] source, scoped ref T result, Session.SerializerSession session) { }

        public void Deserialize(byte[] source, scoped ref T result) { }

        public void Deserialize(System.IO.Stream source, scoped ref T result, Session.SerializerSession session) { }

        public void Deserialize(System.IO.Stream source, scoped ref T result) { }

        public void Deserialize(System.ReadOnlyMemory<byte> source, scoped ref T result, Session.SerializerSession session) { }

        public void Deserialize(System.ReadOnlyMemory<byte> source, scoped ref T result) { }

        public void Deserialize(System.ReadOnlySpan<byte> source, scoped ref T result, Session.SerializerSession session) { }

        public void Deserialize(System.ReadOnlySpan<byte> source, scoped ref T result) { }

        public void Deserialize<TInput>(ref Buffers.Reader<TInput> source, scoped ref T result) { }

        public void Serialize(scoped ref T value, System.ArraySegment<byte> destination) { }

        public int Serialize(scoped ref T value, byte[] destination, Session.SerializerSession session) { throw null; }

        public int Serialize(scoped ref T value, byte[] destination) { throw null; }

        public void Serialize(scoped ref T value, System.IO.Stream destination, Session.SerializerSession session, int sizeHint = 0) { }

        public void Serialize(scoped ref T value, System.IO.Stream destination, int sizeHint = 0) { }

        public void Serialize(scoped ref T value, ref System.Memory<byte> destination, Session.SerializerSession session) { }

        public void Serialize(scoped ref T value, ref System.Memory<byte> destination) { }

        public void Serialize(scoped ref T value, ref System.Span<byte> destination, Session.SerializerSession session) { }

        public void Serialize(scoped ref T value, ref System.Span<byte> destination) { }

        public void Serialize<TBufferWriter>(scoped ref T value, TBufferWriter destination, Session.SerializerSession session)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<TBufferWriter>(scoped ref T value, TBufferWriter destination)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Serialize<TBufferWriter>(scoped ref T value, ref Buffers.Writer<TBufferWriter> destination)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public byte[] SerializeToArray(scoped ref T value) { throw null; }
    }
}

namespace Orleans.Serialization.Activators
{
    public partial interface IActivator<T>
    {
        T Create();
    }
}

namespace Orleans.Serialization.Buffers
{
    public partial struct ArcBuffer : System.IDisposable
    {
        private int _dummyPrimitive;
        public readonly ArcBufferPage First;
        public readonly int Length;
        public readonly int Offset;
        public ArcBuffer(ArcBufferPage first, int token, int offset, int length) { }

        public ArraySegmentEnumerator ArraySegments { get { throw null; } }

        public MemoryEnumerator MemorySegments { get { throw null; } }

        public SpanEnumerator SpanSegments { get { throw null; } }

        public readonly System.Buffers.ReadOnlySequence<byte> AsReadOnlySequence() { throw null; }

        public readonly void CopyTo(ArcBufferWriter output) { }

        public readonly int CopyTo(System.Span<byte> output) { throw null; }

        public readonly void CopyTo<TBufferWriter>(ref TBufferWriter output)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Dispose() { }

        public readonly SpanEnumerator GetEnumerator() { throw null; }

        public readonly void Pin() { }

        public readonly ArcBuffer Slice(int offset, int length) { throw null; }

        public readonly ArcBuffer Slice(int offset) { throw null; }

        public readonly byte[] ToArray() { throw null; }

        public void Unpin() { }

        public readonly ArcBuffer UnsafeSlice(int offset, int length) { throw null; }

        public partial struct ArraySegmentEnumerator : System.Collections.Generic.IEnumerable<System.ArraySegment<byte>>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.ArraySegment<byte>>, System.Collections.IEnumerator, System.IDisposable
        {
            public ArraySegmentEnumerator(ArcBuffer slice) { }

            public System.ArraySegment<byte> Current { get { throw null; } }

            public bool IsCompleted { get { throw null; } }

            object? System.Collections.IEnumerator.Current { get { throw null; } }

            public readonly ArraySegmentEnumerator GetEnumerator() { throw null; }

            public bool MoveNext() { throw null; }

            readonly System.Collections.Generic.IEnumerator<System.ArraySegment<byte>> System.Collections.Generic.IEnumerable<System.ArraySegment<byte>>.GetEnumerator() { throw null; }

            readonly System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }

            void System.Collections.IEnumerator.Reset() { }

            readonly void System.IDisposable.Dispose() { }
        }

        public partial struct MemoryEnumerator : System.Collections.Generic.IEnumerable<System.ReadOnlyMemory<byte>>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.ReadOnlyMemory<byte>>, System.Collections.IEnumerator, System.IDisposable
        {
            public MemoryEnumerator(ArcBuffer slice) { }

            public System.ReadOnlyMemory<byte> Current { get { throw null; } }

            object? System.Collections.IEnumerator.Current { get { throw null; } }

            public readonly MemoryEnumerator GetEnumerator() { throw null; }

            public bool MoveNext() { throw null; }

            readonly System.Collections.Generic.IEnumerator<System.ReadOnlyMemory<byte>> System.Collections.Generic.IEnumerable<System.ReadOnlyMemory<byte>>.GetEnumerator() { throw null; }

            readonly System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }

            void System.Collections.IEnumerator.Reset() { }

            readonly void System.IDisposable.Dispose() { }
        }

        public readonly partial struct PageSegment
        {
            public readonly int Length;
            public readonly int Offset;
            public readonly ArcBufferPage Page;
            public PageSegment(ArcBufferPage page, int offset, int length) { }

            public System.ArraySegment<byte> ArraySegment { get { throw null; } }

            public System.ReadOnlyMemory<byte> Memory { get { throw null; } }

            public System.ReadOnlySpan<byte> Span { get { throw null; } }
        }

        public ref partial struct SpanEnumerator
        {
            private object _dummy;
            private int _dummyPrimitive;
            public SpanEnumerator(ArcBuffer slice) { }

            public System.ReadOnlySpan<byte> Current { get { throw null; } }

            public readonly SpanEnumerator GetEnumerator() { throw null; }

            public bool MoveNext() { throw null; }
        }
    }

    public sealed partial class ArcBufferPage
    {
        internal ArcBufferPage() { }

        public byte[] Array { get { throw null; } }

        public bool IsMinimumSize { get { throw null; } }

        public bool IsValid { get { throw null; } }

        public int Length { get { throw null; } }

        public ArcBufferPage? Next { get { throw null; } protected set { } }

        public System.ArraySegment<byte> ReadableArraySegment { get { throw null; } }

        public System.ReadOnlyMemory<byte> ReadableMemory { get { throw null; } }

        public System.ReadOnlySpan<byte> ReadableSpan { get { throw null; } }

        public int Version { get { throw null; } }

        public System.ArraySegment<byte> WritableArraySegment { get { throw null; } }

        public System.Memory<byte> WritableMemory { get { throw null; } }

        public System.Span<byte> WritableSpan { get { throw null; } }

        public int WriteCapacity { get { throw null; } }

        public void Advance(int bytes) { }

        public System.ArraySegment<byte> AsArraySegment(int offset, int length) { throw null; }

        public System.Memory<byte> AsMemory(int offset, int length) { throw null; }

        public System.Memory<byte> AsMemory(int offset) { throw null; }

        public System.Span<byte> AsSpan(int offset, int length) { throw null; }

        public System.Span<byte> AsSpan(int offset) { throw null; }

        public void CheckValidity(int token) { }

        public void Pin(int token) { }

        public void ResizeLargeSegment(int length) { }

        public void SetNext(ArcBufferPage next, int token) { }

        public void Unpin(int token) { }
    }

    public readonly partial struct ArcBufferReader
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public ArcBufferReader(ArcBufferWriter writer) { }

        public int Length { get { throw null; } }

        public readonly void Consume(System.Span<byte> output) { }

        public readonly ArcBuffer ConsumeSlice(int count) { throw null; }

        public readonly System.ReadOnlySpan<byte> Peek(scoped in System.Span<byte> destination) { throw null; }

        public readonly ArcBuffer PeekSlice(int count) { throw null; }

        public readonly void Skip(int count) { }
    }

    [Immutable]
    public sealed partial class ArcBufferWriter : System.Buffers.IBufferWriter<byte>, System.IDisposable
    {
        public const int MinimumPageSize = 16384;
        public int Length { get { throw null; } }

        public void AdvanceReader(int count) { }

        public void AdvanceWriter(int count) { }

        public ArcBuffer ConsumeSlice(int count) { throw null; }

        public void Dispose() { }

        public System.Memory<byte> GetMemory(int sizeHint = 0) { throw null; }

        public System.Span<byte> GetSpan(int sizeHint = 0) { throw null; }

        public int Peek(System.Span<byte> output) { throw null; }

        public System.ReadOnlySpan<byte> Peek(scoped in System.Span<byte> destination) { throw null; }

        public ArcBuffer PeekSlice(int count) { throw null; }

        public void ReplenishBuffers(System.Collections.Generic.List<System.ArraySegment<byte>> buffers) { }

        public void Reset() { }

        void System.Buffers.IBufferWriter<byte>.Advance(int count) { }

        public void Write(System.Buffers.ReadOnlySequence<byte> input) { }

        public void Write(System.ReadOnlySpan<byte> value) { }
    }

    public static partial class BufferWriterExtensions
    {
        public static Writer<TBufferWriter> CreateWriter<TBufferWriter>(this TBufferWriter buffer, Session.SerializerSession session)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { throw null; }
    }

    [Immutable]
    public partial struct PooledBuffer : System.Buffers.IBufferWriter<byte>, System.IDisposable
    {
        private object _dummy;
        private int _dummyPrimitive;
        public int Length { get { throw null; } }

        public MemoryEnumerator MemorySegments { get { throw null; } }

        public void Advance(int bytes) { }

        public System.Buffers.ReadOnlySequence<byte> AsReadOnlySequence() { throw null; }

        public readonly void CopyTo(System.Span<byte> output) { }

        public readonly void CopyTo<TBufferWriter>(ref TBufferWriter writer)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public readonly void CopyTo<TBufferWriter>(ref Writer<TBufferWriter> writer)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void Dispose() { }

        public System.Memory<byte> GetMemory(int sizeHint = 0) { throw null; }

        public System.Span<byte> GetSpan(int sizeHint = 0) { throw null; }

        public void Reset() { }

        public readonly BufferSlice Slice() { throw null; }

        public readonly BufferSlice Slice(int offset, int length) { throw null; }

        public readonly BufferSlice Slice(int offset) { throw null; }

        public readonly byte[] ToArray() { throw null; }

        public void Write(System.Buffers.ReadOnlySequence<byte> input) { }

        public void Write(System.ReadOnlySpan<byte> value) { }

        public readonly partial struct BufferSlice
        {
            private readonly object _dummy;
            private readonly int _dummyPrimitive;
            public BufferSlice(in PooledBuffer buffer, int offset, int length) { }

            public PooledBuffer Buffer { get { throw null; } }

            public int Length { get { throw null; } }

            public MemoryEnumerator MemorySegments { get { throw null; } }

            public int Offset { get { throw null; } }

            public readonly void CopyTo(ref PooledBuffer output) { }

            public readonly int CopyTo(System.Span<byte> output) { throw null; }

            public readonly void CopyTo<TBufferWriter>(ref TBufferWriter output)
                where TBufferWriter : struct, System.Buffers.IBufferWriter<byte> { }

            public readonly SpanEnumerator GetEnumerator() { throw null; }

            public readonly BufferSlice Slice(int offset, int length) { throw null; }

            public readonly BufferSlice Slice(int offset) { throw null; }

            public readonly byte[] ToArray() { throw null; }

            public partial struct MemoryEnumerator
            {
                private object _dummy;
                private int _dummyPrimitive;
                public MemoryEnumerator(BufferSlice slice) { }

                public System.ReadOnlyMemory<byte> Current { get { throw null; } }

                public readonly MemoryEnumerator GetEnumerator() { throw null; }

                public bool MoveNext() { throw null; }
            }

            public ref partial struct SpanEnumerator
            {
                private object _dummy;
                private int _dummyPrimitive;
                public SpanEnumerator(BufferSlice slice) { }

                public System.ReadOnlySpan<byte> Current { get { throw null; } }

                public readonly SpanEnumerator GetEnumerator() { throw null; }

                public bool MoveNext() { throw null; }
            }
        }

        public partial struct MemoryEnumerator
        {
            private object _dummy;
            private int _dummyPrimitive;
            public System.ReadOnlyMemory<byte> CurrentMemory;
            public MemoryEnumerator(PooledBuffer buffer) { }

            public System.ReadOnlyMemory<byte> Current { get { throw null; } }

            public readonly MemoryEnumerator GetEnumerator() { throw null; }

            public bool MoveNext() { throw null; }
        }

        public ref partial struct SpanEnumerator
        {
            private object _dummy;
            private int _dummyPrimitive;
            public SpanEnumerator(ref PooledBuffer buffer) { }

            public System.ReadOnlySpan<byte> Current { get { throw null; } }

            public readonly SpanEnumerator GetEnumerator() { throw null; }

            public bool MoveNext() { throw null; }
        }
    }

    public static partial class PooledBufferExtensions
    {
        public static PooledBuffer.SpanEnumerator GetEnumerator(this ref PooledBuffer buffer) { throw null; }
    }

    public static partial class Reader
    {
        public static Reader<Adaptors.BufferSliceReaderInput> Create(PooledBuffer input, Session.SerializerSession session) { throw null; }

        public static Reader<Adaptors.BufferSliceReaderInput> Create(PooledBuffer.BufferSlice input, Session.SerializerSession session) { throw null; }

        public static Reader<ReadOnlySequenceInput> Create(System.Buffers.ReadOnlySequence<byte> sequence, Session.SerializerSession session) { throw null; }

        public static Reader<SpanReaderInput> Create(byte[] buffer, Session.SerializerSession session) { throw null; }

        public static Reader<ReaderInput> Create(System.IO.Stream stream, Session.SerializerSession session) { throw null; }

        public static Reader<SpanReaderInput> Create(System.ReadOnlyMemory<byte> buffer, Session.SerializerSession session) { throw null; }

        public static Reader<SpanReaderInput> Create(System.ReadOnlySpan<byte> buffer, Session.SerializerSession session) { throw null; }
    }

    public abstract partial class ReaderInput
    {
        public abstract long Length { get; }
        public abstract long Position { get; }

        public abstract byte ReadByte();
        public abstract void ReadBytes(byte[] destination, int offset, int length);
        public abstract void ReadBytes(System.Span<byte> destination);
        public abstract uint ReadUInt32();
        public abstract ulong ReadUInt64();
        public abstract void Seek(long position);
        public abstract void Skip(long count);
        public abstract bool TryReadBytes(int length, out System.ReadOnlySpan<byte> bytes);
    }

    public ref partial struct Reader<TInput>
    {
        private TInput _input;
        private object _dummy;
        private int _dummyPrimitive;
        public long Length { get { throw null; } }

        public long Position { get { throw null; } }

        public Session.SerializerSession Session { get { throw null; } }

        public void ForkFrom(long position, out Reader<TInput> forked) { throw null; }

        public byte ReadByte() { throw null; }

        public void ReadBytes(scoped System.Span<byte> destination) { }

        public byte[] ReadBytes(uint count) { throw null; }

        public void ReadBytes<TBufferWriter>(scoped ref TBufferWriter writer, int count)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public int ReadInt32() { throw null; }

        public long ReadInt64() { throw null; }

        public uint ReadUInt32() { throw null; }

        public ulong ReadUInt64() { throw null; }

        public uint ReadVarUInt32() { throw null; }

        public ulong ReadVarUInt64() { throw null; }

        public void ResumeFrom(long position) { }

        public void Skip(long count) { }

        public bool TryReadBytes(int length, out System.ReadOnlySpan<byte> bytes) { throw null; }
    }

    public partial struct ReadOnlySequenceInput
    {
        private int _dummyPrimitive;
    }

    public readonly partial struct SpanReaderInput
    {
    }

    public static partial class VarIntReaderExtensions
    {
        public static short ReadInt16<TInput>(this ref Reader<TInput> reader, WireProtocol.WireType wireType) { throw null; }

        public static int ReadInt32<TInput>(this ref Reader<TInput> reader, WireProtocol.WireType wireType) { throw null; }

        public static long ReadInt64<TInput>(this ref Reader<TInput> reader, WireProtocol.WireType wireType) { throw null; }

        public static sbyte ReadInt8<TInput>(this ref Reader<TInput> reader, WireProtocol.WireType wireType) { throw null; }

        public static ushort ReadUInt16<TInput>(this ref Reader<TInput> reader, WireProtocol.WireType wireType) { throw null; }

        public static uint ReadUInt32<TInput>(this ref Reader<TInput> reader, WireProtocol.WireType wireType) { throw null; }

        public static ulong ReadUInt64<TInput>(this ref Reader<TInput> reader, WireProtocol.WireType wireType) { throw null; }

        public static byte ReadUInt8<TInput>(this ref Reader<TInput> reader, WireProtocol.WireType wireType) { throw null; }

        public static short ReadVarInt16<TInput>(this ref Reader<TInput> reader) { throw null; }

        public static int ReadVarInt32<TInput>(this ref Reader<TInput> reader) { throw null; }

        public static long ReadVarInt64<TInput>(this ref Reader<TInput> reader) { throw null; }

        public static sbyte ReadVarInt8<TInput>(this ref Reader<TInput> reader) { throw null; }

        public static ushort ReadVarUInt16<TInput>(this ref Reader<TInput> reader) { throw null; }

        public static byte ReadVarUInt8<TInput>(this ref Reader<TInput> reader) { throw null; }
    }

    public static partial class Writer
    {
        public static Writer<Adaptors.SpanBufferWriter> Create(byte[] output, Session.SerializerSession session) { throw null; }

        public static Writer<Adaptors.MemoryStreamBufferWriter> Create(System.IO.MemoryStream destination, Session.SerializerSession session) { throw null; }

        public static Writer<Adaptors.ArrayStreamBufferWriter> Create(System.IO.Stream destination, Session.SerializerSession session, int sizeHint = 0) { throw null; }

        public static Writer<Adaptors.MemoryBufferWriter> Create(System.Memory<byte> output, Session.SerializerSession session) { throw null; }

        public static Writer<Adaptors.SpanBufferWriter> Create(System.Span<byte> output, Session.SerializerSession session) { throw null; }

        public static Writer<TBufferWriter> Create<TBufferWriter>(TBufferWriter destination, Session.SerializerSession session)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { throw null; }

        public static Writer<PooledBuffer> CreatePooled(Session.SerializerSession session) { throw null; }

        public static Writer<Adaptors.PoolingStreamBufferWriter> CreatePooled(System.IO.Stream destination, Session.SerializerSession session, int sizeHint = 0) { throw null; }
    }

    public ref partial struct Writer<TBufferWriter>
        where TBufferWriter : System.Buffers.IBufferWriter<byte>
    {
        private object _dummy;
        private int _dummyPrimitive;
        public TBufferWriter Output;
        public int Position { get { throw null; } }

        public Session.SerializerSession Session { get { throw null; } }

        public System.Span<byte> WritableSpan { get { throw null; } }

        public void AdvanceSpan(int length) { }

        public void Allocate(int sizeHint) { }

        public void Commit() { }

        public void Dispose() { }

        public void EnsureContiguous(int length) { }

        public void Write(scoped System.ReadOnlySpan<byte> value) { }

        public void WriteByte(byte value) { }

        public void WriteEndBase() { }

        public void WriteEndObject() { }

        public void WriteFieldHeader(uint fieldId, System.Type expectedType, System.Type actualType, WireProtocol.WireType wireType) { }

        public void WriteFieldHeaderExpected(uint fieldId, WireProtocol.WireType wireType) { }

        public void WriteInt32(int value) { }

        public void WriteInt64(long value) { }

        public void WriteStartObject(uint fieldId, System.Type expectedType, System.Type actualType) { }

        public void WriteUInt32(uint value) { }

        public void WriteUInt64(ulong value) { }

        public void WriteVarInt16(short value) { }

        public void WriteVarInt32(int value) { }

        public void WriteVarInt64(long value) { }

        public void WriteVarInt8(sbyte value) { }

        public void WriteVarUInt16(ushort value) { }

        public void WriteVarUInt32(uint value) { }

        public void WriteVarUInt64(ulong value) { }

        public void WriteVarUInt8(byte value) { }
    }
}

namespace Orleans.Serialization.Buffers.Adaptors
{
    public partial struct ArrayStreamBufferWriter : System.Buffers.IBufferWriter<byte>
    {
        private object _dummy;
        private int _dummyPrimitive;
        public const int DefaultInitialBufferSize = 256;
        public ArrayStreamBufferWriter(System.IO.Stream stream, int sizeHint = 0) { }

        public void Advance(int count) { }

        public System.Memory<byte> GetMemory(int sizeHint = 0) { throw null; }

        public System.Span<byte> GetSpan(int sizeHint = 0) { throw null; }
    }

    public partial struct BufferSliceReaderInput
    {
        private object _dummy;
        private int _dummyPrimitive;
        public BufferSliceReaderInput(in PooledBuffer.BufferSlice slice) { }
    }

    public partial class BufferWriterBox<TBufferWriter> : System.Buffers.IBufferWriter<byte> where TBufferWriter : struct, System.Buffers.IBufferWriter<byte>
    {
        public BufferWriterBox(TBufferWriter bufferWriter) { }

        public ref TBufferWriter Value { get { throw null; } }

        public void Advance(int count) { }

        public System.Memory<byte> GetMemory(int sizeHint = 0) { throw null; }

        public System.Span<byte> GetSpan(int sizeHint = 0) { throw null; }
    }

    public partial struct MemoryBufferWriter : System.Buffers.IBufferWriter<byte>
    {
        private int _dummyPrimitive;
        public int BytesWritten { get { throw null; } }

        public void Advance(int count) { }

        public System.Memory<byte> GetMemory(int sizeHint = 0) { throw null; }

        public System.Span<byte> GetSpan(int sizeHint = 0) { throw null; }
    }

    public readonly partial struct MemoryStreamBufferWriter : System.Buffers.IBufferWriter<byte>
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public MemoryStreamBufferWriter(System.IO.MemoryStream stream) { }

        public readonly void Advance(int count) { }

        public readonly System.Memory<byte> GetMemory(int sizeHint = 0) { throw null; }

        public readonly System.Span<byte> GetSpan(int sizeHint = 0) { throw null; }
    }

    public sealed partial class PooledBufferStream : System.IO.Stream
    {
        public PooledBufferStream() { }

        public PooledBufferStream(int minAllocationSize = 0) { }

        public override bool CanRead { get { throw null; } }

        public override bool CanSeek { get { throw null; } }

        public override bool CanWrite { get { throw null; } }

        public override long Length { get { throw null; } }

        public override long Position { get { throw null; } set { } }

        public void CopyTo<TBufferWriter>(ref Writer<TBufferWriter> writer)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public override void Flush() { }

        public override int Read(byte[] buffer, int offset, int count) { throw null; }

        public static PooledBufferStream Rent() { throw null; }

        public System.Buffers.ReadOnlySequence<byte> RentReadOnlySequence() { throw null; }

        public void Reset() { }

        public static void Return(PooledBufferStream stream) { }

        public void ReturnReadOnlySequence(in System.Buffers.ReadOnlySequence<byte> sequence) { }

        public override long Seek(long offset, System.IO.SeekOrigin origin) { throw null; }

        public override void SetLength(long value) { }

        public byte[] ToArray() { throw null; }

        public override void Write(byte[] buffer, int offset, int count) { }
    }

    public partial struct PoolingStreamBufferWriter : System.Buffers.IBufferWriter<byte>, System.IDisposable
    {
        private object _dummy;
        private int _dummyPrimitive;
        public void Advance(int count) { }

        public readonly void Dispose() { }

        public System.Memory<byte> GetMemory(int sizeHint = 0) { throw null; }

        public System.Span<byte> GetSpan(int sizeHint = 0) { throw null; }
    }

    public partial struct SpanBufferWriter : System.Buffers.IBufferWriter<byte>
    {
        private int _dummyPrimitive;
        public int BytesWritten { get { throw null; } }

        public void Advance(int count) { }

        public readonly System.Memory<byte> GetMemory(int sizeHint = 0) { throw null; }

        public readonly System.Span<byte> GetSpan(int sizeHint = 0) { throw null; }
    }
}

namespace Orleans.Serialization.Cloning
{
    public sealed partial class CopyContext : System.IDisposable
    {
        public CopyContext(Serializers.CodecProvider codecProvider, System.Action<CopyContext> onDisposed) { }

        public T? DeepCopy<T>(T? value) { throw null; }

        public void Dispose() { }

        public void RecordCopy(object original, object copy) { }

        public void Reset() { }

        public bool TryGetCopy<T>(object? original, out T? result)
            where T : class { throw null; }
    }

    public sealed partial class CopyContextPool
    {
        public CopyContextPool(Serializers.CodecProvider codecProvider) { }

        public CopyContext GetContext() { throw null; }
    }

    public partial interface IBaseCopier
    {
    }

    public partial interface IBaseCopier<T> : IBaseCopier where T : class
    {
        void DeepCopy(T input, T output, CopyContext context);
    }

    public partial interface IDeepCopier
    {
        object? DeepCopy(object? input, CopyContext context);
    }

    public partial interface IDeepCopierProvider
    {
        IBaseCopier<T> GetBaseCopier<T>()
            where T : class;
        IDeepCopier GetDeepCopier(System.Type type);
        IDeepCopier<T> GetDeepCopier<T>();
        IDeepCopier? TryGetDeepCopier(System.Type type);
        IDeepCopier<T>? TryGetDeepCopier<T>();
    }

    public partial interface IDeepCopier<T> : IDeepCopier
    {
        T DeepCopy(T input, CopyContext context);
        object? IDeepCopier.DeepCopy(object? input, CopyContext context);
    }

    public partial interface IDerivedTypeCopier : IDeepCopier
    {
    }

    public partial interface IGeneralizedCopier : IDeepCopier
    {
        bool IsSupportedType(System.Type type);
    }

    public partial interface IOptionalDeepCopier : IDeepCopier
    {
        bool IsShallowCopyable();
    }

    public partial interface ISpecializableCopier
    {
        IDeepCopier GetSpecializedCopier(System.Type type);
        bool IsSupportedType(System.Type type);
    }

    public partial class ShallowCopier<T> : IOptionalDeepCopier, IDeepCopier, IDeepCopier<T>
    {
        public T DeepCopy(T input, CopyContext _) { throw null; }

        public object? DeepCopy(object? input, CopyContext _) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }
}

namespace Orleans.Serialization.Codecs
{
    [RegisterSerializer]
    public sealed partial class ArrayCodec<T> : IFieldCodec<T[]>, IFieldCodec
    {
        public ArrayCodec(IFieldCodec<T> fieldCodec) { }

        public T[] ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, T[] value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class ArrayCopier<T> : Cloning.IDeepCopier<T[]>, Cloning.IDeepCopier
    {
        public ArrayCopier(Cloning.IDeepCopier<T> elementCopier) { }

        public T[] DeepCopy(T[] input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class ArrayListCodec : GeneralizedReferenceTypeSurrogateCodec<System.Collections.ArrayList, ArrayListSurrogate>
    {
        public ArrayListCodec(Serializers.IValueSerializer<ArrayListSurrogate> surrogateSerializer) : base(default!) { }

        public override System.Collections.ArrayList ConvertFromSurrogate(ref ArrayListSurrogate surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.ArrayList value, ref ArrayListSurrogate surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ArrayListCopier : Cloning.IDeepCopier<System.Collections.ArrayList>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.ArrayList>, Cloning.IBaseCopier
    {
        public System.Collections.ArrayList DeepCopy(System.Collections.ArrayList input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.ArrayList input, System.Collections.ArrayList output, Cloning.CopyContext context) { }
    }

    [GenerateSerializer]
    public partial struct ArrayListSurrogate
    {
        [Id(0)]
        public object[] Values;
    }

    [RegisterSerializer]
    public sealed partial class ArraySegmentCodec<T> : IFieldCodec<System.ArraySegment<T>>, IFieldCodec
    {
        public ArraySegmentCodec(IFieldCodec<T> fieldCodec) { }

        public System.ArraySegment<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.ArraySegment<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class ArraySegmentCopier<T> : Cloning.IDeepCopier<System.ArraySegment<T>>, Cloning.IDeepCopier
    {
        public ArraySegmentCopier(Cloning.IDeepCopier<T> elementCopier) { }

        public System.ArraySegment<T> DeepCopy(System.ArraySegment<T> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ArraySegmentOfByteCopier : Cloning.IDeepCopier<System.ArraySegment<byte>>, Cloning.IDeepCopier
    {
        public static System.ArraySegment<byte> DeepCopy(System.ArraySegment<byte> input, Cloning.CopyContext copyContext) { throw null; }

        System.ArraySegment<byte> Cloning.IDeepCopier<System.ArraySegment<byte>>.DeepCopy(System.ArraySegment<byte> input, Cloning.CopyContext _) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class BitArrayCodec : IFieldCodec<System.Collections.BitArray>, IFieldCodec
    {
        System.Collections.BitArray IFieldCodec<System.Collections.BitArray>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Collections.BitArray>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.BitArray value) { }

        public static System.Collections.BitArray ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class BitArrayCopier : Cloning.IDeepCopier<System.Collections.BitArray>, Cloning.IDeepCopier
    {
        public static System.Collections.BitArray DeepCopy(System.Collections.BitArray input, Cloning.CopyContext context) { throw null; }

        System.Collections.BitArray Cloning.IDeepCopier<System.Collections.BitArray>.DeepCopy(System.Collections.BitArray input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class BitVector32Codec : IFieldCodec<System.Collections.Specialized.BitVector32>, IFieldCodec
    {
        public System.Collections.Specialized.BitVector32 ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.Specialized.BitVector32 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class BoolCodec : IFieldCodec<bool>, IFieldCodec
    {
        bool IFieldCodec<bool>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<bool>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, bool value) { }

        public static bool ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, bool value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ByteArrayCodec : IFieldCodec<byte[]>, IFieldCodec
    {
        byte[] IFieldCodec<byte[]>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<byte[]>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, byte[] value) { }

        public static byte[] ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, byte[] value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class ByteArrayCopier : Cloning.IDeepCopier<byte[]>, Cloning.IDeepCopier
    {
        public static byte[] DeepCopy(byte[] input, Cloning.CopyContext context) { throw null; }

        byte[] Cloning.IDeepCopier<byte[]>.DeepCopy(byte[] input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class ByteCodec : IFieldCodec<byte>, IFieldCodec
    {
        byte IFieldCodec<byte>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<byte>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, byte value) { }

        public static byte ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, byte value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, byte value, System.Type actualType)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class CharCodec : IFieldCodec<char>, IFieldCodec
    {
        char IFieldCodec<char>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<char>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, char value) { }

        public static char ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, char value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class CollectionCodec<T> : IFieldCodec<System.Collections.ObjectModel.Collection<T>>, IFieldCodec, Serializers.IBaseCodec<System.Collections.ObjectModel.Collection<T>>, Serializers.IBaseCodec
    {
        public CollectionCodec(IFieldCodec<T> fieldCodec) { }

        public void Deserialize<TInput>(ref Buffers.Reader<TInput> reader, System.Collections.ObjectModel.Collection<T> value) { }

        public System.Collections.ObjectModel.Collection<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Collections.ObjectModel.Collection<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.ObjectModel.Collection<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class CollectionCopier<T> : Cloning.IDeepCopier<System.Collections.ObjectModel.Collection<T>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.ObjectModel.Collection<T>>, Cloning.IBaseCopier
    {
        public CollectionCopier(Cloning.IDeepCopier<T> valueCopier) { }

        public System.Collections.ObjectModel.Collection<T> DeepCopy(System.Collections.ObjectModel.Collection<T> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.ObjectModel.Collection<T> input, System.Collections.ObjectModel.Collection<T> output, Cloning.CopyContext context) { }
    }

    public partial class CommonCodecTypeFilter
    {
        public static bool IsAbstractOrFrameworkType(System.Type type) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class CompareInfoCodec : IFieldCodec<System.Globalization.CompareInfo>, IFieldCodec
    {
        public System.Globalization.CompareInfo ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Globalization.CompareInfo value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ConcurrentDictionaryCodec<TKey, TValue> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>, ConcurrentDictionarySurrogate<TKey, TValue>>
    {
        public ConcurrentDictionaryCodec(Serializers.IValueSerializer<ConcurrentDictionarySurrogate<TKey, TValue>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> ConvertFromSurrogate(ref ConcurrentDictionarySurrogate<TKey, TValue> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> value, ref ConcurrentDictionarySurrogate<TKey, TValue> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ConcurrentDictionaryCopier<TKey, TValue> : Cloning.IDeepCopier<System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>>, Cloning.IBaseCopier
    {
        public ConcurrentDictionaryCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> DeepCopy(System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> input, System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> output, Cloning.CopyContext context) { }
    }

    [GenerateSerializer]
    public partial struct ConcurrentDictionarySurrogate<TKey, TValue>
    {
        [Id(0)]
        public System.Collections.Generic.Dictionary<TKey, TValue> Values;
    }

    [RegisterSerializer]
    public sealed partial class ConcurrentQueueCodec<T> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Concurrent.ConcurrentQueue<T>, ConcurrentQueueSurrogate<T>>
    {
        public ConcurrentQueueCodec(Serializers.IValueSerializer<ConcurrentQueueSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Concurrent.ConcurrentQueue<T> ConvertFromSurrogate(ref ConcurrentQueueSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Concurrent.ConcurrentQueue<T> value, ref ConcurrentQueueSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ConcurrentQueueCopier<T> : Cloning.IDeepCopier<System.Collections.Concurrent.ConcurrentQueue<T>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Concurrent.ConcurrentQueue<T>>, Cloning.IBaseCopier
    {
        public ConcurrentQueueCopier(Cloning.IDeepCopier<T> valueCopier) { }

        public System.Collections.Concurrent.ConcurrentQueue<T> DeepCopy(System.Collections.Concurrent.ConcurrentQueue<T> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Concurrent.ConcurrentQueue<T> input, System.Collections.Concurrent.ConcurrentQueue<T> output, Cloning.CopyContext context) { }
    }

    [GenerateSerializer]
    public partial struct ConcurrentQueueSurrogate<T>
    {
        [Id(0)]
        public System.Collections.Generic.Queue<T> Values;
    }

    public static partial class ConsumeFieldExtension
    {
        public static void ConsumeUnknownField<TInput>(this ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { }

        public static void ConsumeUnknownField<TInput>(this ref Buffers.Reader<TInput> reader, scoped ref WireProtocol.Field field) { }
    }

    [RegisterSerializer]
    public sealed partial class CultureInfoCodec : GeneralizedReferenceTypeSurrogateCodec<System.Globalization.CultureInfo, CultureInfoSurrogate>
    {
        public CultureInfoCodec(Serializers.IValueSerializer<CultureInfoSurrogate> surrogateSerializer) : base(default!) { }

        public override System.Globalization.CultureInfo ConvertFromSurrogate(ref CultureInfoSurrogate surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Globalization.CultureInfo value, ref CultureInfoSurrogate surrogate) { }
    }

    [GenerateSerializer]
    public partial struct CultureInfoSurrogate
    {
        [Id(0)]
        public string Name;
    }

    [RegisterSerializer]
    public sealed partial class DateOnlyCodec : IFieldCodec<System.DateOnly>, IFieldCodec
    {
        System.DateOnly IFieldCodec<System.DateOnly>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.DateOnly>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.DateOnly value) { }

        public static System.DateOnly ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.DateOnly value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class DateTimeCodec : IFieldCodec<System.DateTime>, IFieldCodec
    {
        System.DateTime IFieldCodec<System.DateTime>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.DateTime>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.DateTime value) { }

        public static System.DateTime ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.DateTime value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class DateTimeOffsetCodec : IFieldCodec<System.DateTimeOffset>, IFieldCodec
    {
        System.DateTimeOffset IFieldCodec<System.DateTimeOffset>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.DateTimeOffset>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.DateTimeOffset value) { }

        public static System.DateTimeOffset ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.DateTimeOffset value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class DecimalCodec : IFieldCodec<decimal>, IFieldCodec
    {
        decimal IFieldCodec<decimal>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<decimal>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, decimal value) { }

        public static decimal ReadDecimalRaw<TInput>(ref Buffers.Reader<TInput> reader) { throw null; }

        public static decimal ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, decimal value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class DictionaryBaseCodec<TKey, TValue> : Serializers.IBaseCodec<System.Collections.Generic.Dictionary<TKey, TValue>>, Serializers.IBaseCodec
    {
        public DictionaryBaseCodec(IFieldCodec<TKey> keyCodec, IFieldCodec<TValue> valueCodec, IFieldCodec<System.Collections.Generic.IEqualityComparer<TKey>> comparerCodec) { }

        void Serializers.IBaseCodec<System.Collections.Generic.Dictionary<TKey, TValue>>.Deserialize<TInput>(ref Buffers.Reader<TInput> reader, System.Collections.Generic.Dictionary<TKey, TValue> value) { }

        void Serializers.IBaseCodec<System.Collections.Generic.Dictionary<TKey, TValue>>.Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Collections.Generic.Dictionary<TKey, TValue> value) { }
    }

    [RegisterSerializer]
    public sealed partial class DictionaryCodec<TKey, TValue> : IFieldCodec<System.Collections.Generic.Dictionary<TKey, TValue>>, IFieldCodec
    {
        public DictionaryCodec(IFieldCodec<TKey> keyCodec, IFieldCodec<TValue> valueCodec, IFieldCodec<System.Collections.Generic.IEqualityComparer<TKey>> comparerCodec) { }

        public System.Collections.Generic.Dictionary<TKey, TValue> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.Generic.Dictionary<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class DictionaryCopier<TKey, TValue> : Cloning.IDeepCopier<System.Collections.Generic.Dictionary<TKey, TValue>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Generic.Dictionary<TKey, TValue>>, Cloning.IBaseCopier
    {
        public DictionaryCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public System.Collections.Generic.Dictionary<TKey, TValue> DeepCopy(System.Collections.Generic.Dictionary<TKey, TValue> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Generic.Dictionary<TKey, TValue> input, System.Collections.Generic.Dictionary<TKey, TValue> output, Cloning.CopyContext context) { }
    }

    [RegisterSerializer]
    public sealed partial class DoubleCodec : IFieldCodec<double>, IFieldCodec
    {
        double IFieldCodec<double>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<double>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, double value) { }

        public static double ReadDoubleRaw<TInput>(ref Buffers.Reader<TInput> reader) { throw null; }

        public static double ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, double value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public abstract partial class Enum32BaseCodec<T> : IFieldCodec<T>, IFieldCodec where T : unmanaged, System.Enum
    {
        public T ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, T value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public static partial class FieldHeaderCodec
    {
        public static void ReadFieldHeader<TInput>(this ref Buffers.Reader<TInput> reader, scoped ref WireProtocol.Field field) { }

        public static WireProtocol.Field ReadFieldHeader<TInput>(this ref Buffers.Reader<TInput> reader) { throw null; }

        public static (WireProtocol.Field Field, string Type) ReadFieldHeaderForAnalysis<TInput>(this ref Buffers.Reader<TInput> reader) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class FloatCodec : IFieldCodec<float>, IFieldCodec
    {
        float IFieldCodec<float>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<float>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, float value) { }

        public static float ReadFloatRaw<TInput>(ref Buffers.Reader<TInput> reader) { throw null; }

        public static float ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, float value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public abstract partial class GeneralizedReferenceTypeSurrogateCodec<TField, TSurrogate> : IFieldCodec<TField>, IFieldCodec, IDerivedTypeCodec where TField : class where TSurrogate : struct
    {
        protected GeneralizedReferenceTypeSurrogateCodec(Serializers.IValueSerializer<TSurrogate> surrogateSerializer) { }

        public abstract TField ConvertFromSurrogate(ref TSurrogate surrogate);
        public abstract void ConvertToSurrogate(TField value, ref TSurrogate surrogate);
        public TField ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public abstract partial class GeneralizedValueTypeSurrogateCodec<TField, TSurrogate> : IFieldCodec<TField>, IFieldCodec where TField : struct where TSurrogate : struct
    {
        protected GeneralizedValueTypeSurrogateCodec(Serializers.IValueSerializer<TSurrogate> surrogateSerializer) { }

        public abstract TField ConvertFromSurrogate(ref TSurrogate surrogate);
        public abstract void ConvertToSurrogate(TField value, ref TSurrogate surrogate);
        public TField ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class GuidCodec : IFieldCodec<System.Guid>, IFieldCodec
    {
        System.Guid IFieldCodec<System.Guid>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Guid>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Guid value) { }

        public static System.Guid ReadRaw<TInput>(ref Buffers.Reader<TInput> reader) { throw null; }

        public static System.Guid ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Guid value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteRaw<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Guid value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class HalfCodec : IFieldCodec<System.Half>, IFieldCodec
    {
        System.Half IFieldCodec<System.Half>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Half>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Half value) { }

        public static System.Half ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Half value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class HashSetCodec<T> : IFieldCodec<System.Collections.Generic.HashSet<T>>, IFieldCodec, Serializers.IBaseCodec<System.Collections.Generic.HashSet<T>>, Serializers.IBaseCodec
    {
        public HashSetCodec(IFieldCodec<T> fieldCodec, IFieldCodec<System.Collections.Generic.IEqualityComparer<T>> comparerCodec) { }

        void Serializers.IBaseCodec<System.Collections.Generic.HashSet<T>>.Deserialize<TInput>(ref Buffers.Reader<TInput> reader, System.Collections.Generic.HashSet<T> value) { }

        public System.Collections.Generic.HashSet<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Collections.Generic.HashSet<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.Generic.HashSet<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class HashSetCopier<T> : Cloning.IDeepCopier<System.Collections.Generic.HashSet<T>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Generic.HashSet<T>>, Cloning.IBaseCopier
    {
        public HashSetCopier(Cloning.IDeepCopier<T> valueCopier) { }

        public System.Collections.Generic.HashSet<T> DeepCopy(System.Collections.Generic.HashSet<T> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Generic.HashSet<T> input, System.Collections.Generic.HashSet<T> output, Cloning.CopyContext context) { }
    }

    public partial interface IDerivedTypeCodec : IFieldCodec
    {
    }

    public partial interface IFieldCodec
    {
        object ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field);
        void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte>;
    }

    public partial interface IFieldCodec<T> : IFieldCodec
    {
        object IFieldCodec.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field);
        void IFieldCodec.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value);
        T ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field);
        void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, T value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte>;
    }

    [RegisterSerializer]
    public sealed partial class ImmutableArrayCodec<T> : GeneralizedValueTypeSurrogateCodec<System.Collections.Immutable.ImmutableArray<T>, ImmutableArraySurrogate<T>>
    {
        public ImmutableArrayCodec(Serializers.IValueSerializer<ImmutableArraySurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Immutable.ImmutableArray<T> ConvertFromSurrogate(ref ImmutableArraySurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Immutable.ImmutableArray<T> value, ref ImmutableArraySurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ImmutableArrayCopier<T> : Cloning.IDeepCopier<System.Collections.Immutable.ImmutableArray<T>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ImmutableArrayCopier(Cloning.IDeepCopier<T> copier) { }

        public System.Collections.Immutable.ImmutableArray<T> DeepCopy(System.Collections.Immutable.ImmutableArray<T> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [GenerateSerializer]
    public partial struct ImmutableArraySurrogate<T>
    {
        [Id(0)]
        public T[] Values;
    }

    [RegisterSerializer]
    public sealed partial class ImmutableDictionaryCodec<TKey, TValue> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Immutable.ImmutableDictionary<TKey, TValue>, ImmutableDictionarySurrogate<TKey, TValue>>
    {
        public ImmutableDictionaryCodec(Serializers.IValueSerializer<ImmutableDictionarySurrogate<TKey, TValue>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Immutable.ImmutableDictionary<TKey, TValue> ConvertFromSurrogate(ref ImmutableDictionarySurrogate<TKey, TValue> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Immutable.ImmutableDictionary<TKey, TValue> value, ref ImmutableDictionarySurrogate<TKey, TValue> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ImmutableDictionaryCopier<TKey, TValue> : Cloning.IDeepCopier<System.Collections.Immutable.ImmutableDictionary<TKey, TValue>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ImmutableDictionaryCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public System.Collections.Immutable.ImmutableDictionary<TKey, TValue> DeepCopy(System.Collections.Immutable.ImmutableDictionary<TKey, TValue> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [GenerateSerializer]
    public partial struct ImmutableDictionarySurrogate<TKey, TValue>
    {
        [Id(0)]
        public System.Collections.Generic.Dictionary<TKey, TValue> Values;
    }

    [RegisterSerializer]
    public sealed partial class ImmutableHashSetCodec<T> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Immutable.ImmutableHashSet<T>, ImmutableHashSetSurrogate<T>>
    {
        public ImmutableHashSetCodec(Serializers.IValueSerializer<ImmutableHashSetSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Immutable.ImmutableHashSet<T> ConvertFromSurrogate(ref ImmutableHashSetSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Immutable.ImmutableHashSet<T> value, ref ImmutableHashSetSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ImmutableHashSetCopier<T> : Cloning.IDeepCopier<System.Collections.Immutable.ImmutableHashSet<T>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ImmutableHashSetCopier(Cloning.IDeepCopier<T> copier) { }

        public System.Collections.Immutable.ImmutableHashSet<T> DeepCopy(System.Collections.Immutable.ImmutableHashSet<T> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [GenerateSerializer]
    public partial struct ImmutableHashSetSurrogate<T>
    {
        [Id(1)]
        public System.Collections.Generic.IEqualityComparer<T> KeyComparer;
        [Id(0)]
        public System.Collections.Generic.List<T> Values;
    }

    [RegisterSerializer]
    public sealed partial class ImmutableListCodec<T> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Immutable.ImmutableList<T>, ImmutableListSurrogate<T>>
    {
        public ImmutableListCodec(Serializers.IValueSerializer<ImmutableListSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Immutable.ImmutableList<T> ConvertFromSurrogate(ref ImmutableListSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Immutable.ImmutableList<T> value, ref ImmutableListSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ImmutableListCopier<T> : Cloning.IDeepCopier<System.Collections.Immutable.ImmutableList<T>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ImmutableListCopier(Cloning.IDeepCopier<T> copier) { }

        public System.Collections.Immutable.ImmutableList<T> DeepCopy(System.Collections.Immutable.ImmutableList<T> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [GenerateSerializer]
    public partial struct ImmutableListSurrogate<T>
    {
        [Id(0)]
        public System.Collections.Generic.List<T> Values;
    }

    [RegisterSerializer]
    public sealed partial class ImmutableQueueCodec<T> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Immutable.ImmutableQueue<T>, ImmutableQueueSurrogate<T>>
    {
        public ImmutableQueueCodec(Serializers.IValueSerializer<ImmutableQueueSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Immutable.ImmutableQueue<T> ConvertFromSurrogate(ref ImmutableQueueSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Immutable.ImmutableQueue<T> value, ref ImmutableQueueSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ImmutableQueueCopier<T> : Cloning.IDeepCopier<System.Collections.Immutable.ImmutableQueue<T>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ImmutableQueueCopier(Cloning.IDeepCopier<T> copier) { }

        public System.Collections.Immutable.ImmutableQueue<T> DeepCopy(System.Collections.Immutable.ImmutableQueue<T> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [GenerateSerializer]
    public partial struct ImmutableQueueSurrogate<T>
    {
        [Id(0)]
        public System.Collections.Generic.List<T> Values;
    }

    [RegisterSerializer]
    public sealed partial class ImmutableSortedDictionaryCodec<TKey, TValue> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>, ImmutableSortedDictionarySurrogate<TKey, TValue>>
    {
        public ImmutableSortedDictionaryCodec(Serializers.IValueSerializer<ImmutableSortedDictionarySurrogate<TKey, TValue>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue> ConvertFromSurrogate(ref ImmutableSortedDictionarySurrogate<TKey, TValue> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue> value, ref ImmutableSortedDictionarySurrogate<TKey, TValue> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ImmutableSortedDictionaryCopier<TKey, TValue> : Cloning.IDeepCopier<System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ImmutableSortedDictionaryCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue> DeepCopy(System.Collections.Immutable.ImmutableSortedDictionary<TKey, TValue> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [GenerateSerializer]
    public partial struct ImmutableSortedDictionarySurrogate<TKey, TValue>
    {
        [Id(1)]
        public System.Collections.Generic.IComparer<TKey> KeyComparer;
        [Id(2)]
        public System.Collections.Generic.IEqualityComparer<TValue> ValueComparer;
        [Id(0)]
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>> Values;
    }

    [RegisterSerializer]
    public sealed partial class ImmutableSortedSetCodec<T> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Immutable.ImmutableSortedSet<T>, ImmutableSortedSetSurrogate<T>>
    {
        public ImmutableSortedSetCodec(Serializers.IValueSerializer<ImmutableSortedSetSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Immutable.ImmutableSortedSet<T> ConvertFromSurrogate(ref ImmutableSortedSetSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Immutable.ImmutableSortedSet<T> value, ref ImmutableSortedSetSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ImmutableSortedSetCopier<T> : Cloning.IDeepCopier<System.Collections.Immutable.ImmutableSortedSet<T>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ImmutableSortedSetCopier(Cloning.IDeepCopier<T> copier) { }

        public System.Collections.Immutable.ImmutableSortedSet<T> DeepCopy(System.Collections.Immutable.ImmutableSortedSet<T> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [GenerateSerializer]
    public partial struct ImmutableSortedSetSurrogate<T>
    {
        [Id(1)]
        public System.Collections.Generic.IComparer<T> KeyComparer;
        [Id(0)]
        public System.Collections.Generic.List<T> Values;
    }

    [RegisterSerializer]
    public sealed partial class ImmutableStackCodec<T> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Immutable.ImmutableStack<T>, ImmutableStackSurrogate<T>>
    {
        public ImmutableStackCodec(Serializers.IValueSerializer<ImmutableStackSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Immutable.ImmutableStack<T> ConvertFromSurrogate(ref ImmutableStackSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Immutable.ImmutableStack<T> value, ref ImmutableStackSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ImmutableStackCopier<T> : Cloning.IDeepCopier<System.Collections.Immutable.ImmutableStack<T>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ImmutableStackCopier(Cloning.IDeepCopier<T> copier) { }

        public System.Collections.Immutable.ImmutableStack<T> DeepCopy(System.Collections.Immutable.ImmutableStack<T> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [GenerateSerializer]
    public partial struct ImmutableStackSurrogate<T>
    {
        [Id(0)]
        public System.Collections.Generic.List<T> Values;
    }

    [RegisterSerializer]
    public sealed partial class Int128Codec : IFieldCodec<System.Int128>, IFieldCodec
    {
        System.Int128 IFieldCodec<System.Int128>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Int128>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Int128 value) { }

        public static System.Int128 ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Int128 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class Int16Codec : IFieldCodec<short>, IFieldCodec
    {
        short IFieldCodec<short>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<short>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, short value) { }

        public static short ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, short value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, short value, System.Type actualType)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class Int32Codec : IFieldCodec<int>, IFieldCodec
    {
        int IFieldCodec<int>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<int>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, int value) { }

        public static int ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, int value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, int value, System.Type actualType)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class Int64Codec : IFieldCodec<long>, IFieldCodec
    {
        long IFieldCodec<long>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<long>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, long value) { }

        public static long ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, long value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, long value, System.Type actualType)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class IPAddressCodec : IFieldCodec<System.Net.IPAddress>, IFieldCodec, IDerivedTypeCodec
    {
        System.Net.IPAddress IFieldCodec<System.Net.IPAddress>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Net.IPAddress>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Net.IPAddress value) { }

        public static System.Net.IPAddress ReadRaw<TInput>(ref Buffers.Reader<TInput> reader) { throw null; }

        public static System.Net.IPAddress ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Net.IPAddress value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteRaw<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Net.IPAddress value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class IPEndPointCodec : IFieldCodec<System.Net.IPEndPoint>, IFieldCodec, IDerivedTypeCodec
    {
        System.Net.IPEndPoint IFieldCodec<System.Net.IPEndPoint>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Net.IPEndPoint>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Net.IPEndPoint value) { }

        public static System.Net.IPEndPoint ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Net.IPEndPoint value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public partial interface ISerializationCallbacks<T>
    {
        void OnCopied(T original, T result);
        void OnCopying(T original, T result);
        void OnDeserialized(T value);
        void OnDeserializing(T value);
        void OnSerialized(T value);
        void OnSerializing(T value);
    }

    [RegisterSerializer]
    public sealed partial class KeyValuePairCodec<TKey, TValue> : IFieldCodec<System.Collections.Generic.KeyValuePair<TKey, TValue>>, IFieldCodec
    {
        public KeyValuePairCodec(IFieldCodec<TKey> keyCodec, IFieldCodec<TValue> valueCodec) { }

        public System.Collections.Generic.KeyValuePair<TKey, TValue> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.Generic.KeyValuePair<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class KeyValuePairCopier<TKey, TValue> : Cloning.IDeepCopier<System.Collections.Generic.KeyValuePair<TKey, TValue>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public KeyValuePairCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public System.Collections.Generic.KeyValuePair<TKey, TValue> DeepCopy(System.Collections.Generic.KeyValuePair<TKey, TValue> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class ListCodec<T> : IFieldCodec<System.Collections.Generic.List<T>>, IFieldCodec, Serializers.IBaseCodec<System.Collections.Generic.List<T>>, Serializers.IBaseCodec
    {
        public ListCodec(IFieldCodec<T> fieldCodec) { }

        public void Deserialize<TInput>(ref Buffers.Reader<TInput> reader, System.Collections.Generic.List<T> value) { }

        public System.Collections.Generic.List<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Collections.Generic.List<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.Generic.List<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class ListCopier<T> : Cloning.IDeepCopier<System.Collections.Generic.List<T>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Generic.List<T>>, Cloning.IBaseCopier
    {
        public ListCopier(Cloning.IDeepCopier<T> valueCopier) { }

        public System.Collections.Generic.List<T> DeepCopy(System.Collections.Generic.List<T> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Generic.List<T> input, System.Collections.Generic.List<T> output, Cloning.CopyContext context) { }
    }

    [RegisterSerializer]
    public sealed partial class MemoryCodec<T> : IFieldCodec<System.Memory<T>>, IFieldCodec
    {
        public MemoryCodec(IFieldCodec<T> fieldCodec) { }

        public System.Memory<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Memory<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class MemoryCopier<T> : Cloning.IDeepCopier<System.Memory<T>>, Cloning.IDeepCopier
    {
        public MemoryCopier(Cloning.IDeepCopier<T> elementCopier) { }

        public System.Memory<T> DeepCopy(System.Memory<T> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class MemoryOfByteCodec : IFieldCodec<System.Memory<byte>>, IFieldCodec
    {
        System.Memory<byte> IFieldCodec<System.Memory<byte>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Memory<byte>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Memory<byte> value) { }

        public static System.Memory<byte> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Memory<byte> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class MemoryOfByteCopier : Cloning.IDeepCopier<System.Memory<byte>>, Cloning.IDeepCopier
    {
        public static System.Memory<byte> DeepCopy(System.Memory<byte> input, Cloning.CopyContext copyContext) { throw null; }

        System.Memory<byte> Cloning.IDeepCopier<System.Memory<byte>>.DeepCopy(System.Memory<byte> input, Cloning.CopyContext _) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class NameValueCollectionCodec : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Specialized.NameValueCollection, NameValueCollectionSurrogate>
    {
        public NameValueCollectionCodec(Serializers.IValueSerializer<NameValueCollectionSurrogate> surrogateSerializer) : base(default!) { }

        public override System.Collections.Specialized.NameValueCollection ConvertFromSurrogate(ref NameValueCollectionSurrogate surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Specialized.NameValueCollection value, ref NameValueCollectionSurrogate surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class NameValueCollectionCopier : Cloning.IDeepCopier<System.Collections.Specialized.NameValueCollection>, Cloning.IDeepCopier
    {
        public System.Collections.Specialized.NameValueCollection DeepCopy(System.Collections.Specialized.NameValueCollection input, Cloning.CopyContext context) { throw null; }
    }

    [GenerateSerializer]
    public partial struct NameValueCollectionSurrogate
    {
        [Id(0)]
        public System.Collections.Generic.Dictionary<string, string> Values;
    }

    [RegisterSerializer]
    public sealed partial class NullableCodec<T> : IFieldCodec<T?>, IFieldCodec where T : struct
    {
        public NullableCodec(IFieldCodec<T> fieldCodec) { }

        public T? ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, T? value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class NullableCopier<T> : Cloning.IDeepCopier<T?>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier where T : struct
    {
        public NullableCopier(Cloning.IDeepCopier<T> copier) { }

        public T? DeepCopy(T? input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class ObjectCodec : IFieldCodec<object>, IFieldCodec
    {
        object IFieldCodec<object>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<object>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value) { }

        void IFieldCodec.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value) { }

        public static object ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class ObjectCopier : Cloning.IDeepCopier<object>, Cloning.IDeepCopier
    {
        public static object DeepCopy(object input, Cloning.CopyContext context) { throw null; }

        object Cloning.IDeepCopier<object>.DeepCopy(object input, Cloning.CopyContext context) { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class PooledBufferCodec : IFieldCodec<Buffers.PooledBuffer>, IFieldCodec
    {
        public Buffers.PooledBuffer ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Buffers.PooledBuffer value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class PooledBufferCopier : Cloning.IDeepCopier<Buffers.PooledBuffer>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public Buffers.PooledBuffer DeepCopy(Buffers.PooledBuffer input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class QueueCodec<T> : IFieldCodec<System.Collections.Generic.Queue<T>>, IFieldCodec
    {
        public QueueCodec(IFieldCodec<T> fieldCodec) { }

        public System.Collections.Generic.Queue<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.Generic.Queue<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class QueueCopier<T> : Cloning.IDeepCopier<System.Collections.Generic.Queue<T>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Generic.Queue<T>>, Cloning.IBaseCopier
    {
        public QueueCopier(Cloning.IDeepCopier<T> valueCopier) { }

        public System.Collections.Generic.Queue<T> DeepCopy(System.Collections.Generic.Queue<T> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Generic.Queue<T> input, System.Collections.Generic.Queue<T> output, Cloning.CopyContext context) { }
    }

    [RegisterSerializer]
    public sealed partial class ReadOnlyCollectionCodec<T> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.ObjectModel.ReadOnlyCollection<T>, ReadOnlyCollectionSurrogate<T>>
    {
        public ReadOnlyCollectionCodec(Serializers.IValueSerializer<ReadOnlyCollectionSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.ObjectModel.ReadOnlyCollection<T> ConvertFromSurrogate(ref ReadOnlyCollectionSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.ObjectModel.ReadOnlyCollection<T> value, ref ReadOnlyCollectionSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ReadOnlyCollectionCopier<T> : Cloning.IDeepCopier<System.Collections.ObjectModel.ReadOnlyCollection<T>>, Cloning.IDeepCopier
    {
        public ReadOnlyCollectionCopier(Cloning.IDeepCopier<T> elementCopier) { }

        public System.Collections.ObjectModel.ReadOnlyCollection<T> DeepCopy(System.Collections.ObjectModel.ReadOnlyCollection<T> input, Cloning.CopyContext context) { throw null; }
    }

    [GenerateSerializer]
    public partial struct ReadOnlyCollectionSurrogate<T>
    {
        [Id(0)]
        public System.Collections.Generic.List<T> Values;
    }

    [RegisterSerializer]
    public sealed partial class ReadOnlyDictionaryCodec<TKey, TValue> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>, ReadOnlyDictionarySurrogate<TKey, TValue>>
    {
        public ReadOnlyDictionaryCodec(Serializers.IValueSerializer<ReadOnlyDictionarySurrogate<TKey, TValue>> surrogateSerializer) : base(default!) { }

        public override System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue> ConvertFromSurrogate(ref ReadOnlyDictionarySurrogate<TKey, TValue> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue> value, ref ReadOnlyDictionarySurrogate<TKey, TValue> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class ReadOnlyDictionaryCopier<TKey, TValue> : Cloning.IDeepCopier<System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>>, Cloning.IDeepCopier
    {
        public ReadOnlyDictionaryCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue> DeepCopy(System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue> input, Cloning.CopyContext context) { throw null; }
    }

    [GenerateSerializer]
    public partial struct ReadOnlyDictionarySurrogate<TKey, TValue>
    {
        [Id(0)]
        public System.Collections.Generic.Dictionary<TKey, TValue> Values;
    }

    [RegisterSerializer]
    public sealed partial class ReadOnlyMemoryCodec<T> : IFieldCodec<System.ReadOnlyMemory<T>>, IFieldCodec
    {
        public ReadOnlyMemoryCodec(IFieldCodec<T> fieldCodec) { }

        public System.ReadOnlyMemory<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.ReadOnlyMemory<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class ReadOnlyMemoryCopier<T> : Cloning.IDeepCopier<System.ReadOnlyMemory<T>>, Cloning.IDeepCopier
    {
        public ReadOnlyMemoryCopier(Cloning.IDeepCopier<T> elementCopier) { }

        public System.ReadOnlyMemory<T> DeepCopy(System.ReadOnlyMemory<T> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class ReadOnlyMemoryOfByteCodec : IFieldCodec<System.ReadOnlyMemory<byte>>, IFieldCodec
    {
        System.ReadOnlyMemory<byte> IFieldCodec<System.ReadOnlyMemory<byte>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.ReadOnlyMemory<byte>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.ReadOnlyMemory<byte> value) { }

        public static byte[] ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.ReadOnlyMemory<byte> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class ReadOnlyMemoryOfByteCopier : Cloning.IDeepCopier<System.ReadOnlyMemory<byte>>, Cloning.IDeepCopier
    {
        public static System.ReadOnlyMemory<byte> DeepCopy(System.ReadOnlyMemory<byte> input, Cloning.CopyContext copyContext) { throw null; }

        System.ReadOnlyMemory<byte> Cloning.IDeepCopier<System.ReadOnlyMemory<byte>>.DeepCopy(System.ReadOnlyMemory<byte> input, Cloning.CopyContext _) { throw null; }
    }

    public static partial class ReferenceCodec
    {
        public static uint CreateRecordPlaceholder(Session.SerializerSession session) { throw null; }

        public static void MarkValueField(Session.SerializerSession session) { }

        public static object ReadReference<TInput>(ref Buffers.Reader<TInput> reader, System.Type fieldType) { throw null; }

        public static T ReadReference<T, TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void RecordObject(Session.SerializerSession session, object value, uint referenceId) { }

        public static void RecordObject(Session.SerializerSession session, object value) { }

        public static bool TryWriteReferenceField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldId, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { throw null; }

        public static bool TryWriteReferenceField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldId, System.Type expectedType, System.Type actualType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { throw null; }

        public static void WriteNullReference<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldId)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public abstract partial class ReferenceTypeSurrogateCodec<TField, TSurrogate> : IFieldCodec<TField>, IFieldCodec where TSurrogate : struct
    {
        protected ReferenceTypeSurrogateCodec(Serializers.IValueSerializer<TSurrogate> surrogateSerializer) { }

        public abstract TField ConvertFromSurrogate(ref TSurrogate surrogate);
        public abstract void ConvertToSurrogate(TField value, ref TSurrogate surrogate);
        public TField ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class SByteCodec : IFieldCodec<sbyte>, IFieldCodec
    {
        sbyte IFieldCodec<sbyte>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<sbyte>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, sbyte value) { }

        public static sbyte ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, sbyte value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, sbyte value, System.Type actualType)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public partial class SkipFieldCodec : IFieldCodec
    {
        public object ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public static partial class SkipFieldExtension
    {
        public static void SkipField<TInput>(this ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { }
    }

    [RegisterSerializer]
    public sealed partial class SortedDictionaryCodec<TKey, TValue> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Generic.SortedDictionary<TKey, TValue>, SortedDictionarySurrogate<TKey, TValue>>
    {
        public SortedDictionaryCodec(Serializers.IValueSerializer<SortedDictionarySurrogate<TKey, TValue>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Generic.SortedDictionary<TKey, TValue> ConvertFromSurrogate(ref SortedDictionarySurrogate<TKey, TValue> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Generic.SortedDictionary<TKey, TValue> value, ref SortedDictionarySurrogate<TKey, TValue> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class SortedDictionaryCopier<TKey, TValue> : Cloning.IDeepCopier<System.Collections.Generic.SortedDictionary<TKey, TValue>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Generic.SortedDictionary<TKey, TValue>>, Cloning.IBaseCopier
    {
        public SortedDictionaryCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public System.Collections.Generic.SortedDictionary<TKey, TValue> DeepCopy(System.Collections.Generic.SortedDictionary<TKey, TValue> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Generic.SortedDictionary<TKey, TValue> input, System.Collections.Generic.SortedDictionary<TKey, TValue> output, Cloning.CopyContext context) { }
    }

    [GenerateSerializer]
    public partial struct SortedDictionarySurrogate<TKey, TValue>
    {
        [Id(1)]
        public System.Collections.Generic.IComparer<TKey> Comparer;
        [Id(0)]
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>> Values;
    }

    [RegisterSerializer]
    public sealed partial class SortedListCodec<TKey, TValue> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Generic.SortedList<TKey, TValue>, SortedListSurrogate<TKey, TValue>>
    {
        public SortedListCodec(Serializers.IValueSerializer<SortedListSurrogate<TKey, TValue>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Generic.SortedList<TKey, TValue> ConvertFromSurrogate(ref SortedListSurrogate<TKey, TValue> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Generic.SortedList<TKey, TValue> value, ref SortedListSurrogate<TKey, TValue> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class SortedListCopier<TKey, TValue> : Cloning.IDeepCopier<System.Collections.Generic.SortedList<TKey, TValue>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Generic.SortedList<TKey, TValue>>, Cloning.IBaseCopier
    {
        public SortedListCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public System.Collections.Generic.SortedList<TKey, TValue> DeepCopy(System.Collections.Generic.SortedList<TKey, TValue> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Generic.SortedList<TKey, TValue> input, System.Collections.Generic.SortedList<TKey, TValue> output, Cloning.CopyContext context) { }
    }

    [GenerateSerializer]
    public partial struct SortedListSurrogate<TKey, TValue>
    {
        [Id(1)]
        public System.Collections.Generic.IComparer<TKey> Comparer;
        [Id(0)]
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>> Values;
    }

    [RegisterSerializer]
    public sealed partial class SortedSetCodec<T> : GeneralizedReferenceTypeSurrogateCodec<System.Collections.Generic.SortedSet<T>, SortedSetSurrogate<T>>
    {
        public SortedSetCodec(Serializers.IValueSerializer<SortedSetSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override System.Collections.Generic.SortedSet<T> ConvertFromSurrogate(ref SortedSetSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Collections.Generic.SortedSet<T> value, ref SortedSetSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public sealed partial class SortedSetCopier<T> : Cloning.IDeepCopier<System.Collections.Generic.SortedSet<T>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Generic.SortedSet<T>>, Cloning.IBaseCopier
    {
        public SortedSetCopier(Cloning.IDeepCopier<T> elementCopier) { }

        public System.Collections.Generic.SortedSet<T> DeepCopy(System.Collections.Generic.SortedSet<T> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Generic.SortedSet<T> input, System.Collections.Generic.SortedSet<T> output, Cloning.CopyContext context) { }
    }

    [GenerateSerializer]
    public partial struct SortedSetSurrogate<T>
    {
        [Id(1)]
        public System.Collections.Generic.IComparer<T> Comparer;
        [Id(0)]
        public System.Collections.Generic.List<T> Values;
    }

    [RegisterSerializer]
    public sealed partial class StackCodec<T> : IFieldCodec<System.Collections.Generic.Stack<T>>, IFieldCodec
    {
        public StackCodec(IFieldCodec<T> fieldCodec) { }

        public System.Collections.Generic.Stack<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Collections.Generic.Stack<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class StackCopier<T> : Cloning.IDeepCopier<System.Collections.Generic.Stack<T>>, Cloning.IDeepCopier, Cloning.IBaseCopier<System.Collections.Generic.Stack<T>>, Cloning.IBaseCopier
    {
        public StackCopier(Cloning.IDeepCopier<T> valueCopier) { }

        public System.Collections.Generic.Stack<T> DeepCopy(System.Collections.Generic.Stack<T> input, Cloning.CopyContext context) { throw null; }

        public void DeepCopy(System.Collections.Generic.Stack<T> input, System.Collections.Generic.Stack<T> output, Cloning.CopyContext context) { }
    }

    [RegisterSerializer]
    public sealed partial class StringCodec : IFieldCodec<string>, IFieldCodec
    {
        string IFieldCodec<string>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<string>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, string value) { }

        public static string ReadRaw<TInput>(ref Buffers.Reader<TInput> reader, uint numBytes) { throw null; }

        public static string ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, string value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteRaw<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, string value, int numBytes)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TimeOnlyCodec : IFieldCodec<System.TimeOnly>, IFieldCodec
    {
        System.TimeOnly IFieldCodec<System.TimeOnly>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.TimeOnly>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.TimeOnly value) { }

        public static System.TimeOnly ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.TimeOnly value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TimeSpanCodec : IFieldCodec<System.TimeSpan>, IFieldCodec
    {
        System.TimeSpan IFieldCodec<System.TimeSpan>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.TimeSpan>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.TimeSpan value) { }

        public static System.TimeSpan ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.TimeSpan value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TupleCodec<T> : IFieldCodec<System.Tuple<T>>, IFieldCodec
    {
        public TupleCodec(IFieldCodec<T> valueCodec) { }

        public System.Tuple<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Tuple<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TupleCodec<T1, T2> : IFieldCodec<System.Tuple<T1, T2>>, IFieldCodec
    {
        public TupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec) { }

        public System.Tuple<T1, T2> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Tuple<T1, T2> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TupleCodec<T1, T2, T3> : IFieldCodec<System.Tuple<T1, T2, T3>>, IFieldCodec
    {
        public TupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec) { }

        public System.Tuple<T1, T2, T3> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Tuple<T1, T2, T3> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TupleCodec<T1, T2, T3, T4> : IFieldCodec<System.Tuple<T1, T2, T3, T4>>, IFieldCodec
    {
        public TupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec) { }

        public System.Tuple<T1, T2, T3, T4> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Tuple<T1, T2, T3, T4> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TupleCodec<T1, T2, T3, T4, T5> : IFieldCodec<System.Tuple<T1, T2, T3, T4, T5>>, IFieldCodec
    {
        public TupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec, IFieldCodec<T5> item5Codec) { }

        public System.Tuple<T1, T2, T3, T4, T5> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Tuple<T1, T2, T3, T4, T5> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TupleCodec<T1, T2, T3, T4, T5, T6> : IFieldCodec<System.Tuple<T1, T2, T3, T4, T5, T6>>, IFieldCodec
    {
        public TupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec, IFieldCodec<T5> item5Codec, IFieldCodec<T6> item6Codec) { }

        public System.Tuple<T1, T2, T3, T4, T5, T6> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Tuple<T1, T2, T3, T4, T5, T6> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TupleCodec<T1, T2, T3, T4, T5, T6, T7> : IFieldCodec<System.Tuple<T1, T2, T3, T4, T5, T6, T7>>, IFieldCodec
    {
        public TupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec, IFieldCodec<T5> item5Codec, IFieldCodec<T6> item6Codec, IFieldCodec<T7> item7Codec) { }

        public System.Tuple<T1, T2, T3, T4, T5, T6, T7> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Tuple<T1, T2, T3, T4, T5, T6, T7> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class TupleCodec<T1, T2, T3, T4, T5, T6, T7, T8> : IFieldCodec<System.Tuple<T1, T2, T3, T4, T5, T6, T7, T8>>, IFieldCodec
    {
        public TupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec, IFieldCodec<T5> item5Codec, IFieldCodec<T6> item6Codec, IFieldCodec<T7> item7Codec, IFieldCodec<T8> item8Codec) { }

        public System.Tuple<T1, T2, T3, T4, T5, T6, T7, T8> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Tuple<T1, T2, T3, T4, T5, T6, T7, T8> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class TupleCopier<T> : Cloning.IDeepCopier<System.Tuple<T>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public TupleCopier(Cloning.IDeepCopier<T> copier) { }

        public System.Tuple<T> DeepCopy(System.Tuple<T> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterCopier]
    public sealed partial class TupleCopier<T1, T2> : Cloning.IDeepCopier<System.Tuple<T1, T2>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public TupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2) { }

        public System.Tuple<T1, T2> DeepCopy(System.Tuple<T1, T2> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterCopier]
    public sealed partial class TupleCopier<T1, T2, T3> : Cloning.IDeepCopier<System.Tuple<T1, T2, T3>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public TupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3) { }

        public System.Tuple<T1, T2, T3> DeepCopy(System.Tuple<T1, T2, T3> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterCopier]
    public sealed partial class TupleCopier<T1, T2, T3, T4> : Cloning.IDeepCopier<System.Tuple<T1, T2, T3, T4>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public TupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4) { }

        public System.Tuple<T1, T2, T3, T4> DeepCopy(System.Tuple<T1, T2, T3, T4> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterCopier]
    public sealed partial class TupleCopier<T1, T2, T3, T4, T5> : Cloning.IDeepCopier<System.Tuple<T1, T2, T3, T4, T5>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public TupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5) { }

        public System.Tuple<T1, T2, T3, T4, T5> DeepCopy(System.Tuple<T1, T2, T3, T4, T5> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterCopier]
    public sealed partial class TupleCopier<T1, T2, T3, T4, T5, T6> : Cloning.IDeepCopier<System.Tuple<T1, T2, T3, T4, T5, T6>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public TupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5, Cloning.IDeepCopier<T6> copier6) { }

        public System.Tuple<T1, T2, T3, T4, T5, T6> DeepCopy(System.Tuple<T1, T2, T3, T4, T5, T6> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterCopier]
    public sealed partial class TupleCopier<T1, T2, T3, T4, T5, T6, T7> : Cloning.IDeepCopier<System.Tuple<T1, T2, T3, T4, T5, T6, T7>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public TupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5, Cloning.IDeepCopier<T6> copier6, Cloning.IDeepCopier<T7> copier7) { }

        public System.Tuple<T1, T2, T3, T4, T5, T6, T7> DeepCopy(System.Tuple<T1, T2, T3, T4, T5, T6, T7> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterCopier]
    public sealed partial class TupleCopier<T1, T2, T3, T4, T5, T6, T7, T8> : Cloning.IDeepCopier<System.Tuple<T1, T2, T3, T4, T5, T6, T7, T8>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public TupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5, Cloning.IDeepCopier<T6> copier6, Cloning.IDeepCopier<T7> copier7, Cloning.IDeepCopier<T8> copier8) { }

        public System.Tuple<T1, T2, T3, T4, T5, T6, T7, T8> DeepCopy(System.Tuple<T1, T2, T3, T4, T5, T6, T7, T8> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class TypeSerializerCodec : IFieldCodec<System.Type>, IFieldCodec, IDerivedTypeCodec
    {
        System.Type IFieldCodec<System.Type>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Type>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Type value) { }

        public static System.Type ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class UInt128Codec : IFieldCodec<System.UInt128>, IFieldCodec
    {
        System.UInt128 IFieldCodec<System.UInt128>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.UInt128>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.UInt128 value) { }

        public static System.UInt128 ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.UInt128 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class UInt16Codec : IFieldCodec<ushort>, IFieldCodec
    {
        ushort IFieldCodec<ushort>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<ushort>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, ushort value) { }

        public static ushort ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, ushort value, System.Type actualType)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, ushort value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class UInt32Codec : IFieldCodec<uint>, IFieldCodec
    {
        uint IFieldCodec<uint>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<uint>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, uint value) { }

        public static uint ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, uint value, System.Type actualType)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, uint value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class UInt64Codec : IFieldCodec<ulong>, IFieldCodec
    {
        ulong IFieldCodec<ulong>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<ulong>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, ulong value) { }

        public static ulong ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, ulong value, System.Type actualType)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, ulong value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public sealed partial class UnknownFieldMarker
    {
        public UnknownFieldMarker(WireProtocol.Field field, long position) { }

        public WireProtocol.Field Field { get { throw null; } }

        public long Position { get { throw null; } }

        public override string ToString() { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class UriCodec : IFieldCodec<System.Uri>, IFieldCodec, IDerivedTypeCodec
    {
        System.Uri IFieldCodec<System.Uri>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void IFieldCodec<System.Uri>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.Uri value) { }

        public static System.Uri ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public static void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Uri value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec : IFieldCodec<System.ValueTuple>, IFieldCodec
    {
        public System.ValueTuple ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.ValueTuple value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec<T> : IFieldCodec<System.ValueTuple<T>>, IFieldCodec
    {
        public ValueTupleCodec(IFieldCodec<T> valueCodec) { }

        public System.ValueTuple<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.ValueTuple<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec<T1, T2> : IFieldCodec<(T1, T2)>, IFieldCodec
    {
        public ValueTupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec) { }

        public (T1, T2) ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, (T1, T2) value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec<T1, T2, T3> : IFieldCodec<(T1, T2, T3)>, IFieldCodec
    {
        public ValueTupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec) { }

        public (T1, T2, T3) ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, (T1, T2, T3) value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec<T1, T2, T3, T4> : IFieldCodec<(T1, T2, T3, T4)>, IFieldCodec
    {
        public ValueTupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec) { }

        public (T1, T2, T3, T4) ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, (T1, T2, T3, T4) value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec<T1, T2, T3, T4, T5> : IFieldCodec<(T1, T2, T3, T4, T5)>, IFieldCodec
    {
        public ValueTupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec, IFieldCodec<T5> item5Codec) { }

        public (T1, T2, T3, T4, T5) ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, (T1, T2, T3, T4, T5) value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec<T1, T2, T3, T4, T5, T6> : IFieldCodec<(T1, T2, T3, T4, T5, T6)>, IFieldCodec
    {
        public ValueTupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec, IFieldCodec<T5> item5Codec, IFieldCodec<T6> item6Codec) { }

        public (T1, T2, T3, T4, T5, T6) ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, (T1, T2, T3, T4, T5, T6) value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec<T1, T2, T3, T4, T5, T6, T7> : IFieldCodec<(T1, T2, T3, T4, T5, T6, T7)>, IFieldCodec
    {
        public ValueTupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec, IFieldCodec<T5> item5Codec, IFieldCodec<T6> item6Codec, IFieldCodec<T7> item7Codec) { }

        public (T1, T2, T3, T4, T5, T6, T7) ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, (T1, T2, T3, T4, T5, T6, T7) value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterSerializer]
    public sealed partial class ValueTupleCodec<T1, T2, T3, T4, T5, T6, T7, T8> : IFieldCodec<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, T8>>, IFieldCodec where T8 : struct
    {
        public ValueTupleCodec(IFieldCodec<T1> item1Codec, IFieldCodec<T2> item2Codec, IFieldCodec<T3> item3Codec, IFieldCodec<T4> item4Codec, IFieldCodec<T5> item5Codec, IFieldCodec<T6> item6Codec, IFieldCodec<T7> item7Codec, IFieldCodec<T8> item8Codec) { }

        public System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, T8> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, T8> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier : Cloning.IDeepCopier<System.ValueTuple>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public System.ValueTuple DeepCopy(System.ValueTuple input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier<T> : Cloning.IDeepCopier<System.ValueTuple<T>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ValueTupleCopier(Cloning.IDeepCopier<T> copier) { }

        public System.ValueTuple<T> DeepCopy(System.ValueTuple<T> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier<T1, T2> : Cloning.IDeepCopier<(T1, T2)>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ValueTupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2) { }

        public (T1, T2) DeepCopy((T1, T2) input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier<T1, T2, T3> : Cloning.IDeepCopier<(T1, T2, T3)>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ValueTupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3) { }

        public (T1, T2, T3) DeepCopy((T1, T2, T3) input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier<T1, T2, T3, T4> : Cloning.IDeepCopier<(T1, T2, T3, T4)>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ValueTupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4) { }

        public (T1, T2, T3, T4) DeepCopy((T1, T2, T3, T4) input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier<T1, T2, T3, T4, T5> : Cloning.IDeepCopier<(T1, T2, T3, T4, T5)>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ValueTupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5) { }

        public (T1, T2, T3, T4, T5) DeepCopy((T1, T2, T3, T4, T5) input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier<T1, T2, T3, T4, T5, T6> : Cloning.IDeepCopier<(T1, T2, T3, T4, T5, T6)>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ValueTupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5, Cloning.IDeepCopier<T6> copier6) { }

        public (T1, T2, T3, T4, T5, T6) DeepCopy((T1, T2, T3, T4, T5, T6) input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier<T1, T2, T3, T4, T5, T6, T7> : Cloning.IDeepCopier<(T1, T2, T3, T4, T5, T6, T7)>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier
    {
        public ValueTupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5, Cloning.IDeepCopier<T6> copier6, Cloning.IDeepCopier<T7> copier7) { }

        public (T1, T2, T3, T4, T5, T6, T7) DeepCopy((T1, T2, T3, T4, T5, T6, T7) input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public sealed partial class ValueTupleCopier<T1, T2, T3, T4, T5, T6, T7, T8> : Cloning.IDeepCopier<System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, T8>>, Cloning.IDeepCopier, Cloning.IOptionalDeepCopier where T8 : struct
    {
        public ValueTupleCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5, Cloning.IDeepCopier<T6> copier6, Cloning.IDeepCopier<T7> copier7, Cloning.IDeepCopier<T8> copier8) { }

        public System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, T8> DeepCopy(System.ValueTuple<T1, T2, T3, T4, T5, T6, T7, T8> input, Cloning.CopyContext context) { throw null; }

        public bool IsShallowCopyable() { throw null; }

        object Cloning.IDeepCopier.DeepCopy(object input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public sealed partial class VersionCodec : GeneralizedReferenceTypeSurrogateCodec<System.Version, VersionSurrogate>
    {
        public VersionCodec(Serializers.IValueSerializer<VersionSurrogate> surrogateSerializer) : base(default!) { }

        public override System.Version ConvertFromSurrogate(ref VersionSurrogate surrogate) { throw null; }

        public override void ConvertToSurrogate(System.Version value, ref VersionSurrogate surrogate) { }
    }

    [GenerateSerializer]
    public partial struct VersionSurrogate
    {
        [Id(2)]
        public int Build;
        [Id(0)]
        public int Major;
        [Id(1)]
        public int Minor;
        [Id(3)]
        public int Revision;
    }

    [Alias("StringComparer")]
    public sealed partial class WellKnownStringComparerCodec : Serializers.IGeneralizedCodec, IFieldCodec
    {
        public bool IsSupportedType(System.Type type) { throw null; }

        public object ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace Orleans.Serialization.Configuration
{
    public partial interface ITypeManifestProvider : Microsoft.Extensions.Options.IConfigureOptions<TypeManifestOptions>
    {
    }

    public sealed partial class TypeManifestOptions
    {
        public System.Collections.Generic.HashSet<System.Type> Activators { get { throw null; } }

        public bool AllowAllTypes { get { throw null; } set { } }

        public System.Collections.Generic.HashSet<string> AllowedTypes { get { throw null; } }

        public TypeSystem.CompoundTypeAliasTree CompoundTypeAliases { get { throw null; } }

        public System.Collections.Generic.HashSet<System.Type> Converters { get { throw null; } }

        public System.Collections.Generic.HashSet<System.Type> Copiers { get { throw null; } }

        public bool? EnableConfigurationAnalysis { get { throw null; } set { } }

        public System.Collections.Generic.HashSet<System.Type> FieldCodecs { get { throw null; } }

        public System.Collections.Generic.HashSet<System.Type> InterfaceImplementations { get { throw null; } }

        public System.Collections.Generic.HashSet<System.Type> InterfaceProxies { get { throw null; } }

        public System.Collections.Generic.HashSet<System.Type> Interfaces { get { throw null; } }

        public System.Collections.Generic.HashSet<System.Type> Serializers { get { throw null; } }

        public System.Collections.Generic.Dictionary<string, System.Type> WellKnownTypeAliases { get { throw null; } }

        public System.Collections.Generic.Dictionary<uint, System.Type> WellKnownTypeIds { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple = true)]
    public sealed partial class TypeManifestProviderAttribute : System.Attribute
    {
        public TypeManifestProviderAttribute(System.Type providerType) { }

        public System.Type ProviderType { get { throw null; } }
    }

    public abstract partial class TypeManifestProviderBase : ITypeManifestProvider, Microsoft.Extensions.Options.IConfigureOptions<TypeManifestOptions>
    {
        public virtual object Key { get { throw null; } }

        protected abstract void ConfigureInner(TypeManifestOptions options);
        void Microsoft.Extensions.Options.IConfigureOptions<TypeManifestOptions>.Configure(TypeManifestOptions options) { }
    }
}

namespace Orleans.Serialization.GeneratedCodeHelpers
{
    public static partial class OrleansGeneratedCodeHelper
    {
        public static void ConsumeEndBaseOrEndObject<TInput>(this ref Buffers.Reader<TInput> reader, scoped ref WireProtocol.Field field) { }

        public static void ConsumeEndBaseOrEndObject<TInput>(this ref Buffers.Reader<TInput> reader) { }

        public static TField DeserializeUnexpectedType<TInput, TField>(this ref Buffers.Reader<TInput> reader, scoped ref WireProtocol.Field field)
            where TField : class { throw null; }

        public static System.Reflection.MethodInfo GetMethodInfoOrDefault(System.Type interfaceType, string methodName, System.Type[] methodTypeParameters, System.Type[] parameterTypes) { throw null; }

        public static Cloning.IDeepCopier<T> GetOptionalCopier<T>(Cloning.IDeepCopier<T> copier) { throw null; }

        public static TService GetService<TService>(object caller, Serializers.ICodecProvider codecProvider) { throw null; }

        public static object InvokableThrowArgumentOutOfRange(int index, int maxArgs) { throw null; }

        public static void SerializeUnexpectedType<TBufferWriter>(this ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public static TService UnwrapService<TService>(object caller, TService service) { throw null; }

        public abstract partial class ExceptionCopier<T, B> : Cloning.IDeepCopier<T>, Cloning.IDeepCopier, Cloning.IBaseCopier<T>, Cloning.IBaseCopier where T : B where B : System.Exception
        {
            protected ExceptionCopier(Serializers.ICodecProvider codecProvider) { }

            public virtual void DeepCopy(T input, T output, Cloning.CopyContext context) { }

            public T DeepCopy(T original, Cloning.CopyContext context) { throw null; }
        }
    }
}

namespace Orleans.Serialization.Internal
{
    public static partial class ReferencedAssemblyProvider
    {
        public static void AddAssembly(System.Collections.Generic.HashSet<System.Reflection.Assembly> parts, System.Reflection.Assembly assembly) { }

        public static void AddFromAssemblyLoadContext(System.Collections.Generic.HashSet<System.Reflection.Assembly> parts, System.Reflection.Assembly assembly = null) { }

        public static void AddFromAssemblyLoadContext(System.Collections.Generic.HashSet<System.Reflection.Assembly> parts, System.Runtime.Loader.AssemblyLoadContext context) { }

        public static void AddFromDependencyContext(System.Collections.Generic.HashSet<System.Reflection.Assembly> parts, System.Reflection.Assembly assembly = null) { }

        public static System.Collections.Generic.IEnumerable<System.Reflection.Assembly> GetRelevantAssemblies() { throw null; }
    }
}

namespace Orleans.Serialization.Invocation
{
    [GenerateSerializer]
    [Immutable]
    [UseActivator]
    [SuppressReferenceTracking]
    public sealed partial class CompletedResponse : Response
    {
        public override System.Exception? Exception { get { throw null; } set { } }

        public static CompletedResponse Instance { get { throw null; } }

        public override object? Result { get { throw null; } set { } }

        public override void Dispose() { }

        public override T GetResult<T>() { throw null; }

        public override string ToString() { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class ExceptionResponse : Response
    {
        [Id(0)]
        public override System.Exception? Exception { get { throw null; } set { } }

        public override object? Result { get { throw null; } set { } }

        public override void Dispose() { }

        public override T GetResult<T>() { throw null; }

        public override string ToString() { throw null; }
    }

    public partial interface IInvokable : System.IDisposable
    {
        string GetActivityName();
        object? GetArgument(int index);
        int GetArgumentCount();
        System.Threading.CancellationToken GetCancellationToken();
        System.TimeSpan? GetDefaultResponseTimeout();
        string GetInterfaceName();
        System.Type GetInterfaceType();
        System.Reflection.MethodInfo GetMethod();
        string GetMethodName();
        object? GetTarget();
        System.Threading.Tasks.ValueTask<Response> Invoke();
        void SetArgument(int index, object value);
        void SetTarget(ITargetHolder holder);
        bool TryCancel();
    }

    public static partial class InvokablePool
    {
        public static T Get<T>()
            where T : class, IInvokable, new() { throw null; }

        public static void Return<T>(T obj)
            where T : class, IInvokable, new() { }
    }

    public partial interface IResponseCompletionSource
    {
        void Complete();
        void Complete(Response value);
    }

    public partial interface ITargetHolder
    {
        TComponent? GetComponent<TComponent>()
            where TComponent : class;
        TTarget? GetTarget<TTarget>()
            where TTarget : class;
    }

    [SerializerTransparent]
    public abstract partial class Response : System.IDisposable
    {
        public static Response Completed { get { throw null; } }

        public abstract System.Exception? Exception { get; set; }
        public abstract object? Result { get; set; }

        public abstract void Dispose();
        public static Response FromException(System.Exception exception) { throw null; }

        public static Response FromResult<TResult>(TResult value) { throw null; }

        public abstract T GetResult<T>();
        public virtual System.Type? GetSimpleResultType() { throw null; }

        public override string ToString() { throw null; }
    }

    public abstract partial class ResponseCodec
    {
        public abstract object ReadRaw<TInput>(ref Buffers.Reader<TInput> reader, scoped ref WireProtocol.Field field);
        public abstract void WriteRaw<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte>;
    }

    public sealed partial class ResponseCompletionSource : IResponseCompletionSource, System.Threading.Tasks.Sources.IValueTaskSource<Response>, System.Threading.Tasks.Sources.IValueTaskSource
    {
        public System.Threading.Tasks.ValueTask<Response> AsValueTask() { throw null; }

        public System.Threading.Tasks.ValueTask AsVoidValueTask() { throw null; }

        public void Complete() { }

        public void Complete(Response value) { }

        public Response GetResult(short token) { throw null; }

        public System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token) { throw null; }

        public void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags) { }

        public void Reset() { }

        public void SetException(System.Exception exception) { }

        public void SetResult(Response result) { }

        void System.Threading.Tasks.Sources.IValueTaskSource.GetResult(short token) { }
    }

    public static partial class ResponseCompletionSourcePool
    {
        public static ResponseCompletionSource Get() { throw null; }

        public static ResponseCompletionSource<T> Get<T>() { throw null; }

        public static void Return(ResponseCompletionSource obj) { }

        public static void Return<T>(ResponseCompletionSource<T> obj) { }
    }

    public sealed partial class ResponseCompletionSource<TResult> : IResponseCompletionSource, System.Threading.Tasks.Sources.IValueTaskSource<TResult>, System.Threading.Tasks.Sources.IValueTaskSource
    {
        public System.Threading.Tasks.ValueTask<TResult> AsValueTask() { throw null; }

        public System.Threading.Tasks.ValueTask AsVoidValueTask() { throw null; }

        public void Complete() { }

        public void Complete(Response value) { }

        public void Complete(Response<TResult> value) { }

        public TResult GetResult(short token) { throw null; }

        public System.Threading.Tasks.Sources.ValueTaskSourceStatus GetStatus(short token) { throw null; }

        public void OnCompleted(System.Action<object> continuation, object state, short token, System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags flags) { }

        public void Reset() { }

        public void SetException(System.Exception exception) { }

        public void SetResult(TResult result) { }

        void System.Threading.Tasks.Sources.IValueTaskSource.GetResult(short token) { }
    }

    public static partial class ResponseExtensions
    {
        public static void ThrowIfExceptionResponse(this Response response) { }
    }

    public static partial class ResponsePool
    {
        public static Response<T> Get<T>() { throw null; }

        public static void Return<T>(Response<T> obj) { }
    }

    [UseActivator]
    [SuppressReferenceTracking]
    public sealed partial class Response<TResult> : Response
    {
        public override System.Exception? Exception { get { throw null; } set { } }

        public override object? Result { get { throw null; } set { } }

        public TResult? TypedResult { get { throw null; } set { } }

        public override void Dispose() { }

        public override T GetResult<T>() { throw null; }

        public override System.Type GetSimpleResultType() { throw null; }

        public override string ToString() { throw null; }
    }
}

namespace Orleans.Serialization.Serializers
{
    public partial class AbstractTypeSerializer : Codecs.IFieldCodec
    {
        protected internal AbstractTypeSerializer(System.Type fieldType) { }

        public object ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, object value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public partial class AbstractTypeSerializer<TField> : AbstractTypeSerializer, Codecs.IFieldCodec<TField>, Codecs.IFieldCodec, IBaseCodec<TField>, IBaseCodec where TField : class
    {
        protected AbstractTypeSerializer() : base(default!) { }

        public virtual void Deserialize<TReaderInput>(ref Buffers.Reader<TReaderInput> reader, TField instance) { }

        public TField ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public virtual void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, TField instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public sealed partial class CodecProvider : ICodecProvider, IFieldCodecProvider, IBaseCodecProvider, IValueSerializerProvider, IActivatorProvider, Cloning.IDeepCopierProvider
    {
        public CodecProvider(System.IServiceProvider serviceProvider, Microsoft.Extensions.Options.IOptions<Configuration.TypeManifestOptions> codecConfiguration) { }

        public System.IServiceProvider Services { get { throw null; } }

        public Activators.IActivator<T> GetActivator<T>() { throw null; }

        public IBaseCodec<TField> GetBaseCodec<TField>()
            where TField : class { throw null; }

        public Cloning.IBaseCopier<TField> GetBaseCopier<TField>()
            where TField : class { throw null; }

        public Codecs.IFieldCodec GetCodec(System.Type fieldType) { throw null; }

        public Codecs.IFieldCodec<TField> GetCodec<TField>() { throw null; }

        public Cloning.IDeepCopier GetDeepCopier(System.Type fieldType) { throw null; }

        public Cloning.IDeepCopier<T> GetDeepCopier<T>() { throw null; }

        public IValueSerializer<TField> GetValueSerializer<TField>()
            where TField : struct { throw null; }

        public Codecs.IFieldCodec TryGetCodec(System.Type fieldType) { throw null; }

        public Codecs.IFieldCodec<TField> TryGetCodec<TField>() { throw null; }

        public Cloning.IDeepCopier TryGetDeepCopier(System.Type fieldType) { throw null; }

        public Cloning.IDeepCopier<T> TryGetDeepCopier<T>() { throw null; }
    }

    public sealed partial class ConcreteTypeSerializer<TField, TBaseCodec> : Codecs.IFieldCodec<TField>, Codecs.IFieldCodec where TField : class where TBaseCodec : IBaseCodec<TField>
    {
        public ConcreteTypeSerializer(Activators.IActivator<TField> activator, TBaseCodec serializer) { }

        public TField ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public TField ReadValueSealed<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public sealed partial class DelegateCodecSelector : ICodecSelector
    {
        public string CodecName { get { throw null; } init { } }

        public System.Func<System.Type, bool> IsSupportedTypeDelegate { get { throw null; } init { } }

        public bool IsSupportedType(System.Type type) { throw null; }
    }

    public sealed partial class DelegateCopierSelector : ICopierSelector
    {
        public string CopierName { get { throw null; } init { } }

        public System.Func<System.Type, bool> IsSupportedTypeDelegate { get { throw null; } init { } }

        public bool IsSupportedType(System.Type type) { throw null; }
    }

    public partial interface IActivatorProvider
    {
        Activators.IActivator<T> GetActivator<T>();
    }

    public partial interface IBaseCodec
    {
    }

    public partial interface IBaseCodecProvider
    {
        IBaseCodec<TField> GetBaseCodec<TField>()
            where TField : class;
    }

    public partial interface IBaseCodec<in T> : IBaseCodec where T : class
    {
        void Deserialize<TInput>(ref Buffers.Reader<TInput> reader, T value);
        void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, T value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte>;
    }

    public partial interface ICodecProvider : IFieldCodecProvider, IBaseCodecProvider, IValueSerializerProvider, IActivatorProvider, Cloning.IDeepCopierProvider
    {
        System.IServiceProvider Services { get; }
    }

    public partial interface ICodecSelector
    {
        string CodecName { get; }

        bool IsSupportedType(System.Type type);
    }

    public partial interface ICopierSelector
    {
        string CopierName { get; }

        bool IsSupportedType(System.Type type);
    }

    public partial interface IFieldCodecProvider
    {
        Codecs.IFieldCodec GetCodec(System.Type fieldType);
        Codecs.IFieldCodec<TField> GetCodec<TField>();
        Codecs.IFieldCodec TryGetCodec(System.Type fieldType);
        Codecs.IFieldCodec<TField> TryGetCodec<TField>();
    }

    public partial interface IGeneralizedBaseCodec : IBaseCodec<object>, IBaseCodec
    {
        bool IsSupportedType(System.Type type);
    }

    public partial interface IGeneralizedCodec : Codecs.IFieldCodec
    {
        bool IsSupportedType(System.Type type);
    }

    public partial interface ISpecializableBaseCodec
    {
        IBaseCodec GetSpecializedCodec(System.Type type);
        bool IsSupportedType(System.Type type);
    }

    public partial interface ISpecializableCodec
    {
        Codecs.IFieldCodec GetSpecializedCodec(System.Type type);
        bool IsSupportedType(System.Type type);
    }

    public partial interface IValueSerializer
    {
    }

    public partial interface IValueSerializerProvider
    {
        IValueSerializer<TField> GetValueSerializer<TField>()
            where TField : struct;
    }

    public partial interface IValueSerializer<T> : IValueSerializer where T : struct
    {
        void Deserialize<TInput>(ref Buffers.Reader<TInput> reader, scoped ref T value);
        void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, scoped ref T value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte>;
    }

    public sealed partial class SurrogateCodec<TField, TSurrogate, TConverter> : Codecs.IFieldCodec<TField>, Codecs.IFieldCodec, Cloning.IDeepCopier<TField>, Cloning.IDeepCopier, IBaseCodec<TField>, IBaseCodec, Cloning.IBaseCopier<TField>, Cloning.IBaseCopier where TField : class where TSurrogate : struct where TConverter : IConverter<TField, TSurrogate>
    {
        public SurrogateCodec(IValueSerializer<TSurrogate> surrogateSerializer, Cloning.IDeepCopier<TSurrogate> surrogateCopier, TConverter converter) { }

        public void DeepCopy(TField input, TField output, Cloning.CopyContext context) { }

        public TField DeepCopy(TField input, Cloning.CopyContext context) { throw null; }

        public void Deserialize<TInput>(ref Buffers.Reader<TInput> reader, TField value) { }

        public TField ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public sealed partial class ValueSerializer<TField, TValueSerializer> : Codecs.IFieldCodec<TField>, Codecs.IFieldCodec where TField : struct where TValueSerializer : IValueSerializer<TField>
    {
        public ValueSerializer(TValueSerializer serializer) { }

        public TField ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public sealed partial class ValueTypeSurrogateCodec<TField, TSurrogate, TConverter> : Codecs.IFieldCodec<TField>, Codecs.IFieldCodec, Cloning.IDeepCopier<TField>, Cloning.IDeepCopier, IValueSerializer<TField>, IValueSerializer where TField : struct where TSurrogate : struct where TConverter : IConverter<TField, TSurrogate>
    {
        public ValueTypeSurrogateCodec(IValueSerializer<TSurrogate> surrogateSerializer, Cloning.IDeepCopier<TSurrogate> surrogateCopier, TConverter converter) { }

        public TField DeepCopy(TField input, Cloning.CopyContext context) { throw null; }

        public void Deserialize<TInput>(ref Buffers.Reader<TInput> reader, scoped ref TField value) { }

        public TField ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, scoped ref TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, TField value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace Orleans.Serialization.Session
{
    public sealed partial class ReferencedObjectCollection
    {
        public uint CurrentReferenceId { get { throw null; } set { } }

        public System.Collections.Generic.Dictionary<object, uint> CopyIdTable() { throw null; }

        public System.Collections.Generic.Dictionary<uint, object> CopyReferenceTable() { throw null; }

        public bool GetOrAddReference(object value, out uint reference) { throw null; }

        public int GetReferenceIndex(object value) { throw null; }

        public void MarkValueField() { }

        public void RecordReferenceField(object value, uint referenceId) { }

        public void RecordReferenceField(object value) { }

        public void Reset() { }

        public object TryGetReferencedObject(uint reference) { throw null; }
    }

    public sealed partial class ReferencedTypeCollection
    {
        public uint GetOrAddTypeReference(System.Type type) { throw null; }

        public System.Type GetReferencedType(uint reference) { throw null; }

        public void RecordReferencedType(System.Type type) { }

        public void Reset() { }

        public bool TryGetReferencedType(uint reference, out System.Type type) { throw null; }

        public bool TryGetTypeReference(System.Type type, out uint reference) { throw null; }
    }

    public sealed partial class SerializerSession : System.IDisposable
    {
        public SerializerSession(TypeSystem.TypeCodec typeCodec, WellKnownTypeCollection wellKnownTypes, Serializers.CodecProvider codecProvider) { }

        public Serializers.CodecProvider CodecProvider { get { throw null; } }

        public ReferencedObjectCollection ReferencedObjects { get { throw null; } }

        public ReferencedTypeCollection ReferencedTypes { get { throw null; } }

        public TypeSystem.TypeCodec TypeCodec { get { throw null; } }

        public WellKnownTypeCollection WellKnownTypes { get { throw null; } }

        public void Dispose() { }

        public void PartialReset() { }

        public void Reset() { }
    }

    public sealed partial class SerializerSessionPool
    {
        public SerializerSessionPool(TypeSystem.TypeCodec typeCodec, WellKnownTypeCollection wellKnownTypes, Serializers.CodecProvider codecProvider) { }

        public Serializers.CodecProvider CodecProvider { get { throw null; } }

        public SerializerSession GetSession() { throw null; }
    }

    public sealed partial class WellKnownTypeCollection
    {
        public WellKnownTypeCollection(Microsoft.Extensions.Options.IOptions<Configuration.TypeManifestOptions> config) { }

        public System.Type GetWellKnownType(uint typeId) { throw null; }

        public bool TryGetWellKnownType(uint typeId, out System.Type type) { throw null; }

        public bool TryGetWellKnownTypeId(System.Type type, out uint typeId) { throw null; }
    }
}

namespace Orleans.Serialization.TypeSystem
{
    public partial class ArrayTypeSpec : TypeSpec
    {
        public ArrayTypeSpec(TypeSpec elementType, int dimensions) { }

        public int Dimensions { get { throw null; } }

        public TypeSpec ElementType { get { throw null; } }

        public override string Format() { throw null; }

        public override string ToString() { throw null; }
    }

    public partial class AssemblyQualifiedTypeSpec : TypeSpec
    {
        public AssemblyQualifiedTypeSpec(TypeSpec type, string? assembly) { }

        public string? Assembly { get { throw null; } }

        public TypeSpec Type { get { throw null; } }

        public override string Format() { throw null; }

        public override string ToString() { throw null; }
    }

    public sealed partial class CachedTypeResolver : TypeResolver
    {
        public static string GetName(System.Reflection.Assembly assembly) { throw null; }

        public override System.Type ResolveType(string name) { throw null; }

        public override bool TryResolveType(string name, out System.Type type) { throw null; }
    }

    public partial class CompoundTypeAliasTree
    {
        internal CompoundTypeAliasTree() { }

        public object? Key { get { throw null; } }

        public System.Type? Value { get { throw null; } }

        public CompoundTypeAliasTree Add(string key, System.Type value) { throw null; }

        public CompoundTypeAliasTree Add(string key) { throw null; }

        public CompoundTypeAliasTree Add(System.Type key, System.Type value) { throw null; }

        public CompoundTypeAliasTree Add(System.Type key) { throw null; }

        public static CompoundTypeAliasTree Create() { throw null; }
    }

    public partial class ConstructedGenericTypeSpec : TypeSpec
    {
        public ConstructedGenericTypeSpec(TypeSpec unconstructedType, int arity, TypeSpec[] arguments) { }

        public TypeSpec[] Arguments { get { throw null; } }

        public TypeSpec UnconstructedType { get { throw null; } }

        public override string Format() { throw null; }

        public override string ToString() { throw null; }
    }

    public sealed partial class DefaultTypeFilter : ITypeNameFilter
    {
        public bool? IsTypeNameAllowed(string typeName, string assemblyName) { throw null; }
    }

    public partial class LiteralTypeSpec : TypeSpec
    {
        public LiteralTypeSpec(string value) { }

        public string Value { get { throw null; } }

        public override string Format() { throw null; }

        public override string ToString() { throw null; }
    }

    public partial class NamedTypeSpec : TypeSpec
    {
        public NamedTypeSpec(NamedTypeSpec containingType, string name, int arity) { }

        public int Arity { get { throw null; } }

        public NamedTypeSpec? ContainingType { get { throw null; } }

        public string Name { get { throw null; } }

        public override string Format() { throw null; }

        public string GetNamespaceQualifiedName() { throw null; }

        public override string ToString() { throw null; }
    }

    public partial class PointerTypeSpec : TypeSpec
    {
        public PointerTypeSpec(TypeSpec elementType) { }

        public TypeSpec ElementType { get { throw null; } }

        public override string Format() { throw null; }

        public override string ToString() { throw null; }
    }

    public readonly partial struct QualifiedType
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public QualifiedType(string? assembly, string type) { }

        public string? Assembly { get { throw null; } }

        public static QualifiedTypeEqualityComparer EqualityComparer { get { throw null; } }

        public string Type { get { throw null; } }

        public readonly void Deconstruct(out string? assembly, out string type) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public static bool operator ==(QualifiedType left, QualifiedType right) { throw null; }

        public static implicit operator QualifiedType((string Assembly, string Type) args) { throw null; }

        public static bool operator !=(QualifiedType left, QualifiedType right) { throw null; }

        public sealed partial class QualifiedTypeEqualityComparer : System.Collections.Generic.IEqualityComparer<QualifiedType>
        {
            public bool Equals(QualifiedType x, QualifiedType y) { throw null; }

            public int GetHashCode(QualifiedType obj) { throw null; }
        }
    }

    public partial class ReferenceTypeSpec : TypeSpec
    {
        public ReferenceTypeSpec(TypeSpec elementType) { }

        public TypeSpec ElementType { get { throw null; } }

        public override string Format() { throw null; }

        public override string ToString() { throw null; }
    }

    public static partial class RuntimeTypeNameFormatter
    {
        public static string Format(System.Type type) { throw null; }
    }

    public static partial class RuntimeTypeNameParser
    {
        public static TypeSpec Parse(System.ReadOnlySpan<char> input) { throw null; }

        public static TypeSpec Parse(string input) { throw null; }
    }

    public partial class TupleTypeSpec : TypeSpec
    {
        public TupleTypeSpec(TypeSpec[] elements, int arity) { }

        public int Arity { get { throw null; } }

        public TypeSpec[] Elements { get { throw null; } }

        public override string Format() { throw null; }

        public override string ToString() { throw null; }
    }

    public sealed partial class TypeCodec
    {
        public TypeCodec(TypeConverter typeConverter) { }

        public System.Type ReadLengthPrefixed<TInput>(ref Buffers.Reader<TInput> reader) { throw null; }

        public System.Type TryRead<TInput>(ref Buffers.Reader<TInput> reader) { throw null; }

        public bool TryReadForAnalysis<TInput>(ref Buffers.Reader<TInput> reader, out System.Type type, out string typeString) { throw null; }

        public void WriteEncodedType<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Type type)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteLengthPrefixed<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, System.Type type)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    public partial class TypeConverter
    {
        public TypeConverter(System.Collections.Generic.IEnumerable<ITypeConverter> formatters, System.Collections.Generic.IEnumerable<ITypeNameFilter> typeNameFilters, System.Collections.Generic.IEnumerable<ITypeFilter> typeFilters, Microsoft.Extensions.Options.IOptions<Configuration.TypeManifestOptions> options, TypeResolver typeResolver) { }

        public string Format(System.Type type, bool allowAllTypes = false) { throw null; }

        public string Format(System.Type type, System.Func<TypeSpec, TypeSpec> rewriter, bool allowAllTypes = false) { throw null; }

        public System.Type Parse(string formatted) { throw null; }

        public bool TryParse(string formatted, out System.Type result) { throw null; }
    }

    public abstract partial class TypeResolver
    {
        public abstract System.Type ResolveType(string name);
        public abstract bool TryResolveType(string name, out System.Type type);
    }

    public abstract partial class TypeSpec
    {
        public abstract string Format();
    }
}

namespace Orleans.Serialization.Utilities
{
    public static partial class BitStreamFormatter
    {
        public static string Format(Buffers.PooledBuffer.BufferSlice slice, Session.SerializerSession session) { throw null; }

        public static string Format(System.Buffers.ReadOnlySequence<byte> input, Session.SerializerSession session) { throw null; }

        public static string Format(byte[] array, Session.SerializerSession session) { throw null; }

        public static string Format(System.IO.Stream input, Session.SerializerSession session) { throw null; }

        public static string Format(System.ReadOnlyMemory<byte> input, Session.SerializerSession session) { throw null; }

        public static string Format(System.ReadOnlySpan<byte> input, Session.SerializerSession session) { throw null; }

        public static void Format<TInput>(ref Buffers.Reader<TInput> reader, System.Text.StringBuilder result) { }

        public static string Format<TInput>(ref Buffers.Reader<TInput> reader) { throw null; }
    }

    public static partial class FieldAccessor
    {
        public static System.Delegate GetGetter(System.Type declaringType, string fieldName) { throw null; }

        public static System.Delegate GetReferenceSetter(System.Type declaringType, string fieldName) { throw null; }

        public static System.Delegate GetValueGetter(System.Type declaringType, string fieldName) { throw null; }

        public static System.Delegate GetValueSetter(System.Type declaringType, string fieldName) { throw null; }
    }

    public delegate TField ValueTypeGetter<TDeclaring, out TField>(ref TDeclaring instance)
        where TDeclaring : struct;
    public delegate void ValueTypeSetter<TDeclaring, in TField>(ref TDeclaring instance, TField value)
        where TDeclaring : struct;
}

namespace Orleans.Serialization.Utilities.Internal
{
    public static partial class InternalServiceCollectionExtensions
    {
        public static void AddFromExisting(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Type service, System.Type implementation) { }

        public static void AddFromExisting<TService, TImplementation>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where TImplementation : TService { }
    }
}

namespace Orleans.Serialization.WireProtocol
{
    public enum ExtendedWireType : uint
    {
        EndTagDelimited = 0U,
        EndBaseFields = 8U
    }

    public partial struct Field
    {
        public uint FieldIdDeltaRaw;
        public System.Type FieldTypeRaw;
        public Tag Tag;
        public Field(Tag tag, uint extendedFieldIdDelta, System.Type type) { }

        public Field(Tag tag) { }

        public ExtendedWireType ExtendedWireType { get { throw null; } set { } }

        public uint FieldIdDelta { get { throw null; } set { } }

        public System.Type FieldType { get { throw null; } set { } }

        public bool HasExtendedFieldId { get { throw null; } }

        public bool HasExtendedSchemaType { get { throw null; } }

        public bool HasFieldId { get { throw null; } }

        public bool IsEndBaseFields { get { throw null; } }

        public bool IsEndBaseOrEndObject { get { throw null; } }

        public bool IsEndObject { get { throw null; } }

        public bool IsReference { get { throw null; } }

        public bool IsSchemaTypeValid { get { throw null; } }

        public SchemaType SchemaType { get { throw null; } set { } }

        public WireType WireType { get { throw null; } set { } }

        public void EnsureWireType(WireType expectedType) { }

        public void EnsureWireTypeTagDelimited() { }

        public override string ToString() { throw null; }
    }

    public enum SchemaType : uint
    {
        Expected = 0U,
        WellKnown = 8U,
        Encoded = 16U,
        Referenced = 24U
    }

    public partial struct Tag
    {
        private int _dummyPrimitive;
        public const byte ExtendedWireTypeMask = 24;
        public const byte FieldIdCompleteMask = 7;
        public const byte FieldIdMask = 7;
        public const int MaxEmbeddedFieldIdDelta = 6;
        public const byte SchemaTypeMask = 24;
        public const byte WireTypeMask = 224;
        public Tag(byte tag) { }

        public ExtendedWireType ExtendedWireType { get { throw null; } set { } }

        public uint FieldIdDelta { get { throw null; } set { } }

        public bool HasExtendedFieldId { get { throw null; } }

        public bool HasExtendedWireType { get { throw null; } }

        public bool IsFieldIdValid { get { throw null; } }

        public bool IsSchemaTypeValid { get { throw null; } }

        public SchemaType SchemaType { get { throw null; } set { } }

        public WireType WireType { get { throw null; } set { } }

        public static implicit operator byte(Tag tag) { throw null; }

        public static implicit operator Tag(byte tag) { throw null; }

        public void SetFieldIdInvalid() { }
    }

    public enum WireType : uint
    {
        VarInt = 0U,
        TagDelimited = 32U,
        LengthPrefixed = 64U,
        Fixed32 = 96U,
        Fixed64 = 128U,
        Reference = 192U,
        Extended = 224U
    }
}

namespace OrleansCodeGen.Orleans.Serialization
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_CodecNotFoundException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.CodecNotFoundException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_CodecNotFoundException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.CodecNotFoundException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.CodecNotFoundException instance) { }

        public global::Orleans.Serialization.CodecNotFoundException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.CodecNotFoundException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.CodecNotFoundException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ExtendedWireTypeInvalidException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.ExtendedWireTypeInvalidException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ExtendedWireTypeInvalidException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.ExtendedWireTypeInvalidException instance) { }

        public global::Orleans.Serialization.ExtendedWireTypeInvalidException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.ExtendedWireTypeInvalidException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.ExtendedWireTypeInvalidException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_FieldIdNotPresentException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.FieldIdNotPresentException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_FieldIdNotPresentException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.FieldIdNotPresentException instance) { }

        public global::Orleans.Serialization.FieldIdNotPresentException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.FieldIdNotPresentException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.FieldIdNotPresentException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_FieldTypeInvalidException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.FieldTypeInvalidException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_FieldTypeInvalidException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.FieldTypeInvalidException instance) { }

        public global::Orleans.Serialization.FieldTypeInvalidException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.FieldTypeInvalidException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.FieldTypeInvalidException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_FieldTypeMissingException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.FieldTypeMissingException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_FieldTypeMissingException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.FieldTypeMissingException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.FieldTypeMissingException instance) { }

        public global::Orleans.Serialization.FieldTypeMissingException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.FieldTypeMissingException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.FieldTypeMissingException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_IllegalTypeException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.IllegalTypeException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_IllegalTypeException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.IllegalTypeException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.IllegalTypeException instance) { }

        public global::Orleans.Serialization.IllegalTypeException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.IllegalTypeException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.IllegalTypeException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ReferenceFieldNotSupportedException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.ReferenceFieldNotSupportedException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ReferenceFieldNotSupportedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.ReferenceFieldNotSupportedException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.ReferenceFieldNotSupportedException instance) { }

        public global::Orleans.Serialization.ReferenceFieldNotSupportedException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.ReferenceFieldNotSupportedException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.ReferenceFieldNotSupportedException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ReferenceNotFoundException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.ReferenceNotFoundException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ReferenceNotFoundException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.ReferenceNotFoundException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.ReferenceNotFoundException instance) { }

        public global::Orleans.Serialization.ReferenceNotFoundException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.ReferenceNotFoundException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.ReferenceNotFoundException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_RequiredFieldMissingException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.RequiredFieldMissingException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_RequiredFieldMissingException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.RequiredFieldMissingException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.RequiredFieldMissingException instance) { }

        public global::Orleans.Serialization.RequiredFieldMissingException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.RequiredFieldMissingException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.RequiredFieldMissingException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SchemaTypeInvalidException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.SchemaTypeInvalidException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_SchemaTypeInvalidException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.SchemaTypeInvalidException instance) { }

        public global::Orleans.Serialization.SchemaTypeInvalidException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.SchemaTypeInvalidException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.SchemaTypeInvalidException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SerializerException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.SerializerException>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Serialization.SerializerException>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_SerializerException(global::Orleans.Serialization.Serializers.IBaseCodec<System.Exception> _baseTypeSerializer) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.SerializerException instance) { }

        public global::Orleans.Serialization.SerializerException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.SerializerException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.SerializerException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_TypeMissingException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.TypeMissingException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_TypeMissingException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.TypeMissingException instance) { }

        public global::Orleans.Serialization.TypeMissingException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.TypeMissingException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.TypeMissingException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_UnexpectedLengthPrefixValueException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.UnexpectedLengthPrefixValueException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_UnexpectedLengthPrefixValueException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.UnexpectedLengthPrefixValueException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.UnexpectedLengthPrefixValueException instance) { }

        public global::Orleans.Serialization.UnexpectedLengthPrefixValueException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.UnexpectedLengthPrefixValueException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.UnexpectedLengthPrefixValueException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_UnknownReferencedTypeException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.UnknownReferencedTypeException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_UnknownReferencedTypeException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.UnknownReferencedTypeException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.UnknownReferencedTypeException instance) { }

        public global::Orleans.Serialization.UnknownReferencedTypeException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.UnknownReferencedTypeException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.UnknownReferencedTypeException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_UnknownWellKnownTypeException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.UnknownWellKnownTypeException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_UnknownWellKnownTypeException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider, global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.UnknownWellKnownTypeException> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.UnknownWellKnownTypeException instance) { }

        public global::Orleans.Serialization.UnknownWellKnownTypeException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.UnknownWellKnownTypeException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.UnknownWellKnownTypeException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_UnsupportedWireTypeException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.UnsupportedWireTypeException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_UnsupportedWireTypeException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.UnsupportedWireTypeException instance) { }

        public global::Orleans.Serialization.UnsupportedWireTypeException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.UnsupportedWireTypeException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.UnsupportedWireTypeException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_CodecNotFoundException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.CodecNotFoundException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_CodecNotFoundException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ExtendedWireTypeInvalidException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.ExtendedWireTypeInvalidException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_ExtendedWireTypeInvalidException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_FieldIdNotPresentException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.FieldIdNotPresentException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_FieldIdNotPresentException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_FieldTypeInvalidException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.FieldTypeInvalidException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_FieldTypeInvalidException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_FieldTypeMissingException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.FieldTypeMissingException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_FieldTypeMissingException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_IllegalTypeException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.IllegalTypeException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_IllegalTypeException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }

        public override void DeepCopy(global::Orleans.Serialization.IllegalTypeException input, global::Orleans.Serialization.IllegalTypeException output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ReferenceFieldNotSupportedException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.ReferenceFieldNotSupportedException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_ReferenceFieldNotSupportedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }

        public override void DeepCopy(global::Orleans.Serialization.ReferenceFieldNotSupportedException input, global::Orleans.Serialization.ReferenceFieldNotSupportedException output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ReferenceNotFoundException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.ReferenceNotFoundException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_ReferenceNotFoundException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }

        public override void DeepCopy(global::Orleans.Serialization.ReferenceNotFoundException input, global::Orleans.Serialization.ReferenceNotFoundException output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_RequiredFieldMissingException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.RequiredFieldMissingException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_RequiredFieldMissingException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_SchemaTypeInvalidException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.SchemaTypeInvalidException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_SchemaTypeInvalidException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_SerializerException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.SerializerException, System.Exception>
    {
        public Copier_SerializerException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_TypeMissingException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.TypeMissingException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_TypeMissingException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_UnexpectedLengthPrefixValueException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.UnexpectedLengthPrefixValueException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_UnexpectedLengthPrefixValueException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_UnknownReferencedTypeException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.UnknownReferencedTypeException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_UnknownReferencedTypeException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }

        public override void DeepCopy(global::Orleans.Serialization.UnknownReferencedTypeException input, global::Orleans.Serialization.UnknownReferencedTypeException output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_UnknownWellKnownTypeException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.UnknownWellKnownTypeException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_UnknownWellKnownTypeException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }

        public override void DeepCopy(global::Orleans.Serialization.UnknownWellKnownTypeException input, global::Orleans.Serialization.UnknownWellKnownTypeException output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_UnsupportedWireTypeException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Serialization.UnsupportedWireTypeException, global::Orleans.Serialization.SerializerException>
    {
        public Copier_UnsupportedWireTypeException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }
}

namespace OrleansCodeGen.Orleans.Serialization.Codecs
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ArrayListSurrogate : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ArrayListSurrogate>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ArrayListSurrogate>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ArrayListSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ArrayListSurrogate instance) { }

        public global::Orleans.Serialization.Codecs.ArrayListSurrogate ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ArrayListSurrogate instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ArrayListSurrogate value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ConcurrentDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ConcurrentDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue> instance) { }

        public global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ConcurrentQueueSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ConcurrentQueueSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_CultureInfoSurrogate : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.CultureInfoSurrogate>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.CultureInfoSurrogate>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.CultureInfoSurrogate instance) { }

        public global::Orleans.Serialization.Codecs.CultureInfoSurrogate ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.CultureInfoSurrogate instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.CultureInfoSurrogate value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ImmutableArraySurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ImmutableArraySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ImmutableDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ImmutableDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue> instance) { }

        public global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ImmutableHashSetSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ImmutableHashSetSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ImmutableListSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ImmutableListSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ImmutableQueueSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ImmutableQueueSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ImmutableSortedDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ImmutableSortedDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue> instance) { }

        public global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ImmutableSortedSetSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ImmutableSortedSetSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ImmutableStackSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ImmutableStackSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_NameValueCollectionSurrogate : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_NameValueCollectionSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate instance) { }

        public global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ReadOnlyCollectionSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ReadOnlyCollectionSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ReadOnlyDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_ReadOnlyDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue> instance) { }

        public global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SortedDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_SortedDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue> instance) { }

        public global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SortedListSurrogate<TKey, TValue> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_SortedListSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue> instance) { }

        public global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SortedSetSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.SortedSetSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.SortedSetSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_SortedSetSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.SortedSetSurrogate<T> instance) { }

        public global::Orleans.Serialization.Codecs.SortedSetSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.SortedSetSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.SortedSetSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_VersionSurrogate : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Codecs.VersionSurrogate>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.Codecs.VersionSurrogate>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.Codecs.VersionSurrogate instance) { }

        public global::Orleans.Serialization.Codecs.VersionSurrogate ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.Codecs.VersionSurrogate instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Codecs.VersionSurrogate value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ArrayListSurrogate : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ArrayListSurrogate>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ArrayListSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ArrayListSurrogate DeepCopy(global::Orleans.Serialization.Codecs.ArrayListSurrogate result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ConcurrentDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ConcurrentDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue> DeepCopy(global::Orleans.Serialization.Codecs.ConcurrentDictionarySurrogate<TKey, TValue> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ConcurrentQueueSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ConcurrentQueueSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.ConcurrentQueueSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ImmutableArraySurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ImmutableArraySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.ImmutableArraySurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ImmutableDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ImmutableDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue> DeepCopy(global::Orleans.Serialization.Codecs.ImmutableDictionarySurrogate<TKey, TValue> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ImmutableHashSetSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ImmutableHashSetSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.ImmutableHashSetSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ImmutableListSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ImmutableListSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.ImmutableListSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ImmutableQueueSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ImmutableQueueSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.ImmutableQueueSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ImmutableSortedDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ImmutableSortedDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue> DeepCopy(global::Orleans.Serialization.Codecs.ImmutableSortedDictionarySurrogate<TKey, TValue> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ImmutableSortedSetSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ImmutableSortedSetSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.ImmutableSortedSetSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ImmutableStackSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ImmutableStackSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.ImmutableStackSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_NameValueCollectionSurrogate : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_NameValueCollectionSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate DeepCopy(global::Orleans.Serialization.Codecs.NameValueCollectionSurrogate result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ReadOnlyCollectionSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ReadOnlyCollectionSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.ReadOnlyCollectionSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ReadOnlyDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_ReadOnlyDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue> DeepCopy(global::Orleans.Serialization.Codecs.ReadOnlyDictionarySurrogate<TKey, TValue> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_SortedDictionarySurrogate<TKey, TValue> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_SortedDictionarySurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue> DeepCopy(global::Orleans.Serialization.Codecs.SortedDictionarySurrogate<TKey, TValue> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_SortedListSurrogate<TKey, TValue> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_SortedListSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue> DeepCopy(global::Orleans.Serialization.Codecs.SortedListSurrogate<TKey, TValue> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_SortedSetSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.Codecs.SortedSetSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_SortedSetSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.Codecs.SortedSetSurrogate<T> DeepCopy(global::Orleans.Serialization.Codecs.SortedSetSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.Serialization.Invocation
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_CompletedResponse : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Invocation.CompletedResponse>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_CompletedResponse(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Serialization.Invocation.CompletedResponse> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.Invocation.CompletedResponse instance) { }

        public global::Orleans.Serialization.Invocation.CompletedResponse ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.Invocation.CompletedResponse instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Invocation.CompletedResponse value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ExceptionResponse : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.Invocation.ExceptionResponse>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ExceptionResponse(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.Invocation.ExceptionResponse instance) { }

        public global::Orleans.Serialization.Invocation.ExceptionResponse ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Serialization.Invocation.ExceptionResponse instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.Invocation.ExceptionResponse value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}
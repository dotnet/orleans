//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Hosting
{
    public static partial class FaultInjectionStorageServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFaultInjectionMemoryStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.MemoryGrainStorageOptions>> configureOptions = null, System.Action<Microsoft.Extensions.Options.OptionsBuilder<TestingHost.FaultInjectionGrainStorageOptions>> configureFaultInjectionOptions = null) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddFaultInjectionMemoryStorage(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Configuration.MemoryGrainStorageOptions> configureOptions, System.Action<TestingHost.FaultInjectionGrainStorageOptions> configureFaultInjectionOptions) { throw null; }
    }
}

namespace Orleans.TestingHost
{
    public enum ConnectionTransportType
    {
        TcpSocket = 0,
        InMemory = 1,
        UnixSocket = 2
    }

    public partial class FaultInjectionGrainStorage : Storage.IGrainStorage, ILifecycleParticipant<Runtime.ISiloLifecycle>
    {
        public FaultInjectionGrainStorage(Storage.IGrainStorage realStorageProvider, string name, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, IGrainFactory grainFactory, FaultInjectionGrainStorageOptions faultInjectionOptions) { }

        public System.Threading.Tasks.Task ClearStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public void Participate(Runtime.ISiloLifecycle lifecycle) { }

        public System.Threading.Tasks.Task ReadStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }

        public System.Threading.Tasks.Task WriteStateAsync<T>(string grainType, Runtime.GrainId grainId, IGrainState<T> grainState) { throw null; }
    }

    public static partial class FaultInjectionGrainStorageFactory
    {
        public static Storage.IGrainStorage Create(System.IServiceProvider services, string name, System.Func<System.IServiceProvider, string, Storage.IGrainStorage> injectedGrainStorageFactory) { throw null; }
    }

    public partial class FaultInjectionGrainStorageOptions
    {
        public static System.TimeSpan DEFAULT_LATENCY;
        public System.TimeSpan Latency { get { throw null; } set { } }
    }

    public partial interface IClientBuilderConfigurator
    {
        void Configure(Microsoft.Extensions.Configuration.IConfiguration configuration, Hosting.IClientBuilder clientBuilder);
    }

    public partial interface IHostConfigurator
    {
        void Configure(Microsoft.Extensions.Hosting.IHostBuilder hostBuilder);
    }

    public partial class InProcessSiloHandle : SiloHandle
    {
        public override bool IsActive { get { throw null; } }

        public System.IServiceProvider ServiceProvider { get { throw null; } }

        public Microsoft.Extensions.Hosting.IHost SiloHost { get { throw null; } init { } }

        public static System.Threading.Tasks.Task<InProcessSiloHandle> CreateAsync(string siloName, Microsoft.Extensions.Configuration.IConfiguration configuration, System.Action<Microsoft.Extensions.Hosting.IHostBuilder> postConfigureHostBuilder = null) { throw null; }

        protected override void Dispose(bool disposing) { }

        public override System.Threading.Tasks.ValueTask DisposeAsync() { throw null; }

        public override System.Threading.Tasks.Task StopSiloAsync(bool stopGracefully) { throw null; }

        public override System.Threading.Tasks.Task StopSiloAsync(System.Threading.CancellationToken ct) { throw null; }
    }

    public sealed partial class InProcessTestCluster : System.IDisposable, System.IAsyncDisposable
    {
        public InProcessTestCluster(InProcessTestClusterOptions options, ITestClusterPortAllocator portAllocator) { }

        public IClusterClient Client { get { throw null; } }

        public InProcessTestClusterOptions Options { get { throw null; } }

        public ITestClusterPortAllocator PortAllocator { get { throw null; } }

        public System.Collections.ObjectModel.ReadOnlyCollection<InProcessSiloHandle> Silos { get { throw null; } }

        public System.Threading.Tasks.Task<InProcessSiloHandle> CreateSiloAsync(InProcessTestSiloSpecificOptions siloOptions) { throw null; }

        public System.Threading.Tasks.Task DeployAsync() { throw null; }

        public void Dispose() { }

        public System.Threading.Tasks.ValueTask DisposeAsync() { throw null; }

        public System.Collections.Generic.IEnumerable<InProcessSiloHandle> GetActiveSilos() { throw null; }

        public static System.TimeSpan GetLivenessStabilizationTime(Configuration.ClusterMembershipOptions clusterMembershipOptions, bool didKill = false) { throw null; }

        public string GetLog() { throw null; }

        public InProcessSiloHandle GetSiloForAddress(Runtime.SiloAddress siloAddress) { throw null; }

        public System.IServiceProvider GetSiloServiceProvider(Runtime.SiloAddress silo = null) { throw null; }

        public System.Threading.Tasks.Task InitializeClientAsync() { throw null; }

        public System.Threading.Tasks.Task KillClientAsync() { throw null; }

        public System.Threading.Tasks.Task KillSiloAsync(InProcessSiloHandle instance) { throw null; }

        public System.Threading.Tasks.Task<InProcessSiloHandle> RestartSiloAsync(InProcessSiloHandle instance) { throw null; }

        public System.Threading.Tasks.Task<InProcessSiloHandle> RestartStoppedSecondarySiloAsync(string siloName) { throw null; }

        public InProcessSiloHandle StartAdditionalSilo() { throw null; }

        [System.Obsolete("Use overload which does not have a 'startAdditionalSiloOnNewPort' parameter.")]
        public InProcessSiloHandle StartAdditionalSilo(bool startAdditionalSiloOnNewPort) { throw null; }

        public System.Threading.Tasks.Task<InProcessSiloHandle> StartAdditionalSiloAsync() { throw null; }

        public System.Threading.Tasks.Task<InProcessSiloHandle> StartAdditionalSiloAsync(bool startAdditionalSiloOnNewPort) { throw null; }

        [System.Obsolete("Use the overload which does not have a 'startSiloOnNewPort' parameter.")]
        public static System.Threading.Tasks.Task<InProcessSiloHandle> StartSiloAsync(InProcessTestCluster cluster, int instanceNumber, InProcessTestClusterOptions clusterOptions, System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Configuration.IConfigurationSource> configurationOverrides, bool startSiloOnNewPort) { throw null; }

        public static System.Threading.Tasks.Task<InProcessSiloHandle> StartSiloAsync(InProcessTestCluster cluster, int instanceNumber, InProcessTestClusterOptions clusterOptions) { throw null; }

        [System.Obsolete("Use the overload which does not have a 'startSiloOnNewPort' parameter.")]
        public System.Threading.Tasks.Task<InProcessSiloHandle> StartSiloAsync(int instanceNumber, InProcessTestClusterOptions clusterOptions, System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Configuration.IConfigurationSource> configurationOverrides, bool startSiloOnNewPort) { throw null; }

        public System.Threading.Tasks.Task<InProcessSiloHandle> StartSiloAsync(int instanceNumber, InProcessTestClusterOptions clusterOptions) { throw null; }

        [System.Obsolete("Use overload which does not have a 'startAdditionalSiloOnNewPort' parameter.")]
        public System.Threading.Tasks.Task<System.Collections.Generic.List<InProcessSiloHandle>> StartSilosAsync(int silosToStart, bool startAdditionalSiloOnNewPort) { throw null; }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<InProcessSiloHandle>> StartSilosAsync(int silosToStart) { throw null; }

        public void StopAllSilos() { }

        public System.Threading.Tasks.Task StopAllSilosAsync() { throw null; }

        public System.Threading.Tasks.Task StopClusterClientAsync() { throw null; }

        public System.Threading.Tasks.Task StopSiloAsync(InProcessSiloHandle instance) { throw null; }

        public System.Threading.Tasks.Task StopSilosAsync() { throw null; }

        public System.Threading.Tasks.Task WaitForLivenessToStabilizeAsync(bool didKill = false) { throw null; }
    }

    public sealed partial class InProcessTestClusterBuilder
    {
        public InProcessTestClusterBuilder() { }

        public InProcessTestClusterBuilder(short initialSilosCount) { }

        public InProcessTestClusterOptions Options { get { throw null; } }

        public ITestClusterPortAllocator PortAllocator { get { throw null; } }

        public InProcessTestCluster Build() { throw null; }

        public InProcessTestClusterBuilder ConfigureClient(System.Action<Hosting.IClientBuilder> configureClientDelegate) { throw null; }

        public InProcessTestClusterBuilder ConfigureClientHost(System.Action<Microsoft.Extensions.Hosting.IHostApplicationBuilder> configureHostDelegate) { throw null; }

        public InProcessTestClusterBuilder ConfigureHost(System.Action<Microsoft.Extensions.Hosting.IHostApplicationBuilder> configureDelegate) { throw null; }

        public InProcessTestClusterBuilder ConfigureSilo(System.Action<InProcessTestSiloSpecificOptions, Hosting.ISiloBuilder> configureSiloDelegate) { throw null; }

        public InProcessTestClusterBuilder ConfigureSiloHost(System.Action<InProcessTestSiloSpecificOptions, Microsoft.Extensions.Hosting.IHostApplicationBuilder> configureSiloHostDelegate) { throw null; }

        public static string CreateClusterId() { throw null; }
    }

    public sealed partial class InProcessTestClusterOptions
    {
        public bool AssumeHomogenousSilosForTesting { get { throw null; } set { } }

        public System.Collections.Generic.List<System.Action<Microsoft.Extensions.Hosting.IHostApplicationBuilder>> ClientHostConfigurationDelegates { get { throw null; } }

        public string ClusterId { get { throw null; } set { } }

        public bool ConfigureFileLogging { get { throw null; } set { } }

        public bool GatewayPerSilo { get { throw null; } set { } }

        public bool InitializeClientOnDeploy { get { throw null; } set { } }

        public short InitialSilosCount { get { throw null; } set { } }

        public string ServiceId { get { throw null; } set { } }

        public System.Collections.Generic.List<System.Action<InProcessTestSiloSpecificOptions, Microsoft.Extensions.Hosting.IHostApplicationBuilder>> SiloHostConfigurationDelegates { get { throw null; } }

        public bool UseRealEnvironmentStatistics { get { throw null; } set { } }
    }

    public sealed partial class InProcessTestSiloSpecificOptions
    {
        public int GatewayPort { get { throw null; } set { } }

        public string SiloName { get { throw null; } set { } }

        public int SiloPort { get { throw null; } set { } }

        public static InProcessTestSiloSpecificOptions Create(InProcessTestCluster testCluster, InProcessTestClusterOptions testClusterOptions, int instanceNumber, bool assignNewPort = false) { throw null; }
    }

    public partial interface ISiloConfigurator
    {
        void Configure(Hosting.ISiloBuilder siloBuilder);
    }

    public partial interface IStorageFaultGrain : IGrainWithStringKey, IGrain, Runtime.IAddressable
    {
        System.Threading.Tasks.Task AddFaultOnClear(Runtime.GrainId grainId, System.Exception exception);
        System.Threading.Tasks.Task AddFaultOnRead(Runtime.GrainId grainId, System.Exception exception);
        System.Threading.Tasks.Task AddFaultOnWrite(Runtime.GrainId grainId, System.Exception exception);
        System.Threading.Tasks.Task OnClear(Runtime.GrainId grainId);
        System.Threading.Tasks.Task OnRead(Runtime.GrainId grainId);
        System.Threading.Tasks.Task OnWrite(Runtime.GrainId grainId);
    }

    public partial interface ITestClusterPortAllocator : System.IDisposable
    {
        (int, int) AllocateConsecutivePortPairs(int numPorts);
    }

    [GenerateSerializer]
    public sealed partial class RandomlyInjectedInconsistentStateException : Storage.InconsistentStateException
    {
    }

    [GenerateSerializer]
    public sealed partial class RandomlyInjectedStorageException : System.Exception
    {
    }

    public static partial class SiloBuilderExtensions
    {
        public static Hosting.ISiloBuilder AddFaultInjectionMemoryStorage(this Hosting.ISiloBuilder builder, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.MemoryGrainStorageOptions>> configureOptions = null, System.Action<Microsoft.Extensions.Options.OptionsBuilder<FaultInjectionGrainStorageOptions>> configureFaultInjectionOptions = null) { throw null; }

        public static Hosting.ISiloBuilder AddFaultInjectionMemoryStorage(this Hosting.ISiloBuilder builder, string name, System.Action<Configuration.MemoryGrainStorageOptions> configureOptions, System.Action<FaultInjectionGrainStorageOptions> configureFaultInjectionOptions) { throw null; }
    }

    public abstract partial class SiloHandle : System.IDisposable, System.IAsyncDisposable
    {
        public TestClusterOptions ClusterOptions { get { throw null; } set { } }

        public Runtime.SiloAddress GatewayAddress { get { throw null; } set { } }

        public short InstanceNumber { get { throw null; } set { } }

        public abstract bool IsActive { get; }

        public string Name { get { throw null; } set { } }

        public Runtime.SiloAddress SiloAddress { get { throw null; } set { } }

        public void Dispose() { }

        protected virtual void Dispose(bool disposing) { }

        public abstract System.Threading.Tasks.ValueTask DisposeAsync();
        ~SiloHandle() {
        }

        public abstract System.Threading.Tasks.Task StopSiloAsync(bool stopGracefully);
        public abstract System.Threading.Tasks.Task StopSiloAsync(System.Threading.CancellationToken ct);
        public override string ToString() { throw null; }
    }

    public partial class StandaloneSiloHandle : SiloHandle
    {
        public const string ExecutablePathConfigKey = "ExecutablePath";
        public StandaloneSiloHandle(string siloName, Microsoft.Extensions.Configuration.IConfiguration configuration, string executablePath) { }

        public override bool IsActive { get { throw null; } }

        public static System.Threading.Tasks.Task<SiloHandle> Create(string siloName, Microsoft.Extensions.Configuration.IConfiguration configuration) { throw null; }

        public static System.Func<string, Microsoft.Extensions.Configuration.IConfiguration, System.Threading.Tasks.Task<SiloHandle>> CreateDelegate(string executablePath) { throw null; }

        public static System.Func<string, Microsoft.Extensions.Configuration.IConfiguration, System.Threading.Tasks.Task<SiloHandle>> CreateForAssembly(System.Reflection.Assembly assembly) { throw null; }

        protected override void Dispose(bool disposing) { }

        public override System.Threading.Tasks.ValueTask DisposeAsync() { throw null; }

        public override System.Threading.Tasks.Task StopSiloAsync(bool stopGracefully) { throw null; }

        public override System.Threading.Tasks.Task StopSiloAsync(System.Threading.CancellationToken ct) { throw null; }
    }

    public static partial class StandaloneSiloHost
    {
        public const string GatewayAddressLog = "#### GATEWAY ";
        public const string ShutdownCommand = "#### SHUTDOWN";
        public const string SiloAddressLog = "#### SILO ";
        public const string StartedLog = "#### STARTED";
        public static System.Threading.Tasks.Task Main(string[] args) { throw null; }
    }

    public partial class StorageFaultGrain : Grain, IStorageFaultGrain, IGrainWithStringKey, IGrain, Runtime.IAddressable
    {
        public System.Threading.Tasks.Task AddFaultOnClear(Runtime.GrainId grainId, System.Exception exception) { throw null; }

        public System.Threading.Tasks.Task AddFaultOnRead(Runtime.GrainId grainId, System.Exception exception) { throw null; }

        public System.Threading.Tasks.Task AddFaultOnWrite(Runtime.GrainId grainId, System.Exception exception) { throw null; }

        public override System.Threading.Tasks.Task OnActivateAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        public System.Threading.Tasks.Task OnClear(Runtime.GrainId grainId) { throw null; }

        public System.Threading.Tasks.Task OnRead(Runtime.GrainId grainId) { throw null; }

        public System.Threading.Tasks.Task OnWrite(Runtime.GrainId grainId) { throw null; }
    }

    public partial class TestCluster : System.IDisposable, System.IAsyncDisposable
    {
        public TestCluster(TestClusterOptions options, System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Configuration.IConfigurationSource> configurationSources, ITestClusterPortAllocator portAllocator) { }

        public IClusterClient Client { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Configuration.IConfigurationSource> ConfigurationSources { get { throw null; } }

        public System.Func<string, Microsoft.Extensions.Configuration.IConfiguration, System.Threading.Tasks.Task<SiloHandle>> CreateSiloAsync { set { } }

        public IGrainFactory GrainFactory { get { throw null; } }

        public TestClusterOptions Options { get { throw null; } }

        public ITestClusterPortAllocator PortAllocator { get { throw null; } }

        public SiloHandle Primary { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<SiloHandle> SecondarySilos { get { throw null; } }

        public System.IServiceProvider ServiceProvider { get { throw null; } }

        public System.Collections.ObjectModel.ReadOnlyCollection<SiloHandle> Silos { get { throw null; } }

        public System.Threading.Tasks.Task<SiloHandle> DefaultCreateSiloAsync(string siloName, Microsoft.Extensions.Configuration.IConfiguration configuration) { throw null; }

        public void Deploy() { }

        public System.Threading.Tasks.Task DeployAsync() { throw null; }

        public void Dispose() { }

        public System.Threading.Tasks.ValueTask DisposeAsync() { throw null; }

        public System.Collections.Generic.IEnumerable<SiloHandle> GetActiveSilos() { throw null; }

        public static System.TimeSpan GetLivenessStabilizationTime(Configuration.ClusterMembershipOptions clusterMembershipOptions, bool didKill = false) { throw null; }

        public string GetLog() { throw null; }

        public SiloHandle GetSiloForAddress(Runtime.SiloAddress siloAddress) { throw null; }

        public System.IServiceProvider GetSiloServiceProvider(Runtime.SiloAddress silo = null) { throw null; }

        public System.Threading.Tasks.Task InitializeClientAsync() { throw null; }

        public System.Threading.Tasks.Task KillClientAsync() { throw null; }

        public System.Threading.Tasks.Task KillSiloAsync(SiloHandle instance) { throw null; }

        public System.Threading.Tasks.Task<SiloHandle> RestartSiloAsync(SiloHandle instance) { throw null; }

        public System.Threading.Tasks.Task<SiloHandle> RestartStoppedSecondarySiloAsync(string siloName) { throw null; }

        public SiloHandle StartAdditionalSilo(bool startAdditionalSiloOnNewPort = false) { throw null; }

        public System.Threading.Tasks.Task<SiloHandle> StartAdditionalSiloAsync(bool startAdditionalSiloOnNewPort = false) { throw null; }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SiloHandle>> StartAdditionalSilosAsync(int silosToStart, bool startAdditionalSiloOnNewPort = false) { throw null; }

        public static System.Threading.Tasks.Task<SiloHandle> StartSiloAsync(TestCluster cluster, int instanceNumber, TestClusterOptions clusterOptions, System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Configuration.IConfigurationSource> configurationOverrides = null, bool startSiloOnNewPort = false) { throw null; }

        public System.Threading.Tasks.Task<SiloHandle> StartSiloAsync(int instanceNumber, TestClusterOptions clusterOptions, System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Configuration.IConfigurationSource> configurationOverrides = null, bool startSiloOnNewPort = false) { throw null; }

        public void StopAllSilos() { }

        public System.Threading.Tasks.Task StopAllSilosAsync() { throw null; }

        public System.Threading.Tasks.Task StopClusterClientAsync() { throw null; }

        public System.Threading.Tasks.Task StopPrimarySiloAsync() { throw null; }

        public System.Threading.Tasks.Task StopSecondarySilosAsync() { throw null; }

        public System.Threading.Tasks.Task StopSiloAsync(SiloHandle instance) { throw null; }

        public System.Threading.Tasks.Task WaitForLivenessToStabilizeAsync(bool didKill = false) { throw null; }
    }

    public partial class TestClusterBuilder
    {
        public TestClusterBuilder() { }

        public TestClusterBuilder(short initialSilosCount) { }

        public System.Func<string, Microsoft.Extensions.Configuration.IConfiguration, System.Threading.Tasks.Task<SiloHandle>> CreateSiloAsync { set { } }

        public TestClusterOptions Options { get { throw null; } }

        public ITestClusterPortAllocator PortAllocator { get { throw null; } set { } }

        public System.Collections.Generic.Dictionary<string, string> Properties { get { throw null; } }

        public TestClusterBuilder AddClientBuilderConfigurator<T>()
            where T : new() { throw null; }

        public TestClusterBuilder AddSiloBuilderConfigurator<T>()
            where T : new() { throw null; }

        public TestCluster Build() { throw null; }

        public TestClusterBuilder ConfigureBuilder(System.Action configureDelegate) { throw null; }

        public TestClusterBuilder ConfigureHostConfiguration(System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder> configureDelegate) { throw null; }

        public static string CreateClusterId() { throw null; }
    }

    public static partial class TestClusterExtensions
    {
        public static Microsoft.Extensions.Configuration.IConfiguration GetConfiguration(this Microsoft.Extensions.Hosting.IHostBuilder builder) { throw null; }

        public static string GetConfigurationValue(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, string key) { throw null; }

        public static TestClusterOptions GetTestClusterOptions(this Microsoft.Extensions.Configuration.IConfiguration config) { throw null; }

        public static TestClusterOptions GetTestClusterOptions(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder) { throw null; }
    }

    public partial class TestClusterHostFactory
    {
        public static Microsoft.Extensions.Hosting.IHost CreateClusterClient(string hostName, Microsoft.Extensions.Configuration.IConfiguration configuration, System.Action<Microsoft.Extensions.Hosting.IHostBuilder> postConfigureHostBuilder = null) { throw null; }

        public static Microsoft.Extensions.Hosting.IHost CreateSiloHost(string hostName, Microsoft.Extensions.Configuration.IConfiguration configuration, System.Action<Microsoft.Extensions.Hosting.IHostBuilder> postConfigureHostBuilder = null) { throw null; }

        public static Microsoft.Extensions.Configuration.IConfiguration DeserializeConfiguration(string serializedSources) { throw null; }

        public static string SerializeConfiguration(Microsoft.Extensions.Configuration.IConfiguration configuration) { throw null; }
    }

    public partial class TestClusterOptions
    {
        public string ApplicationBaseDirectory { get { throw null; } set { } }

        public bool AssumeHomogenousSilosForTesting { get { throw null; } set { } }

        public int BaseGatewayPort { get { throw null; } set { } }

        public int BaseSiloPort { get { throw null; } set { } }

        public System.Collections.Generic.List<string> ClientBuilderConfiguratorTypes { get { throw null; } }

        public string ClusterId { get { throw null; } set { } }

        public bool ConfigureFileLogging { get { throw null; } set { } }

        public ConnectionTransportType ConnectionTransport { get { throw null; } set { } }

        public bool GatewayPerSilo { get { throw null; } set { } }

        public bool InitializeClientOnDeploy { get { throw null; } set { } }

        public short InitialSilosCount { get { throw null; } set { } }

        public string ServiceId { get { throw null; } set { } }

        public System.Collections.Generic.List<string> SiloBuilderConfiguratorTypes { get { throw null; } }

        public bool UseRealEnvironmentStatistics { get { throw null; } set { } }

        public bool UseTestClusterMembership { get { throw null; } set { } }

        public System.Collections.Generic.Dictionary<string, string> ToDictionary() { throw null; }
    }

    public partial class TestClusterPortAllocator : ITestClusterPortAllocator, System.IDisposable
    {
        public (int, int) AllocateConsecutivePortPairs(int numPorts = 5) { throw null; }

        public void Dispose() { }

        protected virtual void Dispose(bool disposing) { }

        ~TestClusterPortAllocator() {
        }
    }

    public partial class TestSiloSpecificOptions
    {
        public int GatewayPort { get { throw null; } set { } }

        public System.Net.IPEndPoint PrimarySiloEndPoint { get { throw null; } set { } }

        public string SiloName { get { throw null; } set { } }

        public int SiloPort { get { throw null; } set { } }

        public static TestSiloSpecificOptions Create(TestCluster testCluster, TestClusterOptions testClusterOptions, int instanceNumber, bool assignNewPort = false) { throw null; }

        public System.Collections.Generic.Dictionary<string, string> ToDictionary() { throw null; }
    }
}

namespace Orleans.TestingHost.Logging
{
    public partial class FileLogger : Microsoft.Extensions.Logging.ILogger
    {
        public FileLogger(FileLoggingOutput output, string category) { }

        public System.IDisposable BeginScope<TState>(TState state) { throw null; }

        public bool IsEnabled(Microsoft.Extensions.Logging.LogLevel logLevel) { throw null; }

        public void Log<TState>(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, System.Exception exception, System.Func<TState, System.Exception, string> formatter) { }
    }

    public partial class FileLoggerProvider : Microsoft.Extensions.Logging.ILoggerProvider, System.IDisposable
    {
        public FileLoggerProvider(string filePath) { }

        public Microsoft.Extensions.Logging.ILogger CreateLogger(string categoryName) { throw null; }

        public void Dispose() { }
    }

    public static partial class FileLoggerProviderExtensions
    {
        public static Microsoft.Extensions.Logging.ILoggingBuilder AddFile(this Microsoft.Extensions.Logging.ILoggingBuilder builder, string filePathName) { throw null; }
    }

    public partial class FileLoggingOutput : System.IDisposable
    {
        public FileLoggingOutput(string fileName) { }

        public void Dispose() { }

        public void Log<TState>(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, System.Exception exception, System.Func<TState, System.Exception, string> formatter, string category) { }
    }
}

namespace Orleans.TestingHost.UnixSocketTransport
{
    public static partial class UnixSocketConnectionExtensions
    {
        public static Hosting.IClientBuilder UseUnixSocketConnection(this Hosting.IClientBuilder clientBuilder) { throw null; }

        public static Hosting.ISiloBuilder UseUnixSocketConnection(this Hosting.ISiloBuilder siloBuilder) { throw null; }
    }

    public partial class UnixSocketConnectionOptions
    {
        public System.Func<System.Net.EndPoint, string> ConvertEndpointToPath { get { throw null; } set { } }
    }
}

namespace Orleans.TestingHost.Utils
{
    public partial class AsyncResultHandle
    {
        public bool Continue { get { throw null; } set { } }

        public bool Done { get { throw null; } set { } }

        public System.Exception Exception { get { throw null; } set { } }

        public object Result { get { throw null; } set { } }

        public virtual void Reset() { }

        public System.Threading.Tasks.Task<bool> WaitFor(System.TimeSpan timeout, System.Func<bool> checkFlag) { throw null; }

        public System.Threading.Tasks.Task<bool> WaitForContinue(System.TimeSpan timeout) { throw null; }

        public System.Threading.Tasks.Task<bool> WaitForFinished(System.TimeSpan timeout) { throw null; }
    }

    public static partial class StorageEmulator
    {
        public static bool Exists { get { throw null; } }

        public static string Help() { throw null; }

        public static bool IsStarted() { throw null; }

        public static bool Start() { throw null; }

        public static bool Stop() { throw null; }

        public static bool TryStart() { throw null; }
    }

    public static partial class TestingUtils
    {
        public static void ConfigureDefaultLoggingBuilder(Microsoft.Extensions.Logging.ILoggingBuilder builder, string filePath) { }

        public static void ConfigureThreadPoolSettingsForStorageTests(int numDotNetPoolThreads = 200) { }

        public static Microsoft.Extensions.Logging.ILoggerFactory CreateDefaultLoggerFactory(string filePath, Microsoft.Extensions.Logging.LoggerFilterOptions filters) { throw null; }

        public static Microsoft.Extensions.Logging.ILoggerFactory CreateDefaultLoggerFactory(string filePath) { throw null; }

        public static string CreateTraceFileName(string nodeName, string clusterId) { throw null; }

        public static System.TimeSpan Multiply(System.TimeSpan time, double value) { throw null; }

        public static System.Threading.Tasks.Task WaitUntilAsync(System.Func<bool, System.Threading.Tasks.Task<bool>> predicate, System.TimeSpan timeout, System.TimeSpan? delayOnFail = null) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.TestingHost
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IStorageFaultGrain_GrainReference_1150D526 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IStorageFaultGrain_GrainReference_1150D526>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_IStorageFaultGrain_GrainReference_1150D526(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IStorageFaultGrain_GrainReference_1150D526 instance) { }

        public Invokable_IStorageFaultGrain_GrainReference_1150D526 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IStorageFaultGrain_GrainReference_1150D526 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IStorageFaultGrain_GrainReference_1150D526 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IStorageFaultGrain_GrainReference_1A607A31 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IStorageFaultGrain_GrainReference_1A607A31>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_IStorageFaultGrain_GrainReference_1A607A31(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IStorageFaultGrain_GrainReference_1A607A31 instance) { }

        public Invokable_IStorageFaultGrain_GrainReference_1A607A31 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IStorageFaultGrain_GrainReference_1A607A31 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IStorageFaultGrain_GrainReference_1A607A31 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IStorageFaultGrain_GrainReference_5D91E1AF : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IStorageFaultGrain_GrainReference_5D91E1AF>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_IStorageFaultGrain_GrainReference_5D91E1AF(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IStorageFaultGrain_GrainReference_5D91E1AF instance) { }

        public Invokable_IStorageFaultGrain_GrainReference_5D91E1AF ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IStorageFaultGrain_GrainReference_5D91E1AF instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IStorageFaultGrain_GrainReference_5D91E1AF value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IStorageFaultGrain_GrainReference_B9852E6E : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IStorageFaultGrain_GrainReference_B9852E6E>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_IStorageFaultGrain_GrainReference_B9852E6E(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IStorageFaultGrain_GrainReference_B9852E6E instance) { }

        public Invokable_IStorageFaultGrain_GrainReference_B9852E6E ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IStorageFaultGrain_GrainReference_B9852E6E instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IStorageFaultGrain_GrainReference_B9852E6E value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IStorageFaultGrain_GrainReference_C94BA77C : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IStorageFaultGrain_GrainReference_C94BA77C>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_IStorageFaultGrain_GrainReference_C94BA77C(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IStorageFaultGrain_GrainReference_C94BA77C instance) { }

        public Invokable_IStorageFaultGrain_GrainReference_C94BA77C ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IStorageFaultGrain_GrainReference_C94BA77C instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IStorageFaultGrain_GrainReference_C94BA77C value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IStorageFaultGrain_GrainReference_E8594820 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IStorageFaultGrain_GrainReference_E8594820>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_IStorageFaultGrain_GrainReference_E8594820(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IStorageFaultGrain_GrainReference_E8594820 instance) { }

        public Invokable_IStorageFaultGrain_GrainReference_E8594820 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IStorageFaultGrain_GrainReference_E8594820 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IStorageFaultGrain_GrainReference_E8594820 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_RandomlyInjectedInconsistentStateException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.TestingHost.RandomlyInjectedInconsistentStateException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_RandomlyInjectedInconsistentStateException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.TestingHost.RandomlyInjectedInconsistentStateException instance) { }

        public global::Orleans.TestingHost.RandomlyInjectedInconsistentStateException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.TestingHost.RandomlyInjectedInconsistentStateException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.TestingHost.RandomlyInjectedInconsistentStateException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_RandomlyInjectedStorageException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.TestingHost.RandomlyInjectedStorageException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_RandomlyInjectedStorageException(global::Orleans.Serialization.Serializers.IBaseCodec<System.Exception> _baseTypeSerializer) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.TestingHost.RandomlyInjectedStorageException instance) { }

        public global::Orleans.TestingHost.RandomlyInjectedStorageException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.TestingHost.RandomlyInjectedStorageException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.TestingHost.RandomlyInjectedStorageException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IStorageFaultGrain_GrainReference_1150D526 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IStorageFaultGrain_GrainReference_1150D526>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IStorageFaultGrain_GrainReference_1150D526 DeepCopy(Invokable_IStorageFaultGrain_GrainReference_1150D526 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IStorageFaultGrain_GrainReference_1A607A31 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IStorageFaultGrain_GrainReference_1A607A31>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IStorageFaultGrain_GrainReference_1A607A31 DeepCopy(Invokable_IStorageFaultGrain_GrainReference_1A607A31 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IStorageFaultGrain_GrainReference_5D91E1AF : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IStorageFaultGrain_GrainReference_5D91E1AF>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IStorageFaultGrain_GrainReference_5D91E1AF DeepCopy(Invokable_IStorageFaultGrain_GrainReference_5D91E1AF original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IStorageFaultGrain_GrainReference_B9852E6E : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IStorageFaultGrain_GrainReference_B9852E6E>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IStorageFaultGrain_GrainReference_B9852E6E DeepCopy(Invokable_IStorageFaultGrain_GrainReference_B9852E6E original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IStorageFaultGrain_GrainReference_C94BA77C : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IStorageFaultGrain_GrainReference_C94BA77C>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IStorageFaultGrain_GrainReference_C94BA77C DeepCopy(Invokable_IStorageFaultGrain_GrainReference_C94BA77C original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IStorageFaultGrain_GrainReference_E8594820 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IStorageFaultGrain_GrainReference_E8594820>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IStorageFaultGrain_GrainReference_E8594820 DeepCopy(Invokable_IStorageFaultGrain_GrainReference_E8594820 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_RandomlyInjectedInconsistentStateException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.TestingHost.RandomlyInjectedInconsistentStateException, global::Orleans.Storage.InconsistentStateException>
    {
        public Copier_RandomlyInjectedInconsistentStateException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_RandomlyInjectedStorageException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.TestingHost.RandomlyInjectedStorageException, System.Exception>
    {
        public Copier_RandomlyInjectedStorageException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.TestingHost.IStorageFaultGrain), "1150D526" })]
    public sealed partial class Invokable_IStorageFaultGrain_GrainReference_1150D526 : global::Orleans.Runtime.TaskRequest
    {
        public global::Orleans.Runtime.GrainId arg0;
        public System.Exception arg1;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.TestingHost.IStorageFaultGrain), "1A607A31" })]
    public sealed partial class Invokable_IStorageFaultGrain_GrainReference_1A607A31 : global::Orleans.Runtime.TaskRequest
    {
        public global::Orleans.Runtime.GrainId arg0;
        public System.Exception arg1;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.TestingHost.IStorageFaultGrain), "5D91E1AF" })]
    public sealed partial class Invokable_IStorageFaultGrain_GrainReference_5D91E1AF : global::Orleans.Runtime.TaskRequest
    {
        public global::Orleans.Runtime.GrainId arg0;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.TestingHost.IStorageFaultGrain), "B9852E6E" })]
    public sealed partial class Invokable_IStorageFaultGrain_GrainReference_B9852E6E : global::Orleans.Runtime.TaskRequest
    {
        public global::Orleans.Runtime.GrainId arg0;
        public System.Exception arg1;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.TestingHost.IStorageFaultGrain), "C94BA77C" })]
    public sealed partial class Invokable_IStorageFaultGrain_GrainReference_C94BA77C : global::Orleans.Runtime.TaskRequest
    {
        public global::Orleans.Runtime.GrainId arg0;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.TestingHost.IStorageFaultGrain), "E8594820" })]
    public sealed partial class Invokable_IStorageFaultGrain_GrainReference_E8594820 : global::Orleans.Runtime.TaskRequest
    {
        public global::Orleans.Runtime.GrainId arg0;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Serialization
{
    [RegisterSerializer]
    public partial class FSharpChoiceCodec<T1, T2> : Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2>>, Codecs.IFieldCodec, Codecs.IDerivedTypeCodec
    {
        public FSharpChoiceCodec(Codecs.IFieldCodec<T1> item1Codec, Codecs.IFieldCodec<T2> item2Codec) { }

        Microsoft.FSharp.Core.FSharpChoice<T1, T2> Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.FSharpChoice<T1, T2> value) { }
    }

    [RegisterSerializer]
    public partial class FSharpChoiceCodec<T1, T2, T3> : Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3>>, Codecs.IFieldCodec, Codecs.IDerivedTypeCodec
    {
        public FSharpChoiceCodec(Codecs.IFieldCodec<T1> item1Codec, Codecs.IFieldCodec<T2> item2Codec, Codecs.IFieldCodec<T3> item3Codec) { }

        Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3> Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3> value) { }
    }

    [RegisterSerializer]
    public partial class FSharpChoiceCodec<T1, T2, T3, T4> : Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4>>, Codecs.IFieldCodec, Codecs.IDerivedTypeCodec
    {
        public FSharpChoiceCodec(Codecs.IFieldCodec<T1> item1Codec, Codecs.IFieldCodec<T2> item2Codec, Codecs.IFieldCodec<T3> item3Codec, Codecs.IFieldCodec<T4> item4Codec) { }

        Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4> Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4> value) { }
    }

    [RegisterSerializer]
    public partial class FSharpChoiceCodec<T1, T2, T3, T4, T5> : Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5>>, Codecs.IFieldCodec, Codecs.IDerivedTypeCodec
    {
        public FSharpChoiceCodec(Codecs.IFieldCodec<T1> item1Codec, Codecs.IFieldCodec<T2> item2Codec, Codecs.IFieldCodec<T3> item3Codec, Codecs.IFieldCodec<T4> item4Codec, Codecs.IFieldCodec<T5> item5Codec) { }

        Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5> Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5> value) { }
    }

    [RegisterSerializer]
    public partial class FSharpChoiceCodec<T1, T2, T3, T4, T5, T6> : Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5, T6>>, Codecs.IFieldCodec, Codecs.IDerivedTypeCodec
    {
        public FSharpChoiceCodec(Codecs.IFieldCodec<T1> item1Codec, Codecs.IFieldCodec<T2> item2Codec, Codecs.IFieldCodec<T3> item3Codec, Codecs.IFieldCodec<T4> item4Codec, Codecs.IFieldCodec<T5> item5Codec, Codecs.IFieldCodec<T6> item6Codec) { }

        Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5, T6> Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5, T6>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5, T6>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5, T6> value) { }
    }

    [RegisterCopier]
    public partial class FSharpChoiceCopier<T1, T2> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpChoice<T1, T2>>, Cloning.IDeepCopier, Cloning.IDerivedTypeCopier
    {
        public FSharpChoiceCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2) { }

        public Microsoft.FSharp.Core.FSharpChoice<T1, T2> DeepCopy(Microsoft.FSharp.Core.FSharpChoice<T1, T2> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public partial class FSharpChoiceCopier<T1, T2, T3> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3>>, Cloning.IDeepCopier, Cloning.IDerivedTypeCopier
    {
        public FSharpChoiceCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3) { }

        public Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3> DeepCopy(Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public partial class FSharpChoiceCopier<T1, T2, T3, T4> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4>>, Cloning.IDeepCopier, Cloning.IDerivedTypeCopier
    {
        public FSharpChoiceCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4) { }

        public Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4> DeepCopy(Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public partial class FSharpChoiceCopier<T1, T2, T3, T4, T5> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5>>, Cloning.IDeepCopier, Cloning.IDerivedTypeCopier
    {
        public FSharpChoiceCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5) { }

        public Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5> DeepCopy(Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterCopier]
    public partial class FSharpChoiceCopier<T1, T2, T3, T4, T5, T6> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5, T6>>, Cloning.IDeepCopier, Cloning.IDerivedTypeCopier
    {
        public FSharpChoiceCopier(Cloning.IDeepCopier<T1> copier1, Cloning.IDeepCopier<T2> copier2, Cloning.IDeepCopier<T3> copier3, Cloning.IDeepCopier<T4> copier4, Cloning.IDeepCopier<T5> copier5, Cloning.IDeepCopier<T6> copier6) { }

        public Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5, T6> DeepCopy(Microsoft.FSharp.Core.FSharpChoice<T1, T2, T3, T4, T5, T6> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public partial class FSharpListCodec<T> : Codecs.GeneralizedReferenceTypeSurrogateCodec<Microsoft.FSharp.Collections.FSharpList<T>, FSharpListSurrogate<T>>
    {
        public FSharpListCodec(Serializers.IValueSerializer<FSharpListSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override Microsoft.FSharp.Collections.FSharpList<T> ConvertFromSurrogate(ref FSharpListSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(Microsoft.FSharp.Collections.FSharpList<T> value, ref FSharpListSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public partial class FSharpListCopier<T> : Cloning.IDeepCopier<Microsoft.FSharp.Collections.FSharpList<T>>, Cloning.IDeepCopier
    {
        public FSharpListCopier(Cloning.IDeepCopier<T> copier) { }

        public Microsoft.FSharp.Collections.FSharpList<T> DeepCopy(Microsoft.FSharp.Collections.FSharpList<T> input, Cloning.CopyContext context) { throw null; }
    }

    [GenerateSerializer]
    public partial struct FSharpListSurrogate<T>
    {
        private System.Collections.Generic.List<T> _Value_k__BackingField;
        private object _dummy;
        private int _dummyPrimitive;
        [Id(0)]
        public System.Collections.Generic.List<T> Value { get { throw null; } set { } }
    }

    [RegisterSerializer]
    public partial class FSharpMapCodec<TKey, TValue> : Codecs.GeneralizedReferenceTypeSurrogateCodec<Microsoft.FSharp.Collections.FSharpMap<TKey, TValue>, FSharpMapSurrogate<TKey, TValue>>
    {
        public FSharpMapCodec(Serializers.IValueSerializer<FSharpMapSurrogate<TKey, TValue>> surrogateSerializer) : base(default!) { }

        public override Microsoft.FSharp.Collections.FSharpMap<TKey, TValue> ConvertFromSurrogate(ref FSharpMapSurrogate<TKey, TValue> surrogate) { throw null; }

        public override void ConvertToSurrogate(Microsoft.FSharp.Collections.FSharpMap<TKey, TValue> value, ref FSharpMapSurrogate<TKey, TValue> surrogate) { }
    }

    [RegisterCopier]
    public partial class FSharpMapCopier<TKey, TValue> : Cloning.IDeepCopier<Microsoft.FSharp.Collections.FSharpMap<TKey, TValue>>, Cloning.IDeepCopier
    {
        public FSharpMapCopier(Cloning.IDeepCopier<TKey> keyCopier, Cloning.IDeepCopier<TValue> valueCopier) { }

        public Microsoft.FSharp.Collections.FSharpMap<TKey, TValue> DeepCopy(Microsoft.FSharp.Collections.FSharpMap<TKey, TValue> input, Cloning.CopyContext context) { throw null; }
    }

    [GenerateSerializer]
    public partial struct FSharpMapSurrogate<TKey, TValue>
    {
        private System.Collections.Generic.List<System.Tuple<TKey, TValue>> _Value_k__BackingField;
        private object _dummy;
        private int _dummyPrimitive;
        [Id(0)]
        public System.Collections.Generic.List<System.Tuple<TKey, TValue>> Value { get { throw null; } set { } }
    }

    [RegisterSerializer]
    public sealed partial class FSharpOptionCodec<T> : Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpOption<T>>, Codecs.IFieldCodec
    {
        public FSharpOptionCodec(Codecs.IFieldCodec<T> fieldCodec) { }

        public Microsoft.FSharp.Core.FSharpOption<T> ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.FSharpOption<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class FSharpOptionCopier<T> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpOption<T>>, Cloning.IDeepCopier
    {
        public FSharpOptionCopier(Cloning.IDeepCopier<T> valueCopier) { }

        public Microsoft.FSharp.Core.FSharpOption<T> DeepCopy(Microsoft.FSharp.Core.FSharpOption<T> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public partial class FSharpRefCodec<T> : Codecs.GeneralizedReferenceTypeSurrogateCodec<Microsoft.FSharp.Core.FSharpRef<T>, FSharpRefSurrogate<T>>
    {
        public FSharpRefCodec(Serializers.IValueSerializer<FSharpRefSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override Microsoft.FSharp.Core.FSharpRef<T> ConvertFromSurrogate(ref FSharpRefSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(Microsoft.FSharp.Core.FSharpRef<T> value, ref FSharpRefSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public partial class FSharpRefCopier<T> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpRef<T>>, Cloning.IDeepCopier
    {
        public FSharpRefCopier(Cloning.IDeepCopier<T> copier) { }

        public Microsoft.FSharp.Core.FSharpRef<T> DeepCopy(Microsoft.FSharp.Core.FSharpRef<T> input, Cloning.CopyContext context) { throw null; }
    }

    [GenerateSerializer]
    public partial struct FSharpRefSurrogate<T>
    {
        private T _Value_k__BackingField;
        [Id(0)]
        public T Value { get { throw null; } set { } }
    }

    [RegisterSerializer]
    public partial class FSharpResultCodec<T, TError> : Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpResult<T, TError>>, Codecs.IFieldCodec, Codecs.IDerivedTypeCodec
    {
        public FSharpResultCodec(Codecs.IFieldCodec<T> item1Codec, Codecs.IFieldCodec<TError> item2Codec) { }

        Microsoft.FSharp.Core.FSharpResult<T, TError> Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpResult<T, TError>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpResult<T, TError>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.FSharpResult<T, TError> value) { }
    }

    [RegisterCopier]
    public partial class FSharpResultCopier<T, TError> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpResult<T, TError>>, Cloning.IDeepCopier, Cloning.IDerivedTypeCopier
    {
        public FSharpResultCopier(Cloning.IDeepCopier<T> copier1, Cloning.IDeepCopier<TError> copier2) { }

        public Microsoft.FSharp.Core.FSharpResult<T, TError> DeepCopy(Microsoft.FSharp.Core.FSharpResult<T, TError> input, Cloning.CopyContext context) { throw null; }
    }

    [RegisterSerializer]
    public partial class FSharpSetCodec<T> : Codecs.GeneralizedReferenceTypeSurrogateCodec<Microsoft.FSharp.Collections.FSharpSet<T>, FSharpSetSurrogate<T>>
    {
        public FSharpSetCodec(Serializers.IValueSerializer<FSharpSetSurrogate<T>> surrogateSerializer) : base(default!) { }

        public override Microsoft.FSharp.Collections.FSharpSet<T> ConvertFromSurrogate(ref FSharpSetSurrogate<T> surrogate) { throw null; }

        public override void ConvertToSurrogate(Microsoft.FSharp.Collections.FSharpSet<T> value, ref FSharpSetSurrogate<T> surrogate) { }
    }

    [RegisterCopier]
    public partial class FSharpSetCopier<T> : Cloning.IDeepCopier<Microsoft.FSharp.Collections.FSharpSet<T>>, Cloning.IDeepCopier
    {
        public FSharpSetCopier(Cloning.IDeepCopier<T> copier) { }

        public Microsoft.FSharp.Collections.FSharpSet<T> DeepCopy(Microsoft.FSharp.Collections.FSharpSet<T> input, Cloning.CopyContext context) { throw null; }
    }

    [GenerateSerializer]
    public partial struct FSharpSetSurrogate<T>
    {
        private System.Collections.Generic.List<T> _Value_k__BackingField;
        private object _dummy;
        private int _dummyPrimitive;
        [Id(0)]
        public System.Collections.Generic.List<T> Value { get { throw null; } set { } }
    }

    [RegisterSerializer]
    public sealed partial class FSharpUnitCodec : Codecs.IFieldCodec<Microsoft.FSharp.Core.Unit>, Codecs.IFieldCodec
    {
        public Microsoft.FSharp.Core.Unit ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        public void WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.Unit value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [RegisterCopier]
    public sealed partial class FSharpUnitCopier : Cloning.ShallowCopier<Microsoft.FSharp.Core.Unit>
    {
    }

    [RegisterSerializer]
    public partial class FSharpValueOptionCodec<T> : Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpValueOption<T>>, Codecs.IFieldCodec
    {
        public FSharpValueOptionCodec(Codecs.IFieldCodec<T> item1Codec) { }

        Microsoft.FSharp.Core.FSharpValueOption<T> Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpValueOption<T>>.ReadValue<TInput>(ref Buffers.Reader<TInput> reader, WireProtocol.Field field) { throw null; }

        void Codecs.IFieldCodec<Microsoft.FSharp.Core.FSharpValueOption<T>>.WriteField<TBufferWriter>(ref Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Microsoft.FSharp.Core.FSharpValueOption<T> value) { }
    }

    [RegisterCopier]
    public sealed partial class FSharpValueOptionCopier<T> : Cloning.IDeepCopier<Microsoft.FSharp.Core.FSharpValueOption<T>>, Cloning.IDeepCopier
    {
        public FSharpValueOptionCopier(Cloning.IDeepCopier<T> valueCopier) { }

        public Microsoft.FSharp.Core.FSharpValueOption<T> DeepCopy(Microsoft.FSharp.Core.FSharpValueOption<T> input, Cloning.CopyContext context) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.Serialization
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_FSharpListSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.FSharpListSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.FSharpListSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_FSharpListSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.FSharpListSurrogate<T> instance) { }

        public global::Orleans.Serialization.FSharpListSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.FSharpListSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.FSharpListSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_FSharpMapSurrogate<TKey, TValue> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_FSharpMapSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue> instance) { }

        public global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_FSharpRefSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.FSharpRefSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.FSharpRefSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_FSharpRefSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.FSharpRefSurrogate<T> instance) { }

        public global::Orleans.Serialization.FSharpRefSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.FSharpRefSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.FSharpRefSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_FSharpSetSurrogate<T> : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Serialization.FSharpSetSurrogate<T>>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Serialization.FSharpSetSurrogate<T>>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_FSharpSetSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Serialization.FSharpSetSurrogate<T> instance) { }

        public global::Orleans.Serialization.FSharpSetSurrogate<T> ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Serialization.FSharpSetSurrogate<T> instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Serialization.FSharpSetSurrogate<T> value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_FSharpListSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.FSharpListSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_FSharpListSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.FSharpListSurrogate<T> DeepCopy(global::Orleans.Serialization.FSharpListSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_FSharpMapSurrogate<TKey, TValue> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_FSharpMapSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue> DeepCopy(global::Orleans.Serialization.FSharpMapSurrogate<TKey, TValue> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_FSharpRefSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.FSharpRefSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_FSharpRefSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.FSharpRefSurrogate<T> DeepCopy(global::Orleans.Serialization.FSharpRefSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_FSharpSetSurrogate<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Serialization.FSharpSetSurrogate<T>>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_FSharpSetSurrogate(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Serialization.FSharpSetSurrogate<T> DeepCopy(global::Orleans.Serialization.FSharpSetSurrogate<T> result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }
}
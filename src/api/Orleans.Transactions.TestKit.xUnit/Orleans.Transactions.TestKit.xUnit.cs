//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Transactions.TestKit.xUnit
{
    public abstract partial class ConsistencyTransactionTestRunnerxUnit : ConsistencyTransactionTestRunner
    {
        public ConsistencyTransactionTestRunnerxUnit(IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!) { }

        protected override bool StorageAdaptorHasLimitedCommitSpace { get { throw null; } }

        protected override bool StorageErrorInjectionActive { get { throw null; } }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { 2, 2, true, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 2, 3, true, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 2, 4, true, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 2, 5, true, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 2, 2, true, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 2, 3, true, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 2, 4, true, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 2, 5, true, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 2, 2, true, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 3, true, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 4, true, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 5, true, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 2, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 3, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 4, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 5, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 2, true, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 2, 3, true, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 2, 4, true, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 2, 5, true, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 2, 2, true, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 2, 3, true, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 2, 4, true, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 2, 5, true, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 2, 2, true, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 3, true, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 4, true, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 5, true, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 2, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 3, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 4, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 2, 5, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 2, true, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 30, 3, true, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 30, 4, true, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 30, 2, true, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 30, 3, true, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 30, 4, true, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 30, 2, true, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 3, true, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 4, true, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 2, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 3, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 4, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 2, true, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 30, 3, true, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 30, 4, true, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 30, 5, true, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 30, 2, true, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 30, 3, true, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 30, 4, true, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 30, 5, true, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 30, 2, true, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 3, true, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 4, true, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 5, true, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 2, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 3, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 4, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 30, 5, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 1000, 2, false, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 1000, 3, false, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 1000, 4, false, true, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 1000, 2, false, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 1000, 3, false, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 1000, 4, false, true, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 1000, 2, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 1000, 3, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 1000, 4, false, true, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 1000, 2, false, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 1000, 3, false, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 1000, 4, false, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 1000, 5, false, false, Consistency.ReadWriteDetermination.PerGrain })]
        [Xunit.InlineData(new[] { 1000, 2, false, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 1000, 3, false, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 1000, 4, false, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 1000, 5, false, false, Consistency.ReadWriteDetermination.PerTransaction })]
        [Xunit.InlineData(new[] { 1000, 2, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 1000, 3, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 1000, 4, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        [Xunit.InlineData(new[] { 1000, 5, false, false, Consistency.ReadWriteDetermination.PerAccess })]
        public override System.Threading.Tasks.Task RandomizedConsistency(int numGrains, int scale, bool avoidDeadlocks, bool avoidTimeouts, Consistency.ReadWriteDetermination readwrite) { throw null; }
    }

    public partial class ControlledFaultInjectionTransactionTestRunnerxUnit : ControlledFaultInjectionTransactionTestRunner
    {
        public ControlledFaultInjectionTransactionTestRunnerxUnit(IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.AfterPrepare, FaultInjectionType.Deactivation })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.AfterConfirm, FaultInjectionType.Deactivation })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.AfterPrepared, FaultInjectionType.Deactivation })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.AfterPrepareAndCommit, FaultInjectionType.Deactivation })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.BeforePrepare, FaultInjectionType.ExceptionAfterStore })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.BeforePrepare, FaultInjectionType.ExceptionBeforeStore })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.BeforeConfirm, FaultInjectionType.ExceptionAfterStore })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.BeforeConfirm, FaultInjectionType.ExceptionBeforeStore })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.BeforePrepareAndCommit, FaultInjectionType.ExceptionAfterStore })]
        [Xunit.InlineData(new[] { TransactionFaultInjectPhase.BeforePrepareAndCommit, FaultInjectionType.ExceptionBeforeStore })]
        public override System.Threading.Tasks.Task MultiGrainWriteTransaction_FaultInjection(TransactionFaultInjectPhase injectionPhase, FaultInjectionType injectionType) { throw null; }

        [SkippableFact(new[] { })]
        public override System.Threading.Tasks.Task SingleGrainReadTransaction() { throw null; }

        [SkippableFact(new[] { })]
        public override System.Threading.Tasks.Task SingleGrainWriteTransaction() { throw null; }
    }

    public partial class DisabledTransactionsTestRunnerxUnit : DisabledTransactionsTestRunner
    {
        protected DisabledTransactionsTestRunnerxUnit(IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "NoStateTransactionalGrain" })]
        public override void MultiTransactionGrainsThrowWhenTransactions(string transactionTestGrainClassName) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "NoStateTransactionalGrain" })]
        public override void TransactionGrainsThrowWhenTransactions(string transactionTestGrainClassName) { }
    }

    public abstract partial class GoldenPathTransactionTestRunnerxUnit : GoldenPathTransactionTestRunner
    {
        protected GoldenPathTransactionTestRunnerxUnit(IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 8 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 4 })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain", 1 })]
        public override System.Threading.Tasks.Task MultiGrainReadWriteTransaction(string grainStates, int grainCount) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 8 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 4 })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain", 1 })]
        public override System.Threading.Tasks.Task MultiGrainWriteTransaction(string grainStates, int grainCount) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task MultiWriteToSingleGrainTransaction(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 8 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 4 })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain", 1 })]
        public override System.Threading.Tasks.Task RepeatGrainReadWriteTransaction(string grainStates, int grainCount) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 8 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 4 })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain", 1 })]
        public override System.Threading.Tasks.Task RWRWTest(string grainStates, int grainCount) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task SingleGrainReadTransaction(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task SingleGrainWriteTransaction(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 8 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 4 })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain", 1 })]
        public override System.Threading.Tasks.Task WRWRTest(string grainStates, int grainCount) { throw null; }
    }

    public partial class GrainFaultTransactionTestRunnerxUnit : GrainFaultTransactionTestRunner
    {
        public GrainFaultTransactionTestRunnerxUnit(IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task AbortTransactionExceptionInnerExceptionOnlyContainsOneRootCauseException(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task AbortTransactionOnExceptions(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task AbortTransactionOnOrphanCalls(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task MultiGrainAbortTransactionOnExceptions(string grainStates) { throw null; }
    }

    public abstract partial class ScopedTransactionsTestRunnerxUnit : ScopedTransactionsTestRunner
    {
        protected ScopedTransactionsTestRunnerxUnit(IGrainFactory grainFactory, ITransactionClient transactionFrame, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task CreateNestedTransactionScopeAndSetValueAndInnerFailAndAssert(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task CreateTransactionScopeAndSetValue(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task CreateTransactionScopeAndSetValueAndAssert(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task CreateTransactionScopeAndSetValueWithFailure(string grainStates) { throw null; }
    }

    public abstract partial class TocFaultTransactionTestRunnerxUnit : TocFaultTransactionTestRunner
    {
        protected TocFaultTransactionTestRunnerxUnit(IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 8 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 4 })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain", 1 })]
        public override System.Threading.Tasks.Task MultiGrainWriteTransactionWithCommitException(string grainStates, int grainCount) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 8 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 4 })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain", 1 })]
        public override System.Threading.Tasks.Task MultiGrainWriteTransactionWithCommitFailure(string grainStates, int grainCount) { throw null; }
    }

    public abstract partial class TocGoldenPathTestRunnerxUnit : TocGoldenPathTestRunner
    {
        protected TocGoldenPathTestRunnerxUnit(IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 8 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 4 })]
        public override System.Threading.Tasks.Task MultiGrainWriteTransaction(string grainStates, int grainCount) { throw null; }
    }

    public abstract partial class TransactionalStateStorageTestRunnerxUnit<TState> : TransactionalStateStorageTestRunner<TState> where TState : class, new()
    {
        public TransactionalStateStorageTestRunnerxUnit(System.Func<System.Threading.Tasks.Task<Abstractions.ITransactionalStateStorage<TState>>> stateStorageFactory, System.Func<int, TState> stateFactory, IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper testOutput, System.Func<FluentAssertions.Equivalency.EquivalencyOptions<TState>, FluentAssertions.Equivalency.EquivalencyOptions<TState>> assertConfig = null) : base(default!, default!, default!, default!, default!) { }

        [Xunit.Theory]
        [Xunit.InlineData(new[] { 99 })]
        [Xunit.InlineData(new[] { 100 })]
        [Xunit.InlineData(new[] { 200 })]
        public override System.Threading.Tasks.Task CancelMany(int count) { throw null; }

        [Xunit.Fact]
        public override System.Threading.Tasks.Task CancelOne() { throw null; }

        [Xunit.Theory]
        [Xunit.InlineData(new[] { 99, true })]
        [Xunit.InlineData(new[] { 99, false })]
        [Xunit.InlineData(new[] { 100, true })]
        [Xunit.InlineData(new[] { 100, false })]
        [Xunit.InlineData(new[] { 200, true })]
        [Xunit.InlineData(new[] { 200, false })]
        public override System.Threading.Tasks.Task ConfirmMany(int count, bool useTwoSteps) { throw null; }

        [Xunit.Theory]
        [Xunit.InlineData(new[] { true })]
        [Xunit.InlineData(new[] { false })]
        public override System.Threading.Tasks.Task ConfirmOne(bool useTwoSteps) { throw null; }

        [Xunit.Theory]
        [Xunit.InlineData(new[] { false, false })]
        [Xunit.InlineData(new[] { true, true })]
        [Xunit.InlineData(new[] { true, false })]
        public override System.Threading.Tasks.Task ConfirmOneAndCancelOne(bool useTwoSteps, bool reverseOrder) { throw null; }

        [Xunit.Fact]
        public override System.Threading.Tasks.Task FirstTime_Load_ShouldReturnEmptyLoadResponse() { throw null; }

        [Xunit.Fact]
        public override System.Threading.Tasks.Task GrowingBatch() { throw null; }

        [Xunit.Theory]
        [Xunit.InlineData(new[] { 99 })]
        [Xunit.InlineData(new[] { 100 })]
        [Xunit.InlineData(new[] { 200 })]
        public override System.Threading.Tasks.Task PrepareMany(int count) { throw null; }

        [Xunit.Theory]
        [Xunit.InlineData(new[] { 99 })]
        [Xunit.InlineData(new[] { 100 })]
        [Xunit.InlineData(new[] { 200 })]
        public override System.Threading.Tasks.Task ReplaceMany(int count) { throw null; }

        [Xunit.Fact]
        public override System.Threading.Tasks.Task ReplaceOne() { throw null; }

        [Xunit.Fact]
        public override System.Threading.Tasks.Task ShrinkingBatch() { throw null; }
    }

    public abstract partial class TransactionConcurrencyTestRunnerxUnit : TransactionConcurrencyTestRunner
    {
        protected TransactionConcurrencyTestRunnerxUnit(IGrainFactory grainFactory, Xunit.Abstractions.ITestOutputHelper output) : base(default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task SingleSharedGrainTest(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task TransactionChainTest(string grainStates) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain" })]
        [Xunit.InlineData(new[] { "MaxStateTransactionalGrain" })]
        public override System.Threading.Tasks.Task TransactionTreeTest(string grainStates) { throw null; }
    }

    public partial class TransactionRecoveryTestsRunnerxUnit : TransactionRecoveryTestsRunner
    {
        public TransactionRecoveryTestsRunnerxUnit(TestingHost.TestCluster cluster, Xunit.Abstractions.ITestOutputHelper testOutput) : base(default!, default!) { }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 30 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 20 })]
        public override System.Threading.Tasks.Task TransactionWillRecoverAfterRandomSiloGracefulShutdown(string transactionTestGrainClassName, int concurrent) { throw null; }

        [SkippableTheory(new[] { })]
        [Xunit.InlineData(new[] { "SingleStateTransactionalGrain", 30 })]
        [Xunit.InlineData(new[] { "DoubleStateTransactionalGrain", 20 })]
        public override System.Threading.Tasks.Task TransactionWillRecoverAfterRandomSiloUnGracefulShutdown(string transactionTestGrainClassName, int concurrent) { throw null; }
    }
}
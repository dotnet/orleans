//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans
{
    public static partial class ClientStreamingExtensions
    {
        public static Streams.IStreamProvider GetStreamProvider(this IClusterClient client, string name) { throw null; }
    }

    public static partial class GrainStreamingExtensions
    {
        public static Streams.IStreamProvider GetStreamProvider(this Grain grain, string name) { throw null; }

        public static Streams.IStreamProvider GetStreamProvider(this IGrainBase grain, string name) { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public partial class ImplicitStreamSubscriptionAttribute : System.Attribute, Metadata.IGrainBindingsProviderAttribute
    {
        public ImplicitStreamSubscriptionAttribute() { }

        public ImplicitStreamSubscriptionAttribute(Streams.IStreamNamespacePredicate predicate, string streamIdMapper = null) { }

        public ImplicitStreamSubscriptionAttribute(string streamNamespace, string streamIdMapper = null) { }

        public ImplicitStreamSubscriptionAttribute(System.Type predicateType, string streamIdMapper = null) { }

        public Streams.IStreamNamespacePredicate Predicate { get { throw null; } }

        public string StreamIdMapper { get { throw null; } init { } }

        public System.Collections.Generic.IEnumerable<System.Collections.Generic.Dictionary<string, string>> GetBindings(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType) { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public sealed partial class RegexImplicitStreamSubscriptionAttribute : ImplicitStreamSubscriptionAttribute
    {
        public RegexImplicitStreamSubscriptionAttribute(string pattern) { }
    }
}

namespace Orleans.Configuration
{
    public partial class DeploymentBasedQueueBalancerOptions
    {
        public static readonly System.TimeSpan DEFAULT_SILO_MATURITY_PERIOD;
        public bool IsFixed { get { throw null; } set { } }

        public System.TimeSpan SiloMaturityPeriod { get { throw null; } set { } }
    }

    public partial class HashRingStreamQueueMapperOptions
    {
        public const int DEFAULT_NUM_QUEUES = 8;
        public int TotalQueueCount { get { throw null; } set { } }
    }

    public partial class LeaseBasedQueueBalancerOptions
    {
        public const string DefaultLeaseCategory = "QueueBalancer";
        public static readonly System.TimeSpan DefaultLeaseLength;
        public static readonly System.TimeSpan DefaultLeaseRenewPeriod;
        public static readonly System.TimeSpan DefaultMinLeaseAcquisitionPeriod;
        [System.Obsolete("Use DefaultMinLeaseAcquisitionPeriod instead.", true)]
        public static readonly System.TimeSpan DefaultMinLeaseAquisitionPeriod;
        public System.TimeSpan LeaseAcquisitionPeriod { get { throw null; } set { } }

        [System.Obsolete("Use LeaseAcquisitionPeriod instead.", true)]
        public System.TimeSpan LeaseAquisitionPeriod { get { throw null; } set { } }

        public string LeaseCategory { get { throw null; } set { } }

        public System.TimeSpan LeaseLength { get { throw null; } set { } }

        public System.TimeSpan LeaseRenewPeriod { get { throw null; } set { } }
    }

    public partial class SimpleQueueCacheOptions
    {
        public const int DEFAULT_CACHE_SIZE = 4096;
        public int CacheSize { get { throw null; } set { } }
    }

    public partial class SimpleQueueCacheOptionsValidator : IConfigurationValidator
    {
        internal SimpleQueueCacheOptionsValidator() { }

        public static IConfigurationValidator Create(System.IServiceProvider services, string name) { throw null; }

        public void ValidateConfiguration() { }
    }

    public partial class StreamCacheEvictionOptions
    {
        public static readonly System.TimeSpan DefaultDataMaxAgeInCache;
        public static readonly System.TimeSpan DefaultDataMinTimeInCache;
        public static readonly System.TimeSpan DefaultMetadataMinTimeInCache;
        public System.TimeSpan DataMaxAgeInCache { get { throw null; } set { } }

        public System.TimeSpan DataMinTimeInCache { get { throw null; } set { } }

        public System.TimeSpan? MetadataMinTimeInCache { get { throw null; } set { } }
    }

    public partial class StreamLifecycleOptions
    {
        public const int DEFAULT_INIT_STAGE = 10000;
        public const int DEFAULT_START_STAGE = 20000;
        public const RunState DEFAULT_STARTUP_STATE = 2;
        public int InitStage { get { throw null; } set { } }

        public int StartStage { get { throw null; } set { } }

        public RunState StartupState { get { throw null; } set { } }

        public enum RunState
        {
            None = 0,
            Initialized = 1,
            AgentsStarted = 2,
            AgentsStopped = 3
        }
    }

    public partial class StreamPubSubOptions
    {
        public const Streams.StreamPubSubType DEFAULT_STREAM_PUBSUB_TYPE = 0;
        public Streams.StreamPubSubType PubSubType { get { throw null; } set { } }
    }

    public partial class StreamPullingAgentOptions
    {
        public static readonly int DEFAULT_BATCH_CONTAINER_BATCH_SIZE;
        public static readonly System.TimeSpan DEFAULT_GET_QUEUE_MESSAGES_TIMER_PERIOD;
        public static readonly System.TimeSpan DEFAULT_INIT_QUEUE_TIMEOUT;
        public static readonly System.TimeSpan DEFAULT_MAX_EVENT_DELIVERY_TIME;
        public static readonly System.TimeSpan DEFAULT_STREAM_INACTIVITY_PERIOD;
        public int BatchContainerBatchSize { get { throw null; } set { } }

        public System.TimeSpan GetQueueMsgsTimerPeriod { get { throw null; } set { } }

        public System.TimeSpan InitQueueTimeout { get { throw null; } set { } }

        public System.TimeSpan MaxEventDeliveryTime { get { throw null; } set { } }

        public System.TimeSpan StreamInactivityPeriod { get { throw null; } set { } }
    }

    public partial class StreamStatisticOptions
    {
        public static readonly System.TimeSpan DefaultStatisticMonitorWriteInterval;
        public System.TimeSpan StatisticMonitorWriteInterval { get { throw null; } set { } }
    }
}

namespace Orleans.Hosting
{
    public static partial class ClientBuilderStreamingExtensions
    {
        public static IClientBuilder AddMemoryStreams(this IClientBuilder builder, string name, System.Action<IClusterClientMemoryStreamConfigurator> configure = null) { throw null; }

        public static IClientBuilder AddMemoryStreams<TSerializer>(this IClientBuilder builder, string name, System.Action<IClusterClientMemoryStreamConfigurator> configure = null)
            where TSerializer : class, Providers.IMemoryMessageBodySerializer { throw null; }

        public static IClientBuilder AddPersistentStreams(this IClientBuilder builder, string name, System.Func<System.IServiceProvider, string, Streams.IQueueAdapterFactory> adapterFactory, System.Action<IClusterClientPersistentStreamConfigurator> configureStream) { throw null; }

        public static IClientBuilder AddStreaming(this IClientBuilder builder) { throw null; }
    }

    public partial class ClusterClientMemoryStreamConfigurator<TSerializer> : ClusterClientPersistentStreamConfigurator, IClusterClientMemoryStreamConfigurator, IMemoryStreamConfigurator, INamedServiceConfigurator, IClusterClientPersistentStreamConfigurator, IPersistentStreamConfigurator where TSerializer : class, Providers.IMemoryMessageBodySerializer
    {
        public ClusterClientMemoryStreamConfigurator(string name, IClientBuilder builder) : base(default!, default!, default!) { }
    }

    public partial class ClusterClientPersistentStreamConfigurator : NamedServiceConfigurator, IClusterClientPersistentStreamConfigurator, IPersistentStreamConfigurator, INamedServiceConfigurator
    {
        public ClusterClientPersistentStreamConfigurator(string name, IClientBuilder clientBuilder, System.Func<System.IServiceProvider, string, Streams.IQueueAdapterFactory> adapterFactory) : base(default!, default!) { }
    }

    public static partial class ClusterClientPersistentStreamConfiguratorExtensions
    {
        public static void ConfigureLifecycle(this IClusterClientPersistentStreamConfigurator configurator, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.StreamLifecycleOptions>> configureOptions) { }
    }

    public partial interface IClusterClientMemoryStreamConfigurator : IMemoryStreamConfigurator, INamedServiceConfigurator, IClusterClientPersistentStreamConfigurator, IPersistentStreamConfigurator
    {
    }

    public partial interface IClusterClientPersistentStreamConfigurator : IPersistentStreamConfigurator, INamedServiceConfigurator
    {
    }

    public partial interface IMemoryStreamConfigurator : INamedServiceConfigurator
    {
    }

    public partial interface IPersistentStreamConfigurator : INamedServiceConfigurator
    {
    }

    public partial interface ISiloMemoryStreamConfigurator : IMemoryStreamConfigurator, INamedServiceConfigurator, ISiloRecoverableStreamConfigurator, ISiloPersistentStreamConfigurator, IPersistentStreamConfigurator
    {
    }

    public partial interface ISiloPersistentStreamConfigurator : IPersistentStreamConfigurator, INamedServiceConfigurator
    {
    }

    public partial interface ISiloRecoverableStreamConfigurator : ISiloPersistentStreamConfigurator, IPersistentStreamConfigurator, INamedServiceConfigurator
    {
    }

    public static partial class MemoryStreamConfiguratorExtensions
    {
        public static void ConfigurePartitioning(this IMemoryStreamConfigurator configurator, int numOfQueues = 8) { }
    }

    public static partial class PersistentStreamConfiguratorExtensions
    {
        public static void ConfigureStreamPubSub(this IPersistentStreamConfigurator configurator, Streams.StreamPubSubType pubsubType = Streams.StreamPubSubType.ExplicitGrainBasedAndImplicit) { }
    }

    public partial class PersistentStreamStorageConfigurationValidator : IConfigurationValidator
    {
        internal PersistentStreamStorageConfigurationValidator() { }

        public static IConfigurationValidator Create(System.IServiceProvider services, string name) { throw null; }

        public void ValidateConfiguration() { }
    }

    public static partial class SiloBuilderMemoryStreamExtensions
    {
        public static ISiloBuilder AddMemoryStreams(this ISiloBuilder builder, string name, System.Action<ISiloMemoryStreamConfigurator> configure = null) { throw null; }

        public static ISiloBuilder AddMemoryStreams<TSerializer>(this ISiloBuilder builder, string name, System.Action<ISiloMemoryStreamConfigurator> configure = null)
            where TSerializer : class, Providers.IMemoryMessageBodySerializer { throw null; }
    }

    public static partial class SiloBuilderStreamingExtensions
    {
        public static ISiloBuilder AddPersistentStreams(this ISiloBuilder builder, string name, System.Func<System.IServiceProvider, string, Streams.IQueueAdapterFactory> adapterFactory, System.Action<ISiloPersistentStreamConfigurator> configureStream) { throw null; }

        public static IClientBuilder AddStreamFilter<T>(this IClientBuilder builder, string name)
            where T : class, Streams.Filtering.IStreamFilter { throw null; }

        public static ISiloBuilder AddStreamFilter<T>(this ISiloBuilder builder, string name)
            where T : class, Streams.Filtering.IStreamFilter { throw null; }

        public static ISiloBuilder AddStreaming(this ISiloBuilder builder) { throw null; }
    }

    public partial class SiloMemoryStreamConfigurator<TSerializer> : SiloRecoverableStreamConfigurator, ISiloMemoryStreamConfigurator, IMemoryStreamConfigurator, INamedServiceConfigurator, ISiloRecoverableStreamConfigurator, ISiloPersistentStreamConfigurator, IPersistentStreamConfigurator where TSerializer : class, Providers.IMemoryMessageBodySerializer
    {
        public SiloMemoryStreamConfigurator(string name, System.Action<System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>> configureServicesDelegate) : base(default!, default!, default!) { }
    }

    public partial class SiloPersistentStreamConfigurator : NamedServiceConfigurator, ISiloPersistentStreamConfigurator, IPersistentStreamConfigurator, INamedServiceConfigurator
    {
        public SiloPersistentStreamConfigurator(string name, System.Action<System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>> configureDelegate, System.Func<System.IServiceProvider, string, Streams.IQueueAdapterFactory> adapterFactory) : base(default!, default!) { }
    }

    public static partial class SiloPersistentStreamConfiguratorExtension
    {
        public static void UseConsistentRingQueueBalancer(this ISiloPersistentStreamConfigurator configurator) { }

        public static void UseDynamicClusterConfigDeploymentBalancer(this ISiloPersistentStreamConfigurator configurator, System.TimeSpan? siloMaturityPeriod = null) { }

        public static void UseLeaseBasedQueueBalancer(this ISiloPersistentStreamConfigurator configurator, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.LeaseBasedQueueBalancerOptions>> configureOptions = null) { }

        public static void UseStaticClusterConfigDeploymentBalancer(this ISiloPersistentStreamConfigurator configurator, System.TimeSpan? siloMaturityPeriod = null) { }
    }

    public static partial class SiloPersistentStreamConfiguratorExtensions
    {
        public static void ConfigureBackoffProvider(this ISiloPersistentStreamConfigurator configurator, System.Func<System.IServiceProvider, string, Runtime.Providers.IMessageDeliveryBackoffProvider> factory) { }

        public static void ConfigureBackoffProvider(this ISiloPersistentStreamConfigurator configurator, System.Func<System.IServiceProvider, string, Runtime.Providers.IQueueReaderBackoffProvider> factory) { }

        public static void ConfigureLifecycle(this ISiloPersistentStreamConfigurator configurator, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.StreamLifecycleOptions>> configureOptions) { }

        public static void ConfigurePartitionBalancing(this ISiloPersistentStreamConfigurator configurator, System.Func<System.IServiceProvider, string, Streams.IStreamQueueBalancer> factory) { }

        public static void ConfigurePartitionBalancing<TOptions>(this ISiloPersistentStreamConfigurator configurator, System.Func<System.IServiceProvider, string, Streams.IStreamQueueBalancer> factory, System.Action<Microsoft.Extensions.Options.OptionsBuilder<TOptions>> configureOptions)
            where TOptions : class, new() { }

        public static void ConfigurePullingAgent(this ISiloPersistentStreamConfigurator configurator, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.StreamPullingAgentOptions>> configureOptions = null) { }
    }

    public partial class SiloRecoverableStreamConfigurator : SiloPersistentStreamConfigurator, ISiloRecoverableStreamConfigurator, ISiloPersistentStreamConfigurator, IPersistentStreamConfigurator, INamedServiceConfigurator
    {
        public SiloRecoverableStreamConfigurator(string name, System.Action<System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection>> configureDelegate, System.Func<System.IServiceProvider, string, Streams.IQueueAdapterFactory> adapterFactory) : base(default!, default!, default!) { }
    }

    public static partial class SiloRecoverableStreamConfiguratorExtensions
    {
        public static void ConfigureCacheEviction(this ISiloRecoverableStreamConfigurator configurator, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.StreamCacheEvictionOptions>> configureOptions) { }

        public static void ConfigureStatistics(this ISiloRecoverableStreamConfigurator configurator, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.StreamStatisticOptions>> configureOptions) { }
    }

    [GenerateSerializer]
    public sealed partial class SimpleGeneratorOptions : Providers.Streams.Generator.IStreamGeneratorConfig
    {
        public const int DEFAULT_EVENTS_IN_STREAM = 100;
        [Id(1)]
        public int EventsInStream { get { throw null; } set { } }

        public System.Type StreamGeneratorType { get { throw null; } }

        [Id(0)]
        public string StreamNamespace { get { throw null; } set { } }
    }

    public partial class StaticClusterDeploymentOptions : Streams.IDeploymentConfiguration
    {
        public System.Collections.Generic.IList<string> SiloNames { get { throw null; } set { } }

        System.Collections.Generic.IList<string> Streams.IDeploymentConfiguration.GetAllSiloNames() { throw null; }
    }

    public static partial class StreamingServiceCollectionExtensions
    {
        public static void AddClientStreaming(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }

        public static void AddSiloStreaming(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddStreamFilter<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name)
            where T : class, Streams.Filtering.IStreamFilter { throw null; }
    }
}

namespace Orleans.Providers
{
    [GenerateSerializer]
    [Immutable]
    [SerializationCallbacks(typeof(Runtime.OnDeserializedCallbacks))]
    public sealed partial class DefaultMemoryMessageBodySerializer : IMemoryMessageBodySerializer, Serialization.IOnDeserialized
    {
        public DefaultMemoryMessageBodySerializer(Serialization.Serializer<MemoryMessageBody> serializer) { }

        public MemoryMessageBody Deserialize(System.ArraySegment<byte> bodyBytes) { throw null; }

        void Serialization.IOnDeserialized.OnDeserialized(Serialization.DeserializationContext context) { }

        public System.ArraySegment<byte> Serialize(MemoryMessageBody body) { throw null; }
    }

    public partial interface IMemoryMessageBodySerializer
    {
        MemoryMessageBody Deserialize(System.ArraySegment<byte> bodyBytes);
        System.ArraySegment<byte> Serialize(MemoryMessageBody body);
    }

    public partial interface IMemoryStreamQueueGrain : IGrainWithGuidKey, IGrain, Runtime.IAddressable
    {
        System.Threading.Tasks.Task<System.Collections.Generic.List<MemoryMessageData>> Dequeue(int maxCount);
        System.Threading.Tasks.Task Enqueue(MemoryMessageData data);
    }

    public partial class MemoryAdapterFactory<TSerializer> : Orleans.Streams.IQueueAdapterFactory, Orleans.Streams.IQueueAdapter, Orleans.Streams.IQueueAdapterCache where TSerializer : class, IMemoryMessageBodySerializer
    {
        protected System.Func<Streams.Common.BlockPoolMonitorDimensions, Streams.Common.IBlockPoolMonitor> BlockPoolMonitorFactory;
        protected System.Func<Streams.Common.CacheMonitorDimensions, Streams.Common.ICacheMonitor> CacheMonitorFactory;
        protected System.Func<Streams.Common.ReceiverMonitorDimensions, Streams.Common.IQueueAdapterReceiverMonitor> ReceiverMonitorFactory;
        public MemoryAdapterFactory(string providerName, Configuration.StreamCacheEvictionOptions cacheOptions, Configuration.StreamStatisticOptions statisticOptions, Configuration.HashRingStreamQueueMapperOptions queueMapperOptions, System.IServiceProvider serviceProvider, IGrainFactory grainFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }

        public Orleans.Streams.StreamProviderDirection Direction { get { throw null; } }

        public bool IsRewindable { get { throw null; } }

        public string Name { get { throw null; } }

        protected System.Func<string, System.Threading.Tasks.Task<Orleans.Streams.IStreamFailureHandler>> StreamFailureHandlerFactory { get { throw null; } set { } }

        public static MemoryAdapterFactory<TSerializer> Create(System.IServiceProvider services, string name) { throw null; }

        public System.Threading.Tasks.Task<Orleans.Streams.IQueueAdapter> CreateAdapter() { throw null; }

        public Orleans.Streams.IQueueCache CreateQueueCache(Orleans.Streams.QueueId queueId) { throw null; }

        public Orleans.Streams.IQueueAdapterReceiver CreateReceiver(Orleans.Streams.QueueId queueId) { throw null; }

        public System.Threading.Tasks.Task<Orleans.Streams.IStreamFailureHandler> GetDeliveryFailureHandler(Orleans.Streams.QueueId queueId) { throw null; }

        public Orleans.Streams.IQueueAdapterCache GetQueueAdapterCache() { throw null; }

        public Orleans.Streams.IStreamQueueMapper GetStreamQueueMapper() { throw null; }

        public void Init() { }

        public System.Threading.Tasks.Task QueueMessageBatchAsync<T>(Runtime.StreamId streamId, System.Collections.Generic.IEnumerable<T> events, Orleans.Streams.StreamSequenceToken token, System.Collections.Generic.Dictionary<string, object> requestContext) { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class MemoryMessageBody
    {
        public MemoryMessageBody(System.Collections.Generic.IEnumerable<object> events, System.Collections.Generic.Dictionary<string, object> requestContext) { }

        [Id(0)]
        public System.Collections.Generic.List<object> Events { get { throw null; } }

        [Id(1)]
        public System.Collections.Generic.Dictionary<string, object> RequestContext { get { throw null; } }
    }

    [GenerateSerializer]
    public partial struct MemoryMessageData
    {
        [Id(2)]
        public System.DateTime DequeueTimeUtc;
        [Id(3)]
        public System.DateTime EnqueueTimeUtc;
        [Id(4)]
        public System.ArraySegment<byte> Payload;
        [Id(1)]
        public long SequenceNumber;
        [Id(0)]
        public Runtime.StreamId StreamId;
    }

    public partial class MemoryPooledCache<TSerializer> : Orleans.Streams.IQueueCache, Orleans.Streams.IQueueFlowController, Streams.Common.ICacheDataAdapter where TSerializer : class, IMemoryMessageBodySerializer
    {
        public MemoryPooledCache(Streams.Common.IObjectPool<Streams.Common.FixedSizeBuffer> bufferPool, Streams.Common.TimePurgePredicate purgePredicate, Microsoft.Extensions.Logging.ILogger logger, TSerializer serializer, Streams.Common.ICacheMonitor cacheMonitor, System.TimeSpan? monitorWriteInterval, System.TimeSpan? purgeMetadataInterval) { }

        public void AddToCache(System.Collections.Generic.IList<Orleans.Streams.IBatchContainer> messages) { }

        public Orleans.Streams.IBatchContainer GetBatchContainer(ref Streams.Common.CachedMessage cachedMessage) { throw null; }

        public Orleans.Streams.IQueueCacheCursor GetCacheCursor(Runtime.StreamId streamId, Orleans.Streams.StreamSequenceToken token) { throw null; }

        public int GetMaxAddCount() { throw null; }

        public Orleans.Streams.StreamSequenceToken GetSequenceToken(ref Streams.Common.CachedMessage cachedMessage) { throw null; }

        public bool IsUnderPressure() { throw null; }

        public bool TryPurgeFromCache(out System.Collections.Generic.IList<Orleans.Streams.IBatchContainer> purgedItems) { throw null; }
    }

    public partial class MemoryStreamQueueGrain : Grain, IMemoryStreamQueueGrain, IGrainWithGuidKey, IGrain, Runtime.IAddressable, Runtime.IGrainMigrationParticipant
    {
        public System.Threading.Tasks.Task<System.Collections.Generic.List<MemoryMessageData>> Dequeue(int maxCount) { throw null; }

        public System.Threading.Tasks.Task Enqueue(MemoryMessageData data) { throw null; }

        void Runtime.IGrainMigrationParticipant.OnDehydrate(Runtime.IDehydrationContext dehydrationContext) { }

        void Runtime.IGrainMigrationParticipant.OnRehydrate(Runtime.IRehydrationContext rehydrationContext) { }
    }
}

namespace Orleans.Providers.Streams.Common
{
    public partial class BlockPoolMonitorDimensions
    {
        public BlockPoolMonitorDimensions(string blockPoolId) { }

        public string BlockPoolId { get { throw null; } set { } }
    }

    public partial struct CachedMessage
    {
        public System.DateTime DequeueTimeUtc;
        public System.DateTime EnqueueTimeUtc;
        public int EventIndex;
        public System.ArraySegment<byte> Segment;
        public long SequenceNumber;
        public Runtime.StreamId StreamId;
    }

    public partial class CachedMessageBlock : PooledResource<CachedMessageBlock>
    {
        public CachedMessageBlock(int blockSize = 16384) { }

        public bool HasCapacity { get { throw null; } }

        public bool IsEmpty { get { throw null; } }

        public CachedMessage this[int index] { get { throw null; } }

        public int ItemCount { get { throw null; } }

        public CachedMessage NewestMessage { get { throw null; } }

        public int NewestMessageIndex { get { throw null; } }

        public System.Collections.Generic.LinkedListNode<CachedMessageBlock> Node { get { throw null; } }

        public CachedMessage OldestMessage { get { throw null; } }

        public int OldestMessageIndex { get { throw null; } }

        public void Add(CachedMessage message) { }

        public int GetIndexOfFirstMessageLessThanOrEqualTo(Orleans.Streams.StreamSequenceToken token) { throw null; }

        public Orleans.Streams.StreamSequenceToken GetNewestSequenceToken(ICacheDataAdapter dataAdapter) { throw null; }

        public Orleans.Streams.StreamSequenceToken GetOldestSequenceToken(ICacheDataAdapter dataAdapter) { throw null; }

        public Orleans.Streams.StreamSequenceToken GetSequenceToken(int index, ICacheDataAdapter dataAdapter) { throw null; }

        public override void OnResetState() { }

        public bool Remove() { throw null; }

        public bool TryFindFirstMessage(Runtime.StreamId streamId, ICacheDataAdapter dataAdapter, out int index) { throw null; }

        public bool TryFindNextMessage(int start, Runtime.StreamId streamId, ICacheDataAdapter dataAdapter, out int index) { throw null; }
    }

    public static partial class CachedMessageExtensions
    {
        public static int Compare(this ref CachedMessage cachedMessage, Orleans.Streams.StreamSequenceToken token) { throw null; }

        public static bool CompareStreamId(this ref CachedMessage cachedMessage, Runtime.StreamId streamId) { throw null; }
    }

    public partial class CacheMonitorDimensions : ReceiverMonitorDimensions
    {
        public CacheMonitorDimensions(string queueId, string blockPoolId) { }

        public string BlockPoolId { get { throw null; } set { } }
    }

    public partial class ChronologicalEvictionStrategy : IEvictionStrategy
    {
        protected readonly System.Collections.Generic.Queue<FixedSizeBuffer> inUseBuffers;
        public ChronologicalEvictionStrategy(Microsoft.Extensions.Logging.ILogger logger, TimePurgePredicate timePurage, ICacheMonitor cacheMonitor, System.TimeSpan? monitorWriteInterval) { }

        public System.Action<CachedMessage?, CachedMessage?> OnPurged { get { throw null; } set { } }

        public IPurgeObservable PurgeObservable { set { } }

        public void OnBlockAllocated(FixedSizeBuffer newBlock) { }

        public void PerformPurge(System.DateTime nowUtc) { }

        protected virtual bool ShouldPurge(ref CachedMessage cachedMessage, ref CachedMessage newestCachedMessage, System.DateTime nowUtc) { throw null; }
    }

    public partial class DefaultBlockPoolMonitor : IBlockPoolMonitor
    {
        protected System.Collections.Generic.KeyValuePair<string, object>[] _dimensions;
        public DefaultBlockPoolMonitor(BlockPoolMonitorDimensions dimensions) { }

        protected DefaultBlockPoolMonitor(System.Collections.Generic.KeyValuePair<string, object>[] dimensions) { }

        public void Report(long totalMemoryInByte, long availableMemoryInByte, long claimedMemoryInByte) { }

        public void TrackMemoryAllocated(long allocatedMemoryInByte) { }

        public void TrackMemoryReleased(long releasedMemoryInByte) { }
    }

    public partial class DefaultCacheMonitor : ICacheMonitor
    {
        public DefaultCacheMonitor(CacheMonitorDimensions dimensions) { }

        protected DefaultCacheMonitor(System.Collections.Generic.KeyValuePair<string, object>[] dimensions) { }

        public void ReportCacheSize(long totalCacheSizeInByte) { }

        public void ReportMessageStatistics(System.DateTime? oldestMessageEnqueueTimeUtc, System.DateTime? oldestMessageDequeueTimeUtc, System.DateTime? newestMessageEnqueueTimeUtc, long totalMessageCount) { }

        public void TrackCachePressureMonitorStatusChange(string pressureMonitorType, bool underPressure, double? cachePressureContributionCount, double? currentPressure, double? flowControlThreshold) { }

        public void TrackMemoryAllocated(int memoryInByte) { }

        public void TrackMemoryReleased(int memoryInByte) { }

        public void TrackMessagesAdded(long messageAdded) { }

        public void TrackMessagesPurged(long messagePurged) { }
    }

    public partial class DefaultQueueAdapterReceiverMonitor : IQueueAdapterReceiverMonitor
    {
        public DefaultQueueAdapterReceiverMonitor(ReceiverMonitorDimensions dimensions) { }

        protected DefaultQueueAdapterReceiverMonitor(System.Collections.Generic.KeyValuePair<string, object>[] dimensions) { }

        public void TrackInitialization(bool success, System.TimeSpan callTime, System.Exception exception) { }

        public void TrackMessagesReceived(long count, System.DateTime? oldestMessageEnqueueTimeUtc, System.DateTime? newestMessageEnqueueTimeUtc) { }

        public void TrackRead(bool success, System.TimeSpan callTime, System.Exception exception) { }

        public void TrackShutdown(bool success, System.TimeSpan callTime, System.Exception exception) { }
    }

    [GenerateSerializer]
    public partial class EventSequenceToken : Orleans.Streams.StreamSequenceToken
    {
        [Newtonsoft.Json.JsonConstructor]
        public EventSequenceToken() { }

        public EventSequenceToken(long sequenceNumber, int eventIndex) { }

        public EventSequenceToken(long sequenceNumber) { }

        [Id(1)]
        [Newtonsoft.Json.JsonProperty]
        public override int EventIndex { get { throw null; } protected set { } }

        [Id(0)]
        [Newtonsoft.Json.JsonProperty]
        public override long SequenceNumber { get { throw null; } protected set { } }

        public override int CompareTo(Orleans.Streams.StreamSequenceToken other) { throw null; }

        public EventSequenceToken CreateSequenceTokenForEvent(int eventInd) { throw null; }

        public override bool Equals(Orleans.Streams.StreamSequenceToken other) { throw null; }

        public override bool Equals(object obj) { throw null; }

        public override int GetHashCode() { throw null; }

        public override string ToString() { throw null; }
    }

    [GenerateSerializer]
    public partial class EventSequenceTokenV2 : Orleans.Streams.StreamSequenceToken
    {
        public EventSequenceTokenV2() { }

        public EventSequenceTokenV2(long seqNumber, int eventInd) { }

        public EventSequenceTokenV2(long seqNumber) { }

        [Id(1)]
        [Newtonsoft.Json.JsonProperty]
        public override int EventIndex { get { throw null; } protected set { } }

        [Id(0)]
        [Newtonsoft.Json.JsonProperty]
        public override long SequenceNumber { get { throw null; } protected set { } }

        public override int CompareTo(Orleans.Streams.StreamSequenceToken other) { throw null; }

        public EventSequenceTokenV2 CreateSequenceTokenForEvent(int eventInd) { throw null; }

        public override bool Equals(Orleans.Streams.StreamSequenceToken other) { throw null; }

        public override bool Equals(object obj) { throw null; }

        public override int GetHashCode() { throw null; }

        public override string ToString() { throw null; }
    }

    public partial class FixedSizeBuffer : PooledResource<FixedSizeBuffer>
    {
        public readonly int SizeInByte;
        public FixedSizeBuffer(int blockSizeInByte) { }

        public object Id { get { throw null; } }

        public override void OnResetState() { }

        public bool TryGetSegment(int size, out System.ArraySegment<byte> value) { throw null; }
    }

    public partial interface IBlockPoolMonitor
    {
        void Report(long totalSizeInByte, long availableMemoryInByte, long claimedMemoryInByte);
        void TrackMemoryAllocated(long allocatedMemoryInBytes);
        void TrackMemoryReleased(long releasedMemoryInBytes);
    }

    public partial interface ICacheDataAdapter
    {
        Orleans.Streams.IBatchContainer GetBatchContainer(ref CachedMessage cachedMessage);
        Orleans.Streams.StreamSequenceToken GetSequenceToken(ref CachedMessage cachedMessage);
    }

    public partial interface ICacheMonitor
    {
        void ReportCacheSize(long totalCacheSizeInBytes);
        void ReportMessageStatistics(System.DateTime? oldestMessageEnqueueTimeUtc, System.DateTime? oldestMessageDequeueTimeUtc, System.DateTime? newestMessageEnqueueTimeUtc, long totalMessageCount);
        void TrackCachePressureMonitorStatusChange(string pressureMonitorType, bool underPressure, double? cachePressureContributionCount, double? currentPressure, double? flowControlThreshold);
        void TrackMemoryAllocated(int memoryInBytes);
        void TrackMemoryReleased(int memoryInBytes);
        void TrackMessagesAdded(long messagesAdded);
        void TrackMessagesPurged(long messagesPurged);
    }

    public partial interface IEvictionStrategy
    {
        System.Action<CachedMessage?, CachedMessage?> OnPurged { get; set; }

        IPurgeObservable PurgeObservable { set; }

        void OnBlockAllocated(FixedSizeBuffer newBlock);
        void PerformPurge(System.DateTime utcNow);
    }

    public partial interface IObjectPoolMonitor
    {
        void Report(long totalObjects, long availableObjects, long claimedObjects);
        void TrackObjectAllocated();
        void TrackObjectReleased();
    }

    public partial interface IObjectPool<T>
        where T : System.IDisposable
    {
        T Allocate();
        void Free(T resource);
    }

    public partial interface IPurgeObservable
    {
        bool IsEmpty { get; }

        int ItemCount { get; }

        CachedMessage? Newest { get; }

        CachedMessage? Oldest { get; }

        void RemoveOldestMessage();
    }

    public partial interface IQueueAdapterReceiverMonitor
    {
        void TrackInitialization(bool success, System.TimeSpan callTime, System.Exception exception);
        void TrackMessagesReceived(long count, System.DateTime? oldestMessageEnqueueTimeUtc, System.DateTime? newestMessageEnqueueTimeUtc);
        void TrackRead(bool success, System.TimeSpan callTime, System.Exception exception);
        void TrackShutdown(bool success, System.TimeSpan callTime, System.Exception exception);
    }

    public partial class ObjectPoolMonitorBridge : IObjectPoolMonitor
    {
        public ObjectPoolMonitorBridge(IBlockPoolMonitor blockPoolMonitor, int blockSizeInBytes) { }

        public void Report(long totalObjects, long availableObjects, long claimedObjects) { }

        public void TrackObjectAllocated() { }

        public void TrackObjectReleased() { }
    }

    public partial class ObjectPool<T> : IObjectPool<T> where T : PooledResource<T>
    {
        public ObjectPool(System.Func<T> factoryFunc, IObjectPoolMonitor monitor = null, System.TimeSpan? monitorWriteInterval = null) { }

        public virtual T Allocate() { throw null; }

        public virtual void Free(T resource) { }
    }

    public partial class PersistentStreamProvider : Orleans.Streams.IStreamProvider, IControllable, Orleans.Streams.Core.IStreamSubscriptionManagerRetriever, ILifecycleParticipant<ILifecycleObservable>
    {
        public PersistentStreamProvider(string name, Configuration.StreamPubSubOptions pubsubOptions, Configuration.StreamLifecycleOptions lifeCycleOptions, IProviderRuntime runtime, Serialization.DeepCopier deepCopier, Microsoft.Extensions.Logging.ILogger<PersistentStreamProvider> logger) { }

        public bool IsRewindable { get { throw null; } }

        public string Name { get { throw null; } }

        public static Orleans.Streams.IStreamProvider Create(System.IServiceProvider services, string name) { throw null; }

        public System.Threading.Tasks.Task<object> ExecuteCommand(int command, object arg) { throw null; }

        public Orleans.Streams.IAsyncStream<T> GetStream<T>(Runtime.StreamId streamId) { throw null; }

        public Orleans.Streams.Core.IStreamSubscriptionManager GetStreamSubscriptionManager() { throw null; }

        public void Participate(ILifecycleObservable lifecycle) { }

        public static ILifecycleParticipant<TLifecycle> ParticipateIn<TLifecycle>(System.IServiceProvider serviceProvider, string name)
            where TLifecycle : ILifecycleObservable { throw null; }
    }

    public enum PersistentStreamProviderCommand
    {
        None = 0,
        StartAgents = 1,
        StopAgents = 2,
        GetAgentsState = 3,
        GetNumberRunningAgents = 4,
        AdapterCommandStartRange = 10000,
        AdapterCommandEndRange = 19999,
        AdapterFactoryCommandStartRange = 20000,
        AdapterFactoryCommandEndRange = 29999
    }

    public partial class PooledQueueCache : IPurgeObservable
    {
        public PooledQueueCache(ICacheDataAdapter cacheDataAdapter, Microsoft.Extensions.Logging.ILogger logger, ICacheMonitor cacheMonitor, System.TimeSpan? cacheMonitorWriteInterval, System.TimeSpan? purgeMetadataInterval = null) { }

        public bool IsEmpty { get { throw null; } }

        public int ItemCount { get { throw null; } }

        public CachedMessage? Newest { get { throw null; } }

        public CachedMessage? Oldest { get { throw null; } }

        public void Add(System.Collections.Generic.List<CachedMessage> messages, System.DateTime dequeueTime) { }

        public object GetCursor(Runtime.StreamId streamId, Orleans.Streams.StreamSequenceToken sequenceToken) { throw null; }

        public void RemoveOldestMessage() { }

        public bool TryGetNextMessage(object cursorObj, out Orleans.Streams.IBatchContainer message) { throw null; }
    }

    public abstract partial class PooledResource<T> : System.IDisposable where T : PooledResource<T>, System.IDisposable
    {
        public IObjectPool<T> Pool { set { } }

        public void Dispose() { }

        public virtual void OnResetState() { }

        public virtual void SignalPurge() { }
    }

    public partial class ReceiverMonitorDimensions
    {
        public ReceiverMonitorDimensions() { }

        public ReceiverMonitorDimensions(string queueId) { }

        public string QueueId { get { throw null; } set { } }
    }

    public static partial class SegmentBuilder
    {
        public static void Append(System.ArraySegment<byte> segment, ref int writerOffset, System.ReadOnlySpan<byte> bytes) { }

        public static void Append(System.ArraySegment<byte> segment, ref int writerOffset, string str) { }

        public static int CalculateAppendSize(System.ReadOnlySpan<byte> memory) { throw null; }

        public static int CalculateAppendSize(string str) { throw null; }

        public static System.ArraySegment<byte> ReadNextBytes(System.ArraySegment<byte> segment, ref int readerOffset) { throw null; }

        public static string ReadNextString(System.ArraySegment<byte> segment, ref int readerOffset) { throw null; }
    }

    public partial class SimpleQueueAdapterCache : Orleans.Streams.IQueueAdapterCache
    {
        public const string CacheSizePropertyName = "CacheSize";
        public SimpleQueueAdapterCache(Configuration.SimpleQueueCacheOptions options, string providerName, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }

        public Orleans.Streams.IQueueCache CreateQueueCache(Orleans.Streams.QueueId queueId) { throw null; }
    }

    public partial class SimpleQueueCache : Orleans.Streams.IQueueCache, Orleans.Streams.IQueueFlowController
    {
        public SimpleQueueCache(int cacheSize, Microsoft.Extensions.Logging.ILogger logger) { }

        public int Size { get { throw null; } }

        public virtual void AddToCache(System.Collections.Generic.IList<Orleans.Streams.IBatchContainer> msgs) { }

        public virtual Orleans.Streams.IQueueCacheCursor GetCacheCursor(Runtime.StreamId streamId, Orleans.Streams.StreamSequenceToken token) { throw null; }

        public int GetMaxAddCount() { throw null; }

        public virtual bool IsUnderPressure() { throw null; }

        public virtual bool TryPurgeFromCache(out System.Collections.Generic.IList<Orleans.Streams.IBatchContainer> purgedItems) { throw null; }
    }

    public partial class SimpleQueueCacheCursor : Orleans.Streams.IQueueCacheCursor, System.IDisposable
    {
        public SimpleQueueCacheCursor(SimpleQueueCache cache, Runtime.StreamId streamId, Microsoft.Extensions.Logging.ILogger logger) { }

        public void Dispose() { }

        protected virtual void Dispose(bool disposing) { }

        public virtual Orleans.Streams.IBatchContainer GetCurrent(out System.Exception exception) { throw null; }

        public virtual bool MoveNext() { throw null; }

        public void RecordDeliveryFailure() { }

        public virtual void Refresh(Orleans.Streams.StreamSequenceToken sequenceToken) { }

        public override string ToString() { throw null; }
    }

    public partial class TimePurgePredicate
    {
        public TimePurgePredicate(System.TimeSpan minTimeInCache, System.TimeSpan maxRelativeMessageAge) { }

        public virtual bool ShouldPurgeFromTime(System.TimeSpan timeInCache, System.TimeSpan relativeAge) { throw null; }
    }
}

namespace Orleans.Providers.Streams.Generator
{
    [GenerateSerializer]
    public sealed partial class GeneratedBatchContainer : Orleans.Streams.IBatchContainer
    {
        public GeneratedBatchContainer(Runtime.StreamId streamId, object payload, Common.EventSequenceTokenV2 token) { }

        [Id(2)]
        public System.DateTime EnqueueTimeUtc { get { throw null; } }

        [Id(3)]
        public object Payload { get { throw null; } }

        [Id(1)]
        public Common.EventSequenceTokenV2 RealToken { get { throw null; } }

        public Orleans.Streams.StreamSequenceToken SequenceToken { get { throw null; } }

        [Id(0)]
        public Runtime.StreamId StreamId { get { throw null; } }

        public System.Collections.Generic.IEnumerable<System.Tuple<T, Orleans.Streams.StreamSequenceToken>> GetEvents<T>() { throw null; }

        public bool ImportRequestContext() { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class GeneratedEvent
    {
        [Id(0)]
        public GeneratedEventType EventType { get { throw null; } set { } }

        [Id(1)]
        public int[] Payload { get { throw null; } set { } }

        public enum GeneratedEventType
        {
            Fill = 0,
            Report = 1
        }
    }

    public partial class GeneratorAdapterFactory : Orleans.Streams.IQueueAdapterFactory, Orleans.Streams.IQueueAdapter, Orleans.Streams.IQueueAdapterCache, IControllable
    {
        protected System.Func<Common.BlockPoolMonitorDimensions, Common.IBlockPoolMonitor> BlockPoolMonitorFactory;
        protected System.Func<Common.CacheMonitorDimensions, Common.ICacheMonitor> CacheMonitorFactory;
        protected System.Func<Common.ReceiverMonitorDimensions, Common.IQueueAdapterReceiverMonitor> ReceiverMonitorFactory;
        public GeneratorAdapterFactory(string providerName, Configuration.HashRingStreamQueueMapperOptions queueMapperOptions, Configuration.StreamStatisticOptions statisticOptions, System.IServiceProvider serviceProvider, Serialization.Serializer serializer, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }

        public Orleans.Streams.StreamProviderDirection Direction { get { throw null; } }

        public bool IsRewindable { get { throw null; } }

        public string Name { get { throw null; } }

        public static GeneratorAdapterFactory Create(System.IServiceProvider services, string name) { throw null; }

        public System.Threading.Tasks.Task<Orleans.Streams.IQueueAdapter> CreateAdapter() { throw null; }

        public Orleans.Streams.IQueueCache CreateQueueCache(Orleans.Streams.QueueId queueId) { throw null; }

        public Orleans.Streams.IQueueAdapterReceiver CreateReceiver(Orleans.Streams.QueueId queueId) { throw null; }

        public System.Threading.Tasks.Task<object> ExecuteCommand(int command, object arg) { throw null; }

        public System.Threading.Tasks.Task<Orleans.Streams.IStreamFailureHandler> GetDeliveryFailureHandler(Orleans.Streams.QueueId queueId) { throw null; }

        public Orleans.Streams.IQueueAdapterCache GetQueueAdapterCache() { throw null; }

        public Orleans.Streams.IStreamQueueMapper GetStreamQueueMapper() { throw null; }

        public void Init() { }

        public System.Threading.Tasks.Task QueueMessageBatchAsync<T>(Runtime.StreamId streamId, System.Collections.Generic.IEnumerable<T> events, Orleans.Streams.StreamSequenceToken token, System.Collections.Generic.Dictionary<string, object> requestContext) { throw null; }
    }

    public partial class GeneratorPooledCache : Orleans.Streams.IQueueCache, Orleans.Streams.IQueueFlowController, Common.ICacheDataAdapter
    {
        public GeneratorPooledCache(Common.IObjectPool<Common.FixedSizeBuffer> bufferPool, Microsoft.Extensions.Logging.ILogger logger, Serialization.Serializer serializer, Common.ICacheMonitor cacheMonitor, System.TimeSpan? monitorWriteInterval) { }

        public void AddToCache(System.Collections.Generic.IList<Orleans.Streams.IBatchContainer> messages) { }

        public Orleans.Streams.IBatchContainer GetBatchContainer(ref Common.CachedMessage cachedMessage) { throw null; }

        public Orleans.Streams.IQueueCacheCursor GetCacheCursor(Runtime.StreamId streamId, Orleans.Streams.StreamSequenceToken token) { throw null; }

        public int GetMaxAddCount() { throw null; }

        public Orleans.Streams.StreamSequenceToken GetSequenceToken(ref Common.CachedMessage cachedMessage) { throw null; }

        public bool IsUnderPressure() { throw null; }

        public bool TryPurgeFromCache(out System.Collections.Generic.IList<Orleans.Streams.IBatchContainer> purgedItems) { throw null; }
    }

    public partial interface IStreamGenerator
    {
        void Configure(System.IServiceProvider serviceProvider, IStreamGeneratorConfig generatorConfig);
        bool TryReadEvents(System.DateTime utcNow, int maxCount, out System.Collections.Generic.List<Orleans.Streams.IBatchContainer> events);
    }

    public partial interface IStreamGeneratorConfig
    {
        System.Type StreamGeneratorType { get; }
    }

    public enum StreamGeneratorCommand
    {
        Configure = 20000
    }
}

namespace Orleans.Runtime
{
    [Immutable]
    [GenerateSerializer]
    public readonly partial struct QualifiedStreamId : System.IEquatable<QualifiedStreamId>, System.IComparable<QualifiedStreamId>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable, System.IFormattable
    {
        [Id(1)]
        public readonly string ProviderName;
        [Id(0)]
        public readonly StreamId StreamId;
        public QualifiedStreamId(string providerName, StreamId streamId) { }

        public readonly int CompareTo(QualifiedStreamId other) { throw null; }

        public readonly bool Equals(QualifiedStreamId other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public readonly void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public static bool operator ==(QualifiedStreamId s1, QualifiedStreamId s2) { throw null; }

        public static implicit operator StreamId(QualifiedStreamId internalStreamId) { throw null; }

        public static bool operator !=(QualifiedStreamId s1, QualifiedStreamId s2) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string ToString() { throw null; }
    }

    [Immutable]
    [GenerateSerializer]
    public readonly partial struct StreamId : System.IEquatable<StreamId>, System.IComparable<StreamId>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable, System.IFormattable
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public System.ReadOnlyMemory<byte> FullKey { get { throw null; } }

        public System.ReadOnlyMemory<byte> Key { get { throw null; } }

        public System.ReadOnlyMemory<byte> Namespace { get { throw null; } }

        public readonly int CompareTo(StreamId other) { throw null; }

        public static StreamId Create(Streams.IStreamIdentity streamIdentity) { throw null; }

        public static StreamId Create(System.ReadOnlySpan<byte> ns, System.ReadOnlySpan<byte> key) { throw null; }

        public static StreamId Create(string ns, System.Guid key) { throw null; }

        public static StreamId Create(string ns, long key) { throw null; }

        public static StreamId Create(string ns, string key) { throw null; }

        public readonly bool Equals(StreamId other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public readonly string GetKeyAsString() { throw null; }

        public readonly string? GetNamespace() { throw null; }

        public readonly void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public static bool operator ==(StreamId s1, StreamId s2) { throw null; }

        public static bool operator !=(StreamId s1, StreamId s2) { throw null; }

        public static StreamId Parse(System.ReadOnlySpan<byte> value) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string ToString() { throw null; }
    }
}

namespace Orleans.Runtime.Providers
{
    public partial interface IMessageDeliveryBackoffProvider : Orleans.Internal.IBackoffProvider
    {
    }

    public partial interface IQueueReaderBackoffProvider : Orleans.Internal.IBackoffProvider
    {
    }
}

namespace Orleans.Streams
{
    public partial class AggregatedQueueFlowController : System.Collections.Generic.List<IQueueFlowController>, IQueueFlowController
    {
        public AggregatedQueueFlowController(int defaultMaxAddCount) { }

        public int GetMaxAddCount() { throw null; }
    }

    public static partial class AsyncBatchObservableExtensions
    {
        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncBatchObservable<T> obs, System.Func<System.Collections.Generic.IList<SequentialItem<T>>, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncBatchObservable<T> obs, System.Func<System.Collections.Generic.IList<SequentialItem<T>>, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncBatchObservable<T> obs, System.Func<System.Collections.Generic.IList<SequentialItem<T>>, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncBatchObservable<T> obs, System.Func<System.Collections.Generic.IList<SequentialItem<T>>, System.Threading.Tasks.Task> onNextAsync) { throw null; }
    }

    public static partial class AsyncObservableExtensions
    {
        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncObservable<T> obs, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, StreamSequenceToken token) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncObservable<T> obs, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync, StreamSequenceToken token) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncObservable<T> obs, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync, StreamSequenceToken token) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncObservable<T> obs, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncObservable<T> obs, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncObservable<T> obs, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync, StreamSequenceToken token) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncObservable<T> obs, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync<T>(this IAsyncObservable<T> obs, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync) { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class BatchContainerBatch : IBatchContainerBatch, IBatchContainer
    {
        public BatchContainerBatch(System.Collections.Generic.List<IBatchContainer> batchContainers) { }

        [Id(2)]
        public System.Collections.Generic.List<IBatchContainer> BatchContainers { get { throw null; } }

        [Id(1)]
        public StreamSequenceToken SequenceToken { get { throw null; } }

        [Id(0)]
        public Runtime.StreamId StreamId { get { throw null; } }

        public System.Collections.Generic.IEnumerable<System.Tuple<T, StreamSequenceToken>> GetEvents<T>() { throw null; }

        public bool ImportRequestContext() { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class CacheFullException : Runtime.OrleansException
    {
        public CacheFullException() { }

        public CacheFullException(string message, System.Exception inner) { }

        public CacheFullException(string message) { }
    }

    public partial class ConstructorStreamNamespacePredicateProvider : IStreamNamespacePredicateProvider
    {
        public const string Prefix = "ctor";
        public static string FormatPattern(System.Type predicateType, string constructorArgument) { throw null; }

        public bool TryGetPredicate(string predicatePattern, out IStreamNamespacePredicate predicate) { throw null; }
    }

    [GenerateSerializer]
    public partial class DataNotAvailableException : Runtime.OrleansException
    {
        public DataNotAvailableException() { }

        [System.Obsolete]
        protected DataNotAvailableException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public DataNotAvailableException(string message, System.Exception inner) { }

        public DataNotAvailableException(string message) { }
    }

    public sealed partial class DefaultStreamIdMapper : IStreamIdMapper
    {
        public const string Name = "default";
        public Runtime.IdSpan GetGrainKeyId(Metadata.GrainBindings grainBindings, Runtime.StreamId streamId) { throw null; }
    }

    public partial class DefaultStreamNamespacePredicateProvider : IStreamNamespacePredicateProvider
    {
        public bool TryGetPredicate(string predicatePattern, out IStreamNamespacePredicate predicate) { throw null; }
    }

    public partial class DeploymentBasedQueueBalancer : QueueBalancerBase, IStreamQueueBalancer
    {
        public DeploymentBasedQueueBalancer(Runtime.ISiloStatusOracle siloStatusOracle, IDeploymentConfiguration deploymentConfig, Configuration.DeploymentBasedQueueBalancerOptions options, System.IServiceProvider services, Microsoft.Extensions.Logging.ILogger<DeploymentBasedQueueBalancer> logger) : base(default!, default!) { }

        public static IStreamQueueBalancer Create(System.IServiceProvider services, string name, IDeploymentConfiguration deploymentConfiguration) { throw null; }

        public override System.Collections.Generic.IEnumerable<QueueId> GetMyQueues() { throw null; }

        public override System.Threading.Tasks.Task Initialize(IStreamQueueMapper queueMapper) { throw null; }

        protected override void OnClusterMembershipChange(System.Collections.Generic.HashSet<Runtime.SiloAddress> activeSilos) { }
    }

    [GenerateSerializer]
    public sealed partial class FaultedSubscriptionException : Runtime.OrleansException
    {
        public FaultedSubscriptionException() { }

        public FaultedSubscriptionException(string message, System.Exception innerException) { }

        public FaultedSubscriptionException(string message) { }
    }

    public sealed partial class HashRingBasedPartitionedStreamQueueMapper : HashRingBasedStreamQueueMapper
    {
        public HashRingBasedPartitionedStreamQueueMapper(System.Collections.Generic.IReadOnlyList<string> partitionIds, string queueNamePrefix) : base(default!, default!) { }

        public string QueueToPartition(QueueId queue) { throw null; }
    }

    public partial class HashRingBasedStreamQueueMapper : IConsistentRingStreamQueueMapper, IStreamQueueMapper
    {
        public HashRingBasedStreamQueueMapper(Configuration.HashRingStreamQueueMapperOptions options, string queueNamePrefix) { }

        public System.Collections.Generic.IEnumerable<QueueId> GetAllQueues() { throw null; }

        public QueueId GetQueueForStream(Runtime.StreamId streamId) { throw null; }

        public System.Collections.Generic.IEnumerable<QueueId> GetQueuesForRange(Runtime.IRingRange range) { throw null; }

        public override string ToString() { throw null; }
    }

    public partial interface IAsyncBatchObservable<T>
    {
        System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync(IAsyncBatchObserver<T> observer, StreamSequenceToken? token);
        System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync(IAsyncBatchObserver<T> observer);
    }

    public partial interface IAsyncBatchObserver<T>
    {
        System.Threading.Tasks.Task OnCompletedAsync();
        System.Threading.Tasks.Task OnErrorAsync(System.Exception ex);
        System.Threading.Tasks.Task OnNextAsync(System.Collections.Generic.IList<SequentialItem<T>> items);
    }

    public partial interface IAsyncBatchProducer<T> : IAsyncObserver<T>
    {
        System.Threading.Tasks.Task OnNextBatchAsync(System.Collections.Generic.IEnumerable<T> batch, StreamSequenceToken token = null);
    }

    public partial interface IAsyncObservable<T>
    {
        System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync(IAsyncObserver<T> observer, StreamSequenceToken? token, string? filterData = null);
        System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> SubscribeAsync(IAsyncObserver<T> observer);
    }

    public partial interface IAsyncObserver<in T>
    {
        System.Threading.Tasks.Task OnCompletedAsync();
        System.Threading.Tasks.Task OnErrorAsync(System.Exception ex);
        System.Threading.Tasks.Task OnNextAsync(T item, StreamSequenceToken? token = null);
    }

    public partial interface IAsyncStream
    {
        bool IsRewindable { get; }

        string ProviderName { get; }

        Runtime.StreamId StreamId { get; }
    }

    public partial interface IAsyncStream<T> : IAsyncStream, System.IEquatable<IAsyncStream<T>>, System.IComparable<IAsyncStream<T>>, IAsyncObservable<T>, IAsyncBatchObservable<T>, IAsyncBatchProducer<T>, IAsyncObserver<T>
    {
        System.Threading.Tasks.Task<System.Collections.Generic.IList<StreamSubscriptionHandle<T>>> GetAllSubscriptionHandles();
    }

    public partial interface IBatchContainer
    {
        StreamSequenceToken SequenceToken { get; }

        Runtime.StreamId StreamId { get; }

        System.Collections.Generic.IEnumerable<System.Tuple<T, StreamSequenceToken>> GetEvents<T>();
        bool ImportRequestContext();
    }

    public partial interface IBatchContainerBatch : IBatchContainer
    {
        System.Collections.Generic.List<IBatchContainer> BatchContainers { get; }
    }

    public partial interface IConsistentRingStreamQueueMapper : IStreamQueueMapper
    {
        System.Collections.Generic.IEnumerable<QueueId> GetQueuesForRange(Runtime.IRingRange range);
    }

    public partial interface IDeploymentConfiguration
    {
        System.Collections.Generic.IList<string> GetAllSiloNames();
    }

    public static partial class ImplicitConsumerGrainExtensions
    {
        public static StreamIdentity GetImplicitStreamIdentity(this IGrainWithGuidCompoundKey grain) { throw null; }
    }

    public partial interface IQueueAdapter
    {
        StreamProviderDirection Direction { get; }

        bool IsRewindable { get; }

        string Name { get; }

        IQueueAdapterReceiver CreateReceiver(QueueId queueId);
        System.Threading.Tasks.Task QueueMessageBatchAsync<T>(Runtime.StreamId streamId, System.Collections.Generic.IEnumerable<T> events, StreamSequenceToken token, System.Collections.Generic.Dictionary<string, object> requestContext);
    }

    public partial interface IQueueAdapterCache
    {
        IQueueCache CreateQueueCache(QueueId queueId);
    }

    public partial interface IQueueAdapterFactory
    {
        System.Threading.Tasks.Task<IQueueAdapter> CreateAdapter();
        System.Threading.Tasks.Task<IStreamFailureHandler> GetDeliveryFailureHandler(QueueId queueId);
        IQueueAdapterCache GetQueueAdapterCache();
        IStreamQueueMapper GetStreamQueueMapper();
    }

    public partial interface IQueueAdapterReceiver
    {
        System.Threading.Tasks.Task<System.Collections.Generic.IList<IBatchContainer>> GetQueueMessagesAsync(int maxCount);
        System.Threading.Tasks.Task Initialize(System.TimeSpan timeout);
        System.Threading.Tasks.Task MessagesDeliveredAsync(System.Collections.Generic.IList<IBatchContainer> messages);
        System.Threading.Tasks.Task Shutdown(System.TimeSpan timeout);
    }

    public partial interface IQueueCache : IQueueFlowController
    {
        void AddToCache(System.Collections.Generic.IList<IBatchContainer> messages);
        IQueueCacheCursor GetCacheCursor(Runtime.StreamId streamId, StreamSequenceToken token);
        bool IsUnderPressure();
        bool TryPurgeFromCache(out System.Collections.Generic.IList<IBatchContainer> purgedItems);
    }

    public partial interface IQueueCacheCursor : System.IDisposable
    {
        IBatchContainer GetCurrent(out System.Exception exception);
        bool MoveNext();
        void RecordDeliveryFailure();
        void Refresh(StreamSequenceToken token);
    }

    public partial interface IQueueDataAdapter<TQueueMessage>
    {
        TQueueMessage ToQueueMessage<T>(Runtime.StreamId streamId, System.Collections.Generic.IEnumerable<T> events, StreamSequenceToken token, System.Collections.Generic.Dictionary<string, object> requestContext);
    }

    public partial interface IQueueDataAdapter<TQueueMessage, TMessageBatch> : IQueueDataAdapter<TQueueMessage>
    {
        TMessageBatch FromQueueMessage(TQueueMessage queueMessage, long sequenceId);
    }

    public partial interface IQueueFlowController
    {
        int GetMaxAddCount();
    }

    public partial interface IStreamFailureHandler
    {
        bool ShouldFaultSubsriptionOnError { get; }

        System.Threading.Tasks.Task OnDeliveryFailure(Runtime.GuidId subscriptionId, string streamProviderName, Runtime.StreamId streamIdentity, StreamSequenceToken sequenceToken);
        System.Threading.Tasks.Task OnSubscriptionFailure(Runtime.GuidId subscriptionId, string streamProviderName, Runtime.StreamId streamIdentity, StreamSequenceToken sequenceToken);
    }

    public partial interface IStreamIdentity
    {
        System.Guid Guid { get; }

        string Namespace { get; }
    }

    public partial interface IStreamIdMapper
    {
        Runtime.IdSpan GetGrainKeyId(Metadata.GrainBindings grainBindings, Runtime.StreamId streamId);
    }

    public partial interface IStreamNamespacePredicate
    {
        string PredicatePattern { get; }

        bool IsMatch(string streamNamespace);
    }

    public partial interface IStreamNamespacePredicateProvider
    {
        bool TryGetPredicate(string predicatePattern, out IStreamNamespacePredicate predicate);
    }

    public partial interface IStreamProvider
    {
        bool IsRewindable { get; }

        string Name { get; }

        IAsyncStream<T> GetStream<T>(Runtime.StreamId streamId);
    }

    public partial interface IStreamPubSub
    {
        System.Threading.Tasks.Task<int> ConsumerCount(Runtime.QualifiedStreamId streamId);
        Runtime.GuidId CreateSubscriptionId(Runtime.QualifiedStreamId streamId, Runtime.GrainId streamConsumer);
        System.Threading.Tasks.Task<bool> FaultSubscription(Runtime.QualifiedStreamId streamId, Runtime.GuidId subscriptionId);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Core.StreamSubscription>> GetAllSubscriptions(Runtime.QualifiedStreamId streamId, Runtime.GrainId streamConsumer = default);
        System.Threading.Tasks.Task<int> ProducerCount(Runtime.QualifiedStreamId streamId);
        System.Threading.Tasks.Task RegisterConsumer(Runtime.GuidId subscriptionId, Runtime.QualifiedStreamId streamId, Runtime.GrainId streamConsumer, string filterData);
        System.Threading.Tasks.Task<System.Collections.Generic.ISet<PubSubSubscriptionState>> RegisterProducer(Runtime.QualifiedStreamId streamId, Runtime.GrainId streamProducer);
        System.Threading.Tasks.Task UnregisterConsumer(Runtime.GuidId subscriptionId, Runtime.QualifiedStreamId streamId);
        System.Threading.Tasks.Task UnregisterProducer(Runtime.QualifiedStreamId streamId, Runtime.GrainId streamProducer);
    }

    public partial interface IStreamQueueBalanceListener
    {
        System.Threading.Tasks.Task QueueDistributionChangeNotification();
    }

    public partial interface IStreamQueueBalancer
    {
        System.Collections.Generic.IEnumerable<QueueId> GetMyQueues();
        System.Threading.Tasks.Task Initialize(IStreamQueueMapper queueMapper);
        System.Threading.Tasks.Task Shutdown();
        bool SubscribeToQueueDistributionChangeEvents(IStreamQueueBalanceListener observer);
        bool UnSubscribeFromQueueDistributionChangeEvents(IStreamQueueBalanceListener observer);
    }

    public partial interface IStreamQueueCheckpointerFactory
    {
        System.Threading.Tasks.Task<IStreamQueueCheckpointer<string>> Create(string partition);
    }

    public partial interface IStreamQueueCheckpointer<TCheckpoint>
    {
        bool CheckpointExists { get; }

        System.Threading.Tasks.Task<TCheckpoint> Load();
        void Update(TCheckpoint offset, System.DateTime utcNow);
    }

    public partial interface IStreamQueueMapper
    {
        System.Collections.Generic.IEnumerable<QueueId> GetAllQueues();
        QueueId GetQueueForStream(Runtime.StreamId streamId);
    }

    public partial class LeaseBasedQueueBalancer : QueueBalancerBase, IStreamQueueBalancer
    {
        public LeaseBasedQueueBalancer(string name, Configuration.LeaseBasedQueueBalancerOptions options, LeaseProviders.ILeaseProvider leaseProvider, System.IServiceProvider services, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, System.TimeProvider timeProvider) : base(default!, default!) { }

        public static IStreamQueueBalancer Create(System.IServiceProvider services, string name) { throw null; }

        public override System.Collections.Generic.IEnumerable<QueueId> GetMyQueues() { throw null; }

        public override System.Threading.Tasks.Task Initialize(IStreamQueueMapper queueMapper) { throw null; }

        protected override void OnClusterMembershipChange(System.Collections.Generic.HashSet<Runtime.SiloAddress> activeSilos) { }

        public override System.Threading.Tasks.Task Shutdown() { throw null; }
    }

    public partial class LoadShedQueueFlowController : IQueueFlowController
    {
        internal LoadShedQueueFlowController() { }

        public static IQueueFlowController CreateAsPercentageOfCPU(int loadSheddingLimit, Configuration.LoadSheddingOptions options, Statistics.IEnvironmentStatisticsProvider environmentStatisticsProvider) { throw null; }

        public static IQueueFlowController CreateAsPercentOfLoadSheddingLimit(Configuration.LoadSheddingOptions options, Statistics.IEnvironmentStatisticsProvider environmentStatisticsProvider, int percentOfSiloSheddingLimit = 95) { throw null; }

        public int GetMaxAddCount() { throw null; }
    }

    public partial class NoOpStreamDeliveryFailureHandler : IStreamFailureHandler
    {
        public NoOpStreamDeliveryFailureHandler() { }

        public NoOpStreamDeliveryFailureHandler(bool faultOnError) { }

        public bool ShouldFaultSubsriptionOnError { get { throw null; } }

        public System.Threading.Tasks.Task OnDeliveryFailure(Runtime.GuidId subscriptionId, string streamProviderName, Runtime.StreamId streamId, StreamSequenceToken sequenceToken) { throw null; }

        public System.Threading.Tasks.Task OnSubscriptionFailure(Runtime.GuidId subscriptionId, string streamProviderName, Runtime.StreamId streamId, StreamSequenceToken sequenceToken) { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class ProviderStartException : Runtime.OrleansException
    {
        public ProviderStartException() { }

        public ProviderStartException(string message, System.Exception innerException) { }

        public ProviderStartException(string message) { }
    }

    [Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
    [GenerateSerializer]
    public sealed partial class PubSubSubscriptionState : System.IEquatable<PubSubSubscriptionState>
    {
        [Newtonsoft.Json.JsonProperty]
        [Id(2)]
        public Runtime.GrainId Consumer;
        [Newtonsoft.Json.JsonProperty]
        [Id(3)]
        public string FilterData;
        [Newtonsoft.Json.JsonProperty]
        [Id(4)]
        public SubscriptionStates state;
        [Newtonsoft.Json.JsonProperty]
        [Id(1)]
        public Runtime.QualifiedStreamId Stream;
        [Newtonsoft.Json.JsonProperty]
        [Id(0)]
        public Runtime.GuidId SubscriptionId;
        public PubSubSubscriptionState(Runtime.GuidId subscriptionId, Runtime.QualifiedStreamId streamId, Runtime.GrainId streamConsumer) { }

        [Newtonsoft.Json.JsonIgnore]
        public bool IsFaulted { get { throw null; } }

        public void AddFilter(string filterData) { }

        public bool Equals(Runtime.GuidId subscriptionId) { throw null; }

        public bool Equals(PubSubSubscriptionState other) { throw null; }

        public override bool Equals(object obj) { throw null; }

        public void Fault() { }

        public override int GetHashCode() { throw null; }

        public static bool operator ==(PubSubSubscriptionState left, PubSubSubscriptionState right) { throw null; }

        public static bool operator !=(PubSubSubscriptionState left, PubSubSubscriptionState right) { throw null; }

        public override string ToString() { throw null; }

        public enum SubscriptionStates
        {
            Active = 0,
            Faulted = 1
        }
    }

    public static partial class QueueAdapterConstants
    {
        public const int UNLIMITED_GET_QUEUE_MSG = -1;
    }

    public static partial class QueueAdapterExtensions
    {
        public static System.Threading.Tasks.Task QueueMessageAsync<T>(this IQueueAdapter adapter, Runtime.StreamId streamId, T evt, StreamSequenceToken token, System.Collections.Generic.Dictionary<string, object> requestContext) { throw null; }
    }

    public abstract partial class QueueBalancerBase : IStreamQueueBalancer
    {
        protected QueueBalancerBase(System.IServiceProvider sp, Microsoft.Extensions.Logging.ILogger logger) { }

        protected System.Threading.CancellationToken Cancellation { get { throw null; } }

        protected Microsoft.Extensions.Logging.ILogger Logger { get { throw null; } }

        protected Runtime.SiloAddress SiloAddress { get { throw null; } }

        public abstract System.Collections.Generic.IEnumerable<QueueId> GetMyQueues();
        public virtual System.Threading.Tasks.Task Initialize(IStreamQueueMapper queueMapper) { throw null; }

        protected System.Threading.Tasks.Task NotifyListeners() { throw null; }

        protected abstract void OnClusterMembershipChange(System.Collections.Generic.HashSet<Runtime.SiloAddress> activeSilos);
        public virtual System.Threading.Tasks.Task Shutdown() { throw null; }

        public bool SubscribeToQueueDistributionChangeEvents(IStreamQueueBalanceListener observer) { throw null; }

        public bool UnSubscribeFromQueueDistributionChangeEvents(IStreamQueueBalanceListener observer) { throw null; }
    }

    [GenerateSerializer]
    public sealed partial class QueueCacheMissException : DataNotAvailableException
    {
        public QueueCacheMissException() { }

        public QueueCacheMissException(StreamSequenceToken requested, StreamSequenceToken low, StreamSequenceToken high) { }

        public QueueCacheMissException(string message, System.Exception innerException) { }

        public QueueCacheMissException(string requested, string low, string high) { }

        public QueueCacheMissException(string message) { }

        [Id(2)]
        public string High { get { throw null; } }

        [Id(1)]
        public string Low { get { throw null; } }

        [Id(0)]
        public string Requested { get { throw null; } }

        [System.Obsolete]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    }

    [Immutable]
    [GenerateSerializer]
    public readonly partial struct QueueId : System.IEquatable<QueueId>, System.IComparable<QueueId>, System.ISpanFormattable, System.IFormattable
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public bool IsDefault { get { throw null; } }

        public readonly int CompareTo(QueueId other) { throw null; }

        public readonly bool Equals(QueueId other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public readonly uint GetNumericId() { throw null; }

        public static QueueId GetQueueId(string queueName, uint queueId, uint hash) { throw null; }

        public readonly string GetStringNamePrefix() { throw null; }

        public readonly uint GetUniformHashCode() { throw null; }

        public static bool operator ==(QueueId left, QueueId right) { throw null; }

        public static bool operator !=(QueueId left, QueueId right) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string ToString() { throw null; }

        public readonly string ToStringWithHashCode() { throw null; }
    }

    public partial class RegexStreamNamespacePredicate : IStreamNamespacePredicate
    {
        public RegexStreamNamespacePredicate(string regex) { }

        public string PredicatePattern { get { throw null; } }

        public bool IsMatch(string streamNameSpace) { throw null; }
    }

    public partial class SequentialItem<T>
    {
        public SequentialItem(T item, StreamSequenceToken token) { }

        public T Item { get { throw null; } }

        public StreamSequenceToken Token { get { throw null; } }
    }

    [GenerateSerializer]
    public sealed partial class StreamEventDeliveryFailureException : Runtime.OrleansException
    {
        public StreamEventDeliveryFailureException() { }

        [System.Obsolete]
        public StreamEventDeliveryFailureException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public StreamEventDeliveryFailureException(string message, System.Exception innerException) { }

        public StreamEventDeliveryFailureException(string message) { }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class StreamIdentity : IStreamIdentity
    {
        public StreamIdentity(System.Guid streamGuid, string streamNamespace) { }

        [Id(0)]
        public System.Guid Guid { get { throw null; } }

        [Id(1)]
        public string Namespace { get { throw null; } }

        public override bool Equals(object obj) { throw null; }

        public override int GetHashCode() { throw null; }
    }

    public partial class StreamPosition
    {
        public StreamPosition(Runtime.StreamId streamId, StreamSequenceToken sequenceToken) { }

        public StreamSequenceToken SequenceToken { get { throw null; } }

        public Runtime.StreamId StreamId { get { throw null; } }
    }

    public enum StreamProviderDirection
    {
        None = 0,
        ReadOnly = 1,
        WriteOnly = 2,
        ReadWrite = 3
    }

    public static partial class StreamProviderExtensions
    {
        public static IAsyncStream<T> GetStream<T>(this IStreamProvider streamProvider, System.Guid id) { throw null; }

        public static IAsyncStream<T> GetStream<T>(this IStreamProvider streamProvider, long id) { throw null; }

        public static IAsyncStream<T> GetStream<T>(this IStreamProvider streamProvider, string ns, System.Guid id) { throw null; }

        public static IAsyncStream<T> GetStream<T>(this IStreamProvider streamProvider, string ns, long id) { throw null; }

        public static IAsyncStream<T> GetStream<T>(this IStreamProvider streamProvider, string ns, string id) { throw null; }

        public static IAsyncStream<T> GetStream<T>(this IStreamProvider streamProvider, string id) { throw null; }
    }

    public enum StreamPubSubType
    {
        ExplicitGrainBasedAndImplicit = 0,
        ExplicitGrainBasedOnly = 1,
        ImplicitOnly = 2
    }

    [GenerateSerializer]
    public abstract partial class StreamSequenceToken : System.IEquatable<StreamSequenceToken>, System.IComparable<StreamSequenceToken>
    {
        public abstract int EventIndex { get; protected set; }
        public abstract long SequenceNumber { get; protected set; }

        public abstract int CompareTo(StreamSequenceToken other);
        public abstract bool Equals(StreamSequenceToken other);
    }

    public static partial class StreamSequenceTokenUtilities
    {
        public static bool Newer(this StreamSequenceToken me, StreamSequenceToken other) { throw null; }

        public static bool Older(this StreamSequenceToken me, StreamSequenceToken other) { throw null; }
    }

    public static partial class StreamSubscriptionHandleExtensions
    {
        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync<T>(this StreamSubscriptionHandle<T> handle, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, StreamSequenceToken token = null) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync<T>(this StreamSubscriptionHandle<T> handle, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync, StreamSequenceToken token = null) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync<T>(this StreamSubscriptionHandle<T> handle, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync, StreamSequenceToken token = null) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync<T>(this StreamSubscriptionHandle<T> handle, System.Func<T, StreamSequenceToken, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync, StreamSequenceToken token = null) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync<T>(this StreamSubscriptionHandle<T> handle, System.Func<System.Collections.Generic.IList<SequentialItem<T>>, System.Threading.Tasks.Task> onNextAsync, StreamSequenceToken token = null) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync<T>(this StreamSubscriptionHandle<T> handle, System.Func<System.Collections.Generic.IList<SequentialItem<T>>, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync, StreamSequenceToken token = null) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync<T>(this StreamSubscriptionHandle<T> handle, System.Func<System.Collections.Generic.IList<SequentialItem<T>>, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Exception, System.Threading.Tasks.Task> onErrorAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync, StreamSequenceToken token = null) { throw null; }

        public static System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync<T>(this StreamSubscriptionHandle<T> handle, System.Func<System.Collections.Generic.IList<SequentialItem<T>>, System.Threading.Tasks.Task> onNextAsync, System.Func<System.Threading.Tasks.Task> onCompletedAsync, StreamSequenceToken token = null) { throw null; }
    }

    public partial class StreamSubscriptionHandlerFactory : Core.IStreamSubscriptionHandleFactory
    {
        public StreamSubscriptionHandlerFactory(IStreamProvider streamProvider, Runtime.StreamId streamId, string providerName, Runtime.GuidId subscriptionId) { }

        public string ProviderName { get { throw null; } }

        public Runtime.StreamId StreamId { get { throw null; } }

        public Runtime.GuidId SubscriptionId { get { throw null; } }

        public StreamSubscriptionHandle<T> Create<T>() { throw null; }
    }

    [GenerateSerializer]
    public abstract partial class StreamSubscriptionHandle<T> : System.IEquatable<StreamSubscriptionHandle<T>>
    {
        public abstract System.Guid HandleId { get; }
        public abstract string ProviderName { get; }
        public abstract Runtime.StreamId StreamId { get; }

        public abstract bool Equals(StreamSubscriptionHandle<T> other);
        public abstract System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync(IAsyncBatchObserver<T> observer, StreamSequenceToken token = null);
        public abstract System.Threading.Tasks.Task<StreamSubscriptionHandle<T>> ResumeAsync(IAsyncObserver<T> observer, StreamSequenceToken token = null);
        public abstract System.Threading.Tasks.Task UnsubscribeAsync();
    }
}

namespace Orleans.Streams.Core
{
    public partial interface IStreamSubscriptionHandleFactory
    {
        string ProviderName { get; }

        Runtime.StreamId StreamId { get; }

        Runtime.GuidId SubscriptionId { get; }

        StreamSubscriptionHandle<T> Create<T>();
    }

    public partial interface IStreamSubscriptionManager
    {
        System.Threading.Tasks.Task<StreamSubscription> AddSubscription(string streamProviderName, Runtime.StreamId streamId, Runtime.GrainReference grainRef);
        System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<StreamSubscription>> GetSubscriptions(string streamProviderName, Runtime.StreamId streamId);
        System.Threading.Tasks.Task RemoveSubscription(string streamProviderName, Runtime.StreamId streamId, System.Guid subscriptionId);
    }

    public partial interface IStreamSubscriptionManagerAdmin
    {
        IStreamSubscriptionManager GetStreamSubscriptionManager(string managerType);
    }

    public partial interface IStreamSubscriptionManagerRetriever
    {
        IStreamSubscriptionManager GetStreamSubscriptionManager();
    }

    public partial interface IStreamSubscriptionObserver
    {
        System.Threading.Tasks.Task OnSubscribed(IStreamSubscriptionHandleFactory handleFactory);
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class StreamSubscription
    {
        public StreamSubscription(System.Guid subscriptionId, string streamProviderName, Runtime.StreamId streamId, Runtime.GrainId grainId) { }

        [Id(3)]
        public Runtime.GrainId GrainId { get { throw null; } }

        [Id(2)]
        public Runtime.StreamId StreamId { get { throw null; } }

        [Id(1)]
        public string StreamProviderName { get { throw null; } }

        [Id(0)]
        public System.Guid SubscriptionId { get { throw null; } }
    }

    public static partial class StreamSubscriptionManagerType
    {
        public const string ExplicitSubscribeOnly = "ExplicitSubscribeOnly";
    }
}

namespace Orleans.Streams.Filtering
{
    public partial interface IStreamFilter
    {
        bool ShouldDeliver(Runtime.StreamId streamId, object item, string filterData);
    }
}

namespace Orleans.Streams.PubSub
{
    public static partial class StreamSubscriptionManagerExtensions
    {
        public static System.Threading.Tasks.Task<Core.StreamSubscription> AddSubscription<TGrainInterface>(this Core.IStreamSubscriptionManager manager, IGrainFactory grainFactory, Runtime.StreamId streamId, string streamProviderName, Runtime.GrainId grainId)
            where TGrainInterface : IGrainWithGuidKey { throw null; }

        public static System.Threading.Tasks.Task<Core.StreamSubscription> AddSubscription<TGrainInterface>(this Core.IStreamSubscriptionManager manager, IGrainFactory grainFactory, Runtime.StreamId streamId, string streamProviderName, System.Guid primaryKey, string keyExtension, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithGuidCompoundKey { throw null; }

        public static System.Threading.Tasks.Task<Core.StreamSubscription> AddSubscription<TGrainInterface>(this Core.IStreamSubscriptionManager manager, IGrainFactory grainFactory, Runtime.StreamId streamId, string streamProviderName, System.Guid primaryKey, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithGuidKey { throw null; }

        public static System.Threading.Tasks.Task<Core.StreamSubscription> AddSubscription<TGrainInterface>(this Core.IStreamSubscriptionManager manager, IGrainFactory grainFactory, Runtime.StreamId streamId, string streamProviderName, long primaryKey, string keyExtension, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithIntegerCompoundKey { throw null; }

        public static System.Threading.Tasks.Task<Core.StreamSubscription> AddSubscription<TGrainInterface>(this Core.IStreamSubscriptionManager manager, IGrainFactory grainFactory, Runtime.StreamId streamId, string streamProviderName, long primaryKey, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithIntegerKey { throw null; }

        public static System.Threading.Tasks.Task<Core.StreamSubscription> AddSubscription<TGrainInterface>(this Core.IStreamSubscriptionManager manager, IGrainFactory grainFactory, Runtime.StreamId streamId, string streamProviderName, string primaryKey, string grainClassNamePrefix = null)
            where TGrainInterface : IGrainWithStringKey { throw null; }

        public static bool TryGetStreamSubscriptionManager(this IStreamProvider streamProvider, out Core.IStreamSubscriptionManager manager) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.Hosting
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SimpleGeneratorOptions : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Hosting.SimpleGeneratorOptions>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Hosting.SimpleGeneratorOptions instance) { }

        public global::Orleans.Hosting.SimpleGeneratorOptions ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Hosting.SimpleGeneratorOptions instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Hosting.SimpleGeneratorOptions value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_SimpleGeneratorOptions : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Hosting.SimpleGeneratorOptions>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public global::Orleans.Hosting.SimpleGeneratorOptions DeepCopy(global::Orleans.Hosting.SimpleGeneratorOptions original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.Providers
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_DefaultMemoryMessageBodySerializer : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Providers.DefaultMemoryMessageBodySerializer>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_DefaultMemoryMessageBodySerializer(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Providers.DefaultMemoryMessageBodySerializer> _activator, global::Orleans.Runtime.OnDeserializedCallbacks _hook0) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Providers.DefaultMemoryMessageBodySerializer instance) { }

        public global::Orleans.Providers.DefaultMemoryMessageBodySerializer ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Providers.DefaultMemoryMessageBodySerializer instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Providers.DefaultMemoryMessageBodySerializer value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 instance) { }

        public Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A instance) { }

        public Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_MemoryMessageBody : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Providers.MemoryMessageBody>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_MemoryMessageBody(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Providers.MemoryMessageBody> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Providers.MemoryMessageBody instance) { }

        public global::Orleans.Providers.MemoryMessageBody ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Providers.MemoryMessageBody instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Providers.MemoryMessageBody value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_MemoryMessageData : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Providers.MemoryMessageData>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Providers.MemoryMessageData>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_MemoryMessageData(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Providers.MemoryMessageData instance) { }

        public global::Orleans.Providers.MemoryMessageData ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Providers.MemoryMessageData instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Providers.MemoryMessageData value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 DeepCopy(Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A DeepCopy(Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_MemoryMessageBody : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Providers.MemoryMessageBody>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_MemoryMessageBody(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Providers.MemoryMessageBody> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Providers.MemoryMessageBody DeepCopy(global::Orleans.Providers.MemoryMessageBody original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_MemoryMessageData : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Providers.MemoryMessageData>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_MemoryMessageData(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Providers.MemoryMessageData DeepCopy(global::Orleans.Providers.MemoryMessageData result, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.Providers.IMemoryStreamQueueGrain), "74D60341" })]
    public sealed partial class Invokable_IMemoryStreamQueueGrain_GrainReference_74D60341 : global::Orleans.Runtime.TaskRequest
    {
        public global::Orleans.Providers.MemoryMessageData arg0;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.Providers.IMemoryStreamQueueGrain), "7A8F8C1A" })]
    public sealed partial class Invokable_IMemoryStreamQueueGrain_GrainReference_7A8F8C1A : global::Orleans.Runtime.TaskRequest<System.Collections.Generic.List<global::Orleans.Providers.MemoryMessageData>>
    {
        public int arg0;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task<System.Collections.Generic.List<global::Orleans.Providers.MemoryMessageData>> InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }
}

namespace OrleansCodeGen.Orleans.Providers.Streams.Common
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_EventSequenceToken : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Providers.Streams.Common.EventSequenceToken>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Providers.Streams.Common.EventSequenceToken>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_EventSequenceToken(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Providers.Streams.Common.EventSequenceToken instance) { }

        public global::Orleans.Providers.Streams.Common.EventSequenceToken ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Providers.Streams.Common.EventSequenceToken instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Providers.Streams.Common.EventSequenceToken value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_EventSequenceTokenV2 : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Providers.Streams.Common.EventSequenceTokenV2>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Providers.Streams.Common.EventSequenceTokenV2>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_EventSequenceTokenV2(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Providers.Streams.Common.EventSequenceTokenV2 instance) { }

        public global::Orleans.Providers.Streams.Common.EventSequenceTokenV2 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Providers.Streams.Common.EventSequenceTokenV2 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Providers.Streams.Common.EventSequenceTokenV2 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_EventSequenceToken : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Providers.Streams.Common.EventSequenceToken>, global::Orleans.Serialization.Cloning.IDeepCopier, global::Orleans.Serialization.Cloning.IBaseCopier<global::Orleans.Providers.Streams.Common.EventSequenceToken>, global::Orleans.Serialization.Cloning.IBaseCopier
    {
        public Copier_EventSequenceToken(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void DeepCopy(global::Orleans.Providers.Streams.Common.EventSequenceToken input, global::Orleans.Providers.Streams.Common.EventSequenceToken output, global::Orleans.Serialization.Cloning.CopyContext context) { }

        public global::Orleans.Providers.Streams.Common.EventSequenceToken DeepCopy(global::Orleans.Providers.Streams.Common.EventSequenceToken original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_EventSequenceTokenV2 : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Providers.Streams.Common.EventSequenceTokenV2>, global::Orleans.Serialization.Cloning.IDeepCopier, global::Orleans.Serialization.Cloning.IBaseCopier<global::Orleans.Providers.Streams.Common.EventSequenceTokenV2>, global::Orleans.Serialization.Cloning.IBaseCopier
    {
        public Copier_EventSequenceTokenV2(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void DeepCopy(global::Orleans.Providers.Streams.Common.EventSequenceTokenV2 input, global::Orleans.Providers.Streams.Common.EventSequenceTokenV2 output, global::Orleans.Serialization.Cloning.CopyContext context) { }

        public global::Orleans.Providers.Streams.Common.EventSequenceTokenV2 DeepCopy(global::Orleans.Providers.Streams.Common.EventSequenceTokenV2 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.Providers.Streams.Generator
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GeneratedBatchContainer : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GeneratedBatchContainer(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer instance) { }

        public global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_GeneratedEvent : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Providers.Streams.Generator.GeneratedEvent>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_GeneratedEvent(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Providers.Streams.Generator.GeneratedEvent instance) { }

        public global::Orleans.Providers.Streams.Generator.GeneratedEvent ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Providers.Streams.Generator.GeneratedEvent instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Providers.Streams.Generator.GeneratedEvent value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_GeneratedBatchContainer : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_GeneratedBatchContainer(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer DeepCopy(global::Orleans.Providers.Streams.Generator.GeneratedBatchContainer original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_GeneratedEvent : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Providers.Streams.Generator.GeneratedEvent>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_GeneratedEvent(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Providers.Streams.Generator.GeneratedEvent DeepCopy(global::Orleans.Providers.Streams.Generator.GeneratedEvent original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.Runtime
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_QualifiedStreamId : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.QualifiedStreamId>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Runtime.QualifiedStreamId>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public Codec_QualifiedStreamId(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Runtime.QualifiedStreamId instance) { }

        public global::Orleans.Runtime.QualifiedStreamId ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Runtime.QualifiedStreamId instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.QualifiedStreamId value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_StreamId : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.StreamId>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Runtime.StreamId>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Runtime.StreamId instance) { }

        public global::Orleans.Runtime.StreamId ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Runtime.StreamId instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.StreamId value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace OrleansCodeGen.Orleans.Streams
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_BatchContainerBatch : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.BatchContainerBatch>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_BatchContainerBatch(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Streams.BatchContainerBatch> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.BatchContainerBatch instance) { }

        public global::Orleans.Streams.BatchContainerBatch ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.BatchContainerBatch instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.BatchContainerBatch value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_CacheFullException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.CacheFullException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_CacheFullException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.CacheFullException instance) { }

        public global::Orleans.Streams.CacheFullException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.CacheFullException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.CacheFullException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_DataNotAvailableException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.DataNotAvailableException>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Streams.DataNotAvailableException>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_DataNotAvailableException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.DataNotAvailableException instance) { }

        public global::Orleans.Streams.DataNotAvailableException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.DataNotAvailableException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.DataNotAvailableException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_FaultedSubscriptionException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.FaultedSubscriptionException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_FaultedSubscriptionException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.FaultedSubscriptionException instance) { }

        public global::Orleans.Streams.FaultedSubscriptionException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.FaultedSubscriptionException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.FaultedSubscriptionException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ProviderStartException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.ProviderStartException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ProviderStartException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.ProviderStartException instance) { }

        public global::Orleans.Streams.ProviderStartException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.ProviderStartException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.ProviderStartException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_PubSubSubscriptionState : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.PubSubSubscriptionState>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_PubSubSubscriptionState(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Streams.PubSubSubscriptionState> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.PubSubSubscriptionState instance) { }

        public global::Orleans.Streams.PubSubSubscriptionState ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.PubSubSubscriptionState instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.PubSubSubscriptionState value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_QueueCacheMissException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.QueueCacheMissException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_QueueCacheMissException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.QueueCacheMissException instance) { }

        public global::Orleans.Streams.QueueCacheMissException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.QueueCacheMissException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.QueueCacheMissException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_QueueId : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.QueueId>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.Streams.QueueId>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.Streams.QueueId instance) { }

        public global::Orleans.Streams.QueueId ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.Streams.QueueId instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.QueueId value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_StreamEventDeliveryFailureException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.StreamEventDeliveryFailureException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_StreamEventDeliveryFailureException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.StreamEventDeliveryFailureException instance) { }

        public global::Orleans.Streams.StreamEventDeliveryFailureException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.StreamEventDeliveryFailureException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.StreamEventDeliveryFailureException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_StreamIdentity : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.StreamIdentity>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_StreamIdentity(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Streams.StreamIdentity> _activator) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.StreamIdentity instance) { }

        public global::Orleans.Streams.StreamIdentity ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.StreamIdentity instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.StreamIdentity value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_StreamSequenceToken : global::Orleans.Serialization.Serializers.AbstractTypeSerializer<global::Orleans.Streams.StreamSequenceToken>
    {
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_StreamSubscriptionHandle<T> : global::Orleans.Serialization.Serializers.AbstractTypeSerializer<global::Orleans.Streams.StreamSubscriptionHandle<T>>
    {
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_BatchContainerBatch : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Streams.BatchContainerBatch>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_BatchContainerBatch(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Streams.BatchContainerBatch> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public global::Orleans.Streams.BatchContainerBatch DeepCopy(global::Orleans.Streams.BatchContainerBatch original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_CacheFullException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Streams.CacheFullException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_CacheFullException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_DataNotAvailableException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Streams.DataNotAvailableException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_DataNotAvailableException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_FaultedSubscriptionException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Streams.FaultedSubscriptionException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_FaultedSubscriptionException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_ProviderStartException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Streams.ProviderStartException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_ProviderStartException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_PubSubSubscriptionState : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Streams.PubSubSubscriptionState>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_PubSubSubscriptionState(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Streams.PubSubSubscriptionState> _activator) { }

        public global::Orleans.Streams.PubSubSubscriptionState DeepCopy(global::Orleans.Streams.PubSubSubscriptionState original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_QueueCacheMissException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Streams.QueueCacheMissException, global::Orleans.Streams.DataNotAvailableException>
    {
        public Copier_QueueCacheMissException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }

        public override void DeepCopy(global::Orleans.Streams.QueueCacheMissException input, global::Orleans.Streams.QueueCacheMissException output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_StreamEventDeliveryFailureException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Streams.StreamEventDeliveryFailureException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_StreamEventDeliveryFailureException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_StreamSequenceToken : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Streams.StreamSequenceToken>, global::Orleans.Serialization.Cloning.IDeepCopier, global::Orleans.Serialization.Cloning.IBaseCopier<global::Orleans.Streams.StreamSequenceToken>, global::Orleans.Serialization.Cloning.IBaseCopier
    {
        public global::Orleans.Streams.StreamSequenceToken DeepCopy(global::Orleans.Streams.StreamSequenceToken original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }

        public void DeepCopy(global::Orleans.Streams.StreamSequenceToken input, global::Orleans.Streams.StreamSequenceToken output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_StreamSubscriptionHandle<T> : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Streams.StreamSubscriptionHandle<T>>, global::Orleans.Serialization.Cloning.IDeepCopier, global::Orleans.Serialization.Cloning.IBaseCopier<global::Orleans.Streams.StreamSubscriptionHandle<T>>, global::Orleans.Serialization.Cloning.IBaseCopier
    {
        public global::Orleans.Streams.StreamSubscriptionHandle<T> DeepCopy(global::Orleans.Streams.StreamSubscriptionHandle<T> original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }

        public void DeepCopy(global::Orleans.Streams.StreamSubscriptionHandle<T> input, global::Orleans.Streams.StreamSubscriptionHandle<T> output, global::Orleans.Serialization.Cloning.CopyContext context) { }
    }
}

namespace OrleansCodeGen.Orleans.Streams.Core
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_StreamSubscription : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Streams.Core.StreamSubscription>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_StreamSubscription(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Streams.Core.StreamSubscription> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Streams.Core.StreamSubscription instance) { }

        public global::Orleans.Streams.Core.StreamSubscription ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Streams.Core.StreamSubscription instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Streams.Core.StreamSubscription value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans.Configuration
{
    public partial class ConsulClusteringOptions
    {
        public System.Func<Consul.IConsulClient> CreateClient { get { throw null; } }

        public string KvRootFolder { get { throw null; } set { } }

        public void ConfigureConsulClient(System.Func<Consul.IConsulClient> createClientCallback) { }

        public void ConfigureConsulClient(System.Uri address, string aclClientToken = null) { }
    }

    public partial class ConsulClusteringOptionsValidator<TOptions> : IConfigurationValidator where TOptions : ConsulClusteringOptions
    {
        public ConsulClusteringOptionsValidator(TOptions options, string name = null) { }

        public string Name { get { throw null; } }

        public TOptions Options { get { throw null; } }

        public virtual void ValidateConfiguration() { }
    }
}

namespace Orleans.Hosting
{
    public static partial class ConsulUtilsHostingExtensions
    {
        public static IClientBuilder UseConsulClientClustering(this IClientBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.ConsulClusteringOptions>> configureOptions) { throw null; }

        public static IClientBuilder UseConsulClientClustering(this IClientBuilder builder, System.Action<Configuration.ConsulClusteringOptions> configureOptions) { throw null; }

        public static ISiloBuilder UseConsulSiloClustering(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.ConsulClusteringOptions>> configureOptions) { throw null; }

        public static ISiloBuilder UseConsulSiloClustering(this ISiloBuilder builder, System.Action<Configuration.ConsulClusteringOptions> configureOptions) { throw null; }
    }
}

namespace Orleans.Runtime.Host
{
    [Newtonsoft.Json.JsonObject]
    public partial class ConsulSiloRegistration
    {
        internal ConsulSiloRegistration() { }

        [Newtonsoft.Json.JsonProperty]
        public string Hostname { get { throw null; } set { } }

        [Newtonsoft.Json.JsonProperty]
        public int ProxyPort { get { throw null; } set { } }

        [Newtonsoft.Json.JsonProperty]
        public string SiloName { get { throw null; } set { } }

        [Newtonsoft.Json.JsonProperty]
        public System.DateTime StartTime { get { throw null; } set { } }

        [Newtonsoft.Json.JsonProperty]
        public SiloStatus Status { get { throw null; } set { } }

        [Newtonsoft.Json.JsonProperty]
        public System.Collections.Generic.List<SuspectingSilo> SuspectingSilos { get { throw null; } set { } }
    }

    [Newtonsoft.Json.JsonObject]
    public partial class SuspectingSilo
    {
        [Newtonsoft.Json.JsonProperty]
        public string Id { get { throw null; } set { } }

        [Newtonsoft.Json.JsonProperty]
        public System.DateTime Time { get { throw null; } set { } }
    }
}

namespace Orleans.Runtime.Membership
{
    public partial class ConsulBasedMembershipTable : IMembershipTable
    {
        public ConsulBasedMembershipTable(Microsoft.Extensions.Logging.ILogger<ConsulBasedMembershipTable> logger, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.ConsulClusteringOptions> membershipTableOptions, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.ClusterOptions> clusterOptions) { }

        public System.Threading.Tasks.Task CleanupDefunctSiloEntries(System.DateTimeOffset beforeDate) { throw null; }

        public System.Threading.Tasks.Task DeleteMembershipTableEntries(string clusterId) { throw null; }

        public System.Threading.Tasks.Task InitializeMembershipTable(bool tryInitTableVersion) { throw null; }

        public System.Threading.Tasks.Task<bool> InsertRow(MembershipEntry entry, TableVersion tableVersion) { throw null; }

        public System.Threading.Tasks.Task<MembershipTableData> ReadAll() { throw null; }

        public static System.Threading.Tasks.Task<MembershipTableData> ReadAll(Consul.IConsulClient consulClient, string clusterId, string kvRootFolder, Microsoft.Extensions.Logging.ILogger logger, string versionKey) { throw null; }

        public System.Threading.Tasks.Task<MembershipTableData> ReadRow(SiloAddress siloAddress) { throw null; }

        public System.Threading.Tasks.Task UpdateIAmAlive(MembershipEntry entry) { throw null; }

        public System.Threading.Tasks.Task<bool> UpdateRow(MembershipEntry entry, string etag, TableVersion tableVersion) { throw null; }
    }

    public partial class ConsulGatewayListProvider : Orleans.Messaging.IGatewayListProvider
    {
        public ConsulGatewayListProvider(Microsoft.Extensions.Logging.ILogger<ConsulGatewayListProvider> logger, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.ConsulClusteringOptions> options, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.GatewayOptions> gatewayOptions, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.ClusterOptions> clusterOptions) { }

        public bool IsUpdatable { get { throw null; } }

        public System.TimeSpan MaxStaleness { get { throw null; } }

        public System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Uri>> GetGateways() { throw null; }

        public System.Threading.Tasks.Task InitializeGatewayListProvider() { throw null; }
    }
}
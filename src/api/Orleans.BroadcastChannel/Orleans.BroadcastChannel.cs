//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans
{
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public partial class ImplicitChannelSubscriptionAttribute : System.Attribute, Metadata.IGrainBindingsProviderAttribute
    {
        public ImplicitChannelSubscriptionAttribute() { }

        public ImplicitChannelSubscriptionAttribute(BroadcastChannel.IChannelNamespacePredicate predicate, string channelIdMapper = null) { }

        public ImplicitChannelSubscriptionAttribute(string streamNamespace, string channelIdMapper = null) { }

        public ImplicitChannelSubscriptionAttribute(System.Type predicateType, string channelIdMapper = null) { }

        public string ChannelIdMapper { get { throw null; } }

        public BroadcastChannel.IChannelNamespacePredicate Predicate { get { throw null; } }

        public System.Collections.Generic.IEnumerable<System.Collections.Generic.Dictionary<string, string>> GetBindings(System.IServiceProvider services, System.Type grainClass, Runtime.GrainType grainType) { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public sealed partial class RegexImplicitChannelSubscriptionAttribute : ImplicitChannelSubscriptionAttribute
    {
        public RegexImplicitChannelSubscriptionAttribute(string pattern) { }
    }
}

namespace Orleans.BroadcastChannel
{
    public partial class BroadcastChannelOptions
    {
        public bool FireAndForgetDelivery { get { throw null; } set { } }
    }

    [GenerateSerializer]
    [Immutable]
    public readonly partial struct ChannelId : System.IEquatable<ChannelId>, System.IComparable<ChannelId>, System.Runtime.Serialization.ISerializable, System.ISpanFormattable, System.IFormattable
    {
        private readonly object _dummy;
        private readonly int _dummyPrimitive;
        public System.ReadOnlyMemory<byte> FullKey { get { throw null; } }

        public System.ReadOnlyMemory<byte> Key { get { throw null; } }

        public System.ReadOnlyMemory<byte> Namespace { get { throw null; } }

        public readonly int CompareTo(ChannelId other) { throw null; }

        public static ChannelId Create(System.ReadOnlySpan<byte> ns, System.ReadOnlySpan<byte> key) { throw null; }

        public static ChannelId Create(string ns, System.Guid key) { throw null; }

        public static ChannelId Create(string ns, string key) { throw null; }

        public readonly bool Equals(ChannelId other) { throw null; }

        public override readonly bool Equals(object? obj) { throw null; }

        public override readonly int GetHashCode() { throw null; }

        public readonly string GetKeyAsString() { throw null; }

        public readonly string? GetNamespace() { throw null; }

        public readonly void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }

        public static bool operator ==(ChannelId s1, ChannelId s2) { throw null; }

        public static bool operator !=(ChannelId s1, ChannelId s2) { throw null; }

        readonly string System.IFormattable.ToString(string? format, System.IFormatProvider? formatProvider) { throw null; }

        readonly bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider? provider) { throw null; }

        public override readonly string ToString() { throw null; }
    }

    public partial class ConstructorChannelNamespacePredicateProvider : IChannelNamespacePredicateProvider
    {
        public const string Prefix = "ctor";
        public static string FormatPattern(System.Type predicateType, string constructorArgument) { throw null; }

        public bool TryGetPredicate(string predicatePattern, out IChannelNamespacePredicate predicate) { throw null; }
    }

    public sealed partial class DefaultChannelIdMapper : IChannelIdMapper
    {
        public const string Name = "default";
        public Runtime.IdSpan GetGrainKeyId(Metadata.GrainBindings grainBindings, ChannelId streamId) { throw null; }
    }

    public partial class DefaultChannelNamespacePredicateProvider : IChannelNamespacePredicateProvider
    {
        public bool TryGetPredicate(string predicatePattern, out IChannelNamespacePredicate predicate) { throw null; }
    }

    public partial interface IBroadcastChannelProvider
    {
        IBroadcastChannelWriter<T> GetChannelWriter<T>(ChannelId streamId);
    }

    public partial interface IBroadcastChannelSubscription
    {
        ChannelId ChannelId { get; }

        string ProviderName { get; }

        System.Threading.Tasks.Task Attach<T>(System.Func<T, System.Threading.Tasks.Task> onPublished, System.Func<System.Exception, System.Threading.Tasks.Task> onError = null);
    }

    public partial interface IBroadcastChannelWriter<T>
    {
        System.Threading.Tasks.Task Publish(T item);
    }

    public partial interface IChannelIdMapper
    {
        Runtime.IdSpan GetGrainKeyId(Metadata.GrainBindings grainBindings, ChannelId streamId);
    }

    public partial interface IChannelNamespacePredicate
    {
        string PredicatePattern { get; }

        bool IsMatch(string streamNamespace);
    }

    public partial interface IChannelNamespacePredicateProvider
    {
        bool TryGetPredicate(string predicatePattern, out IChannelNamespacePredicate predicate);
    }

    public partial interface IOnBroadcastChannelSubscribed
    {
        System.Threading.Tasks.Task OnSubscribed(IBroadcastChannelSubscription streamSubscription);
    }

    public partial class RegexChannelNamespacePredicate : IChannelNamespacePredicate
    {
        public RegexChannelNamespacePredicate(string regex) { }

        public string PredicatePattern { get { throw null; } }

        public bool IsMatch(string streamNameSpace) { throw null; }
    }
}

namespace Orleans.Hosting
{
    public static partial class ChannelHostingExtensions
    {
        public static IClientBuilder AddBroadcastChannel(this IClientBuilder @this, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<BroadcastChannel.BroadcastChannelOptions>> configureOptions = null) { throw null; }

        public static IClientBuilder AddBroadcastChannel(this IClientBuilder @this, string name, System.Action<BroadcastChannel.BroadcastChannelOptions> configureOptions) { throw null; }

        public static ISiloBuilder AddBroadcastChannel(this ISiloBuilder @this, string name, System.Action<Microsoft.Extensions.Options.OptionsBuilder<BroadcastChannel.BroadcastChannelOptions>> configureOptions = null) { throw null; }

        public static ISiloBuilder AddBroadcastChannel(this ISiloBuilder @this, string name, System.Action<BroadcastChannel.BroadcastChannelOptions> configureOptions) { throw null; }

        public static BroadcastChannel.IBroadcastChannelProvider GetBroadcastChannelProvider(this IClusterClient @this, string name) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.BroadcastChannel
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ChannelId : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.BroadcastChannel.ChannelId>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IValueSerializer<global::Orleans.BroadcastChannel.ChannelId>, global::Orleans.Serialization.Serializers.IValueSerializer
    {
        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, scoped ref global::Orleans.BroadcastChannel.ChannelId instance) { }

        public global::Orleans.BroadcastChannel.ChannelId ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, scoped ref global::Orleans.BroadcastChannel.ChannelId instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.BroadcastChannel.ChannelId value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}
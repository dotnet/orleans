//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Microsoft.Extensions.Hosting
{
    public static partial class OrleansSiloGenericHostExtensions
    {
        public static DependencyInjection.IServiceCollection AddOrleans(this DependencyInjection.IServiceCollection services, System.Action<Orleans.Hosting.ISiloBuilder> configureDelegate) { throw null; }

        public static HostApplicationBuilder UseOrleans(this HostApplicationBuilder hostAppBuilder, System.Action<Orleans.Hosting.ISiloBuilder> configureDelegate) { throw null; }

        public static HostApplicationBuilder UseOrleans(this HostApplicationBuilder hostAppBuilder) { throw null; }

        public static IHostApplicationBuilder UseOrleans(this IHostApplicationBuilder hostAppBuilder, System.Action<Orleans.Hosting.ISiloBuilder> configureDelegate) { throw null; }

        public static IHostApplicationBuilder UseOrleans(this IHostApplicationBuilder hostAppBuilder) { throw null; }

        public static IHostBuilder UseOrleans(this IHostBuilder hostBuilder, System.Action<HostBuilderContext, Orleans.Hosting.ISiloBuilder> configureDelegate) { throw null; }

        public static IHostBuilder UseOrleans(this IHostBuilder hostBuilder, System.Action<Orleans.Hosting.ISiloBuilder> configureDelegate) { throw null; }
    }
}

namespace Orleans
{
    public partial interface IFacetMetadata
    {
    }

    public partial class PersistentStateAttributeMapper : Runtime.IAttributeToFactoryMapper<Runtime.PersistentStateAttribute>
    {
        public Factory<Runtime.IGrainContext, object> GetFactory(System.Reflection.ParameterInfo parameter, Runtime.PersistentStateAttribute attribute) { throw null; }
    }
}

namespace Orleans.Configuration
{
    public partial class ActivationCountBasedPlacementOptions
    {
        public const int DEFAULT_ACTIVATION_COUNT_PLACEMENT_CHOOSE_OUT_OF = 2;
        public int ChooseOutOf { get { throw null; } set { } }
    }

    public sealed partial class ActivationRebalancerOptions
    {
        public const int DEFAULT_ACTIVATION_MIGRATION_COUNT_LIMIT = int.MaxValue;
        public const double DEFAULT_ALLOWED_ENTROPY_DEVIATION = 0.0001D;
        public const double DEFAULT_CYCLE_NUMBER_WEIGHT = 0.1D;
        public const double DEFAULT_ENTROPY_QUANTUM = 0.0001D;
        public const int DEFAULT_MAX_STAGNANT_CYCLES = 3;
        public static readonly System.TimeSpan DEFAULT_REBALANCER_DUE_TIME;
        public const bool DEFAULT_SCALE_ALLOWED_ENTROPY_DEVIATION = true;
        public const int DEFAULT_SCALED_ENTROPY_DEVIATION_ACTIVATION_THRESHOLD = 10000;
        public static readonly System.TimeSpan DEFAULT_SESSION_CYCLE_PERIOD;
        public const double DEFAULT_SILO_NUMBER_WEIGHT = 0.1D;
        public const double MAX_SCALED_ENTROPY_DEVIATION = 0.1D;
        public int ActivationMigrationCountLimit { get { throw null; } set { } }

        public double AllowedEntropyDeviation { get { throw null; } set { } }

        public double CycleNumberWeight { get { throw null; } set { } }

        public double EntropyQuantum { get { throw null; } set { } }

        public int MaxStagnantCycles { get { throw null; } set { } }

        public System.TimeSpan RebalancerDueTime { get { throw null; } set { } }

        public bool ScaleAllowedEntropyDeviation { get { throw null; } set { } }

        public int ScaledEntropyDeviationActivationThreshold { get { throw null; } set { } }

        public System.TimeSpan SessionCyclePeriod { get { throw null; } set { } }

        public double SiloNumberWeight { get { throw null; } set { } }
    }

    public sealed partial class ActivationRepartitionerOptions
    {
        public const bool DEFAULT_ANCHORING_FILTER_ENABLED = true;
        public const int DEFAULT_MAX_EDGE_COUNT = 10000;
        public const int DEFAULT_MAX_UNPROCESSED_EDGES = 100000;
        public static readonly System.TimeSpan DEFAULT_MAXIMUM_ROUND_PERIOD;
        public static readonly System.TimeSpan DEFAULT_MINUMUM_ROUND_PERIOD;
        public const double DEFAULT_PROBABILISTIC_FILTERING_MAX_ALLOWED_ERROR = 0.01D;
        public static readonly System.TimeSpan DEFAULT_RECOVERY_PERIOD;
        public bool AnchoringFilterEnabled { get { throw null; } set { } }

        public int MaxEdgeCount { get { throw null; } set { } }

        public System.TimeSpan MaxRoundPeriod { get { throw null; } set { } }

        public int MaxUnprocessedEdges { get { throw null; } set { } }

        public System.TimeSpan MinRoundPeriod { get { throw null; } set { } }

        public double ProbabilisticFilteringMaxAllowedErrorRate { get { throw null; } set { } }

        public System.TimeSpan RecoveryPeriod { get { throw null; } set { } }
    }

    public partial class ConsistentRingOptions
    {
        public const int DEFAULT_NUM_VIRTUAL_RING_BUCKETS = 30;
        public const bool DEFAULT_USE_VIRTUAL_RING_BUCKETS = true;
        public int NumVirtualBucketsConsistentRing { get { throw null; } set { } }

        public bool UseVirtualBucketsConsistentRing { get { throw null; } set { } }
    }

    public partial class DeploymentLoadPublisherOptions
    {
        public static readonly System.TimeSpan DEFAULT_DEPLOYMENT_LOAD_PUBLISHER_REFRESH_TIME;
        public System.TimeSpan DeploymentLoadPublisherRefreshTime { get { throw null; } set { } }
    }

    public partial class DevelopmentClusterMembershipOptions
    {
        public System.Net.IPEndPoint PrimarySiloEndpoint { get { throw null; } set { } }
    }

    public partial class EndpointOptions
    {
        public const int DEFAULT_GATEWAY_PORT = 30000;
        public const int DEFAULT_SILO_PORT = 11111;
        public System.Net.IPAddress AdvertisedIPAddress { get { throw null; } set { } }

        public System.Net.IPEndPoint GatewayListeningEndpoint { get { throw null; } set { } }

        public int GatewayPort { get { throw null; } set { } }

        public System.Net.IPEndPoint SiloListeningEndpoint { get { throw null; } set { } }

        public int SiloPort { get { throw null; } set { } }
    }

    public partial class GrainCollectionOptions
    {
        public static readonly System.TimeSpan DEFAULT_ACTIVATION_TIMEOUT;
        public static readonly System.TimeSpan DEFAULT_COLLECTION_QUANTUM;
        public static readonly System.TimeSpan DEFAULT_DEACTIVATION_TIMEOUT;
        public System.TimeSpan ActivationTimeout { get { throw null; } set { } }

        public System.Collections.Generic.Dictionary<string, System.TimeSpan> ClassSpecificCollectionAge { get { throw null; } set { } }

        public System.TimeSpan CollectionAge { get { throw null; } set { } }

        public System.TimeSpan CollectionQuantum { get { throw null; } set { } }

        public System.TimeSpan DeactivationTimeout { get { throw null; } set { } }
    }

    public partial class GrainDirectoryOptions
    {
        public const int DEFAULT_CACHE_SIZE = 1000000;
        public const CachingStrategyType DEFAULT_CACHING_STRATEGY = 2;
        public static readonly System.TimeSpan DEFAULT_INITIAL_CACHE_TTL;
        public static readonly System.TimeSpan DEFAULT_MAXIMUM_CACHE_TTL;
        public const double DEFAULT_TTL_EXTENSION_FACTOR = 2D;
        public static readonly System.TimeSpan DEFAULT_UNREGISTER_RACE_DELAY;
        public int CacheSize { get { throw null; } set { } }

        public double CacheTTLExtensionFactor { get { throw null; } set { } }

        public CachingStrategyType CachingStrategy { get { throw null; } set { } }

        public System.TimeSpan InitialCacheTTL { get { throw null; } set { } }

        public System.TimeSpan LazyDeregistrationDelay { get { throw null; } set { } }

        public System.TimeSpan MaximumCacheTTL { get { throw null; } set { } }

        public enum CachingStrategyType
        {
            None = 0,
            LRU = 1,
            Adaptive = 2,
            Custom = 3
        }
    }

    public sealed partial class ResourceOptimizedPlacementOptions
    {
        public const int DEFAULT_ACTIVATION_COUNT_WEIGHT = 15;
        public const int DEFAULT_AVAILABLE_MEMORY_WEIGHT = 20;
        public const int DEFAULT_CPU_USAGE_WEIGHT = 40;
        public const int DEFAULT_LOCAL_SILO_PREFERENCE_MARGIN = 5;
        public const int DEFAULT_MAX_AVAILABLE_MEMORY_WEIGHT = 5;
        public const int DEFAULT_MEMORY_USAGE_WEIGHT = 20;
        public int ActivationCountWeight { get { throw null; } set { } }

        public int AvailableMemoryWeight { get { throw null; } set { } }

        public int CpuUsageWeight { get { throw null; } set { } }

        public int LocalSiloPreferenceMargin { get { throw null; } set { } }

        public int MaxAvailableMemoryWeight { get { throw null; } set { } }

        public int MemoryUsageWeight { get { throw null; } set { } }
    }

    public partial class SchedulingOptions
    {
        public static readonly System.TimeSpan DEFAULT_ACTIVATION_SCHEDULING_QUANTUM;
        public static readonly System.TimeSpan DEFAULT_DELAY_WARNING_THRESHOLD;
        public const int DEFAULT_MAX_PENDING_ITEMS_SOFT_LIMIT = 0;
        public static readonly System.TimeSpan DEFAULT_TURN_WARNING_THRESHOLD;
        public System.TimeSpan ActivationSchedulingQuantum { get { throw null; } set { } }

        public System.TimeSpan DelayWarningThreshold { get { throw null; } set { } }

        public int MaxPendingWorkItemsSoftLimit { get { throw null; } set { } }

        public System.TimeSpan StoppedActivationWarningInterval { get { throw null; } set { } }

        public System.TimeSpan TurnWarningLengthThreshold { get { throw null; } set { } }
    }

    public partial class SiloConnectionOptions : SiloConnectionOptions.ISiloConnectionBuilderOptions
    {
        public void ConfigureGatewayInboundConnection(System.Action<Microsoft.AspNetCore.Connections.IConnectionBuilder> configure) { }

        public void ConfigureSiloInboundConnection(System.Action<Microsoft.AspNetCore.Connections.IConnectionBuilder> configure) { }

        public void ConfigureSiloOutboundConnection(System.Action<Microsoft.AspNetCore.Connections.IConnectionBuilder> configure) { }

        void ISiloConnectionBuilderOptions.ConfigureGatewayInboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder builder) { }

        void ISiloConnectionBuilderOptions.ConfigureSiloInboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder builder) { }

        void ISiloConnectionBuilderOptions.ConfigureSiloOutboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder builder) { }

        public partial interface ISiloConnectionBuilderOptions
        {
            void ConfigureGatewayInboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder builder);
            void ConfigureSiloInboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder builder);
            void ConfigureSiloOutboundBuilder(Microsoft.AspNetCore.Connections.IConnectionBuilder builder);
        }
    }

    public partial class SiloMessagingOptions : MessagingOptions
    {
        public static readonly System.TimeSpan DEFAULT_CLIENT_GW_NOTIFICATION_TIMEOUT;
        public static readonly System.TimeSpan DEFAULT_CLIENT_REGISTRATION_REFRESH;
        public const int DEFAULT_MAX_ENQUEUED_REQUESTS_HARD_LIMIT = 0;
        public const int DEFAULT_MAX_ENQUEUED_REQUESTS_SOFT_LIMIT = 0;
        public const int DEFAULT_MAX_ENQUEUED_REQUESTS_STATELESS_WORKER_HARD_LIMIT = 0;
        public const int DEFAULT_MAX_ENQUEUED_REQUESTS_STATELESS_WORKER_SOFT_LIMIT = 0;
        public static readonly System.TimeSpan DEFAULT_MAX_REQUEST_PROCESSING_TIME;
        public static readonly System.TimeSpan DEFAULT_SHUTDOWN_REROUTE_TIMEOUT;
        public static readonly System.TimeSpan DEFAULT_WAIT_FOR_MESSAGE_TO_BE_QUEUED_FOR_OUTBOUND_TIME;
        public bool AssumeHomogenousSilosForTesting { get { throw null; } set { } }

        public System.TimeSpan ClientDropTimeout { get { throw null; } set { } }

        public System.TimeSpan ClientGatewayShutdownNotificationTimeout { get { throw null; } set { } }

        public System.TimeSpan ClientRegistrationRefresh { get { throw null; } set { } }

        public int GatewaySenderQueues { get { throw null; } set { } }

        public System.TimeSpan GrainWorkloadAnalysisPeriod { get { throw null; } set { } }

        public int MaxEnqueuedRequestsHardLimit { get { throw null; } set { } }

        public int MaxEnqueuedRequestsHardLimit_StatelessWorker { get { throw null; } set { } }

        public int MaxEnqueuedRequestsSoftLimit { get { throw null; } set { } }

        public int MaxEnqueuedRequestsSoftLimit_StatelessWorker { get { throw null; } set { } }

        public int MaxForwardCount { get { throw null; } set { } }

        public System.TimeSpan MaxRequestProcessingTime { get { throw null; } set { } }

        public System.TimeSpan RequestProcessingWarningTime { get { throw null; } set { } }

        public System.TimeSpan RequestQueueDelayWarningTime { get { throw null; } set { } }

        public System.TimeSpan ShutdownRerouteTimeout { get { throw null; } set { } }

        public int SiloSenderQueues { get { throw null; } set { } }

        public System.TimeSpan SystemResponseTimeout { get { throw null; } set { } }

        public System.TimeSpan WaitForMessageToBeQueuedForOutboundTime { get { throw null; } set { } }
    }

    public partial class SiloOptions
    {
        public string SiloName { get { throw null; } set { } }
    }

    public partial class StatelessWorkerOptions
    {
        public static readonly System.TimeSpan DEFAULT_IDLE_WORKERS_INSPECTION_PERIOD;
        public const int DEFAULT_MIN_IDLE_CYCLES_BEFORE_REMOVAL = 3;
        public const bool DEFAULT_REMOVE_IDLE_WORKERS = true;
        public System.TimeSpan IdleWorkersInspectionPeriod { get { throw null; } set { } }

        public int MinIdleCyclesBeforeRemoval { get { throw null; } set { } }

        public bool RemoveIdleWorkers { get { throw null; } set { } }
    }
}

namespace Orleans.Core
{
    public partial class StateStorageBridge<TState> : IStorage<TState>, IStorage, Runtime.IGrainMigrationParticipant
    {
        [System.Obsolete("Use StateStorageBridge(string, IGrainContext, IGrainStorage) instead.")]
        public StateStorageBridge(string name, Runtime.IGrainContext grainContext, Storage.IGrainStorage store, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Serialization.Serializers.IActivatorProvider activatorProvider) { }

        public StateStorageBridge(string name, Runtime.IGrainContext grainContext, Storage.IGrainStorage store) { }

        public string? Etag { get { throw null; } set { } }

        public bool RecordExists { get { throw null; } }

        public TState State { get { throw null; } set { } }

        public System.Threading.Tasks.Task ClearStateAsync() { throw null; }

        public void OnDehydrate(Runtime.IDehydrationContext dehydrationContext) { }

        public void OnRehydrate(Runtime.IRehydrationContext rehydrationContext) { }

        public System.Threading.Tasks.Task ReadStateAsync() { throw null; }

        public System.Threading.Tasks.Task WriteStateAsync() { throw null; }
    }
}

namespace Orleans.Hosting
{
    public static partial class ActivationRebalancerExtensions
    {
        [System.Diagnostics.CodeAnalysis.Experimental("ORLEANSEXP002")]
        public static ISiloBuilder AddActivationRebalancer(this ISiloBuilder builder) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ORLEANSEXP002")]
        public static ISiloBuilder AddActivationRebalancer<TProvider>(this ISiloBuilder builder)
            where TProvider : class, Placement.Rebalancing.IFailedSessionBackoffProvider { throw null; }
    }

    public static partial class ActivationRepartitioningExtensions
    {
        [System.Diagnostics.CodeAnalysis.Experimental("ORLEANSEXP001")]
        public static ISiloBuilder AddActivationRepartitioner(this ISiloBuilder builder) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ORLEANSEXP001")]
        public static ISiloBuilder AddActivationRepartitioner<TRule>(this ISiloBuilder builder)
            where TRule : class, Placement.Repartitioning.IImbalanceToleranceRule { throw null; }
    }

    public static partial class CoreHostingExtensions
    {
        public static ISiloBuilder AddActivityPropagation(this ISiloBuilder builder) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("ORLEANSEXP003")]
        public static ISiloBuilder AddDistributedGrainDirectory(this ISiloBuilder siloBuilder, string? name = null) { throw null; }

        public static ISiloBuilder UseDevelopmentClustering(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Options.OptionsBuilder<Configuration.DevelopmentClusterMembershipOptions>> configureOptions) { throw null; }

        public static ISiloBuilder UseDevelopmentClustering(this ISiloBuilder builder, System.Action<Configuration.DevelopmentClusterMembershipOptions> configureOptions) { throw null; }

        public static ISiloBuilder UseDevelopmentClustering(this ISiloBuilder builder, System.Net.IPEndPoint primarySiloEndpoint) { throw null; }

        public static ISiloBuilder UseLocalhostClustering(this ISiloBuilder builder, int siloPort = 11111, int gatewayPort = 30000, System.Net.IPEndPoint? primarySiloEndpoint = null, string serviceId = "dev", string clusterId = "dev") { throw null; }
    }

    public static partial class EndpointOptionsExtensions
    {
        public static ISiloBuilder ConfigureEndpoints(this ISiloBuilder builder, int siloPort, int gatewayPort, System.Net.Sockets.AddressFamily addressFamily = System.Net.Sockets.AddressFamily.InterNetwork, bool listenOnAnyHostAddress = false) { throw null; }

        public static ISiloBuilder ConfigureEndpoints(this ISiloBuilder builder, System.Net.IPAddress advertisedIP, int siloPort, int gatewayPort, bool listenOnAnyHostAddress = false) { throw null; }

        public static ISiloBuilder ConfigureEndpoints(this ISiloBuilder builder, string hostname, int siloPort, int gatewayPort, System.Net.Sockets.AddressFamily addressFamily = System.Net.Sockets.AddressFamily.InterNetwork, bool listenOnAnyHostAddress = false) { throw null; }
    }

    public static partial class GrainCallFilterSiloBuilderExtensions
    {
        public static ISiloBuilder AddIncomingGrainCallFilter(this ISiloBuilder builder, IIncomingGrainCallFilter filter) { throw null; }

        public static ISiloBuilder AddIncomingGrainCallFilter(this ISiloBuilder builder, IncomingGrainCallFilterDelegate filter) { throw null; }

        public static ISiloBuilder AddIncomingGrainCallFilter<TImplementation>(this ISiloBuilder builder)
            where TImplementation : class, IIncomingGrainCallFilter { throw null; }

        public static ISiloBuilder AddOutgoingGrainCallFilter(this ISiloBuilder builder, IOutgoingGrainCallFilter filter) { throw null; }

        public static ISiloBuilder AddOutgoingGrainCallFilter(this ISiloBuilder builder, OutgoingGrainCallFilterDelegate filter) { throw null; }

        public static ISiloBuilder AddOutgoingGrainCallFilter<TImplementation>(this ISiloBuilder builder)
            where TImplementation : class, IOutgoingGrainCallFilter { throw null; }
    }

    public static partial class GrainServicesSiloBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddGrainService(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Type grainServiceType) { throw null; }

        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddGrainService<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) { throw null; }

        public static ISiloBuilder AddGrainService<T>(this ISiloBuilder builder)
            where T : Runtime.GrainService { throw null; }
    }

    public static partial class HostingGrainExtensions
    {
        public static ISiloBuilder AddGrainExtension<TExtensionInterface, TExtension>(this ISiloBuilder builder)
            where TExtensionInterface : class, Runtime.IGrainExtension where TExtension : class, TExtensionInterface { throw null; }
    }

    public partial interface ISiloBuilder
    {
        Microsoft.Extensions.Configuration.IConfiguration Configuration { get; }

        Microsoft.Extensions.DependencyInjection.IServiceCollection Services { get; }
    }

    public static partial class PlacementStrategyExtensions
    {
        public static void AddPlacementDirector<TStrategy>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, Runtime.Placement.IPlacementDirector> createDirector, Microsoft.Extensions.DependencyInjection.ServiceLifetime strategyLifetime)
            where TStrategy : Runtime.PlacementStrategy, new() { }

        public static void AddPlacementDirector<TStrategy>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, Runtime.Placement.IPlacementDirector> createDirector)
            where TStrategy : Runtime.PlacementStrategy, new() { }

        public static ISiloBuilder AddPlacementDirector<TStrategy>(this ISiloBuilder builder, System.Func<System.IServiceProvider, Runtime.Placement.IPlacementDirector> createDirector)
            where TStrategy : Runtime.PlacementStrategy, new() { throw null; }

        public static void AddPlacementDirector<TStrategy, TDirector>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime strategyLifetime)
            where TStrategy : Runtime.PlacementStrategy, new()
            where TDirector : class, Runtime.Placement.IPlacementDirector { }

        public static void AddPlacementDirector<TStrategy, TDirector>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services)
            where TStrategy : Runtime.PlacementStrategy, new()
            where TDirector : class, Runtime.Placement.IPlacementDirector { }

        public static ISiloBuilder AddPlacementDirector<TStrategy, TDirector>(this ISiloBuilder builder)
            where TStrategy : Runtime.PlacementStrategy, new()
            where TDirector : class, Runtime.Placement.IPlacementDirector { throw null; }
    }

    public static partial class SiloBuilderExtensions
    {
        public static ISiloBuilder Configure<TOptions>(this ISiloBuilder builder, Microsoft.Extensions.Configuration.IConfiguration configuration)
            where TOptions : class { throw null; }

        public static ISiloBuilder Configure<TOptions>(this ISiloBuilder builder, System.Action<TOptions> configureOptions)
            where TOptions : class { throw null; }

        public static ISiloBuilder ConfigureLogging(this ISiloBuilder builder, System.Action<Microsoft.Extensions.Logging.ILoggingBuilder> configureLogging) { throw null; }

        public static ISiloBuilder ConfigureServices(this ISiloBuilder builder, System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection> configureDelegate) { throw null; }
    }

    public static partial class SiloBuilderStartupExtensions
    {
        public static ISiloBuilder AddStartupTask(this ISiloBuilder builder, Runtime.IStartupTask startupTask, int stage = 20000) { throw null; }

        public static ISiloBuilder AddStartupTask(this ISiloBuilder builder, System.Func<System.IServiceProvider, System.Threading.CancellationToken, System.Threading.Tasks.Task> startupTask, int stage = 20000) { throw null; }

        public static ISiloBuilder AddStartupTask<TStartup>(this ISiloBuilder builder, int stage = 20000)
            where TStartup : class, Runtime.IStartupTask { throw null; }
    }
}

namespace Orleans.Metadata
{
    public partial class GrainClassMap
    {
        public GrainClassMap(Serialization.TypeSystem.TypeConverter typeConverter, System.Collections.Immutable.ImmutableDictionary<Runtime.GrainType, System.Type> classes) { }

        public bool TryGetGrainClass(Runtime.GrainType grainType, out System.Type grainClass) { throw null; }
    }
}

namespace Orleans.Runtime
{
    [GenerateSerializer]
    [Immutable]
    public sealed partial class ClusterMember : System.IEquatable<ClusterMember>
    {
        public ClusterMember(SiloAddress siloAddress, SiloStatus status, string name) { }

        [Id(2)]
        public string Name { get { throw null; } }

        [Id(0)]
        public SiloAddress SiloAddress { get { throw null; } }

        [Id(1)]
        public SiloStatus Status { get { throw null; } }

        public bool Equals(ClusterMember other) { throw null; }

        public override bool Equals(object obj) { throw null; }

        public override int GetHashCode() { throw null; }

        public override string ToString() { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class ClusterMembershipSnapshot
    {
        public ClusterMembershipSnapshot(System.Collections.Immutable.ImmutableDictionary<SiloAddress, ClusterMember> members, MembershipVersion version) { }

        [Id(0)]
        public System.Collections.Immutable.ImmutableDictionary<SiloAddress, ClusterMember> Members { get { throw null; } }

        [Id(1)]
        public MembershipVersion Version { get { throw null; } }

        public ClusterMembershipUpdate AsUpdate() { throw null; }

        public ClusterMembershipUpdate CreateUpdate(ClusterMembershipSnapshot previous) { throw null; }

        public SiloStatus GetSiloStatus(SiloAddress silo) { throw null; }

        public override string ToString() { throw null; }
    }

    [GenerateSerializer]
    [Immutable]
    public sealed partial class ClusterMembershipUpdate
    {
        public ClusterMembershipUpdate(ClusterMembershipSnapshot snapshot, System.Collections.Immutable.ImmutableArray<ClusterMember> changes) { }

        [Id(0)]
        public System.Collections.Immutable.ImmutableArray<ClusterMember> Changes { get { throw null; } }

        public bool HasChanges { get { throw null; } }

        [Id(1)]
        public ClusterMembershipSnapshot Snapshot { get { throw null; } }
    }

    public partial class DefaultGrainActivator : IGrainActivator
    {
        public DefaultGrainActivator(System.IServiceProvider serviceProvider, System.Type grainClass) { }

        public object CreateInstance(IGrainContext context) { throw null; }

        public System.Threading.Tasks.ValueTask DisposeInstance(IGrainContext context, object instance) { throw null; }
    }

    public partial class GrainConstructorArgumentFactory
    {
        public GrainConstructorArgumentFactory(System.IServiceProvider serviceProvider, System.Type grainType) { }

        public System.Type[] ArgumentTypes { get { throw null; } }

        public object[] CreateArguments(IGrainContext grainContext) { throw null; }
    }

    public sealed partial class GrainContextActivator
    {
        public GrainContextActivator(System.Collections.Generic.IEnumerable<IGrainContextActivatorProvider> providers, System.Collections.Generic.IEnumerable<IConfigureGrainContextProvider> configureContextActions, Orleans.Metadata.GrainPropertiesResolver grainPropertiesResolver) { }

        public IGrainContext CreateInstance(GrainAddress address) { throw null; }
    }

    public abstract partial class GrainService : SystemTarget, Orleans.Services.IGrainService, ISystemTarget, IAddressable
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected GrainService() { }

        protected GrainService(GrainId grainId, Silo silo, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) { }

        protected int RangeSerialNumber { get { throw null; } }

        protected IRingRange RingRange { get { throw null; } }

        protected GrainServiceStatus Status { get { throw null; } set { } }

        protected System.Threading.CancellationTokenSource StoppedCancellationTokenSource { get { throw null; } }

        public virtual System.Threading.Tasks.Task Init(System.IServiceProvider serviceProvider) { throw null; }

        public virtual System.Threading.Tasks.Task OnRangeChange(IRingRange oldRange, IRingRange newRange, bool increased) { throw null; }

        public virtual System.Threading.Tasks.Task Start() { throw null; }

        protected virtual System.Threading.Tasks.Task StartInBackground() { throw null; }

        public virtual System.Threading.Tasks.Task Stop() { throw null; }

        protected enum GrainServiceStatus
        {
            Booting = 0,
            Started = 1,
            Stopped = 2
        }
    }

    public sealed partial class GrainTypeSharedContext
    {
        public GrainTypeSharedContext(GrainType grainType, IClusterManifestProvider clusterManifestProvider, Orleans.Metadata.GrainClassMap grainClassMap, Placement.PlacementStrategyResolver placementStrategyResolver, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.SiloMessagingOptions> messagingOptions, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.GrainCollectionOptions> collectionOptions, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.SchedulingOptions> schedulingOptions, Microsoft.Extensions.Options.IOptions<Orleans.Configuration.StatelessWorkerOptions> statelessWorkerOptions, IGrainRuntime grainRuntime, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, GrainReferences.GrainReferenceActivator grainReferenceActivator, System.IServiceProvider serviceProvider, Orleans.Serialization.Session.SerializerSessionPool serializerSessionPool) { }

        public System.TimeSpan CollectionAgeLimit { get { throw null; } }

        public Orleans.GrainDirectory.IGrainDirectory? GrainDirectory { get { throw null; } }

        public GrainReferences.GrainReferenceActivator GrainReferenceActivator { get { throw null; } }

        public string? GrainTypeName { get { throw null; } }

        public Microsoft.Extensions.Logging.ILogger Logger { get { throw null; } }

        public System.TimeSpan MaxRequestProcessingTime { get { throw null; } }

        public System.TimeSpan MaxWarningRequestProcessingTime { get { throw null; } }

        public Orleans.Configuration.SiloMessagingOptions MessagingOptions { get { throw null; } }

        public PlacementStrategy PlacementStrategy { get { throw null; } }

        public IGrainRuntime Runtime { get { throw null; } }

        public Orleans.Configuration.SchedulingOptions SchedulingOptions { get { throw null; } }

        public Orleans.Serialization.Session.SerializerSessionPool SerializerSessionPool { get { throw null; } }

        public Orleans.Configuration.StatelessWorkerOptions StatelessWorkerOptions { get { throw null; } }

        public TComponent? GetComponent<TComponent>() { throw null; }

        public void OnCreateActivation(IGrainContext grainContext) { }

        public void OnDestroyActivation(IGrainContext grainContext) { }

        public void SetComponent<TComponent>(TComponent? instance) { }
    }

    public partial class GrainTypeSharedContextResolver
    {
        public GrainTypeSharedContextResolver(System.Collections.Generic.IEnumerable<IConfigureGrainTypeComponents> configurators, Orleans.Metadata.GrainPropertiesResolver grainPropertiesResolver, System.IServiceProvider serviceProvider) { }

        public GrainTypeSharedContext GetComponents(GrainType grainType) { throw null; }
    }

    public partial interface IActivationWorkingSet
    {
        int Count { get; }

        void OnActivated(IActivationWorkingSetMember member);
        void OnActive(IActivationWorkingSetMember member);
        void OnDeactivated(IActivationWorkingSetMember member);
        void OnDeactivating(IActivationWorkingSetMember member);
    }

    public partial interface IActivationWorkingSetMember
    {
        bool IsCandidateForRemoval(bool wouldRemove);
    }

    public partial interface IActivationWorkingSetObserver
    {
        void OnActive(IActivationWorkingSetMember member);
        void OnAdded(IActivationWorkingSetMember member);
        void OnDeactivated(IActivationWorkingSetMember member);
        void OnDeactivating(IActivationWorkingSetMember member);
        void OnEvicted(IActivationWorkingSetMember member);
        void OnIdle(IActivationWorkingSetMember member);
    }

    public partial interface IAttributeToFactoryMapper<in TMetadata>
        where TMetadata : IFacetMetadata
    {
        Factory<IGrainContext, object> GetFactory(System.Reflection.ParameterInfo parameter, TMetadata metadata);
    }

    public partial interface IClusterMembershipService
    {
        ClusterMembershipSnapshot CurrentSnapshot { get; }

        System.Collections.Generic.IAsyncEnumerable<ClusterMembershipSnapshot> MembershipUpdates { get; }

        System.Threading.Tasks.ValueTask Refresh(MembershipVersion minimumVersion = default);
        System.Threading.Tasks.Task<bool> TryKill(SiloAddress siloAddress);
    }

    public partial interface IConfigureGrainContext
    {
        void Configure(IGrainContext context);
    }

    public partial interface IConfigureGrainContextProvider
    {
        bool TryGetConfigurator(GrainType grainType, Orleans.Metadata.GrainProperties properties, out IConfigureGrainContext configurator);
    }

    public partial interface IConfigureGrainTypeComponents
    {
        void Configure(GrainType grainType, Orleans.Metadata.GrainProperties properties, GrainTypeSharedContext shared);
    }

    public partial interface IFatalErrorHandler
    {
        bool IsUnexpected(System.Exception exception);
        void OnFatalException(object sender = null, string context = null, System.Exception exception = null);
    }

    public partial interface IGrainActivator
    {
        object CreateInstance(IGrainContext context);
        System.Threading.Tasks.ValueTask DisposeInstance(IGrainContext context, object instance);
    }

    public partial interface IGrainContextActivator
    {
        IGrainContext CreateContext(GrainAddress address);
    }

    public partial interface IGrainContextActivatorProvider
    {
        bool TryGet(GrainType grainType, out IGrainContextActivator activator);
    }

    public partial interface IGrainServiceFactory
    {
        T CastToGrainServiceReference<T>(GrainReference grainReference)
            where T : Orleans.Services.IGrainService;
    }

    public partial interface IHealthCheckParticipant : IHealthCheckable
    {
    }

    public partial interface IPersistentStateConfiguration
    {
        string StateName { get; }

        string StorageName { get; }
    }

    public partial interface IPersistentStateFactory
    {
        IPersistentState<TState> Create<TState>(IGrainContext context, IPersistentStateConfiguration config);
    }

    public partial interface IPersistentState<TState> : Core.IStorage<TState>, Core.IStorage
    {
    }

    public partial interface ISiloLifecycle : ILifecycleObservable
    {
        int HighestCompletedStage { get; }

        int LowestStoppedStage { get; }
    }

    public partial interface ISiloLifecycleSubject : ISiloLifecycle, ILifecycleObservable, ILifecycleObserver
    {
    }

    public partial interface ISiloStatusListener
    {
        void SiloStatusChangeNotification(SiloAddress updatedSilo, SiloStatus status);
    }

    public partial interface ISiloStatusOracle
    {
        SiloStatus CurrentStatus { get; }

        SiloAddress SiloAddress { get; }

        string SiloName { get; }

        System.Collections.Immutable.ImmutableArray<SiloAddress> GetActiveSilos();
        SiloStatus GetApproximateSiloStatus(SiloAddress siloAddress);
        System.Collections.Generic.Dictionary<SiloAddress, SiloStatus> GetApproximateSiloStatuses(bool onlyActive = false);
        bool IsDeadSilo(SiloAddress silo);
        bool IsFunctionalDirectory(SiloAddress siloAddress);
        bool SubscribeToSiloStatusEvents(ISiloStatusListener observer);
        bool TryGetSiloName(SiloAddress siloAddress, out string siloName);
        bool UnSubscribeFromSiloStatusEvents(ISiloStatusListener observer);
    }

    public partial interface IStartupTask
    {
        System.Threading.Tasks.Task Execute(System.Threading.CancellationToken cancellationToken);
    }

    [System.AttributeUsage(System.AttributeTargets.Parameter)]
    public partial class PersistentStateAttribute : System.Attribute, IFacetMetadata, IPersistentStateConfiguration
    {
        public PersistentStateAttribute(string stateName, string storageName = null) { }

        public string StateName { get { throw null; } }

        public string StorageName { get { throw null; } }
    }

    public partial class PersistentStateFactory : IPersistentStateFactory
    {
        public IPersistentState<TState> Create<TState>(IGrainContext context, IPersistentStateConfiguration cfg) { throw null; }

        protected virtual string GetFullStateName(IGrainContext context, IPersistentStateConfiguration cfg) { throw null; }
    }

    public sealed partial class Silo : System.IAsyncDisposable, System.IDisposable
    {
        public const string PrimarySiloName = "Primary";
        [System.Obsolete("This constructor is obsolete and may be removed in a future release. Use SiloHostBuilder to create an instance of ISiloHost instead.")]
        public Silo(ILocalSiloDetails siloDetails, System.IServiceProvider services) { }

        public SiloAddress SiloAddress { get { throw null; } }

        public System.Threading.Tasks.Task SiloTerminated { get { throw null; } }

        public void Dispose() { }

        public System.Threading.Tasks.ValueTask DisposeAsync() { throw null; }

        public System.Threading.Tasks.Task StartAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        public void Stop() { }

        public System.Threading.Tasks.Task StopAsync(System.Threading.CancellationToken cancellationToken) { throw null; }

        public override string ToString() { throw null; }
    }

    public partial class SiloLifecycleSubject : LifecycleSubject, ISiloLifecycleSubject, ISiloLifecycle, ILifecycleObservable, ILifecycleObserver
    {
        public SiloLifecycleSubject(Microsoft.Extensions.Logging.ILogger<SiloLifecycleSubject> logger) : base(default!) { }

        public int HighestCompletedStage { get { throw null; } }

        public int LowestStoppedStage { get { throw null; } }

        protected override string GetStageName(int stage) { throw null; }

        public override System.Threading.Tasks.Task OnStart(System.Threading.CancellationToken cancellationToken = default) { throw null; }

        protected override void OnStartStageCompleted(int stage) { }

        protected override void OnStopStageCompleted(int stage) { }

        protected override void PerfMeasureOnStart(int stage, System.TimeSpan elapsed) { }

        protected override void PerfMeasureOnStop(int stage, System.TimeSpan elapsed) { }

        public override System.IDisposable Subscribe(string observerName, int stage, ILifecycleObserver observer) { throw null; }
    }

    public abstract partial class SystemTarget : ISystemTarget, IAddressable, IGrainContext, Orleans.Serialization.Invocation.ITargetHolder, System.IEquatable<IGrainContext>, IGrainExtensionBinder, System.ISpanFormattable, System.IFormattable, System.IDisposable
    {
        public System.IServiceProvider ActivationServices { get { throw null; } }

        public System.Threading.Tasks.Task Deactivated { get { throw null; } }

        public GrainId GrainId { get { throw null; } }

        public GrainReference GrainReference { get { throw null; } }

        ActivationId IGrainContext.ActivationId { get { throw null; } }

        GrainAddress IGrainContext.Address { get { throw null; } }

        object IGrainContext.GrainInstance { get { throw null; } }

        IGrainLifecycle IGrainContext.ObservableLifecycle { get { throw null; } }

        public IWorkItemScheduler Scheduler { get { throw null; } }

        public SiloAddress Silo { get { throw null; } }

        public void Activate(System.Collections.Generic.Dictionary<string, object> requestContext, System.Threading.CancellationToken cancellationToken) { }

        public void Deactivate(DeactivationReason deactivationReason, System.Threading.CancellationToken cancellationToken) { }

        public void Dispose() { }

        public TComponent GetComponent<TComponent>() { throw null; }

        public TExtensionInterface GetExtension<TExtensionInterface>()
            where TExtensionInterface : class, IGrainExtension { throw null; }

        public (TExtension, TExtensionInterface) GetOrSetExtension<TExtension, TExtensionInterface>(System.Func<TExtension> newExtensionFunc)
            where TExtension : class, TExtensionInterface where TExtensionInterface : class, IGrainExtension { throw null; }

        public TTarget GetTarget<TTarget>()
            where TTarget : class { throw null; }

        public void Migrate(System.Collections.Generic.Dictionary<string, object> requestContext, System.Threading.CancellationToken cancellationToken) { }

        TComponent Orleans.Serialization.Invocation.ITargetHolder.GetComponent<TComponent>() { throw null; }

        public void ReceiveMessage(object message) { }

        public IGrainTimer RegisterGrainTimer(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task> callback, System.TimeSpan dueTime, System.TimeSpan period) { throw null; }

        public IGrainTimer RegisterGrainTimer<TState>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback, TState state, System.TimeSpan dueTime, System.TimeSpan period) { throw null; }

        public IGrainTimer RegisterTimer(System.Func<object, System.Threading.Tasks.Task> callback, object state, System.TimeSpan dueTime, System.TimeSpan period) { throw null; }

        public void Rehydrate(IRehydrationContext context) { }

        public void SetComponent<TComponent>(TComponent instance)
            where TComponent : class { }

        bool System.IEquatable<IGrainContext>.Equals(IGrainContext other) { throw null; }

        string System.IFormattable.ToString(string format, System.IFormatProvider formatProvider) { throw null; }

        bool System.ISpanFormattable.TryFormat(System.Span<char> destination, out int charsWritten, System.ReadOnlySpan<char> format, System.IFormatProvider provider) { throw null; }

        public sealed override string ToString() { throw null; }
    }
}

namespace Orleans.Runtime.Development
{
    public static partial class DevelopmentSiloBuilderExtensions
    {
        public static Orleans.Hosting.ISiloBuilder UseInMemoryLeaseProvider(this Orleans.Hosting.ISiloBuilder builder) { throw null; }
    }

    public partial class InMemoryLeaseProvider : LeaseProviders.ILeaseProvider
    {
        public InMemoryLeaseProvider(IGrainFactory grainFactory) { }

        public System.Threading.Tasks.Task<LeaseProviders.AcquireLeaseResult[]> Acquire(string category, LeaseProviders.LeaseRequest[] leaseRequests) { throw null; }

        public System.Threading.Tasks.Task Release(string category, LeaseProviders.AcquiredLease[] acquiredLeases) { throw null; }

        public System.Threading.Tasks.Task<LeaseProviders.AcquireLeaseResult[]> Renew(string category, LeaseProviders.AcquiredLease[] acquiredLeases) { throw null; }
    }
}

namespace Orleans.Runtime.GrainDirectory
{
    public static partial class GrainDirectoryCacheFactory
    {
        public static IGrainDirectoryCache CreateGrainDirectoryCache(System.IServiceProvider services, Orleans.Configuration.GrainDirectoryOptions options) { throw null; }
    }

    public partial interface IGrainDirectoryCache
    {
        System.Collections.Generic.IEnumerable<(GrainAddress ActivationAddress, int Version)> KeyValues { get; }

        void AddOrUpdate(GrainAddress value, int version);
        void Clear();
        bool LookUp(GrainId key, out GrainAddress result, out int version);
        bool Remove(GrainAddress key);
        bool Remove(GrainId key);
    }

    public partial interface IGrainDirectoryResolver
    {
        bool TryResolveGrainDirectory(GrainType grainType, Orleans.Metadata.GrainProperties properties, out Orleans.GrainDirectory.IGrainDirectory grainDirectory);
    }
}

namespace Orleans.Runtime.Hosting
{
    public static partial class DirectorySiloBuilderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddGrainDirectory<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, string name, System.Func<System.IServiceProvider, string, T> implementationFactory)
            where T : class, Orleans.GrainDirectory.IGrainDirectory { throw null; }

        public static Orleans.Hosting.ISiloBuilder AddGrainDirectory<T>(this Orleans.Hosting.ISiloBuilder builder, string name, System.Func<System.IServiceProvider, string, T> implementationFactory)
            where T : class, Orleans.GrainDirectory.IGrainDirectory { throw null; }
    }

    public static partial class StorageProviderExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddGrainStorage<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection collection, string name, System.Func<System.IServiceProvider, string, T> implementationFactory)
            where T : Storage.IGrainStorage { throw null; }
    }
}

namespace Orleans.Runtime.MembershipService
{
    [GenerateSerializer]
    public sealed partial class OrleansClusterConnectivityCheckFailedException : OrleansException
    {
        public OrleansClusterConnectivityCheckFailedException() { }

        public OrleansClusterConnectivityCheckFailedException(string message, System.Exception innerException) { }

        public OrleansClusterConnectivityCheckFailedException(string message) { }
    }

    [GenerateSerializer]
    public sealed partial class OrleansMissingMembershipEntryException : OrleansException
    {
        public OrleansMissingMembershipEntryException() { }

        public OrleansMissingMembershipEntryException(string message, System.Exception innerException) { }

        public OrleansMissingMembershipEntryException(string message) { }
    }
}

namespace Orleans.Runtime.MembershipService.SiloMetadata
{
    public partial interface ISiloMetadataCache
    {
        SiloMetadata GetSiloMetadata(SiloAddress siloAddress);
    }

    [GenerateSerializer]
    [Alias("Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata")]
    public partial record SiloMetadata()
    {
        public static SiloMetadata Empty { get { throw null; } }

        [Id(0)]
        public System.Collections.Immutable.ImmutableDictionary<string, string> Metadata { get { throw null; } }
    }

    public static partial class SiloMetadataHostingExtensions
    {
        public static Orleans.Hosting.ISiloBuilder UseSiloMetadata(this Orleans.Hosting.ISiloBuilder builder, Microsoft.Extensions.Configuration.IConfiguration configuration) { throw null; }

        public static Orleans.Hosting.ISiloBuilder UseSiloMetadata(this Orleans.Hosting.ISiloBuilder builder, Microsoft.Extensions.Configuration.IConfigurationSection configurationSection) { throw null; }

        public static Orleans.Hosting.ISiloBuilder UseSiloMetadata(this Orleans.Hosting.ISiloBuilder builder, System.Collections.Generic.Dictionary<string, string> metadata) { throw null; }

        public static Orleans.Hosting.ISiloBuilder UseSiloMetadata(this Orleans.Hosting.ISiloBuilder builder) { throw null; }
    }
}

namespace Orleans.Runtime.Placement
{
    public partial interface IPlacementStrategyResolver
    {
        bool TryResolvePlacementStrategy(GrainType grainType, Orleans.Metadata.GrainProperties properties, out PlacementStrategy result);
    }

    public sealed partial class PlacementDirectorResolver
    {
        public PlacementDirectorResolver(System.IServiceProvider services) { }

        public IPlacementDirector GetPlacementDirector(PlacementStrategy placementStrategy) { throw null; }
    }

    public sealed partial class PlacementStrategyResolver
    {
        public PlacementStrategyResolver(System.IServiceProvider services, System.Collections.Generic.IEnumerable<IPlacementStrategyResolver> resolvers, Orleans.Metadata.GrainPropertiesResolver grainPropertiesResolver) { }

        public PlacementStrategy GetPlacementStrategy(GrainType grainType) { throw null; }
    }
}

namespace Orleans.Runtime.Placement.Filtering
{
    public sealed partial class PlacementFilterDirectorResolver
    {
        public PlacementFilterDirectorResolver(System.IServiceProvider services) { }

        public Orleans.Placement.IPlacementFilterDirector GetFilterDirector(Orleans.Placement.PlacementFilterStrategy placementFilterStrategy) { throw null; }
    }

    public sealed partial class PlacementFilterStrategyResolver
    {
        public PlacementFilterStrategyResolver(System.IServiceProvider services, Orleans.Metadata.GrainPropertiesResolver grainPropertiesResolver) { }

        public Orleans.Placement.PlacementFilterStrategy[] GetPlacementFilterStrategies(GrainType grainType) { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    [System.Diagnostics.CodeAnalysis.Experimental("ORLEANSEXP004")]
    public partial class PreferredMatchSiloMetadataPlacementFilterAttribute : Orleans.Placement.PlacementFilterAttribute
    {
        public PreferredMatchSiloMetadataPlacementFilterAttribute(string[] orderedMetadataKeys, int minCandidates = 2, int order = 0) : base(default!) { }
    }

    public partial class PreferredMatchSiloMetadataPlacementFilterStrategy : Orleans.Placement.PlacementFilterStrategy
    {
        public PreferredMatchSiloMetadataPlacementFilterStrategy() : base(default) { }

        public PreferredMatchSiloMetadataPlacementFilterStrategy(string[] orderedMetadataKeys, int minCandidates, int order) : base(default) { }

        public int MinCandidates { get { throw null; } set { } }

        public string[] OrderedMetadataKeys { get { throw null; } set { } }

        public override void AdditionalInitialize(Orleans.Metadata.GrainProperties properties) { }

        protected override System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> GetAdditionalGrainProperties(System.IServiceProvider services, System.Type grainClass, GrainType grainType, System.Collections.Generic.IReadOnlyDictionary<string, string> existingProperties) { throw null; }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    [System.Diagnostics.CodeAnalysis.Experimental("ORLEANSEXP004")]
    public partial class RequiredMatchSiloMetadataPlacementFilterAttribute : Orleans.Placement.PlacementFilterAttribute
    {
        public RequiredMatchSiloMetadataPlacementFilterAttribute(string[] metadataKeys, int order = 0) : base(default!) { }
    }

    public partial class RequiredMatchSiloMetadataPlacementFilterStrategy : Orleans.Placement.PlacementFilterStrategy
    {
        public RequiredMatchSiloMetadataPlacementFilterStrategy() : base(default) { }

        public RequiredMatchSiloMetadataPlacementFilterStrategy(string[] metadataKeys, int order) : base(default) { }

        public string[] MetadataKeys { get { throw null; } }

        public override void AdditionalInitialize(Orleans.Metadata.GrainProperties properties) { }

        protected override System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>> GetAdditionalGrainProperties(System.IServiceProvider services, System.Type grainClass, GrainType grainType, System.Collections.Generic.IReadOnlyDictionary<string, string> existingProperties) { throw null; }
    }
}

namespace Orleans.Runtime.Services
{
    public abstract partial class GrainServiceClient<TGrainService> : Orleans.Services.IGrainServiceClient<TGrainService> where TGrainService : Orleans.Services.IGrainService
    {
        protected GrainServiceClient(System.IServiceProvider serviceProvider) { }

        protected GrainReference CurrentGrainReference { get { throw null; } }

        protected TGrainService GetGrainService(GrainId callingGrainId) { throw null; }

        protected TGrainService GetGrainService(SiloAddress destination) { throw null; }

        protected TGrainService GetGrainService(uint key) { throw null; }
    }
}

namespace Orleans.Runtime.Utilities
{
    public static partial class OrleansDebuggerHelper
    {
        public static object GetGrainInstance(object grainReference) { throw null; }
    }
}

namespace OrleansCodeGen.Orleans.LeaseProviders
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_ILeaseProvider_GrainReference_5C7B2877 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_ILeaseProvider_GrainReference_5C7B2877>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_ILeaseProvider_GrainReference_5C7B2877(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_ILeaseProvider_GrainReference_5C7B2877 instance) { }

        public Invokable_ILeaseProvider_GrainReference_5C7B2877 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_ILeaseProvider_GrainReference_5C7B2877 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_ILeaseProvider_GrainReference_5C7B2877 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_ILeaseProvider_GrainReference_ACF8E0DD : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_ILeaseProvider_GrainReference_ACF8E0DD>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_ILeaseProvider_GrainReference_ACF8E0DD(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_ILeaseProvider_GrainReference_ACF8E0DD instance) { }

        public Invokable_ILeaseProvider_GrainReference_ACF8E0DD ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_ILeaseProvider_GrainReference_ACF8E0DD instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_ILeaseProvider_GrainReference_ACF8E0DD value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_Invokable_ILeaseProvider_GrainReference_F2BF11D0 : global::Orleans.Serialization.Codecs.IFieldCodec<Invokable_ILeaseProvider_GrainReference_F2BF11D0>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_Invokable_ILeaseProvider_GrainReference_F2BF11D0(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, Invokable_ILeaseProvider_GrainReference_F2BF11D0 instance) { }

        public Invokable_ILeaseProvider_GrainReference_F2BF11D0 ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, Invokable_ILeaseProvider_GrainReference_F2BF11D0 instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, Invokable_ILeaseProvider_GrainReference_F2BF11D0 value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_ILeaseProvider_GrainReference_5C7B2877 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_ILeaseProvider_GrainReference_5C7B2877>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_Invokable_ILeaseProvider_GrainReference_5C7B2877(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public Invokable_ILeaseProvider_GrainReference_5C7B2877 DeepCopy(Invokable_ILeaseProvider_GrainReference_5C7B2877 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_ILeaseProvider_GrainReference_ACF8E0DD : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_ILeaseProvider_GrainReference_ACF8E0DD>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_Invokable_ILeaseProvider_GrainReference_ACF8E0DD(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public Invokable_ILeaseProvider_GrainReference_ACF8E0DD DeepCopy(Invokable_ILeaseProvider_GrainReference_ACF8E0DD original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_Invokable_ILeaseProvider_GrainReference_F2BF11D0 : global::Orleans.Serialization.Cloning.IDeepCopier<Invokable_ILeaseProvider_GrainReference_F2BF11D0>, global::Orleans.Serialization.Cloning.IDeepCopier
    {
        public Copier_Invokable_ILeaseProvider_GrainReference_F2BF11D0(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public Invokable_ILeaseProvider_GrainReference_F2BF11D0 DeepCopy(Invokable_ILeaseProvider_GrainReference_F2BF11D0 original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.LeaseProviders.ILeaseProvider), "5C7B2877" })]
    public sealed partial class Invokable_ILeaseProvider_GrainReference_5C7B2877 : global::Orleans.Runtime.TaskRequest<global::Orleans.LeaseProviders.AcquireLeaseResult[]>
    {
        public string arg0;
        public global::Orleans.LeaseProviders.LeaseRequest[] arg1;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task<global::Orleans.LeaseProviders.AcquireLeaseResult[]> InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.LeaseProviders.ILeaseProvider), "ACF8E0DD" })]
    public sealed partial class Invokable_ILeaseProvider_GrainReference_ACF8E0DD : global::Orleans.Runtime.TaskRequest<global::Orleans.LeaseProviders.AcquireLeaseResult[]>
    {
        public string arg0;
        public global::Orleans.LeaseProviders.AcquiredLease[] arg1;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task<global::Orleans.LeaseProviders.AcquireLeaseResult[]> InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::Orleans.CompoundTypeAlias(new[] { "inv", typeof(global::Orleans.Runtime.GrainReference), typeof(global::Orleans.LeaseProviders.ILeaseProvider), "F2BF11D0" })]
    public sealed partial class Invokable_ILeaseProvider_GrainReference_F2BF11D0 : global::Orleans.Runtime.TaskRequest
    {
        public string arg0;
        public global::Orleans.LeaseProviders.AcquiredLease[] arg1;
        public override void Dispose() { }

        public override string GetActivityName() { throw null; }

        public override object GetArgument(int index) { throw null; }

        public override int GetArgumentCount() { throw null; }

        public override string GetInterfaceName() { throw null; }

        public override System.Type GetInterfaceType() { throw null; }

        public override System.Reflection.MethodInfo GetMethod() { throw null; }

        public override string GetMethodName() { throw null; }

        public override object GetTarget() { throw null; }

        protected override System.Threading.Tasks.Task InvokeInner() { throw null; }

        public override void SetArgument(int index, object value) { }

        public override void SetTarget(global::Orleans.Serialization.Invocation.ITargetHolder holder) { }
    }
}

namespace OrleansCodeGen.Orleans.Runtime
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ClusterMember : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.ClusterMember>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ClusterMember(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.ClusterMember> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.ClusterMember instance) { }

        public global::Orleans.Runtime.ClusterMember ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.ClusterMember instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.ClusterMember value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ClusterMembershipSnapshot : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.ClusterMembershipSnapshot>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ClusterMembershipSnapshot(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.ClusterMembershipSnapshot> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.ClusterMembershipSnapshot instance) { }

        public global::Orleans.Runtime.ClusterMembershipSnapshot ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.ClusterMembershipSnapshot instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.ClusterMembershipSnapshot value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_ClusterMembershipUpdate : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.ClusterMembershipUpdate>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_ClusterMembershipUpdate(global::Orleans.Serialization.Activators.IActivator<global::Orleans.Runtime.ClusterMembershipUpdate> _activator, global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.ClusterMembershipUpdate instance) { }

        public global::Orleans.Runtime.ClusterMembershipUpdate ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.ClusterMembershipUpdate instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.ClusterMembershipUpdate value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }
}

namespace OrleansCodeGen.Orleans.Runtime.MembershipService
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_OrleansClusterConnectivityCheckFailedException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_OrleansClusterConnectivityCheckFailedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException instance) { }

        public global::Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_OrleansMissingMembershipEntryException : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException>, global::Orleans.Serialization.Codecs.IFieldCodec
    {
        public Codec_OrleansMissingMembershipEntryException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException instance) { }

        public global::Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_OrleansClusterConnectivityCheckFailedException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_OrleansClusterConnectivityCheckFailedException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_OrleansMissingMembershipEntryException : global::Orleans.Serialization.GeneratedCodeHelpers.OrleansGeneratedCodeHelper.ExceptionCopier<global::Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException, global::Orleans.Runtime.OrleansException>
    {
        public Copier_OrleansMissingMembershipEntryException(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) : base(default(Serialization.Serializers.ICodecProvider)!) { }
    }
}

namespace OrleansCodeGen.Orleans.Runtime.MembershipService.SiloMetadata
{
    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Codec_SiloMetadata : global::Orleans.Serialization.Codecs.IFieldCodec<global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata>, global::Orleans.Serialization.Codecs.IFieldCodec, global::Orleans.Serialization.Serializers.IBaseCodec<global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata>, global::Orleans.Serialization.Serializers.IBaseCodec
    {
        public Codec_SiloMetadata(global::Orleans.Serialization.Serializers.ICodecProvider codecProvider) { }

        public void Deserialize<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata instance) { }

        public global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata ReadValue<TReaderInput>(ref global::Orleans.Serialization.Buffers.Reader<TReaderInput> reader, global::Orleans.Serialization.WireProtocol.Field field) { throw null; }

        public void Serialize<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata instance)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }

        public void WriteField<TBufferWriter>(ref global::Orleans.Serialization.Buffers.Writer<TBufferWriter> writer, uint fieldIdDelta, System.Type expectedType, global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata value)
            where TBufferWriter : System.Buffers.IBufferWriter<byte> { }
    }

    [System.CodeDom.Compiler.GeneratedCode("OrleansCodeGen", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed partial class Copier_SiloMetadata : global::Orleans.Serialization.Cloning.IDeepCopier<global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata>, global::Orleans.Serialization.Cloning.IDeepCopier, global::Orleans.Serialization.Cloning.IBaseCopier<global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata>, global::Orleans.Serialization.Cloning.IBaseCopier
    {
        public void DeepCopy(global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata input, global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata output, global::Orleans.Serialization.Cloning.CopyContext context) { }

        public global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata DeepCopy(global::Orleans.Runtime.MembershipService.SiloMetadata.SiloMetadata original, global::Orleans.Serialization.Cloning.CopyContext context) { throw null; }
    }
}
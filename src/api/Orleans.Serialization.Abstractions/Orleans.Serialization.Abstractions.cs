//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Orleans
{
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Interface, AllowMultiple = true)]
    public sealed partial class AliasAttribute : System.Attribute
    {
        public AliasAttribute(string alias) { }

        public string Alias { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple = true)]
    public sealed partial class ApplicationPartAttribute : System.Attribute
    {
        public ApplicationPartAttribute(string assemblyName) { }

        public string AssemblyName { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Interface, AllowMultiple = true)]
    public sealed partial class CompoundTypeAliasAttribute : System.Attribute
    {
        public CompoundTypeAliasAttribute(params object[] components) { }

        public object[] Components { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public sealed partial class DefaultInvokableBaseTypeAttribute : System.Attribute
    {
        public DefaultInvokableBaseTypeAttribute(System.Type returnType, System.Type invokableBaseType) { }

        public System.Type InvokableBaseType { get { throw null; } }

        public string ProxyInvokeMethodName { get { throw null; } init { } }

        public System.Type ReturnType { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public sealed partial class DefaultInvokeMethodNameAttribute : System.Attribute
    {
        public DefaultInvokeMethodNameAttribute(System.Type returnType, string methodName) { }

        public string MethodName { get { throw null; } }

        public System.Type ReturnType { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple = true)]
    public sealed partial class GenerateCodeForDeclaringAssemblyAttribute : System.Attribute
    {
        public GenerateCodeForDeclaringAssemblyAttribute(System.Type type) { }

        public System.Type Type { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Constructor)]
    public sealed partial class GeneratedActivatorConstructorAttribute : System.Attribute
    {
    }

    public enum GenerateFieldIds
    {
        None = 0,
        PublicProperties = 1
    }

    [System.AttributeUsage(System.AttributeTargets.Interface, AllowMultiple = true)]
    public sealed partial class GenerateMethodSerializersAttribute : System.Attribute
    {
        public GenerateMethodSerializersAttribute(System.Type proxyBase, bool isExtension = false) { }

        public bool IsExtension { get { throw null; } }

        public System.Type ProxyBase { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum)]
    public sealed partial class GenerateSerializerAttribute : System.Attribute
    {
        public GenerateFieldIds GenerateFieldIds { get { throw null; } init { } }

        public bool IncludePrimaryConstructorParameters { get { throw null; } init { } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class GetCompletionSourceMethodNameAttribute : System.Attribute
    {
        public GetCompletionSourceMethodNameAttribute(string methodName) { }

        public string MethodName { get { throw null; } }
    }

    public partial interface IConverter<TValue, TSurrogate>
        where TSurrogate : struct
    {
        TValue ConvertFromSurrogate(in TSurrogate surrogate);
        TSurrogate ConvertToSurrogate(in TValue value);
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]
    public sealed partial class IdAttribute : System.Attribute
    {
        public IdAttribute(uint id) { }

        public uint Id { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue, Inherited = false)]
    public sealed partial class ImmutableAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    public sealed partial class InvokableBaseTypeAttribute : System.Attribute
    {
        public InvokableBaseTypeAttribute(System.Type proxyBaseClass, System.Type returnType, System.Type invokableBaseType) { }

        public System.Type InvokableBaseType { get { throw null; } }

        public System.Type ProxyBaseClass { get { throw null; } }

        public string ProxyInvokeMethodName { get { throw null; } init { } }

        public System.Type ReturnType { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    public sealed partial class InvokableCustomInitializerAttribute : System.Attribute
    {
        public InvokableCustomInitializerAttribute(string methodName, object methodArgumentValue) { }

        public InvokableCustomInitializerAttribute(string methodName) { }

        public int AttributeArgumentIndex { get { throw null; } init { } }

        public int AttributeArgumentName { get { throw null; } init { } }

        public object MethodArgumentValue { get { throw null; } }

        public string MethodName { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class InvokeMethodNameAttribute : System.Attribute
    {
        public InvokeMethodNameAttribute(string invokeMethodName) { }

        public string InvokeMethodName { get { throw null; } }
    }

    public partial interface IPopulator<TValue, TSurrogate>
        where TValue : class where TSurrogate : struct
    {
        void Populate(in TSurrogate surrogate, TValue value);
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)]
    public sealed partial class OmitDefaultMemberValuesAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Constructor)]
    public sealed partial class OrleansConstructorAttribute : Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)]
    public sealed partial class RegisterActivatorAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)]
    public sealed partial class RegisterConverterAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)]
    public sealed partial class RegisterCopierAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple = true)]
    public sealed partial class RegisterProviderAttribute : System.Attribute
    {
        public RegisterProviderAttribute(string name, string kind, string target, System.Type type) { }

        public string Kind { get { throw null; } }

        public string Name { get { throw null; } }

        public string Target { get { throw null; } }

        public System.Type Type { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)]
    public sealed partial class RegisterSerializerAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Method)]
    public sealed partial class ResponseTimeoutAttribute : System.Attribute
    {
        public ResponseTimeoutAttribute(string timeout) { }

        public System.TimeSpan? Timeout { get { throw null; } init { } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)]
    public sealed partial class SerializationCallbacksAttribute : System.Attribute
    {
        public SerializationCallbacksAttribute(System.Type hookType) { }

        public System.Type HookType { get { throw null; } }
    }

    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false)]
    public sealed partial class SerializerTransparentAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class SuppressReferenceTrackingAttribute : System.Attribute
    {
    }

    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)]
    public sealed partial class UseActivatorAttribute : System.Attribute
    {
    }
}

namespace Orleans.Invocation
{
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public sealed partial class ReturnValueProxyAttribute : System.Attribute
    {
        public ReturnValueProxyAttribute(string initializerMethodName) { }

        public string InitializerMethodName { get { throw null; } }
    }
}

namespace Orleans.Metadata
{
    [System.AttributeUsage(System.AttributeTargets.Assembly)]
    [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed partial class FrameworkPartAttribute : System.Attribute
    {
    }
}
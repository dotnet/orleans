CREATE TABLE "ORLEANSQUERY" 
(	
    "QUERYKEY" VARCHAR2(64 BYTE) NOT NULL ENABLE, 
    "QUERYTEXT" VARCHAR2(4000 BYTE), 
      
    CONSTRAINT "ORLEANSQUERY_PK" PRIMARY KEY ("QUERYKEY")
);
/
CREATE TABLE "ORLEANSMEMBERSHIPVERSIONTABLE" 
(	
    "DEPLOYMENTID" NVARCHAR2(150) NOT NULL ENABLE, 
    "TIMESTAMP" TIMESTAMP (6) DEFAULT sys_extract_utc(systimestamp) NOT NULL ENABLE, 
    "VERSION" NUMBER(*,0) DEFAULT 0, 
    
    CONSTRAINT "ORLEANSMEMBERSHIPVERSIONTA_PK" PRIMARY KEY ("DEPLOYMENTID")
);
/
CREATE TABLE "ORLEANSREMINDERSTABLE"
(
    "SERVICEID" NVARCHAR2(150) NOT NULL ENABLE,
    "GRAINID" VARCHAR2(150) NOT NULL,
    "REMINDERNAME" NVARCHAR2(150) NOT NULL,
    "STARTTIME" TIMESTAMP(6) NOT NULL ENABLE,
    "PERIOD" INT NULL,
    "GRAINHASH" INT NOT NULL,
    "VERSION" INT NOT NULL,
    
    CONSTRAINT PK_REMINDERSTABLE PRIMARY KEY(SERVICEID, GRAINID, REMINDERNAME)
);
/

CREATE TABLE "ORLEANSMEMBERSHIPTABLE" 
(	
    "DEPLOYMENTID" NVARCHAR2(150) NOT NULL ENABLE, 
    "ADDRESS" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
    "PORT" NUMBER(*,0) NOT NULL ENABLE, 
    "GENERATION" NUMBER(*,0) NOT NULL ENABLE, 
    "SILONAME" NVARCHAR2(150) NOT NULL ENABLE, 
    "HOSTNAME" NVARCHAR2(150) NOT NULL ENABLE, 
    "STATUS" NUMBER(*,0) NOT NULL ENABLE, 
    "PROXYPORT" NUMBER(*,0), 
    "SUSPECTTIMES" VARCHAR2(4000 BYTE), 
    "STARTTIME" TIMESTAMP (6) NOT NULL ENABLE, 
    "IAMALIVETIME" TIMESTAMP (6) NOT NULL ENABLE, 
    
    CONSTRAINT "ORLEANSMEMBERSHIPTABLE_PK" PRIMARY KEY ("DEPLOYMENTID", "ADDRESS", "PORT", "GENERATION"),
    CONSTRAINT "ORLEANSMEMBERSHIPTABLE_FK1" FOREIGN KEY ("DEPLOYMENTID")
	  REFERENCES "ORLEANSMEMBERSHIPVERSIONTABLE" ("DEPLOYMENTID") ENABLE
);
/
CREATE TABLE "ORLEANSCLIENTMETRICSTABLE" 
(	
    "DEPLOYMENTID" VARCHAR2(150 BYTE) NOT NULL ENABLE, 
    "CLIENTID" VARCHAR2(150 BYTE) NOT NULL ENABLE, 
    "TIMESTAMP" TIMESTAMP (6) DEFAULT sys_extract_utc(systimestamp) NOT NULL ENABLE, 
    "ADDRESS" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
    "HOSTNAME" NVARCHAR2(150) NOT NULL ENABLE, 
    "CPUUSAGE" FLOAT(126) NOT NULL ENABLE, 
    "MEMORYUSAGE" NUMBER(19,0) NOT NULL ENABLE, 
    "SENDQUEUELENGTH" NUMBER(*,0) NOT NULL ENABLE, 
    "RECEIVEQUEUELENGTH" NUMBER(*,0) NOT NULL ENABLE, 
    "SENTMESSAGES" NUMBER(19,0) NOT NULL ENABLE, 
    "RECEIVEDMESSAGES" NUMBER(19,0) NOT NULL ENABLE, 
    "CONNECTEDGATEWAYCOUNT" NUMBER(19,0) NOT NULL ENABLE,
    
	 CONSTRAINT "ORLEANSCLIENTMETRICSTABLE_PK" PRIMARY KEY ("DEPLOYMENTID", "CLIENTID")
);
/
 CREATE TABLE "ORLEANSSILOMETRICSTABLE" 
(	
    "DEPLOYMENTID" NVARCHAR2(150) NOT NULL ENABLE, 
    "SILOID" NVARCHAR2(150) NOT NULL ENABLE, 
    "TIMESTAMP" TIMESTAMP (6) DEFAULT sys_extract_utc(systimestamp) NOT NULL ENABLE, 
    "ADDRESS" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
    "PORT" NUMBER(*,0) NOT NULL ENABLE, 
    "GENERATION" NUMBER(*,0) NOT NULL ENABLE, 
    "HOSTNAME" NVARCHAR2(150) NOT NULL ENABLE, 
    "GATEWAYADDRESS" VARCHAR2(45 BYTE) NOT NULL ENABLE, 
    "GATEWAYPORT" NUMBER(*,0) NOT NULL ENABLE, 
    "CPUUSAGE" FLOAT(126) NOT NULL ENABLE, 
    "MEMORYUSAGE" NUMBER(19,0) NOT NULL ENABLE, 
    "SENDQUEUELENGTH" NUMBER(*,0) NOT NULL ENABLE, 
    "RECEIVEQUEUELENGTH" NUMBER(*,0) NOT NULL ENABLE, 
    "SENTMESSAGES" NUMBER(19,0) NOT NULL ENABLE, 
    "RECEIVEDMESSAGES" NUMBER(19,0) NOT NULL ENABLE, 
    "ACTIVATIONCOUNT" NUMBER(*,0) NOT NULL ENABLE, 
    "RECENTLYUSEDACTIVATIONCOUNT" NUMBER(*,0) NOT NULL ENABLE, 
    "REQUESTQUEUELENGTH" NUMBER(19,0) NOT NULL ENABLE, 
    "ISOVERLOADED" NUMBER(*,0) NOT NULL ENABLE, 
    "CLIENTCOUNT" NUMBER(19,0) NOT NULL ENABLE, 
    
    CONSTRAINT "ORLEANSSILOMETRICSTABLE_PK" PRIMARY KEY ("DEPLOYMENTID", "SILOID"), 
    CONSTRAINT "ORLEANSSILOMETRICSTABLE_FK1" FOREIGN KEY ("DEPLOYMENTID") 
	  REFERENCES "ORLEANSMEMBERSHIPVERSIONTABLE" ("DEPLOYMENTID") ON DELETE CASCADE ENABLE
);
/

CREATE TABLE "STORAGE" 
(	
  "GRAINIDHASH" NUMBER(*,0) NOT NULL ENABLE, 
	"GRAINIDN0" NUMBER(19,0) NOT NULL ENABLE, 
	"GRAINIDN1" NUMBER(19,0) NOT NULL ENABLE, 
	"GRAINTYPEHASH" NUMBER(*,0) NOT NULL ENABLE, 
	"GRAINTYPESTRING" NVARCHAR2(512) NOT NULL ENABLE, 
	"GRAINIDEXTENSIONSTRING" NVARCHAR2(512), 
	"SERVICEID" NVARCHAR2(150) NOT NULL ENABLE, 
	"PAYLOADBINARY" BLOB, 
	"PAYLOADXML" NCLOB, 
	"PAYLOADJSON" NCLOB, 
	"MODIFIEDON" TIMESTAMP (6) NOT NULL ENABLE, 
	"VERSION" NUMBER(*,0)
);
CREATE INDEX "IX_STORAGE" ON "STORAGE" ("GRAINIDHASH", "GRAINTYPEHASH");
/
CREATE TABLE "ORLEANSSTATISTICSTABLE" 
   (	"ORLEANSSTATISTICSTABLEID" NUMBER(*,0) GENERATED ALWAYS AS IDENTITY MINVALUE 0 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 0 CACHE 20 NOORDER  NOCYCLE  NOT NULL ENABLE, 
	"DEPLOYMENTID" NVARCHAR2(150) NOT NULL ENABLE, 
	"TIMESTAMP" TIMESTAMP (6) DEFAULT sys_extract_utc(systimestamp) NOT NULL ENABLE, 
	"ID" NVARCHAR2(250) NOT NULL ENABLE, 
	"HOSTNAME" NVARCHAR2(150) NOT NULL ENABLE, 
	"NAME" NVARCHAR2(150) NOT NULL ENABLE, 
	"ISVALUEDELTA" NUMBER(*,0) NOT NULL ENABLE, 
	"STATVALUE" NVARCHAR2(1024) NOT NULL ENABLE, 
	"STATISTIC" NVARCHAR2(512) NOT NULL ENABLE, 
	 CONSTRAINT "ORLEANSSTATISTICSTABLE_PK" PRIMARY KEY ("ORLEANSSTATISTICSTABLEID")
   );
/

CREATE OR REPLACE TYPE ORLEANS_MEMBERSHIP_TABLE IS TABLE OF ORLEANS_MEMBERSHIP;
/

CREATE TYPE ORLEANS_MEMBERSHIP IS OBJECT(
      DEPLOYMENTID NVARCHAR2(150), 
      ADDRESS VARCHAR2(45 BYTE), 
      PORT NUMBER, 
      GENERATION NUMBER, 
      SILONAME NVARCHAR2(150), 
      HOSTNAME NVARCHAR2(150), 
      STATUS NUMBER, 
      PROXYPORT NUMBER, 
      SUSPECTTIMES VARCHAR2(4000 BYTE), 
      STARTTIME TIMESTAMP, 
      IAMALIVETIME TIMESTAMP,
      VERSION NUMBER
);
/

CREATE OR REPLACE FUNCTION MembershipReadRowKey(PARAM_DEPLOYMENTID IN NVARCHAR2, PARAM_ADDRESS IN VARCHAR2,
                                PARAM_PORT IN NUMBER, PARAM_GENERATION IN NUMBER) 
  RETURN ORLEANS_MEMBERSHIP_TABLE IS
    tbl ORLEANS_MEMBERSHIP_TABLE;
  BEGIN
    SELECT 
    ORLEANS_MEMBERSHIP(
		CAST(v.DeploymentId AS NVARCHAR2(150)),
		CAST(m.Address AS VARCHAR2(45 BYTE)),
		CAST(m.Port AS NUMBER),
		CAST(m.Generation as NUMBER),
		CAST(m.SiloName as NVARCHAR2(150)),
		CAST(m.HostName as NVARCHAR2(150)),
		CAST(m.Status as NUMBER),
		CAST(m.ProxyPort as NUMBER),
		CAST(m.SuspectTimes as VARCHAR2(4000 BYTE)),
		CAST(m.StartTime as TIMESTAMP),
		CAST(m.IAmAliveTime as TIMESTAMP),
		CAST(v.Version as NUMBER))
    BULK COLLECT INTO tbl
	FROM
		OrleansMembershipVersionTable v
		LEFT OUTER JOIN OrleansMembershipTable m ON v.DeploymentId = m.DeploymentId
		AND Address = PARAM_ADDRESS AND PARAM_ADDRESS IS NOT NULL
		AND Port = PARAM_PORT AND PARAM_PORT IS NOT NULL
		AND Generation = PARAM_GENERATION AND PARAM_GENERATION IS NOT NULL
	WHERE
		v.DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL;
    
    RETURN tbl;
  END;
/



CREATE OR REPLACE FUNCTION InsertMembershipKey(PARAM_DEPLOYMENTID IN NVARCHAR2, PARAM_IAMALIVETIME IN TIMESTAMP, PARAM_SILONAME IN NVARCHAR2, PARAM_HOSTNAME IN NVARCHAR2, PARAM_ADDRESS IN VARCHAR2,
                                    PARAM_PORT IN NUMBER, PARAM_GENERATION IN NUMBER, PARAM_STARTTIME IN TIMESTAMP, PARAM_STATUS IN NUMBER, PARAM_PROXYPORT IN NUMBER, PARAM_VERSION IN NUMBER)
  RETURN NUMBER IS
  rowcount NUMBER;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    INSERT INTO OrleansMembershipTable
    (
      DeploymentId,
      Address,
      Port,
      Generation,
      SiloName,
      HostName,
      Status,
      ProxyPort,
      StartTime,
      IAmAliveTime
    )
    SELECT
      PARAM_DEPLOYMENTID,
      PARAM_ADDRESS,
      PARAM_PORT,
      PARAM_GENERATION,
      PARAM_SILONAME,
      PARAM_HOSTNAME,
      PARAM_STATUS,
      PARAM_PROXYPORT,
      PARAM_STARTTIME,
      PARAM_IAMALIVETIME
    FROM DUAL WHERE NOT EXISTS
    (
      SELECT 1 FROM OrleansMembershipTable WHERE
        DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
        AND Address = PARAM_ADDRESS AND PARAM_ADDRESS IS NOT NULL
        AND Port = PARAM_PORT AND PARAM_PORT IS NOT NULL
        AND Generation = PARAM_GENERATION AND PARAM_GENERATION IS NOT NULL
    );
    rowcount :=	SQL%ROWCOUNT;
    UPDATE OrleansMembershipVersionTable
    SET Timestamp = sys_extract_utc(systimestamp),
        Version = Version + 1
    WHERE
  		DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
    	AND Version = PARAM_VERSION AND PARAM_VERSION IS NOT NULL
      AND rowcount > 0;
    rowcount :=	SQL%ROWCOUNT;
    IF rowcount = 0 THEN
      ROLLBACK;
    ELSE
      COMMIT;
    END IF;
  
    IF rowcount > 0 THEN
      RETURN(1);
    ELSE
      RETURN(0);
    END IF;
  END;
/

CREATE OR REPLACE FUNCTION UpdateMembershipKey(PARAM_DEPLOYMENTID IN NVARCHAR2, PARAM_ADDRESS IN VARCHAR2, PARAM_PORT IN NUMBER, PARAM_GENERATION IN NUMBER,
                                               PARAM_IAMALIVETIME IN TIMESTAMP, PARAM_STATUS IN NUMBER, PARAM_SUSPECTTIMES IN VARCHAR2, PARAM_VERSION IN NUMBER
                                              )
  RETURN NUMBER IS
  rowcount NUMBER;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    UPDATE OrleansMembershipVersionTable
      SET
        Timestamp = sys_extract_utc(systimestamp),
        Version = Version + 1
    WHERE
		DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
		AND Version = PARAM_VERSION AND PARAM_VERSION IS NOT NULL;
    rowcount := SQL%ROWCOUNT;
    UPDATE OrleansMembershipTable
      SET
        Status = PARAM_STATUS,
        SuspectTimes = PARAM_SUSPECTTIMES,
        IAmAliveTime = PARAM_IAMALIVETIME
      WHERE DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
        AND Address = PARAM_ADDRESS AND PARAM_ADDRESS IS NOT NULL
        AND Port = PARAM_PORT AND PARAM_PORT IS NOT NULL
        AND Generation = PARAM_GENERATION AND PARAM_GENERATION IS NOT NULL
        AND rowcount > 0;
    rowcount := SQL%ROWCOUNT;
    COMMIT;
    RETURN(rowcount);
  END;
/

CREATE OR REPLACE FUNCTION UpsertReminderRowKey(PARAM_SERVICEID IN NVARCHAR2, PARAM_GRAINHASH IN INT, PARAM_GRAINID IN VARCHAR2, PARAM_REMINDERNAME IN NVARCHAR2,
                                                PARAM_STARTTIME IN TIMESTAMP, PARAM_PERIOD IN NUMBER)
RETURN NUMBER IS
  rowcount NUMBER;
  currentVersion NUMBER := 0;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN     
    MERGE INTO OrleansRemindersTable ort
    USING (
      SELECT PARAM_SERVICEID as SERVICEID,
        PARAM_GRAINID as GRAINID,
        PARAM_REMINDERNAME as REMINDERNAME,
        PARAM_STARTTIME as STARTTIME,
        PARAM_PERIOD as PERIOD,
        PARAM_GRAINHASH GRAINHASH 
      FROM dual
    ) n_ort
    ON (ort.ServiceId = n_ort.SERVICEID AND
        ort.GrainId = n_ort.GRAINID AND
        ort.ReminderName = n_ort.REMINDERNAME
    )
    WHEN MATCHED THEN
    UPDATE SET
      ort.StartTime = n_ort.STARTTIME,
      ort.Period = n_ort.PERIOD,
      ort.GrainHash = n_ort.GRAINHASH,
      ort.Version = ort.Version+1
    WHEN NOT MATCHED THEN
    INSERT (ort.ServiceId, ort.GrainId, ort.ReminderName, ort.StartTime, ort.Period, ort.GrainHash, ort.Version)
    VALUES (n_ort.SERVICEID, n_ort.GRAINID, n_ort.REMINDERNAME, n_ort.STARTTIME, n_ort.PERIOD, n_ort.GRAINHASH, 0);
       
    SELECT Version INTO currentVersion FROM OrleansRemindersTable  
        WHERE ServiceId = PARAM_SERVICEID AND PARAM_SERVICEID IS NOT NULL
        AND GrainId = PARAM_GRAINID AND PARAM_GRAINID IS NOT NULL
        AND ReminderName = PARAM_REMINDERNAME AND PARAM_REMINDERNAME IS NOT NULL;
    COMMIT;
    RETURN(currentVersion);
  END;
/

CREATE OR REPLACE FUNCTION UpsertReportClientMetricsKey(PARAM_DEPLOYMENTID IN VARCHAR2, PARAM_HOSTNAME IN NVARCHAR2, PARAM_CPUUSAGE IN FLOAT, PARAM_MEMORYUSAGE IN NUMBER,
                                                        PARAM_SENDQUEUELENGTH IN NUMBER, PARAM_RECEIVEQUEUELENGTH IN NUMBER, PARAM_SENTMESSAGES IN NUMBER,
                                                        PARAM_RECEIVEDMESSAGES IN NUMBER, PARAM_CONNECTEDGATEWAYCOUNT IN NUMBER, PARAM_CLIENTID IN VARCHAR2,
                                                        PARAM_ADDRESS IN VARCHAR2)
RETURN NUMBER IS
  rowcount NUMBER;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    UPDATE OrleansClientMetricsTable
      SET
        Timestamp = sys_extract_utc(systimestamp),
        Address = PARAM_ADDRESS,
        HostName = PARAM_HOSTNAME,
        CpuUsage = PARAM_CPUUSAGE,
        MemoryUsage = PARAM_MEMORYUSAGE,
        SendQueueLength = PARAM_SENDQUEUELENGTH,
        ReceiveQueueLength = PARAM_RECEIVEQUEUELENGTH,
        SentMessages = PARAM_SENTMESSAGES,
        ReceivedMessages = PARAM_RECEIVEDMESSAGES,
        ConnectedGatewayCount = PARAM_CONNECTEDGATEWAYCOUNT
      WHERE DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
        AND ClientId = PARAM_CLIENTID AND PARAM_CLIENTID IS NOT NULL;
      
      rowcount := SQL%ROWCOUNT;
      
      IF rowcount = 1 THEN
        COMMIT;
        RETURN(1);
      END IF;
      
     INSERT INTO OrleansClientMetricsTable
     (
        DeploymentId,
        ClientId,
        Address,
        HostName,
        CpuUsage,
        MemoryUsage,
        SendQueueLength,
        ReceiveQueueLength,
        SentMessages,
        ReceivedMessages,
        ConnectedGatewayCount
    )
    SELECT
      PARAM_DEPLOYMENTID,
      PARAM_CLIENTID,
      PARAM_ADDRESS,
      PARAM_HOSTNAME,
      PARAM_CPUUSAGE,
      PARAM_MEMORYUSAGE,
      PARAM_SENDQUEUELENGTH,
      PARAM_RECEIVEQUEUELENGTH,
      PARAM_SENTMESSAGES,
      PARAM_RECEIVEDMESSAGES,
      PARAM_CONNECTEDGATEWAYCOUNT
    FROM DUAL;
    
    COMMIT;
    RETURN(1);
  END;
/

CREATE OR REPLACE FUNCTION UpsertSiloMetricsKey(PARAM_DEPLOYMENTID IN NVARCHAR2, PARAM_HOSTNAME IN NVARCHAR2, PARAM_CPUUSAGE IN FLOAT, PARAM_MEMORYUSAGE IN NUMBER, PARAM_SENDQUEUELENGTH IN NUMBER,
                                                PARAM_RECEIVEQUEUELENGTH IN NUMBER, PARAM_SENTMESSAGES IN NUMBER, PARAM_RECEIVEDMESSAGES IN NUMBER, PARAM_ACTIVATIONCOUNT IN NUMBER, PARAM_RECENTLYUSEDACTIVATIONS IN NUMBER,
                                                PARAM_REQUESTQUEUELENGHT IN NUMBER, PARAM_ISOVERLOADED IN NUMBER, PARAM_CLIENTCOUNT IN NUMBER, PARAM_ADDRESS IN VARCHAR2,
                                                PARAM_PORT IN NUMBER, PARAM_GENERATION IN NUMBER, PARAM_GATEWAYADDRESS IN VARCHAR2, PARAM_GATEWAYPORT IN NUMBER, PARAM_SILOID IN NVARCHAR2)
RETURN NUMBER IS
  rowcount NUMBER;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    UPDATE OrleansSiloMetricsTable
    SET
      Timestamp = sys_extract_utc(systimestamp),
      Address = PARAM_ADDRESS,
      Port = PARAM_PORT,
      Generation = PARAM_GENERATION,
      HostName = PARAM_HOSTNAME,
      GatewayAddress = PARAM_GATEWAYADDRESS,
      GatewayPort = PARAM_GATEWAYPORT,
      CpuUsage = PARAM_CPUUSAGE,
      MemoryUsage = PARAM_MEMORYUSAGE,
      ActivationCount = PARAM_ACTIVATIONCOUNT,
      RecentlyUsedActivationCount = PARAM_RECENTLYUSEDACTIVATIONS,
      SendQueueLength = PARAM_SENDQUEUELENGTH,
      ReceiveQueueLength = PARAM_RECEIVEQUEUELENGTH,
      RequestQueueLength = PARAM_REQUESTQUEUELENGHT,
      SentMessages = PARAM_SENTMESSAGES,
      ReceivedMessages = PARAM_RECEIVEDMESSAGES,
      IsOverloaded = PARAM_ISOVERLOADED,
      ClientCount = PARAM_CLIENTCOUNT
    WHERE
      DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
        AND SiloId = PARAM_SILOID AND PARAM_SILOID IS NOT NULL;
      
      rowcount := SQL%ROWCOUNT;
      
      IF rowcount = 1 THEN
        COMMIT;
        RETURN(1);
      END IF;
      
     INSERT INTO OrleansSiloMetricsTable
     (
        DeploymentId,
        SiloId,
        Address,
        Port,
        Generation,
        HostName,
        GatewayAddress,
        GatewayPort,
        CpuUsage,
        MemoryUsage,
        SendQueueLength,
        ReceiveQueueLength,
        SentMessages,
        ReceivedMessages,
        ActivationCount,
        RecentlyUsedActivationCount,
        RequestQueueLength,
        IsOverloaded,
        ClientCount
      )
      SELECT
        PARAM_DEPLOYMENTID,
        PARAM_SILOID,
        PARAM_ADDRESS,
        PARAM_PORT,
        PARAM_GENERATION,
        PARAM_HOSTNAME,
        PARAM_GATEWAYADDRESS,
        PARAM_GATEWAYPORT,
        PARAM_CPUUSAGE,
        PARAM_MEMORYUSAGE,
        PARAM_SENDQUEUELENGTH,
        PARAM_RECEIVEQUEUELENGTH,
        PARAM_SENTMESSAGES,
        PARAM_RECEIVEDMESSAGES,
        PARAM_ACTIVATIONCOUNT,
        PARAM_RECENTLYUSEDACTIVATIONS,
        PARAM_REQUESTQUEUELENGHT,
        PARAM_ISOVERLOADED,
        PARAM_CLIENTCOUNT
      FROM DUAL;
    
    COMMIT;
    RETURN(1);
  END;
/

CREATE OR REPLACE FUNCTION DeleteReminderRowKey(PARAM_SERVICEID IN NVARCHAR2, PARAM_GRAINID IN VARCHAR2, PARAM_REMINDERNAME IN NVARCHAR2,
                                                PARAM_VERSION IN NUMBER)
RETURN NUMBER IS
  rowcount NUMBER;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN     
    DELETE FROM OrleansRemindersTable 
      WHERE ServiceId = PARAM_SERVICEID AND PARAM_SERVICEID IS NOT NULL
        AND GrainId = PARAM_GRAINID AND PARAM_GRAINID IS NOT NULL
        AND ReminderName = PARAM_REMINDERNAME AND PARAM_REMINDERNAME IS NOT NULL
        AND Version = PARAM_VERSION AND PARAM_VERSION IS NOT NULL;
	
    rowcount := SQL%ROWCOUNT;

    COMMIT;
    RETURN(rowcount);
  END;
/

CREATE OR REPLACE FUNCTION WriteToStorageKey(PARAM_GRAINIDHASH IN NUMBER, PARAM_GRAINIDN0 IN NUMBER, PARAM_GRAINIDN1 IN NUMBER, PARAM_GRAINTYPEHASH IN NUMBER, PARAM_GRAINTYPESTRING IN NVARCHAR2,
                                             PARAM_GRAINIDEXTENSIONSTRING IN NVARCHAR2, PARAM_SERVICEID IN VARCHAR2, PARAM_GRAINSTATEVERSION IN NUMBER, PARAM_PAYLOADBINARY IN BLOB,
                                             PARAM_PAYLOADJSON IN NCLOB, PARAM_PAYLOADXML IN NCLOB)
  RETURN NUMBER IS
  rowcount NUMBER;
  newGrainStateVersion NUMBER := PARAM_GRAINSTATEVERSION;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
	IF newGrainStateVersion IS NOT NULL THEN
		UPDATE Storage
		SET
			PayloadBinary = PARAM_PAYLOADBINARY,
			PayloadJson = PARAM_PAYLOADJSON,
			PayloadXml = PARAM_PAYLOADXML,
			ModifiedOn = sys_extract_utc(systimestamp),
			Version = Version + 1
		WHERE
			GrainIdHash = PARAM_GRAINIDHASH AND PARAM_GRAINIDHASH IS NOT NULL
			AND GrainTypeHash = PARAM_GRAINTYPEHASH AND PARAM_GRAINTYPEHASH IS NOT NULL
			AND (GrainIdN0 = PARAM_GRAINIDN0 OR PARAM_GRAINIDN0 IS NULL)
			AND (GrainIdN1 = PARAM_GRAINIDN1 OR PARAM_GRAINIDN1 IS NULL)
			AND (GrainTypeString = PARAM_GRAINTYPESTRING OR PARAM_GRAINTYPESTRING IS NULL)
			AND ((PARAM_GRAINIDEXTENSIONSTRING IS NOT NULL AND GrainIdExtensionString IS NOT NULL AND GrainIdExtensionString = PARAM_GRAINIDEXTENSIONSTRING) OR PARAM_GRAINIDEXTENSIONSTRING IS NULL AND GrainIdExtensionString IS NULL)
			AND ServiceId = PARAM_SERVICEID AND PARAM_SERVICEID IS NOT NULL
			AND Version IS NOT NULL AND Version = PARAM_GRAINSTATEVERSION AND PARAM_GRAINSTATEVERSION IS NOT NULL
    RETURNING Version INTO newGrainStateVersion;
    
    rowcount := SQL%ROWCOUNT;
    
    IF rowcount = 1 THEN
      COMMIT;
      RETURN(newGrainStateVersion);
    END IF;
	END IF;
    
	-- The grain state has not been read. The following locks rather pessimistically
	-- to ensure only one INSERT succeeds.
	IF PARAM_GRAINSTATEVERSION IS NULL THEN
		INSERT INTO Storage
		(
			GrainIdHash,
			GrainIdN0,
			GrainIdN1,
			GrainTypeHash,
			GrainTypeString,
			GrainIdExtensionString,
			ServiceId,
			PayloadBinary,
			PayloadJson,
			PayloadXml,
			ModifiedOn,
			Version
		)
		SELECT
			PARAM_GRAINIDHASH,
			PARAM_GRAINIDN0,
			PARAM_GRAINIDN1,
			PARAM_GRAINTYPEHASH,
			PARAM_GRAINTYPESTRING,
			PARAM_GRAINIDEXTENSIONSTRING,
			PARAM_SERVICEID,
			PARAM_PAYLOADBINARY,
			PARAM_PAYLOADJSON,
			PARAM_PAYLOADXML,
			sys_extract_utc(systimestamp),
			1 FROM DUAL
		 WHERE NOT EXISTS
		 (
			-- There should not be any version of this grain state.
			SELECT 1
			FROM Storage
			WHERE
				GrainIdHash = PARAM_GRAINIDHASH AND PARAM_GRAINIDHASH IS NOT NULL
				AND GrainTypeHash = PARAM_GRAINTYPEHASH AND PARAM_GRAINTYPEHASH IS NOT NULL
				AND (GrainIdN0 = PARAM_GRAINIDN0 OR PARAM_GRAINIDN0 IS NULL)
				AND (GrainIdN1 = PARAM_GRAINIDN1 OR PARAM_GRAINIDN1 IS NULL)
				AND (GrainTypeString = PARAM_GRAINTYPESTRING OR PARAM_GRAINTYPESTRING IS NULL)
				AND ((PARAM_GRAINIDEXTENSIONSTRING IS NOT NULL AND GrainIdExtensionString IS NOT NULL AND GrainIdExtensionString = PARAM_GRAINIDEXTENSIONSTRING) OR PARAM_GRAINIDEXTENSIONSTRING IS NULL AND GrainIdExtensionString IS NULL)
				AND ServiceId = PARAM_SERVICEID AND PARAM_SERVICEID IS NOT NULL
		 );
     
     rowCount := SQL%ROWCOUNT;
     
		IF rowCount > 0 THEN
			newGrainStateVersion := 1;
		END IF;
	END IF;
  COMMIT;
	RETURN(newGrainStateVersion);
  END;
/

CREATE OR REPLACE FUNCTION ClearStorageKey(PARAM_GRAINIDHASH IN NUMBER, PARAM_GRAINIDN0 IN NUMBER, PARAM_GRAINIDN1 IN NUMBER, PARAM_GRAINTYPEHASH IN NUMBER, PARAM_GRAINTYPESTRING IN NVARCHAR2,
                                             PARAM_GRAINIDEXTENSIONSTRING IN NVARCHAR2, PARAM_SERVICEID IN VARCHAR2, PARAM_GRAINSTATEVERSION IN NUMBER)
  RETURN NUMBER IS
  rowcount NUMBER;
  newGrainStateVersion NUMBER := PARAM_GRAINSTATEVERSION;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    UPDATE Storage
    SET
	    PayloadBinary = NULL,
	    PayloadJson = NULL,
	    PayloadXml = NULL,
	    ModifiedOn = sys_extract_utc(systimestamp),
	    Version = Version + 1
    WHERE GrainIdHash = PARAM_GRAINIDHASH AND PARAM_GRAINIDHASH IS NOT NULL
      AND GrainTypeHash = PARAM_GRAINTYPEHASH AND PARAM_GRAINTYPEHASH IS NOT NULL
      AND (GrainIdN0 = PARAM_GRAINIDN0 OR PARAM_GRAINIDN0 IS NULL)
      AND (GrainIdN1  = PARAM_GRAINIDN1 OR PARAM_GRAINIDN1 IS NULL)
      AND (GrainTypeString = PARAM_GRAINTYPESTRING OR PARAM_GRAINTYPESTRING IS NULL)
      AND ((PARAM_GRAINIDEXTENSIONSTRING IS NOT NULL AND GrainIdExtensionString IS NOT NULL AND GrainIdExtensionString = PARAM_GRAINIDEXTENSIONSTRING) OR PARAM_GRAINIDEXTENSIONSTRING IS NULL AND GrainIdExtensionString IS NULL)
      AND ServiceId = PARAM_SERVICEID AND PARAM_SERVICEID IS NOT NULL
      AND Version IS NOT NULL AND Version = PARAM_GRAINSTATEVERSION AND PARAM_GRAINSTATEVERSION IS NOT NULL
    RETURNING Version INTO newGrainStateVersion;
    
    COMMIT;
    RETURN(newGrainStateVersion);
  END;
/

CREATE OR REPLACE FUNCTION InsertMembershipVersionKey(PARAM_DEPLOYMENTID IN NVARCHAR2)
RETURN NUMBER IS
rowcount NUMBER;
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  INSERT INTO OrleansMembershipVersionTable
      (
        DeploymentId
      )
      SELECT PARAM_DEPLOYMENTID FROM DUAL WHERE NOT EXISTS
      (
        SELECT 1 FROM OrleansMembershipVersionTable WHERE
        DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
      );
      rowCount := SQL%ROWCOUNT;
      
      COMMIT;
      RETURN(rowCount);
END;
/


INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'UpdateIAmAlivetimeKey','
	UPDATE OrleansMembershipTable
	SET
		IAmAliveTime = :IAmAliveTime
	WHERE
		DeploymentId = :DeploymentId AND :DeploymentId IS NOT NULL
		AND Address = :Address AND :Address IS NOT NULL
		AND Port = :Port AND :Port IS NOT NULL
		AND Generation = :Generation AND :Generation IS NOT NULL
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'InsertMembershipVersionKey','
	SELECT InsertMembershipVersionKey(:PARAM_DEPLOYMENTID) AS RESULT FROM DUAL
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'InsertMembershipKey','
	SELECT INSERTMEMBERSHIPKEY(:DEPLOYMENTID,:IAMALIVETIME,:SILONAME,:HOSTNAME,:ADDRESS,:PORT,:GENERATION,:STARTTIME,:STATUS,:PROXYPORT,:VERSION) FROM DUAL
');
/ 
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'UpdateMembershipKey','
	SELECT UpdateMembershipKey(:DEPLOYMENTID, :ADDRESS, :PORT, :GENERATION, :IAMALIVETIME, :STATUS, :SUSPECTTIMES, :VERSION) AS RESULT FROM DUAL
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'UpsertReminderRowKey','
	SELECT UpsertReminderRowKey(:PARAM_SERVICEID, :PARAM_GRAINHASH, :PARAM_GRAINID, :PARAM_REMINDERNAME, :PARAM_STARTTIME, :PARAM_PERIOD) AS RESULT FROM DUAL
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'UpsertReportClientMetricsKey','
	  SELECT UpsertReportClientMetricsKey(:PARAM_DEPLOYMENTID, :PARAM_HOSTNAME, :PARAM_CPUUSAGE, :PARAM_MEMORYUSAGE,
                                                        :PARAM_SENDQUEUELENGTH, :PARAM_RECEIVEQUEUELENGTH, :PARAM_SENTMESSAGES,
                                                        :PARAM_RECEIVEDMESSAGES, :PARAM_CONNECTEDGATEWAYCOUNT, :PARAM_CLIENTID, :PARAM_ADDRESS) AS RESULT FROM DUAL
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'UpsertSiloMetricsKey','
  SELECT UpsertSiloMetricsKey(:PARAM_DEPLOYMENTID, :PARAM_HOSTNAME, :PARAM_CPUUSAGE, :PARAM_MEMORYUSAGE, :PARAM_SENDQUEUELENGTH,
                                                :PARAM_RECEIVEQUEUELENGTH, :PARAM_SENTMESSAGES, :PARAM_RECEIVEDMESSAGES, :PARAM_ACTIVATIONCOUNT, :PARAM_RECENTLYUSEDACTIVATIONS,
                                                :PARAM_REQUESTQUEUELENGHT, :PARAM_ISOVERLOADED, :PARAM_CLIENTCOUNT, :PARAM_ADDRESS,
                                                :PARAM_PORT, :PARAM_GENERATION, :PARAM_GATEWAYADDRESS, :PARAM_GATEWAYPORT, :PARAM_SILOID) AS RESULT FROM DUAL
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'GatewaysQueryKey','
	SELECT Address, ProxyPort, Generation FROM OrleansMembershipTable
    WHERE DeploymentId = :DEPLOYMENTID AND :DEPLOYMENTID IS NOT NULL
      AND Status = :STATUS AND :STATUS IS NOT NULL
      AND ProxyPort > 0
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'MembershipReadRowKey','
	 SELECT * FROM TABLE(MembershipReadRowKey(:PARAM_DEPLOYMENTID, :PARAM_ADDRESS, :PARAM_PORT, :PARAM_GENERATION))
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'MembershipReadAllKey','
	SELECT
		v.DeploymentId,
		m.Address,
		m.Port,
		m.Generation,
		m.SiloName,
		m.HostName,
		m.Status,
		m.ProxyPort,
		m.SuspectTimes,
		m.StartTime,
		m.IAmAliveTime,
		v.Version
	FROM
		OrleansMembershipVersionTable v LEFT OUTER JOIN OrleansMembershipTable m
		ON v.DeploymentId = m.DeploymentId
	WHERE
		v.DeploymentId = :DeploymentId AND :DeploymentId IS NOT NULL
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'DeleteMembershipTableEntriesKey','
  BEGIN
    DELETE FROM OrleansMembershipTable
      WHERE DeploymentId = :DeploymentId AND :DeploymentId IS NOT NULL;
    DELETE FROM OrleansMembershipVersionTable
      WHERE DeploymentId = :DeploymentId AND :DeploymentId IS NOT NULL;
  END;
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'ReadReminderRowsKey','
  SELECT
		GrainId,
		ReminderName,
		StartTime,
		Period,
		Version
	FROM OrleansRemindersTable
	WHERE
		ServiceId = :ServiceId AND :ServiceId IS NOT NULL
		AND GrainId = :GrainId AND :GrainId IS NOT NULL
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'ReadReminderRowKey','
		SELECT
		GrainId,
		ReminderName,
		StartTime,
		Period,
		Version
	FROM OrleansRemindersTable
	WHERE
		ServiceId = :ServiceId AND :ServiceId IS NOT NULL
		AND GrainId = :GrainId AND :GrainId IS NOT NULL
		AND ReminderName = :ReminderName AND :ReminderName IS NOT NULL
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'ReadRangeRows1Key','
	SELECT
		GrainId,
		ReminderName,
		StartTime,
		Period,
		Version
	FROM OrleansRemindersTable
	WHERE
		ServiceId = :ServiceId AND :ServiceId IS NOT NULL
		AND GrainHash > :BeginHash AND :BeginHash IS NOT NULL
		AND GrainHash <= :EndHash AND :EndHash IS NOT NULL
');
/
INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'ReadRangeRows2Key','
	SELECT
		GrainId,
		ReminderName,
		StartTime,
		Period,
		Version
	FROM OrleansRemindersTable
	WHERE
		ServiceId = :ServiceId AND :ServiceId IS NOT NULL
		AND ((GrainHash > :BeginHash AND :BeginHash IS NOT NULL)
		OR (GrainHash <= :EndHash AND :EndHash IS NOT NULL))
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'InsertOrleansStatisticsKey','
	INSERT INTO OrleansStatisticsTable
	(
		DeploymentId,
		Id,
		HostName,
		Name,
		IsValueDelta,
		StatValue,
		Statistic
	)
	SELECT
		:DeploymentId,
		:Id,
		:HostName,
		:Name,
		:IsValueDelta,
		:StatValue,
		:Statistic
  FROM DUAL
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'DeleteReminderRowKey','
	SELECT DeleteReminderRowKey(:PARAM_SERVICEID, :PARAM_GRAINID, :PARAM_REMINDERNAME, :PARAM_VERSION) AS RESULT FROM DUAL
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'DeleteReminderRowsKey','
	DELETE FROM OrleansRemindersTable
	WHERE ServiceId = :ServiceId AND :ServiceId IS NOT NULL
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'WriteToStorageKey','
  SELECT WriteToStorageKey(:PARAM_GRAINIDHASH, :PARAM_GRAINIDN0, :PARAM_GRAINIDN1, :PARAM_GRAINTYPEHASH, :PARAM_GRAINTYPESTRING,
                                             :PARAM_GRAINIDEXTENSIONSTRING, :PARAM_SERVICEID, :PARAM_GRAINSTATEVERSION, :PARAM_PAYLOADBINARY,
                                             :PARAM_PAYLOADJSON, :PARAM_PAYLOADXML) AS RESULT FROM DUAL
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'ClearStorageKey',
	'SELECT ClearStorageKey(:PARAM_GRAINIDHASH, :PARAM_GRAINIDN0, :PARAM_GRAINIDN1, :PARAM_GRAINTYPEHASH, :PARAM_GRAINTYPESTRING,
                                             :PARAM_GRAINIDEXTENSIONSTRING, :PARAM_SERVICEID, :PARAM_GRAINSTATEVERSION) AS RESULT FROM DUAL'
);
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
	'ReadFromStorageKey',
	'SELECT PayloadBinary, PayloadXml, PayloadJson, Version FROM Storage
    WHERE GrainIdHash = :GrainIdHash AND :GrainIdHash IS NOT NULL
      AND (GrainIdN0 = :GrainIdN0 OR :GrainIdN0 IS NULL)
      AND (GrainIdN1 = :GrainIdN1 OR :GrainIdN1 IS NULL)
      AND GrainTypeHash = :GrainTypeHash AND :GrainTypeHash IS NOT NULL
      AND (GrainTypeString = :GrainTypeString OR :GrainTypeString IS NULL)
      AND ((:GrainIdExtensionString IS NOT NULL AND GrainIdExtensionString IS NOT NULL AND GrainIdExtensionString = :GrainIdExtensionString) OR :GrainIdExtensionString IS NULL AND GrainIdExtensionString IS NULL)
      AND ServiceId = :ServiceId AND :ServiceId IS NOT NULL'
);
/
  
COMMIT;








  
  







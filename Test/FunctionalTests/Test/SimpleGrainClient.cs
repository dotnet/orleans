//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimpleGrainClient
{
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using Orleans;
    using SimpleGrain;
    using System;
    using System.Linq;
    using System.Collections;
    using System.Linq.Expressions;
    using System.Collections.Generic;
    using Orleans.Coordination;
    using System.Runtime.InteropServices;
    
    
    public class SimpleGrainFactoryTest
    {
        

                public static  ISimpleGrain CreateGrain(Int32 A = default(Int32), Lifetime Lifetime = default(Lifetime))
                {
                    var init = new Dictionary<string,object>();
                
                    if (A != default(Int32)) init["A"] = A;                    
                return SimpleGrainFactory.Cast(Domain.Current.Create(typeof(ISimpleGrain), init, Lifetime));
                }

                    public static AsyncValue<List<ISimpleGrain>> CreateMany(
                        SimpleGrainPropertiesTest common,
                        // initial values for properties (can we box value types so they are nullable?)
                        IEnumerable<SimpleGrainPropertiesTest> properties,
                        // additional standard creation parameters
                        Lifetime lifetime = default(Lifetime))
                    {
                        // create many grains from enumeration of properties
                        return Domain.Current.CreateMany(
                                typeof(ISimpleGrain),
                                common.AsDictionary(),
                                properties.Select(p => p.AsDictionary()).ToList(),
                                lifetime)
                            .ContinueWith(list => list.Select(SimpleGrainFactory.Cast).ToList());
                    }

                public static void Delete(ISimpleGrain grain)
                {
                    // delete the grain reference so it is no longer usable
                    // must be a grain that my configuration has the capability to create
                    Domain.Current.Delete((IGrain) grain);
                }

            public static ISimpleGrain Cast(IGrain grainRef)
            {
                return SimpleGrainFactory.Cast(grainRef);
            }

        public static ISimpleGrain CreateGrainInternal(int n_silos, int i_silo)
        {
            // todo: implement as placement strategy via Domain, change clients
            throw new NotImplementedException();
        }
        
        [System.SerializableAttribute()]
        private class SimpleGrainReference : Orleans.GrainReference, ISimpleGrain, Orleans.IGrain
        {
            

            public static ISimpleGrain Cast(IGrain grainRef)
            {
                return new SimpleGrainReference((GrainReference) grainRef);
            }

                protected override int InterfaceId { get { return 1125670468; } }

        public static object DeserializeResult(byte[] data)
        {{
            if (data.Length == 0)
                return null;

            IFormatter formatter = new BinaryFormatter();
            using (MemoryStream stream = new MemoryStream(data))
            {{
                return formatter.Deserialize(stream);
            }}
        }}
            
            protected internal SimpleGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            public AsyncValue<Int32> A
            {
                get
                {

                    AsyncValue<byte[]> invoke = base.InvokeMethod( 1380454715, new object[] {});
                    return invoke.ContinueWith<Int32>( (byte[] returnedValue) =>
                    {
                        return (Int32) DeserializeResult(returnedValue);
                    });
                }
            }
            
            public AsyncCompletion SetA(Int32 a)
            {

                    return base.InvokeMethod(
                        -734284040,
                        new object[] {a});
            }
            
            public AsyncCompletion SetB(Int32 a)
            {

                    return base.InvokeMethod(
                        1415421376,
                        new object[] {a});
            }
            
            public AsyncCompletion IncrementA()
            {

                    return base.InvokeMethod(
                        -1324714189,
                        new object[] {});
            }
            
            public AsyncValue<Int32> GetAxB()
            {

                    AsyncValue<byte[]> invoke = base.InvokeMethod( -1800996094, new object[] {});
                    return invoke.ContinueWith<Int32>( (byte[] returnedValue) =>
                    {
                        return (Int32) DeserializeResult(returnedValue);
                    });
            }
            
            public AsyncValue<Int32> GetAxB(Int32 a, Int32 b)
            {

                    AsyncValue<byte[]> invoke = base.InvokeMethod( -697386638, new object[] {a, b});
                    return invoke.ContinueWith<Int32>( (byte[] returnedValue) =>
                    {
                        return (Int32) DeserializeResult(returnedValue);
                    });
            }
            
            public AsyncValue<Int32> GetA()
            {

                    AsyncValue<byte[]> invoke = base.InvokeMethod( 1012136176, new object[] {});
                    return invoke.ContinueWith<Int32>( (byte[] returnedValue) =>
                    {
                        return (Int32) DeserializeResult(returnedValue);
                    });
            }
        }

        internal static ISimpleGrain CreateObjectReference(Test.SimpleGrainObject o)
        {
            GrainReference reference = GrainReference.CreateObjectReference(o);
            throw new NotImplementedException();
        }
    }
    
    //[System.SerializableAttribute()]
    //public static class SimpleGrainExtensionMethods
    //{
        
    //    public static AsyncCompletion SetA(this ISimpleGrain  serviceInterface, AsyncValue<Int32> a)
    //    {

    //        return serviceInterface.SetA(a.GetValue());
    //    }
        
    //    public static AsyncCompletion SetB(this ISimpleGrain  serviceInterface, AsyncValue<Int32> a)
    //    {

    //        return serviceInterface.SetB(a.GetValue());
    //    }
        
    //    public static AsyncValue<Int32> GetAxB(this ISimpleGrain  serviceInterface, AsyncValue<Int32> a, AsyncValue<Int32> b)
    //    {

    //        return serviceInterface.GetAxB(a.GetValue(), b.GetValue());
    //    }
    //}
    
    [SerializableAttribute()]
    public class SimpleGrainPropertiesTest : GrainProperties
    {
        

                public SimpleGrainPropertiesTest(IGrain reference = null) : base(reference)
                {
                    GrainType = "ISimpleGrain";
                }
                public Int32 A { get; set; }
                public override Dictionary<string,object> AsDictionary()
                {
                    var result = base.AsDictionary();
                    if (A != default(Int32)) result["A"] = A;
                    return result;
                }
    }
}

<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.ServiceBus</name>
  </assembly>
  <members>
    <member name="T:Microsoft.ServiceBus.AuthorizationFailedException">
      <summary>The exception that occurs when an authorization attempt fails. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.AuthorizationFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.AuthorizationFailedException" /> class. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.AuthorizationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.AuthorizationFailedException" /> using the specified message. </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.AuthorizationFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.AuthorizationFailedException" /> using the specified message and inner exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or null if no inner exception is specified.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.AuthorizationFailedException.ErrorCode">
      <summary>Gets or sets the error code that describes the cause of authorization attempt failure.</summary>
      <returns>One of the values of the<see cref="T:Microsoft.ServiceBus.AuthorizationFailedException.FailureCode" /> enumeration.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.AuthorizationFailedException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates the <paramref name="info" /> with information about the exception.</summary>
      <param name="info">The object that holds the serialized data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.AuthorizationFailedException.FailureCode">
      <summary>Enumerates the possible causes of failure during authorization attempts.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationFailedException.FailureCode.Generic">
      <summary>Specifies that the error is generic.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationFailedException.FailureCode.MissingToken">
      <summary>Specifies that the token is missing.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationFailedException.FailureCode.MalformedToken">
      <summary>Specifies that the token is malformed.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationFailedException.FailureCode.InvalidSignature">
      <summary>Specifies that the signature is invalid.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationFailedException.FailureCode.InvalidAudience">
      <summary>Specifies that the audience is invalid.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationFailedException.FailureCode.ExpiredToken">
      <summary>Specifies that the token has expired.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.AuthorizationPolicy">
      <summary>Specifies whether Authorization is required for sending messages to a queue or router, receiving messages from a queue or router (via a listener, a push-subscription, or the dequeue endpoint), or neither, or both.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationPolicy.NotRequired">
      <summary>Authorization is not required to send or receive messages from the queue or router.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationPolicy.RequiredToSend">
      <summary>Authorization is required to send to the queue or router, but not to receive from it.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationPolicy.RequiredToReceive">
      <summary>Authorization is required to receive from the queue or router, but not to send to it.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.AuthorizationPolicy.Required">
      <summary>(Default) Authorization is required to send to and receive from the queue or router.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.BasicHttpRelayBinding">
      <summary>Represents a binding that a client can use to configure endpoints that can communicate with ASMX-based Web services and other services that conform to the WS-I Basic Profile 1.1. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.BasicHttpRelayBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.BasicHttpRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" /> class with a specified type of security used by the binding and the authentication type used by the client. </summary>
      <param name="securityMode">The type of security used with the SOAP message and for the client. </param>
      <param name="relayClientAuthenticationType">The type of authentication used by the client. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.BasicHttpRelayBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" /> class using the specified configuration. </summary>
      <param name="configurationName">The configuration to use. </param>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.AllowCookies">
      <summary>Gets or sets a value that determines if the client allows cookies. </summary>
      <returns>Returns <see cref="T:System.Boolean" />.true to allow cookies; otherwise, false. The default value is false. </returns>
    </member>
    <member name="M:Microsoft.ServiceBus.BasicHttpRelayBinding.CreateBindingElements">
      <summary>Returns an ordered collection of binding elements contained in the current binding.</summary>
      <returns>Returns <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />.Contains the ordered stack of binding elements described by the <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" />. The order of the binding elements starting from the bottom is transport, encoding, and security.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.EnvelopeVersion">
      <summary>Gets the version of SOAP that is used for messages that are processed by this binding. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.EnvelopeVersion" />.The value that is used with this binding. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.MaxBufferPoolSize">
      <summary>Gets or sets the maximum size allowed for a buffer pool that stores TCP messages processed by the binding.</summary>
      <returns>The maximum size allowed for a buffer pool that stores TCP messages processed by the binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.MaxBufferSize">
      <summary>Gets or sets the maximum size for a buffer that receives messages from the channel. </summary>
      <returns>Returns <see cref="T:System.Int32" />.The maximum size, in bytes, of a buffer that stores messages while they are processed for an endpoint configured with this binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a message that can be received on a channel configured with this binding. </summary>
      <returns>Returns <see cref="T:System.Int64" />.The maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.MessageEncoding">
      <summary>Gets or sets the type of message encoding. </summary>
      <returns>Returns a <see cref="T:System.ServiceModel.WSMessageEncoding" /> that contains the type of message encoding. The default value is Text. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.ProxyAddress">
      <summary>Gets or sets the proxy address. </summary>
      <returns>Returns a <see cref="T:System.Uri" /> that  contains the proxy address. The default value is null.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.ReaderQuotas">
      <summary>Gets or sets the reader quotas. </summary>
      <returns>Returns a <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> that specifies the complexity constraints on SOAP messages exchanged. The default values for these constraints are provided in the following Remarks section.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.Scheme">
      <summary>Gets the URI transport scheme for the channels and listeners that are configured with this binding. </summary>
      <returns>The URI transport scheme for the channels and listeners that are configured with this binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.Security">
      <summary>Gets the collection of security bindings used with this binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.BasicHttpRelaySecurity" /> that contains the  security settings used in the binding. The default value has EndToEndBasicSecurityMode set to Transport, RelayClientAuthenticationType set to RelayAccessToken, HttpRelayTransportSecurity with HttypProxyCredentialType of None, and BasicHttpRelayMessageSecurity with ClientCredentialType of BasicHttpMessageCredentialType.UserName and an AlgorithmSuite of SecurityAlgorithmSuite.Basic256. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>Gets a value that indicates whether incoming requests are handled synchronously or asynchronously. </summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if incoming requests are handled synchronously; false if incoming requests are handled asynchronously. The default value is false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.TextEncoding">
      <summary>Gets or sets the character encoding that is used for the message text. </summary>
      <returns>Returns a <see cref="T:System.Text.Encoding" /> that indicates the character encoding that is used. The default is UTF8Encoding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.TransferMode">
      <summary>Gets or sets the transfer mode. </summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" /> that indicates whether the service configured with the binding uses streamed or buffered (or both) modes of message transfer. By default, the HTTP, TCP/IP, and named pipe transports use buffered message transfers. The default value is buffered.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayBinding.UseDefaultWebProxy">
      <summary>Gets or sets a value that determines if the client uses the default web proxy. </summary>
      <returns>Returns true if the client uses the default web proxy; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.BasicHttpRelayMessageSecurity">
      <summary>Provides properties used to configure message-level security settings for <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" />.
</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayMessageSecurity.AlgorithmSuite">
      <summary>Specifies the algorithm suite to use with <see cref="T:Microsoft.ServiceBus.BasicHttpRelayMessageSecurity" />.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />, which specifies 256-bit Advanced Encryption Standard (AES) as the symmetric encryption algorithm. The default value is Base256. This property cannot be null.</returns>
      <exception cref="ArgumentNullException">The value of <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> is null.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelayMessageSecurity.ClientCredentialType">
      <summary>Specifies the type of credential with which the client authenticates.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.BasicHttpMessageCredentialType" /> that contains a member of the <see cref="T:System.ServiceModel.BasicHttpMessageCredentialType" /> enumeration. The default value is UserName..</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.BasicHttpRelaySecurity">
      <summary>Provides properties used to configure the security settings of a <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" /> binding.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelaySecurity.Message">
      <summary>Gets the message-level security settings for a <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" /> binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.BasicHttpRelayMessageSecurity" />, which represents the message-level security settings for this binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelaySecurity.Mode">
      <summary>Gets or sets the security mode for a <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" /> binding.</summary>
      <returns>One of the values of <see cref="T:Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode" /> enumeration. The default value is None.</returns>
      <exception cref="ArgumentOutOfRangeException">The value is not a legal value for <see cref="T:Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode" />.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelaySecurity.RelayClientAuthenticationType">
      <summary>Gets or sets the type of authentication used by the  Service Bus service.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the type of authentication used by the service.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.BasicHttpRelaySecurity.Transport">
      <summary>Gets the transport-level security settings for a <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" /> binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.HttpRelayTransportSecurity" /> that contains the security settings.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.ConnectionStatusBehavior">
      <summary>An endpoint behavior that provides access to the connection status of service listening on the  Service Bus.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ConnectionStatusBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.ConnectionStatusBehavior" /> class.</summary>
    </member>
    <member name="E:Microsoft.ServiceBus.ConnectionStatusBehavior.Connecting">
      <summary>Occurs when the connection is connecting.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.ConnectionStatusBehavior.IsOnline">
      <summary>Gets a value that determines if the connection is online.</summary>
      <returns>true if the connection is online; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.ConnectionStatusBehavior.LastError">
      <summary>Gets the last error.</summary>
      <returns>Returns a <see cref="T:System.Exception" /> that contains the last error.</returns>
    </member>
    <member name="E:Microsoft.ServiceBus.ConnectionStatusBehavior.Offline">
      <summary>Occurs when the connection is offline.</summary>
    </member>
    <member name="E:Microsoft.ServiceBus.ConnectionStatusBehavior.Online">
      <summary>Occurs when the connection is online.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ConnectionStatusBehavior.Retry">
      <summary>Retries the connection.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ConnectionStatusBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Adds the specified binding parameters to the endpoint.</summary>
      <param name="serviceEndpoint">The endpoint to update.</param>
      <param name="bindingParameters">The binding parameters to add.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ConnectionStatusBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Applies the specified client behaviors to the specified endpoint.</summary>
      <param name="serviceEndpoint">The endpoint to update.</param>
      <param name="behavior">The behaviors to add.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ConnectionStatusBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Applies the specified dispatch behavior to the service endpoint.</summary>
      <param name="serviceEndpoint">The endpoint to update.</param>
      <param name="endpointDispatcher">The endpoint dispatcher.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ConnectionStatusBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Validates the specified endpoint.</summary>
      <param name="serviceEndpoint">The endpoint to validate.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.ConnectivityMode">
      <summary>Describes the connectivity mode. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ConnectivityMode.Http">
      <summary>HTTP mode. Listeners create an HTTP connection with the  Service Bus service and poll for messages. This might allow you to more easily work around TCP port constraints.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ConnectivityMode.Tcp">
      <summary>TCP mode (default). Listeners create TCP connections with the  Service Bus service through port 828 (SSL).</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ConnectivityMode.AutoDetect">
      <summary>Auto-detect mode. Automatically selects between the TCP and HTTP modes based on an auto-detection mechanism that probes whether either connectivity option is available for the current network environment. If both are available, the system will choose TCP by default.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.ConnectivitySettings">
      <summary>Holds the connectivity settings effective for all  Service Bus-based endpoints that are active in the current application domain. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ConnectivitySettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.ConnectivitySettings" /> class. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ConnectivitySettings.connectivityMode">
      <summary>Contains the <see cref="T:Microsoft.ServiceBus.ConnectivityMode" /> for the current instance. </summary>
    </member>
    <member name="P:Microsoft.ServiceBus.ConnectivitySettings.IsReadOnly">
      <summary>Gets a value that determines if the connectivity settings are read-only. </summary>
      <returns>true if the connectivity settings are read-only; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.ConnectivitySettings.Mode">
      <summary>Gets or sets the connectivity mode for the current application domain. </summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.ConnectivityMode" />.Contains the connectivity mode. </returns>
    </member>
    <member name="T:Microsoft.ServiceBus.DiscoverabilityPolicy">
      <summary>An enumeration used to specify whether and under what circumstances a message buffer is discoverable in the service registry.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.DiscoverabilityPolicy.Public">
      <summary>The message buffer is publicly discoverable.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.DiscoverabilityPolicy.Managers">
      <summary>(Default) The message buffer is discoverable to Managers.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.DiscoverabilityPolicy.ManagersListeners">
      <summary>The message buffer is discoverable to Managers and Listeners.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.DiscoverabilityPolicy.ManagersListenersSenders">
      <summary>The message buffer is discoverable to Managers, Listeners, and Senders. </summary>
    </member>
    <member name="T:Microsoft.ServiceBus.DiscoveryType">
      <summary>Describes the publishing behavior of a service in the Service Registry.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.DiscoveryType.Public">
      <summary>The Service will be published in the Service Registry.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.DiscoveryType.Private">
      <summary>The service will not be published in the Service Registry.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode">
      <summary>An enumeration type that specifies the modes of security that can be used with <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" />. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode.None">
      <summary>Messages are not secured during transfer. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode.Transport">
      <summary>Security is provided using HTTPS. The service must be configured with SSL certificates. The SOAP message is protected as a whole using HTTPS. The service is authenticated by the client using the service’s SSL certificate. The client authentication is controlled through the ClientCredentialType.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode.Message">
      <summary>Security is provided using WS-Security SOAP message security. For the <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" />, the system requires that the server certificate be provided to the client separately. The valid client credential types for this binding are UserName and Certificate.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode.TransportWithMessageCredential">
      <summary>Integrity, confidentiality and server authentication are provided by HTTPS. The service must be configured with a certificate. Client authentication is provided by means of SOAP message security. This mode is applicable when the user is authenticating with a UserName or Certificate credential and there is an existing HTTPS deployment for securing message transfer.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.EndToEndSecurityMode">
      <summary>Determines the security settings for an  Service Bus binding and describes the security relationship between the client and the service endpoint.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndSecurityMode.None">
      <summary>Security is disabled.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndSecurityMode.Transport">
      <summary>Security is provided using a transport security, typically SSL.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndSecurityMode.Message">
      <summary>Security is provided using SOAP message security.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndSecurityMode.TransportWithMessageCredential">
      <summary>A secure transport (for example, HTTPS) provides integrity, confidentiality, and authentication while SOAP message security provides client authentication.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.EndToEndWebHttpSecurityMode">
      <summary>Specifies the types of security that can be used with the <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" />.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndWebHttpSecurityMode.None">
      <summary>Indicates that no security is used with HTTP requests.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.EndToEndWebHttpSecurityMode.Transport">
      <summary>Indicates that transport-level security is required; clients must use HTTPS to communicate with the service endpoint.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.ExceptionErrorCodes">
      <summary>Specifies the error codes of the exceptions.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.BadRequest">
      <summary>A parse error encountered while processing a request.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.UnauthorizedGeneric">
      <summary>The generic that is not authorized.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.NoTransportSecurity">
      <summary>The service bus has no transport security.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.MissingToken">
      <summary>The token is missing.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.InvalidSignature">
      <summary>The signature is invalid.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.InvalidAudience">
      <summary>The audience is invalid.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.MalformedToken">
      <summary>A malformed token.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.ExpiredToken">
      <summary>The token had expired.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.ForbiddenGeneric">
      <summary>The generic is forbidden.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.EndpointNotFound">
      <summary>The endpoint is not found.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.InvalidDestination">
      <summary>The destination is invalid.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.NamespaceNotFound">
      <summary>The namespace is not found.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.StoreLockLost">
      <summary>The store lock is lost.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.SqlFiltersExceeded">
      <summary>The SQL filters exceeded from its maximum number.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.CorrelationFiltersExceeded">
      <summary>The correlation filters exceeded from its maximum number.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.SubscriptionsExceeded">
      <summary>The subscriptions exceeded from its maximum number.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.ConflictGeneric">
      <summary>The generic is a conflict.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.UnspecifiedInternalError">
      <summary>An internal error that is not specified.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.DataCommunicationError">
      <summary>The error of data communication.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.InternalFailure">
      <summary>An internal error.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.ProviderUnreachable">
      <summary>The provider is unreachable.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.ServerBusy">
      <summary>The server is busy.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.BadGatewayFailure">
      <summary>The error is caused by bad gateway.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.GatewayTimeoutFailure">
      <summary>The gateway did not receive a timely response from the upstream server.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.ExceptionErrorCodes.UnknownExceptionDetail">
      <summary>The detail of an unknown exception.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.HttpRelayTransportBindingElement">
      <summary>Represents the binding element used to specify an HTTP transport for transmitting messages on the  Service Bus. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.HttpRelayTransportBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.#ctor(Microsoft.ServiceBus.HttpRelayTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.HttpRelayTransportBindingElement" /> class, using the specified element to be cloned.</summary>
      <param name="elementToBeCloned">The element to be cloned.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.#ctor(Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.HttpRelayTransportBindingElement" /> class using the specified client authentication type.</summary>
      <param name="relayClientAuthenticationType">The client authentication type.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.AllowCookies">
      <summary>Gets or sets a value that indicates whether the client accepts cookies and propagates them on future requests.</summary>
      <returns>true if cookies are allowed; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory that can be used to create a channel.</summary>
      <returns>The channel factory of the specified type.</returns>
      <param name="context">The binding context for the channel.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel listener for channels of the specified generic type.</summary>
      <returns>A channel listener.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="TChannel">The type of channels to listen to.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Determines whether a channel factory of the specified type can be built.</summary>
      <returns>true if a channel factory can be built; otherwise, false.</returns>
      <param name="context">The binding context for the channel.</param>
      <typeparam name="TChannel">The type of channel to check.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the binding element can build a listener for a specific type of channel.</summary>
      <returns>true if the IChannelListener&lt;TChannel&gt; of type IChannel can be built by the binding element; otherwise, false.</returns>
      <param name="context">The binding context that provides context for the binding element.</param>
      <typeparam name="TChannel">The type of channel the listener accepts.</typeparam>
      <exception cref="ArgumentNullException">context is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.Clone">
      <summary>Returns a copy of the binding element object.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains a deep clone of the original.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.CreateInnerChannelBindingElement">
      <summary>Creates a <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> for the inner channel.</summary>
      <returns>A <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> for the inner channel.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets the specified property from the specified binding context.</summary>
      <returns>The property from the specified binding context.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="T">The type of the property to get.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.GetTransportTokenAssertion">
      <summary>Gets the XML element that represents the transport token used in the security binding.</summary>
      <returns>The transport token used in the security binding.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.InitializeInnerChannelBindingElement(System.ServiceModel.Channels.HttpTransportBindingElement)">
      <summary>Initializes the specified binding element with the settings from the current instance of the <see cref="T:Microsoft.ServiceBus.HttpRelayTransportBindingElement" /> binding element.</summary>
      <param name="httpTransportElement">The binding element to initialize.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.KeepAliveEnabled">
      <summary>Gets or sets a value that indicates whether to make a persistent connection to a service endpoint. </summary>
      <returns>true if the request to the service endpoint should contain a Connection HTTP header with the value Keep-alive; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum size of the buffer to use.</summary>
      <returns>Returns the maximum size, in bytes, of the buffer.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.ProxyAddress">
      <summary>Gets or sets a URI that contains the address of the proxy to use for HTTP requests.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that contains the address for the proxy. The default value is null.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.ProxyAuthenticationScheme">
      <summary>Gets or sets the authentication scheme used to authenticate client requests being processed by an HTTP proxy.</summary>
      <returns>One of the values of the <see cref="T:System.Net.AuthenticationSchemes" /> enumeration that specifies the protocols used for client authentication on the proxy. The default is Anonymous. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.RelayClientAuthenticationType">
      <summary>Gets or sets the relay client authentication type. </summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" />.Contains the authentication type. The default value is RelayClientAuthenticationType.RelayAccessToken</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns the URI scheme.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>Exports a custom policy assertion about bindings.</summary>
      <param name="exporter">The metadata exporter you can use to modify the exporting process.</param>
      <param name="context">The policy conversion context you can use to insert your custom policy assertion.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>Writes custom Web Services Description Language (WSDL) elements into the generated WSDL for a contract.</summary>
      <param name="exporter">The WSDL explorer that exports the contract information.</param>
      <param name="context">Provides mappings from exported WSDL elements to the contract description.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpRelayTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>Writes custom Web Services Description Language (WSDL) elements into the generated WSDL for an endpoint.</summary>
      <param name="exporter">The WSDL explorer that exports the contract information.</param>
      <param name="context">Provides mappings from exported WSDL elements to the endpoint description.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.TransferMode">
      <summary>Gets or sets the transfer mode.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" /> that contains the transfer mode.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportBindingElement.UseDefaultWebProxy">
      <summary>Gets or sets a value that indicates whether the machine-wide proxy settings are used rather than the user specific settings.</summary>
      <returns>true if the machine-wide proxy settings are used; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.HttpRelayTransportSecurity">
      <summary>Represents the transport-level security settings for the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" />.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpRelayTransportSecurity.ProxyCredentialType">
      <summary>Gets or sets the type of client credential to be used for authentication against the proxy.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.HttpProxyCredentialType" /> that contains the client credential.</returns>
      <exception cref="ArgumentOutOfRangeException">Setting the property to an undefined value.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.HttpsRelayTransportBindingElement">
      <summary>Represents the binding element used to specify an HTTPS relay transport for transmitting messages.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpsRelayTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.HttpsRelayTransportBindingElement" /> class, using the default settings.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpsRelayTransportBindingElement.#ctor(Microsoft.ServiceBus.HttpsRelayTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.HttpsRelayTransportBindingElement" /> class, using the specified element.</summary>
      <param name="elementToBeCloned">The element to be cloned.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpsRelayTransportBindingElement.#ctor(Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.HttpsRelayTransportBindingElement" /> class, using the specified type of client authentication.</summary>
      <param name="relayClientAuthenticationType">The relay client authentication type.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpsRelayTransportBindingElement.Clone">
      <summary>Creates a deep copy of the current binding element.</summary>
      <returns>A deep copy of the current binding element.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpsRelayTransportBindingElement.CreateInnerChannelBindingElement">
      <summary>Creates a <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> binding element for the inner channel.</summary>
      <returns>A binding element for the inner channel.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpsRelayTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets the specified property from the specified binding context.</summary>
      <returns>A binding element that contains the property.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="T">The type of the property to get.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.HttpsRelayTransportBindingElement.InitializeInnerChannelBindingElement(System.ServiceModel.Channels.HttpTransportBindingElement)">
      <summary>Initializes the specified binding element with the settings from the current instance of the <see cref="T:Microsoft.ServiceBus.HttpsRelayTransportBindingElement" /> binding element.</summary>
      <param name="httpTransportElement">The binding element to initialize.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.HttpsRelayTransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>The URI scheme for the transport, which is “HTTPS”.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.HybridConnectionState">
      <summary>Describes the current connection state for a hybrid connection.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.HybridConnectionState.Relayed">
      <summary>A relayed connection. The communicating parties connect through a relayed socket and the  Service Bus infrastructure. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.HybridConnectionState.Direct">
      <summary>A direct connection. The communicating parties connect using a socket routed on the most direct network path, rather than through the  Service Bus infrastructure. </summary>
    </member>
    <member name="T:Microsoft.ServiceBus.HybridConnectionStateChangedArgs">
      <summary>Represents the arguments to the hybrid connection state change.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.HybridConnectionStateChangedArgs.#ctor(Microsoft.ServiceBus.HybridConnectionState)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.HybridConnectionStateChangedArgs" /> class.</summary>
      <param name="state">The state of the hybrid connection.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.HybridConnectionStateChangedArgs.ConnectionState">
      <summary>Gets the current connection state of the hybrid connection.</summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.HybridConnectionState" />.Contains the connection state. </returns>
    </member>
    <member name="T:Microsoft.ServiceBus.IConnectionStatus">
      <summary>Describes the current status of a one-way connection.</summary>
    </member>
    <member name="E:Microsoft.ServiceBus.IConnectionStatus.Connecting">
      <summary>Occurs when the connection is being established.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.IConnectionStatus.IsOnline">
      <summary>Gets a value that determines whether the connection is online.</summary>
      <returns>true if the connection is alive and online; false if there is no connectivity towards the  Service Bus from the current network location.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.IConnectionStatus.LastError">
      <summary>Retrieves the last error encountered when trying to reestablish the connection from the offline state.</summary>
      <returns>Returns a <see cref="T:System.Exception" /> that contains the last error.</returns>
    </member>
    <member name="E:Microsoft.ServiceBus.IConnectionStatus.Offline">
      <summary>Occurs when the connection becomes offline.</summary>
    </member>
    <member name="E:Microsoft.ServiceBus.IConnectionStatus.Online">
      <summary>Occurs when the connection becomes online.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.IHybridConnectionStatus">
      <summary>Provides access to the current connection state of a hybrid connection channel.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.IHybridConnectionStatus.ConnectionState">
      <summary>Gets the current connection state of the hybrid connection. </summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.HybridConnectionState" />.Contains the connection state. </returns>
    </member>
    <member name="E:Microsoft.ServiceBus.IHybridConnectionStatus.ConnectionStateChanged">
      <summary>Occurs when the connection state changes. </summary>
    </member>
    <member name="T:Microsoft.ServiceBus.InvalidRequestException">
      <summary>The exception that is thrown when an invalid request occurs.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.InvalidRequestException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.InvalidRequestException" /> class. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.InvalidRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.InvalidRequestException" /> class using the specified information and context.</summary>
      <param name="info">Holds the serialized object data about the exception being thrown.</param>
      <param name="context">Contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.InvalidRequestException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.InvalidRequestException" /> class using the specified message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.InvalidRequestException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.InvalidRequestException" /> class using the specified message and inner exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or null if no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.MessageBufferClient">
      <summary>The message buffer client enables the management and use of an  Service Bus message buffer.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.CreateMessageBuffer(Microsoft.ServiceBus.TransportClientEndpointBehavior,System.Uri,Microsoft.ServiceBus.MessageBufferPolicy)">
      <summary>Creates a new message buffer on the  Service Bus, using the specified credentials, URI, and policy.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.MessageBufferClient" /> that contains the message buffer client that will interact with the message buffer.</returns>
      <param name="credential">The credentials to use to access the message buffer.</param>
      <param name="messageBufferUri">The URI for the message buffer.</param>
      <param name="messageBufferPolicy">The policies to apply to the message buffer.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.CreateMessageBuffer(Microsoft.ServiceBus.TransportClientEndpointBehavior,System.Uri,Microsoft.ServiceBus.MessageBufferPolicy,System.ServiceModel.Channels.MessageVersion)">
      <summary>Creates a new message buffer on the  Service Bus, using the specified credentials, URI, policy, and message version.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.MessageBufferClient" /> that contains the message buffer client that will interact with the message buffer.</returns>
      <param name="credential">The credentials to use to access the message buffer.</param>
      <param name="messageBufferUri">The URI for the message buffer.</param>
      <param name="messageBufferPolicy">The policies to apply to the message buffer.</param>
      <param name="messageVersion">The version of the messages allowed to be sent to the message buffer.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.DeleteLockedMessage(System.ServiceModel.Channels.Message)">
      <summary>Deletes the specified locked message from the message buffer.</summary>
      <param name="message">The locked message to delete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.DeleteMessageBuffer">
      <summary>Deletes the message buffer associated with this client.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.GetMessageBuffer(Microsoft.ServiceBus.TransportClientEndpointBehavior,System.Uri)">
      <summary>Retrieves a message buffer client, based on the specified credentials and URI.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.MessageBufferClient" /> that is associated with the specified message buffer.</returns>
      <param name="credential">The credentials to access the message buffer.</param>
      <param name="messageBufferUri">The URI that identifies the message buffer.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.GetMessageBuffer(Microsoft.ServiceBus.TransportClientEndpointBehavior,System.Uri,System.ServiceModel.Channels.MessageVersion)">
      <summary>Retrieves a message buffer from the specified URI, using the specified credentials and message version.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.MessageBufferClient" /> that is associated with the specified message buffer.</returns>
      <param name="credential">The credentials to access the message buffer.</param>
      <param name="messageBufferUri">The URI on which the message buffer is exposed.</param>
      <param name="messageVersion">The message version of the message buffer to retrieve.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.GetPolicy">
      <summary>Retrieves the policy of the message buffer with which the current instance is associated.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.MessageBufferPolicy" /> that contains the message buffer policy.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageBufferClient.MessageBufferUri">
      <summary>Retrieves the URI for the message buffer.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that contains the message buffer URI.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.PeekLock">
      <summary>Retrieves the first available message from the message buffer, and locks that message on the buffer.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.Message" /> instance containing the message.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.PeekLock(System.TimeSpan)">
      <summary>Retrieves the first message from the message buffer and locks the message on the buffer for the default lock duration of two minutes.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.Message" /> that contains the message from the buffer.</returns>
      <param name="timeout">The length of time to wait for the call to return. The default is one minute, which is the maximum supported timeout interval.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.PeekLock(System.TimeSpan,System.TimeSpan)">
      <summary>Retrieves a copy of the first message from the message buffer, while locking the original message in the buffer, using the specified timeout and lock duration. </summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.Message" /> that contains a copy of the first message in the message buffer.</returns>
      <param name="timeout">The length of time to wait for the method to return. The default is one minute, which is the maximum supported timeout interval.</param>
      <param name="lockDuration">The time to keep the original message locked on the message buffer; the default is two minutes. The maximum supported lock duration is 5 minutes and the minimum is 10 seconds.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.ReleaseLock(System.ServiceModel.Channels.Message)">
      <summary>Releases the lock on the specified message in the message buffer.</summary>
      <param name="message">The message to unlock.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.ReleaseLock(System.Uri)">
      <summary>Releases the lock on the message contained at the specified URI.</summary>
      <param name="lockUri">The lock URI of the message buffer.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.Retrieve">
      <summary>Retrieves the first message from the message buffer.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.Message" /> that contains the message.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.Retrieve(System.TimeSpan)">
      <summary>Retrieves the first message from the message buffer, using the specified timeout.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.Message" /> that contains the message.</returns>
      <param name="timeout">The length of time to wait for the method to return. The default is one minute, which is the maximum supported timeout value.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.Send(System.ServiceModel.Channels.Message)">
      <summary>Sends the specified message to the message buffer.</summary>
      <param name="message">The message to send.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferClient.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>Sends the specified message, using the specified timeout.</summary>
      <param name="message">The message to send.</param>
      <param name="timeout">The length of time to wait for the method to finish before returning a failure.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.MessageBufferPolicy">
      <summary>The policy to set on an  Service Bus message buffer endpoint.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferPolicy.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.MessageBufferPolicy" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferPolicy.#ctor(Microsoft.ServiceBus.MessageBufferPolicy)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.MessageBufferPolicy" /> class, using the specified message buffer as a copy.</summary>
      <param name="messageBufferPolicyToCopy">The policy to base the current instance on.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageBufferPolicy.Authorization">
      <summary>Gets or sets the authorization policy for the message buffer.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.AuthorizationPolicy" /> that contains the authorization policy.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageBufferPolicy.Discoverability">
      <summary>Gets or sets the discoverability policy for the message buffer.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.DiscoverabilityPolicy" /> that contains the discoverability policy.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferPolicy.Equals(System.Object)">
      <summary>Returns a value that indicates whether the specified object has the same properties as this message buffer policy.</summary>
      <returns>true if the specified object has the same properties as this message buffer policy; otherwise, false.</returns>
      <param name="obj">The object to compare the properties of with this message buffer policy. Should be castable to <see cref="T:Microsoft.ServiceBus.MessageBufferPolicy" />.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageBufferPolicy.ExpiresAfter">
      <summary>Gets or sets the duration after which the message buffer expires.</summary>
      <returns>Returns a <see cref="T:System.TimeSpan" /> that contains the duration after which the message buffer expires. The default is 5 minutes.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageBufferPolicy.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>The hash code for the current object.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageBufferPolicy.MaxMessageCount">
      <summary>Gets or sets the maximum message count.</summary>
      <returns>Returns the maximum message count. The default is 10 messages.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageBufferPolicy.OverflowPolicy">
      <summary>Gets or sets the overflow policy.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.OverflowPolicy" /> that contains the overflow policy.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageBufferPolicy.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
      <summary>Gets or sets the structure that contains extra data.</summary>
      <returns>Returns <see cref="T:System.Runtime.Serialization.ExtensionDataObject" /> that contains data that is not recognized as belonging to the data contract.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageBufferPolicy.TransportProtection">
      <summary>Gets or sets the transport protection policy.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.TransportProtectionPolicy" /> that contains the transport protection policy. The default is <see cref="F:Microsoft.ServiceBus.TransportProtectionPolicy.AllPaths" />.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.MessageSecurityOverRelayConnection">
      <summary>Describes the message security on a relay connection for a binding.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageSecurityOverRelayConnection.AlgorithmSuite">
      <summary>Sets or gets the algorithm suite used for Message Security at the SOAP level. </summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> that contains the algorithm suite. The default value is Base256.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageSecurityOverRelayConnection.ClientCredentialType">
      <summary>Gets or sets the type of client credential used for client authentication.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.MessageCredentialType" /> that contains the credentials. The default is Windows.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.MessageSecurityOverRelayHttp">
      <summary>Enables setting message-level security properties on the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageSecurityOverRelayHttp.AlgorithmSuite">
      <summary>Specifies the algorithm suite used for security messages at the SOAP level. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageSecurityOverRelayHttp.ClientCredentialType">
      <summary>Specifies the type of client credential used for client authentication.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.MessageCredentialType" /> that contains the algorithm suite. The default is Basic256.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.MessageSecurityOverRelayHttp.IsSecureConversationEnabled">
      <summary>Only used in extensibility scenarios to indicate whether an instance of a class derived from <see cref="T:Microsoft.ServiceBus.MessageSecurityOverRelayHttp" /> is configured to perform secure conversation.</summary>
      <returns>Always returns true, unless overridden in a derived class.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageSecurityOverRelayHttp.NegotiateServiceCredential">
      <summary>Gets or sets a value that indicates whether the service credential is provisioned at the client out of band or is obtained from the service through a process of negotiation.</summary>
      <returns>Returns true if service credential is obtained through a process of negotiation; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.MessageSecurityOverRelayOneway">
      <summary>The message security on a one-way connection over the  Service Bus relay.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageSecurityOverRelayOneway.AlgorithmSuite">
      <summary>Gets or sets the algorithm suite to be used for securing messages at the SOAP level.</summary>
      <returns>Returns an <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> containing the algorithm suite. The default is Basic256, which specifies 256-bit Advanced Encryption Standard (AES) as the symmetric encryption algorithm.</returns>
      <exception cref="T:System.ArgumentNullException">The value of the <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> is null.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.MessageSecurityOverRelayOneway.ClientCredentialType">
      <summary>Gets or sets the type of client credential the client uses to authenticate itself to the service at the SOAP level.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.MessageCredentialType" /> that contains the credential type. The default is Certificate.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <see cref="P:Microsoft.ServiceBus.MessageSecurityOverRelayOneway.ClientCredentialType" /> is not a valid <see cref="T:System.ServiceModel.MessageCredentialType" />.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.NamespaceManager">
      <summary>An anchor class used in managing entities, such as queues, topics, subscriptions, and rules, in your service namespace. You must provide service namespace address and access credentials in order to manage your service namespace.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.NamespaceManagerSettings)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace base address and <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object.</summary>
      <param name="address">The full address of the service namespace.</param>
      <param name="settings">A <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object, which contains the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> and <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> properties.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> or <paramref name="settings" /> is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.String,Microsoft.ServiceBus.TokenProvider)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace base address and token provider.</summary>
      <param name="address">The full address of the service namespace.</param>
      <param name="tokenProvider">The security token provider.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> or <paramref name="token provider" /> is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.NamespaceManagerSettings)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace URI base address and <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object.</summary>
      <param name="address">The full URI address of the service namespace.</param>
      <param name="settings">A <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object, which contains the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> and <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> properties.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> or <paramref name="settings" /> is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.#ctor(System.Uri,Microsoft.ServiceBus.TokenProvider)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> class with the given service namespace URI base address and <see cref="T:Microsoft.ServiceBus.TokenProvider" /> object.</summary>
      <param name="address">The full URI address of the service namespace.</param>
      <param name="tokenProvider">The security token provider object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> or <paramref name="token provider" /> is null.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NamespaceManager.Address">
      <summary>Gets the service namespace base address.</summary>
      <returns>A <see cref="T:System.Uri" /> that represents the service namespace base address.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)" />.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to create a queue.</returns>
      <param name="description">The queue description object.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateQueue(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">A queue with the same name and path exists under the same service namespace.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">The server is overloaded with logical operations. You can consider any of the following actions:Wait and retry calling this function.Remove entities before retry (for example, receive messages before sending any more).</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateQueue(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)" />.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to create a queue.</returns>
      <param name="path">Path of the queue relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateQueue(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="path" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">A queue with the same name and path exists under the same service namespace.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filters.FilterExpression)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the status of the asynchronous create subscription action.</returns>
      <param name="description">The subscription description object.</param>
      <param name="filter">The filter expression used to capture messages satisfying the filtering expression value.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateSubscription(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the status of the asynchronous create subscription action.</returns>
      <param name="description">The subscription description object.</param>
      <param name="ruleDescription">The rule description object.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateSubscription(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the status of the asynchronous create subscription action.</returns>
      <param name="description">The subscription description object.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateSubscription(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.Filters.FilterExpression)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the status of the asynchronous create subscription action.</returns>
      <param name="topicPath">The topic path relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="filter">The filter expression used to capture messages satisfying the filtering expression value.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateSubscription(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the status of the asynchronous create subscription action.</returns>
      <param name="topicPath">The topic path relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="ruleDescription">The rule description object.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateSubscription(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateSubscription(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the status of the asynchronous create subscription action.</returns>
      <param name="topicPath">The topic path relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateSubscription(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the status of the asynchronous create topic action.</returns>
      <param name="description">The topic description object.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateTopic(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginCreateTopic(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that represents the status of the asynchronous create topic action.</returns>
      <param name="path">The path of the topic relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndCreateTopic(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="path" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">A queue with the same name and path exists under the same service namespace.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">The server is overloaded with logical operations. You can consider any of the following actions:Wait and retry calling this function.Remove entities before retry (for example, receive messages before sending any more).</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginDeleteQueue(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.DeleteQueue(System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to delete a queue.</returns>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndDeleteQueue(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or null, or <paramref name="path" /> starts or ends with "/".</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="path" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Queue does not exist under this path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginDeleteSubscription(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.DeleteSubscription(System.String,System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to delete a subscription.</returns>
      <param name="topicPath">The path of the queue relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndDeleteSubscription(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginDeleteTopic(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.DeleteTopic(System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to delete a topic.</returns>
      <param name="path">Path of the topic relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndDeleteTopic(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or null, or <paramref name="path" /> starts or ends with "/".</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginGetQueue(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetQueue(System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get a queue.</returns>
      <param name="path">Path of the queue relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndGetQueue(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or null.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginGetQueues(System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetQueues" />.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get a queue collection.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndGetQueues(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginGetRules(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get all rules in the service namespace.</returns>
      <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
      <param name="subscriptionName">The name of the subscription.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndGetRules(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginGetSubscription(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetSubscription(System.String,System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get a subscription.</returns>
      <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndGetSubscription(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginGetSubscriptions(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get all subscriptions in the service namespace.</returns>
      <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndGetSubscriptions(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginGetTopic(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetTopic(System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a topic.</returns>
      <param name="path">Path of the topic relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndGetTopic(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or null, or <paramref name="path" /> starts or ends with "/".</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginGetTopics(System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.GetTopics" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get all topics in the service namespace.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndGetTopics(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginQueueExists(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.QueueExists(System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to check the existence of a queue in the service namespace.</returns>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndQueueExists(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginSubscriptionExists(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.SubscriptionExists(System.String,System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to check the existence of a subscription in the service namespace.</returns>
      <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndSubscriptionExists(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.BeginTopicExists(System.String,System.AsyncCallback,System.Object)">
      <summary>Asynchronous version of <see cref="M:Microsoft.ServiceBus.NamespaceManager.TopicExists(System.String)" /> method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to check the existence of a topic in the service namespace.</returns>
      <param name="path">The path of the topic relative to the service namespace base address.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.NamespaceManager.EndTopicExists(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.Create">
      <summary>Creates a new instance of <see cref="T:Microsoft.ServiceBus.NamespaceManager" />.</summary>
      <returns>A new instance of <see cref="T:Microsoft.ServiceBus.NamespaceManager" />.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateFromConnectionString(System.String)">
      <summary>Creates a new instance of <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> using a specified connection string.</summary>
      <returns>A new instance of <see cref="T:Microsoft.ServiceBus.NamespaceManager" />.</returns>
      <param name="connectionString">The connection sting used.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(Microsoft.ServiceBus.Messaging.QueueDescription)">
      <summary>Creates a new queue in the service namespace with the specified queue description.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> of the newly created queue.</returns>
      <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> object describing the attributes with which the new queue will be created.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateQueue(System.String)">
      <summary>Creates a new queue in the service namespace with the given path.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> of the newly created queue.</returns>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="path" /> is greater than 290 characters.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">A queue or a topic with the same name and path exists under the same service namespace.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">The server is overloaded with logical operations. You can consider any of the following actions:Wait and retry calling this function.Remove entities before retry (for example, receive messages before sending any more).</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription)">
      <summary>Creates a new subscription in the service namespace with the specified subscription description.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
      <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.Filter)">
      <summary>Creates a new subscription in the service namespace with the specified subscription description and filter expression.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
      <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
      <param name="filter">The filter expression used to capture messages satisfying the filtering expression value.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(Microsoft.ServiceBus.Messaging.SubscriptionDescription,Microsoft.ServiceBus.Messaging.RuleDescription)">
      <summary>Creates a new subscription in the service namespace with the specified subscription description and rule description.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
      <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> object describing the attributes with which the new subscription will be created.</param>
      <param name="ruleDescription">A <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> object describing the attributes with which the messages are matched and acted upon.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String)">
      <summary>Creates a new subscription in the service namespace with the specified topic path and subscription name.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
      <param name="topicPath">The topic path relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.Filter)">
      <summary>Creates a new subscription in the service namespace with the specified topic path, subscription name, and filter expression.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
      <param name="topicPath">The topic path relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="filter">The filter expression used to capture messages satisfying the filtering expression value.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateSubscription(System.String,System.String,Microsoft.ServiceBus.Messaging.RuleDescription)">
      <summary>Creates a new subscription in the service namespace with the specified topic path, subscription name, and rule description.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
      <param name="topicPath">The topic path relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="ruleDescription">A <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> object describing the attributes with which the messages are matched and acted upon.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(Microsoft.ServiceBus.Messaging.TopicDescription)">
      <summary>Creates a new topic inside the service namespace with the specified topic description.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> of the newly created topic.</returns>
      <param name="description">A <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> object.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.CreateTopic(System.String)">
      <summary>Creates a new topic inside the service namespace with the given service namespace path.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> of the newly created topic.</returns>
      <param name="path">The path of the topic relative to the service namespace base address.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is null or empty, or <paramref name="path" /> begins or ends with “/”.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Length of <paramref name="path" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">A queue or a topic with the same name and path exists under the same service namespace.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException">Either the specified size in the description is not supported or the maximum allowable quota has been reached. You must specify one of the supported size values, delete existing entities, or increase your quota size.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.DeleteQueue(System.String)">
      <summary>Deletes the queue described by the path relative to the service namespace base address.</summary>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or null, or <paramref name="path" /> starts or ends with "/".</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="path" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Queue does not exist under this path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.DeleteSubscription(System.String,System.String)">
      <summary>Deletes the subscription with the specified topic path and subscription name.</summary>
      <param name="topicPath">The topic path relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.DeleteTopic(System.String)">
      <summary>Deletes the topic described by path relative to the service namespace base address.</summary>
      <param name="path">The path of the topic relative to the service namespace base address.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is null or empty, or <paramref name="path" /> starts or ends with "/".</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndCreateQueue(System.IAsyncResult)">
      <summary>Ends an asynchronous request to create a queue.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> of the newly created queue.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the queue creation operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndCreateSubscription(System.IAsyncResult)">
      <summary>Ends an asynchronous request to create a subscription.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> of the newly created subscription.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the subscription creation operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndCreateTopic(System.IAsyncResult)">
      <summary>Ends an asynchronous request to create a topic.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> of the newly created topic.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the topic creation operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndDeleteQueue(System.IAsyncResult)">
      <summary>Ends an asynchronous request to delete a queue.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the queue deletion operation.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or null, or <paramref name="path" /> starts or ends with "/".</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="path" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Queue does not exist under this path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndDeleteSubscription(System.IAsyncResult)">
      <summary>Ends an asynchronous request to delete a subscription.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the subscription deletion operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndDeleteTopic(System.IAsyncResult)">
      <summary>Ends an asynchronous request to delete a topic.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the topic deletion operation.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="path" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.QueueNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Queue does not exist under this path.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndGetQueue(System.IAsyncResult)">
      <summary>Ends an asynchronous request to get a queue.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> handle to the queue, or null if the queue does not exist in the service namespace.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the get queue operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndGetQueues(System.IAsyncResult)">
      <summary>Ends an asynchronous request to retrieve all queues from the service namespace.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all queues in the service namespace. Returns an empty collection if no queue exists in this service namespace.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the outstanding asynchronous request to retrieve all queues from the service namespace.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndGetRules(System.IAsyncResult)">
      <summary>Ends an asynchronous request to retrieve all rules from the service namespace.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all rules in the service namespace. Returns an empty collection if no rule exists in this service namespace.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the get rules operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndGetSubscription(System.IAsyncResult)">
      <summary>Ends an asynchronous request to get a subscription.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> handle to the subscription, or null if the subscription does not exist in the service namespace.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the get subscription operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndGetSubscriptions(System.IAsyncResult)">
      <summary>Ends an asynchronous request to retrieve all subscriptions from the service namespace.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all subscriptions in the service namespace. Returns an empty collection if no subscription exists in this service namespace.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the outstanding asynchronous request to retrieve all subscriptions from the service namespace.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndGetTopic(System.IAsyncResult)">
      <summary>Ends an asynchronous request to get a topic.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> handle to the topic, or null  if the topic does not exist in the service namespace.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the get topic operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="result" /> is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndGetTopics(System.IAsyncResult)">
      <summary>Ends an asynchronous request to retrieve all topics from the service namespace.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of topics in this service namespace. Returns an empty collection if no topic exists in this service namespace.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the outstanding asynchronous request to retrieve all topics from the service namespace.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndQueueExists(System.IAsyncResult)">
      <summary>Ends an asynchronous request to determine whether a queue exists from the service namespace.</summary>
      <returns>true if a queue exists in the service namespace; otherwise, false.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the queue existence checking operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndSubscriptionExists(System.IAsyncResult)">
      <summary>Ends an asynchronous request to determine whether a subscription exists from the service namespace.</summary>
      <returns>true if a subscription exists in the service namespace; otherwise, false.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the subscription existence checking operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.EndTopicExists(System.IAsyncResult)">
      <summary>Ends an asynchronous request to determine whether a topic exists from the service namespace.</summary>
      <returns>true if a subscription exists in the service namespace; otherwise, false.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that represents the result of the topic existence checking operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.GetQueue(System.String)">
      <summary>Retrieves a queue from the service namespace.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> handle to the queue, or a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException" /> exception if the queue does not exist in the service namespace.</returns>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or null, or <paramref name="path" /> starts or ends with "/".</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">The queue does not exist in the service namespace.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.GetQueues">
      <summary>Retrieves an enumerable collection of all queues in the service namespace.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all queues in the service namespace or returns an empty collection if no queue exists.</returns>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.GetRules(System.String,System.String)">
      <summary>Retrieves an enumerable collection of all rules in the service namespace.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all rules in the service namespace or returns an empty collection if no rule exists.</returns>
      <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
      <param name="subscriptionName">The name of the subscription.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.GetSubscription(System.String,System.String)">
      <summary>Retrieves the topic from the service namespace.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> handle to the subscription, or a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException" /> exception if the subscription does not exist in the service namespace.</returns>
      <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">The subscription does not exist in the service namespace.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.GetSubscriptions(System.String)">
      <summary>Retrieves an enumerable collection of all subscriptions in the service namespace.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of all subscriptions in the service namespace or returns an empty collection if no subscription exists.</returns>
      <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.GetTopic(System.String)">
      <summary>Retrieves the topic from the service namespace.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> reference to the topic, or a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException" /> exception if the topic does not exist in the service namespace.</returns>
      <param name="path">The path of the topic relative to the service namespace base address.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty or null.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">The topic does not exist in the service namespace.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.GetTopics">
      <summary>Retrieves a collection of topics in a service namespace.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that represents the collection of topics under the current namespace, or returns an empty collection if no topic exists.</returns>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout" /> property to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> object does not have sufficient permission to perform this operation. You should check to ensure that your <see cref="T:Microsoft.ServiceBus.NamespaceManager" /> has the correct <see cref="P:Microsoft.ServiceBus.NamespaceManagerSettings.Credential" /> credentials to perform this operation.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.QueueExists(System.String)">
      <summary>Determines whether a queue exists in the service namespace.</summary>
      <returns>true if a queue exists in the service namespace; otherwise, false.</returns>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.NamespaceManager.Settings">
      <summary>Gets the service namespace client settings.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> object that represents the service namespace client settings.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.SubscriptionExists(System.String,System.String)">
      <summary>Determines whether a subscription exists in the service namespace.</summary>
      <returns>true if a subscription exists in the service namespace; otherwise, false.</returns>
      <param name="topicPath">The path of the topic relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManager.TopicExists(System.String)">
      <summary>Determines whether a topic exists in the service namespace.</summary>
      <returns>true if a topic exists in the service namespace; otherwise, false.</returns>
      <param name="path">The path of the topic relative to the service namespace base address.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.NamespaceManagerSettings">
      <summary>Contains the settings for the namespace manager.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NamespaceManagerSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NamespaceManagerSettings" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.NamespaceManagerSettings.OperationTimeout">
      <summary>Gets or sets the operation timeout period for all service namespace management operations, such as GetQueue, CreateQueue, and so on.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> object that represents the timeout period.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NamespaceManagerSettings.TokenProvider">
      <summary>Gets or sets the security token provider.</summary>
      <returns>The security token provider.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.NetEventRelayBinding">
      <summary>Represents a binding that supports one-way event multicasting and allows any number of event publishers and event consumers to rendezvous at the same endpoint. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NetEventRelayBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NetEventRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayEventSubscriberAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" /> class, using the specified security mode and relay client authentication type.</summary>
      <param name="securityMode">The type of security used with the SOAP message and for the client. </param>
      <param name="relayClientAuthenticationType">The type of authentication used by the client.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetEventRelayBinding.#ctor(Microsoft.ServiceBus.RelayedOnewayTransportBindingElement,System.ServiceModel.Channels.BinaryMessageEncodingBindingElement,Microsoft.ServiceBus.NetOnewayRelaySecurity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" /> class, using the specified transport, encoding, and security elements. </summary>
      <param name="transport">The transport to use. </param>
      <param name="encoding">The encoding to use. </param>
      <param name="security">The type of security used with the SOAP message and for the client. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetEventRelayBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" /> class, using the specified configuration. </summary>
      <param name="configurationName">The name of the configuration to use.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetEventRelayBinding.ApplyConfiguration(System.String)">
      <summary>Applies the settings from the configuration element that corresponds to the specified name to the current instance of this binding element.</summary>
      <param name="configurationName">The name of the configuration element to take the settings from.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetEventRelayBinding.IsBindingElementsMatch(Microsoft.ServiceBus.RelayedOnewayTransportBindingElement,System.ServiceModel.Channels.BinaryMessageEncodingBindingElement,System.ServiceModel.Channels.ReliableSessionBindingElement)">
      <summary>Retrieves a value that determines if the specified binding elements match the current instance. </summary>
      <returns>Returns true if the bindings match; otherwise, false. </returns>
      <param name="transport">The transport to check against the current instance. </param>
      <param name="encoding">The encoding to check against the current instance. </param>
      <param name="session">The session to check against the current instance.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.NetEventRelaySecurity">
      <summary>The collection of security settings for a <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" /> binding. </summary>
    </member>
    <member name="P:Microsoft.ServiceBus.NetEventRelaySecurity.Message">
      <summary>Gets the message security.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.MessageSecurityOverRelayOneway" /> object that contains the message security. The default returned <see cref="T:Microsoft.ServiceBus.MessageSecurityOverRelayOneway" /> object has a <see cref="P:Microsoft.ServiceBus.MessageSecurityOverRelayOneway.ClientCredentialType" /> value of <see cref="F:System.ServiceModel.MessageCredentialType.Certificate" /> and an <see cref="P:Microsoft.ServiceBus.MessageSecurityOverRelayOneway.AlgorithmSuite" /> value of <see cref="F:System.ServiceModel.SecurityAlgorithmSuite.Basic256" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetEventRelaySecurity.Mode">
      <summary>Gets or sets the end-to-end security mode.</summary>
      <returns>Returns an <see cref="T:Microsoft.ServiceBus.EndToEndSecurityMode" /> that contains the security mode. The default is <see cref="F:Microsoft.ServiceBus.EndToEndSecurityMode.None" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not a valid security mode.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NetEventRelaySecurity.RelayEventSubscriberAuthenticationType">
      <summary>Gets or sets the relay authentication type for the relay events subscriber.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayEventSubscriberAuthenticationType" /> that contains the authentication type. The default is <see cref="F:Microsoft.ServiceBus.RelayEventSubscriberAuthenticationType.RelayAccessToken" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not a valid <see cref="T:Microsoft.ServiceBus.RelayEventSubscriberAuthenticationType" /> value.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NetEventRelaySecurity.Transport">
      <summary>Gets the transport-level security settings.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.OnewayRelayTransportSecurity" /> that contains the transport security. The default value has the <see cref="P:Microsoft.ServiceBus.OnewayRelayTransportSecurity.ProtectionLevel" /> property set to <see cref="F:System.Net.Security.EncryptAndSign" />.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.NetOnewayRelayBinding">
      <summary>Represents a binding for a secure, one-way connection through the cloud. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NetOnewayRelayBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NetOnewayRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" /> class, using the specified security mode and authentication type.</summary>
      <param name="securityMode">The security mode. </param>
      <param name="relayClientAuthenticationType">The authentication type. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetOnewayRelayBinding.#ctor(Microsoft.ServiceBus.NetOnewayRelaySecurity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" /> class, using the specified security settings.</summary>
      <param name="security">The security settings.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetOnewayRelayBinding.#ctor(Microsoft.ServiceBus.RelayedOnewayConnectionMode,Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" /> class, using the specified connection and security modes, as well as the authentication type.</summary>
      <param name="connectionMode">The connection mode. </param>
      <param name="securityMode">The type of security used with the SOAP message and for the client. </param>
      <param name="relayClientAuthenticationType">The type of authentication used by the client. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetOnewayRelayBinding.#ctor(Microsoft.ServiceBus.RelayedOnewayTransportBindingElement,System.ServiceModel.Channels.BinaryMessageEncodingBindingElement,Microsoft.ServiceBus.NetOnewayRelaySecurity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" /> class, using the specified transport, encoding, and security.</summary>
      <param name="transport">The transport element containing the core transport settings .</param>
      <param name="encoding">The encoding element.</param>
      <param name="security">The security settings.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetOnewayRelayBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" /> class using the specified configuration.</summary>
      <param name="configurationName">The name of the configuration to use.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetOnewayRelayBinding.ApplyConfiguration(System.String)">
      <summary>Applies the settings from the configuration element that corresponds to the specified name to the current instance of this binding element.</summary>
      <param name="configurationName">The name of the configuration element to take the settings from.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetOnewayRelayBinding.CreateBindingElements">
      <summary>Creates a set of binding elements.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the binding elements.</returns>
    </member>
    <member name="F:Microsoft.ServiceBus.NetOnewayRelayBinding.encoding">
      <summary>Represents the encoding for the binding. Along with the security settings and transport type, the encoding represents the three core properties of a binding.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.EnvelopeVersion">
      <summary>Gets the version of SOAP that is used for messages processed by this binding.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.EnvelopeVersion" /> that contains the envelope version.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.ListenBacklog">
      <summary>Gets or sets the maximum number of queued connection requests that can be pending.</summary>
      <returns>Returns the maximum number of queued connection requests that can be pending. The default is 10.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.MaxBufferPoolSize">
      <summary>Gets or sets the maximum size allowed for a buffer pool that stores messages processed by the binding.</summary>
      <returns>Returns the maximum size allowed for a buffer pool that stores messages processed by the binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.MaxBufferSize">
      <summary>Gets or sets a value that specifies the maximum size, in bytes, of the buffer used to store messages in memory.</summary>
      <returns>Returns the maximum size, in bytes, of the buffer used to store messages in memory. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.MaxConnections">
      <summary>Gets or sets a value that controls the maximum number of connections to be pooled for subsequent reuse on the client and the maximum number of connections allowed to be pending dispatch on the server.</summary>
      <returns>On the client, returns the maximum number of connections to be pooled for subsequent reuse; on the server, returns the maximum number of connections allowed to be pending dispatch.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a received message that is processed by the binding.</summary>
      <returns>Returns the maximum size, in bytes, for a received message that is processed by the binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.MessageSecurityVersion">
      <summary>Gets the message security version.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.MessageSecurityVersion" /> that contains the message security version. This currently returns MessageSecurityVersion..::.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.ReaderQuotas">
      <summary>Gets or sets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</summary>
      <returns>Returns a <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> instance that specifies the complexity constraints on SOAP messages exchanged. The default values for these constraints are provided in the following Remarks section.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns the URI scheme for the transport. The default value is “sb”, indicating the  Service Bus.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.Security">
      <summary>Gets an object that specifies the type of security used with services configured with this binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.NetOnewayRelaySecurity" /> instance that contains the types of security used with this binding. This type contains the message security, the end-to-end security mode, relay client authentication type, and transport security settings.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelayBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>Gets a value that indicates whether incoming requests can be handled more efficiently synchronously or asynchronously.</summary>
      <returns>Returns true if requests can be handled more efficiently synchronously; otherwise, false. The default is false, to handle requests asynchronously.</returns>
    </member>
    <member name="F:Microsoft.ServiceBus.NetOnewayRelayBinding.transport">
      <summary>Specifies the transport type for the binding. Along with the encoding and security settings, the transport type represents the three core properties of a binding.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.NetOnewayRelaySecurity">
      <summary>The collection of security settings for a <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" /> binding.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelaySecurity.Message">
      <summary>Gets the type of message-level security requirements for a service configured with a <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.MessageSecurityOverRelayOneway" /> that indicates the type of message-level security requirements for an endpoint. The default AlgorithmSuite is Basic256, and the default ClientCredentialType is Windows.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelaySecurity.Mode">
      <summary>Gets or sets whether message-level and transport-level security are used by an endpoint configured with a <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.EndToEndSecurityMode" /> that indicates whether message-level or transport-level security are used by an endpoint. The default value is Transport.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The security mode value is not valid.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelaySecurity.RelayClientAuthenticationType">
      <summary>Gets or sets the authentication type for the relay client.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the authentication type. The default value is <see cref="F:Microsoft.ServiceBus.RelayClientAuthenticationType.RelayAccessToken" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is not a valid <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> field.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NetOnewayRelaySecurity.Transport">
      <summary>Gets the type of transport-level security requirements for an endpoint configured with a <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" />. The default value is EncryptAndSign.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.OnewayRelayTransportSecurity" /> that indicates the type of transport-level security requirements for an endpoint.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.NetTcpRelayBinding">
      <summary>Provides a secure, reliable binding suitable for cross-computer communication.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" /> class with the type of security used and relay client authentication specified.
</summary>
      <param name="securityMode">The type of security used with the binding. </param>
      <param name="relayClientAuthenticationType">The type of client authentication used on the relay. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" /> class with the type of security used, the type of client authentication, and a value that indicates whether reliable sessions are explicitly enabled. </summary>
      <param name="securityMode">The type of security used with the  Service Bus binding.</param>
      <param name="relayClientAuthenticationType">The type of client authentication used on the relay. </param>
      <param name="reliableSessionEnabled">true if reliable sessions are enabled; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.#ctor(Microsoft.ServiceBus.TcpRelayTransportBindingElement,System.ServiceModel.Channels.BinaryMessageEncodingBindingElement,System.ServiceModel.Channels.ReliableSessionBindingElement,Microsoft.ServiceBus.NetTcpRelaySecurity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" /> class using the specified transport, encoding, session information, and security settings. </summary>
      <param name="transport">The transport. </param>
      <param name="encoding">The encoding to use. </param>
      <param name="session">The session. </param>
      <param name="security">Security settings. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" /> class with a specified XML configuration. </summary>
      <param name="configurationName">The configuration to use.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.ApplyConfiguration(System.String)">
      <summary>Applies the settings from the configuration element that corresponds to the specified name to the current instance of this binding element.</summary>
      <param name="configurationName">The name of the configuration element to take the settings from.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.CreateBindingElements">
      <summary>Creates a collection with the binding elements for the binding. </summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.CreateMessageSecurity">
      <summary>Creates the message security token for the current instance. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />.Contains the message security token. </returns>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBinding.IsBindingElementsMatch(Microsoft.ServiceBus.TcpRelayTransportBindingElement,System.ServiceModel.Channels.BinaryMessageEncodingBindingElement,System.ServiceModel.Channels.ReliableSessionBindingElement)">
      <summary>Returns a value that determines whether the specified objects have matching binding elements. </summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the objects match; otherwise, false. </returns>
      <param name="transport">The transport to match. </param>
      <param name="encoding">The encoding to match. </param>
      <param name="session">The session to match. </param>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBinding.ReliableSession">
      <summary>Gets an object that indicates whether a reliable session is established between  Service Bus channel endpoints. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.OptionalReliableSession" />.Indicates whether a WS-RM reliable session is established between channel endpoints. The default is false.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.NetTcpRelayBindingBase">
      <summary>The base class for common methods for the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" /> binding.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBindingBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBindingBase" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBindingBase.#ctor(Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBindingBase" /> class, using the specified security mode and relay authentication type.</summary>
      <param name="securityMode">The type of security used with the binding.</param>
      <param name="relayClientAuthenticationType">The type of relay authentication used.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBindingBase.#ctor(Microsoft.ServiceBus.TcpRelayTransportBindingElement,System.ServiceModel.Channels.BinaryMessageEncodingBindingElement,Microsoft.ServiceBus.NetTcpRelaySecurity)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBindingBase" /> class, using the specified transport, encoding, and security.</summary>
      <param name="transport">The transport.</param>
      <param name="encoding">The encoding.</param>
      <param name="security">The security.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBindingBase.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBindingBase" /> class, using the specified configuration name.</summary>
      <param name="configurationName">The binding configuration name.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBindingBase.ApplyConfiguration(System.String)">
      <summary>Applies the settings from the configuration element that corresponds to the specified name to the current instance of this binding element.</summary>
      <param name="configurationName">The name of the configuration element to take the settings from.</param>
      <exception cref="ConfigurationErrorsException">Did not find the binding element specified by the input configuration name in the configuration.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.ConnectionMode">
      <summary>Gets or sets the connection mode: <see cref="F:Microsoft.ServiceBus.TcpRelayConnectionMode.Hybrid" /> or <see cref="F:Microsoft.ServiceBus.TcpRelayConnectionMode.Relayed" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.TcpRelayConnectionMode" /> that contains the connection mode; either <see cref="F:Microsoft.ServiceBus.TcpRelayConnectionMode.Hybrid" /> or <see cref="F:Microsoft.ServiceBus.TcpRelayConnectionMode.Relayed" />. The default is Relayed.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBindingBase.CreateBindingElements">
      <summary>Retrieves an ordered collection of binding elements contained in the current binding.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that makes up the binding.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBindingBase.CreateMessageSecurity">
      <summary>Creates the security binding element for the current instance.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> that contains the security binding element.</returns>
    </member>
    <member name="F:Microsoft.ServiceBus.NetTcpRelayBindingBase.encoding">
      <summary>The encoding element for the current instance. Along with the security and transport settings, the encoding forms the three core properties of a binding.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.EnvelopeVersion">
      <summary>Gets the version of SOAP that is used for messages processed by this binding.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.EnvelopeVersion" /> that contains the envelope version used for this binding.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.NetTcpRelayBindingBase.IsBindingElementsMatch(Microsoft.ServiceBus.TcpRelayTransportBindingElement,System.ServiceModel.Channels.BinaryMessageEncodingBindingElement)">
      <summary>Determines whether the specified binding elements match the default values of the binding elements in the current instance.</summary>
      <returns>true if the elements match; otherwise, false.</returns>
      <param name="transport">The transport binding element.</param>
      <param name="encoding">The encoding binding element.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.ListenBacklog">
      <summary>Gets or sets the maximum number of queued connection requests that can be pending.</summary>
      <returns>Returns the maximum number of queued connection requests that can be pending. The default is 10.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.MaxBufferPoolSize">
      <summary>Gets or sets the maximum size allowed for a buffer pool that stores messages processed by the binding.</summary>
      <returns>Returns the maximum size, in bytes, allowed for a buffer pool that stores messages processed by the binding. The default value is 65,536.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.MaxBufferSize">
      <summary>Gets or sets a value that specifies the maximum size of the buffer used to store messages in memory.</summary>
      <returns>Returns the maximum size, in bytes, of the buffer used to store messages in memory. The default value is 65,536.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.MaxConnections">
      <summary>Gets or sets a value that controls the maximum number of connections to be pooled for subsequent reuse on the client and the maximum number of connections allowed to be pending dispatch on the server.</summary>
      <returns>On the client, returns the maximum number of connections to be pooled for subsequent reuse; on the server, returns the maximum number of connections allowed to be pending dispatch.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a received message that is processed by the binding.</summary>
      <returns>Returns the maximum size, in bytes, for a received message that is processed by the binding. The default value is 65,536.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.MessageSecurityVersion">
      <summary>Gets the message security version.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.MessageSecurityVersion" /> that contains the message security version. This currently always returns MessageSecurityVersion..::.WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.ReaderQuotas">
      <summary>Gets or sets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding. This property cannot be null.</summary>
      <returns>Returns a <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> that specifies the complexity constraints on soap messages exchanged. The default values for these constraints are provided in the following Remarks section.</returns>
      <exception cref="ArgumentNullException">
        <paramref name="ReaderQuotas" /> is null.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns the URI scheme for the transport. The default is “sb”.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.Security">
      <summary>Gets an object that specifies the type of security used with services configured with this binding.</summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.NetTcpRelaySecurity" />, which contains the types of security used with this binding. The default mode of security is Transport.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>Gets a value that indicates whether incoming requests are handled synchronously or asynchronously.</summary>
      <returns>true if requests are handled synchronously; false if handled asynchronously. The default is false, to handle requests asynchronously.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelayBindingBase.TransferMode">
      <summary>Gets or sets a value that indicates whether the service configured with the binding uses streamed or buffered (or both) modes of message transfer.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" />  that indicates whether the service configured with the binding uses streamed or buffered (or both) modes of message transfer. By default, the HTTP, TCP/IP, and named pipe transports use buffered message transfers.</returns>
    </member>
    <member name="F:Microsoft.ServiceBus.NetTcpRelayBindingBase.transport">
      <summary>The transport element for the current instance. Along with the encoding and security, the transport setting forms the core properties of a binding.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.NetTcpRelaySecurity">
      <summary>Specifies the types of transport-level and message-level security used by an endpoint configured with a <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" />.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelaySecurity.Message">
      <summary>Gets the type of message-level security requirements for a service configured with a <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" />. </summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.MessageSecurityOverRelayConnection" /> that indicates the type of message-level security requirements for an endpoint. The default security settings are: a ClientCredentialType of UserName; and an AlgorithmSuite of Basic256.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelaySecurity.Mode">
      <summary>Gets or sets whether message-level and transport-level security are used by an endpoint configured with a <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" />.</summary>
      <returns>Returns an <see cref="T:Microsoft.ServiceBus.EndToEndSecurityMode" /> that indicates whether message-level or transport-level security is used by an endpoint. The default value is Transport.</returns>
      <exception cref="ArgumentOutOfRangeException">The value is not a valid <see cref="T:Microsoft.ServiceBus.EndToEndSecurityMode" /> field.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelaySecurity.RelayClientAuthenticationType">
      <summary>Gets or sets the relay client authentication type.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the relay client authentication type.</returns>
      <exception cref="ArgumentOutOfRangeException">The value is not a valid <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> field.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.NetTcpRelaySecurity.Transport">
      <summary>Gets the type of message-level security requirements for an endpoint configured with a <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.TcpRelayTransportSecurity" /> that indicates the type of transport-level security requirements for an endpoint.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.NonDualMessageSecurityOverRelayHttp">
      <summary>Enables setting message-level security properties for a WS-Http relay binding.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.NonDualMessageSecurityOverRelayHttp.EstablishSecurityContext">
      <summary>Gets or sets a value that specifies whether a security context token is established.</summary>
      <returns>true if the security context token is established; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.OverflowPolicy">
      <summary>Specifies the handling of messages for the <see cref="T:Microsoft.ServiceBus.MessageBufferPolicy" /> in case the buffer reached capacity and the BufferTimeout expired.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.OverflowPolicy.RejectIncomingMessage">
      <summary>Rejects the incoming message by faulting back to the sender.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.RelayClientAuthenticationType">
      <summary>Describes whether clients of a service are required to present a security token issued by  Access Control to the  Service Bus when sending messages.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayClientAuthenticationType.RelayAccessToken">
      <summary>If specified by a listener, the client is required to provide a security token. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayClientAuthenticationType.None">
      <summary>If specified by a listener, the client will not be required to provide a security token. This represents an opt-out mechanism with which listeners can waive the  Access Control protection on the endpoint.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.RelayedOnewayConnectionMode">
      <summary>Represents the different types of one-way connections available through the  Access Control.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayedOnewayConnectionMode.Unicast">
      <summary>Specifies that only one service application can listen on a given endpoint. Used by <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" />.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayedOnewayConnectionMode.Multicast">
      <summary>Specifies that multiple service applications may listen on a given endpoint. Used by <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" />. </summary>
    </member>
    <member name="T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement">
      <summary>Represents the transport binding element used for one-way communication.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.#ctor(Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement" /> class, using the specified authentication type.</summary>
      <param name="relayClientAuthenticationType">The relay client authentication type. This can be either <see cref="F:Microsoft.ServiceBus.RelayClientAuthenticationType.RelayAccessToken" /> or <see cref="F:Microsoft.ServiceBus.RelayClientAuthenticationType.None" />.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.#ctor(Microsoft.ServiceBus.RelayClientAuthenticationType,Microsoft.ServiceBus.RelayedOnewayConnectionMode)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement" /> class, using the specified authentication type and connection mode.</summary>
      <param name="relayClientAuthenticationType">The relay client authentication type. This can be either <see cref="F:Microsoft.ServiceBus.RelayClientAuthenticationType.RelayAccessToken" /> or <see cref="F:Microsoft.ServiceBus.RelayClientAuthenticationType.None" />.</param>
      <param name="connectionMode">The connection mode. This can be either <see cref="F:Microsoft.ServiceBus.RelayedOnewayConnectionMode.Unicast" /> or <see cref="F:Microsoft.ServiceBus.RelayedOnewayConnectionMode.Multicast" />.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.#ctor(Microsoft.ServiceBus.RelayedOnewayTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement" /> class, using the specified element.</summary>
      <param name="elementToClone">The element to clone.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory for creating channels of the specified type and that is initialized from the specified binding context.</summary>
      <returns>A channel factory for creating channels of the specified type and that is initialized from the specified binding context.</returns>
      <param name="context">The binding context that provides context for the binding element.</param>
      <typeparam name="TChannel">The type of channel that the factory builds.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel listener that accepts channels of the specified type and that is initialized from the specified binding context.</summary>
      <returns>A channel listener that accepts channels of the specified type and that is initialized from the specified binding context.</returns>
      <param name="context">The binding context that provides context for the binding element.</param>
      <typeparam name="TChannel">The type of channel the listener is built to accept.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether this binding element can build a channel factory of the specified type.</summary>
      <returns>true if a channel factory can be built; otherwise false.</returns>
      <param name="context">The binding context that provides context for this binding element.</param>
      <typeparam name="TChannel">The type of channel the channel factory is built.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the binding element can build a channel listener for the specified type of channel.</summary>
      <returns>true if a channel listener can be built for the specified type of channel; otherwise, false.</returns>
      <param name="context">The binding context that provides context for this binding element.</param>
      <typeparam name="TChannel">The type of channel the listener accepts.</typeparam>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.ChannelInitializationTimeout">
      <summary>Gets or sets the maximum time a channel can be in the initialization status before being disconnected.</summary>
      <returns>The maximum time a channel can be in the initialization status before being disconnected.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.Clone">
      <summary>Returns a copy of this instance of the <see cref="T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement" /> binding element.</summary>
      <returns>A binding element that contains a deep clone of this binding element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.ConnectionBufferSize">
      <summary>Gets or sets the size of the buffer used to transmit a part of the serialized message on the wire from the client or service.</summary>
      <returns>The size of the buffer used to transmit a part of the serialized message on the wire from the client or service.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.ConnectionMode">
      <summary>Gets the connection mode used in this binding element. The connection mode can be one of the <see cref="T:Microsoft.ServiceBus.RelayedOnewayConnectionMode" /> enumeration values.</summary>
      <returns>The connection mode used in this binding element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.ConnectionPoolSettings">
      <summary>Gets the connection pool settings for the current instance.</summary>
      <returns>The connection pool settings for the current instance.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns an object of the requested type, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The object of the requested type if found; otherwise, returns null.</returns>
      <param name="context">The binding context that provides context for this binding element.</param>
      <typeparam name="T">The type of the property to get.</typeparam>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.ListenBacklog">
      <summary>Gets or sets the maximum number of queued connection requests that can be pending.</summary>
      <returns>The maximum number of queued connection.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum size in bytes of the buffer that holds incoming messages that are processed by this binding.</summary>
      <returns>The maximum size in bytes of the buffer that holds incoming messages that are processed by this binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.MaxOutputDelay">
      <summary>Gets or sets the maximum interval of time that a message or a portion of a message can remain buffered in memory before being sent out.</summary>
      <returns>The maximum interval of time that a message or a portion of a message can remain buffered in memory before being sent out.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.MaxPendingAccepts">
      <summary>Gets or sets the maximum number of pending asynchronous accept threads that are available for processing incoming connections on the service.</summary>
      <returns>The maximum number of pending asynchronous accept threads that are available for processing incoming connections on the service.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.MaxPendingConnections">
      <summary>Gets or sets the maximum number of pending connections.</summary>
      <returns>The maximum number of pending connections.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.RelayClientAuthenticationType">
      <summary>Gets or sets the type of  Access Control authentication used by this binding element.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that represents the type of authentication used by this binding element.The default value is <see cref="F:Microsoft.ServiceBus.RelayClientAuthenticationType.RelayAccessToken" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.Scheme">
      <summary>Gets the URI scheme used by this binding element.</summary>
      <returns>The URI scheme used by this binding element. The value returned is “sb”.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>Includes a custom policy assertion about bindings for exporting.</summary>
      <param name="exporter">A metadata exporter that can be used to modify the exporting process.</param>
      <param name="context">The policy conversion context to insert your custom policy assertion.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.RelayedOnewayTransportSecurity">
      <summary>Represents the transport security settings of a one-way binding.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.RelayedOnewayTransportSecurity.ProtectionLevel">
      <summary>Gets or sets the transport security protection level.</summary>
      <returns>Returns a <see cref="T:System.Net.Security.ProtectionLevel" /> that contains the transport security protection level.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.RelayEventSubscriberAuthenticationType">
      <summary>Describes whether subscribers to a <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" /> are required to present a security token issued by the  Access Control service to the  Service Bus service when sending messages.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayEventSubscriberAuthenticationType.RelayAccessToken">
      <summary>If specified by a NetEventRelay listener, the client is required to provide a relay access token. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayEventSubscriberAuthenticationType.None">
      <summary>If specified by a NetEventRelay subscriber, the client will not be required to provide a relay access token. This represents an opt-out mechanism with which listeners can waive the  Access Control protection on the endpoint and perform their own access control.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.RelayTransportProtectionMode">
      <summary>Describes the types of protection on a transport relay. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayTransportProtectionMode.None">
      <summary>Security is disabled.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayTransportProtectionMode.ListenerOnly">
      <summary>The service application must have security; a client application is not required to have any. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.RelayTransportProtectionMode.EndToEnd">
      <summary>Both the service application and client application must have security. </summary>
    </member>
    <member name="T:Microsoft.ServiceBus.SamlTokenProvider">
      <summary>Provides a set of methods that execute asynchronous SAML token retrieval operations.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.SamlTokenProvider.OnBeginGetToken(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin get token action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SamlTokenProvider.OnBeginGetWebToken(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin get web token action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SamlTokenProvider.OnEndGetToken(System.IAsyncResult,System.DateTime@)">
      <summary>Executes the end get token action.</summary>
      <returns>The security token.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</param>
      <param name="cacheUntil">When this method returns, contains the expiration date and time of the token information in the cache.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SamlTokenProvider.OnEndGetWebToken(System.IAsyncResult,System.DateTime@)">
      <summary>Executes the end get web token action.</summary>
      <returns>The web token.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</param>
      <param name="cacheUntil">When this method returns, contains the expiration date and time of the token information in the cache.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.ServerErrorException">
      <summary>An exception that is thrown by the  Service Bus when an error occurs while processing a request.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ServerErrorException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.ServerErrorException" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ServerErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.ServerErrorException" /> class with the specified serialization information and streaming context.</summary>
      <param name="info">Holds the serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ServerErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.ServerErrorException" /> class with the specified error message.</summary>
      <param name="message">The error message that describes this exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ServerErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.ServerErrorException" /> class with the specified error message and inner exception.</summary>
      <param name="message">The error message that describes this exception.</param>
      <param name="innerException">The exception that caused the current exception to be thrown.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.ServiceBusEnvironment">
      <summary>Describes the  Service Bus environment. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceBusEnvironment.CreateAccessControlUri(System.String)">
      <summary>Creates a URI string to use with access control for the specified .</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that contains the specified URI.</returns>
      <param name="serviceNamespace">The  to create the URI for.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceBusEnvironment.CreateServiceUri(System.String,System.String,System.String)">
      <summary>Constructs the  Service Bus URI for an application, using the specified scheme,  name, and service path.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that contains the new URI.</returns>
      <param name="scheme">The scheme of the URI.</param>
      <param name="serviceNamespace">The  name used by the application.</param>
      <param name="servicePath">The service path that follows the host name section of the URI.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceBusEnvironment.CreateServiceUri(System.String,System.String,System.String,System.Boolean)">
      <summary>Constructs the  Service Bus URI for an application, using the specified scheme,  name, service path, and relayed path prefix.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that contains the new URI.</returns>
      <param name="scheme">The scheme of the URI.</param>
      <param name="serviceNamespace">The  name used by the application.</param>
      <param name="servicePath">The service path that follows the host name section of the URI.</param>
      <param name="suppressRelayPathPrefix">True if the relay path prefix is suppressed; otherwise, false.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.ServiceBusEnvironment.DefaultIdentityHostName">
      <summary>Gets the default host name for the  Access Control Service.</summary>
      <returns>Returns the default identity host name. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.ServiceBusEnvironment.SystemConnectivity">
      <summary>Gets the singleton <see cref="T:Microsoft.ServiceBus.ConnectivitySettings" /> instance that holds the connectivity settings for TCP and HTTP-based endpoints.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.ConnectivitySettings" /> that contains the connectivity settings.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.ServiceRegistrySettings">
      <summary>Contains the settings for the  Service Bus registry.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceRegistrySettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.ServiceRegistrySettings" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceRegistrySettings.#ctor(Microsoft.ServiceBus.DiscoveryType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.ServiceRegistrySettings" /> class using the specified discovery type.</summary>
      <param name="discoveryType">The discovery type that indicates whether the endpoint is public or private. </param>
    </member>
    <member name="F:Microsoft.ServiceBus.ServiceRegistrySettings.allowUnauthenticatedAccess">
      <summary>true if your endpoint allows for unauthenticated access; otherwise, false. The default value is false.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.ServiceRegistrySettings.DiscoveryMode">
      <summary>Gets or sets how the service is discovered. </summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.DiscoveryType" />.DiscoveryType.Public for discovery to be public; DiscoveryType.Private for discovery to be private. The default value is DiscoveryType.Private.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.ServiceRegistrySettings.DisplayName">
      <summary>Gets or sets the display name for the endpoint.</summary>
      <returns>Returns <see cref="T:System.String" />.Contains the display name. </returns>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceRegistrySettings.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Adds the specified binding parameters to the specified endpoint. </summary>
      <param name="endpoint">The endpoint. </param>
      <param name="bindingParameters">The bindings to add. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceRegistrySettings.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Implements or modifies the specified client across the specified runtime. </summary>
      <param name="endpoint">The endpoint. </param>
      <param name="clientRuntime">The client.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceRegistrySettings.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Implements a modification or extension of the service across an endpoint. </summary>
      <param name="endpoint">The endpoint that exposes the contract.</param>
      <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.ServiceRegistrySettings.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Confirms that the endpoint meets some intended criteria.</summary>
      <param name="endpoint">The endpoint to validate.</param>
    </member>
    <member name="F:Microsoft.ServiceBus.ServiceRegistrySettings.transportProtectionEnabled">
      <summary>true if transport protection is enabled; otherwise, false. The default value is true.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.SharedSecretTokenProvider">
      <summary>Provides methods that return name/value pairs for web token assertions, and that execute asynchronous shared secret token retrieval operations.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.SharedSecretTokenProvider.ComputeSimpleWebTokenString(System.String,System.Byte[])">
      <summary>Returns a string of URL encoded name/value pairs for a simple web token assertion using the specified issuer name and issuer secret.</summary>
      <returns>A URL encoded name/value pairs for a simple web token assertion.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SharedSecretTokenProvider.ComputeSimpleWebTokenString(System.String,System.String)">
      <summary>Returns a string of URL encoded name/value pairs for a simple web token assertion using the specified issuer name and issuer secret.</summary>
      <returns>A URL encoded name/value pairs for a simple web token assertion.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SharedSecretTokenProvider.OnBeginGetToken(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin get token action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SharedSecretTokenProvider.OnBeginGetWebToken(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin get web token action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SharedSecretTokenProvider.OnEndGetToken(System.IAsyncResult,System.DateTime@)">
      <summary>Executes the end get token action.</summary>
      <returns>The security token.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</param>
      <param name="cacheUntil">When this method returns, contains the expiration date and time of the token information in the cache.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SharedSecretTokenProvider.OnEndGetWebToken(System.IAsyncResult,System.DateTime@)">
      <summary>Executes the end get web token action.</summary>
      <returns>The web token.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</param>
      <param name="cacheUntil">When this method returns, contains the expiration date and time of the token information in the cache.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.SimpleWebSecurityToken">
      <summary>A security token that wraps a Simple Web Token.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityToken.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityToken" /> class with the specified Simple Web Token.</summary>
      <param name="tokenString">A string that represents the Simple Web Token.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityToken.#ctor(System.String,System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityToken" /> class with the specified Simple Web Token and expiry date.</summary>
      <param name="tokenString">A string that represents the Simple Web Token.</param>
      <param name="expiry">The expiry date of the simple web token.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityToken.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityToken" /> class with the specified token ID and Simple Web Token.</summary>
      <param name="id">A unique identifier for the Simple Web Token.</param>
      <param name="tokenString">A string that represents the Simple Web Token.</param>
      <exception cref="T:System.NullReferenceException">The <paramref name="id" /> parameter or <paramref name="tokenString" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.SimpleWebSecurityToken.Id">
      <summary>Gets the ID associated with the Simple Web Token.</summary>
      <returns>The ID associated with the Simple Web Token.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.SimpleWebSecurityToken.SecurityKeys">
      <summary>Gets the cryptographic keys associated with the security token.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey" /> that contains the set of keys associated with the Simple Web Token.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.SimpleWebSecurityToken.Token">
      <summary>Gets the Simple Web Token.</summary>
      <returns>The Simple Web Token.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.SimpleWebSecurityToken.ValidFrom">
      <summary>Not implemented.</summary>
      <returns>Throws a <see cref="T:System.NotImplementedException" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.SimpleWebSecurityToken.ValidTo">
      <summary>Not implemented.</summary>
      <returns>Throws a <see cref="T:System.NotImplementedException" />.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer">
      <summary>A class used to read and write <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityToken" />,  <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" />, and  <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> objects as XML.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.#ctor(System.IdentityModel.Selectors.SecurityTokenSerializer)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer" /> class with the specified security token serializer.</summary>
      <param name="innerSerializer">The security token serializer to use as the inner serializer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="innerSerializer" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read the &lt;KeyIdentifier&gt; element referred to by the specified XML reader.</summary>
      <returns>true when the specified &lt;KeyIdentifier&gt; element can be read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier clause.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.CanReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read the &lt;KeyIdentifier&gt; element referred to by the specified XML reader.</summary>
      <returns>true when the specified &lt;KeyIdentifier&gt; element can be read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.CanReadTokenCore(System.Xml.XmlReader)">
      <summary>Determines whether this serializer can read the security token pointed at by the specified XML reader.</summary>
      <returns>true when the security token can be read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the security token.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.CanWriteKeyIdentifierClauseCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Determines whether this serializer can write the specified key identifier clause.</summary>
      <returns>true when this serializer can write the specified key identifier clause; otherwise, false.</returns>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier clause to write.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.CanWriteKeyIdentifierCore(System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Determines whether this serializer can write the specified key identifier.</summary>
      <returns>true when this serializer can write the specified key identifier; otherwise, false.</returns>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.CanWriteTokenCore(System.IdentityModel.Tokens.SecurityToken)">
      <summary>Determines whether this serializer can write the specified security token to XML.</summary>
      <returns>true when the security token can be written; otherwise, false.</returns>
      <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> to convert to XML.</param>
    </member>
    <member name="F:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.DefaultInstance">
      <summary>Specifies an instance of the <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.ReadBinaryCore(System.String,System.Byte[])">
      <summary>Returns a new <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityToken" /> based on the specified ID and token data.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the new SimpleWebSecurityToken.</returns>
      <param name="id">The unique identifier associated with the SimpleWebSecurityToken to return.</param>
      <param name="rawData">The binary SimpleWebSecurityToken content.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)">
      <summary>Reads the key identifier clause using the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier clause.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.ReadKeyIdentifierCore(System.Xml.XmlReader)">
      <summary>Reads the key identifier using the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the key identifier.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.ReadTokenCore(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)">
      <summary>Reads the <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityToken" /> or the security token pointed at by the specified XML reader.</summary>
      <returns>A <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> that represents the SimpleWebSecurityToken or the security token that is read.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> to read the SimpleWebSecurityToken or the security token.</param>
      <param name="tokenResolver">A <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver" /> that determines the security token type.</param>
      <exception cref="T:System.NotSupportedException">The encoding of the XML element is not base64Binary.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.WriteBinaryCore(System.IdentityModel.Tokens.SecurityToken,System.String@,System.Byte[]@)">
      <summary>Extracts the ID and binary token content from the specified <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityToken" />.</summary>
      <param name="token">The SimpleWebSecurityToken to extract the ID and binary content from.</param>
      <param name="id">When this method returns, contains the unique identifier of the SimpleWebSecurityToken.</param>
      <param name="rawData">When this method returns, contains the binary content of the SimpleWebSecurityToken.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
      <summary>Writes the specified key identifier clause using the specified XML writer.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the key identifier clause.</param>
      <param name="keyIdentifierClause">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause" /> that represents the key identifier clause to write.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.WriteKeyIdentifierCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifier)">
      <summary>Writes the specified key identifier using the specified XML writer.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the key identifier.</param>
      <param name="keyIdentifier">A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier" /> that represents the key identifier to write.</param>
      <exception cref="T:System.InvalidOperationException">The binary token content is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebSecurityTokenSerializer.WriteTokenCore(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
      <summary>Writes the specified <see cref="T:Microsoft.ServiceBus.SimpleWebSecurityToken" /> or security token using the specified XML writer.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the SimpleWebSecurityToken or security token.</param>
      <param name="token">The SimpleWebSecurityToken or security token to write.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.SimpleWebTokenProvider">
      <summary>Provides a set of methods that execute asynchronous simple Web token (SWT) retrieval operations.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebTokenProvider.OnBeginGetToken(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin get token action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebTokenProvider.OnBeginGetWebToken(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin get web token action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebTokenProvider.OnEndGetToken(System.IAsyncResult,System.DateTime@)">
      <summary>Executes the end get token action.</summary>
      <returns>The security token.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</param>
      <param name="cacheUntil">When this method returns, contains the expiration date and time of the token information in the cache.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.SimpleWebTokenProvider.OnEndGetWebToken(System.IAsyncResult,System.DateTime@)">
      <summary>Executes the end get web token action.</summary>
      <returns>The web token.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</param>
      <param name="cacheUntil">When this method returns, contains the expiration date and time of the token information in the cache.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.SocketConnectionPoolSettings">
      <summary>Represents the properties that control the behavior of the socket connection pool.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.SocketConnectionPoolSettings.GroupName">
      <summary>Gets or sets the group name of the socket connection pool.</summary>
      <returns>The group name of the socket connection pool.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.SocketConnectionPoolSettings.IdleTimeout">
      <summary>Gets or sets the maximum time the connection can be idle in the connection pool before being disconnected.</summary>
      <returns>The maximum time the connection can be idle in the connection pool before being disconnected.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.SocketConnectionPoolSettings.LeaseTimeout">
      <summary>Gets or sets the time span after which an active connection is closed.</summary>
      <returns>The duration after which the socket connection is closed.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.SocketConnectionPoolSettings.MaxOutboundConnectionsPerEndpoint">
      <summary>Gets or sets the maximum number of outbound connections for each endpoint that is cached in the connection pool.</summary>
      <returns>The maximum number of outbound connections for each endpoint that is cached in the connection pool.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.SocketSecurityRole">
      <summary>Describes the role for socket security. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.SocketSecurityRole.SslServer">
      <summary>Identifies the application as an SSL server, meaning that the application will accept only a secure transport connection.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.SocketSecurityRole.SslClient">
      <summary>The application is identified as an SSL client, meaning the application will attempt to connect and send messages using an encrypted channel. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.SocketSecurityRole.None">
      <summary>When set on a client, the application will send unencrypted messages. When set on a server, the application will accept both encrypted and unencrypted messages.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.TcpClientTransportTokenAssertionProviderBindingElement">
      <summary>Represents the transport binding element that supports channel security over an SSL stream for use in policy exports.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpClientTransportTokenAssertionProviderBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.TcpClientTransportTokenAssertionProviderBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpClientTransportTokenAssertionProviderBindingElement.Clone">
      <summary>Returns a copy of this binding element instance.</summary>
      <returns>A copy of this binding element instance.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpClientTransportTokenAssertionProviderBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns an object of the requested type, if present, from the appropriate layer in the binding stack.</summary>
      <returns>The object of the requested type if found; otherwise, returns null.</returns>
      <param name="context">The binding context that provides context for this binding element.</param>
      <typeparam name="T">The type of the property to get.</typeparam>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpClientTransportTokenAssertionProviderBindingElement.GetTransportTokenAssertion">
      <summary>Gets the <see cref="T:System.Xml.XmlElement" /> that represents the transport token used in the security binding.</summary>
      <returns>An <see cref="T:System.Xml.XmlElement" /> that represents the transport token used in the security binding.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.TcpRelayConnectionMode">
      <summary>Describes the connection mode for the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" />. </summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TcpRelayConnectionMode.Relayed">
      <summary>All communication is relayed through the  Service Bus cloud. The SSL-protected control connection is used to negotiate a relayed end-to-end socket connection that all Client-Service communication flows through. After the connection is established, the  Service Bus infrastructure acts much like a socket forwarder proxy relaying a bidirectional byte stream. This mode additionally requires outbound port 819 for the NAT prediction algorithm. With most personal firewall products, the outbound socket connection that is being established by the direct connect mode will also require a one-time policy exception to be granted by the user (the Windows Personal Firewall and other products will typically prompt the user) to the hosting application.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TcpRelayConnectionMode.Hybrid">
      <summary>Communication is relayed through the  Service Bus infrastructure while the Client and Service endpoints negotiate a direct socket connection to each other. The coordination of this direct connection is governed by the  Service Bus cloud service. The direct socket connection algorithm is capable of establishing direct connections between two parties that sit behind opposing Firewalls and NAT devices. The algorithm uses only outbound connections for Firewall traversal and relies on a mutual port prediction algorithm for NAT traversal. Since the NAT traversal algorithm is dependent on a very narrowly timed coordination and a best-guess prediction about the expected NAT behavior, the algorithm tends to have a very high success rate for Home and Small Business scenarios with a small number of clients and degrades in its success rate with larger NATs. If a direct connection can be established, the relayed connection is automatically upgraded to the direct connection without message or data loss. If the direct connection cannot be established, data will continue to flow through the  Service Bus Relay.

This mode additionally requires outbound port 819 for the NAT prediction algorithm. With most personal firewall products, the outbound socket connection that is being established by the direct connect mode will also require a one-time policy exception to be granted by the user (the Windows Personal Firewall and other products will typically prompt the user) to the hosting application.
</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.TcpRelayTransportBindingElement">
      <summary>Represents the binding element for the TCP transport relay. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpRelayTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.TcpRelayTransportBindingElement" /> class. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpRelayTransportBindingElement.#ctor(Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.TcpRelayTransportBindingElement" /> class using the specified relay client authentication type. </summary>
      <param name="relayClientAuthenticationType">The relay client authentication type.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpRelayTransportBindingElement.#ctor(Microsoft.ServiceBus.TcpRelayTransportBindingElement)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.TcpRelayTransportBindingElement" /> class using the specified relay binding element. </summary>
      <param name="elementToBeCloned">The element to be cloned.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpRelayTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type.</returns>
      <param name="context">Describes the bindings, behaviors, contracts, and other information required to create the channel factory.</param>
      <typeparam name="TChannel">The type of channel factory. </typeparam>
      <exception cref="InvalidOperationException">When Transport protection is enabled and the Connection Mode is set to either Hybrid or Direct.This member is unlikely to be used directly, but may be used when creating a custom binding. For more information, see Creating a Custom AppFabric Service Bus Binding.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpRelayTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel listener of the specified type.</summary>
      <returns>A channel listener of the specified type.</returns>
      <param name="context">Describes the bindings, behaviors, contracts, and other information required to create the channel factory.</param>
      <typeparam name="TChannel">The type of channel factory. </typeparam>
      <exception cref="InvalidOperationException">When Transport protection is enabled and the Connection Mode is set to either Hybrid or Direct.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpRelayTransportBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BindingElement" /> that contains a copy of the binding element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.TcpRelayTransportBindingElement.ConnectionMode">
      <summary>Gets or sets the connection mode.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.TcpRelayConnectionMode" /> that contains the connection mode.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.TcpRelayTransportBindingElement.ConnectionPoolSettings">
      <summary>Gets the connection pool settings for the current instance.</summary>
      <returns>The connection pool settings for the current instance.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpRelayTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a specified object from the binding context.</summary>
      <returns>A binding element that contains the specified object, or null if not found.</returns>
      <param name="context">The context. </param>
      <typeparam name="T">The type of object to get. </typeparam>
    </member>
    <member name="P:Microsoft.ServiceBus.TcpRelayTransportBindingElement.RelayClientAuthenticationType">
      <summary>Gets or sets the type of authentication used by the service client.</summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" />.Contains the authentication type. The default value is RelayAccessToken.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.TcpRelayTransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>Returns the URI scheme for the transport, which is “TCP”.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.TcpRelayTransportBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary> Exports a custom policy assertion about bindings.</summary>
      <param name="exporter">A metadata exporter that can be used to modify the exporting process.</param>
      <param name="context">The policy conversion context to insert your custom policy assertion.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.TcpRelayTransportSecurity">
      <summary>Provides properties that control authentication parameters and protection level for the TCP transport relay binding. </summary>
    </member>
    <member name="P:Microsoft.ServiceBus.TcpRelayTransportSecurity.ProtectionLevel">
      <summary>Gets or sets the transport protection level. </summary>
      <returns>Returns a <see cref="T:System.Net.Security.ProtectionLevel" /> that contains the protection level. The default is EncryptAndSign.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.TokenConstants">
      <summary>Provides constants that represent parameter names, field names, method names, and delimiters that are used in authentication requests.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.DefaultCompoundClaimDelimiter">
      <summary>The character used to delimit the list of values for a compound token.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.HttpAuthParameterSeparator">
      <summary>The character used to separate parameters sent in HTTP authentication requests.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.HttpMethodGet">
      <summary>The string used to represent the GET verb in an HTTP request.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.HttpMethodHead">
      <summary>The string used to represent the HEAD verb in an HTTP request.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.HttpMethodPost">
      <summary>The string used to represent the POST verb in an HTTP request.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.HttpMethodTrace">
      <summary>The string used to represent the TRACE verb in an HTTP request.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.ManagementIssuerName">
      <summary>The default issuer name string value used to gain access to the  Access Control management service.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.MaxIssuerNameSize">
      <summary>The maximum size of the issuer name.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.MaxIssuerSecretSize">
      <summary>The maximum size of the issuer secret key.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.OutputClaimIssuerId">
      <summary>The issuer ID for all output claims from the  Access Control service.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.Saml11ConfirmationMethodBearerToken">
      <summary>The value of the ConfirmationMethod attribute used in a Security Assertion Markup Language (SAML) bearer assertion.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.ServiceBusIssuerName">
      <summary>The default issuer name string value used to gain access to the  Service Bus.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.TokenAudience">
      <summary>The token audience attribute name that is used in a Simple Web Token (SWT). The token audience is the SWT processor that the SWT is intended for.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.TokenDigest256">
      <summary>The attribute name of the hash-based message authentication code used in a Simple Web Token.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.TokenExpiresOn">
      <summary>The attribute name for the token expiration (measured in seconds) used in a Simple Web Token.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.TokenIssuer">
      <summary>The attribute name for the Simple Web Token (SWT) issuer.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.TrackingIdHeaderName">
      <summary>The attribute name for the tracking ID in the returned token response.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.UrlParameterSeparator">
      <summary>The character used to separate parameters in a token request.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapAccessToken">
      <summary>The parameter name for the access token that is returned in the response by the Security Token Service using the WRAP protocol.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapAppliesTo">
      <summary>The name of the AppliesTo field that is in the token request body that is sent to the  Access Control service.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapAssertion">
      <summary>The parameter name for the WRAP assertion that is sent in the token request using the WRAP protocol.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapAssertionFormat">
      <summary>The parameter name for the assertion format that is sent in the token request using the WRAP protocol.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapAuthenticationType">
      <summary>The WRAP authentication protocol type name.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapAuthorizationHeaderKey">
      <summary>The parameter name of the access token that is sent in the authorization header of a request to the  Service Bus.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapBaseTime">
      <summary>The base date and time used in the WRAP protocol.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapContentType">
      <summary>The content type used for formatting token request parameters when using the WRAP protocol.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapName">
      <summary>The parameter name for the account name that is sent in the token request using the WRAP protocol.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapPassword">
      <summary>The parameter name for the account password that is sent in the token request using the WRAP protocol.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapRequestedLifetime">
      <summary>The parameter name for the requested token lifetime (measured in seconds) that is sent in the token request using the WRAP protocol.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapSamlAssertionFormat">
      <summary>Specifies the Security Assertion Markup Language format.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapSwtAssertionFormat">
      <summary>Specifies the Simple Web Token format.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TokenConstants.WrapTokenExpiresIn">
      <summary>The parameter name for the token expiration (measured in seconds) that is returned in the token response by the token issuer using the WRAP protocol.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.TokenProvider">
      <summary>Represents a security token provider with built-in factory methods returning some well-known token providers.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.#ctor(System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.TokenProvider" /> class.</summary>
      <param name="cacheTokens">true if new security tokens are being cached; otherwise, false.</param>
      <param name="supportHttpAuthToken">true if web token is supported by this provider; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.BeginGetToken(System.String,System.String,System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to get a security token.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="bypassCache">true to ignore existing token information in the cache; false to use the token information in the cache.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.BeginGetWebToken(System.String,System.String,System.Boolean,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to get a web token.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</returns>
      <param name="appliesTo">The URI which the token applies to.</param>
      <param name="action">The request action.</param>
      <param name="bypassCache">true to ignore existing token information in the cache; false to use the token information in the cache.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="P:Microsoft.ServiceBus.TokenProvider.CacheTokens">
      <summary>Gets or sets a value that indicates whether new security tokens are being cached.</summary>
      <returns>true if new security tokens are being cached; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.CreateSamlTokenProvider(System.String)">
      <summary>Creates a Saml token provider with the specified Saml token.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TokenProvider" /> for returning Saml token.</returns>
      <param name="samlToken">The string that represents the Saml token.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.CreateSamlTokenProvider(System.String,System.Uri)">
      <summary>Creates a Saml token provider with the specified Saml token and URI of the Security Token Service (STS).</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TokenProvider" /> for returning Saml token.</returns>
      <param name="samlToken">The string that represents the Saml token.</param>
      <param name="stsUri">The URI of the Security Token Service (STS).</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.CreateSharedSecretTokenProvider(System.String,System.Byte[])">
      <summary>Creates a shared secret token provider.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TokenProvider" /> for returning shared secret token.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.CreateSharedSecretTokenProvider(System.String,System.Byte[],System.Uri)">
      <summary>Creates a shared secret token provider.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TokenProvider" /> for returning shared secret token.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
      <param name="stsUri">The URI of the Security Token Service (STS).</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.CreateSharedSecretTokenProvider(System.String,System.String)">
      <summary>Creates a shared secret token provider.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TokenProvider" /> for returning shared secret token.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.CreateSharedSecretTokenProvider(System.String,System.String,System.Uri)">
      <summary>Creates a shared secret token provider.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TokenProvider" /> for returning shared secret token.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
      <param name="stsUri">The URI of the Security Token Service (STS).</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.CreateSimpleWebTokenProvider(System.String)">
      <summary>Creates a simple web token provider.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TokenProvider" /> for returning simple web token.</returns>
      <param name="token">The string that represents the simple web token.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.CreateSimpleWebTokenProvider(System.String,System.Uri)">
      <summary>Creates a simple web token provider.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TokenProvider" /> for returning simple web token.</returns>
      <param name="token">The string that represents the simple web token.</param>
      <param name="stsUri">The URI of the Security Token Service (STS).</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.EndGetToken(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to get a security token.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> object.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.EndGetWebToken(System.IAsyncResult)">
      <summary>Completes an asynchronous operation to get a web token.</summary>
      <returns>The <see cref="T:System.String" /> that represents the web token.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.TokenProvider.IsWebTokenSupported">
      <summary>Gets or sets a value that indicates whether web token is supported by this provider.</summary>
      <returns>true if web token is supported by this provider; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.OnBeginGetToken(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the BeginGetToken method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.OnBeginGetWebToken(System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the BeginGetWebToken method.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</returns>
      <param name="appliesTo">The URI which the access token applies to.</param>
      <param name="action">The request action.</param>
      <param name="timeout">The time span that specifies the timeout value for the message that gets the security token.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.OnEndGetToken(System.IAsyncResult,System.DateTime@)">
      <summary>Executes upon calling the EndGetToken method.</summary>
      <returns>The <see cref="T:System.IdentityModel.Tokens.SecurityToken" /> object.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a token.</param>
      <param name="cacheUntil">When this method returns, contains the expiration date and time of the token information in the cache.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TokenProvider.OnEndGetWebToken(System.IAsyncResult,System.DateTime@)">
      <summary>Executes upon calling the EndGetWebToken method.</summary>
      <returns>The <see cref="T:System.String" /> that represents the web token.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to get a web token.</param>
      <param name="cacheUntil">When this method returns, contains the expiration date and time of the token information in the cache.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.TransportClientCredentialType">
      <summary>Represents the type of client credential to be used for authentication on the  Service Bus transport.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TransportClientCredentialType.SharedSecret">
      <summary>Specifies that the shared secret credential is used to authenticate with the  Service Bus.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TransportClientCredentialType.SimpleWebToken">
      <summary>Specifies that the Simple Web Token credential is used to authenticate with the  Service Bus.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TransportClientCredentialType.Saml">
      <summary>Specifies that the Security Assertion Markup Language credential is used to authenticate with the  Service Bus.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TransportClientCredentialType.Unauthenticated">
      <summary>No client credential provided. This option avoids acquiring and sending a token altogether and is required for all clients that are not required to authenticate per their service binding's policy.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TransportClientCredentialType.TokenProvider">
      <summary>Specifies that the custom token provider credential is used to authenticate with the  Service Bus.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.TransportClientEndpointBehavior">
      <summary>Describes the WCF endpoint behavior that is used to specify the Service Bus credentials for a particular endpoint.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.TransportClientEndpointBehavior.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.TransportClientEndpointBehavior" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.TransportClientEndpointBehavior.#ctor(Microsoft.ServiceBus.TokenProvider)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.TransportClientEndpointBehavior" /> class.</summary>
      <param name="tokenProvider">The token provider used as a binding parameter.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.TransportClientEndpointBehavior.Credentials">
      <summary>Gets the credentials for the endpoint.</summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.Description.TransportClientCredentials" />.Contains the credentials.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.TransportClientEndpointBehavior.CredentialType">
      <summary>Gets or sets a value that specifies which of the credentials specified on the composite TransportClientCredentials instance referred to by the Credentials property is effective in this behavior.</summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.TransportClientCredentialType" />.Contains the client credential type.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.TransportClientEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>Passes the specified data at runtime to the specified binding to support Service Bus credential behavior.</summary>
      <param name="endpoint">The endpoint to modify.</param>
      <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TransportClientEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
      <summary>Implements a modification or extension of the client across an endpoint.</summary>
      <param name="endpoint">The endpoint that is to be customized.</param>
      <param name="clientRuntime">The client runtime to be customized.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TransportClientEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
      <summary>Implements a modification or extension of the service across an endpoint.</summary>
      <param name="endpoint">The endpoint that exposes the contract.</param>
      <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.TransportClientEndpointBehavior.System#ServiceModel#Description#IEndpointBehavior#Validate(System.ServiceModel.Description.ServiceEndpoint)">
      <summary>Confirms that the endpoint is a valid  Service Bus endpoint that can be modified by the behavior of this instance.</summary>
      <param name="endpoint">The endpoint to validate.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.TransportClientEndpointBehavior.TokenProvider">
      <summary>Gets or sets the token provider that is used as a binding parameter.</summary>
      <returns>The token provider used as a binding parameter.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.TransportProtectionPolicy">
      <summary>Indicates the transport protection requirements for messages flowing into and out of a message buffer.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TransportProtectionPolicy.None">
      <summary>Messages can be sent into and received without any transport protection measures: that is, both sender and receiver can voluntarily opt to secure their individual message path.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.TransportProtectionPolicy.AllPaths">
      <summary>Messages must be sent into and received from message buffer using a secure communication channel.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.WebHttpRelayBinding">
      <summary>A binding used to configure endpoints for Web services that are exposed through HTTP requests instead of SOAP messages. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.WebHttpRelayBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" /> class. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.WebHttpRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndWebHttpSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" /> class using the specified type of security and relay client authentication. </summary>
      <param name="securityMode">The type of security used with the binding.</param>
      <param name="relayClientAuthenticationType">The type of client authentication used on the relay. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.WebHttpRelayBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" /> class using the specified configuration name.</summary>
      <param name="configurationName">The configuration to use.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.AllowCookies">
      <summary>Gets or sets a value that specifies whether cookies are allowed in the messages sent via the <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" />.</summary>
      <returns>Returns true if cookies are allowed; otherwise, false. The default value is false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.WebHttpRelayBinding.CreateBindingElements">
      <summary>Creates a collection with the binding elements for the binding.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements used by the <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.EnvelopeVersion">
      <summary>Gets the SOAP envelope version. </summary>
      <returns>Returns a <see cref="T:System.ServiceModel.EnvelopeVersion" />. Since the <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" /> does not use SOAP, this always returns EnvelopeVersion.None.<see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" /> is not likely the binding you should be using for SOAP messaging. However,  Service Bus does support SOAP. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.MaxBufferPoolSize">
      <summary>Gets or sets the maximum buffer pool size used by the transport.</summary>
      <returns>Returns the maximum buffer pool size. The default is 524288 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.MaxBufferSize">
      <summary>Gets or sets the maximum buffer size supported by the transport. </summary>
      <returns>Returns the max buffer size.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum allowable message size that can be received.</summary>
      <returns>Returns the maximum allowable message size. The default size is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.ProxyAddress">
      <summary>Gets or sets a URI that contains the address of the proxy to use for HTTP requests.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that contains the address of the proxy to use for HTTP requests. The default value is null.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.ReaderQuotas">
      <summary>Gets or sets xml reader quotas on the messages processed.</summary>
      <returns>Returns a <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> that contains the reader quotas.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.Scheme">
      <summary>Gets the scheme for the endpoints used with the binding.</summary>
      <returns>Returns the scheme.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.Security">
      <summary>Gets the security settings for the current instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.WebHttpRelaySecurity" /> that contains the security settings.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>Gets a value that indicates whether incoming requests are handled synchronously or asynchronously.</summary>
      <returns>true if requests are handled synchronously; false if handled asynchronously. The default is false, to handle requests asynchronously.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.TransferMode">
      <summary>Gets or sets the transfer mode.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" /> that contains the transfer mode. The default is Buffered.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.UseDefaultWebProxy">
      <summary>Gets or sets a value that indicates whether the machine-wide proxy settings are used rather than the user specific settings.</summary>
      <returns>true if machine-wide proxy settings are used. Otherwise false. The default setting is true.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelayBinding.WriteEncoding">
      <summary>Gets or sets the character encoding that is used to write the message text.</summary>
      <returns>Returns a <see cref="T:System.Text.Encoding" /> that contains the encoding. The default value is utf8encoding.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.WebHttpRelaySecurity">
      <summary>Specifies the types of security available to a service endpoint configured to receive HTTP requests. </summary>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelaySecurity.Mode">
      <summary>Gets or sets the mode of security that is used by an endpoint configured to receive HTTP requests with a <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.EndToEndWebHttpSecurityMode" /> that indicates whether transport-level security, credential only, or no security is used by an endpoint. The default value is None.</returns>
      <exception cref="ArgumentOutOfRangeException">The value is not a valid EndToEndWebHttpSecurityMode.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelaySecurity.RelayClientAuthenticationType">
      <summary>Gets or sets the relay client authentication type used by the service client.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the relay client authentication type. The default value is RelayClientAuthenticationType.RelayAccessToken. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WebHttpRelaySecurity.Transport">
      <summary>Gets or sets the Transport-level security settings for a binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.HttpRelayTransportSecurity" /> that contains the binding. The default values set are a ClientCredentialType of None, a ProxyCredentialType of None, and Realm = "".</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.WS2007HttpRelayBinding">
      <summary>Represents an interoperable binding that derives from <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> and provides support for the updated versions of the Security, ReliableSession, and TransactionFlow binding elements. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.WS2007HttpRelayBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WS2007HttpRelayBinding" /> class with a specified type of security used by the binding. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.WS2007HttpRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WS2007HttpRelayBinding" /> class with a specified type of security and relay client authentication used by the binding. </summary>
      <param name="securityMode">The security mode that specifies the type of security that is used with the SOAP message and for the client.</param>
      <param name="relayClientAuthenticationType">The type of authentication used by the client. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.WS2007HttpRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WS2007HttpRelayBinding" /> class with a specified type of security used by the binding, the specified authentication for the client relay, and a value that indicates whether a reliable session is enabled. </summary>
      <param name="securityMode">Specifies the type of security that is used with the SOAP message and for the client.</param>
      <param name="relayClientAuthenticationType">The type of authentication used by the client. </param>
      <param name="reliableSessionEnabled">true if a reliable session is enabled; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.WS2007HttpRelayBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WS2007HttpRelayBinding" /> class with a binding specified by its configuration name.</summary>
      <param name="configName">The binding configuration name for the <see cref="T:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingElement" /></param>
    </member>
    <member name="M:Microsoft.ServiceBus.WS2007HttpRelayBinding.CreateMessageSecurity">
      <summary>Retrieves the security binding element from the current binding.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> that contains the current security binding element. </returns>
    </member>
    <member name="T:Microsoft.ServiceBus.WSHttpRelayBinding">
      <summary>Represents an interoperable binding that supports distributed transactions and secure, reliable sessions through the cloud. </summary>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBinding.AllowCookies">
      <summary>Gets or sets a value that indicates whether the client accepts cookies and propagates them on future requests. </summary>
      <returns>Returns <see cref="T:System.Boolean" />.true if the binding allows cookies; otherwise, false. The default is false. </returns>
    </member>
    <member name="M:Microsoft.ServiceBus.WSHttpRelayBinding.CreateMessageSecurity">
      <summary>Returns the security binding element from the current binding.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> that contains the current binding. </returns>
    </member>
    <member name="M:Microsoft.ServiceBus.WSHttpRelayBinding.GetTransport">
      <summary>Returns the transport binding element from the current binding. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />.Contains the transport binding element from the current binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBinding.Security">
      <summary>Gets the security settings used with this binding. </summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.WSHttpRelaySecurity" /> that contains the security used with this binding. The default value Mode property is Message.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.WSHttpRelayBindingBase">
      <summary>Provides the base class with members common to the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> and the <see cref="T:Microsoft.ServiceBus.WS2007FederationHttpRelayBinding" />.
</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.WSHttpRelayBindingBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBindingBase" /> class. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.WSHttpRelayBindingBase.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBindingBase" /> class with a value that indicates whether a reliable session is enabled. </summary>
      <param name="reliableSessionEnabled">true, if a reliable session is enabled; otherwise, false.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.WSHttpRelayBindingBase.CreateBindingElements">
      <summary>Returns an ordered collection of binding elements contained in the current  Service Bus binding. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />.Contains the objects for the binding.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.WSHttpRelayBindingBase.CreateMessageSecurity">
      <summary>When implemented in a derived class, returns the security binding element from the current  Service Bus binding. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" />.Contains the security binding element from the current  Service Bus binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.EnvelopeVersion">
      <summary>Gets the version of SOAP that is used for messages that are processed by this binding. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.EnvelopeVersion" />.The value of the envelope version that is used with this  Service Bus binding. The value is always SOAP 1.2.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.WSHttpRelayBindingBase.GetTransport">
      <summary>When implemented in a derived class, returns the transport binding element from the current  Service Bus binding. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />.Contains the transport binding element from the current  Service Bus binding. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.MaxBufferPoolSize">
      <summary>Gets or sets the maximum amount of memory allocated for the buffer manager that manages the buffers required by endpoints using this  Service Bus binding. </summary>
      <returns>Returns <see cref="T:System.Int64" />.The maximum size, in bytes, for the pool of buffers used by an endpoint configured with this binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a message that can be processed by the  Service Bus binding. </summary>
      <returns>Returns <see cref="T:System.Int64" />.The maximum size, in bytes, for a message that is processed by the  Service Bus binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.MessageEncoding">
      <summary>Gets or sets whether MTOM or Text/XML is used to encode SOAP messages. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.WSMessageEncoding" />.Indicates whether MTOM or Text/XML is used to encode SOAP messages. The default value is Text/XML.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.ProxyAddress">
      <summary>Gets or sets the URI address of the HTTP proxy. </summary>
      <returns>Returns <see cref="T:System.Uri" />.Serves as the address of the HTTP proxy. The default value is null.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.ReaderQuotas">
      <summary>Gets or sets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this Security Bus binding. </summary>
      <returns>Returns <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />.Specifies the complexity constraints.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.ReliableSession">
      <summary>Gets an object that provides convenient access to the properties of a reliable  Service Bus session binding element that are available when using one of the system-provided bindings. </summary>
      <returns>Returns <see cref="T:System.ServiceModel.OptionalReliableSession" />.Provides convenient access to the properties of a reliable  Service Bus session binding element that are available when using one of the system-provided bindings.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.Scheme">
      <summary>Gets the URI transport scheme for the channels and listeners that are configured with this binding. </summary>
      <returns>Returns <see cref="T:System.String" /> that represents the URI transport scheme.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously">
      <summary>Gets a value that indicates whether incoming requests can be handled more efficiently synchronously or asynchronously.</summary>
      <returns>true if requests can be handled more efficiently synchronously; otherwise false. The default is false, to handle requests asynchronously.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.TextEncoding">
      <summary>Gets or sets the character encoding that is used for the message text.</summary>
      <returns>The character encoding that is used for the message text.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelayBindingBase.UseDefaultWebProxy">
      <summary>Gets or sets a value that indicates whether the auto-configured HTTP proxy of the system should be used, if available.</summary>
      <returns>true if the auto-configured HTTP proxy of the system should be used, if available; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.WSHttpRelaySecurity">
      <summary>Represents the security settings for the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" />.
</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelaySecurity.Message">
      <summary>Gets the message-level security settings for this  Service Bus binding.</summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.NonDualMessageSecurityOverRelayHttp" />.Contains the security settings. The default value includes: EstablishSecurityContext with default set to true, ClientCredentialType is Windows, AlgorithmSuite is Basic256, and NegotiateServiceCredential is true.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelaySecurity.Mode">
      <summary>Specifies the message security mode for this  Service Bus binding. </summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.EndToEndSecurityMode" />.Contains the security mode for this  Service Bus binding. The default is Transport.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelaySecurity.RelayClientAuthenticationType">
      <summary>Gets or sets the authentication type required for the service application or client application to provide to the  Service Bus.</summary>
      <returns>The authentication type required for the service application or client application to provide to the  Service Bus. The default is <see cref="F:Microsoft.ServiceBus.RelayClientAuthenticationType.RelayAccessToken" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.WSHttpRelaySecurity.Transport">
      <summary>Gets an object that contains the transport-level security settings for this  Service Bus binding. </summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.HttpRelayTransportSecurity" />.Contains the transport security for this item. The default value includes a ClientCredentialType of None and a ProxyCredentialType of None.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement">
      <summary>An abstract class that supplements the base <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> with additional properties that are common to connection-oriented transports such as TCP and named pipes. 
</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Indicates whether a channel factory of the specified type can be built. </summary>
      <returns>true if a channel factory can be built; otherwise false.</returns>
      <param name="context">The binding context for the channel.</param>
      <typeparam name="TChannel">The type of channel to check.</typeparam>
      <exception cref="ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Returns a value that indicates whether the binding element can build a listener for a specific type of channel. </summary>
      <returns>true if the IChannelListener&lt;TChannel&gt; of type IChannel can be built by the binding element; otherwise, false.</returns>
      <param name="context">The binding context that provides context for the binding element.</param>
      <typeparam name="TChannel">The type of channel to check.</typeparam>
      <exception cref="ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.ChannelInitializationTimeout">
      <summary>Gets or sets the timespan that specifies how long the channel initialization has to complete before timing out.</summary>
      <returns>Returns a <see cref="T:System.TimeSpan" /> after which the initialization times out.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.ConnectionBufferSize">
      <summary>Gets and sets the size of the buffer used to transmit a chunk of the serialized message on the wire from the client or service. </summary>
      <returns>The size of the connection buffer. The default value is 8192 bytes.</returns>
      <exception cref="ArguementOutOfRangeException">The value is less than zero.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Retrieves properties from the binding stack, if present.</summary>
      <returns>An object from the binding stack, if present, or null if not found.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="T">The type of property.</typeparam>
    </member>
    <member name="P:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.HostNameComparisonMode">
      <summary>Gets or sets a value that indicates whether the hostname is used to reach the service when matching on the URI.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.HostNameComparisonMode" /> that determines whether the hostname is used to reach the service. The default value is StrongWildCard, which ignores the hostname and port number in the comparison.</returns>
      <exception cref="ArguementOutOfRangeException">The value is not a valid HostnameComparisonMode. </exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum size of the buffer to use.</summary>
      <returns>The maximum number of bytes that are used to buffer incoming messages in memory. The default value is 65,536 bytes.</returns>
      <exception cref="ArguementOutOfRangeException">The value is less than or equal to zero.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.MaxOutputDelay">
      <summary>Gets or sets the maximum interval of time that a chunk of a message or a full message can remain buffered in memory before being sent out.</summary>
      <returns>Returns a <see cref="T:System.TimeSpan" /> that specifies the maximum interval of time that a chunk of a message or a full message can remain buffered in memory before being sent out. The default value is 2 seconds. This property is only meaningful if the AllowedOutputBatching property of an outgoing message is set to true. Otherwise, this value is ignored and messages are sent immediately.</returns>
      <exception cref="ArguementOutOfRangeException">The value is less than zero.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.MaxPendingAccepts">
      <summary>Gets or sets the maximum number of pending asynchronous accept operations that are available for processing incoming connections to the service.</summary>
      <returns>The maximum number of connections the service can accept simultaneously. The default value is 1.</returns>
      <exception cref="ArguementOutOfRangeException">The value is less than or equal to zero.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.MaxPendingConnections">
      <summary>Gets or sets the maximum number of connections awaiting dispatch on the service.</summary>
      <returns>The maximum number of inbound connections awaiting dispatch on the service. The default value is 10.</returns>
      <exception cref="ArguementOutOfRangeException">The value is less than or equal to zero.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Channels.ConnectionOrientedTransportBindingElement.TransferMode">
      <summary>Gets or sets a value that specifies whether the messages are buffered or streamed with the connection-oriented transport.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" /> which indicates whether a channel uses streamed or buffered modes of message transfer. The default is Buffered.</returns>
      <exception cref="ArguementOutOfRangeException">The value is not a valid TransferMode.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingCollectionElement">
      <summary>Represents a configuration section that holds a collection of <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement" /> instances.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingCollectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingCollectionElement" /> class.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement">
      <summary>Represents a configuration element that specifies a binding used to communicate with WS-I Basic Profile 1.1-conformant Web Services like ASMX-based services or to accept messages from ASMX-based clients through the  Service Bus.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement" /> class using the specified name.</summary>
      <param name="name">The name of the binding element.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.AllowCookies">
      <summary>Gets or sets a Boolean value that indicates whether the client accepts cookies and propagates them on future requests.</summary>
      <returns>true if the client accepts cookies and propagates them on future requests; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.BindingElementType">
      <summary>Gets the type of this binding element.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the binding element type.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>Initializes this binding configuration element with the content of the specified binding collection.</summary>
      <param name="binding">A collection of binding elements.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.MaxBufferPoolSize">
      <summary>Gets or sets the maximum size for a buffer pool that stores messages processed by the binding.</summary>
      <returns>Returns an <see cref="T:System.Int64" /> that contains the buffer pool size. The default value is 512*1024 bytes. The minimum value is 0.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum size of a buffer that stores messages while they are processed for an endpoint configured with this binding.</summary>
      <returns>Returns the maximum buffer size. The default value is 65,536 bytes. The minimum value is 1 byte.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum message size, in bytes, including headers, for a message that can be received on a channel configured with this binding.</summary>
      <returns>The maximum received message size. The default value is 65,536 bytes. The minimum value is 1 byte.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.MessageEncoding">
      <summary>Gets or sets the messaging encoding that indicates whether MTOM or text/XML is used to encode the SOAP message.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.WSMessageEncoding" /> that contains either Text/XML or MTOM. The default value is Text.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the settings of this configuration element to the specified binding.</summary>
      <param name="binding">The binding to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.Properties">
      <summary>Gets a collection of objects that can be attributes or configuration element objects of this binding configuration element.</summary>
      <returns>Returns a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties of the current instance.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.ProxyAddress">
      <summary>Gets or sets the URI that describes the address of the HTTP proxy.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that contains the URI. The default is null.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.ReaderQuotas">
      <summary>Gets or sets an XML value that places constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement" /> that contains the reader quotas.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.Security">
      <summary>Gets the type of security to be used for the binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelaySecurityElement" /> that specifies the type of security to be used with the binding. The default value is None.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.TextEncoding">
      <summary>Gets or sets the character set encoding to be used for emitting messages on the binding.</summary>
      <returns>Returns a <see cref="T:System.Text.Encoding" /> that contains the text encoding. The default value is UTF8.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.TransferMode">
      <summary>Gets or sets whether messages are buffered or streamed on a request or response.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" /> that contains the transfer mode. The default value is TransferMode.Buffered.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayBindingElement.UseDefaultWebProxy">
      <summary>Gets or sets a value that indicates whether the auto-configured HTTP proxy of the system should be used, if available.</summary>
      <returns>true to use the http proxy; otherwise, false. The default value is true.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayMessageSecurityElement">
      <summary>A configuration element that configures SOAP message security.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.BasicHttpRelayMessageSecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayMessageSecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayMessageSecurityElement.AlgorithmSuite">
      <summary>Gets or sets the security algorithm to use with the <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayMessageSecurityElement" /> class.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> that contains the security algorithm. The default is Basic256.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelayMessageSecurityElement.ClientCredentialType">
      <summary>Gets or sets the type of client credential used for client authentication.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.BasicHttpMessageCredentialType" /> that contains the credentials. The default is UserName.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.BasicHttpRelaySecurityElement">
      <summary>Represents a configuration element that configures the security for a basic HTTP relay binding.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.BasicHttpRelaySecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelaySecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelaySecurityElement.Message">
      <summary>Gets a Configuration element that specifies the message-level security settings for a <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.BasicHttpRelayMessageSecurityElement" /> that contains the security settings.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelaySecurityElement.Mode">
      <summary>Gets or sets the security mode for a <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" />.</summary>
      <returns>Returns a value from the <see cref="T:Microsoft.ServiceBus.EndToEndBasicHttpSecurityMode" /> enumeration. The default value is none.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelaySecurityElement.RelayClientAuthenticationType">
      <summary>Gets or sets the authentication type specified in this configuration element.</summary>
      <returns>Returns a value from <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the type of authentication to be used by binding elements the current instance is applied to.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.BasicHttpRelaySecurityElement.Transport">
      <summary>Gets a configuration element that specifies the transport-level security settings for a <see cref="T:Microsoft.ServiceBus.BasicHttpRelayBinding" /> binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.HttpRelayTransportSecurityElement" /> that contains properties that control authentication parameters for the HTTP transport.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement">
      <summary>Represents the configuration element that provides additional configuration settings to connection-oriented transport binding elements, such as TCP and named pipes.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>Applies the settings of this configuration element to the specified <see cref="T:System.ServiceModel.Channels.BindingElement" />.</summary>
      <param name="bindingElement">The binding element to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.ChannelInitializationTimeout">
      <summary>Gets or sets the maximum time the channel can be in the initialization status before being disconnected.</summary>
      <returns>The maximum time the channel can be in the initialization status before being disconnected.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.ConnectionBufferSize">
      <summary>Gets or sets the size of the buffer used to transmit a part of the serialized message on the wire from the client or service.</summary>
      <returns>Returns a <see cref="T:System.Int32" /> that contains the size of the buffer used to transmit a part of the serialized message on the wire from the client or service. The default value is 8K.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the content of the specified configuration element to this configuration element.</summary>
      <param name="from">The configuration element to be copied.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.HostNameComparisonMode">
      <summary>Gets or sets a value that indicates whether the hostname is used to reach the service when matching on the URI.</summary>
      <returns>A valid HostnameComparisonMode value that indicates whether the hostname is included when routing incoming requests to an endpoint URI. The default value is StrongWildcard, which ignores the hostname in the match.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.MaxBufferSize">
      <summary>Gets or sets the maximum size of the buffer to use.</summary>
      <returns>The maximum number of bytes that are used to buffer incoming messages in memory. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.MaxOutputDelay">
      <summary>Gets or sets the maximum interval of time that a part of a message or a full message can remain buffered in memory before being sent out.</summary>
      <returns>The maximum interval of time that a part of a message or a full message can remain buffered in memory before being sent out. The default value is 2 seconds.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.MaxPendingAccepts">
      <summary>Gets or sets the maximum number of pending asynchronous accept threads that are available for processing incoming connections on the service.</summary>
      <returns>The maximum number of pending messages the service can accept. The default value is 1.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.MaxPendingConnections">
      <summary>Gets or sets the maximum number of pending connections.</summary>
      <returns>The maximum number of pending connections.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.Properties">
      <summary>Gets a ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.</summary>
      <returns>Returns a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionOrientedTransportElement.TransferMode">
      <summary>Gets or sets a value that specifies whether the messages are buffered or streamed with the connection-oriented transport.</summary>
      <returns>Returns a valid <see cref="T:System.ServiceModel.TransferMode" /> value that specifies whether a channel uses streamed or buffered modes of message transfer. The default is Buffered.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.ConnectionStatusElement">
      <summary>Reads a configuration element that describes the connection status.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.ConnectionStatusElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.ConnectionStatusElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ConnectionStatusElement.BehaviorType">
      <summary>Gets the type of behavior.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the behavior type.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.ConnectionStatusElement.CreateBehavior">
      <summary>Creates a behavior extension based on the current configuration settings.</summary>
      <returns>Returns an <see cref="T:System.Object" /> that contains the behavior extension.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement">
      <summary>Represents a configuration element that specifies an HTTP transport for transmitting SOAP messages.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.AllowCookies">
      <summary>Gets or sets a value from the configuration file that indicates whether the client accepts cookies and propagates them on future requests.</summary>
      <returns>true if cookies are allowed; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>Applies the settings of this configuration element to the specified binding element.</summary>
      <param name="bindingElement">The binding element to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.BindingElementType">
      <summary>Gets the type of binding. (Overrides BindingElementExtensionElement.BindingElementType.)</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the binding type.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the properties of the specified extension element to this configuration element.</summary>
      <param name="from">The extension element whose properties to copy.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.CreateDefaultBindingElement">
      <summary>Creates a binding element from the settings in this configuration element.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> that contains the default binding element.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.InitializeFrom(System.ServiceModel.Channels.BindingElement)">
      <summary>Initializes this binding configuration element with the content of the specified binding element.</summary>
      <param name="bindingElement">The binding element to initialize from.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.KeepAliveEnabled">
      <summary>Gets or sets a Boolean value from the configuration file that indicates whether to make a persistent connection to the internet resource.</summary>
      <returns>true if a persistent connection to the internet resource is maintained; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.MaxBufferSize">
      <summary>Gets or sets the maximum size of the buffer pool from the configuration file.</summary>
      <returns>Returns the maximum buffer size. The default value is 65,536.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.Properties">
      <summary>Gets a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element. (Overrides TransportElement.Properties.)</summary>
      <returns>Returns a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains the properties of the current instance.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.ProxyAddress">
      <summary>Gets or sets a URI in the configuration file that contains the address of the proxy to use for HTTP requests.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that contains the URI. The default is null.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.ProxyAuthenticationScheme">
      <summary>Gets or sets the authentication scheme used to authenticate client requests that are processed by the HTTP proxy.</summary>
      <returns>The authentication scheme used to authenticate client requests that are processed by the HTTP proxy.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.RelayClientAuthenticationType">
      <summary>Gets or sets the relay client authentication type stored in the configuration file.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.TransferMode">
      <summary>Gets or sets a value from the configuration file that specifies whether messages are buffered or streamed on a request or response.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" /> that specifies whether messages are buffered or streamed on a request or response. By default, the HTTP, TCP/IP, and named pipe transports use buffered message transfers.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportElement.UseDefaultWebProxy">
      <summary>Gets or sets a value from the configuration file that indicates whether the machine-wide proxy settings are used rather than the user-specific settings.</summary>
      <returns>true if the System.Net default proxy settings are used; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.HttpRelayTransportSecurityElement">
      <summary>Represents a configuration element that controls authentication parameters for the HTTP transport. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.HttpRelayTransportSecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.HttpRelayTransportSecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpRelayTransportSecurityElement.ProxyCredentialType">
      <summary>Gets or sets from the configuration file the type of client credential to be used for authentication against the proxy.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.HttpProxyCredentialType" /> that contains the proxy type.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.HttpsRelayTransportElement">
      <summary>Represents the configuration element that specifies an HTTPS transport for transmitting SOAP messages through the  Service Bus.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.HttpsRelayTransportElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.HttpsRelayTransportElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.HttpsRelayTransportElement.BindingElementType">
      <summary>Gets the type of the binding element.</summary>
      <returns>The type of the binding element.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.HttpsRelayTransportElement.CreateDefaultBindingElement">
      <summary>Creates a binding element from settings in this configuration element.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> whose properties are copied from the settings in this configuration element.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.IssuerElement">
      <summary>A configuration element that describes an issuer of a token for the  Service Bus.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.IssuerElement.Address">
      <summary>Gets or sets the URI address of the token issuer.</summary>
      <returns>The URI address of the token issuer.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.IssuerElement.CopyFrom(System.Configuration.ConfigurationElement)">
      <summary>Copies the contents of the specified configuration element to this configuration element.</summary>
      <param name="from">The configuration element to copy the contents from.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.IssuerElement.Properties">
      <summary>Gets the collection of properties contained in this configuration element.</summary>
      <returns>The collection of properties contained in this configuration element.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayConnectionElement">
      <summary>A configuration element that describes message security options over a relayed connection through the  Service Bus.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayConnectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayConnectionElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayConnectionElement.AlgorithmSuite">
      <summary>Gets or sets from the configuration file the message encryption and key-wrap algorithms used to secure messages.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> that contains the message encryption and key-wrap algorithms. The default is Basic256, which specifies 256-bit Advanced Encryption Standard (AES) as the symmetric encryption algorithm.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayConnectionElement.ClientCredentialType">
      <summary>Gets or sets from the configuration file the type of credential to be used when performing client authentication using message-based security or TransportWithMessageCredential.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.MessageCredentialType" /> that contains the type of credential. The default is Windows.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayHttpElement">
      <summary>A configuration element that describes the message security over the  Service Bus relay, using an HTTP transport mechanism.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayHttpElement.AlgorithmSuite">
      <summary>Gets or sets from the configuration file the message encryption and key-wrap algorithms used to secure an HTTP message.</summary>
      <returns>The message encryption and key-wrap algorithms used to secure an HTTP message.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayHttpElement.ClientCredentialType">
      <summary>Gets or sets from the configuration file the type of credential to be used when performing client authentication using message-based security or TransportWithMessageCredential.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.MessageCredentialType" /> that contains the message credential type.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayHttpElement.NegotiateServiceCredential">
      <summary>Gets or sets from the configuration file a Boolean value that specifies whether the service credential is provisioned at the client out-of-band, or is obtained from the service to the client through a process of negotiation.</summary>
      <returns>true if the service credential is provisioned at the client out-of-band, or is obtained from the service to the client through a process of negotiation; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayOnewayElement">
      <summary>A configuration element that describes the message security for a one-way message to the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayOnewayElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayOnewayElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayOnewayElement.AlgorithmSuite">
      <summary>Gets or sets from the configuration file the message encryption and key-wrap algorithms used to secure a one-way message.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Security.SecurityAlgorithmSuite" /> that contains the algorithm suite. The default is Base256.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayOnewayElement.ClientCredentialType">
      <summary>Gets or sets from the configuration file the type of credential to be used when performing client authentication using message-based security or TransportWithMessageCredential.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.MessageCredentialType" /> that contains the message credential type. The default is Windows.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NetEventRelayBindingCollectionElement">
      <summary>Represents a configuration element that holds a collection of <see cref="T:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement" /> instances.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetEventRelayBindingCollectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetEventRelayBindingCollectionElement" /> class.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement">
      <summary>A configuration element that describes configuration settings for the <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" />.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement" /> class, using the specified name.</summary>
      <param name="name">The binding name set in the configuration.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.BindingElementType">
      <summary>Gets the type of binding that this configuration element represents.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the binding type, which is the type of <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" />.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>Initializes the contents of this XML configuration element from the property values of a specified binding.</summary>
      <param name="binding">The binding to copy the settings from.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.ListenBacklog">
      <summary>Gets or sets the maximum number of queued connection requests that can be pending.</summary>
      <returns>Returns the maximum number of queued connection requests that can be pending. The default is 10.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.MaxBufferPoolSize">
      <summary>Gets or sets the maximum size allowed for a buffer pool that stores messages processed by the binding.</summary>
      <returns>Returns the maximum size allowed for a buffer pool that stores messages processed by the binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum size, in bytes, of the buffer used to store messages in memory.</summary>
      <returns>Returns the maximum size, in bytes, of the buffer used to store messages in memory. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.MaxConnections">
      <summary>Gets or sets the maximum number of connections to be pooled for subsequent reuse on the client and the maximum number of connections allowed to be pending dispatch on the server.</summary>
      <returns>On the client, returns the maximum number of connections to be pooled for subsequent reuse; on the server, returns the maximum number of connections allowed to be pending dispatch.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a received message that is processed by the binding.</summary>
      <returns>Returns the maximum size, in bytes, for a received message that is processed by the binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the settings of this configuration element to the specified binding.</summary>
      <param name="binding">The binding to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.Properties">
      <summary>Gets a collection that contains objects that can be attributes or configuration element objects of this binding configuration element.</summary>
      <returns>Returns a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.ReaderQuotas">
      <summary>Gets or sets an XML element that contains the constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement" /> that specifies the complexity constraints on SOAP messages.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetEventRelayBindingElement.Security">
      <summary>Gets a configuration element that contains the security options for an  Service Bus net event relay binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement" /> that describes the security options. The default is Transport.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingCollectionElement">
      <summary>Represents a configuration section that holds a collection of <see cref="T:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement" /> instances.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingCollectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingCollectionElement" /> class.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement">
      <summary>Represents a configuration element that specifies a binding for peer channel-specific TCP messaging over the Service Bus.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement" /> class using the specified name.</summary>
      <param name="name">A name that uniquely identifies this configuration element.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.BindingElementType">
      <summary>Gets or sets an XML value that contains the type of binding element of the current instance.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the type of the current instance.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>Initializes the current instance using the content of the specified binding.</summary>
      <param name="binding">The binding.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.ListenBacklog">
      <summary>Gets or sets an XML value that contains the maximum number of queued connection requests that can be pending.</summary>
      <returns>Returns the maximum number of queued connection requests that can be pending. The default is 10.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.MaxBufferPoolSize">
      <summary>Gets or sets an XML value that contains the maximum size allowed for a buffer pool that stores messages processed by the binding.</summary>
      <returns>Returns the maximum size allowed for a buffer pool that stores messages processed by the binding. The default value is 65,536.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.MaxBufferSize">
      <summary>Gets or sets an XML value that contains the maximum size, in bytes, of the buffer used to store messages in memory.</summary>
      <returns>Returns the maximum size, in bytes, of the buffer used to store messages in memory. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.MaxConnections">
      <summary>Gets or sets an XML value that specifies the maximum number of outbound and inbound connections the service creates and accepts respectively.</summary>
      <returns>On the client, returns the maximum number of connections to be pooled for subsequent reuse; on the server, returns the maximum number of connections allowed to be pending dispatch.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.MaxReceivedMessageSize">
      <summary>Gets or sets an XML value that contains the maximum size of a message that can be received on a channel configured with this binding.</summary>
      <returns>Returns maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the settings of this configuration element to the specified binding.</summary>
      <param name="binding">The binding to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.Properties">
      <summary>Gets a ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.</summary>
      <returns>Returns a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.ReaderQuotas">
      <summary>Gets or sets an XML value that places a constraint on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement" /> that specifies the complexity constraints on SOAP messages.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelayBindingElement.Security">
      <summary>Gets an XML value that contains security elements for a Service Bus one-way TCP relay binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement" /> that describes the security elements.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement">
      <summary>Defines the security settings for the <see cref="T:System.ServiceModel.NetTcpBinding" /> binding in an App.config file. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement.Message">
      <summary>Gets the security settings for the message.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayOnewayElement" /> that contains the message.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement.Mode">
      <summary>Gets or sets the type of security that is applied.</summary>
      <returns>Returns an <see cref="T:Microsoft.ServiceBus.EndToEndSecurityMode" /> instance that contains the security mode.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement.RelayClientAuthenticationType">
      <summary>Gets a value that describes whether clients of a service are required to present a security token issued by the  Service Bus service to the  Service Bus service when sending messages.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the relay client authentication type.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetOnewayRelaySecurityElement.Transport">
      <summary>Gets the security settings for the transport.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.OnewayRelayTransportSecurityElement" /> that contains the security settings.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement">
      <summary>Represents a configuration section that holds a collection of <see cref="T:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement" /> instances.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement" /> class.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement">
      <summary>A configuration element that describes a secure, reliable binding suitable for cross-machine communication through the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement" /> class with a specified configuration name.</summary>
      <param name="name">The binding configuration name.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.BindingElementType">
      <summary>Gets the type of this configuration element. (Overrides StandardBindingElement.BindingElementType.)</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the configuration element type.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.ConnectionMode">
      <summary>Gets or sets the connection mode stored in the App.config file for this configuration.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.TcpRelayConnectionMode" /> that contains the connection mode The default is Relayed.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>Initializes the contents of this binding configuration element from the property values of a specified binding.</summary>
      <param name="binding">The binding to initialize from.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.ListenBacklog">
      <summary>Gets or sets a value in the App.config file that specifies the maximum number of channels that can wait to be accepted on the listener.</summary>
      <returns>Returns the maximum number of queued connection requests that can be pending. The default is 10.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.MaxBufferPoolSize">
      <summary>Gets or sets a value from the App.config file that contains the maximum size for a buffer pool that stores TCP messages processed by the binding.</summary>
      <returns>Returns the maximum size allowed for a buffer pool that stores messages processed by the binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.MaxBufferSize">
      <summary>Gets or sets a value from the App.config file that specifies the maximum size, in bytes, of the buffer used to store messages in memory.</summary>
      <returns>The maximum size, in bytes, of the buffer used to store messages in memory.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.MaxConnections">
      <summary>Gets or sets a value from the App.config file that specifies the maximum number of outbound and inbound connections the service creates and accepts respectively.</summary>
      <returns>On the client, returns the maximum number of connections to be pooled for subsequent reuse; on the server, returns the maximum number of connections allowed to be pending dispatch.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.MaxReceivedMessageSize">
      <summary>Gets or sets a value from the App.config file that contains the maximum size of a message that can be received on a channel configured with this binding.</summary>
      <returns>Returns maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the settings of this configuration element to the specified binding element.</summary>
      <param name="binding">The binding to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.Properties">
      <summary>Gets a ConfigurationPropertyCollection instance that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element. (Overrides StandardBindingElement.Properties.)</summary>
      <returns>A collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects of this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.ReaderQuotas">
      <summary>Gets a value from the App.config file that puts constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement" /> that specifies the complexity constraints on SOAP messages exchanged. The default values for these constraints are provided in the following Remarks section.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.ReliableSession">
      <summary>Gets a configuration element that specifies whether reliable sessions are established between channel endpoints.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement" /> that indicates whether a WS-RM reliable session is established between channel endpoints. The default value is false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.Security">
      <summary>Gets a value from the App.config file that determines the type of security to be used with this binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement" /> that contains the security settings for the associated binding. The default value is none.The <see cref="T:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement" /> you retrieve from the associated binding is created indirectly with a NetTcpRelayBinding. As such, after the binding is created, you cannot replace this object with a new object unless you also create a new binding. However, many members of WebHttpRelaySecurity can be set through security property. For more information on binding security, see the Security and Protection section. Along with the type of transport and encoding, the Security settings represent one of the three main properties that define this binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.TransferMode">
      <summary>Gets or sets a value from the App.config file that specifies whether messages are buffered or streamed or a request or response.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" /> that contains indicates whether the service configured with the binding uses streamed or buffered (or both) modes of message transfer. The possible values are as follows: BufferedStreamedStreamedRequestStreamedResponseThe default value is Buffered.Specifying <see cref="P:Microsoft.ServiceBus.Configuration.NetTcpRelayBindingElement.TransferMode" /> to Streamed implies both StreamedRequest and StreamedResponse.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement">
      <summary>Represents a configuration element that configures the security for a net TCP service through the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement.Message">
      <summary>Gets a configuration element that represents the message security settings for the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.MessageSecurityOverRelayConnectionElement" /> that contains the message.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement.Mode">
      <summary>Gets or sets an XML value that describes whether message-level or transport-level security is used by an endpoint configured with <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.EndToEndSecurityMode" /> that contains the security mode. The default value is Transport.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement.RelayClientAuthenticationType">
      <summary>Gets or sets the authentication type required for the client to present to the  Service Bus when sending messages.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the authentication type.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NetTcpRelaySecurityElement.Transport">
      <summary>Gets the transport security setting for the <see cref="T:Microsoft.ServiceBus.NetTcpRelayBinding" />.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.TcpRelayTransportSecurityElement" /> that contains the relay binding.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.NonDualMessageSecurityOverRelayHttpElement">
      <summary>Represents the configuration settings for the security of a message sent using HTTP for non-duplex service contracts. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.NonDualMessageSecurityOverRelayHttpElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.NonDualMessageSecurityOverRelayHttpElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.NonDualMessageSecurityOverRelayHttpElement.EstablishSecurityContext">
      <summary>Gets or sets an XML value that defines whether a Security Context was established.</summary>
      <returns>true if the context is established; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.RelayConfigurationInstaller">
      <summary>Installs the Machine.config settings for the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayConfigurationInstaller.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.RelayConfigurationInstaller" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayConfigurationInstaller.AddRelayConfiguration(System.Configuration.Configuration)">
      <summary>Adds the entries of the current instance to the specified configuration.</summary>
      <param name="configuration">A configuration that the  Service Bus configuration will be added to.</param>
      <exception cref="ConfigurationErrorsException">A valid configuration file could not be loaded.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayConfigurationInstaller.Install(System.Collections.IDictionary)">
      <summary>Adds the entries to the Machine.config file to allow an application using that configuration to use ServiceBus elements in its config file.</summary>
      <param name="stateSaver">Saves the information needed to perform a commit, rollback, or uninstall operation. This parameter cannot be null.</param>
      <exception cref="ArgumentException">
        <paramref name="stateSaver" /> is null.</exception>
      <exception cref="ConfigurationErrorsException">A valid Machine.config file could not be loaded.</exception>
      <exception cref="Exception">An exception occurred in the BeforeInstall event handler of one of the installers in the collection.-or- An exception occurred in the AfterInstall event handler of one of the installers in the collection.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayConfigurationInstaller.RemoveRelayConfiguration(System.Configuration.Configuration)">
      <summary>Removes the entries from the specified configuration that allow an application using that configuration to use ServiceBus elements in its config file.</summary>
      <param name="configuration">The configuration that ServiceBus configuration will be removed from. This would most likely be a Machine.config or App.config file.</param>
      <exception cref="ConfigurationErrorsException">A valid configuration file could not be loaded.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayConfigurationInstaller.Uninstall(System.Collections.IDictionary)">
      <summary>Removes the entries from the machine.config that allow an application using that configuration to use ServiceBus elements in its config file.</summary>
      <param name="savedState">Saves the information needed to perform a commit, rollback, or uninstall operation.</param>
      <exception cref="ArgumentException">The saved-state IDictionary might have been corrupted.</exception>
      <exception cref="ConfigurationErrorsException">A valid Machine.config file could not be loaded.</exception>
      <exception cref="InstallException">An exception occurred while uninstalling. This exception is ignored and the uninstall continues. However, the application might not be fully uninstalled after the uninstallation completes.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement">
      <summary>Represents a configuration element that, when included in a custom binding, specifies a channel to transfer one-way messages through the  Service Bus. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>Applies the settings from this configuration element to the specified binding element.</summary>
      <param name="bindingElement">The binding element to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement.BindingElementType">
      <summary>Gets the type of the current instance.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the type of the current instance, which is the type of <see cref="T:Microsoft.ServiceBus.RelayedOnewayTransportBindingElement" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement.ConnectionMode">
      <summary>Gets or sets an XML value that describes the one-way connection mode.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayedOnewayConnectionMode" /> that contains the connection mode.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement.ConnectionPoolSettings">
      <summary>Gets or sets an XML value that describes the connection pool settings for the current instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement" /> that contains the connection pool settings used by the binding element that the current instance is applied to.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the settings from the specified configuration element to the current instance.</summary>
      <param name="from">The configuration element to copy from.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement.ListenBacklog">
      <summary>Gets or sets the maximum number of queued connection requests that can be pending.</summary>
      <returns>The maximum number of queued connection requests that can be pending.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportElement.RelayClientAuthenticationType">
      <summary>Gets or sets an XML value that describes the authentication type specified in this configuration element.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the type of authentication to be used by binding elements that the current instance is applied to.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportSecurityElement">
      <summary>A configuration element that controls transport security settings for the <see cref="T:Microsoft.ServiceBus.NetOnewayRelayBinding" /> and <see cref="T:Microsoft.ServiceBus.NetEventRelayBinding" /> types. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportSecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportSecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.RelayedOnewayTransportSecurityElement.ProtectionLevel">
      <summary>Gets or sets the transport security protection level that is applied to messages transmitted through bindings configured with this configuration element.</summary>
      <returns>Returns a <see cref="T:System.Net.Security.ProtectionLevel" /> that contains the transport security protection level specified in this configuration element.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement">
      <summary>Contains the settings for the AppFabric Service Bus registry.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement.BehaviorType">
      <summary>Gets the behavior type for the service registry settings.</summary>
      <returns>The behavior type for the service registry settings.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement.CreateBehavior">
      <summary>Creates a behavior extension based on the current registry settings.</summary>
      <returns>The behavior extension based on the current registry settings.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement.DiscoveryMode">
      <summary>Gets or sets how the service is discovered.</summary>
      <returns>The discovery type.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.ServiceRegistrySettingsElement.DisplayName">
      <summary>Gets or sets the display name for the endpoint.</summary>
      <returns>The display name.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.SharedSecretElement">
      <summary>A configuration element that specifies the credentials for a service or client endpoint that is configured to use the <see cref="F:Microsoft.ServiceBus.TransportClientCredentialType.SharedSecret" /> credential type.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.SharedSecretElement.CopyFrom(Microsoft.ServiceBus.Configuration.SharedSecretElement)">
      <summary>Copies the contents of the specified shared secret configuration element to this configuration element.</summary>
      <param name="source">The shared secret configuration element to be copied.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.SharedSecretElement.IssuerName">
      <summary>Gets or sets the issuer name.</summary>
      <returns>The issuer name.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.SharedSecretElement.IssuerSecret">
      <summary>Gets or sets the issuer secret key.</summary>
      <returns>The issuer secret key.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.SharedSecretElement.Properties">
      <summary>Gets the properties of this configuration element that contain the issuer name and the issuer secret key.</summary>
      <returns>The properties of this configuration element that contain the issuer name and the issuer secret key.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement">
      <summary>Represents a configuration element that specifies additional connection pool settings for a TCP transport. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement.GroupName">
      <summary>Gets or sets the name of the connection pool used for outgoing channels.</summary>
      <returns>Returns the name of the connection pool used for outgoing channels.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement.IdleTimeout">
      <summary>Gets or sets the maximum time that the connection can be idle before being disconnected.</summary>
      <returns>Returns a positive <see cref="T:System.TimeSpan" /> that specifies the maximum time that the connection can be idle before being disconnected. The default is 00:02:00.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement.LeaseTimeout">
      <summary>Gets or sets the time span after which an active connection is closed.</summary>
      <returns>Returns a <see cref="T:System.TimeSpan" /> that indicates the duration after which the TCP connection is closed.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement.MaxOutboundConnectionsPerEndpoint">
      <summary>Gets or sets the maximum number of connections to a remote endpoint initiated by the service.</summary>
      <returns>Returns the maximum number of connections to a remote endpoint initiated by the service. The default is 10.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement">
      <summary>Specifies a configuration element that causes a channel to transfer messages on the TCP transport when it is included in a custom binding. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>Applies the settings of this configuration element to the specified binding element.</summary>
      <param name="bindingElement">The binding element to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement.BindingElementType">
      <summary>Gets the type of this binding element.</summary>
      <returns>Returns a <see cref="T:System.Type" /> containing a binding element type.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement.ConnectionMode">
      <summary>Gets or sets the connection mode stored in the App.config file for this configuration.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.TcpRelayConnectionMode" /> that contains the connection mode. The default setting is Relayed.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement.ConnectionPoolSettings">
      <summary>Gets or sets an XML value that describes the connection pool settings for the current instance.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.SocketConnectionPoolSettingsElement" /> that contains the connection pool settings used by the binding element that the current instance is applied to.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the content of the specified configuration element to this configuration element.</summary>
      <param name="from">The configuration elements to be copied.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement.ListenBacklog">
      <summary>Gets or sets an XML value containing the maximum number of queued connection requests that can be pending.</summary>
      <returns>Returns the maximum number of queued connection requests that can be pending. The default is 10.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TcpRelayTransportElement.RelayClientAuthenticationType">
      <summary>Gets or sets an XML value that contains the relay client authentication type.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the relay client authentication type. The default is RelayClientAuthenticationType.RelayAccessToken.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.TcpRelayTransportSecurityElement">
      <summary>Represents a configuration element that configures the security for a TCP transport service through the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TcpRelayTransportSecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.TcpRelayTransportSecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TcpRelayTransportSecurityElement.ProtectionLevel">
      <summary>Gets or sets an XML value containing the transport security level for a TCP relay.</summary>
      <returns>Returns a <see cref="T:System.Net.Security.ProtectionLevel" /> that contains the transport security level. The default value is EncryptAndSign.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.TokenProviderElement">
      <summary>Represents the configuration element that specifies the token provider for the Service Bus.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TokenProviderElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the contents of the specified configuration element to this configuration element.</summary>
      <param name="from">The configuration element to copy the contents from.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TokenProviderElement.ListErrors(System.Collections.IList)">
      <summary>Adds the invalid-property errors in this configuration element object, and in all subelements, to the passed list.</summary>
      <param name="errorList">An object that implements the <see cref="T:System.Collections.IList" /> interface.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TokenProviderElement.Properties">
      <summary>Gets the collection of properties contained in the configuration element.</summary>
      <returns>The collection of properties contained in the configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TokenProviderElement.SharedSecret">
      <summary>Gets the shared secret element contained in the token provider element.</summary>
      <returns>The shared secret element contained in the token provider element.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.TransportClientCredentialsElement">
      <summary>A configuration element that contains the credentials of a service or client endpoint for a transport on the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TransportClientCredentialsElement.ApplyConfiguration(Microsoft.ServiceBus.Description.TransportClientCredentials)">
      <summary>Applies the settings of this configuration element to the specified <see cref="T:Microsoft.ServiceBus.Description.TransportClientCredentials" />.</summary>
      <param name="credentials">The transport credentials to update the settings of and that correspond to this configuration element.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TransportClientCredentialsElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the contents of the specified configuration element to this configuration element.</summary>
      <param name="from">The configuration element to copy the contents from.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TransportClientCredentialsElement.CreateClientCredentials">
      <summary>Returns a new <see cref="T:Microsoft.ServiceBus.Description.TransportClientCredentials" /> object with the same settings as this configuration element.</summary>
      <returns>A new transport credentials object for a service or client endpoint with the same settings as this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TransportClientCredentialsElement.Properties">
      <summary>Gets the collection of properties contained in this configuration element.</summary>
      <returns>The collection of properties contained in this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TransportClientCredentialsElement.SharedSecret">
      <summary>Gets the shared secret element contained in this credential element.</summary>
      <returns>The shared secret element contained in this credential element.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement">
      <summary>A configuration element that specifies the behavior of a service or client endpoint for a transport on the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement.BehaviorType">
      <summary>Gets or sets the behavior type for the transport client endpoint.</summary>
      <returns>The behavior type for the transport client endpoint.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement.ClientCredentials">
      <summary>Gets or sets the credentials of a service or client endpoint for a transport on the  Service Bus relay.</summary>
      <returns>The credentials of a service or client endpoint for a transport on the  Service Bus relay.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the contents of the specified configuration element to this configuration element.</summary>
      <param name="from">The configuration element to copy the contents from.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement.CreateBehavior">
      <summary>Returns a new <see cref="T:Microsoft.ServiceBus.TransportClientEndpointBehavior" /> object with the same settings as this configuration element.</summary>
      <returns>A new <see cref="T:Microsoft.ServiceBus.TransportClientEndpointBehavior" /> object with the same settings as this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement.CredentialType">
      <summary>Gets or sets a value that specifies which of the credentials specified on the composite TransportClientCredentials instance referred to by the ClientCredentials property is effective in this behavior.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.TransportClientCredentialType" /> object that contains the credential type of a service or client endpoint.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement.Properties">
      <summary>Gets the collection of properties contained in this configuration element.</summary>
      <returns>The collection of properties contained in this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement.TokenProvider">
      <summary>Gets or sets the token provider that is used as a binding parameter.</summary>
      <returns>The token provider used as a binding parameter.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingCollectionElement">
      <summary>Represents a configuration element that contains sub-elements that specify settings for using the <see cref="T:Microsoft.ServiceBus.WebHttpRelayBinding" /> binding.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingCollectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingCollectionElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingCollectionElement.GetDefault">
      <summary>Gets the default binding used.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.Channels.Binding" /> that represents the default binding.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement">
      <summary>A binding element used to configure endpoints for an  Service Bus relay service that responds to HTTP requests instead of SOAP messages. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement" /> class using the specified name.</summary>
      <param name="name">The name of the new binding element.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.AllowCookies">
      <summary>Gets or sets a value that indicates whether the client accepts cookies and propagates them on future requests.</summary>
      <returns>true if cookies are allowed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.BindingElementType">
      <summary>Gets the type of binding that this configuration element represents.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the binding type.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>Initializes the contents of this binding configuration element from the property values of a specified binding.</summary>
      <param name="binding">The binding to update this configuration element from.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.MaxBufferPoolSize">
      <summary>Gets or sets the maximum amount of memory allocated for the buffer manager that manages the buffers required by endpoints that use this binding.</summary>
      <returns>Returns the maximum size, in bytes, for the pool of buffers used by an endpoint configured with this binding. The default value is 65,536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.MaxBufferSize">
      <summary>Gets or sets the maximum amount of memory that is allocated for use by the manager of the message buffers that receive messages from the channel.</summary>
      <returns>Returns the maximum amount of memory, in bytes, available for use by the message buffer manager. The default value is 524,288 (0x80000) bytes.</returns>
      <exception cref="ArgumentOutOfRangeException">The value set is less than or equal to zero.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for a message that can be processed by the binding.</summary>
      <returns>Returns the maximum size, in bytes, for a message that is processed by the binding. The default value is 65,536 bytes.</returns>
      <exception cref="ArgumentOutOfRangeException">The value is less than zero.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the settings of this configuration element to the specified binding.</summary>
      <param name="binding">The binding to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.Properties">
      <summary>Gets a collection of objects that can be attributes or configuration element objects of this configuration element.</summary>
      <returns>Returns a <see cref="T:System.Configuration.ConfigurationPropertyCollection" /> that contains a collection of ConfigurationProperty objects that can be attributes or ConfigurationElement objects on this configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.ProxyAddress">
      <summary>Gets or sets the URI address of the HTTP proxy.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> that serves as the address of the HTTP proxy. The default value is null.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.ReaderQuotas">
      <summary>Gets or sets the configuration element that contains the constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding.</summary>
      <returns>Returns an <see cref="T:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement" /> that contains the complexity restraints.</returns>
      <exception cref="ArgumentNullException">The valueset is null.</exception>
      <exception cref="ArgumentOutOfRangeException">The quota values of XmlDictionaryReaderQuotas are read only.</exception>
      <exception cref="ArgumentException">The quotas set must be positive.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.Security">
      <summary>Gets the configuration element that contains the security settings used with this binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.WebHttpRelaySecurityElement" /> that contains the security settings for this binding. The default value is none.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.TransferMode">
      <summary>Gets or sets a value that indicates whether the service configured with the associated binding uses streamed or buffered (or both) modes of message transfer.</summary>
      <returns>Returns a <see cref="T:System.ServiceModel.TransferMode" /> that contains indicates whether the service configured with the binding uses streamed or buffered (or both) modes of message transfer. The default value is Buffered.</returns>
      <exception cref="InvalidEnumArgumentException">The value set is not a valid TransferMode value.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.UseDefaultWebProxy">
      <summary>Gets or sets a value that indicates whether the auto-configured HTTP proxy of the system should be used with the associated binding, if available.</summary>
      <returns>true if the auto-configured HTTP proxy of the system should be used, if available; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelayBindingElement.WriteEncoding">
      <summary>Gets or sets the character encoding that is used for the message text in the associated binding.</summary>
      <returns>Returns a <see cref="T:System.Text.Encoding" /> that indicates the character encoding that is used. The default is UTF8Encoding.</returns>
      <exception cref="ArgumentNullException">The value set is null.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WebHttpRelaySecurityElement">
      <summary>Represents a configuration element that configures the security for a Web HTTP service through the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WebHttpRelaySecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WebHttpRelaySecurityElement" /> class. </summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelaySecurityElement.Mode">
      <summary>Gets or sets the security mode used by the binding.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.EndToEndWebHttpSecurityMode" /> that contains the end-to-end HTTP security mode used by the service endpoint.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelaySecurityElement.RelayClientAuthenticationType">
      <summary>Gets or sets the relay client authentication type used by the service client.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the authentication type.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WebHttpRelaySecurityElement.Transport">
      <summary>Gets a configuration element that indicates the transport-level security settings for a service endpoint configured to receive HTTP requests.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.HttpRelayTransportSecurityElement" /> that contains the security settings.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingCollectionElement">
      <summary>Represents a configuration section that holds a collection of <see cref="T:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingElement" /> instances.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingCollectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingCollectionElement" /> class.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingElement">
      <summary>Represents a configuration element that contains the settings for a binding that provides support for the updated versions of the Security, ReliableSession, and TransactionFlow binding elements.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingElement" /> using the specified name.</summary>
      <param name="name">The name of the binding. This value should be unique because it is used as identification for the binding.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WS2007HttpRelayBindingElement.BindingElementType">
      <summary>Gets the type of the binding element of the current instance.</summary>
      <returns>Returns a <see cref="T:System.Type" /> that contains the binding element type.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement">
      <summary>Provides a base class for the <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingElement" /> configuration element that specifies a binding that supports distributed transactions and secure, reliable sessions.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement" /> class with the specified name.</summary>
      <param name="name">A name that uniquely identifies this configuration element.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>Initializes this binding configuration element with the content of the specified binding.</summary>
      <param name="binding">A binding.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.MaxBufferPoolSize">
      <summary>Gets or sets the maximum size of the buffer pool that stores messages processed by the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</summary>
      <returns>The maximum size of the buffer pool that stores messages processed by the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding. The default is 524288 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.MaxReceivedMessageSize">
      <summary>Gets or sets the maximum size for messages received on a channel configured with the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</summary>
      <returns>The maximum size for messages received on a channel configured with the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding. The default is 65536 bytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.MessageEncoding">
      <summary>Gets or sets whether MTOM or Text/XML is used to encode SOAP messages.</summary>
      <returns>Indicates whether MTOM or Text/XML is used to encode SOAP messages. The default is Text/XML.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the settings of this configuration element to the specified binding.</summary>
      <param name="binding">The binding to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.Properties">
      <summary>Gets a collection of properties of this binding configuration element.</summary>
      <returns>A collection of properties of this binding configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.ProxyAddress">
      <summary>Gets or sets the URI address of the HTTP proxy.</summary>
      <returns>The URI address of the HTTP proxy. The default is null.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.ReaderQuotas">
      <summary>Gets constraints on the complexity of SOAP messages that can be processed by endpoints configured with the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</summary>
      <returns>Constraints on the complexity of SOAP messages that can be processed by endpoints configured with the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.ReliableSession">
      <summary>Gets a <see cref="T:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement" /> configuration element that represents an optional configuration setting for WS-Reliable messaging defined in the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</summary>
      <returns>A <see cref="T:System.ServiceModel.Configuration.StandardBindingOptionalReliableSessionElement" /> configuration element that represents an optional configuration setting for WS-Reliable messaging defined in the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.TextEncoding">
      <summary>Gets or sets the character encoding that is used for the message text.</summary>
      <returns>The character encoding that is used for the message text.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingBaseElement.UseDefaultWebProxy">
      <summary>Gets or sets a value that indicates whether the auto-configured HTTP proxy of the system should be used, if available.</summary>
      <returns>true if the auto-configured HTTP proxy of the system should be used, if available; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingElement">
      <summary>A configuration element that represents an interoperable binding that supports distributed transactions and secure, reliable sessions.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingElement.AllowCookies">
      <summary>Gets or sets a value that indicates whether the service or client accepts cookies and propagates them on future requests.</summary>
      <returns>true if the service or client accepts cookies and propagates them on future requests; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingElement.BindingElementType">
      <summary>Gets the type of the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</summary>
      <returns>The type of the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingElement.InitializeFrom(System.ServiceModel.Channels.Binding)">
      <summary>Initializes this binding configuration element with the content of the specified binding.</summary>
      <param name="binding">The binding to initialize this configuration element from.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
      <summary>Applies the settings of this configuration element to the specified binding.</summary>
      <param name="binding">The binding to update the settings of.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingElement.Properties">
      <summary>Gets a collection of properties of this binding configuration element.</summary>
      <returns>A collection of properties of this binding configuration element.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayBindingElement.Security">
      <summary>Gets the <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement" /> configuration element that contains the security settings for the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement" /> configuration element that contains the security settings for the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" /> binding.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement">
      <summary>Represents a configuration element that configures the security for a WS-HTTP service through the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement.Message">
      <summary>Gets the security settings for the message.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.NonDualMessageSecurityOverRelayHttpElement" /> that specifies the security settings for the message.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement.Mode">
      <summary>Gets or sets the mode of security that is used by an endpoint configured to receive HTTP requests.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.EndToEndSecurityMode" /> that specifies the type of security that is applied. The default value is Message.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement.RelayClientAuthenticationType">
      <summary>Gets or sets the relay client authentication type used by the service client.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.RelayClientAuthenticationType" /> that contains the authentication type.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelaySecurityElement.Transport">
      <summary>Gets the security settings for the transport.</summary>
      <returns>Returns a <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelayTransportSecurityElement" /> that specifies the security settings for the transport.Use the <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelayTransportSecurityElement" /> object returned by this property to set the transport security parameters for the <see cref="T:Microsoft.ServiceBus.WSHttpRelayBinding" />. If the TransportCredentialOnly value is specified by <see cref="M:Microsoft.ServiceBus.WSHttpRelayBinding.#ctor(Microsoft.ServiceBus.EndToEndSecurityMode,Microsoft.ServiceBus.RelayClientAuthenticationType,System.Boolean)" />, then the settings provided by the Transport property become effective for the service endpoint. The value of this property can set only in the constructor it as an explicit parameter and its value cannot be set again after the binding instance is created.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.WSHttpRelayTransportSecurityElement">
      <summary>A configuration element that describes the security on an HTTP transport over the  Service Bus relay.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.WSHttpRelayTransportSecurityElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.WSHttpRelayTransportSecurityElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.WSHttpRelayTransportSecurityElement.ProxyCredentialType">
      <summary>Gets or sets the type of credential to be used by the service or client endpoint for authentication against the proxy.</summary>
      <returns>The type of client credential to be used by the service or client endpoint for authentication against the proxy.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement">
      <summary>A configuration element that defines the constraints on the complexity of SOAP messages that can be processed by endpoints configured with a binding. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement.MaxArrayLength">
      <summary>Gets or sets the maximum allowed array length.</summary>
      <returns>The maximum allowed array length.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement.MaxBytesPerRead">
      <summary>Gets or sets the maximum allowed number of bytes returned for each read.</summary>
      <returns>The maximum allowed number of bytes returned for each read.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement.MaxDepth">
      <summary>Gets or sets the maximum nested node depth for each read.</summary>
      <returns>The maximum nested node depth for each read.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement.MaxNameTableCharCount">
      <summary>Gets or sets the maximum number of characters allowed in a table name.</summary>
      <returns>The maximum number of characters allowed in a table name.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Configuration.XmlDictionaryReaderQuotasElement.MaxStringContentLength">
      <summary>Gets or sets the maximum number of characters allowed in XML element content.</summary>
      <returns>The maximum number of characters allowed in XML element content.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.HttpRelayTransportBindingElementImporter">
      <summary>Maps WSDL contracts and policy assertions into  Service Bus HttpRelayTransport bindings.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.HttpRelayTransportBindingElementImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Description.HttpRelayTransportBindingElementImporter" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.HttpRelayTransportBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>Imports a custom policy assertion about bindings.</summary>
      <param name="importer">A metadata importer that can be used to modify the import process.</param>
      <param name="context">The policy conversion context to insert your custom policy assertion.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.HttpRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>Called prior to importing the metadata documents associated with the HttpRelayTransport binding.</summary>
      <param name="wsdlDocuments">Describes the service</param>
      <param name="xmlSchemas">Describes the <paramref name="wsdlDocuments" />.</param>
      <param name="policy">Contains the policy elements.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.HttpRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>Imports WSDL contract information for  Service Bus HttpRelayTransport bindings.</summary>
      <param name="importer">The WSDL importer for importing and resolving WSDL metadata.</param>
      <param name="context">The context for the conversion from WSDL to the service description.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.HttpRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>Maps endpoints defined in WSDL into the service description.</summary>
      <param name="importer">The WSDL importer for importing and resolving WSDL metadata.</param>
      <param name="context">The context for the conversion.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.OnewayRelayTransportBindingElementImporter">
      <summary>Maps WSDL contracts and policy assertions into  Service Bus OnewayRelayTransport bindings.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.OnewayRelayTransportBindingElementImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Description.OnewayRelayTransportBindingElementImporter" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.OnewayRelayTransportBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>Imports a custom policy assertion about bindings.</summary>
      <param name="importer">A metadata importer that can be used to modify the import process.</param>
      <param name="context">The policy conversion context to insert your custom policy assertion.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.OnewayRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>Called prior to importing the metadata documents associated with the OnewayRelayTransport binding.</summary>
      <param name="wsdlDocuments">Describes the service</param>
      <param name="xmlSchemas">Describes the <paramref name="wsdlDocuments" />.</param>
      <param name="policy">Contains the policy elements.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.OnewayRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>Imports WSDL contract information for  Service Bus OnewayRelayTransport bindings.</summary>
      <param name="importer">The WSDL importer for importing and resolving WSDL metadata.</param>
      <param name="context">The context for the conversion from WSDL to the service description.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.OnewayRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>Maps endpoints defined in WSDL into the service description.</summary>
      <param name="importer">The WSDL importer for importing and resolving WSDL metadata.</param>
      <param name="context">The context for the conversion.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.SamlCredential">
      <summary>Represents the Security Assertion Markup Language (SAML) credential used for a service or a client.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Description.SamlCredential.SamlToken">
      <summary>Gets or sets the token string for a Security Assertion Markup Language (SAML) assertion.</summary>
      <returns>The token string for a Security Assertion Markup Language (SAML) assertion.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.SharedSecretCredential">
      <summary>Represents the shared secret credential used for a client endpoint.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.SharedSecretCredential.ComputeSimpleWebTokenString(System.String,System.Byte[])">
      <summary>Returns a string of URL encoded name/value pairs for a Simple Web Token assertion using the specified issuer name and issuer secret.</summary>
      <returns>A URL encoded name/value pairs for a Simple Web Token assertion.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.SharedSecretCredential.ComputeSimpleWebTokenString(System.String,System.String)">
      <summary>Returns a string of URL encoded name/value pairs for a Simple Web Token assertion using the specified issuer name and issuer secret.</summary>
      <returns>A URL encoded name/value pairs for a Simple Web Token assertion.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Description.SharedSecretCredential.IssuerName">
      <summary>Gets or sets the issuer name.</summary>
      <returns>The issuer name.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Description.SharedSecretCredential.IssuerSecret">
      <summary>Gets or sets the issuer secret.</summary>
      <returns>The issuer secret.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.SimpleWebTokenCredential">
      <summary>Represents the Simple Web Token credential used for a client endpoint.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Description.SimpleWebTokenCredential.SimpleWebToken">
      <summary>Gets or sets the token string for a Simple Web Token assertion.</summary>
      <returns>The token string for a Simple Web Token assertion.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.StandardRelayBindingImporter">
      <summary>Maps WSDL contracts and policy assertions into  Service Bus standard bindings.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.StandardRelayBindingImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Description.StandardRelayBindingImporter" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.StandardRelayBindingImporter.BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>Called prior to importing the metadata documents associated with the standard binding.</summary>
      <param name="wsdlDocuments">Describes the service.</param>
      <param name="xmlSchemas">Describes the <paramref name="wsdlDocuments" />.</param>
      <param name="policy">Contains the policy elements.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.StandardRelayBindingImporter.ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>Imports WSDL contract information for standard bindings.</summary>
      <param name="importer">The WSDL importer for importing and resolving WSDL metadata.</param>
      <param name="context">Provides the context for the conversion from WSDL to the service description.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.StandardRelayBindingImporter.ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>Maps endpoints defined in WSDL into the service description.</summary>
      <param name="importer">The WSDL importer for importing and resolving WSDL metadata.</param>
      <param name="endpointContext">The context for the conversion.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.TcpRelayTransportBindingElementImporter">
      <summary>Maps WSDL contracts and policy assertions into  Service Bus TcpRelayTransport bindings.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.TcpRelayTransportBindingElementImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Description.TcpRelayTransportBindingElementImporter" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.TcpRelayTransportBindingElementImporter.System#ServiceModel#Description#IPolicyImportExtension#ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>Imports a custom policy assertion about bindings.</summary>
      <param name="importer">A metadata importer that can be used to modify the import process.</param>
      <param name="context">The policy conversion context to insert your custom policy assertion.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.TcpRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#BeforeImport(System.Web.Services.Description.ServiceDescriptionCollection,System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlElement})">
      <summary>Called prior to importing the metadata documents associated with the TcpRelayTransport binding.</summary>
      <param name="wsdlDocuments">Describes the service.</param>
      <param name="xmlSchemas">Describes the <paramref name="wsdlDocuments" />.</param>
      <param name="policy">Contains the policy elements.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.TcpRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportContract(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>Imports WSDL contract information for  Service Bus TcpRelayTransport bindings.</summary>
      <param name="importer">The WSDL importer for importing and resolving WSDL metadata.</param>
      <param name="context">The context for the conversion from WSDL to the service description.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.TcpRelayTransportBindingElementImporter.System#ServiceModel#Description#IWsdlImportExtension#ImportEndpoint(System.ServiceModel.Description.WsdlImporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>Maps endpoints defined in WSDL into the service description.</summary>
      <param name="importer">The WSDL importer for importing and resolving WSDL metadata.</param>
      <param name="context">The context for the conversion.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.TransportClientCredentialBase">
      <summary>The base class for the <see cref="T:Microsoft.ServiceBus.Description.TransportClientCredentials" />. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.TransportClientCredentialBase.CreateSamlCredential(System.String)">
      <summary>Creates a SamlCredential for the <see cref="T:Microsoft.ServiceBus.Description.TransportClientCredentialBase" />.</summary>
      <returns>The created SamlCredential token.</returns>
      <param name="samlToken">The token to be created.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.TransportClientCredentialBase.CreateSharedSecretCredential(System.String,System.String)">
      <summary>Creates a shared secret credential for the <see cref="T:Microsoft.ServiceBus.Description.TransportClientCredentialBase" />.</summary>
      <returns>The created shared secret credential.</returns>
      <param name="issuerName">The issuer name.</param>
      <param name="issuerSecret">The issuer secret.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Description.TransportClientCredentialBase.CreateSimpleWebTokenCredential(System.String)">
      <summary>Creates a Simple web token credential for the <see cref="T:Microsoft.ServiceBus.Description.TransportClientCredentialBase" /></summary>
      <returns>The created simple web token.</returns>
      <param name="simpleWebToken">The simple web token.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Description.TransportClientCredentials">
      <summary>The credentials used by a listener (host) or client to authenticate with the  Service Bus relay. The  Service Bus supports well-known types of credential schemes: SAML, Shared Secret, and Simple Web Token.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Description.TransportClientCredentials.Saml">
      <summary>Gets the Security Assertion Markup Language credential object stored in this instance.</summary>
      <returns>The Security Assertion Markup Language credential object stored in this instance.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Description.TransportClientCredentials.SharedSecret">
      <summary>Gets the shared secret credential object stored in this instance.</summary>
      <returns>The shared secret credential object stored in this instance.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Description.TransportClientCredentials.SimpleWebToken">
      <summary>Gets the Simple Web Token object stored in this instance.</summary>
      <returns>The Simple Web Token object stored in this instance.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Description.TransportClientCredentials.TokenProvider">
      <summary>Gets the token provider used by the client or service for presenting credentials to the  Service Bus relay.</summary>
      <returns>The token provider used by the client or service for presenting credentials to the  Service Bus relay.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.BrokeredMessage">
      <summary>Represents the unit of communication between AppFabric ServiceBus clients.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.IO.Stream,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> class using the supplied stream as its body.</summary>
      <param name="messageBodyStream">The message body stream.</param>
      <param name="ownsStream">true to indicate that the stream will be closed when the message is closed; false to indicate that the stream will not be closed when the message is closed.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> class from a given object by using DataContractSerializer with a binary XmlDictionaryWriter.</summary>
      <param name="serializableObject">The serializable object.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> class from a given object using the provided XmlObjectSerializer.</summary>
      <param name="serializableObject">The serializable object.</param>
      <param name="serializer">The serializer object.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon">
      <summary>Abandons the lock on a peek-locked message.</summary>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in the disposed state or the receiver with which the message was received is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server or invoked on a message that has not been received in peek-lock mode.</exception>
      <exception cref="T:System.TimeoutException">Thrown when operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.ServiceModel.MessagingCommunicationException">Thrown when the queue or subscription that receives the message is no longer present in the message server.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">When service bus service is busy and is unable process the request.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">When messaging entity the message was received from has been deleted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">When the lock associated with this message was lost or the lock token was not found.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">When this message was received from a Session and the lock lock associated with the session was lost.</exception>
      <exception cref="T:System.UnauthorizedAccessException">When the security token provided by the TokenProvider does not contain the claims to perform this operation.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">When the number of concurrent connections to an entity exceed the maximum allowed value.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.BeginAbandon(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to abandon the lock on a peek-locked message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request to abandon the lock on a peek-locked message.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAbandon delegate when the operation is complete.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in the disposed state or the receiver with which the message was received is in the disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.BeginComplete(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to complete a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request to complete a message.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndComplete delegate when the operation is complete.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in the disposed state or the receiver with which the message was received is in the disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.BeginDeadLetter(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to move the message to the dead letter queue.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request to dead letter the message.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndDeadLetter delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.BeginDeadLetter(System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to move the message to the dead letter queue.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request to dead letter the message.</returns>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The description information for deadlettering the message.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndDeadLetter delegate when the operation is complete.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in disposed state or the receiver with which the message was received is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.BeginDefer(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to defer a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous request to defer a message.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndDefer(System.IAsyncResult) delegate when the operation is complete.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in disposed state or the receiver with which the message was received is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Complete">
      <summary>Completes the receive operation of a message and indicates that the message should be marked as processed and deleted or archived.</summary>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in disposed state or the receiver with which the message was received is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server or invoked on a message that has not been received in peek-lock mode.</exception>
      <exception cref="T:System.ServiceModel.MessagingCommunicationException">Thrown when the queue or subscription that receives the message is no longer present in the message server.</exception>
      <exception cref="T:System.TimeoutException">Thrown when the operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for queues and subscriptions respectively.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">Thrown if the lock on the session has expired. The session lock duration is the same as the message LockDuration and is an entity-wide setting. It can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for queues and subscriptions respectively.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">When service bus service is busy and is unable process the request.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">When messaging entity the message was received from has been deleted.</exception>
      <exception cref="T:System.UnauthorizedAccessException">When the security token provided by the TokenProvider does not contain the claims to perform this operation.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">When the number of concurrent connections to an entity exceed the maximum allowed value.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ContentType">
      <summary>Gets or sets the type of the content.</summary>
      <returns>The type of the content of the message body. This is a content type identifier utilized by the sender and receiver for application specific logic.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.CorrelationId">
      <summary>Gets or sets the identifier of the correlation.</summary>
      <returns>The identifier of the correlation.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter">
      <summary>Moves the message to the dead letter queue.</summary>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in disposed state or the receiver with which the message was received is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server or invoked on a message that has not been received in peek-lock mode.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeadLetter(System.String,System.String)">
      <summary>Moves the message to the dead letter queue.</summary>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The description information for deadlettering the message.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in disposed state or the receiver with which the message was received is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server or invoked on a message that has not been received in peek-lock mode.</exception>
      <exception cref="T:System.ServiceModel.CommunicationException">Thrown when the queue or subscription that receives the message is no longer present in the message server.</exception>
      <exception cref="T:System.TimeoutException">Thrown when operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for Queues and Subscriptions respectively.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">Thrown if the lock on the session has expired. Session lock duration is the same as message LockDuration and is an entity-wide setting. It can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for Queues and Subscriptions respectively.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Defer">
      <summary>Indicates that the receiver wants to defer the processing for this message.</summary>
      <exception cref="T:System.ObjectDisposedException">Thrown when the message is in the disposed state or the receiver with which the message was received is in the disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received from the message server or invoked on a message that has not been received in peek-lock mode.</exception>
      <exception cref="T:System.ServiceModel.MessagingCommunicationException">Thrown when the queue or subscription that receives the message is no longer present in the message server.</exception>
      <exception cref="T:System.TimeoutException">Thrown when the operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for queues and subscriptions respectively.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">Thrown if the lock on the session has expired. The session lock duration is the same as the message LockDuration and is an entity-wide setting. It can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for queues and subscriptions respectively.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">When service bus service is busy and is unable process the request.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">When messaging entity the message was received from has been deleted.</exception>
      <exception cref="T:System.UnauthorizedAccessException">When the security token provided by the TokenProvider does not contain the claims to perform this operation.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">When the number of concurrent connections to an entity exceed the maximum allowed value.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.DeliveryCount">
      <summary>Gets the number of deliveries.</summary>
      <returns>The number of deliveries.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the message has not been delivered by ServiceBus.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.EndAbandon(System.IAsyncResult)">
      <summary>Ends an asynchronous request to abandon the lock on a peek-locked message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the <see cref="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.Abandon" />.</param>
      <exception cref="T:System.ArgumentException">Thrown if an incorrect <paramref name="result" /> is provided. The <paramref name="result" /> object passed to EndAbandon must be the one returned from the matching BeginAbandon or passed to the callback provided to BeginAbandon.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if invoked with a null <paramref name="result" />.</exception>
      <exception cref="T:System.TimeoutException">Thrown when the operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.ServiceModel.MessagingCommunicationException">Thrown when the queue or subscription that receives the message is no longer present in the message server.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received in peek-lock mode.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">When service bus service is busy and is unable process the request.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">When messaging entity the message was received from has been deleted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">When the lock associated with this message was lost or the lock token was not found.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">When this message was received from a Session and the lock lock associated with the session was lost.</exception>
      <exception cref="T:System.UnauthorizedAccessException">When the security token provided by the TokenProvider does not contain the claims to perform this operation.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">When the number of concurrent connections to an entity exceed the maximum allowed value.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.EndComplete(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to complete a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the Complete.</param>
      <exception cref="T:System.ArgumentException">Thrown if an incorrect <paramref name="result" /> is provided. The <paramref name="result" /> object passed to EndComplete must be the one returned from the matching BeginComplete or passed to the callback provided to BeginComplete.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if invoked with a null <paramref name="result" />.</exception>
      <exception cref="T:System.ServiceModel.MessagingCommunicationException">Thrown when the queue or subscription that receives the message is no longer present in the message server.</exception>
      <exception cref="T:System.TimeoutException">Thrown when the operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for queues and subscriptions respectively.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">Thrown if the lock on the session has expired. The session lock duration is the same as the message LockDuration and is an entity-wide setting. It can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for queues and subscriptions respectively.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received in peek-lock mode.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">When service bus service is busy and is unable process the request.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">When messaging entity the message was received from has been deleted.</exception>
      <exception cref="T:System.UnauthorizedAccessException">When the security token provided by the TokenProvider does not contain the claims to perform this operation.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">When the number of concurrent connections to an entity exceed the maximum allowed value.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.EndDeadLetter(System.IAsyncResult)">
      <summary>Ends an asynchronous request to move the message to the dead letter queue.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous request to dead letter message.</param>
      <exception cref="T:System.ArgumentException">Thrown if an incorrect <paramref name="result" /> is provided. The <paramref name="result" /> object passed to EndDeadLetter must be the one returned from the matching BeginDeadLetter or passed to the callback provided to BeginDeadLetter.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if invoked with a null <paramref name="result" />.</exception>
      <exception cref="T:System.ServiceModel.MessagingCommunicationException">Thrown when the queue or subscription that receives the message is no longer present in the message server.</exception>
      <exception cref="T:System.TimeoutException">Thrown when the operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for Queues and Subscriptions respectively.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">Thrown if the lock on the session has expired. Session lock duration is the same as message LockDuration and is an entity-wide setting. It can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for Queues and Subscriptions respectively.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received in peek-lock mode.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">When messaging entity the message was received from has been deleted.</exception>
      <exception cref="T:System.UnauthorizedAccessException">When the security token provided by the TokenProvider does not contain the claims to perform this operation.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">When the number of concurrent connections to an entity exceed the maximum allowed value.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">When service bus service is busy and is unable process the request.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.EndDefer(System.IAsyncResult)">
      <summary>Ends an asynchronous request to defer a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the Defer method.</param>
      <exception cref="T:System.ArgumentException">Thrown if an incorrect <paramref name="result" /> is provided. The <paramref name="result" /> object passed to EndDefer must be the one returned from the matching BeginDefer or passed to the callback provided to BeginDefer.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if invoked with a null <paramref name="result" />.</exception>
      <exception cref="T:System.ServiceModel.MessagingCommunicationException">Thrown when the queue or subscription that receives the message is no longer present in the message server.</exception>
      <exception cref="T:System.TimeoutException">Thrown when the operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the lock on the message has expired. LockDuration is an entity-wide setting and can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for Queues and Subscriptions respectively.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">Thrown if the lock on the session has expired. Session lock duration is the same as message LockDuration and is an entity-wide setting. It can be initialized through <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> and <see cref="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration" /> for Queues and Subscriptions respectively.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when invoked on a message that has not been received in peek-lock mode.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException">When service bus service is busy and is unable process the request.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">When messaging entity the message was received from has been deleted.</exception>
      <exception cref="T:System.UnauthorizedAccessException">When the security token provided by the TokenProvider does not contain the claims to perform this operation.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">When the number of concurrent connections to an entity exceed the maximum allowed value.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.EnqueuedTimeUtc">
      <summary>Gets or sets the date and time of the sent time in UTC.</summary>
      <returns>The enqueue time in UTC. This value represents the actual time of enqueuing the message.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ExpiresAtUtc">
      <summary>Gets the date and time in UTC at which the message is set to expire.</summary>
      <returns>The message expiration time in UTC.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">If the message has not been delivered by ServerBus.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody``1">
      <summary>Deserializes the brokered message body into an object of the specified type by using the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> with a binary <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <returns>The deserialized object or graph.</returns>
      <typeparam name="T">The type to which the message body will be deserialized.</typeparam>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state or the message body stream is already disposed.</exception>
      <exception cref="T:System.InvalidOperationException">If the message contains a null body stream or the body stream contains no data or the message body has already been consumed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Deserializes the brokered message body into an object of the specified type by using the supplied <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</summary>
      <returns>The deserialized object or graph.</returns>
      <param name="serializer">The serializer object.</param>
      <typeparam name="T">The generic type parameter.</typeparam>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state or the message body has already been consumed.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when invoked with a null <paramref name="serializer" /> object.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the message contains a null body stream or the body stream contains no data or the message body has already been consumed.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.Label">
      <summary>Gets or sets the application specific label.</summary>
      <returns>The application specific label.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.LockedUntilUtc">
      <summary>Gets the date and time in UTC until which the message will be locked in the queue/subscription.</summary>
      <returns>The date and time until which the message will be locked in the queue/subscription.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the message was not received from the ServiceBus.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.LockToken">
      <summary>Gets the lock token assigned by Service Bus to this message.</summary>
      <returns>The lock token assigned by Service Bus to this message.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the message was not received from the ServiceBus.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.MessageId">
      <summary>Gets or sets the identifier of the message.</summary>
      <returns>The identifier of the message.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
      <exception cref="T:System.ArgumentException">Thrown if the message identifier is null or exceeds 128 characters in length.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.Properties">
      <summary>Gets the application specific message properties.</summary>
      <returns>The application specific message properties.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyTo">
      <summary>Gets or sets the address of the queue to reply to.</summary>
      <returns>The reply to queue address.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ReplyToSessionId">
      <summary>Gets or sets the session identifier to reply to.</summary>
      <returns>The session identifier to reply to.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.ScheduledEnqueueTimeUtc">
      <summary>Gets or sets the date and time in UTC at which the message will be enqueued. This property returns the time in UTC; when setting the property, the supplied DateTime value must also be in UTC.</summary>
      <returns>The scheduled enqueue time in UTC. This value is for delayed message sending. It is utilized to delay messages sending to a specific time in the future.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the passed in value is DateTime.MaxValue.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.SequenceNumber">
      <summary>Gets the unique number assigned to a message by the Service Bus.</summary>
      <returns>The unique number assigned to a message by the Service Bus.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the message was not received from the message server.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.SessionId">
      <summary>Gets or sets the identifier of the session.</summary>
      <returns>The identifier of the session.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.Size">
      <summary>Gets the size of the message in bytes.</summary>
      <returns>The message size in bytes.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the XmlSchemaProviderAttribute to the class.</summary>
      <returns>An XmlSchema that describes the XML representation of the object that is produced by the WriteXml method and consumed by the ReadXml method.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation. This method is reserved for internal use and should not be used directly or indirectly (e.g. using a serializer or a formatter).</summary>
      <param name="reader">The XmlReader stream from which the object is deserialized.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation. This method is reserved for internal use and should not be used directly or indirectly (e.g. using a serializer or a formatter).</summary>
      <param name="writer">The XmlWriter stream to which the object is serialized.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive">
      <summary>Gets or sets the message’s time to live value. This is the duration after which the message expires, starting from when the message is sent to the Service Bus. Messages older than their TimeToLive value will expire and no longer be retained in the message store. Subscribers will be unable to receive expired messages.</summary>
      <returns>The message’s time to live value.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the passed in value is less than or equal to TimeSpan.Zero.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.To">
      <summary>Gets or sets the send to address.</summary>
      <returns>The send to address.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the message is in disposed state.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessage.ToString">
      <summary>Returns a string that represents the current message.</summary>
      <returns>The string representation of the current message.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty">
      <summary>Represents the property bag for a <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.ContentType">
      <summary>Gets or sets the type of the content.</summary>
      <returns>The type of the content of the message body. This is a content type identifier utilized by the sender and receiver for application specific logic.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.CorrelationId">
      <summary>Gets or sets the identifier of the correlation.</summary>
      <returns>The correlation identifier.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.DeliveryCount">
      <summary>Gets the number of deliveries that have been made to deliver this message.</summary>
      <returns>The number of deliveries that have been made to deliver this message.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">If the message has not been delivered by ServiceBus.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.EnqueuedTimeUtc">
      <summary>Gets or sets the date and time of the sent time in UTC.</summary>
      <returns>The enqueue time in UTC. This value represents the actual time of enqueuing the message.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.ExpiresAtUtc">
      <summary>Gets the date and time in UTC at which the message is set to expire.</summary>
      <returns>The message expiration time in UTC.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.Label">
      <summary>Gets or sets the application specific label.</summary>
      <returns>The application specific label.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.LockedUntilUtc">
      <summary>Gets the date and time in UTC until which the message will be locked in the queue/subscription.</summary>
      <returns>The date and time until which the message will be locked in the queue/subscription.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">If the message was not received from the ServiceBus.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.LockToken">
      <summary>Gets the lock token assigned by Service Bus to the message.</summary>
      <returns>The lock token assigned by Service Bus to the message.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">If the message was not received from the ServiceBus.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.Message">
      <summary>Gets the brokered message.</summary>
      <returns>The brokered message object.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.MessageId">
      <summary>Gets or sets the identifier of the message.</summary>
      <returns>The message identifier.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
      <exception cref="T:System.ArgumentException">If message identifier is null or exceeds 128 characters in length.</exception>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.Name">
      <summary>The name used for applying the property bag to a <see cref="T:System.ServiceModel.Channels.Message" /> when sending a message.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.Properties">
      <summary>Gets the properties of the brokered message.</summary>
      <returns>The properties of the brokered message.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.ReplyTo">
      <summary>Gets or sets the address of the queue to reply to.</summary>
      <returns>The reply to queue address.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.ReplyToSessionId">
      <summary>Gets or sets the session identifier to reply to.</summary>
      <returns>The session identifier to reply to.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.ScheduledEnqueueTimeUtc">
      <summary>Gets or sets the date and time in UTC at which the message will be enqueued.</summary>
      <returns>The scheduled enqueue time in UTC. This value is for delayed message sending. It is utilized to delay messages sending to a specific time in the future.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the passed in value is DateTime.MaxValue.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.SequenceNumber">
      <summary>Gets the unique number assigned to a message by the Service Bus.</summary>
      <returns>The unique number assigned to a message by the Service Bus.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
      <exception cref="T:System.InvalidOperationException">If the message was not received from the message server.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.SessionId">
      <summary>Gets or sets the identifier of the session.</summary>
      <returns>The identifier of the session.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.System#ServiceModel#Channels#IMessageProperty#CreateCopy">
      <summary>Creates a copy of the current instance of brokered message.</summary>
      <returns>The copy of the current instance of brokered message.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.TimeToLive">
      <summary>Gets or sets the message’s time to live value. This is the duration after which the message expires, starting from when the message is sent to the Service Bus.Messages older than their TimeToLive value will expire and no longer be retained in the message store. Subscribers will be unable to receive expired messages.</summary>
      <returns>The message’s time to live value.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the passed in value is less than or equal to TimeSpan.Zero.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.BrokeredMessageProperty.To">
      <summary>Gets or sets the send to address.</summary>
      <returns>The address of the destination queue.</returns>
      <exception cref="T:System.ObjectDisposedException">If the message is in disposed state.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.CorrelationFilter">
      <summary>Represents the correlation filter expression.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.CorrelationFilter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.CorrelationFilter" /> class with the specified correlation identifier.</summary>
      <param name="correlationId">The identifier for the correlation.</param>
      <exception cref="T:System.ArgumentException">Thrown when the <paramref name="correlationId" /> is null or empty.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.CorrelationFilter.CorrelationId">
      <summary>Gets the identifier of the correlation.</summary>
      <returns>The identifier of the correlation.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.CorrelationFilter.Match(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Indicates whether a message matches against the current SQL expression.</summary>
      <returns>true if a message matches against the current SQL expression; otherwise, false.</returns>
      <param name="message">The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.CorrelationFilter.Preprocess">
      <summary>Gets the preprocessed filter expression.</summary>
      <returns>The preprocessed filter expression.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.CorrelationFilter.RequiresPreprocessing">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.ServiceBus.Messaging.CorrelationFilter" /> expression requires preprocessing.</summary>
      <returns>true if the <see cref="T:Microsoft.ServiceBus.Messaging.CorrelationFilter" /> expression requires preprocessing; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.CorrelationFilter.Validate">
      <summary>Validates the <see cref="T:Microsoft.ServiceBus.Messaging.CorrelationFilter" /> object.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.EntityDescription">
      <summary>Represents the description of an entity.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.EntityDescription.ExtensionData">
      <summary>Gets or sets the structure that contains extra data.</summary>
      <returns>An <see cref="T:System.Runtime.Serialization.ExtensionDataObject" /> that contains data that is not recognized as belonging to the data contract.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.EntityDescription.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the entity description is read-only.</summary>
      <returns>true if the entity description is read-only; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.EntityDescription.ThrowIfReadOnly">
      <summary>Throws an exception if the entity description is read-only.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.FalseFilter">
      <summary>Represents the false filter expression.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.FalseFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.FalseFilter" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.FalseFilter.Match(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Matches a message against the current SQL expression.</summary>
      <returns>true if it matches; otherwise, false.</returns>
      <param name="message">The brokered message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.FalseFilter.Preprocess">
      <summary>Gets the preprocessed filter expression.</summary>
      <returns>The preprocessed filter expression.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.FalseFilter.RequiresPreprocessing">
      <summary>Gets a value indicating whether the SQL filter expression requires preprocessing.</summary>
      <returns>true if the SQL filter expression requires preprocessing; otherwise, false. Currently always returnstrue.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.FalseFilter.Validate">
      <summary>Validates the SQL expression.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.Filter">
      <summary>Describes a filter expression that is evaluated against a BrokeredMessage.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Filter.Match(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Matches the BrokeredMessage against the FilterExpression.</summary>
      <returns>true if the BrokeredMessage matches the filtering expression; otherwise, false.</returns>
      <param name="message">The BrokeredMessage object.</param>
      <exception cref="T:System.InvalidOperationException">The operation is invalid with the current state of object.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.FilterActionException">Filter evaluation failed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Filter.Preprocess">
      <summary>Preprocesses the filter expression and returns a preprocessed FilterExpression.</summary>
      <returns>The preprocessed FilterExpression.</returns>
      <exception cref="T:System.InvalidOperationException">The operation is invalid with the current state of object.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Filter.RequiresPreprocessing">
      <summary>Gets a value indicating whether the filter expression requires preprocessing.</summary>
      <returns>true if the filter expression requires preprocessing; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Filter.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
      <summary>Gets or sets the object that contains extra data.</summary>
      <returns>The object that contains extra data.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Filter.Validate">
      <summary>Validates the FilterExpression and make sure it complies with the valid grammar rules.</summary>
      <exception cref="T:Microsoft.ServiceBus.Messaging.FilterActionException">The filter statement is invalid or is potentially complex enough to consume too much computing power when evaluating the statement.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.FilterException">
      <summary>The exception that is thrown for signaling filter action errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.FilterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.FilterException" /> class using the specified message.</summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.FilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.FilterException" /> class using the specified message and inner exception.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessageClientEntity">
      <summary>Represents a message client entity.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.Abort">
      <summary>Aborts the message client entity and puts its status into a closing state.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.BeginClose(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close the message client entity.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to close the message client entity.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.Close">
      <summary>Closes the message client entity and puts its status into a closed state.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.EndClose(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to close the message client entity.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to close the message client entity.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.Fault">
      <summary>Puts the message client entity into a faulted state.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageClientEntity.IsClosed">
      <summary>Gets or sets a value that indicates whether the message client entity is closed.</summary>
      <returns>true if the message client entity is closed; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnAbort">
      <summary>Executes upon calling the Abort operation.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the BeginClose operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to close the message client entity.</returns>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the operation to begin to open the message client entity.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to begin to open the message client entity.</returns>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnClose(System.TimeSpan)">
      <summary>Executes upon calling the Close operation.</summary>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnClosed">
      <summary>Occurs when the message client entity is transitioned into a closing state.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnEndClose(System.IAsyncResult)">
      <summary>Executes upon calling the EndClose operation.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to close the message client entity.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnEndOpen(System.IAsyncResult)">
      <summary>Executes upon calling the operation to end to open the message client entity.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to open the message client entity.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnFaulted">
      <summary>Executes upon calling the Fault operation.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnOpen(System.TimeSpan)">
      <summary>Executes upon calling the operation to open the message client entity.</summary>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.OnOpened">
      <summary>Executes when the message client entity is opened.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.ThrowIfClosed">
      <summary>Throws an exception if the message client entity is closed.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.ThrowIfDisposed">
      <summary>Throws an exception if the message client entity is disposed.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.ThrowIfDisposedOrImmutable">
      <summary>Throws an exception if the client is disposed or immutable.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.ThrowIfDisposedOrNotOpen">
      <summary>Throws an exception if the client is disposed or not open.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageClientEntity.ThrowIfFaulted">
      <summary>Throws an exception if the client is faulted.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">
      <summary>The exception that is thrown to signal message lock lost errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageLockLostException.#ctor(System.String)">
      <summary>Initializes a new instance of the MessageLockLostException class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageLockLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the MessageLockLostException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessageNotFoundException">
      <summary>The exception that is thrown to signal message not found errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessageNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessageNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessageReceiver">
      <summary>Receives messages from the message container and acknowledges them.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.Abandon(System.Guid)">
      <summary>Discards the message and relinquishes the message lock ownership.</summary>
      <param name="lockToken">The lock token bound to the locked message instance to abandon.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageReceiver.BatchFlushInterval">
      <summary>Gets the batch flush interval.</summary>
      <returns>The batch flush interval. The default value is 20 ms.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageReceiver.BatchingEnabled">
      <summary>Gets a value indicating whether the batching is enabled.</summary>
      <returns>true if batching is enabled; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.BeginAbandon(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to abandon the message and relinquish its lock.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to abandon the message and relinquish its lock.</returns>
      <param name="lockToken">The lock token of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.BeginComplete(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to complete receipt of a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.MessageReceiver.Complete(System.Guid)" />.</returns>
      <param name="lockToken">The lock token of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.BeginDeadLetter(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to move a message to the dead letter queue.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move a message to the dead letter queue.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.BeginDeadLetter(System.Guid,System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to move a message to the dead letter queue.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move a message to the dead letter queue.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.BeginDefer(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to suspend receipt of a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to suspend receipt of a message.</returns>
      <param name="lockToken">The lock token of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.BeginReceive(System.Int64,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="sequenceNumber">The unique number assigned to a message by the Service Bus.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="serverWaitTime">The server wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.Complete(System.Guid)">
      <summary>Completes the receive operation on a message.</summary>
      <param name="lockToken">The lock token of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid)">
      <summary>Moves the undelivered message to the dead letter queue.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.DeadLetter(System.Guid,System.String,System.String)">
      <summary>Moves the undelivered message to the dead letter queue.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.Defer(System.Guid)">
      <summary>Indicates that the receiver wants to defer the processing for the message.</summary>
      <param name="lockToken">The lock token of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message.</param>
      <exception cref="P:Microsoft.ServiceBus.Common.Fx.Exception">Receive context is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.EndAbandon(System.IAsyncResult)">
      <summary>Ends the asynchronous operation to abandon the message and relinquish its lock.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to abandon the message and relinquish its lock.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.EndComplete(System.IAsyncResult)">
      <summary>Ends the asynchronous operation to complete receipt of a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to complete receipt of a message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.EndDeadLetter(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to move the message to the dead letter queue.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to move the message to the dead letter queue.</param>
      <exception cref="T:System.TimeoutException">The operation times out.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.EndDefer(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to defer receipt of a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to defer receipt of a message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.EndReceive(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to receive a message.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />  that represents the received message.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronous operation to receive a message.</param>
      <exception cref="T:System.TimeoutException">The operation times out.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockToken(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Gets the lock token bound to the message.</summary>
      <returns>The lock token of the message.</returns>
      <param name="message">The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> from which to get the lock token.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.GetLockTokens(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage})">
      <summary>Gets the collection of lock tokens from the specified collection of messages.</summary>
      <returns>The collection of lock tokens from the specified messages.</returns>
      <param name="messages">The collection of messages from which to get the lock tokens.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageReceiver.Mode">
      <summary>Gets the message receive mode.</summary>
      <returns>The message receive mode.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)">
      <summary>Executes upon calling the Abandon operation.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnAbandon or BeginAbandon operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to abandon the messages and relinquish its lock.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnComplete or BeginComplete operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to complete receiving of messages.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnDeadLetter or BeginDeadLetter operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move undelivered of messages to the deadletter queue.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="deadLetterReason">The reason for deadlettering the messages.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the messages.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnDefer or BeginDefer operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to suspend processing of messages.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnTryReceive or BeginTryReceive operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to try to receive messages.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="receipts">The collection of unique numbers assigned to messages, by the Service Bus.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnTryReceive or BeginTryReceive operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to try to receive messages.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="messageCount">The number of messages to try receiving.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)">
      <summary>Executes upon calling the Complete operation.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.String,System.String,System.TimeSpan)">
      <summary>Executes upon calling the DeadLetter operation.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)">
      <summary>Executes upon calling the Defer operation.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndAbandon(System.IAsyncResult)">
      <summary>Executes the end abandon action.</summary>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndComplete(System.IAsyncResult)">
      <summary>Executes the end complete action.</summary>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDeadLetter(System.IAsyncResult)">
      <summary>Executes the end move to dead letter queue action.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the asynchronously completed operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndDefer(System.IAsyncResult)">
      <summary>Executes the end defer action.</summary>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnEndTryReceive(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)">
      <summary>Executes the end try receive action.</summary>
      <returns>true if it succeeds; false if it fails.</returns>
      <param name="result">The result.</param>
      <param name="messages">The received message collection.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)">
      <summary>Executes upon calling the TryReceive operation.</summary>
      <returns>true indicating that this method operation succeeded; otherwise, false.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="receipts">The collection of unique numbers assigned to messages, by the Service Bus.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
      <param name="messages">When this method returns, contains the collection of messages received.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)">
      <summary>Executes upon calling the TryReceive operation.</summary>
      <returns>true indicating that this method operation succeeded; otherwise, false.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="messageCount">The number of messages to try receiving.</param>
      <param name="timeout">The time span the operation waits before it times out.</param>
      <param name="messages">When this method returns, contains the collection of messages received.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageReceiver.Path">
      <summary>Gets the path of the queue or topic, relative to the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> base address.</summary>
      <returns>A string representing the path of the queue or topic.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageReceiver.PrefetchCount">
      <summary>Gets or sets the number of messages that the message receiver can simultaneously request.</summary>
      <returns>The number of messages that the message receiver can simultaneously request.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.Receive">
      <summary>Receives a <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> from the current queue or topic.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />  that represents the received message.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.Int64)">
      <summary>Receives a message from the current queue or topic.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />  that represents the received message.</returns>
      <param name="sequenceNumber">The sequence number of the message to receive.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageReceiver.Receive(System.TimeSpan)">
      <summary>Receives a <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> from the current queue or topic.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />  that represents the received message.</returns>
      <param name="serverWaitTime">The time span the server waits before the operation times out.</param>
      <exception cref="T:System.TimeoutException">Thrown when operation times out.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessageSender">
      <summary>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> class is used to send messages from the Service Bus. Although you can use the <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" /> class to send and receive messages without creating a <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> object, you can also use <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> and <see cref="T:Microsoft.ServiceBus.Messaging.MessageReceiver" /> to create a sender and receiver on an entity without knowing whether it is a topic or a queue.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageSender.BatchFlushInterval">
      <summary>Gets the batch flush interval.</summary>
      <returns>A batch flush interval. The default value is 20 ms.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> is in closing, closed, or faulted state.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageSender.BatchingEnabled">
      <summary>Gets a value indicating whether the batching is enabled.</summary>
      <returns>true if batching is enabled; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSender.BeginSend(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to send a brokered message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous create a queue operation.</returns>
      <param name="message">The brokered message to send.</param>
      <param name="callback">A <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.MessageSender.EndSend(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.TimeoutException">Thrown when operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of the <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the brokered message is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSender.EndSend(System.IAsyncResult)">
      <summary>Ends an asynchronous request to send a message.</summary>
      <param name="result">A <see cref="T:System.IAsyncResult" /> that references the <see cref="M:Microsoft.ServiceBus.Messaging.MessageSender.Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)" /> method.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSender.OnBeginSend(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Allows concrete implementations to define what should be done when sending messages. This method cannot be implemented in a concrete class by the user.</summary>
      <returns>A <see cref="T:System.IAsyncResult" /> for the operation.</returns>
      <param name="trackingContext">The context of the tracking.</param>
      <param name="messages">A list of <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> objects to be sent.</param>
      <param name="timeout">A client side timeout value for the operation. The operation should be aborted or cancelled if the duration exceeds this timeout.</param>
      <param name="callback">A user callback to be invoked when the operation completes.</param>
      <param name="state">The state to be passed to the callback when the operation completes.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSender.OnEndSend(System.IAsyncResult)">
      <summary>Executes the end send action. This method cannot be implemented in a concrete class by the user.</summary>
      <param name="result">The <see cref="T:System.IAsyncResult" /> object created from a call to <see cref="M:Microsoft.ServiceBus.Messaging.MessageSender.OnBeginSend(System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage},System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSender.OnSend(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage},System.TimeSpan)">
      <summary>Allows concrete implementations to override (if needed) what should be done when sending messages in a synchronous manner.</summary>
      <param name="trackingContext">The context of the tracking.</param>
      <param name="messages">A list of <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> objects to be sent.</param>
      <param name="timeout">A client side timeout value for the operation. The operation should be aborted or cancelled if the duration exceeds this timeout.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageSender.Path">
      <summary>Gets the path of the queue or topic relative to the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> base address.</summary>
      <returns>The path of the queue or topic relative to the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> base address.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSender.Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Sends the specified brokered message.</summary>
      <param name="message">The brokered message to send.</param>
      <exception cref="T:System.TimeoutException">Thrown when operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="message" /> is null.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessageSession">
      <summary>Represents a message session that allows grouping of related messages for processing in a single transaction.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.BeginGetState(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to set the state of the message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get the state of the message session.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.BeginSetState(System.IO.Stream,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to set the state of the message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get the state of the message session.</returns>
      <param name="stream">The time span interval the get operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.EndGetState(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to get the state of the message session.</summary>
      <returns>The stream from which the state information is persisted.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get the state of the message session.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.EndSetState(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to set the state of the message session.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to set the state of the message session.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.GetState">
      <summary>Gets the state of the message session.</summary>
      <returns>The stream from which the state information is persisted.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)">
      <summary>Abandons the message.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The lock tokens of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> collection. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnAbort">
      <summary>Aborts the message session. </summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginAbandon(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to abandon the message and relinquish its lock.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to abandon the messages and relinquish its lock.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The lock tokens of the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> collection. This is only available when a message is received in peek-lock mode. The lock token is used internally to complete or abandon a message.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to close the communication object for the message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to close the communication object for the message session.</returns>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnComplete or BeginComplete operation. </summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to complete receiving of messages.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.String,System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnDeadLetter or BeginDeadLetter operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move undelivered messages to the deadletter queue.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="deadLetterReason">The reason for deadlettering the messages.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the messages.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnDefer or BeginDefer operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to suspend processing of messages.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginGetState(Microsoft.ServiceBus.Tracing.TrackingContext,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnGetState or BeginGetState operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get the state of the message session.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnOpen operation of the message receiver.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to open a communication object for the message session.</returns>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginSetState(Microsoft.ServiceBus.Tracing.TrackingContext,System.IO.Stream,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnSetState or BeginSetState operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to set the state of the message session.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="stream">The stream to which the state information is persisted.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnTryReceive or BeginTryReceive operation of the message receiver.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to try to receive messages.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="receipts">The collection of unique numbers assigned to messages by the Service Bus.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnBeginTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the OnTryReceive or BeginTryReceive operation of the message receiver.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to try to receive messages.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="messageCount">The number of messages to try to receive.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnComplete(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)">
      <summary>Completes the message receive operation.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnDeadLetter(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.String,System.String,System.TimeSpan)">
      <summary>Deadletters a message.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="deadLetterReason">The reason for deadlettering the messages.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the messages.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnDefer(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Guid},System.TimeSpan)">
      <summary>Defers the delivery of a message.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="lockTokens">The collection of lock tokens bound to the locked message instances.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndAbandon(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to abandon the message and relinquish its lock.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to abandon the messages and relinquish its lock.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndClose(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to close the communication object for the message session.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to close the communication object for the message session.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndComplete(System.IAsyncResult)">
      <summary>Executes the end complete operation of the message receiver.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to complete receiving of messages.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndDeadLetter(System.IAsyncResult)">
      <summary>Executes the end deadletter operation of the message receiver.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move undelivered messages to the deadletter queue.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndDefer(System.IAsyncResult)">
      <summary>Executes the end defer operation of the message receiver.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to suspend processing of messages.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndGetState(System.IAsyncResult)">
      <summary>Executes upon calling the OnGetState or EndGetState operation.</summary>
      <returns>The stream from which the state information is persisted.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to get the state of the message session.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndOpen(System.IAsyncResult)">
      <summary>Ends the asynchronous operation to open a communication object for the message session.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to open a communication object for the message session.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndSetState(System.IAsyncResult)">
      <summary>Ends the asynchronous operation to set the state of the message session.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to set the state of the message session.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnEndTryReceive(System.IAsyncResult,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)">
      <summary>Executes the end try receive operation of the message receiver.</summary>
      <returns>true if it succeeds; false if it fails.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to try to receive messages.</param>
      <param name="messages">When this method returns, contains the received message collection.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnGetState(Microsoft.ServiceBus.Tracing.TrackingContext,System.TimeSpan)">
      <summary>Executes upon calling the GetState operation.</summary>
      <returns>The stream from which the state information is persisted.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="timeout">The time span interval the get operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnSetState(Microsoft.ServiceBus.Tracing.TrackingContext,System.IO.Stream,System.TimeSpan)">
      <summary>Executes upon calling the SetState operation.</summary>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="stream">The stream to which the state information is persisted.</param>
      <param name="timeout">The time span interval the set operation waits before it times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Collections.Generic.IEnumerable{System.Int64},System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)">
      <summary>Attempts a message receive operation.</summary>
      <returns>true if the receive operation was successful; otherwise, false.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="receipts">The collection of unique numbers assigned to messages by the Service Bus.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="messages">A collection of <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> objects.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.OnTryReceive(Microsoft.ServiceBus.Tracing.TrackingContext,System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{Microsoft.ServiceBus.Messaging.BrokeredMessage}@)">
      <summary>Attempts a message receive operation.</summary>
      <returns>true if the receive operation was successful; otherwise, false.</returns>
      <param name="trackingContext">The context information associated by a transaction tracking this operation.</param>
      <param name="messageCount">The number of messages to try to receive.</param>
      <param name="timeout">The time span interval the operation waits before it times out.</param>
      <param name="messages">A collection of <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> objects.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageSession.Path">
      <summary>Gets the path of the queue or topic, relative to the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> base address.</summary>
      <returns>A string representing the path of the queue or topic.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageSession.PrefetchCount">
      <summary>Gets or sets the number of messages that the message receiver can simultaneously request.</summary>
      <returns>The number of messages that the message receiver can simultaneously request.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessageSession.SessionId">
      <summary>Gets or sets the message session identifier.</summary>
      <returns>The message session identifier.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageSession.SetState(System.IO.Stream)">
      <summary>Sets the state of the message session.</summary>
      <param name="stream">The stream to which the state information is persisted.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessageStoreLockLostException">
      <summary>The exception that is thrown for signaling message store lock lost errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageStoreLockLostException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessageStoreLockLostException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessageStoreLockLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessageStoreLockLostException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException">
      <summary>The exception that is thrown to signal messaging communication errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingCommunicationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException" /> class.</summary>
      <param name="communicationPath">The communication path.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingCommunicationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingCommunicationException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The inner exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">
      <summary>The exception that is thrown for signaling messaging entity already exists errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException" /> class with the name of the entity.</summary>
      <param name="entityName">The name of the entity.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">
      <summary>The exception that is thrown for signaling messaging entity not found errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException" /> class with the entity name.</summary>
      <param name="entityName">The name of the entity.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessagingException">
      <summary>The exception that is thrown for signaling messaging errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingException" /> class with serialization information and streaming context.</summary>
      <param name="info">The serialization information.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingException.Detail">
      <summary>Gets the detail information of the messaging exception.</summary>
      <returns>The detail information of the messaging exception.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates the serialization information with data about the exception.</summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">The contextual information about the source or destinations.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingException.IsTransient">
      <summary>Gets a value indicating whether the exception is transient.</summary>
      <returns>True if the exception is transient; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingException.Timestamp">
      <summary>Gets or sets the time at which the messaging exception occurred.</summary>
      <returns>The time at which the messaging exception occurred.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail">
      <summary>Provides the details of the messaging exception.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.CorrelationFiltersExceeded(System.String)">
      <summary>Returns the exception details for the correlation filters exceeded error.</summary>
      <returns>The exception details for the correlation filters exceeded error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.EntityConflict(System.String)">
      <summary>Returns the exception details for the entity conflict error.</summary>
      <returns>The exception details for the entity conflict error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.EntityNotFound(System.String)">
      <summary>Returns the exception details for the entity not found error.</summary>
      <returns>The exception details for the entity not found error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.ErrorCode">
      <summary>Gets the error code.</summary>
      <returns>The error code.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.ErrorLevel">
      <summary>Gets the error level.</summary>
      <returns> One of the values of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.ErrorLevelType" /> enumeration.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.Message">
      <summary>Gets the descriptive message about the exception.</summary>
      <returns>The descriptive message about the exception.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.ServerBusy(System.String)">
      <summary>Returns the exception details for the server busy error.</summary>
      <returns>The exception details for the server busy error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.SqlFiltersExceeded(System.String)">
      <summary>Returns the exception details for the SQL filters exceeded error.</summary>
      <returns>The exception details for the SQL filters exceeded error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.StoreLockLost(System.String)">
      <summary>Returns the exception details for the store lock lost error.</summary>
      <returns>The exception details for the store lock lost error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.SubscriptionsExceeded(System.String)">
      <summary>Returns the exception details for the subscriptions exceeded error.</summary>
      <returns>The exception details for the subscriptions exceeded error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.UnknownDetail(System.String)">
      <summary>Returns the exception details for the unknown detail error.</summary>
      <returns>The exception details for the unknown detail error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.UnspecifiedInternalError(System.String)">
      <summary>Returns the exception details for the unspecified internal error.</summary>
      <returns>The exception details for the unspecified internal error.</returns>
      <param name="message">The descriptive message about the exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.ErrorLevelType">
      <summary>Enumerates the types of error level for the messaging communication.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.ErrorLevelType.UserError">
      <summary>Specifies a user error.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.MessagingExceptionDetail.ErrorLevelType.ServerError">
      <summary>Specifies a server error.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessagingFactory">
      <summary>Represents a messaging factory. This is the anchor class used for run-time operations to send and receive to and from queues, topics, or subscriptions.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingFactory.Address">
      <summary>Gets the base address of the messaging factory.</summary>
      <returns>A URI that represents the base address of the messaging factory.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.BeginCreate(System.String,Microsoft.ServiceBus.Messaging.MessagingFactorySettings,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> operation.</returns>
      <param name="address">The namespace base address.</param>
      <param name="factorySettings">The <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> settings.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-provided object that contains information about the create operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.MessagingFactory.EndCreate(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="address" /> is empty or null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.BeginCreate(System.String,Microsoft.ServiceBus.TokenProvider,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> operation.</returns>
      <param name="address">The namespace base address.</param>
      <param name="tokenProvider">The token provider.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-provided object that contains information about the create operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.MessagingFactory.EndCreate(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.BeginCreate(System.Uri,Microsoft.ServiceBus.Messaging.MessagingFactorySettings,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> operation.</returns>
      <param name="address">The namespace base address.</param>
      <param name="factorySettings">The <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> settings.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-provided object that contains information about the create operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.MessagingFactory.EndCreate(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="address" /> is empty or null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.BeginCreate(System.Uri,Microsoft.ServiceBus.TokenProvider,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous request to create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> operation.</returns>
      <param name="address">The namespace base address.</param>
      <param name="tokenProvider">The token provider.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-provided object that contains information about the create operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.MessagingFactory.EndCreate(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.BeginCreateMessageReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.AsyncCallback,System.Object)">
      <summary>Begins a create message receiver.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create message receiver.</returns>
      <param name="entityPath">The path of the entity.</param>
      <param name="receiveMode">The receive mode.</param>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.BeginCreateMessageReceiver(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins a create message receiver.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create message receiver.</returns>
      <param name="entityPath">The path of the entity.</param>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.BeginCreateMessageSender(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins a create message sender.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create message sender.</returns>
      <param name="entityPath">The path of the entity.</param>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.Create">
      <summary>Creates a new messaging factory object.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.Create(System.String,Microsoft.ServiceBus.Messaging.MessagingFactorySettings)">
      <summary>Creates a new <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</returns>
      <param name="address">The base address of the service namespace.</param>
      <param name="factorySettings">The <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> settings.</param>
      <exception cref="T:System.UriFormatException">Thrown when <paramref name="address" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="factorySettings" /> or <paramref name="address" /> are null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.Create(System.String,Microsoft.ServiceBus.TokenProvider)">
      <summary>Creates a new <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</returns>
      <param name="address">The base address of the namespace.</param>
      <param name="tokenProvider">The token provider.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
      <exception cref="T:System.UriFormatException">Thrown when <paramref name="address" /> is empty.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="tokenProvider" /> or <paramref name="address" /> are null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.Create(System.Uri,Microsoft.ServiceBus.Messaging.MessagingFactorySettings)">
      <summary>Creates a new <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</returns>
      <param name="address">The namespace base address.</param>
      <param name="factorySettings">The <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> settings.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="address" /> or <paramref name="factorySettings" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.Create(System.Uri,Microsoft.ServiceBus.TokenProvider)">
      <summary>Creates a new <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</returns>
      <param name="address">The base address of the namespace.</param>
      <param name="tokenProvider">The token provider.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> contains a path appended to the full address of the service namespace.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="tokenProvider" /> or <paramref name="address" /> are null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateFromConnectionString(System.String)">
      <summary>Creates a new <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object from a connection string.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</returns>
      <param name="connectionString">The connection string.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageReceiver(System.String)">
      <summary>Creates a message receiver.</summary>
      <returns>The newly created message receiver.</returns>
      <param name="entityPath">The path of the entity.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Creates a message receiver.</summary>
      <returns>The newly created message receiver.</returns>
      <param name="entityPath">The path of the entity.</param>
      <param name="receiveMode">The receive mode.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateMessageSender(System.String)">
      <summary>Creates a message sender.</summary>
      <returns>The newly created message sender.</returns>
      <param name="entityPath">The path of the entity.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateQueueClient(System.String)">
      <summary>Creates a new queue client.</summary>
      <returns>The newly created queue client.</returns>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="path" /> length is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.TopicNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> object. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The factory has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateQueueClient(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Creates a new queue client.</summary>
      <returns>The newly created queue client.</returns>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
      <param name="receiveMode">The receive mode.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="path" /> length is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.TopicNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> object. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The factory has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateSubscriptionClient(System.String,System.String)">
      <summary>Creates a subscription client.</summary>
      <returns>The newly created subscription client.</returns>
      <param name="topicPath">The topic path relative to the service namespace.</param>
      <param name="name">The name of the subscription.</param>
      <exception cref="T:System.ArgumentException">The supplied <paramref name="topicPath" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="topicPath" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.TopicNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> object. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The factory has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateSubscriptionClient(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Creates a new subscription client.</summary>
      <returns>The newly created subscription client.</returns>
      <param name="topicPath">The topic path relative to the service namespace.</param>
      <param name="name">The name of the subscription.</param>
      <param name="receiveMode">The receive mode.</param>
      <exception cref="T:System.ArgumentException">The supplied <paramref name="topicPath" /> is null or empty.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="topicPath" /> is greater than <see cref="F:Microsoft.ServiceBus.Messaging.Constants.TopicNameMaximumLength" />.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> object. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The factory has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.CreateTopicClient(System.String)">
      <summary>Creates a new topic client.</summary>
      <returns>The newly created topic client.</returns>
      <param name="path">The topic path relative to the service namespace base address.</param>
      <exception cref="T:System.ArgumentNullException">The supplied <paramref name="path" /> is null.</exception>
      <exception cref="T:System.TimeoutException">The operation times out. The timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> object. You may need to increase the value of <see cref="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if the timeout value is relatively low.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">An internal error or unexpected exception occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The factory has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.EndCreate(System.IAsyncResult)">
      <summary>Ends an asynchronous request to create a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the creation of a <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> object.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.EndCreateMessageReceiver(System.IAsyncResult)">
      <summary>Ends a create message receiver.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessageReceiver" /> object.</returns>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.EndCreateMessageSender(System.IAsyncResult)">
      <summary>Ends a create message sender.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> object.</returns>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.GetSettings">
      <summary>Retrieves a copy of the settings of the messaging factory.</summary>
      <returns>A copy of the messaging factory settings.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnAbort">
      <summary>Executes the abort action.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnAcceptSessionReceiver(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan)">
      <summary>Executes the accept session receiver action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous accept session receiver action.</returns>
      <param name="entityName">The name of the entity.</param>
      <param name="sessionId">The session identifier.</param>
      <param name="receiveMode">The message receive mode.</param>
      <param name="timeout">The wait time before the operation times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnBeginAcceptSessionReceiver(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin accept session receiver action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous accept session receiver action.</returns>
      <param name="entityName">The name of the entity.</param>
      <param name="sessionId">The session identifier.</param>
      <param name="receiveMode">The message receive mode.</param>
      <param name="timeout">The wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin close action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous close action.</returns>
      <param name="timeout">The timeout.</param>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnBeginCreateMessageReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create message receiver action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create message receiver action.</returns>
      <param name="entityName">The name of the entity.</param>
      <param name="receiveMode">The message receive mode.</param>
      <param name="timeout">The wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnBeginCreateMessageSender(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create message sender action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create message sender action.</returns>
      <param name="entityName">The name of the entity.</param>
      <param name="timeout">The timeout.</param>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnClose(System.TimeSpan)">
      <summary>Executes the close action.</summary>
      <param name="timeout">The timeout.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnCreateMessageReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan)">
      <summary>Executes the create message receiver action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create message receiver action.</returns>
      <param name="entityName">The name of the entity.</param>
      <param name="receiveMode">The message receive mode.</param>
      <param name="timeout">The timeout.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnCreateMessageSender(System.String,System.TimeSpan)">
      <summary>Executes the create message sender action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous create message sender action.</returns>
      <param name="entityName">The name of the entity.</param>
      <param name="timeout">The timeout.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnCreateQueueClient(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Executes the create queue client action.</summary>
      <returns>The newly created queue client.</returns>
      <param name="path">The path of the queue relative to the service namespace base address.</param>
      <param name="receiveMode">The receive mode.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnCreateSubscriptionClient(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Executes a create subscription client action.</summary>
      <returns>A newly created subscription client.</returns>
      <param name="topicPath">The path of the subscription relative to the service namespace base address.</param>
      <param name="name">The name of the subscription.</param>
      <param name="receiveMode">The receive mode.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnCreateTopicClient(System.String)">
      <summary>Executes the create topic client action.</summary>
      <returns>The newly created topic client.</returns>
      <param name="path">The path of the topic relative to the service namespace base address.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnEndAcceptSessionReceiver(System.IAsyncResult)">
      <summary>Executes the end accept session receiver action.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.SessionReceiver" /> object.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that stores state information and any user-defined data for this asynchronous operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnEndClose(System.IAsyncResult)">
      <summary>Executes the end close action.</summary>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnEndCreateMessageReceiver(System.IAsyncResult)">
      <summary>Executes the end create message receiver action.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageReceiver" /> object.</returns>
      <param name="result">The result.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactory.OnEndCreateMessageSender(System.IAsyncResult)">
      <summary>Executes the end create message sender action.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> object.</returns>
      <param name="result">The result.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings">
      <summary>Represents the messaging factory settings.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.#ctor(Microsoft.ServiceBus.Messaging.MessagingFactorySettings)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> class with the specified messaging factory settings for cloning.</summary>
      <param name="other">The specified messaging factory settings.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.Clone">
      <summary>Creates a copy of <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />.</summary>
      <returns>A created copy of <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.NetMessagingTransportSettings">
      <summary>Gets or sets the transport settings required for the net messaging.</summary>
      <returns>The transport settings required for the net messaging.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OnBeginCreateFactory(System.Uri,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create factory action.</summary>
      <returns>The executed action.</returns>
      <param name="uri">The uniform resource identifier.</param>
      <param name="callback">The asynchronous callback.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OnEndCreateFactory(System.IAsyncResult)">
      <summary>Executes the end create factory action.</summary>
      <returns>The result of the execution.</returns>
      <param name="result">The result of the execution.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> that specifies how long the messaging operation has to complete before timing out.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that specifies how long the messaging operation has to complete before timing out. The default value is one minute.</returns>
      <exception cref="T:System.ArgumentNullException">A null is set; for example, a nullable <see cref="T:System.TimeSpan" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A zero or negative <see cref="T:System.TimeSpan" /> is set.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.TokenProvider">
      <summary>Gets or sets the token provider of the factory settings.</summary>
      <returns>The token provider of the factory settings.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.NetMessagingBinding">
      <summary>Represents the binding that is used for net messaging.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.NetMessagingBinding" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.NetMessagingBinding" /> class.</summary>
      <param name="configurationName">The configuration to use for the initialization.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingBinding.CreateBindingElements">
      <summary>Returns an ordered collection of binding elements contained in the current binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> object which contains the ordered stack of binding elements described by the <see cref="T:Microsoft.ServiceBus.Messaging.NetMessagingBinding" />. The order of the binding elements starting from the bottom is transport, encoding, and security. </returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingBinding.MaxBufferPoolSize">
      <summary>Gets or sets the maximum size allowed for a buffer pool that stores TCP messages processed by the binding.</summary>
      <returns>The maximum size allowed for a buffer pool that stores TCP messages processed by the binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingBinding.PrefetchCount">
      <summary>Gets or sets the number of messages that the message receiver can fetch in advance.</summary>
      <returns>The number of messages that the message receiver can fetch in advance.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingBinding.Scheme">
      <summary>Gets the URI transport scheme for the channels and listeners that are configured with this binding.</summary>
      <returns>The URI transport scheme for the channels and listeners that are configured with this binding.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingBinding.SessionIdleTimeout">
      <summary>Gets or sets the timespan value that specifies period of inactivity that the session waits before timing out.</summary>
      <returns>The timespan value that specifies period of inactivity that the session waits before timing out.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingBinding.TransportSettings">
      <summary>Gets or sets the transport settings for the net messaging.</summary>
      <returns>The transport settings for the net messaging.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement">
      <summary>Represents the binding element used to specify a net messaging transport for transmitting messages on the Service Bus.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds a channel factory.</summary>
      <returns>The interface implemented by the channel factory.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="TChannel">The type of the channel.</typeparam>
      <exception cref="T:System.ArgumentException">Thrown when TChannel isn’t a supported channel type.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Builds a channel listener.</summary>
      <returns>An implemented <see cref="T:System.ServiceModel.Channels.IChannelListener`1" /> interface.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="TChannel">The type of the channel.</typeparam>
      <exception cref="T:System.ArgumentException">Thrown when TChannel isn’t a supported channel type.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Queries if the binding element can build a channel factory.</summary>
      <returns>true if the binding element can build a channel factory for a specific type of channel; otherwise, false.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="T">The type of the channel.</typeparam>
      <exception cref="T:System.ArgumentNullException">Thrown when context is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.CanBuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Queries if the binding element can build a channel listener.</summary>
      <returns>true if the binding element can build a channel listener for a specific type of channel; otherwise, false.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="T">The type of the channel.</typeparam>
      <exception cref="T:System.ArgumentNullException">Thrown when context is null.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.Clone">
      <summary>Makes a deep copy of this binding element.</summary>
      <returns>A copy of this binding element.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a specific binding element property.</summary>
      <returns>The binding element property.</returns>
      <param name="context">The binding context.</param>
      <typeparam name="T">The generic type parameter.</typeparam>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.PrefetchCount">
      <summary>Gets or sets the number of prefetch.</summary>
      <returns>The number of prefetch.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.Scheme">
      <summary>Gets the URI scheme for the transport.</summary>
      <returns>The URI scheme for the transport.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.SessionIdleTimeout">
      <summary>Gets or sets the timespan value that specifies period of inactivity that the session waits before timing out.</summary>
      <returns>The timespan value. The default value is 1 minute.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.System#ServiceModel#Description#IPolicyExportExtension#ExportPolicy(System.ServiceModel.Description.MetadataExporter,System.ServiceModel.Description.PolicyConversionContext)">
      <summary>Exports a custom policy assertion.</summary>
      <param name="exporter">The MetadataExporter object that you can use to modify the exporting process.</param>
      <param name="context">The PolicyConversionContext object that you can use to insert your custom policy assertion.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportContract(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlContractConversionContext)">
      <summary>Writes custom Web Services Description Language (WSDL) elements into the generated WSDL for a contract.</summary>
      <param name="exporter">The WsdlExporter object that exports the contract information.</param>
      <param name="context">Provides mappings from exported WSDL elements to the contract description.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.System#ServiceModel#Description#IWsdlExportExtension#ExportEndpoint(System.ServiceModel.Description.WsdlExporter,System.ServiceModel.Description.WsdlEndpointConversionContext)">
      <summary>Writes custom Web Services Description Language (WSDL) elements into the generated WSDL for an endpoint.</summary>
      <param name="exporter">The WsdlExporter object that exports the endpoint information.</param>
      <param name="context">Provides mappings from exported WSDL elements to the endpoint description.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingTransportBindingElement.TransportSettings">
      <summary>Gets or sets the transport settings for the net messaging.</summary>
      <returns>The transport settings for the net messaging.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.NetMessagingTransportSettings">
      <summary>Represents .NET messaging transport settings.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.NetMessagingTransportSettings" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.NetMessagingTransportSettings.BatchFlushInterval">
      <summary>Gets or sets the batch flush interval.</summary>
      <returns>The batch flush interval.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.NetMessagingTransportSettings.Clone">
      <summary>Makes a deep copy of this object.</summary>
      <returns>A copy of this object.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.PartitionNotOwnedException">
      <summary>The exception that is thrown for signaling partition not owned errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.PartitionNotOwnedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.PartitionNotOwnedException" /> class with a specified error message.</summary>
      <param name="message">The error message that describes the cause of the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.PartitionNotOwnedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.PartitionNotOwnedException" /> class with a specified error message and a reference to the inner exception.</summary>
      <param name="message">The error message that describes the cause of the exception.</param>
      <param name="innerException">The inner exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.QueueClient">
      <summary>Represents the queue client object.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Abandon(System.Guid)">
      <summary>Discards the message and relinquishes the message lock ownership.</summary>
      <param name="lockToken">The lock token bound to the locked message instance to abandon.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession">
      <summary>Accepts a message session that allows grouping of related messages for processing in a single transaction.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String)">
      <summary>Accepts a message session that allows grouping of related messages for processing in a single transaction using the given session identifier.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <exception cref="T:System.ArgumentException">Thrown if sessionId is null, empty, or white spaces.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.String,System.TimeSpan)">
      <summary>Accepts a message session that allows grouping of related messages for processing in a single transaction using the given session identifier and wait time.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <exception cref="T:System.ArgumentException">Thrown if sessionId is null, empty, or white spaces.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="serverWaitTime" /> is not a positive TimeSpan value.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptMessageSession(System.TimeSpan)">
      <summary>Accepts a message session that allows grouping of related messages for processing in a single transaction using the specified server wait time.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="serverWaitTime" /> is not a positive TimeSpan value.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="serverWaitTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginAbandon(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to abandon the message and relinquish its lock.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to abandon the message and relinquish its lock.</returns>
      <param name="lockToken">The lock token bound to the locked message instance to abandon.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginAcceptMessageSession(System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to accept a message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginAcceptMessageSession(System.String,System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to accept a message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentException">Thrown if sessionId is null, empty, or white spaces.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginAcceptMessageSession(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to accept a message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentException">Thrown if sessionId is null, empty, or white spaces.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="serverWaitTime" /> is not a positive TimeSpan value.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="serverWaitTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginAcceptMessageSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to accept a message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="serverWaitTime" /> is not a positive TimeSpan value.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="serverWaitTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginComplete(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to complete processing of a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to complete processing of a message.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by the <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginDeadLetter(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to move a message to the dead letter queue.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move a message to the dead letter queue.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by the <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginDeadLetter(System.Guid,System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to move a message to the dead letter queue.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move a message to the dead letter queue.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by the <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginDefer(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to suspend processing of a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to suspend processing of a message.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.ServiceBusMessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by the <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginReceive(System.Int64,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="sequenceNumber">The unique number assigned to a message by the Service Bus.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="serverWaitTime" /> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.BeginSend(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to send a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to send a message.</returns>
      <param name="message">The message to send.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown when operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> may need to increase the value of <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if timeout value is relatively low. </exception>
      <exception cref="T:System.ArgumentException">Thrown when the <paramref name="BrokeredMessage" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the  <paramref name="message" /> has already been sent by a QueueClient or <see cref="T:Microsoft.ConnectedServices.Sdk.Client.MessageSender" /> once already.</exception>
      <exception cref="T:System.NotSupportedException">Thrown if the topic/subscription we are point to does not support the send operation. That is, Deadletter queue does not support send operations.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Complete(System.Guid)">
      <summary>Completes processing of a message.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by  <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /></exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by the <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String)">
      <summary>Creates a new copy of <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" /> with specified path.</summary>
      <returns>The created <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" />.</returns>
      <param name="path">The path.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Create(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Creates a new copy of <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" /> with specified path and mode.</summary>
      <returns>The created <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" />.</returns>
      <param name="path">The path.</param>
      <param name="mode">The mode.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,System.String)">
      <summary>Creates a new copy of <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" /> from connection string with specified path.</summary>
      <returns>The created <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" />.</returns>
      <param name="connectionString">The connection string used.</param>
      <param name="path">The path.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.CreateFromConnectionString(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Creates a new copy of <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" /> from connection string with specified path and mode.</summary>
      <returns>The created <see cref="T:Microsoft.ServiceBus.Messaging.QueueClient" />.</returns>
      <param name="connectionString">The connection string.</param>
      <param name="path">The path.</param>
      <param name="mode">The mode.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid)">
      <summary>Moves the undelivered message to the dead letter queue.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by  <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /></exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by the <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.DeadLetter(System.Guid,System.String,System.String)">
      <summary>Moves the undelivered message to the dead letter queue.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by  <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /></exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by the <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Defer(System.Guid)">
      <summary>Suspends the processing of a message.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by  <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /></exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by the <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.EndAbandon(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to abandon the message and relinquish its lock.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous abandon message operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.EndAcceptMessageSession(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to accept a message session that allows grouping of related messages for processing in a single transaction.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous accept message session operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.EndComplete(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to complete processing of a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous complete message processing operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.EndDeadLetter(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to move message to the dead letter queue.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation to move message to the dead letter queue.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.EndDefer(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to suspend processing of a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation to suspend processing of a message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.EndReceive(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to receive a message.</summary>
      <returns>Returns <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation to receive a message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.EndSend(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to send a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation to send a message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.FormatDeadLetterPath(System.String)">
      <summary>Builds a format name from the specified dead letter queue path.</summary>
      <returns>The <see cref="T:System.String" /> resulted from building the format name for the specified dead letter queue path.</returns>
      <param name="queuePath">The path to the dead letter queue.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver">
      <summary>Gets or sets the message receiver for the queue.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageReceiver" /> for the queue.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalSender">
      <summary>Gets or sets the message sender for the queue.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> for the queue.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueClient.IsSubQueue">
      <summary>Gets or sets a value that indicates whether the message receiver is created from a subqueue.</summary>
      <returns>true if the message receiver is created from a subqueue; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueClient.MessagingFactory">
      <summary>Gets or sets the messaging factory.</summary>
      <returns>The messaging factory.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueClient.Mode">
      <summary>Gets the message receive mode when processing the received message.</summary>
      <returns>The message <see cref="T:Microsoft.ServiceBus.Messaging.ReceiveMode" />  when processing the received message.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnAbort">
      <summary>Executes upon calling the Abort event.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the BeginAcceptMessageSession operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <param name="receiveMode">The receive mode when processing with the receive messages.</param>
      <param name="timeout">The time span the server waits for processing messages before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes when the Close operation is called.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptSessionReceiver" />.</returns>
      <param name="timeout">The maximum time before the close operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndClose delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create receiver action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.CreateReceiver" />.</returns>
      <param name="receiveMode">The message <see cref="T:Microsoft.ServiceBus.Messaging.ReceiveMode" /> receive mode.</param>
      <param name="timeout">The maximum time before this operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.EndCreateReceiver(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create receiver action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.CreateReceiver" />.</returns>
      <param name="subQueueName">Name of the sub-queue.</param>
      <param name="receiveMode">The message <see cref="T:Microsoft.ServiceBus.Messaging.ReceiveMode" /> receive mode.</param>
      <param name="timeout">The maximum time before this operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.EndCreateReceiver(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnBeginCreateSender(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create sender action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.CreateSender" />.</returns>
      <param name="timeout">The maximum time before this operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.EndCreateSender(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnClose(System.TimeSpan)">
      <summary>Executes upon calling the Close action.</summary>
      <param name="timeout">The maximum time before the close operation times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndAcceptMessageSession(System.IAsyncResult)">
      <summary>Executes upon calling the EndAcceptMessageSession operation.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous accept message session operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndClose(System.IAsyncResult)">
      <summary>Executes the end close action.</summary>
      <param name="result">The result of the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.AcceptSessionReceiver" /> operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateReceiver(System.IAsyncResult)">
      <summary>Executes the end create receiver action.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageReceiver" /> object.</returns>
      <param name="result">The result of the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.EndCreateReceiver(System.IAsyncResult)" /> operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.OnEndCreateSender(System.IAsyncResult)">
      <summary>Executes the end create sender action.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> object.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the <see cref="M:Microsoft.ServiceBus.Messaging.QueueClient.CreateSender" />.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueClient.Path">
      <summary>Gets or sets the full path name of the queue.</summary>
      <returns>The queue path relative to the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactory" /> base address.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueClient.PrefetchCount">
      <summary>Gets or sets the number of messages that the queue receiver can simultaneously request.</summary>
      <returns>The number of messages that the queue receiver can simultaneously request.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Receive">
      <summary>Receives a message using the <see cref="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" />.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> that represents the received message. If no message is available to be received, the method returns NULL, and you can retry the operation at a later time.</returns>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the message receive operation times out.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if an I/O or security error occurs.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown if the messaging entity associated with the operation does not exist or it has been deleted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">Thrown if the user code has performed some unexpected operations, or the Service Bus gateway is down. Check the exception message for the actual error.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.Int64)">
      <summary>Receives a message using the <see cref="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" />.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> that represents the received message. If no message is available to be received, the method returns NULL, and you can retry the operation at a later time.</returns>
      <param name="sequenceNumber">The sequence number of the deferred message to receive. </param>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Receive(System.TimeSpan)">
      <summary>Receives a message using the <see cref="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" />.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> that represents the received message. If no message is available to be received, the method returns NULL, and you can retry the operation at a later time.</returns>
      <param name="serverWaitTime">The time span the server waits for receiving a message before it times out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="serverWaitTime" /> is negative.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the message receive operation times out.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if an I/O or security error occurs.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown if the messaging entity associated with the operation does not exist or it has been deleted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingException">Thrown if the user code has performed some unexpected operations, or the Service Bus gateway is down. Check the exception message for the actual error.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueClient.Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Sends a message using the <see cref="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalSender" />.</summary>
      <param name="message">The message to send.</param>
      <exception cref="T:System.TimeoutException">Thrown when operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" /> may need to increase the value of <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if timeout value is relatively low. </exception>
      <exception cref="T:System.ArgumentException">Thrown when the <paramref name="BrokeredMessage" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the  <paramref name="message" /> has already been sent by a QueueClient or <see cref="T:Microsoft.ConnectedServices.Sdk.Client.MessageSender" /> once already.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the topic/subscription pointed to does not support the send operation. That is, Deadletter queue does not support send operations.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.QueueDescription">
      <summary>Represents the metadata description of the queue.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QueueDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.QueueDescription" /> class with the specified relative path.</summary>
      <param name="path">Path of the queue relative to the service namespace base address.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.DefaultMessageTimeToLive">
      <summary>Gets or sets the default message time to live value. This is the duration after which the message expires, starting from when the message is sent to the Service Bus. This is the default value used when <see cref="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive" /> is not set on a message itself.Messages older than their TimeToLive value will expire and no longer be retained in the message store. Subscribers will be unable to receive expired messages.</summary>
      <returns>The default message time to live value.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.DuplicateDetectionHistoryTimeWindow">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> structure that defines the duration of the duplicate detection history. The default value is 10 minutes.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> structure that represents the time windows for duplication detection history.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.EnableBatchedOperations">
      <summary>Gets or sets a value that indicates whether server-side batched operations are enabled.</summary>
      <returns>true if the batched operations are enabled; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.EnableDeadLetteringOnMessageExpiration">
      <summary>Gets or sets a value that indicates whether this queue has dead letter support when a message expires.</summary>
      <returns>true if the queue has a dead letter support when a message expires; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration">
      <summary>Gets or sets the duration of a peek lock; that is, the amount of time that the message is locked for other receivers. The maximum value for <see cref="P:Microsoft.ServiceBus.Messaging.QueueDescription.LockDuration" /> is 5 minutes; the default value is 1 minute.</summary>
      <returns>The duration of the lock.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.MaxDeliveryCount">
      <summary>Gets or sets the maximum delivery count. A message is automatically deadlettered after this number of deliveries.</summary>
      <returns>The number of maximum deliveries.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.MaxSizeInMegabytes">
      <summary>Gets or sets the maximum size in megabytes, which is the size of memory allocated for the queue.</summary>
      <returns>The maximum size of the queue in megabytes.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.MessageCount">
      <summary>Gets the number of messages in the queue.</summary>
      <returns>The number of messages.</returns>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.QueueDescription.MessageTimeToLiveDefaultValue">
      <summary>Specifies the message time to live default value.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.Path">
      <summary>Gets the name of the queue.</summary>
      <returns>The name of the queue.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.RequiresDuplicateDetection">
      <summary>Gets or sets the value indicating if this queue requires duplicate detection.</summary>
      <returns>True if this queue requires duplicate detection; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.RequiresSession">
      <summary>Gets or sets a value that indicates whether the queue supports the concept of session.</summary>
      <returns>true if the receiver application can only receive from the queue through a <see cref="T:Microsoft.ServiceBus.Messaging.SessionReceiver" />; false if a queue cannot receive using <see cref="T:Microsoft.ServiceBus.Messaging.SessionReceiver" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.QueueDescription.SizeInBytes">
      <summary>Gets the size of the queue in bytes.</summary>
      <returns>The size of the queue.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.QuotaExceededException">
      <summary>The exception that is thrown for signaling quota exceeded errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QuotaExceededException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.QuotaExceededException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.QuotaExceededException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.ReceiveMode">
      <summary>Enumerates the values for the receive mode.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.ReceiveMode.PeekLock">
      <summary>Specifies the PeekLock receive mode.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.ReceiveMode.ReceiveAndDelete">
      <summary>Specifies the ReceiveAndDelete receive mode.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.RuleAction">
      <summary>Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleAction.Execute(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Executes the filter action on the supplied BrokeredMessage.</summary>
      <returns>The modified BrokeredMessage after executing the rule action.</returns>
      <param name="message">Input BrokeredMessage.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleAction.Preprocess">
      <summary>Preprocesses the <see cref="T:Microsoft.ServiceBus.Messaging.RuleAction" /> object.</summary>
      <returns>The preprocessed <see cref="T:Microsoft.ServiceBus.Messaging.RuleAction" /> object.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.RuleAction.RequiresPreprocessing">
      <summary>Gets a value that indicates whether the rule action requires preprocessing.</summary>
      <returns>true if the rule action requires preprocessing; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.RuleAction.System#Runtime#Serialization#IExtensibleDataObject#ExtensionData">
      <summary>Gets or sets the object that contains extra data.</summary>
      <returns>The object that contains extra data.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleAction.Validate">
      <summary>Validates the rule action against the grammar.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.RuleActionException">
      <summary>The exception that is thrown for signaling filter action errors and is thrown when a filter related operation fails.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleActionException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.RuleActionException" /> class with the specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleActionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.RuleActionException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.RuleDescription">
      <summary>Represents a description of a rule.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleDescription.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> class with default values.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleDescription.#ctor(Microsoft.ServiceBus.Messaging.Filter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> class with the specified filter expression.</summary>
      <param name="filter">The filter expression used to match messages.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> class with the specified name.</summary>
      <param name="name">The name of the rule.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.RuleDescription.#ctor(System.String,Microsoft.ServiceBus.Messaging.Filter)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.RuleDescription" /> class with the specified name and filter expression.</summary>
      <param name="name">The name of the rule.</param>
      <param name="filter">The filter expression used to match messages.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.RuleDescription.Action">
      <summary>Gets or sets the action to perform if the message satisfies the filtering expression.</summary>
      <returns>The action to perform if the message satisfies the filtering expression.</returns>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.RuleDescription.DefaultRuleName">
      <summary>Specifies the name of the default rule. </summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.RuleDescription.Filter">
      <summary>Gets or sets the filter expression used to match messages.</summary>
      <returns>The filter expression used to match messages.</returns>
      <exception cref="T:System.ArgumentNullException">null (Nothing in Visual Basic) is assigned.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.RuleDescription.Name">
      <summary>Gets or sets the name of the rule.</summary>
      <returns>Returns a<see cref="T:System.String" /> Representing the name of the rule.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.ServerBusyException">
      <summary>The exception that is thrown when a server is overloaded with logical operations.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.ServerBusyException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.ServerBusyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.ServerBusyException" /> class with a specified error message and a reference to the inner exception.</summary>
      <param name="message">The error message that describes the cause of the exception.</param>
      <param name="innerException">The inner exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.SessionCannotBeLockedException">
      <summary>The exception that is thrown when a message cannot acquire lock on a session.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SessionCannotBeLockedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.SessionCannotBeLockedException" /> class with a specified error message.</summary>
      <param name="message">The error message that describes the cause of the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SessionCannotBeLockedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.SessionCannotBeLockedException" /> class with a specified error message and a reference to the inner.</summary>
      <param name="message">The error message that describes the cause of the exception.</param>
      <param name="innerException">The inner exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.SessionLockLostException">
      <summary>The exception that is thrown to signal session lock lost errors.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SessionLockLostException.#ctor(System.String)">
      <summary>Initializes a new instance of the SessionLockLostException class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SessionLockLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the SessionLockLostException class  with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.SqlFilter">
      <summary>Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlFilter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.SqlFilter" /> class using the specified SQL expression.</summary>
      <param name="sqlExpression">The SQL expression.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SqlFilter.CompatibilityLevel">
      <summary>This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.</summary>
      <returns>The compatibility level.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlFilter.Match(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Specifies whether a message matches against the current SQL expression.</summary>
      <returns>truea message matches against the current SQL expression; otherwise, false.</returns>
      <param name="message">The BrokeredMessage.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlFilter.Preprocess">
      <summary>Gets the preprocessed filter expression.</summary>
      <returns>The preprocessed filter expression.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SqlFilter.RequiresPreprocessing">
      <summary>Gets a value indicating whether the SQL filter expression requires preprocessing.</summary>
      <returns>true if the SQL filter expression requires preprocessing; otherwise, false. Currently always returns true.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SqlFilter.SqlExpression">
      <summary>Gets the SQL expression.</summary>
      <returns>The SQL expression.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlFilter.Validate">
      <summary>Validates the SQL expression.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.SqlRuleAction">
      <summary>Represents set of actions written in SQL language-based syntax that is performed against a <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlRuleAction.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.SqlRuleAction" /> class with the specified SQL expression.</summary>
      <param name="sqlExpression">The SQL expression.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlRuleAction.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.SqlRuleAction" /> class with the specified SQL expression and compatibility level.</summary>
      <param name="sqlExpression">The SQL expression.</param>
      <param name="compatibilityLevel">Reserved for future use. An integer value showing compatibility level. Currently hard-coded to 20.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SqlRuleAction.CompatibilityLevel">
      <summary>This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlRuleAction.Execute(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Executes the <see cref="T:Microsoft.ServiceBus.Messaging.SqlRuleAction" /> object.</summary>
      <returns>The processed <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />.</returns>
      <param name="message">The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> to which the <see cref="T:Microsoft.ServiceBus.Messaging.SqlRuleAction" /> will be applied.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when the operation is not valid for the current state.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlRuleAction.Preprocess">
      <summary>Gets the pre-processed <see cref="T:Microsoft.ServiceBus.Messaging.RuleAction" /> expression.</summary>
      <returns>The preprocessed <see cref="T:Microsoft.ServiceBus.Messaging.RuleAction" /> expression.</returns>
      <exception cref="T:Microsoft.ServiceBus.Messaging.RuleActionException">Thrown when the rule action statement is invalid or exceeds maximum allowed number of actions.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SqlRuleAction.RequiresPreprocessing">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.ServiceBus.Messaging.SqlRuleAction" /> requires preprocessing.</summary>
      <returns>true if the SQL rule action requires preprocessing; otherwise, false. Currently always returns true.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SqlRuleAction.SqlExpression">
      <summary>Gets the SQL expression.</summary>
      <returns>The SQL expression.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SqlRuleAction.Validate">
      <summary>Validates the SQL expression against the SQL 92 syntax and rules.</summary>
      <exception cref="T:Microsoft.ServiceBus.Messaging.RuleActionException">Thrown when the rule action statement is invalid or exceeds maximum allowed number of actions.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.SubscriptionClient">
      <summary>The anchor class used in run-time operations related to a topic subscription.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Abandon(System.Guid)">
      <summary>Discards the message and relinquishes the message lock ownership.</summary>
      <param name="lockToken">The lock token bound to the locked message instance to abandon.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession">
      <summary>Accepts a message session that allows grouping of related messages for processing in a single transaction.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String)">
      <summary>Accepts a message session that allows grouping of related messages for processing in a single transaction using the given session identifier.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <exception cref="T:System.ArgumentException">Thrown if sessionId is null, empty, or white spaces.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.String,System.TimeSpan)">
      <summary>Accepts a message session that allows grouping of related messages for processing in a single transaction using the given session identifier and wait time.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <exception cref="T:System.ArgumentException">Thrown if sessionId is null, empty, or white spaces.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if serverWaitTime is not a positive TimeSpan value.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="serverWaitTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AcceptMessageSession(System.TimeSpan)">
      <summary>Accepts a message session that allows grouping of related messages for processing in a single transaction using the specified server wait time.</summary>
      <returns>A <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if serverWaitTime is not a positive TimeSpan value.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="serverWaitTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(Microsoft.ServiceBus.Messaging.RuleDescription)">
      <summary>Adds a new rule to the <see cref="T:Microsoft.ServiceBus.Messaging.Subscription" /> using the specified rule description.</summary>
      <param name="description">The rule description that provides metadata of the rule to add.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="description" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="description.Name" /> is null, white space empty or not in the right format.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="description.Name" /> length has exceeded the limit of 50 characters.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">Thrown if the rule with the same name as <paramref name="description.Name" /> already existed for this subscription. </exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule(System.String,Microsoft.ServiceBus.Messaging.Filter)">
      <summary>Adds a rule to the current subscription with the specified name and filter expression.</summary>
      <param name="ruleName">The name of the rule to add</param>
      <param name="filter">The filter expression against which messages will be matched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="ruleName" /> is null, white space empty or not in the right format.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="ruleName" /> length has exceeded the limit of 50 characters.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">Thrown if the rule with the same name as <paramref name="ruleName" /> already existed for this subscription.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginAbandon(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to abandon the message and relinquish its lock.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to abandon the message and relinquish its lock.</returns>
      <param name="lockToken">The lock token bound to the locked message instance to abandon.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginAcceptMessageSession(System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to accept a message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /></exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginAcceptMessageSession(System.String,System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to accept a message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentException">Thrown if sessionId is null, empty, or white spaces.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginAcceptMessageSession(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to accept a message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentException">Thrown if sessionId is null, empty, or white spaces. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if serverWaitTime is not a positive TimeSpan value.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <paramref name="serverWaitTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginAcceptMessageSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begin an asynchronous operation to accept a message session.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if serverWaitTime is not a positive TimeSpan value.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="serverWaitTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client is already closed, aborted, or disposed.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to add a new rule to the subscription.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to add a new rule to the subscription.</returns>
      <param name="description">The rule description that provides metadata of the rule to add.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="description" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="description.Name" /> is null, white space empty or not in the right format.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="description.Name" /> length has exceeded the limit of 50 characters.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">Thrown if the rule with the same name as <paramref name="description.Name" /> already existed for this subscription.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginAddRule(System.String,Microsoft.ServiceBus.Messaging.Filter,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to add a new rule to the subscription.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to add a new rule to the subscription.</returns>
      <param name="ruleName">The name of the rule to add.</param>
      <param name="filter">The filter expression against which messages will be matched.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="filter" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="ruleName" /> is null, white space empty or not in the right format.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="ruleName" /> length has exceeded the limit of 50 characters.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityAlreadyExistsException">Thrown if the rule with the same name as <paramref name="ruleName" /> already existed for this subscription.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginComplete(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to complete processing of a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to complete processing of a message.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set b y <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted. </exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginDeadLetter(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to move a message to the dead letter queue.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move a message to the dead letter queue.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginDeadLetter(System.Guid,System.String,System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to move a message to the dead letter queue.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to move a message to the dead letter queue.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginDefer(System.Guid,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to suspend processing of a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to suspend processing of a message.</returns>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginReceive(System.Int64,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="sequenceNumber">The unique number assigned to a message by the Service Bus.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to receive a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to receive a message.</returns>
      <param name="serverWaitTime">The time span the server waits for processing messages before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="serverWaitTime" /> is negative.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.BeginRemoveRule(System.String,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous remove rule action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)" />.</returns>
      <param name="ruleName">The name of the rule.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndRemoveRule(System.IAsyncResult)" /> delegate when the operation is complete.</param>
      <exception cref="MessagingEntityNotFoundException">Thrown when rule does not exist.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="description.Name" /> is null, white space empty or not in the right format.</exception>
      <exception cref="T:System.TimeoutException">ThrowN if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Complete(System.Guid)">
      <summary>Completes processing of a message.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String,System.String)">
      <summary>Creates a new copy of <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionClient" /> with specified name and topic path.</summary>
      <returns>A new copy of <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionClient" />.</returns>
      <param name="topicPath">The full pathname of the topic.</param>
      <param name="name">The name of the subscription.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Create(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Creates a new copy of <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionClient" /> with specified name, topic path and mode.</summary>
      <returns>A new copy of <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionClient" />.</returns>
      <param name="topicPath">The full pathname of the topic.</param>
      <param name="name">The name of the subscription.</param>
      <param name="mode">The message receive mode.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String,System.String,System.String)">
      <summary>Creates a new copy of <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionClient" /> from a connection string with specified topic path and name.</summary>
      <returns>A new copy of <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionClient" />.</returns>
      <param name="connectionString">The connection string.</param>
      <param name="topicPath">The full pathname of the topic.</param>
      <param name="name">The name of the subscription.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateFromConnectionString(System.String,System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)">
      <summary>Creates a new copy of <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionClient" /> from a connection string with specified topic path, name and mode.</summary>
      <returns>A new copy of <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionClient" />.</returns>
      <param name="connectionString">The connection string.</param>
      <param name="topicPath">The full pathname of the topic.</param>
      <param name="name">The name of the subscription.</param>
      <param name="mode">The message receive mode.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid)">
      <summary>Moves the undelivered message to the dead letter queue.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.DeadLetter(System.Guid,System.String,System.String)">
      <summary>Moves the undelivered message to the dead letter queue.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <param name="deadLetterReason">The reason for deadlettering the message.</param>
      <param name="deadLetterErrorDescription">The error description for deadlettering the message.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Defer(System.Guid)">
      <summary>Suspends the processing of a message.</summary>
      <param name="lockToken">The lock token bound to the locked message instance.</param>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set by <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessageLockLostException">Thrown if the message represented by <paramref name="lockToken" /> has lost the message lock.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndAbandon(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to abandon the message and relinquish its lock.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous abandon message operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndAcceptMessageSession(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to accept a message session that allows grouping of related messages for processing in a single transaction.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous accept message session operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndAddRule(System.IAsyncResult)">
      <summary>Ends an asynchronous add rule operation.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:Microsoft.ServiceBus.Messaging.SubscriptionClient.AddRule" />.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndComplete(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to complete processing of a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous complete message processing operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndDeadLetter(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to move message to the dead letter queue.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation to move message to the dead letter queue.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndDefer(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to suspend processing of a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation to suspend processing of a message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndReceive(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to receive a message.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />  that represents the received message.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation to receive a message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndRemoveRule(System.IAsyncResult)">
      <summary>Ends an asynchronous remove rule operation.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)" />.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatDeadLetterPath(System.String,System.String)">
      <summary>Builds a format name deadletter path using the specified topic path and subscription name.</summary>
      <returns>The <see cref="T:System.String" /> resulted from building the format name deadletter path using the specified topic path and subscription name.</returns>
      <param name="topicPath">The full pathname of the topic.</param>
      <param name="subscriptionName">The name of the subscription.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.FormatSubscriptionPath(System.String,System.String)">
      <summary>Builds a format name subscription path using the specified topic path and subscription name.</summary>
      <returns>The <see cref="T:System.String" /> resulted from building the format name subscription path using the specified topic path and subscription name.</returns>
      <param name="topicPath">The full pathname of the topic.</param>
      <param name="subscriptionName">The name of the subscription.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionClient.InternalReceiver">
      <summary>Gets or sets the message receiver for the subscription.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageReceiver" /> for the subscription.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionClient.IsSubQueue">
      <summary>Gets or sets a value that indicates whether the message receiver is created from a subqueue.</summary>
      <returns>true if the message receiver is created from a subqueue; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionClient.MessagingFactory">
      <summary>Gets the messaging factory used to create this subscription client.</summary>
      <returns>The messaging factory used to create this subscription client.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionClient.Mode">
      <summary>Gets the message receive mode when processing the received message. </summary>
      <returns>The message <see cref="T:Microsoft.ServiceBus.Messaging.ReceiveMode" />  when processing the received message.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionClient.Name">
      <summary>Gets the name of the subscription.</summary>
      <returns>The name of the subscription.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnAbort">
      <summary>Executes the abort action.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAcceptMessageSession(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the BeginAcceptMessageSession operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to accept a message session.</returns>
      <param name="sessionId">The session identifier of the message session.</param>
      <param name="receiveMode">The receive mode when processing with the receive messages.</param>
      <param name="timeout">The time span the server waits for processing messages before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes upon calling the BeginAddRule operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to add a new rule to the subscription.</returns>
      <param name="description">The rule description that provides metadata of the rule to add.</param>
      <param name="timeout">The time span this operation waits before it times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin close action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" />that references the asynchronous BeginClose.</returns>
      <param name="timeout">The wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the BeginClose delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create receiver action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateReceiver(Microsoft.ServiceBus.Messaging.ReceiveMode)" />.</returns>
      <param name="receiveMode">The message <see cref="T:Microsoft.ServiceBus.Messaging.ReceiveMode" />.</param>
      <param name="timeout">The wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndCreateReceiver(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginCreateReceiver(System.String,System.String,Microsoft.ServiceBus.Messaging.ReceiveMode,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create receiver action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.CreateReceiver(System.String,Microsoft.ServiceBus.Messaging.ReceiveMode)" />. </returns>
      <param name="subQueuePath">The path of the subqueue.</param>
      <param name="subQueueName">The name of the subqueue.</param>
      <param name="receiveMode">The message <see cref="T:Microsoft.ServiceBus.Messaging.ReceiveMode" />.</param>
      <param name="timeout">The wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndCreateReceiver(System.IAsyncResult)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Begins removing a <see cref="T:Microsoft.ServiceBus.Messaging.Rule" /> from a <see cref="T:Microsoft.ServiceBus.Messaging.Subscription" /> through the run-time client protocol.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)" />.</returns>
      <param name="ruleName">The name of the rule to remove.</param>
      <param name="timeout">The wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)" /> delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnClose(System.TimeSpan)">
      <summary>Executes the close action.</summary>
      <param name="timeout">The wait time before the operation times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAcceptMessageSession(System.IAsyncResult)">
      <summary>Executes upon calling the EndAcceptMessageSession operation.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageSession" /> that allows grouping of related messages for processing in a single transaction.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous accept message session operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndAddRule(System.IAsyncResult)">
      <summary>Ends the asynchronous call to <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(System.String,Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)" />.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> from a <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginAddRule(System.String,Microsoft.ServiceBus.Messaging.RuleDescription,System.TimeSpan,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndClose(System.IAsyncResult)">
      <summary>Executes the end close action.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" />that references the asynchronous BeginClose.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndCreateReceiver(System.IAsyncResult)">
      <summary>Executes the end create receiver action.</summary>
      <returns>A newly-created <see cref="T:Microsoft.ServiceBus.Messaging.MessageReceiver" /> object.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> object that references the <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.EndCreateReceiver(System.IAsyncResult)" />.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnEndRemoveRule(System.IAsyncResult)">
      <summary>Ends the asynchronous call to <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)" />.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> from a <see cref="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.OnBeginRemoveRule(System.String,System.TimeSpan,System.AsyncCallback,System.Object)" />.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionClient.PrefetchCount">
      <summary>Gets or sets the number of messages that the message receiver can simultaneously request.</summary>
      <returns>The number of messages that the message receiver can simultaneously request.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive">
      <summary>Receives a message using the <see cref="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" />.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />  that represents the received message.</returns>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown when the subscription does not exist.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if there is an authentication error.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.Int64)">
      <summary>Receives a message using the <see cref="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" />.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />  that represents the received message.</returns>
      <param name="sequenceNumber">The sequence number of the deferred message to receive.</param>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.Receive(System.TimeSpan)">
      <summary>Receives a message using the <see cref="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalReceiver" />.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" />  that represents the received message.</returns>
      <param name="serverWaitTime">The time span the server waits for receiving a message before it times out.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="serverWaitTime" /> is negative.</exception>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown when the subscription does not exist.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Thrown if there is an authentication error.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionClient.RemoveRule(System.String)">
      <summary>Removes the rule described by <paramref name="ruleName" />.</summary>
      <param name="ruleName">The name of the rule.</param>
      <exception cref="T:Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException">Thrown when rule does not exist.</exception>
      <exception cref="T:System.ArgumentException">Thrown if <paramref name="description.Name" /> is null, white space empty or not in the right format.</exception>
      <exception cref="T:System.TimeoutException">Thrown if the operation exceeded the timeout value set via <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionClient.TopicPath">
      <summary>Gets the full pathname of the topic.</summary>
      <returns>The full pathname of the topic.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription">
      <summary>Represents a description of the subscription.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.SubscriptionDescription.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.SubscriptionDescription" /> class.</summary>
      <param name="topicPath">The topic path.</param>
      <param name="subscriptionName">The subscription name.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.DefaultMessageTimeToLive">
      <summary>Gets or sets the default message time to live value. This is the duration after which the message expires, starting from when the message is sent to the Service Bus. This is the default value used when <see cref="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive" /> is not set on a message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store. Subscribers will be unable to receive expired messages.</summary>
      <returns>The default message time to live for a subscription.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.EnableBatchedOperations">
      <summary>Gets or sets a value that indicates whether the batched operations are enabled.</summary>
      <returns>true if the batched operations are enabled; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.EnableDeadLetteringOnFilterEvaluationExceptions">
      <summary>Gets or sets the value that indicates if a subscription has dead letter support on Filter evaluation exceptions.</summary>
      <returns>true if a subscription has dead letter support on Filter evaluation exceptions; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.EnableDeadLetteringOnMessageExpiration">
      <summary>Gets or sets the value that indicates if a subscription has dead letter support when a message expires.</summary>
      <returns>true if a subscription has dead letter support when a message expires; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.LockDuration">
      <summary>Gets or sets the lock duration time span for the subscription.</summary>
      <returns>The lock duration time span for the subscription.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.MaxDeliveryCount">
      <summary>Gets or sets the number of maximum deliveries.</summary>
      <returns>The number of maximum deliveries.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.MessageCount">
      <summary>Gets the number of messages.</summary>
      <returns>The number of messages.</returns>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.SubscriptionDescription.MessageTimeToLiveDefaultValue">
      <summary>Specifies the message time to live default value.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.Name">
      <summary>Gets the name of the subscription description.</summary>
      <returns>The name of the subscription description.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.RequiresSession">
      <summary>Gets or sets the value indicating if a subscription supports the concept of session.</summary>
      <returns>true if the receiver application can only receive from the queue through a <see cref="T:Microsoft.ServiceBus.Messaging.SessionReceiver" />; false if a queue cannot receive using <see cref="T:Microsoft.ServiceBus.Messaging.SessionReceiver" />.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.SubscriptionDescription.TopicPath">
      <summary>Gets the path of the topic that this subscription description belongs to.</summary>
      <returns>The path of the topic that this subscription description belongs to.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.TopicClient">
      <summary>An anchor class used to access a <see cref="T:Microsoft.ServiceBus.Messaging.Topic" /> to perform run-time operations.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.BeginSend(Microsoft.ServiceBus.Messaging.BrokeredMessage,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to send a message.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to send a message.</returns>
      <param name="message">The message to send.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains state information about the asynchronous operation. </param>
      <exception cref="T:System.TimeoutException">Thrown when operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings" />. Youmay need to increase the value of <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if timeout valueis relatively low.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the BrokeredMessage is null.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="message" /> has already been sent by a <see cref="T:Microsoft.ServiceBus.Messaging.TopicClient" /> or <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> once already.</exception>
      <exception cref="T:System.NotSupportedException">Thrown if the Deadletter topic/subscription pointed to does not support the send operation.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.Create(System.String)">
      <summary>Creates a new instance of <see cref="T:Microsoft.ServiceBus.Messaging.TopicClient" />.</summary>
      <returns>The created <see cref="T:Microsoft.ServiceBus.Messaging.TopicClient" />.</returns>
      <param name="path">The path.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.CreateFromConnectionString(System.String,System.String)">
      <summary>Creates a new instance of <see cref="T:Microsoft.ServiceBus.Messaging.TopicClient" />using a specified connection string.</summary>
      <returns>The created <see cref="T:Microsoft.ServiceBus.Messaging.TopicClient" />.</returns>
      <param name="connectionString">The connection string used.</param>
      <param name="path">The path.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.EndSend(System.IAsyncResult)">
      <summary>Finishes an asynchronous operation to send a message.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that represents the status of the asynchronous operation to send a message.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicClient.InternalSender">
      <summary>Gets or sets the message sender for the topic.</summary>
      <returns>The <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> for the topic.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicClient.IsSubQueue">
      <summary>Gets or sets a value that indicates whether the message receiver is created from a subqueue.</summary>
      <returns>true if the message receiver is created from a subqueue; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicClient.MessagingFactory">
      <summary>Gets or sets the messaging factory that was used in creating this <see cref="T:Microsoft.ServiceBus.Messaging.TopicClient" /> object.</summary>
      <returns>The messaging factory that was used in creating this <see cref="T:Microsoft.ServiceBus.Messaging.TopicClient" /> object.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.OnAbort">
      <summary>Executes the abort action.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin close action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous Close operation.</returns>
      <param name="timeout">The wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndClose delegate when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.OnBeginCreateSender(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>Executes the begin create sender action.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.TopicClient.CreateSender" />.</returns>
      <param name="timeout">The wait time before the operation times out.</param>
      <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the <see cref="M:Microsoft.ServiceBus.Messaging.TopicClient.EndCreateSender(System.IAsyncResult)" /> when the operation is complete.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.OnClose(System.TimeSpan)">
      <summary>Executes the close action.</summary>
      <param name="timeout">The wait time before the operation times out.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.OnEndClose(System.IAsyncResult)">
      <summary>Executes the end close action.</summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous Close operation.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.OnEndCreateSender(System.IAsyncResult)">
      <summary>Executes the end create sender action.</summary>
      <returns>The newly created <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> object.</returns>
      <param name="result">An <see cref="T:System.IAsyncResult" /> that references the asynchronous <see cref="M:Microsoft.ServiceBus.Messaging.TopicClient.CreateSender" />.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicClient.Path">
      <summary>Gets or sets the full pathname of the file.</summary>
      <returns>The full pathname of the file.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicClient.Send(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Sends a message using the <see cref="P:Microsoft.ServiceBus.Messaging.QueueClient.InternalSender" />.</summary>
      <param name="message">The message to send.</param>
      <exception cref="T:System.TimeoutException">Thrown when operation times out. Timeout period is initialized through the <see cref="T:Microsoft.ServiceBus.Messaging.MessagingFactorySettings.OperationTimeout" /> to avoid this exception if timeout value is relatively low.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the <see cref="T:Microsoft.ServiceBus.Messaging.BrokeredMessage" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="message" /> has already been sent by a <see cref="T:Microsoft.ServiceBus.Messaging.TopicClient" /> or <see cref="T:Microsoft.ServiceBus.Messaging.MessageSender" /> once already.</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown if the client entity has been closed or aborted.</exception>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.TopicDescription">
      <summary>Represents a description of the topic.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TopicDescription.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.TopicDescription" /> class with the specified relative path.</summary>
      <param name="path">Path of the topic relative to the service namespace base address.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicDescription.DefaultMessageTimeToLive">
      <summary>Gets or sets the default message time to live value for a topic. This is the duration after which the message expires, starting from when the message is sent to the Service Bus. This is the default value used when <see cref="P:Microsoft.ServiceBus.Messaging.BrokeredMessage.TimeToLive" /> is not set on a message itself.Messages older than their TimeToLive value will expire and no longer be retained in the message store. Subscribers will be unable to receive expired messages.</summary>
      <returns>The default message time to live for a topic.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicDescription.DuplicateDetectionHistoryTimeWindow">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> structure that defines the duration of the duplicate detection history.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> structure that defines the duration of the duplicate detection history.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicDescription.EnableBatchedOperations">
      <summary>Gets or sets a value that indicates whether server-side batched operations are enabled.</summary>
      <returns>true if the batched operations are enabled; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicDescription.MaxSizeInMegabytes">
      <summary>Gets or sets the maximum size in megabytes, which is the size of memory allocated for the topic.</summary>
      <returns>The maximum size in megabytes.</returns>
    </member>
    <member name="F:Microsoft.ServiceBus.Messaging.TopicDescription.MessageTimeToLiveDefaultValue">
      <summary>Specifies the message time to live default value.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicDescription.Path">
      <summary>Gets the path of the topic.</summary>
      <returns>The path of the topic.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicDescription.RequiresDuplicateDetection">
      <summary>Gets or sets the value that indicates whether a topic requires duplication detection.</summary>
      <returns>True if a topic requires duplication detection; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TopicDescription.SizeInBytes">
      <summary>Gets the size of the topic in bytes.</summary>
      <returns>The size in bytes.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.TrueFilter">
      <summary>Matches a filter expression.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TrueFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.TrueFilter" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TrueFilter.Match(Microsoft.ServiceBus.Messaging.BrokeredMessage)">
      <summary>Matches a message against the current SQL expression.</summary>
      <returns>true if it matches; otherwise, false.</returns>
      <param name="message">The brokered message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TrueFilter.Preprocess">
      <summary>Gets the preprocessed filter expression.</summary>
      <returns>The preprocessed filter expression.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.TrueFilter.RequiresPreprocessing">
      <summary>Gets a value indicating whether the SQL filter expression requires preprocessing.</summary>
      <returns>true if the SQL filter expression requires preprocessing; otherwise, false. Currently always returnstrue.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.TrueFilter.Validate">
      <summary>Validates the SQL expression.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingCollectionElement">
      <summary>Represents a configuration element that contains sub-elements that specify settings for using the <see cref="T:Microsoft.ServiceBus.Messaging.NetMessagingBinding" /> binding.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingCollectionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingCollectionElement" /> class.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingExtensionElement">
      <summary>Represents an XML element that specifies a configuration of <see cref="T:Microsoft.ServiceBus.Messaging.NetMessagingBinding" />.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingExtensionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingExtensionElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingExtensionElement.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingExtensionElement" /> class using the specified name.</summary>
      <param name="name">The name.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingExtensionElement.PrefetchCount">
      <summary>Gets or sets the number of prefetch.</summary>
      <returns>The number of prefetch.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingExtensionElement.SessionIdleTimeout">
      <summary>Gets or sets the SessionIdleTimeout.</summary>
      <returns>If an IInputSessionChannel.TryReceive operation doesn’t receive any message within this TimeSpan then the channel will indicate end of session.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingBindingExtensionElement.TransportSettings">
      <summary>Gets or sets the transport settings element for the net messaging.</summary>
      <returns>The transport settings element for the net messaging.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement">
      <summary>Represents the net messaging transport extension element.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement" /> class.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
      <summary>Applies the settings of the specified <see cref="T:System.ServiceModel.Channels.BindingElement" /> to this configuration element.</summary>
      <param name="bindingElement">The <see cref="T:System.ServiceModel.Channels.BindingElement" /> to this configuration element.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement.BindingElementType">
      <summary>Gets the type of binding element being used.</summary>
      <returns>The type of binding element being used.</returns>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement.CopyFrom(System.ServiceModel.Configuration.ServiceModelExtensionElement)">
      <summary>Copies the settings from the specified configuration element to this configuration element.</summary>
      <param name="from">The configuration element whose settings are to be copied to this configuration element.</param>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement.PrefetchCount">
      <summary>Gets or sets the number of prefetch.</summary>
      <returns>The number of prefetch.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement.SessionIdleTimeout">
      <summary>Gets or sets the SessionIdleTimeout.</summary>
      <returns>If an IInputSessionChannel.TryReceive operation doesn’t receive any message within this TimeSpan then the channel will indicate end of session.</returns>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportExtensionElement.TransportSettings">
      <summary>Gets or sets the transport settings element for the net messaging.</summary>
      <returns>The transport settings element for the net messaging.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportSettingsElement">
      <summary>Represents the transport settings element for the net messaging.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportSettingsElement.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportSettingsElement" /> class.</summary>
    </member>
    <member name="P:Microsoft.ServiceBus.Messaging.Configuration.NetMessagingTransportSettingsElement.BatchFlushInterval">
      <summary>Gets or sets the batch flush interval.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> that represents the batch flush interval.</returns>
    </member>
    <member name="T:Microsoft.ServiceBus.Tracing.TrackingContext">
      <summary>Provides contextual properties for tracking changes in the messaging entities.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.Tracing.TrackingContext.HeaderNamespace">
      <summary>Specifies the header namespace.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.Tracing.TrackingContext.SystemTrackerName">
      <summary>Specifies the name of system tracker.</summary>
    </member>
    <member name="F:Microsoft.ServiceBus.Tracing.TrackingContext.TrackingIdName">
      <summary>Specifies the attribute name for the tracking identifier in the returned token response.</summary>
    </member>
    <member name="T:Microsoft.ServiceBus.Web.StreamMessageHelper">
      <summary>Helper class for creating a Message object from streaming content.</summary>
    </member>
    <member name="M:Microsoft.ServiceBus.Web.StreamMessageHelper.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,Microsoft.ServiceBus.Web.StreamWriterDelegate)">
      <summary>Creates a message from a stream, using the specified version, action, and delegate.</summary>
      <returns>Returns a stream-created <see cref="T:System.ServiceModel.Channels.Message" />.</returns>
      <param name="version">Specifies the Addressing and Envelope versions to use for the newly created message. If the request is made using REST, the Addressing and Envelope version are None.</param>
      <param name="action">A description of how the message should be processed. For Messages sent in response to a HTTP request, this value must be “GETRESPONSE”.</param>
      <param name="writer">A delegate that allows <see cref="Overload:Microsoft.ServiceBus.Web.StreamMessageHelper.CreateMessage" /> to callback and ask for a Stream to populate the body of the Message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Web.StreamMessageHelper.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.IO.Stream)">
      <summary>Creates a message, using the specified version, action, and stream.</summary>
      <returns>Returns a stream-created <see cref="T:System.ServiceModel.Channels.Message" />.</returns>
      <param name="version">Specifies the Addressing and Envelope versions to use for the newly created message. If the request is made using REST, the Addressing and Envelope version are None.</param>
      <param name="action">A description of how the message should be processed. For Messages sent in response to a HTTP request, this value must be “GETRESPONSE”.</param>
      <param name="stream">A stream that contains content used to write the body of the new message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Web.StreamMessageHelper.GetStream(System.ServiceModel.Channels.Message)">
      <summary>Retrieves the stream of the specified message.</summary>
      <returns>Returns a <see cref="T:System.IO.Stream" /> that contains the stream of the message. A Stream is always returned regardless of whether the Message body is empty.</returns>
      <param name="message">The message.</param>
    </member>
    <member name="M:Microsoft.ServiceBus.Web.StreamMessageHelper.GetStream(System.Xml.XmlDictionaryReader)">
      <summary>Retrieves the stream of the specified message with specified reader.</summary>
      <returns>The stream of the specified message.</returns>
      <param name="reader">The reader.</param>
    </member>
    <member name="T:Microsoft.ServiceBus.Web.StreamWriterDelegate">
      <summary>This delegate is used by StreamMessageHelper to write the body of streamed messages.</summary>
      <param name="output">The stream to write the message body to.</param>
    </member>
  </members>
</doc>
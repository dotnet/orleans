<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IdentityModel.Tokens.Jwt</name>
    </assembly>
    <members>
        <member name="M:System.IdentityModel.Tokens.Base64UrlEncoder.Encode(System.String)">
            <summary>
            The following functions perform base64url encoding which differs from regular base64 encoding as follows
            * padding is skipped so the pad character '=' doesn't have to be percent encoded
            * the 62nd and 63rd regular base64 encoding characters ('+' and '/') are replace with ('-' and '_')
            The changes make the encoding alphabet file and URL safe.
            </summary>
            <param name="arg">string to encode.</param>
            <returns>Base64Url encoding of the UTF8 bytes.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Base64UrlEncoder.Encode(System.Byte[])">
            <summary>
            See above.
            </summary>
            <param name="arg">bytes to encode.</param>
            <returns>Base64Url encoding of the bytes.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Base64UrlEncoder.DecodeBytes(System.String)">
            <summary>
            Returns the decoded bytes.
            </summary>
            <param name="str">base64Url encoded string.</param>
            <returns>UTF8 bytes.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Base64UrlEncoder.Decode(System.String)">
            <summary>
            Decodes the string from Base64UrlEncoded to UTF8.
            </summary>
            <param name="arg">string to decode.</param>
            <returns>UTF8 string.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.DateTimeUtil.Add(System.DateTime,System.TimeSpan)">
            <summary>
            Add a DateTime and a TimeSpan.
            The maximum time is DateTime.MaxTime.  It is not an error if time + timespan &gt; MaxTime.
            Just return MaxTime.
            </summary>
            <param name="time">Initial <see cref="T:System.DateTime"/> value.</param>
            <param name="timespan"><see cref="T:System.TimeSpan"/> to add.</param>
            <returns></returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.DateTimeUtil.IsDateTimeWithinAllowedRange(System.DateTime,System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Checks that an instant in time falls within a valid date range, accounting for clock skew.
            </summary>
            <param name="instant">Instant in time to validate against the date range.</param>
            <param name="startDate">Start date of the date range.</param>
            <param name="endDate">End date of the date range.</param>
            <param name="clockSkew">Clock skew tolerance.</param>
            <returns>true if the instant falls between the date range, false otherwise.</returns>
        </member>
        <member name="T:System.IdentityModel.DiagnosticUtility">
            <summary>
            Provides common code for services to use in generating diagnostics and taking actions.
            </summary>
        </member>
        <member name="M:System.IdentityModel.DiagnosticUtility.Assert(System.Boolean,System.String)">
            <summary>
            Provides a basic assertion facility to output stack trace details to trace, and in a debug build
            to additionally print a message to the console and invoke <see cref="M:System.Environment.FailFast(System.String)"/>.
            </summary>
        </member>
        <member name="M:System.IdentityModel.DiagnosticUtility.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Provides a basic assertion facility to output stack trace details to trace, and in a debug build
            to additionally print a message to the console and invoke <see cref="M:System.Environment.FailFast(System.String)"/>.
            </summary>
        </member>
        <member name="M:System.IdentityModel.DiagnosticUtility.IsFatal(System.Exception)">
             <summary>
             Returns true if the provided exception matches any of a list of hard system faults that should be allowed
             through to outer exception handlers.
             </summary>
             <remarks>
             <para>Typically this method is used when there is a need to catch all exceptions, but to ensure that .NET runtime
             and execution engine exceptions are not absorbed by the catch block. Use of this method also avoids FxCop
             warnings about not using general catch blocks.</para>
            
             <para>Please note that use of this method is expensive because of the amount of reflection it performs.
             If you can refactor your code to catch more specific exceptions than Exception to avoid using this method,
             you should.</para>
            
             <para>Example of use:</para>
            
             <code>
             try
             {
                 // Code needing a full Exception catch block
             }
             catch (Exception ex)
             {
                 if (DiagnosticUtility.IsFatal(ex))
                 {
                     throw;
                 }
                 // Perform any needed logging and handling for absorbed exception.
             }
             </code>
             </remarks>
        </member>
        <member name="M:System.IdentityModel.DiagnosticUtility.FailFast(System.String)">
            <summary>
            Prints the message to the console, then executes <see cref="M:System.Environment.FailFast(System.String)"/>.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.EpochTime">
            <summary>
            Returns the absolute DateTime or the Seconds since Unix Epoch, where Epoch is UTC 1970-01-01T0:0:0Z.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.EpochTime.GetIntDate(System.DateTime)">
            <summary>
            Per JWT spec:
            Gets the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the desired date/time.
            </summary>
            <remarks>if dateTimeUtc less than UnixEpoch, return 0</remarks>
        </member>
        <member name="T:System.IdentityModel.WifExtensionsErrors">
            <summary>
            Errors return from WIF extensions.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.WSSecurity10Constants">
            <summary>
            Defines constants needed from WS-Security 1.0.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.WSSecurityUtilityConstants">
            <summary>
            Defines constants needed from WS-SecureUtility standard schema.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Utility.SerializeAsSingleCommaDelimitedString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Serializes the list of strings into string as follows:
            'str1','str2','str3'
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.X509CertificateValidatorEx">
            <summary>
            This class also resets the _chainPolicy.VerificationTime = DateTime.Now each time a certificate is validated otherwise certificates created after the validator is created will not chain.
            </summary>
        </member>
        <member name="M:System.IdentityModel.XmlUtil.GetXmlElements(System.Xml.XmlNodeList)">
            <summary>
            List containing only those XmlNodes that were XmlElements.
            </summary>
            <param name="nodeList">nodes to parse</param>
            <returns>List containing only those XmlNodes that were XmlElements</returns>
            <remarks>A null list will return an empty List</remarks>
        </member>
        <member name="T:System.IdentityModel.Tokens.AsymmetricSignatureProvider">
            <summary>
            Provides signing and verifying operations when working with an <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.SignatureProvider">
            <summary>
            This class defines the object model for types that provide signature services.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.SignatureProvider.Dispose(System.Boolean)">
            <summary>
            Can be over written in descendants to dispose of internal components.
            </summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer</param>     
        </member>
        <member name="M:System.IdentityModel.Tokens.SignatureProvider.Sign(System.Byte[])">
            <summary>
            Produces a signature over the 'input'
            </summary>
            <param name="input">bytes to sign.</param>
            <returns>signed bytes</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.SignatureProvider.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies that a signature created over the 'input' matches the signature.
            </summary>
            <param name="input">bytes to verify.</param>
            <param name="signature">signature to compare against.</param>
            <returns>true if the computed signature matches the signature parameter, false otherwise.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.SignatureProvider.Dispose">
            <summary>
            Implement in derived derived class for resource cleanup.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.SignatureProvider.Context">
            <summary>
            Gets or sets a user context for a <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/>.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.#ctor(System.IdentityModel.Tokens.AsymmetricSecurityKey,System.String,System.Boolean)">
            <summary>
            Creates an instance of a signature provider that uses a <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/> to create and verify signatures.
            </summary>
            <param name="key">The <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/> that will be used for cryptographic operations.</param>
            <param name="algorithm">The signature algorithm to apply.</param>
            <param name="willCreateSignatures">If this <see cref="T:System.IdentityModel.Tokens.AsymmetricSignatureProvider"/> is required to create signatures then set this to true.
            <para>Creating signatures requires that the <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/> has access to a private key. 
            Verifying signatures (the default), does not require access to the private key.</para></param>
            <exception cref="T:System.ArgumentNullException">'key' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'algorithm' is null.</exception>
            <exception cref="T:System.ArgumentException">'algorithm' contains only whitespace.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">willCreatSignatures is true and <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>.KeySize is less than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForSigning"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>.KeySize is less than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForVerifying"/>. Note: this is always checked.</exception>
            <exception cref="T:System.InvalidOperationException">Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)"/> throws.</exception> 
            <exception cref="T:System.InvalidOperationException">Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetHashAlgorithmForSignature(System.String)"/> returns null.</exception>
            <exception cref="T:System.InvalidOperationException">Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)"/> throws.</exception>         
            <exception cref="T:System.InvalidOperationException">Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureFormatter(System.String)"/> returns null.</exception>         
            <exception cref="T:System.InvalidOperationException">Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)"/> throws.</exception>         
            <exception cref="T:System.InvalidOperationException">Is thrown if the <see cref="M:System.IdentityModel.Tokens.AsymmetricSecurityKey.GetSignatureDeformatter(System.String)"/> returns null.</exception>         
            <exception cref="T:System.InvalidOperationException">Is thrown if the <see cref="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)"/> throws.</exception>         
            <exception cref="T:System.InvalidOperationException">Is thrown if the <see cref="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)"/> throws.</exception>         
        </member>
        <member name="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Dispose">
            <summary>
            Calls <see cref="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Dispose(System.Boolean)"/> and <see cref="M:System.GC.SuppressFinalize(System.Object)"/>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Sign(System.Byte[])">
            <summary>
            Produces a signature over the 'input' using the <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/> and algorithm passed to <see cref="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.#ctor(System.IdentityModel.Tokens.AsymmetricSecurityKey,System.String,System.Boolean)"/>.
            </summary>
            <param name="input">bytes to be signed.</param>
            <returns>a signature over the input.</returns>
            <exception cref="T:System.ArgumentNullException">'input' is null. </exception>
            <exception cref="T:System.ArgumentException">'input.Length' == 0. </exception>
            <exception cref="T:System.ObjectDisposedException">if <see cref="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Dispose(System.Boolean)"/> has been called. </exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter"/> is null. This can occur if the constructor parameter 'willBeUsedforSigning' was not 'true'.</exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.HashAlgorithm"/> is null. This can occur if a derived type deletes it or does not create it.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies that a signature over the' input' matches the signature.
            </summary>
            <param name="input">the bytes to generate the signature over.</param>
            <param name="signature">the value to verify against.</param>
            <returns>true if signature matches, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">'input' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'signature' is null.</exception>
            <exception cref="T:System.ArgumentException">'input.Length' == 0.</exception>
            <exception cref="T:System.ArgumentException">'signature.Length' == 0.</exception>
            <exception cref="T:System.ObjectDisposedException">if <see cref="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Dispose(System.Boolean)"/> has been called. </exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter"/> is null. This can occur if a derived type does not call the base constructor.</exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.HashAlgorithm"/> is null. This can occur if a derived type deletes it or does not create it.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.AsymmetricSignatureProvider.Dispose(System.Boolean)">
            <summary>
            Calls <see cref="M:System.Security.Cryptography.HashAlgorithm.Dispose"/> to release this managed resources.
            </summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer.</param>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtConfigurationStrings">
            <summary>
            contains the element and attribute names used in config when parsing the JwtSecurityTokenHandler from XML.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtConstants">
            <summary>
            Constants for Json Web tokens.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.HeaderType">
            <summary>
            Short header type.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.HeaderTypeAlt">
            <summary>
            Long header type.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.TokenType">
            <summary>
            Short token type.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.TokenTypeAlt">
            <summary>
            Long token type.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtConstants.Algorithms">
            <summary>
            List of algorithms in spec
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.ECDSA_SHA256">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.ECDSA_SHA384">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.ECDSA_SHA512">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.HMAC_SHA256">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.HMAC_SHA384">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.HMAC_SHA512">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.NONE">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.RSA_SHA256">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.RSA_SHA384">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.Algorithms.RSA_SHA512">
            <summary>
            Algorithm short name.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtConstants.ReservedClaims">
            <summary>
            List of reserved claims in spec.
            </summary>
            <remarks>see: http://tools.ietf.org/pdf/draft-ietf-oauth-json-web-token-03.pdf </remarks>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Actor">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Audience">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Birthdate">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Email">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.ExpirationTime">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Gender">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.FamilyName">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.GivenName">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.IssuedAt">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Issuer">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.JwtId">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.NameId">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.NotBefore">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Principal">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Subject">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Type">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.UniqueName">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedClaims.Website">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters">
            <summary>
            List of reserved header parameters in spec.
            </summary>
            <remarks>see: http://tools.ietf.org/pdf/draft-ietf-jose-json-web-signature-06.pdf </remarks>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.Algorithm">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.ContentType">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.KeyId">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.JsonSetUrl">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.JsonWebKey">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.Type">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.X509CertificateChain">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.X509CertificateThumbprint">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.JwtConstants.ReservedHeaderParameters.X509Url">
            <summary>
            Claim short name.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtHeader">
            <summary>
            The <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> contains JSON objects representing the cryptographic operations applied to the JWT and optionally any additional properties of the JWT. 
            The member names within the JWT Header are referred to as Header Parameter Names. 
            <para>These names MUST be unique and the values must be <see cref="T:System.String"/>(s). The corresponding values are referred to as Header Parameter Values.</para>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtHeader.#ctor">
            <summary>
            Creates an empty <see cref="T:System.IdentityModel.Tokens.JwtHeader"/>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtHeader.#ctor(System.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Creates a new <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> with the Header Parameters as follows: 
            <para>{ { typ, JWT }, { alg, Mapped( <see cref="P:System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm"/> } }
            See: Algorithm Mapping below.</para>
            </summary>
            <param name="signingCredentials">The <see cref="P:System.IdentityModel.Tokens.JwtHeader.SigningCredentials"/> that will be or were used to sign the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.</param>
            <remarks>
            <para>For each <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> in signingCredentials.SigningKeyIdentifier</para>
            <para>if the clause  is a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause"/> Header Parameter { clause.Name, clause.KeyIdentifier } will be added.</para>
            <para>For example, if clause.Name == 'kid' and clause.Keyidentifier == 'SecretKey99'. The JSON object { kid, SecretKey99 } would be added.</para>
            <para>In addition, if the <see cref="P:System.IdentityModel.Tokens.JwtHeader.SigningCredentials"/> is a <see cref="T:System.IdentityModel.Tokens.X509SigningCredentials"/> the JSON object { x5t, Base64UrlEncoded( <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString"/> } will be added.</para>
            <para>This simplifies the common case where a X509Certificate is used.</para>
            <para>================= </para>
            <para>Algorithm Mapping</para>
            <para>================= </para>
            <para><see cref="P:System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm"/> describes the algorithm that is discoverable by the CLR runtime.</para>
            <para>The  { alg, 'value' } placed in the header reflects the JWT specification.</para>
            <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundAlgorithmMap"/> contains a signature mapping where the 'value' above will be translated according to this mapping.
            <para>Current mapping is:</para>
            <para>    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256' =&gt; 'RS256'</para>
            <para>    'http://www.w3.org/2001/04/xmldsig-more#hmac-sha256' =&gt; 'HS256'</para>
            </remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtHeader.Encode">
            <summary>
            Encodes this instance as a Base64UrlEncoded string.
            </summary>
            <remarks>Returns the current state. If this instance has changed since the last call, the value will be different.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtHeader.SignatureAlgorithm">
            <summary>
            Gets the signature algorithm that was used to create the signature.
            </summary>
            <remarks>If the signature algorithm is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtHeader.SigningCredentials">
            <summary>
            Gets the <see cref="P:System.IdentityModel.Tokens.JwtHeader.SigningCredentials"/> passed in the constructor.
            </summary>
            <remarks>This value may be null.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtHeader.SigningKeyIdentifier">
            <summary>
            Gets a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier"/> that contains a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> for each key found.
            </summary>
            <remarks>
            Keys are identified by matching a 'Reserved Header Parameter Name' found in the in JSON Web Signature specification.
            <para>Names recognized are: jku, jkw, kid, x5c, x5t, x5u</para>
            <para>'x5t' adds a <see cref="T:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause"/> passing a the Base64UrlDecoded( Value ) to the constructor.</para>
            <para>'jku', 'jkw', 'kid', 'x5u', 'x5c' each add a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause"/> with the { Name, Value } passed to the <see cref="M:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause.#ctor(System.String,System.String)"/>.</para>
            <para>   </para>
            <para>If no keys are found, an empty <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier"/> will be returned.</para>
            </remarks>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtPayload">
            <summary>
            The <see cref="T:System.IdentityModel.Tokens.JwtPayload"/> contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtPayload.#ctor">
            <summary>
            Creates a empty <see cref="T:System.IdentityModel.Tokens.JwtPayload"/>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.IdentityModel.Protocols.WSTrust.Lifetime)">
            <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.JwtPayload"/> with claims added for each of the parameters were specified.
            </summary>
            <param name="issuer">if this value is not null, a { iss, 'issuer' } claim will be added.</param>
            <param name="audience">if this value is not null, a { aud, 'audience' } claim will be added</param>
            <param name="claims">if this value is not null then for each <see cref="T:System.Security.Claims.Claim"/> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <param name="lifetime">if this value is not null, then if <para><see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime"/>.Created.HasValue a { nbf, 'value' } is added.</para><para>if <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime"/>.Expires.HasValue a { exp, 'value' } claim is added.</para></param>
            <remarks>Comparison is set to <see cref="P:System.StringComparer.Ordinal"/></remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtPayload.AddClaim(System.Security.Claims.Claim)">
            <summary>
            Adds a JSON object representing the <see cref="T:System.Security.Claims.Claim"/> to the <see cref="T:System.IdentityModel.Tokens.JwtPayload"/>
            </summary>
            <param name="claim">{ 'Claim.Type', 'Claim.Value' } is added. If a JSON object is found with the name == <see cref="P:System.Security.Claims.Claim.Type"/> then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <remarks>See <see cref="M:System.IdentityModel.Tokens.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})"/> for details on how <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap"/> is applied.</remarks>
            <exception cref="T:System.ArgumentNullException">'claim' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Adds a number of <see cref="T:System.Security.Claims.Claim"/> to the <see cref="T:System.IdentityModel.Tokens.JwtPayload"/> as JSON { name, value } pairs.
            </summary>
            <param name="claims">for each <see cref="T:System.Security.Claims.Claim"/> a JSON pair { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <remarks><para>Each <see cref="T:System.Security.Claims.Claim"/> added will have <see cref="P:System.Security.Claims.Claim.Type"/> translated according to the mapping found in <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap"/>. Adding and removing to <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap"/> 
            will affect the name component of the Json claim</para>
            <para>Any <see cref="T:System.Security.Claims.Claim"/> in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> that is null, will be ignored.</para></remarks>
            <exception cref="T:System.ArgumentNullException">'claims' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtPayload.Encode">
            <summary>
            Encodes this instance as a Base64UrlEncoded string.
            </summary>
            <remarks>Returns the current state. If this instance has changed since the last call, the value will be different.
            <para>No cryptographic operations are performed. See <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> for details.</para></remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtPayload.GetDateTime(System.String)">
            <summary>
            Gets the DateTime using the number of seconds from 1970-01-01T0:0:0Z (UTC)
            </summary>
            <param name="key">Claim in the payload that should map to an integer.</param>
            <remarks>If the claim is not found, the function returns: DateTime.MinValue
            </remarks>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenException">if value fails to parse.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.Actor">
            <summary>
            Gets the 'value' of the 'actor' claim { actort, 'value' }.
            </summary>
            <remarks>If the 'actor' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.Audience">
            <summary>
            Gets the 'value' of the 'audience' claim { aud, 'value' }.
            </summary>
            <remarks>If the 'audience' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.Expiration">
            <summary>
            Gets the 'value' of the 'expiration' claim { exp, 'value' }.
            </summary>
            <remarks>If the 'expiration' claim is not found OR could not be converted to <see cref="T:System.Int32"/>, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.Id">
            <summary>
            Gets the 'value' of the 'JWT ID' claim { jti, 'value' }.
            </summary>
            <remarks>If the 'JWT ID' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.IssuedAt">
            <summary>
            Gets the 'value' of the 'Issued At' claim { iat, 'value' }.
            </summary>
            <remarks>If the 'Issued At' claim is not found OR cannot be converted to <see cref="T:System.Int32"/> null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.Issuer">
            <summary>
            Gets 'value' of the 'issuer' claim { iss, 'value' }.
            </summary>
            <remarks>If the 'issuer' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.Subject">
            <summary>
            Gets "value" of the 'subject' claim { sub, 'value' }.
            </summary>
            <remarks>If the 'subject' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.ValidFrom">
            <summary>
            Gets 'value' of the 'notbefore' claim { nbf, 'value' } converted to a <see cref="T:System.DateTime"/> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'notbefore' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.ValidTo">
            <summary>
            Gets 'value' of the 'expiration' claim { exp, 'value' } converted to a <see cref="T:System.DateTime"/> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'expiration' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtPayload.Claims">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/><see cref="T:System.Security.Claims.Claim"/> for each JSON { name, value }.
            </summary>
            <remarks>Each <see cref="T:System.Security.Claims.Claim"/>(s) returned will have the <see cref="P:System.Security.Claims.Claim.Type"/> translated according to the mapping found in <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap"/>. Adding and removing to <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap"/> will affect the value of the <see cref="P:System.Security.Claims.Claim.Type"/>.
            <para><see cref="P:System.Security.Claims.Claim.Issuer"/> and <see cref="P:System.Security.Claims.Claim.OriginalIssuer"/> will be set to the value of <see cref="P:System.IdentityModel.Tokens.JwtPayload.Issuer"/> ( <see cref="F:System.String.Empty"/> if null).</para></remarks>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtSecurityToken">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> designed for representing a JSON Web Token (JWT).
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> from a string in JWS Compact serialized format.
            </summary>
            <param name="jwtEncodedString">A JSON Web Token that has been serialized in JWS Compact serialized format.</param>
            <exception cref="T:System.ArgumentNullException">'jwtEncodedString' is null.</exception>
            <exception cref="T:System.ArgumentException">'jwtEncodedString' contains only whitespace.</exception>
            <exception cref="T:System.ArgumentException">'jwtEncodedString' is not in JWS Compact serialized format.</exception>
            <remarks>
            The contents of this <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> have not been validated, the JSON Web Token is simply decoded. Validation can be accomplished using <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)"/>
            </remarks>&gt;
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.JwtHeader,System.IdentityModel.Tokens.JwtPayload,System.String)">
            <summary>
            Constructs a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> where the <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> contains the crypto algorithms applied to the encoded <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> and <see cref="T:System.IdentityModel.Tokens.JwtPayload"/>. The jwtEncodedString is the result of those operations.
            </summary>
            <param name="header">Contains JSON objects representing the cryptographic operations applied to the JWT and optionally any additional properties of the JWT</param>
            <param name="payload">Contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }</param>
            <param name="jwtEncodedString">The results of encoding and applying the cryptographic operations to the <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> and <see cref="T:System.IdentityModel.Tokens.JwtPayload"/>.</param>
            <exception cref="T:System.ArgumentNullException">'header' is null.</exception>        
            <exception cref="T:System.ArgumentNullException">'payload' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'jwtEncodedString' is null.</exception>        
            <exception cref="T:System.ArgumentException">'jwtEncodedString' contains only whitespace.</exception>        
            <exception cref="T:System.ArgumentException">'jwtEncodedString' is not in JWS Compact serialized format.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.IdentityModel.Protocols.WSTrust.Lifetime,System.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Constructs a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> specifying optional parameters.
            </summary>
            <param name="issuer">if this value is not null, a { iss, 'issuer' } claim will be added.</param>
            <param name="audience">if this value is not null, a { aud, 'audience' } claim will be added</param>
            <param name="claims">if this value is not null then for each <see cref="T:System.Security.Claims.Claim"/> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <param name="lifetime">if this value is not null, then if <para><see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime"/>.Created.HasValue a { nbf, 'value' } is added.</para><para>if <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime"/>.Expires.HasValue a { exp, 'value' } claim is added.</para></param>
            <param name="signingCredentials">The <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials"/> that will be or was used to sign the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>. See <see cref="M:System.IdentityModel.Tokens.JwtHeader.#ctor(System.IdentityModel.Tokens.SigningCredentials)"/> for details pertaining to the Header Parameter(s).</param>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityToken.Decode(System.String)">
            <summary>
            Decodes the string into the header, payload and signature
            </summary>
            <param name="jwtEncodedString">Base64Url encoded string.</param>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityToken.ToString">
            <summary>
            Decodes the <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> and <see cref="T:System.IdentityModel.Tokens.JwtPayload"/>
            </summary>
            <returns>A string containing the header and payload in JSON format</returns>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Actor">
            <summary>
            Gets the 'value' of the 'actor' claim { actort, 'value' }.
            </summary>
            <remarks>If the 'actor' claim is not found, null is returned.</remarks> 
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience">
            <summary>
            Gets the 'value' of the 'audience' claim { aud, 'value' }.
            </summary>
            <remarks>If the 'audience' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Claims">
            <summary>
            Gets the <see cref="T:System.Security.Claims.Claim"/>(s) for this token.
            </summary>
            <remarks><para><see cref="T:System.Security.Claims.Claim"/>(s) returned will NOT have the <see cref="P:System.Security.Claims.Claim.Type"/> translated according to <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap"/></para></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.EncodedHeader">
            <summary>
            Gets the Base64UrlEncoded <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.EncodedPayload">
            <summary>
            Gets the Base64UrlEncoded <see cref="T:System.IdentityModel.Tokens.JwtPayload"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Expiration">
            <summary>
            Gets the 'value' of the 'expiration' claim { aud, 'exp' }.
            </summary>
            <remarks>If the 'expiration' claim is not found OR could not be converted to <see cref="T:System.Int32"/>, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Header">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Id">
            <summary>
            Gets the 'value' of the 'JWT ID' claim { jti, ''value' }.
            </summary>
            <remarks>If the 'JWT ID' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.IssuedAt">
            <summary>
            Gets the 'value' of the 'Issued At' claim { iat, 'value' }.
            </summary>
            <remarks>If the 'Issued At' claim is not found OR cannot be converted to <see cref="T:System.Int32"/> null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Issuer">
            <summary>
            Gets the 'value' of the 'issuer' claim { iss, 'value' }.
            </summary>
            <remarks>If the 'issuer' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Payload">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.JwtPayload"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.RawData">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.String)"/> 
            or <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.JwtHeader,System.IdentityModel.Tokens.JwtPayload,System.String)"/></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.EncodedSignature">
            <summary>
            Gets the current signature over the jwt
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.SecurityKeys">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>s for this instance.
            </summary>
            <remarks>By default an empty collection is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.SignatureAlgorithm">
            <summary>
            Gets the signature algorithm associated with this instance.
            </summary>
            <remarks>if there is a <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials"/> associated with this instance, a value will be returned.  Null otherwise.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials">
            <summary>
            Gets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningKey">
            <summary>
            Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> that signed this instance.
            </summary>
            <remarks><see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/>.ValidateSignature(...) sets this value when a <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> is used to successfully validate a signature.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningToken">
            <summary>
            Gets or sets the <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> that contains a <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> that signed this instance.
            </summary>
            <remarks><see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/>.ValidateSignature(...) sets this value when a <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> is used to successfully validate a signature.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.Subject">
            <summary>
            Gets "value" of the 'subject' claim { sub, 'value' }.
            </summary>
            <remarks>If the 'subject' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.ValidFrom">
            <summary>
            Gets 'value' of the 'notbefore' claim { nbf, 'value' } converted to a <see cref="T:System.DateTime"/> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'notbefore' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityToken.ValidTo">
            <summary>
            Gets 'value' of the 'expiration' claim { exp, 'value' } converted to a <see cref="T:System.DateTime"/> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'expiration' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned.</remarks>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler"/> designed for creating and validating Json Web Tokens. See http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-07.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.#ctor">
            <summary>
            Initializes an instance of <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)">
            <summary>
            Determines if the <see cref="T:System.Xml.XmlReader"/> is positioned on a well formed &lt;BinarySecurityToken&gt; element.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> positioned at xml.</param>
            <returns>
            <para>'true' if the reader is positioned at an element &lt;BinarySecurityToken&gt;.
            in the namespace: 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'</para>
            <para>With an attribute of 'valueType' equal to one of: </para>
            <para>    "urn:ietf:params:oauth:token-type:jwt", "JWT" </para>
            <para>
            For example: &lt;wsse:BinarySecurityToken valueType = "JWT"&gt; ...
            </para>
            'false' otherwise.
            </returns>
            <remarks>The 'EncodingType' attribute is optional, if it is set, it must be equal to: "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary".</remarks>
            <exception cref="T:System.ArgumentNullException">'reader' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CanReadToken(System.String)">
            <summary>
            Determines if the string is a well formed Json Web token (see http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-07)
            </summary>
            <remarks>Uses <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>( token, @"^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$" ).
            </remarks>
            <returns>
            <para>'true' if the token is in JSON compact serialization format.</para>
            <para>'false' if token.Length * 2 &gt;  <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.MaxTokenSizeInBytes"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">'token' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)">
            <summary>
            Creates <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> that identifies the <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <returns>Always returns null</returns>
            <remarks>Called by the mainline scenarios which would result in the base class throwing a <see cref="T:System.NotImplementedException"/>.
            If the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> is required override this method.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)">
            <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> based on values found in the <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor"/>.
            </summary>
            <param name="tokenDescriptor">Contains the parameters used to create the token.</param>
            <returns>A <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.</returns>
            <remarks>
            If <see cref="P:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials"/> is not null, <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.RawData"/> will be signed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">'tokenDescriptor' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CreateToken(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.IdentityModel.Protocols.WSTrust.Lifetime,System.IdentityModel.Tokens.SigningCredentials,System.IdentityModel.Tokens.SignatureProvider)">
            <summary>
            Uses the <see cref="M:System.IdentityModel.Tokens.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.JwtHeader,System.IdentityModel.Tokens.JwtPayload,System.String)"/> constructor, first creating the <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> and <see cref="T:System.IdentityModel.Tokens.JwtPayload"/>.
            <para>If <see cref="T:System.IdentityModel.Tokens.SigningCredentials"/> is not null, <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.RawData"/> will be signed.</para>
            </summary>
            <param name="issuer">the issuer of the token.</param>
            <param name="audience">the expected audience for this token</param>
            <param name="subject">the source of the <see cref="T:System.Security.Claims.Claim"/>(s) for this token.</param>
            <param name="lifetime">the creation and expiration times for this token.</param>
            <param name="signingCredentials">contains cryptographic material for generating a signature.</param>
            <param name="signatureProvider">optional <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/>.</param>
            <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.Actor"/> is not null, then a claim { actort, 'value' } will be added to the payload. <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)"/> for details on how the value is created.
            <para>See <seealso cref="T:System.IdentityModel.Tokens.JwtHeader"/> for details on how the HeaderParameters are added to the header.</para>
            <para>See <seealso cref="T:System.IdentityModel.Tokens.JwtPayload"/> for details on how the values are added to the payload.</para></remarks>       
            <para>If signautureProvider is not null, then it will be used to create the signature and <see cref="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForSigning(System.IdentityModel.Tokens.SecurityKey,System.String)"/> will not be called.</para>
            <returns>A <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.GetTokenTypeIdentifiers">
            <summary>
            Gets the token type identifier(s) supported by this handler.
            </summary>
            <returns>A collection of strings that identify the tokens this instance can handle.</returns>
            <remarks>When receiving a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> wrapped inside a &lt;wsse:BinarySecurityToken&gt; element. The &lt;wsse:BinarySecurityToken&gt; element must have the ValueType attribute set to one of these values
            in order for this handler to recognize that it can read the token.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)">
            <summary>
            Loads custom configuration from an <see cref="T:System.Xml.XmlNodeList"/>. Override this method to provide custom handling of elements.
            </summary>
            <param name="nodeList">The XML nodes that contain the custom configuration.</param>
            <remarks>A single element 'jwtSecurityTokenRequirement' is supported. See <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.#ctor(System.Xml.XmlElement)"/> for details.</remarks>
            <exception cref="T:System.ArgumentNullException">'nodelist' is null.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="T:System.Xml.XmlNodeList"/> contains more than one element.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:System.Xml.XmlElement.LocalName"/> != 'jwtSecurityTokenRequirement'.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ReadToken(System.Xml.XmlReader)">
            <summary>
            Reads a JSON web token wrapped inside a WS-Security BinarySecurityToken xml element.
            </summary>
            <returns>An instance of <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/></returns>
            <remarks>First calls <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.CanReadToken
            <para>The reader must be positioned at an element named:</para>
            <para>BinarySecurityToken'.
            in the namespace: 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd'
            with a 'ValueType' attribute equal to one of: "urn:ietf:params:oauth:token-type:jwt", "JWT".</para>
            <para>
            For example &lt;wsse:BinarySecurityToken valueType = "JWT"&gt; ...
            </para>
            <para>
            The 'EncodingType' attribute is optional, if it is set, it must be equal to: "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary"
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'reader' is null.</exception>
            <exception cref="T:System.ArgumentException">if <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)"/> returns false.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ReadToken(System.String)">
            <summary>
            Reads a token encoded in JSON Compact serialized format.
            </summary>
            <param name="jwtEncodedString">A 'JSON Web Token' (JWT) that has been encoded as a JSON object. May be signed 
            using 'JSON Web Signature' (JWS).</param>
            <remarks>
            The JWT must be encoded using Base64Url encoding of the UTF-8 representation of the JWT: Header, Payload and Signature. 
            The contents of the JWT returned are not validated in any way, the token is simply decoded. Use ValidateToken to validate the JWT.
            </remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CreateSignature(System.String,System.IdentityModel.Tokens.SecurityKey,System.String,System.IdentityModel.Tokens.SignatureProvider)">
            <summary>
            Produces a signature over the 'input' using the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> and algorithm specified.
            </summary>
            <param name="inputString">string to be signed</param>
            <param name="key">the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> to use.</param>
            <param name="algorithm">the algorithm to use.</param>
            <param name="signatureProvider">signature provider</param>
            <returns>The signature over the bytes obtained from UTF8Encoding.GetBytes( 'input' ).</returns>
            <remarks>The <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/> used to created the signature is obtained by calling <see cref="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForSigning(System.IdentityModel.Tokens.SecurityKey,System.String)"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">'input' is null.</exception>
            <exception cref="T:System.InvalidProgramException"><see cref="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForSigning(System.IdentityModel.Tokens.SecurityKey,System.String)"/> returns null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Creates the 'value' for the actor claim: { actort, 'value' }
            </summary>
            <param name="actor"><see cref="T:System.Security.Claims.ClaimsIdentity"/> as actor.</param>
            <returns><see cref="T:System.String"/> representing the actor.</returns>
            <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.BootstrapContext"/> is not null:
            <para>  if 'type' is 'string', return as string.</para>
            <para>  if 'type' is 'BootstrapContext' and 'BootstrapContext.SecurityToken' is 'JwtSecurityToken'</para>
            <para>    if 'JwtSecurityToken.RawData' != null, return RawData.</para>        
            <para>    else return <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)"/>.</para>        
            <para>  if 'BootstrapContext.Token' != null, return 'Token'.</para>
            <para>default: <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)"/> new ( <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>( actor.Claims ).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'actor' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateAudience(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates that <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience"/> is an expected value.
            </summary>       
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <remarks><para>If <see cref="P:System.IdentityModel.Tokens.AudienceRestriction.AudienceMode"/> == <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Never"/> OR  <para>( <see cref="T:System.IdentityModel.Selectors.AudienceUriMode"/> == <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.BearerKeyOnly"/>  AND  <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SecurityKeys"/>.Count == 0 ) </para><para>then validation is skipped.</para></para>
            <para>If validation is performed, <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience"/> is compared to each <see cref="T:System.Uri"/> in <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.AudienceRestriction"/>.AllowedAudienceUris by comparing to <see cref="P:System.Uri.OriginalString"/>. Returns when first compare succeeds.  Compare is performed using <see cref="T:System.StringComparison"/>.Ordinal (case sensitive).</para></remarks>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration"/>.AudienceRestriction is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException">if <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>( <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience"/> ) is true.</exception>
            <exception cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException"><see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience"/> fails to match one of <see cref="P:System.IdentityModel.Tokens.AudienceRestriction.AllowedAudienceUris"/>.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateAudience(System.IdentityModel.Tokens.JwtSecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Validates that <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience"/> is an expected value.
            </summary>       
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <param name="validationParameters">Contains valid audiences.</param>
            <remarks><para>If <see cref="P:System.IdentityModel.Tokens.AudienceRestriction.AudienceMode"/> == <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.Never"/> OR  <para>( <see cref="T:System.IdentityModel.Selectors.AudienceUriMode"/> == <see cref="F:System.IdentityModel.Selectors.AudienceUriMode.BearerKeyOnly"/>  AND  <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SecurityKeys"/>.Count == 0 ) </para><para>then validation is skipped.</para></para>
            <para>If validation is performed, <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience"/> is compared first to <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AllowedAudience"/> and then to each string in <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AllowedAudiences"/>. Returns when first compare succeeds. Compare is performed using <see cref="T:System.StringComparison"/>.Ordinal (case sensitive).</para></remarks>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'validationParameters' is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">if <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>( <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience"/> ) is true.</exception>
            <exception cref="T:System.ArgumentException">'<see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AllowedAudience"/>' is null or whitespace AND <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AllowedAudiences"/> is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.AudienceUriValidationFailedException"><see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Audience"/> fails to match <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AllowedAudience"/> or one of <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AllowedAudiences"/>.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateLifetime(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.ValidFrom"/> and <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.ValidTo"/>.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <remarks>
            <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.RequireExpirationTime"/> mandates if claim { exp, 'value' } is required. Default is true.
            <para>If the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> contains the claim { exp, 'value' } it will be validated regardless of <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.RequireExpirationTime"/>.</para>
            <para>If the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> contains the claim { nbf, 'value' } it will be validated.</para>
            <para><see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.MaxClockSkew"/> is applied.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException"><see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> does not contain the claim { exp, 'value' } and <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.RequireExpirationTime"/> is true.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException"><see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.ValidFrom"/> is after <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.ValidTo"/>.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException"><see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.ValidFrom"/> is after <see cref="P:System.DateTime.UtcNow"/>.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException"><see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.ValidTo"/> is after <see cref="P:System.DateTime.UtcNow"/>.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateIssuer(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates that <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Issuer"/> is an expected value.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <remarks>Calls <see cref="N:System.IdentityModel.Configuration"/>.IssuerNameRegistry.GetIssuerName( jwt, jwt.Issuer ).</remarks>
            <returns>The <see cref="T:System.String"/> to use when creating a <see cref="T:System.Security.Claims.Claim"/>, <see cref="P:System.Security.Claims.Claim.Issuer"/> will be equal to this value.</returns>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">if <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>( <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Issuer"/> ) is true.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="N:System.IdentityModel.Configuration"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="N:System.IdentityModel.Configuration"/>.IssuerNameRegistry is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">The 'value' returned <see cref="N:System.IdentityModel.Configuration"/>.IssuerNameRegistry.GetIssuerName is null or empty.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateIssuer(System.IdentityModel.Tokens.JwtSecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Validates that <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Issuer"/> is an expected value.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <param name="validationParameters">Contains valid issuers.</param>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'validationParameters' is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">if <see cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>( <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Issuer"/> ) is true.</exception>
            <exception cref="T:System.ArgumentException"><see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuer"/> is null or whitespace AND <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuers"/> is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException"><see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Issuer"/> fails to match <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuer"/> or one of <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuers"/>.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateSignature(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates the signature of a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>
            </summary>
            <param name="jwt"><see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <remarks>If validation is successful, <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningToken"/> and <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningKey"/> 
            will be set to the <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> and <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> the validated the signature.</remarks>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/>.Configuration is null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/>.Configuration.IssuerTokenResolver is null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException"><see cref="M:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(System.IdentityModel.Tokens.SecurityKeyIdentifier)"/> returns null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">signature is not valid.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateSignature(System.IdentityModel.Tokens.JwtSecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Validates that the signature is valid.
            </summary>
            <param name="jwt"><see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <param name="validationParameters">contains <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>(s) used to check signature.</param>
            <remarks>If validation is successful, <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningToken"/> and <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningKey"/> 
            will be set to the <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> and <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> the validated the signature.</remarks>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'validationParameters' is null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.SigningToken"/> and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.SigningTokens"/> are both null.</exception>
            <exception cref="T:System.IdentityModel.Tokens.SecurityTokenValidationException">signature is not valid.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateSignature(System.IdentityModel.Tokens.JwtSecurityToken,System.Byte[],System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityToken})">
            <summary>
            Validates that the signature, if found and / or required is valid.
            </summary>
            <param name="jwt">the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <param name="signatureBytes">Base64urlDecoded bytes.</param>
            <param name="signingTokens">contains the <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>(s) that contain <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s) used to check the signature.</param>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateSigningToken(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningToken"/> is an expected value.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <remarks>If the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningToken"/> is a <see cref="T:System.IdentityModel.Tokens.X509SecurityToken"/> then the X509Certificate2 will be validated using <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CertificateValidator"/>.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Validates a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> and returns <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <param name="token">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <remarks>Calls <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.JwtSecurityToken)"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">'token' is null.</exception>
            <exception cref="T:System.ArgumentException">'token' is not a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.String)">
            <summary>
            Reads and validates a token encoded in JSON Compact serialized format.
            </summary>
            <param name="jwtEncodedString">A 'JSON Web Token' (JWT) that has been encoded as a JSON object. May be signed 
            using 'JSON Web Signature' (JWS).</param>
            <remarks>
            <para>Calls <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.JwtSecurityToken)"/>.</para>
            To obtain the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>, <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ReadToken(System.String)"/> is called.
            </remarks>
            <exception cref="T:System.ArgumentNullException">'jwtEncodedString' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.String,System.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Reads and validates a token encoded in JSON Compact serialized format.
            </summary>
            <param name="jwtEncodedString">A 'JSON Web Token' (JWT) that has been encoded as a JSON object. May be signed 
            using 'JSON Web Signature' (JWS).</param>
            <param name="validationParameters">Contains validation parameters for the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.</param>
            <remarks>
            <para>Calls <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.JwtSecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)"/>.</para>
            To obtain the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>, <see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ReadToken(System.String)"/> is called.
            </remarks>
            <exception cref="T:System.ArgumentNullException">'jwtEncodedString' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'validationParameters' is null.</exception>        
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.JwtSecurityToken)">
            <summary>
            Validates a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> and returns a <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <remarks>
            <para>Validation calls , in sequence the following protected virtual methods:</para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateSignature(System.IdentityModel.Tokens.JwtSecurityToken)"/></para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateSigningToken(System.IdentityModel.Tokens.JwtSecurityToken)"/></para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateAudience(System.IdentityModel.Tokens.JwtSecurityToken)"/>(</para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateLifetime(System.IdentityModel.Tokens.JwtSecurityToken)"/>(</para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateIssuer(System.IdentityModel.Tokens.JwtSecurityToken)"/>(</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.JwtSecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Validates a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> and returns a <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to validate.</param>
            <param name="validationParameters">Contains validation parameters for the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.</param>
            <remarks>
            <para>Validation calls, in sequence, the following protected virtual methods:</para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateSignature(System.IdentityModel.Tokens.JwtSecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)"/></para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateSigningToken(System.IdentityModel.Tokens.JwtSecurityToken)"/></para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateLifetime(System.IdentityModel.Tokens.JwtSecurityToken)"/>(</para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateAudience(System.IdentityModel.Tokens.JwtSecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)"/>(</para>
            <para><see cref="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ValidateIssuer(System.IdentityModel.Tokens.JwtSecurityToken,System.IdentityModel.Tokens.TokenValidationParameters)"/>(</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'jwt' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'validationParameters' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ClaimsIdentityFromJwt(System.IdentityModel.Tokens.JwtSecurityToken,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsIdentity"/> from a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to use as a <see cref="T:System.Security.Claims.Claim"/> source.</param>
            <param name="issuer">The value to set <see cref="P:System.Security.Claims.Claim.Issuer"/></param>
            <param name="saveBootstrapContext">Flag indicating if the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> should be attached to <see cref="P:System.Security.Claims.ClaimsIdentity.BootstrapContext"/></param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> containing the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Claims"/>.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Writes the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> wrapped in a WS-Security BinarySecurityToken using the <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">'writer' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'token' is null.</exception>
            <exception cref="T:System.ArgumentException">'token' is not a not <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.</exception>
            <remarks>The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> current contents are encoded. If <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials"/> is not null, the encoding will contain a signature.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Writes the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> as a JSON Compact serialized format string.
            </summary>
            <param name="token"><see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> to serialize.</param>
            <remarks>
            <para>If the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.SigningCredentials"/> are not null, the encoding will contain a signature.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'token' is null.</exception>
            <exception cref="T:System.ArgumentException">'token' is not a not <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundAlgorithmMap">
            <summary>Gets or sets the <see cref="T:System.Collections.Generic.IDictionary`2"/> used to map Inbound Cryptographic Algorithms.</summary>
            <remarks>Strings that describe Cryptographic Algorithms that are understood by the runtime are not necessarily the same values used in the JsonWebToken specification.
            <para>When a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> signature is validated, the algorithm is obtained from the HeaderParameter { alg, 'value' }.  
            The 'value' is translated according to this mapping and the translated 'value' is used when performing cryptographic operations.</para>
            <para>Default mapping is:</para>
            <para>    RS256 =&gt; http://www.w3.org/2001/04/xmldsig-more#rsa-sha256 </para>
            <para>    HS256 =&gt; http://www.w3.org/2001/04/xmldsig-more#hmac-sha256 </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundAlgorithmMap">
            <summary>Gets or sets the <see cref="T:System.Collections.Generic.IDictionary`2"/> used to map Outbound Cryptographic Algorithms.</summary>
            <remarks>Strings that describe Cryptographic Algorithms understood by the runtime are not necessarily the same in the JsonWebToken specification.
            <para>This property contains mappings the will be used to when creating a <see cref="T:System.IdentityModel.Tokens.JwtHeader"/> and setting the HeaderParameter { alg, 'value' }. 
            The 'value' set is translated according to this mapping.
            </para>
            <para>Default mapping is:</para>
            <para>    http://www.w3.org/2001/04/xmldsig-more#rsa-sha256  =&gt; RS256</para>
            <para>    http://www.w3.org/2001/04/xmldsig-more#hmac-sha256 =&gt; HS256</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap">
            <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap"/> that is used when setting the <see cref="P:System.Security.Claims.Claim.Type"/> for claims in the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> extracted when validating a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>. 
            <para>The <see cref="P:System.Security.Claims.Claim.Type"/> is set to the JSON claim 'name' after translating using this mapping.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">'value is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap">
            <summary>
            <para>Gets or sets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.OutboundClaimTypeMap"/> that is used when creating a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> from <see cref="T:System.Security.Claims.Claim"/>(s).</para>
            <para>The JSON claim 'name' value is set to <see cref="P:System.Security.Claims.Claim.Type"/> after translating using this mapping.</para>
            </summary>
            <remarks>This mapping is applied only when using <see cref="M:System.IdentityModel.Tokens.JwtPayload.AddClaim(System.Security.Claims.Claim)"/> or <see cref="M:System.IdentityModel.Tokens.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})"/>. Adding values directly will not result in translation.</remarks>
            <exception cref="T:System.ArgumentNullException">'value is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.ShortClaimTypeProperty">
            <summary>
            Gets or sets the property name of <see cref="P:System.Security.Claims.Claim.Properties"/> the will contain the original JSON claim 'name' if a mapping occurred when the <see cref="T:System.Security.Claims.Claim"/>(s) were created.
            <para>See <seealso cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.InboundClaimTypeMap"/> for more information.</para>
            </summary>
            <exception cref="T:System.ArgumentException">if <see cref="T:System.String"/>.IsIsNullOrWhiteSpace('value') is true.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CanValidateToken">
            <summary>
            Returns 'true' which indicates this instance can validate a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CanWriteToken">
            <summary>
            Returns 'true', which indicates this instance can write <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.CertificateValidator">
            <summary>
            Gets or sets the <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator"/> responsible for validating the certificate that signed the <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.
            </summary>
            <remarks>The <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator"/> returned using the following search path:
            <para>
            1. <seealso cref="P:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.CertificateValidator"/> if not null, return this value.
            </para>
            ----
            <para>
            2. <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/>.Configuration.CertificateValidator if not null, return this value.
            </para>
            ----
            <para>
            3. <see cref="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultCertificateValidator"/>.
            </para>
            </remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes">
            <summary>
            Gets or sets the default token lifetime.
            </summary>
            <remarks>
            <para>This value is used when creating a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> and the <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime"/> is not specified.</para>
            If <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.RequireExpirationTime"/> is true, then
            an expiration claim { exp, 'value' } will added to the <see cref="T:System.IdentityModel.Tokens.JwtPayload"/>. 'value' = <see cref="P:System.DateTime.UtcNow"/> + <see cref="M:System.TimeSpan.FromMinutes(System.Double)"/>( <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes"/> ).
            <para>If only <see cref="P:System.IdentityModel.Protocols.WSTrust.Lifetime.Created"/> is specified, expiration will add to that value.</para>
            <para>Default is 600 (minutes).</para></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' == 0.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.JwtSecurityTokenRequirement">
            <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.JwtSecurityTokenRequirement"/>.
            </summary>
            <remarks>These settings have precedence over <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.NameClaimType">
            <summary>
            Gets or sets the <see cref="T:System.String"/> passed to <see cref="M:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)"/>. 
            </summary>
            <remarks>
            Controls the value <see cref="P:System.Security.Claims.ClaimsIdentity.Name"/> property will return. It will return the first <see cref="P:System.Security.Claims.Claim.Value"/> where the <see cref="P:System.Security.Claims.Claim.Type"/> equals <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.NameClaimType"/>.
            </remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.MaxClockSkew">
            <summary>
            Gets or sets the clockskew to use when validating times.
            </summary>
            <remarks>The following search path is used to obtain the clockskew to return:
            <para>
            1. If <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.JwtSecurityTokenRequirement"/>.MaxClockSkew.HasValue, return this value.
            </para>
            ----
            <para>
            2. If <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/>.Configuration is not null, return <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/>.Configuration.MaxClockSkew.
            </para>
            ----
            <para>
            3. default: <see cref="F:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.DefaultMaxClockSkew"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' is less than <see cref="F:System.TimeSpan.Zero"/></exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.MaxTokenSizeInBytes">
            <summary>
            Gets or sets the size limit when reading a token as a string.
            </summary>
            <remarks>This does not set limits when reading tokens using a <see cref="T:System.Xml.XmlReader"/>. Use xml quotas on the <see cref="T:System.Xml.XmlReader"/> for those limits.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' == 0.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.RequireExpirationTime">
            <summary>
            Gets or sets a value indicating whether if the 'expiration' value in a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> is required.
            </summary>
            <remarks>If 'true' then:
            <para>A <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> will be considered invalid if it does not contain an 'expiration' value.</para>
            <para>When creating a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> if <see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime"/> is not specified a default will be added to the payload. See <seealso cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes"/> for details on the calculation of the 'expiration' value.</para></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.RequireSignedTokens">
            <summary>
            Gets or sets a value indicating whether a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> can be valid if not signed.
            </summary>
            <remarks>If true then:
            <para>A <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> will be considered invalid if it does not contain a 'signature'.</para>
            </remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.RoleClaimType">
            <summary>
            Gets or sets the <see cref="T:System.String"/> passed to <see cref="M:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)"/>.
            </summary>
            <remarks>
            <para>Controls the <see cref="T:System.Security.Claims.Claim"/>(s) returned from <see cref="M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)"/>.</para>
            <para>Each <see cref="T:System.Security.Claims.Claim"/> returned will have a <see cref="P:System.Security.Claims.Claim.Type"/> equal to <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.RoleClaimType"/>.</para>
            </remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.SignatureProviderFactory">
            <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.SignatureProviderFactory"/> for creating <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/>(s).
            </summary>
            <remarks>This extensibility point can be used to insert custom <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/>(s).
            <para><see cref="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForVerifying(System.IdentityModel.Tokens.SecurityKey,System.String)"/> is called to obtain a <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/>(s) when needed.</para></remarks>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenHandler.TokenType">
            <summary>
            Gets the <see cref="T:System.Type"/> supported by this handler.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.JwtSecurityTokenRequirement">
            <summary>
            Provides a location for settings that control how the <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> validates or creates a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>. 
            </summary>
            <remarks>These values have precedence over <see cref="P:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration"/>.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.#ctor">
            <summary>
            Creates an instance of <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenRequirement"/>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.#ctor(System.Xml.XmlElement)">
            <summary>
            Provides additional configuration to the <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> when validating or creating a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>. 
            </summary>
            <remarks>
            <para>A single XML element is expected with up to four optional attributes: {'expected values'} and up to five optional child elements.</para>
            <para>&lt;jwtSecurityTokenRequirement</para>
            <para>    issuerCertificateRevocationMode: {NoCheck, OnLine, OffLine}</para>
            <para>    issuerCertificateTrustedStoreLocation: {CurrentUser, LocalMachine}</para>
            <para>    issuerCertificateValidator: type derived from <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator"/></para>
            <para>    issuerCertificateValidationMode: {ChainTrust, Custom, None, PeerTrust, PeerOrChainTrust}</para>
            <para>&gt;</para>
            <para>    &lt;nameClaimType value = 'somestring'/&gt;</para>
            <para>    &lt;roleClaimType value = 'somestring'/&gt;</para>
            <para>    &lt;defaultTokenLifetimeInMinutes value = 'UInt32'/&gt;</para>
            <para>    &lt;maxTokenSizeInBytes value = 'UInt32'/&gt;</para>
            <para>    &lt;maxClockSkewInMinutes value = 'UInt32'/&gt;</para>
            <para>&lt;/jwtSecurityTokenRequirement&gt;</para>
            </remarks>
             <param name="element">The <see cref="T:System.Xml.XmlElement"/> to be parsed.</param>
             <exception cref="T:System.ArgumentNullException">'element' is null.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException"><see cref="P:System.Xml.XmlElement.LocalName"/> is not 'jwtSecurityTokenRequirement'.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException">if a <see cref="P:System.Xml.XmlAttribute.LocalName"/> is not expected.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException">a <see cref="P:System.Xml.XmlAttribute.Value"/> of &lt;jwtSecurityTokenRequirement&gt; is null or whitespace.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException">a <see cref="P:System.Xml.XmlAttribute.Value"/> is not expected.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException">if the <see cref="P:System.Xml.XmlElement.LocalName"/> of a child element of &lt;jwtSecurityTokenRequirement&gt; is not expected.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException">if a child element of &lt;jwtSecurityTokenRequirement&gt; is not well formed.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException">if the 'issuerCertificateValidationMode' == 'Custom' and a 'issuerCertificateValidator' attribute was not specified.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException">if the runtime was not able to create the type specified by a the 'issuerCertificateValidator' attribute.</exception>
             <exception cref="T:System.Configuration.ConfigurationErrorsException">if a child element of &lt;jwtSecurityTokenRequirement&gt; is not well formed.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.CertificateValidator">
            <summary>
            Gets or sets the <see cref="T:System.IdentityModel.Selectors.X509CertificateValidator"/> for validating <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>(s).
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.NameClaimType">
            <summary>
            Gets or sets the <see cref="T:System.String"/> the <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> passes as a parameter to <see cref="M:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)"/>. 
            <para>This defines the <see cref="P:System.Security.Claims.Claim.Type"/> to match when finding the <see cref="P:System.Security.Claims.Claim.Value"/> that is used for the <see cref="P:System.Security.Claims.ClaimsIdentity.Name"/> property.</para>
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.RoleClaimType">
            <summary>
            Gets or sets the <see cref="T:System.String"/> the <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> passes as a parameter to <see cref="M:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)"/>.
            <para>This defines the <see cref="T:System.Security.Claims.Claim"/>(s) that will be considered when answering <see cref="M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)"/></para>
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.MaximumTokenSizeInBytes">
            <summary>
            Gets or sets the maximum size of a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> the <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> will read and validate.
            </summary>
            <remarks>Default: 2 megabytes.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">if value is 0.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.DefaultTokenLifetimeInMinutes">
            <summary>
            Gets or sets the default for token lifetime.
            <see cref="T:System.IdentityModel.Tokens.JwtSecurityTokenHandler"/> uses this value when creating a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> if the expiration time is not specified.  The expiration time will be set to <see cref="P:System.DateTime.UtcNow"/> + <see cref="M:System.TimeSpan.FromMinutes(System.Double)"/> with <see cref="P:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.DefaultTokenLifetimeInMinutes"/> as the parameter.
            </summary>
            <remarks>Default: 600.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value == 0.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.JwtSecurityTokenRequirement.MaxClockSkew">
            <summary>
            Gets or sets the maximum clock skew to use when validating lifetime of a <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.TimeSpan"/>? has a value and it is less than <see cref="F:System.TimeSpan.Zero"/>.</exception>
        </member>
        <member name="T:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver">
            <summary>
            <see cref="T:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver"/> represents a collection of named sets of <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s) that can be matched by a
            <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause"/> and return a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityToken"/> that contains <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s).
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.IdentityModel.Tokens.SecurityKey}},System.IdentityModel.Tokens.IssuerTokenResolver)">
            <summary>
            Populates this instance with a named collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s) and an optional <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver"/> that will be called when a 
            <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier"/> or <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> cannot be resolved.
            </summary>
            <param name="keys">A named collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s).</param>
            <param name="innerTokenResolver">A <see cref="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.IssuerTokenResolver"/> to call when resolving fails, before calling base.</param>
            <remarks>if 'keys' is null an empty collection will be created. A named collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s) can be added by accessing the property <see cref="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.SecurityKeys"/>.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)">
            <summary>
            Populates the <see cref="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.SecurityKeys"/> from xml.
            </summary>
            <param name="nodeList">xml for processing.</param>
            <exception cref="T:System.ArgumentNullException">'nodeList' is null.</exception>
            <remarks>Only <see cref="T:System.Xml.XmlNode"/>(s) with <see cref="P:System.Xml.XmlElement.LocalName"/> == 'securityKey' will be processed. Unprocessed nodes will added to a list and can be accessed using the <see cref="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.UnprocessedXmlNodes"/> property.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.ReadSecurityKey(System.Xml.XmlElement)">
             <summary>
             When processing xml in <see cref="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)"/> each <see cref="T:System.Xml.XmlElement"/> that has <see cref="P:System.Xml.XmlElement.LocalName"/> = "securityKey' is passed here for processing.
             </summary>
             <param name="element">contains xml to map to a named <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>.</param>
             <remarks>
            <para>A single <see cref="T:System.Xml.XmlElement"/> is expected with up to three attributes: {'expected values'}.</para>
            <para>&lt;securityKey</para>
            <para>    symmetricKey {required}</para>
            <para>    name         {required}</para>
            <para>    EncodingType or encodingType {optional}</para>
            <para>&gt;</para>
            <para>&lt;/securityKey&gt;</para>
            <para>If "EncodingType' type is specified only:</para>
            <para>    'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary'</para>
            <para>    'Base64Binary'</para>
            <para>    'base64Binary'</para>
            are allowed and have the same meaning.
            <para>When a symmetricKey is found, Convert.FromBase64String( value ) is applied to create the key.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'element' is null.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">attribute 'symmetricKey' is not found.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">value of 'symmetricKey' is empty or whitespace.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">attribute 'name' is not found.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">value of 'name' is empty or whitespace.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">value of 'encodingType' is not valid.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.TryResolveSecurityKeyCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityKey@)">
            <summary>
            Finds the first <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> in a named collection that match the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/>.
            </summary>
            <remarks>If there is no match, then <see cref="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.IssuerTokenResolver"/> and 'base' are called in order.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifier,System.IdentityModel.Tokens.SecurityToken@)">
            <summary>
            Finds a named collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s) that match the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier"/> and returns a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityToken"/> that contains the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s).
            </summary>
            <remarks><para>A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier"/> can contain multiple <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/>(s). This method will return the named collection that matches the first <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/></para><para>If there is no match, then <see cref="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.IssuerTokenResolver"/> and 'base' are called in order.</para></remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.TryResolveTokenCore(System.IdentityModel.Tokens.SecurityKeyIdentifierClause,System.IdentityModel.Tokens.SecurityToken@)">
            <summary>
            Finds a named collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s) that match the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> and returns a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityToken"/> that contains the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s).
            </summary>
            <remarks>If there is no match, then <see cref="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.IssuerTokenResolver"/> and 'base' are called in order.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.SecurityKeys">
            <summary>
            Gets the named collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s).
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.IssuerTokenResolver">
            <summary>
            Gets or sets the <see cref="T:System.IdentityModel.Selectors.SecurityTokenResolver"/> to call when <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifier"/> or <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> fails to resolve, before calling base.
            </summary>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
            <exception cref="T:System.ArgumentException">'object.ReferenceEquals( this, value)' is true.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.UnprocessedXmlNodes">
            <summary>
            Gets the unprocessed <see cref="T:System.Xml.XmlNode"/>(s) from <see cref="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)"/>.
            </summary>
            <remarks><see cref="M:System.IdentityModel.Tokens.NamedKeyIssuerTokenResolver.LoadCustomConfiguration(System.Xml.XmlNodeList)"/> processes only <see cref="T:System.Xml.XmlElement"/>(s) that have the <see cref="P:System.Xml.XmlElement.LocalName"/> == 'securityKey'. Unprocessed <see cref="T:System.Xml.XmlNode"/>(s) are accessible here.</remarks>
        </member>
        <member name="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> that can be used to match <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityToken"/>.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause.#ctor(System.String,System.String)">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityToken"> will use the 'name' for matching.</see>
            </summary>
            <param name="name">Used to identify a named collection of keys.</param>
            <param name="keyIdentifier">Additional information for matching.</param>
            <exception cref="T:System.ArgumentNullException">'name' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'keyIdentifier' is null.</exception>
            <exception cref="T:System.ArgumentException">string.IsNullOrWhiteSpace( 'name' ) is true.</exception>
            <exception cref="T:System.ArgumentException">string.IsNullOrWhiteSpace( 'keyIdentifier' ) is true.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
            <summary>
            Determines if a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> matches this instance.
            </summary>
            <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> to match.</param>
            <returns>true if:
            <para>    1. keyIdentifierClause is a <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause"/>.</para>
            <para>    2. string.Equals( keyIdentifierClause.Name, this.Name, StringComparison.Ordinal).</para>
            <para>    2. string.Equals( keyIdentifierClause.KeyIdentifier, this.KeyIdentifier, StringComparison.Ordinal).</para>
            <para>Otherwise calls base.Matches( keyIdentifierClause ).</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">'keyIdentifierClause' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause.Name">
            <summary>
            Gets the name of the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s) this <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause"/> represents.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause.KeyIdentifier">
            <summary>
            Gets the keyidentifier can be used for additional matching.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.NamedKeySecurityToken">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> that contains multiple <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> that have a name.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeySecurityToken.#ctor(System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityKey})">
            <summary>
            A <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> that contains a <see cref="T:System.Collections.Generic.IEnumerable`1"/>(System.IdentityModel.Tokens.SecurityKey) that can be matched by name.
            </summary>
            <param name="name">A name for the <see cref="T:System.Collections.Generic.IEnumerable`1"/>(System.IdentityModel.Tokens.SecurityKey).</param>
            <param name="keys">A collection of <see cref="T:System.IdentityModel.Tokens.SecurityKey"/></param>
            <exception cref="T:System.ArgumentNullException">'name' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'keys' is null.</exception>
            <exception cref="T:System.ArgumentException">string.IsNullOrWhiteSpace( 'name' ) is true.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeySecurityToken.ResolveKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
            <summary>
            Gets the first<see cref="T:System.IdentityModel.Tokens.SecurityKey"/> that matches a <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/>
            </summary>
            <param name="keyIdentifierClause">the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> to match.</param>
            <returns>The first <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> that matches the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/>.
            <para>null if there is no match.</para></returns>
            <para>Only <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause"/> are matched.</para>
            <exception cref="T:System.ArgumentNullException">'keyIdentifierClause' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.NamedKeySecurityToken.MatchesKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)">
            <summary>
            Answers if the <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/> is a match.
            </summary>
            <param name="keyIdentifierClause">The <see cref="T:System.IdentityModel.Tokens.SecurityKeyIdentifierClause"/></param>
            <returns>true if matched.</returns>
            <remarks><para>A successful match occurs when <see cref="P:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause.Name"/> == <see cref="P:System.IdentityModel.Tokens.NamedKeySecurityToken.Id"/>.</para>
            <para>Only <see cref="T:System.IdentityModel.Tokens.NamedKeySecurityKeyIdentifierClause"/> are matched.</para></remarks>
            <exception cref="T:System.ArgumentNullException">'keyIdentifierClause' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeySecurityToken.Id">
            <summary>
            Gets the id
            </summary>
            <remarks>The default this is the 'name' passed to <see cref="M:System.IdentityModel.Tokens.NamedKeySecurityToken.#ctor(System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityKey})"/></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeySecurityToken.ValidFrom">
            <summary>
            Gets the creation time as a <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>The default is: <see cref="P:System.DateTime.UtcNow"/> set in <see cref="M:System.IdentityModel.Tokens.NamedKeySecurityToken.#ctor(System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityKey})"/>.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeySecurityToken.ValidTo">
            <summary>
            Gets the expiration time as a <see cref="T:System.DateTime"/>
            </summary>
            <remarks>The default is: <see cref="F:System.DateTime.MaxValue"/>.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.NamedKeySecurityToken.SecurityKeys">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/>(s).
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.SignatureProviderFactory">
            <summary>
            Creates <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/>s by specifying a <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> and algorithm.
            <para>Supports both <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/> and <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/>.</para>
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumAsymmetricKeySizeInBitsForSigning">
            <summary>
            This is the minimum <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>.KeySize when creating signatures.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumAsymmetricKeySizeInBitsForVerfying">
            <summary>
            This is the minimum <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>.KeySize when verifying signatures.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumSymmetricKeySizeInBits">
            <summary>
            This is the minimum <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/>.KeySize when creating and verifying signatures.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForSigning(System.IdentityModel.Tokens.SecurityKey,System.String)">
            <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/> that supports the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> and algorithm.
            </summary>
            <exception cref="T:System.ArgumentNullException">'key' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'algorithm' is null.</exception>
            <exception cref="T:System.ArgumentException">'algorithm' contains only whitespace.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">'<see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForSigning"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">'<see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/>' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumSymmetricKeySizeInBits"/>.</exception>
            <exception cref="T:System.ArgumentException">'<see cref="T:System.IdentityModel.Tokens.SecurityKey"/>' is not a <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/> or a <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/>.</exception>
            <remarks>AsymmetricSignatureProviders require access to a PrivateKey for Signing.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.SignatureProviderFactory.CreateForVerifying(System.IdentityModel.Tokens.SecurityKey,System.String)">
            <summary>
            Returns a <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/> instance supports the <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> and algorithm.
            </summary>
            <exception cref="T:System.ArgumentNullException">'key' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'algorithm' is null.</exception>
            <exception cref="T:System.ArgumentException">'algorithm' contains only whitespace.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">'<see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForVerifying"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">'<see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/>' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumSymmetricKeySizeInBits"/>.</exception>
            <exception cref="T:System.ArgumentException">'<see cref="T:System.IdentityModel.Tokens.SecurityKey"/>' is not a <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/> or a <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/>.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.SignatureProviderFactory.ReleaseProvider(System.IdentityModel.Tokens.SignatureProvider)">
            <summary>
            When finished with a <see cref="T:System.IdentityModel.Tokens.SignatureProvider"/> call this method for cleanup. The default behavior is to call <see cref="M:System.IdentityModel.Tokens.SignatureProvider.Dispose"/>
            </summary>
            <param name="signatureProvider"><see cref="T:System.IdentityModel.Tokens.SignatureProvider"/> to be released.</param>
        </member>
        <member name="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumSymmetricKeySizeInBits">
            <summary>
            Gets or sets the minimum <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/>.KeySize"/&gt;.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' is smaller than <see cref="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumSymmetricKeySizeInBits"/>.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForSigning">
            <summary>
            Gets or sets the minimum <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>.KeySize for creating signatures.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' is smaller than <see cref="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumAsymmetricKeySizeInBitsForSigning"/>.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumAsymmetricKeySizeInBitsForVerifying">
            <summary>
            Gets or sets the minimum <see cref="T:System.IdentityModel.Tokens.AsymmetricSecurityKey"/>.KeySize for verifying signatures.
            <exception cref="T:System.ArgumentOutOfRangeException">'value' is smaller than <see cref="F:System.IdentityModel.Tokens.SignatureProviderFactory.AbsoluteMinimumAsymmetricKeySizeInBitsForVerfying"/>.</exception>
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.SymmetricSignatureProvider">
            <summary>
            Provides signing and verifying operations using a <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/> and specifying an algorithm.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(System.IdentityModel.Tokens.SymmetricSecurityKey,System.String)">
            <summary>
            Creates an instance of a signature provider that uses an <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/> to create and / or verify signatures over a array of bytes.
            </summary>
            <param name="key">The <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/> used for signing.</param>
            <param name="algorithm">The signature algorithm to use.</param>
            <exception cref="T:System.ArgumentNullException">'key' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'algorithm' is null.</exception>
            <exception cref="T:System.ArgumentException">'algorithm' contains only whitespace.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">'<see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/>.KeySize' is smaller than <see cref="P:System.IdentityModel.Tokens.SignatureProviderFactory.MinimumSymmetricKeySizeInBits"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)"/> throws.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)"/> returns null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:System.IdentityModel.Tokens.SymmetricSecurityKey.GetSymmetricKey"/> throws.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose">
            <summary>
            Calls <see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)"/> and <see cref="M:System.GC.SuppressFinalize(System.Object)"/>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)">
            <summary>
            Disposes of internal components.
            </summary>
            <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer.</param>
        </member>
        <member name="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Sign(System.Byte[])">
            <summary>
            Produces a signature over the 'input' using the <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/> and 'algorithm' passed to <see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(System.IdentityModel.Tokens.SymmetricSecurityKey,System.String)"/>.
            </summary>
            <param name="input">bytes to sign.</param>
            <returns>signed bytes</returns>
            <exception cref="T:System.ArgumentNullException">'input' is null. </exception>
            <exception cref="T:System.ArgumentException">'input.Length' == 0. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)"/> has been called.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/> is null. This can occur if a derived type deletes it or does not create it.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Verify(System.Byte[],System.Byte[])">
            <summary>
            Verifies that a signature created over the 'input' matches the signature. Using <see cref="T:System.IdentityModel.Tokens.SymmetricSecurityKey"/> and 'algorithm' passed to <see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(System.IdentityModel.Tokens.SymmetricSecurityKey,System.String)"/>.
            </summary>
            <param name="input">bytes to verify.</param>
            <param name="signature">signature to compare against.</param>
            <returns>true if computed signature matches the signature parameter, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">'input' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'signature' is null.</exception>
            <exception cref="T:System.ArgumentException">'input.Length' == 0.</exception>
            <exception cref="T:System.ArgumentException">'signature.Length' == 0. </exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)"/> has been called.</exception>
            <exception cref="T:System.InvalidOperationException">if the internal <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/> is null. This can occur if a derived type deletes it or does not create it.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.SymmetricSignatureProvider.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays for equality. Hash size is fixed normally it is 32 bytes.
            The attempt here is to take the same time if an attacker shortens the signature OR changes some of the signed contents.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.TokenValidationParameters">
            <summary>
            Contains a set of parameters that are used by <see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler"/> when validating a <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.TokenValidationParameters.#ctor">
            <summary>
            Creates a new <see cref="T:System.IdentityModel.Tokens.TokenValidationParameters"/> with <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AudienceUriMode"/> = BearerKeyOnly and <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.SaveBootstrapContext"/> = false.
            </summary>
            
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.AllowedAudience">
            <summary>
            Gets or sets an audience that is considered valid.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.AllowedAudiences">
            <summary>
            Gets or sets a collection of audiences that are considered valid.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.AudienceUriMode">
            <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.TokenValidationParameters.AudienceUriMode"/> to use when validating audience values.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.SaveBootstrapContext">
            <summary>
            Gets or sets a value indicating whether <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> should be attached to <see cref="P:System.Security.Claims.ClaimsIdentity.BootstrapContext"/> during validation.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.SigningToken">
            <summary>
            Gets or sets a <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> to use when validating signatures.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.SigningTokens">
            <summary>
            Gets or sets a collection of <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> to use when validating signatures.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidateIssuer">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:System.IdentityModel.Tokens.JwtSecurityToken.Issuer"/> should be validated.
            </summary>
            <remarks>The <see cref="T:System.IdentityModel.Tokens.JwtSecurityToken"/> must have an Issuer that is other than whitespace.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuer">
            <summary>
            Gets or sets an issuer that is considered valid.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.TokenValidationParameters.ValidIssuers">
            <summary>
            Gets or sets a collection of issuers that is considered valid.
            </summary>
        </member>
    </members>
</doc>

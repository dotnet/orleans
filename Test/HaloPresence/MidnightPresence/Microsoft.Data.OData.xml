<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Data.OData</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Data.OData.Evaluation.LiteralFormatter">
            <summary>
            Component for formatting literals for use in URIs, ETags, and skip-tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.LiteralFormatter.HexValues">
            <summary>Constant table of nibble-to-hex convertion values.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultInstance">
            <summary>Default singleton instance for parenthetical keys, etags, or skiptokens.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultInstanceWithoutEncoding">
            <summary>Default singleton instance which does not URL-encode the resulting string.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.LiteralFormatter.KeyAsSegmentInstance">
            <summary>Default singleton instance for keys formatted as segments.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.ForKeys(System.Boolean)">
            <summary>
            Gets the literal formatter for keys.
            </summary>
            <param name="keysAsSegment">if set to <c>true</c> then the key is going to be written as a segment, rather than in parentheses.</param>
            <returns>The literal formatter for keys.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.Format(System.Object)">
            <summary>Converts the specified value to an encoded, serializable string for URI key.</summary>
            <param name="value">Non-null value to convert.</param>
            <returns>value converted to a serializable string for URI key.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.EscapeResultForUri(System.String)">
            <summary>
            Escapes the result accoridng to URI escaping rules.
            </summary>
            <param name="result">The result to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.ConvertByteArrayToKeyString(System.Byte[])">
            <summary>Converts the given byte[] into string.</summary>
            <param name="byteArray">byte[] that needs to be converted.</param>
            <returns>String containing hex values representing the byte[].</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.FormatRawLiteral(System.Object)">
            <summary>
            Formats the literal without a type prefix, quotes, or escaping.
            </summary>
            <param name="value">The non-null value to format.</param>
            <returns>The formatted literal, without type marker or quotes.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.FormatAndEscapeLiteral(System.Object)">
            <summary>
            Formats the literal without a type prefix or quotes, but does escape it.
            </summary>
            <param name="value">The non-null value to format.</param>
            <returns>The formatted literal, without type marker or quotes.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.LiteralFormatter.ForConstants">
            <summary>
            Gets the literal formatter for URL constants.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.LiteralFormatter.ForConstantsWithoutEncoding">
            <summary>
            Gets the literal formatter for URL constants which does not URL-encode the string.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.LiteralFormatter.SharedUtils">
            <summary>
            Helper utilities that capture any deltas between ODL, the WCF DS Client, and the WCF DS Server.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.SharedUtils.CreateExceptionForUnconvertableType(System.Object)">
            <summary>
            Creates a new exception instance to be thrown if the value is not a type that can be formatted as a literal.
            DEVNOTE: Will return a different exception depending on whether this is ODataLib, the WCF DS Server, or the WCF DS client.
            </summary>
            <param name="value">The literal value that could not be converted.</param>
            <returns>The exception that should be thrown.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.SharedUtils.TryConvertToStandardType(System.Object,System.Object@)">
            <summary>
            Tries to convert the given value to one of the standard recognized types. Used specifically for handling XML and binary types.
            </summary>
            <param name="value">The original value.</param>
            <param name="converted">The value converted to one of the standard types.</param>
            <returns>Whether or not the value was converted.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.SharedUtils.AppendDecimalMarkerToDouble(System.String)">
            <summary>
            Appends the decimal marker to string form of double value if necessary.
            DEVNOTE: Only used by the client and ODL, for legacy/back-compat reasons.
            </summary>
            <param name="input">Input string.</param>
            <returns>String with decimal marker optionally added.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.SharedUtils.ShouldAppendLiteralSuffixToDouble(System.Double)">
            <summary>
            Returns whether a 'd' literal suffix to a double value based on its value.
            DEVNOTE: The WCF DS client never added the 'd', but WCF DS Server and ODL do.
            </summary>
            <param name="value">The value itself.</param>
            <returns>Whether or not to append the 'd' suffix.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.SharedUtils.TryGetByteArrayFromBinary(System.Object,System.Byte[]@)">
            <summary>
            Tries to convert an instance of System.Data.Linq.Binary to a byte array.
            </summary>
            <param name="value">The original value which might be an instance of System.Data.Linq.Binary.</param>
            <param name="array">The converted byte array, if it was converted.</param>
            <returns>Whether or not the value was converted.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter">
            <summary>
            Default literal formatter implementation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter.disableUrlEncoding">
            <summary>If true, literals will not be URL encoded.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter"/>.
            </summary>
            <param name="disableUrlEncoding">If true, literals will not be URL encoded.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter.Format(System.Object)">
            <summary>Converts the specified value to an encoded, serializable string for URI key.</summary>
            <param name="value">Non-null value to convert.</param>
            <returns>value converted to a serializable string for URI key.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter.EscapeResultForUri(System.String)">
            <summary>
            Escapes the result accoridng to URI escaping rules.
            </summary>
            <param name="result">The result to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.DefaultLiteralFormatter.FormatLiteralWithTypePrefix(System.Object)">
            <summary>
            Formats the literal with a type prefix and quotes (if the type requires it).
            </summary>
            <param name="value">The value to format.</param>
            <returns>The formatted literal, with type marker if needed.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.LiteralFormatter.KeysAsSegmentsLiteralFormatter">
            <summary>
            Literal formatter for keys which are written as URI segments. 
            Very similar to the default, but it never puts the type markers or single quotes around the value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.KeysAsSegmentsLiteralFormatter.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Data.OData.Evaluation.LiteralFormatter.KeysAsSegmentsLiteralFormatter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.KeysAsSegmentsLiteralFormatter.Format(System.Object)">
            <summary>Converts the specified value to an encoded, serializable string for URI key.</summary>
            <param name="value">Non-null value to convert.</param>
            <returns>value converted to a serializable string for URI key.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.LiteralFormatter.KeysAsSegmentsLiteralFormatter.EscapeLeadingDollarSign(System.String)">
            <summary>
            If the string starts with a '$', prepends another '$' to escape it.
            </summary>
            <param name="stringValue">The string value.</param>
            <returns>The string value with a leading '$' escaped, if one was present.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.KeySerializer">
            <summary>
            Component for serializing entity key values for building identities, edit links, etc.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.KeySerializer.DefaultInstance">
            <summary>Singleton instance of the default serializer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.KeySerializer.SegmentInstance">
            <summary>Singleton instance of the segment-based serializer.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.Create(Microsoft.Data.OData.Evaluation.UrlConvention)">
            <summary>
            Creates a new key serializer.
            </summary>
            <param name="urlConvention">The url convention to use.</param>
            <returns>
            A new key serializer.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.AppendKeyExpression``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object})">
            <summary>
            Appends the key expression for an entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="builder">The builder to append onto.</param>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyName">The callback to get each property's name.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.GetKeyValueAsString``1(System.Func{``0,System.Object},``0,Microsoft.Data.OData.Evaluation.LiteralFormatter)">
            <summary>
            Gets the value of the key property and serializes it to a string.
            </summary>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="getPropertyValue">The callback to get the value for a property.</param>
            <param name="property">The key property.</param>
            <param name="literalFormatter">The literal formatter to use.</param>
            <returns>The serialized key property value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.AppendKeyWithParentheses``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object})">
            <summary>
            Appends the key using the parentheses-based syntax (e.g. Customers(1)) onto the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The builder to append onto.</param>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyName">The callback to get each property's name.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.KeySerializer.DefaultKeySerializer">
            <summary>
            Default implementation of the key serializer which uses parentheses (e.g. Customers(1)).
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.DefaultKeySerializer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Data.OData.Evaluation.KeySerializer.DefaultKeySerializer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.DefaultKeySerializer.AppendKeyExpression``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object})">
            <summary>
            Appends the key expression for an entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="builder">The builder to append onto.</param>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyName">The callback to get each property's name.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.KeySerializer.SegmentKeySerializer">
            <summary>
            Implementation of the key serializer which uses segments (e.g. Customers/1).
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.SegmentKeySerializer.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Data.OData.Evaluation.KeySerializer.SegmentKeySerializer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.SegmentKeySerializer.AppendKeyExpression``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.String},System.Func{``0,System.Object})">
            <summary>
            Appends the key expression for an entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="builder">The builder to append onto.</param>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyName">The callback to get each property's name.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.KeySerializer.SegmentKeySerializer.AppendKeyWithSegments``1(System.Text.StringBuilder,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Object})">
            <summary>
            Appends the key for the current resource using segment-based syntax (e.g. Customers/1) onto the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="builder">The builder to append onto.</param>
            <typeparam name="TProperty">The type used to represent properties.</typeparam>
            <param name="keyProperties">The key properties.</param>
            <param name="getPropertyValue">The callback to get each property's value.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.UrlConvention">
            <summary>
            Component for representing the url convention in use by the server, client, or codegen.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.UrlConvention.ConventionTermNamespace">
            <summary>
            The namespace of the term to use when building value annotations for indicating the conventions used.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.UrlConvention.ConventionTermName">
            <summary>
            The name of the term to use when building value annotations for indicating the conventions used.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.UrlConvention.KeyAsSegmentConventionName">
            <summary>
            The string value for indicating that the key-as-segment convention is being used in annotations and headers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.UrlConvention.UrlConventionHeaderName">
            <summary>
            The name of the request header for indicating what conventions are being used.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.UrlConvention.generateKeyAsSegment">
            <summary>
            Whether to generate entity keys as '/'-delimited segments instead of using parenthesis.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.UrlConvention.#ctor(System.Boolean)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Data.OData.Evaluation.UrlConvention"/> class from being created.
            </summary>
            <param name="generateKeyAsSegment">Whether keys should be generated as segments.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.UrlConvention.CreateWithExplicitValue(System.Boolean)">
            <summary>
            Helper for creating an instance with explicit value. Should only be called from unit tests.
            </summary>
            <param name="generateKeyAsSegment">Whether keys should be generated as segments.</param>
            <returns>A new UrlConvention instance with the given value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.UrlConvention.ForEntityContainer(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityContainer)">
            <summary>
            Gets the url convention for the given entity container based on its vocabulary annotations.
            </summary>
            <param name="model">The model the entity container belongs to.</param>
            <param name="container">The container to get the url convention for.</param>
            <returns>The url convention of the container.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.UrlConvention.ForUserSettingAndTypeContext(System.Nullable{System.Boolean},Microsoft.Data.OData.IODataFeedAndEntryTypeContext)">
            <summary>
            Gets the url convention for the given user setting and type context.
            </summary>
            <param name="keyAsSegment">true if keys should go in seperate segments in auto-generated URIs, false if they should go in parentheses.
            A null value means the user hasn't specified a preference and we should look for an annotation in the entity container, if available.</param>
            <param name="typeContext">The type context for the entry or feed being written.</param>
            <returns>The convention to use when generating URLs.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.UrlConvention.IsKeyAsSegmentUrlConventionAnnotation(Microsoft.Data.Edm.Annotations.IEdmValueAnnotation)">
            <summary>
            Determines whether or not the annotation indicates the 'KeyAsSegment' url-convention.
            </summary>
            <param name="annotation">The annotation to check.</param>
            <returns>True if the annotation indicates the 'KeyAsSegment' url convention; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.UrlConvention.IsKeyAsSegment(Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Determines whether or not the value is 'KeyAsSegment'.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True if the value is 'KeyAsSegment'.; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.UrlConvention.IsUrlConventionTerm(Microsoft.Data.Edm.IEdmTerm)">
            <summary>
            Determines whether or not the term is the url-convention term.
            </summary>
            <param name="term">The term to check.</param>
            <returns>True if the term is the url-convention term.; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.UrlConvention.GenerateKeyAsSegment">
            <summary>
            Whether to generate entity keys as '/'-delimited segments instead of using parenthesis.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.BinaryOperatorBinder">
            <summary>
            Class that knows how to bind binary operators.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorBinder.bindMethod">
            <summary>
            Method to use for binding the parent node, if needed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorBinder.#ctor(System.Func{Microsoft.Data.OData.Query.SyntacticAst.QueryToken,Microsoft.Data.OData.Query.SemanticAst.QueryNode})">
            <summary>
            Constructs a BinaryOperatorBinder with the given method to be used binding the parent token if needed.
            </summary>
            <param name="bindMethod">Method to use for binding the parent token, if needed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorBinder.BindBinaryOperator(Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Binds a binary operator token.
            </summary>
            <param name="binaryOperatorToken">The binary operator token to bind.</param>
            <returns>The bound binary operator token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorBinder.PromoteOperandTypes(Microsoft.Data.OData.Query.BinaryOperatorKind,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode@,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode@)">
            <summary>
            Promote the left and right operand types
            </summary>
            <param name="binaryOperatorKind">the operator kind</param>
            <param name="left">the left operand</param>
            <param name="right">the right operand</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorBinder.GetOperandFromToken(Microsoft.Data.OData.Query.BinaryOperatorKind,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Retrieve SingleValueNode bound with given query token.
            </summary>
            <param name="operatorKind">the query token kind</param>
            <param name="queryToken">the query token</param>
            <returns>the corresponding SingleValueNode</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.BindingState">
            <summary>
            Encapsulates the state of metadata binding.
            TODO finish moving fields from MetadataBinder here and see if anything can be removed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BindingState.configuration">
            <summary>
            The configuration used for binding.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BindingState.rangeVariables">
            <summary>
            The dictionary used to store mappings between Any visitor and corresponding segment paths
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BindingState.implicitRangeVariable">
            <summary>
            If there is a  $filter or $orderby, then this member holds the reference to the parameter node for the 
            implicit parameter ($it) for all expressions.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BindingState.queryOptions">
            <summary>
            Collection of query option tokens associated with the currect query being processed.
            If a given query option is bound it should be removed from this collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BindingState.#ctor(Microsoft.Data.OData.Query.ODataUriParserConfiguration)">
            <summary>
            Constructs a <see cref="T:Microsoft.Data.OData.Query.BindingState"/> with the given <paramref name="configuration"/>.
            </summary>
            <param name="configuration">The configuration used for binding.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.BindingState.Model">
            <summary>
            The model used for binding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.BindingState.Configuration">
            <summary>
            The configuration used for binding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.BindingState.ImplicitRangeVariable">
            <summary>
            If there is a  $filter or $orderby, then this member holds the reference to the parameter node for the 
            implicit parameter ($it) for all expressions.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.BindingState.RangeVariables">
            <summary>
            The dictionary used to store mappings between Any visitor and corresponding segment paths
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.BindingState.QueryOptions">
            <summary>
            Collection of query option tokens associated with the currect query being processed.
            If a given query option is bound it should be removed from this collection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriParserConfiguration">
            <summary>
            Internal class for storing all the configuration information about the URI parser. Allows us to flow these values around without passing an actual parser.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserConfiguration.model">
            <summary>
            Model to use for metadata binding.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserConfiguration.serviceRoot">
            <summary>
            Absolute URI of the service root.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserConfiguration.urlConventions">
            <summary>The conventions to use when parsing URLs.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParserConfiguration.#ctor(Microsoft.Data.Edm.IEdmModel,System.Uri)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.OData.Query.ODataUriParserConfiguration"/>.
            </summary>
            <param name="model">Model to use for metadata binding.</param>
            <param name="serviceRoot">Absolute URI of the service root.</param>
            <exception cref="T:System.ArgumentNullException">Throws if input model is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input serviceRoot is not an AbsoluteUri</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserConfiguration.Settings">
            <summary>
            The settings for this instance of <see cref="T:Microsoft.Data.OData.Query.ODataUriParser"/>. Refer to the documentation for the individual properties of <see cref="T:Microsoft.Data.OData.Query.ODataUriParserSettings"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserConfiguration.Model">
            <summary>
            Gets the model for this ODataUriParser
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserConfiguration.ServiceRoot">
            <summary>
            Gets the absolute URI of the service root.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserConfiguration.UrlConventions">
            <summary>
            Gets or Sets the <see cref="T:Microsoft.Data.OData.Query.ODataUrlConventions"/> to use while parsing, specifically
            whether to recognize keys as segments or not.
            </summary>
            <exception cref="T:System.ArgumentNullException">Throws if the input value is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserConfiguration.BatchReferenceCallback">
            <summary>
            Gets or Sets a callback that returns a BatchReferenceSegment (to be used for $0 in batch)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserConfiguration.FunctionParameterAliasCallback">
            <summary>
            Gets or sets a callback that returns the raw string value for an aliased function parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.DottedIdentifierBinder">
            <summary>
            Class that knows how to bind CastTokens.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DottedIdentifierBinder.bindMethod">
            <summary>
            Method to use for binding the parent node, if needed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DottedIdentifierBinder.#ctor(Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Constructs a DottedIdentifierBinder with the given method to be used binding the parent token if needed.
            </summary>
            <param name="bindMethod">Method to use for binding the parent token, if needed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DottedIdentifierBinder.BindDottedIdentifier(Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Binds a DottedIdentifierToken and it's parent node (if needed).
            </summary>
            <param name="dottedIdentifierToken">Token to bind to metadata.</param>
            <param name="state">State of the Binding.</param>
            <returns>A bound node representing the cast.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.DataServiceProviderMethods">
            <summary>Use this class to perform late-bound operations on data service entity sets.</summary>
            <remarks>This class was copied from the product.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.GetValueMethodInfo">
            <summary>MethodInfo for object DataServiceProviderMethods.GetValue(this object value, string propertyName).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.GetSequenceValueMethodInfo">
            <summary>MethodInfo for IEnumerable&lt;T&gt; DataServiceProviderMethods.GetSequenceValue(this object value, string propertyName).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.ConvertMethodInfo">
            <summary>MethodInfo for Convert.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.TypeIsMethodInfo">
            <summary>MethodInfo for TypeIs.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.StringCompareMethodInfo">
            <summary>Method info for string comparison</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.BoolCompareMethodInfo">
            <summary>Method info for Bool comparison</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.BoolCompareMethodInfoNullable">
            <summary>Method info for Bool? comparison</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.GuidCompareMethodInfo">
            <summary>Method info for Guid comparison</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.GuidCompareMethodInfoNullable">
            <summary>Method info for Guid? comparison</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.AreByteArraysEqualMethodInfo">
            <summary>Method info for byte array comparison.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.DataServiceProviderMethods.AreByteArraysNotEqualMethodInfo">
            <summary>Method info for byte array comparison.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.GetValue(System.Object,Microsoft.Data.Edm.IEdmProperty)">
            <summary>Gets a named value from the specified object.</summary>
            <param name="value">Object to get value from.</param>
            <param name="property"><see cref="T:Microsoft.Data.Edm.IEdmProperty"/> describing the property whose value needs to be fetched.</param>
            <returns>The requested value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.GetSequenceValue``1(System.Object,Microsoft.Data.Edm.IEdmProperty)">
            <summary>Gets a named value from the specified object as a sequence.</summary>
            <param name="value">Object to get value from.</param>
            <param name="property"><see cref="T:Microsoft.Data.Edm.IEdmProperty"/> describing the property whose value needs to be fetched.</param>
            <typeparam name="T">expected result type</typeparam>
            <returns>The requested value as a sequence; null if not found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.Convert(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Performs an type cast on the specified value.</summary>
            <param name='value'>Value.</param>
            <param name='typeReference'>Type reference to check for.</param>
            <returns>Casted value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.TypeIs(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Performs an type check on the specified value.</summary>
            <param name='value'>Value.</param>
            <param name='typeReference'>Type reference type to check for.</param>
            <returns>True if value is-a type; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.Compare(System.String,System.String)">
            <summary>
            Compares 2 strings by ordinal, used to obtain MethodInfo for comparison operator expression parameter
            </summary>
            <param name="left">Left Parameter</param>
            <param name="right">Right Parameter</param>
            <returns>0 for equality, -1 for left less than right, 1 for left greater than right</returns>
            <remarks>
            Do not change the name of this function because LINQ to SQL is sensitive about the 
            method name, so is EF probably.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.Compare(System.Boolean,System.Boolean)">
            <summary>
            Compares 2 booleans with true greater than false, used to obtain MethodInfo for comparison operator expression parameter
            </summary>
            <param name="left">Left Parameter</param>
            <param name="right">Right Parameter</param>
            <returns>0 for equality, -1 for left less than right, 1 for left greater than right</returns>
            <remarks>
            Do not change the name of this function because LINQ to SQL is sensitive about the 
            method name, so is EF probably.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.Compare(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Compares 2 nullable booleans with true greater than false, used to obtain MethodInfo for comparison operator expression parameter
            </summary>
            <param name="left">Left Parameter</param>
            <param name="right">Right Parameter</param>
            <returns>0 for equality, -1 for left less than right, 1 for left greater than right</returns>
            <remarks>
            Do not change the name of this function because LINQ to SQL is sensitive about the 
            method name, so is EF probably.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.Compare(System.Guid,System.Guid)">
            <summary>
            Compares 2 guids by byte order, used to obtain MethodInfo for comparison operator expression parameter
            </summary>
            <param name="left">Left Parameter</param>
            <param name="right">Right Parameter</param>
            <returns>0 for equality, -1 for left less than right, 1 for left greater than right</returns>
            <remarks>
            Do not change the name of this function because LINQ to SQL is sensitive about the 
            method name, so is EF probably.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.Compare(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Compares 2 nullable guids by byte order, used to obtain MethodInfo for comparison operator expression parameter
            </summary>
            <param name="left">Left Parameter</param>
            <param name="right">Right Parameter</param>
            <returns>0 for equality, -1 for left less than right, 1 for left greater than right</returns>
            <remarks>
            Do not change the name of this function because LINQ to SQL is sensitive about the 
            method name, so is EF probably.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.AreByteArraysEqual(System.Byte[],System.Byte[])">
            <summary>Compares two byte arrays for equality.</summary>
            <param name="left">First byte array.</param>
            <param name="right">Second byte array.</param>
            <returns>true if the arrays are equal; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.DataServiceProviderMethods.AreByteArraysNotEqual(System.Byte[],System.Byte[])">
            <summary>Compares two byte arrays for equality.</summary>
            <param name="left">First byte array.</param>
            <param name="right">Second byte array.</param>
            <returns>true if the arrays are not equal; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExceptionUtil">
            <summary>
            Helper class for throwing exceptions during URI parsing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExceptionUtil.CreateResourceNotFound(System.String)">
            <summary>Creates a new "Resource Not Found" exception.</summary>
            <param name="identifier">segment identifier information for which resource was not found.</param>
            <returns>A new exception to indicate the requested resource cannot be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExceptionUtil.ResourceNotFoundError(System.String)">
            <summary>Creates a new "Resource Not Found" exception.</summary>
            <param name="errorMessage">Plain text error message for this exception.</param>
            <returns>A new exception to indicate the requested resource cannot be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExceptionUtil.CreateSyntaxError">
            <summary>Creates a new exception to indicate a syntax error.</summary>
            <returns>A new exception to indicate a syntax error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExceptionUtil.CreateBadRequestError(System.String)">
            <summary>
            Creates a new exception to indicate BadRequest error.
            </summary>
            <param name="message">Plain text error message for this exception.</param>
            <returns>A new exception to indicate a bad request error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExceptionUtil.ThrowSyntaxErrorIfNotValid(System.Boolean)">
            <summary>Checks the specific value for syntax validity.</summary>
            <param name="valid">Whether syntax is valid.</param>
            <remarks>This helper method is used to keep syntax check code more terse.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExceptionUtil.ThrowIfResourceDoesNotExist(System.Boolean,System.String)">
            <summary>Checks the specifid value for syntax validity.</summary>
            <param name="resourceExists">Whether syntax is valid.</param>
            <param name="identifier">segment indentifier for which the resource was null.</param>
            <remarks>This helper method is used to keep syntax check code more terse.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpandDepthAndCountValidator">
            <summary>
            A component for walking an expand tree and determining if the depth or number of items exceed user-specified limits.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpandDepthAndCountValidator.maxDepth">
            <summary>
            The maximum depth of any expand tree being validated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpandDepthAndCountValidator.maxCount">
            <summary>
            The maximum number of expand items allowed in any expand tree being validated, including leaf and non-leaf nodes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpandDepthAndCountValidator.currentCount">
            <summary>
            The current count when validating a particular tree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpandDepthAndCountValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.OData.Query.ExpandDepthAndCountValidator"/>.
            </summary>
            <param name="maxDepth">The maximum depth of an expand tree.</param>
            <param name="maxCount">The maximum number of expanded items allowed in a tree.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpandDepthAndCountValidator.Validate(Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause)">
            <summary>
            Validates the given tree against the user-specified limits.
            </summary>
            <param name="expandTree">The expand tree to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpandDepthAndCountValidator.EnsureMaximumCountAndDepthAreNotExceeded(Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause,System.Int32)">
            <summary>
            Recursively ensures that the maximum count/depth are not exceeded by walking the tree.
            </summary>
            <param name="expandTree">The expand tree to walk and validate.</param>
            <param name="currentDepth">The current depth of the tree walk.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.FunctionParameterParser">
            <summary>
            Component for parsing function parameters in both $filter/$orderby expressions and in paths.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionParameterParser.TrySplitFunctionParameters(Microsoft.Data.OData.Query.ExpressionLexer,System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken}@)">
            <summary>
            Tries to parse a collection of function parameters. Allows path and filter to share the core algorithm while representing parameters differently.
            </summary>
            <param name="lexer">The lexer to read from.</param>
            <param name="splitParameters">The parameters if they were successfully split.</param>
            <returns>Whether the parameters could be split.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionParameterParser.TryParseFunctionParameters(System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken},Microsoft.Data.OData.Query.ODataUriParserConfiguration,Microsoft.Data.Edm.IEdmFunctionImport,System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken}@)">
            <summary>
            Tries to parse a collection of function parameters for filter/orderby.
            </summary>
            <param name="splitParameters">The syntactically split parameters to parse.</param>
            <param name="configuration">The configuration for the URI Parser.</param>
            <param name="functionImport">The function import for the function whose parameters are being parsed.</param>
            <param name="parsedParameters">The parameters if they were successfully parsed.</param>
            <returns>Whether the parameters could be parsed.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionParameterParser.TrySplitFunctionParameters(System.String,System.String,System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken}@)">
            <summary>
            Tries to parse a collection of function parameters for path.
            </summary>     
            <param name="functionName">The function name to use in error messages.</param>
            <param name="parenthesisExpression">The contents of the parentheses portion of the current path segment.</param>
            <param name="splitParameters">The parameters if they were successfully split.</param>
            <returns>Whether the parameters could be split.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionParameterParser.TryParseFunctionParameters(System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken},Microsoft.Data.OData.Query.ODataUriParserConfiguration,Microsoft.Data.Edm.IEdmFunctionImport,System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SemanticAst.OperationSegmentParameter}@)">
            <summary>
            Tries to parse a collection of function parameters for path.
            </summary>     
            <param name="splitParameters">The split parameters from the syntactic parsing step.</param>
            <param name="configuration">The configuration for the URI Parser.</param>
            <param name="functionImport">The function import for the function whose parameters are being parsed.</param>
            <param name="parsedParameters">The parameters if they were successfully parsed.</param>
            <returns>Whether the parameters could be parsed.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionParameterParser.TrySplitFunctionParameters(Microsoft.Data.OData.Query.ExpressionLexer,Microsoft.Data.OData.Query.ExpressionTokenKind,System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken}@)">
            <summary>
            Tries to parse a collection of function parameters. Allows path and filter to share the core algorithm while representing parameters differently.
            </summary>
            <param name="lexer">The lexer to read from.</param>
            <param name="endTokenKind">The token kind that marks the end of the parameters.</param>
            <param name="splitParameters">The parameters if they were successfully split.</param>
            <returns>Whether the parameters could be split.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionParameterParser.TryParseFunctionParameters``1(System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken},Microsoft.Data.OData.Query.ODataUriParserConfiguration,Microsoft.Data.Edm.IEdmFunctionImport,System.Func{System.String,System.Object,``0},System.Collections.Generic.ICollection{``0}@)">
            <summary>
            Tries to parse a collection of function parameters. Allows path and filter to share the core algorithm while representing parameters differently.
            </summary>
            <typeparam name="TParam">The type representing a parameter.</typeparam>
            <param name="splitParameters">The syntactically split parameters to parse.</param>
            <param name="configuration">The configuration for the URI Parser.</param>
            <param name="functionImport">The function import for the function whose parameters are being parsed.</param>
            <param name="createParameter">The callback to use for individual parameter parsing.</param>
            <param name="parsedParameters">The parameters if they were successfully parsed.</param>
            <returns>Whether the parameters could be parsed.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionParameterParser.TryCreateParameterValueToken(Microsoft.Data.OData.Query.ExpressionToken,Microsoft.Data.OData.Query.SyntacticAst.QueryToken@)">
            <summary>
            Tries to create a parameter using any representation based on the provided delegate for creating it from a converted value.
            </summary>
            <param name="expressionToken">The current expression parameterToken from the lexer.</param>
            <param name="parameterValue">The parameter value if one was successfully created.</param>
            <returns>Whether the parameter could be created from the parameterToken.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionParameterParser.TryCreateParameter``1(Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken,Microsoft.Data.OData.Query.ODataUriParserConfiguration,Microsoft.Data.Edm.IEdmTypeReference,System.Func{System.Object,``0},``0@)">
            <summary>
            Tries to create a parameter using any representation based on the provided delegate for creating it from a converted value.
            </summary>
            <typeparam name="TParam">The type used to represent a parameter.</typeparam>
            <param name="parameterToken">The token from the syntactic parsing step.</param>
            <param name="configuration">The configuration for the URI Parser.</param>
            <param name="expectedType">The type that the parameter is expected to resolve to.</param>
            <param name="createParameter">Callback to create the final parameter from the parsed value.</param>
            <param name="parameter">The parameter if one was successfully created.</param>
            <returns>Whether the parameter could be created from the parameterToken.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.RawFunctionParameterValueToken">
            <summary>
            A token to represent a raw function parameter value that has not yet been parsed further.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken">
            <summary>
            Base class for all lexical tokens of OData query.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataAnnotatable">
            <summary>
            Base class for all annotatable types in OData library.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataAnnotatable.annotations">
            <summary>The map of annotationsAsArray keyed by type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataAnnotatable.instanceAnnotations">
            <summary>
            Collection of custom instance annotations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.GetAnnotation``1">
            <summary>Gets or sets the annotation by type.</summary>
            <returns>The annotation of type T or null if not present.</returns>
            <typeparam name="T">The type of the annotation.</typeparam>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.SetAnnotation``1(``0)">
            <summary>Sets an annotation of type T.</summary>
            <param name="annotation">The annotation to set.</param>
            <typeparam name="T">The type of the annotation.</typeparam>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.VerifySetAnnotation(System.Object)">
            <summary>
            Verifies that <paramref name="annotation"/> can be added as an annotation of this.
            </summary>
            <param name="annotation">Annotation instance.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.GetOrCreateAnnotation``1">
            <summary>
            Get the annotation of type <typeparamref name="T"/>. If the annotation is not found, create a new
            instance of the annotation and call SetAnnotation on it then return the newly created instance.
            </summary>
            <typeparam name="T">The type of the annotation.</typeparam>
            <returns>The annotation of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.GetInstanceAnnotations">
            <summary>
            Gets the custom instance annotations.
            </summary>
            <returns>The custom instance annotations.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.SetInstanceAnnotations(System.Collections.Generic.ICollection{Microsoft.Data.OData.ODataInstanceAnnotation})">
            <summary>
            Sets the custom instance annotations.
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.IsOfType(System.Object,System.Type)">
            <summary>
            Check whether a given (non-null) instance is of the specified type (no sub-type).
            </summary>
            <param name="instance">The (non-null) instance to test.</param>
            <param name="type">The type to check for.</param>
            <returns>True if the types match; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.AddOrReplaceAnnotation``1(``0)">
            <summary>
            Replace an existing annotation of type T or add a new one 
            if no annotation of type T exists.
            </summary>
            <typeparam name="T">The type of the annotation.</typeparam>
            <param name="annotation">The annotation to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAnnotatable.RemoveAnnotation``1">
            <summary>
            Remove the annotation of type T from the set of annotations (if such an annotation exists).
            We only allow a single occurence of an annotation of type T.
            </summary>
            <typeparam name="T">The type of the annotation to remove.</typeparam>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.QueryToken.EmptyTokens">
            <summary>
            Empty list of arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.QueryToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.QueryToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.RawFunctionParameterValueToken.#ctor(System.String)">
            <summary>
            Creates a RawFunctionParameterValue
            </summary>
            <param name="rawText">the raw text of this parameter value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.RawFunctionParameterValueToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.RawFunctionParameterValueToken.RawText">
            <summary>
            Gets the raw text of the value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.RawFunctionParameterValueToken.Kind">
            <summary>
            Gets the kind of this token
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterAliasToken">
            <summary>
            A token to represent a parameter alias in a function call.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterAliasToken.#ctor(System.String)">
            <summary>
            Creates a FunctionParameterAliasToken
            </summary>
            <param name="alias">the alias being used for the parameter.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterAliasToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterAliasToken.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterAliasToken.Kind">
            <summary>
            Gets the kind of this token
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken">
            <summary>
            A token to represent a parameter to a function call.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken.EmptyParameterList">
            <summary>
            get an empty list of parameters
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken.parameterName">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken.valueToken">
            <summary>
            The value of this parameter
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken.#ctor(System.String,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Creates a FunctionParameterToken
            </summary>
            <param name="parameterName">the name of this parameter</param>
            <param name="valueToken">the syntactically parsed value</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken.ParameterName">
            <summary>
            Gets the name of this parameter 
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken.ValueToken">
            <summary>
            Gets the syntactically parsed value of this token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken.Kind">
            <summary>
            Gets the kind of this token
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode">
            <summary>
            Node representing a semantically parsed parameter to a function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode">
            <summary>
            Base class for all semantic metadata bound nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.QueryNode.Kind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.QueryNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode.name">
            <summary>
            The name of this parameter
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode.value">
            <summary>
            The semantically parsed value of this parameter
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode.#ctor(System.String,Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Creates a NamedFunctionParameterNode to represent a semantically parsed parameter to a function.
            </summary>
            <param name="name">the name of this function</param>
            <param name="value">the already semantically parsed value of this parameter.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode.Name">
            <summary>
            Gets the name of this parameter
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode.Value">
            <summary>
            Gets the semantically parsed value of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode.Kind">
            <summary>
            Gets the kind of this node
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriParserSettings">
            <summary>
            Settings used by <see cref="T:Microsoft.Data.OData.Query.ODataUriParser"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.DefaultFilterLimit">
            <summary>
            Default recursive call limit for Filter
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.DefaultOrderByLimit">
            <summary>
            Default recursive call limit for OrderBy
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.DefaultSelectExpandLimit">
            <summary>
            Default tree depth for Select and Expand
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.DefaultPathLimit">
            <summary>
            Default limit for the path parser.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.filterLimit">
            <summary>
            the recursive depth of the Syntactic tree for a filter clause
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.orderByLimit">
            <summary>
            the maximum depth of the syntactic tree for an orderby clause
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.pathLimit">
            <summary>
            the maximum number of segments in a path
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.selectExpandLimit">
            <summary>
            the maximum depth of the Syntactic or Semantic tree for a Select or Expand clause
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.supportExpandOptions">
            <summary>
            Flag that indiactes whether or not inlined query options like $filter within $expand clauses as supported.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.useWcfDataServicesServerBehavior">
            <summary>
            Whether use the behavior that the WCF DS Server had before integration.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.maxExpandDepth">
            <summary>
            The maximum depth of the tree that results from parsing $expand. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParserSettings.maxExpandCount">
            <summary>
            The maximum number of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem"/> instances that can appear in the tree that results from parsing $expand.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParserSettings.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.OData.Query.ODataUriParserSettings"/> with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParserSettings.EnableWcfDataServicesServerBehavior">
            <summary>Specifies whether the WCF data services server behavior is enabled.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserSettings.MaximumExpansionDepth">
            <summary>
            Gets or sets the maximum depth of the tree that results from parsing $expand. 
            </summary>
            <remarks>
            This will be validated after parsing completes, and so should not be used to prevent the instantiation of large trees. 
            Further, redundant expansions will be pruned before validation and will not count towards the maximum.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserSettings.MaximumExpansionCount">
            <summary>
            Gets or sets the maximum number of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem"/> instances that can appear in the tree that results from parsing $expand.
            </summary>
            <remarks>
            This will be validated after parsing completes, and so should not be used to prevent the instantiation of large trees. 
            Further, redundant expansions will be pruned before validation and will not count towards the maximum.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserSettings.SelectExpandLimit">
            <summary>
            Gets or Sets the maximum recursive depth for a select and expand clause, which limits the maximum depth of the tree that can be parsed by the 
            syntactic parser. This guarantees a set level of performance.
            </summary>
            <remarks>
            The number here doesn't necessarily correspond exactly with the actual maximum recursive depth of the syntactic tree,
            i.e  a limit of 20 doesn't necessarily mean that a tree will have depth exactly 20, it may have depth 10 (but never over 20). 
            Think of it more as an upper bound.
            </remarks>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the input value is negative.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserSettings.UseWcfDataServicesServerBehavior">
            <summary>
            Gets or Sets a flag that indicates Whether use the behavior that the WCF DS Server had before integration.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserSettings.SupportExpandOptions">
            <summary>
            Gets or sets a flag that indiactes whether or not inlined query options like $filter within $expand clauses as supported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserSettings.FilterLimit">
            <summary>
            Gets or Sets the limit on the maximum depth of the filter tree that can be parsed by the 
            syntactic parser. This guarantees a set level of performance.
            </summary>
            <remarks>
            The number here doesn't necessarily correspond exactly with the actual maximum recursive depth of the syntactic tree,
            i.e  a limit of 20 doesn't necessarily mean that a tree will have depth exactly 20, it may have depth 10 (but never over 20). 
            Think of it more as an upper bound.
            </remarks>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the input value is negative.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserSettings.OrderByLimit">
            <summary>
            Gets or sets the maximum recursive depth for an orderby clause, which limits the maximum depth of the tree that can be parsed by the 
            syntactic parser. This guarantees a set level of performance.
            </summary>
            <remarks>
            The number here doesn't necessarily correspond exactly with the actual maximum recursive depth of the syntactic tree,
            i.e  a limit of 20 doesn't necessarily mean that a tree will have depth exactly 20, it may have depth 10 (but never over 20). 
            Think of it more as an upper bound.
            </remarks>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the input value is negative.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParserSettings.PathLimit">
            <summary>
            Gets or Sets the limit on the maximum number of segments that can be parsed by the 
            syntactic parser. This guarantees a set level of performance.
            </summary>
            <remarks>
            Unlike Filter, OrderBy, and SelectExpand, this Limit is more concrete, and will
            limit the segments to exactly the number that is specified... i.e. a limit of
            20 will throw if and only if there are more than 20 segments in the path.
            </remarks>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the input value is negative.</exception>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriSemanticBinder">
            <summary>
            Bind an entire Uri to Metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriSemanticBinder.bindingState">
            <summary>
            The current state of the binding algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriSemanticBinder.bindMethod">
            <summary>
            pointer to the metadata bind method.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriSemanticBinder.#ctor(Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Create a new ODataUriSemanticBinder to bind an entire uri to Metadata.
            </summary>
            <param name="bindingState">the current state of the binding algorithm</param>
            <param name="bindMethod">pointer to the metadata bind method.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriSemanticBinder.BindTree(Microsoft.Data.OData.Query.SyntacticTree)">
            <summary>
            Binds a <see cref="T:Microsoft.Data.OData.Query.SyntacticTree"/>.
            </summary>
            <param name="syntax">The query descriptor token to bind.</param>
            <returns>The bound query descriptor.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriSemanticBinder.BindInlineCount(Microsoft.Data.OData.Query.SyntacticTree,Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Bind an inline count option
            </summary>
            <param name="syntax">The inline count option to bind.</param>
            <param name="path">the top level path</param>
            <returns>an InlineCountKind representing this inline count option</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriSemanticBinder.BindSelectExpand(Microsoft.Data.OData.Query.SyntacticTree,Microsoft.Data.OData.Query.SemanticAst.ODataPath,Microsoft.Data.OData.Query.ODataUriParserConfiguration)">
            <summary>
            Bind a select and expand option.
            </summary>
            <param name="syntax">A syntax tree containing the select and expand options to bind</param>
            <param name="path">the top level path</param>
            <param name="configuration">The configuration to use for binding.</param>
            <returns>a select expand clause bound to metadata</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriSemanticBinder.BindTop(Microsoft.Data.OData.Query.SyntacticTree,Microsoft.Data.OData.Query.SemanticAst.RangeVariable,Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Bind a top option
            </summary>
            <param name="syntax">a syntax tree containing the top option to bind</param>
            <param name="rangeVariable">the range variable that iterates over the top level collection</param>
            <param name="path">the top level path</param>
            <returns>a nullable long representing this top option</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriSemanticBinder.BindSkip(Microsoft.Data.OData.Query.SyntacticTree,Microsoft.Data.OData.Query.SemanticAst.RangeVariable,Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Bind a skip option
            </summary>
            <param name="syntax">a syntax tree containing the skip option</param>
            <param name="rangeVariable">the range variable that iterates over the top level collection</param>
            <param name="path">the top level path.</param>
            <returns>a nullable long representing this skip option</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriSemanticBinder.BindOrderBy(Microsoft.Data.OData.Query.SyntacticTree,Microsoft.Data.OData.Query.SemanticAst.RangeVariable,Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Bind an orderby option
            </summary>
            <param name="syntax">a syntac tree containing the orderby option</param>
            <param name="rangeVariable">the range variable that iterates over the top level collection</param>
            <param name="path">the top level path</param>
            <returns>an OrderByClause representing this orderby option</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriSemanticBinder.BindFilter(Microsoft.Data.OData.Query.SyntacticTree,Microsoft.Data.OData.Query.SemanticAst.RangeVariable)">
            <summary>
            Bind a filter option
            </summary>
            <param name="syntax">a syntactic tree containing the filter option</param>
            <param name="rangeVariable">the range variable that iterates over the top level collection.</param>
            <returns>A filter clause representing this filter option</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.FunctionOverloadResolver">
            <summary>
            Helper class to help bind function overloads. 
            This is shared between path and filter/orderby function resolution.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionOverloadResolver.ResolveOverloadsByParameterNames(System.Collections.Generic.ICollection{Microsoft.Data.Edm.IEdmFunctionImport},System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Given a list of possible functions and a list of parameter names, choose a single function that exactly matches
            the parameter names. If more than one function matches, throw.
            </summary>
            <remarks>
            Binding parameters will be ignored in this method. Only non-binding parameters are matched.
            </remarks>
            <param name="functionImports">The list of function imports to search.</param>
            <param name="parameters">The list of non-binding parameter names to match.</param>
            <param name="functionName">Name of the function. Only used for error strings.</param>
            <returns>A single function import that matches the parameter names exactly.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionOverloadResolver.ResolveFunctionsFromList(System.String,System.Collections.Generic.IList{System.String},Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmFunctionImport@)">
            <summary>
            Try to resolve a function from the given inputs.
            </summary>
            <param name="identifier">The identifier of the function that we're trying to find</param>
            <param name="parameterNames">the names of the parameters to search for.</param>
            <param name="bindingType">the type of the previous segment</param>
            <param name="model">the model to use to look up the function import</param>
            <param name="matchingFunctionImport">The single matching function found.</param>
            <returns>True if a function was matched, false otherwise. Will throw if the model has illegal function imports.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SelectExpandSemanticBinder">
            <summary>
            Add semantic meaning to a Select or Expand token.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandSemanticBinder.Parse(Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.OData.Query.SyntacticAst.ExpandToken,Microsoft.Data.OData.Query.SyntacticAst.SelectToken,Microsoft.Data.OData.Query.ODataUriParserConfiguration)">
            <summary>
            Add semantic meaning to a Select or Expand Token
            </summary>
            <param name="elementType">the top level entity type.</param>
            <param name="entitySet">the top level entity set</param>
            <param name="expandToken">the syntactically parsed expand token</param>
            <param name="selectToken">the syntactically parsed select token</param>
            <param name="configuration">The configuration to use for parsing.</param>
            <returns>A select expand clause bound to metadata.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode">
            <summary>
            Node to represent a function call that returns a Collection
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.CollectionNode">
            <summary>
            Base class for all semantic metadata bound nodes which represent a composable collection of values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNode.ItemType">
            <summary>
            The resouce type of a single item from the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNode.CollectionType">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNode.Kind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.name">
            <summary>
            the name of this function
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.functionImports">
            <summary>
            the list of function imports
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.parameters">
            <summary>
            the list of parameters provided to this function
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.itemType">
            <summary>
            the individual item type returned by this function
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.returnedCollectionType">
            <summary>
            the collection type returned by this function
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.source">
            <summary>
            The semantically bound parent of this function.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport},System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.QueryNode},Microsoft.Data.Edm.IEdmCollectionTypeReference,Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Creates a CollectionFunctionCallNode to represent a function call that returns a collection
            </summary>
            <param name="name">The name of this function.</param>
            <param name="functionImports">the list of function imports that this node should represent.</param>
            <param name="parameters">the list of already bound parameters to this function</param>
            <param name="returnedCollectionType">the type of the collection returned by this function.</param>
            <param name="source">The parent of this CollectionFunctionCallNode.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the provided name is null.</exception>
            <exception cref="T:System.ArgumentNullException">Throws if the provided collection type reference is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the element type of the provided collection type reference is not a primitive or complex type.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.Name">
            <summary>
            Gets the name of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.FunctionImports">
            <summary>
            Gets the list of function imports represeted by this node
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.Parameters">
            <summary>
            Gets the list of parameters to this function
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.ItemType">
            <summary>
            Gets the individual item type returned by this function
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.CollectionType">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.Source">
            <summary>
            Gets the semantically bound parent node of this CollectionFunctionCallNode.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator">
            <summary>
            Translator that determines the entity set of a segment.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1">
            <summary>
            Translator interface for walking the Syntactic Tree.
            </summary>
            <typeparam name="T">Generic type produced by the translator.</typeparam>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.TypeSegment)">
            <summary>
            Translate a TypeSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment)">
            <summary>
            Translate a NavigationPropertySegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment)">
            <summary>
            Translate an EntitySetSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.KeySegment)">
            <summary>
            Translate a KeySegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.PropertySegment)">
            <summary>
            Translate a PropertySegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.OperationSegment)">
            <summary>
            Translate a OperationSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment)">
            <summary>
            Translate an OpenPropertySegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.CountSegment)">
            <summary>
            Translate a CountSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment)">
            <summary>
            Visit a NavigationPropertyLinkSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.ValueSegment)">
            <summary>
            Translate a ValueSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.BatchSegment)">
            <summary>
            Translate a BatchSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment)">
            <summary>
            Translate a BatchReferenceSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1.Translate(Microsoft.Data.OData.Query.SemanticAst.MetadataSegment)">
            <summary>
            Translate a MetadataSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>Defined by the implementer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment)">
            <summary>
            Determine the EntitySet of a NavigationPropertyLinkSegment
            </summary>
            <param name="segment">The NavigationPropertyLinkSegment to look in.</param>
            <returns>The IEdmEntitySet of this NavigationPropertyLinkSegment</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.TypeSegment)">
            <summary>
            Determine the EntitySet of a TypeSegment
            </summary>
            <param name="segment">The TypeSegment to look in.</param>
            <returns>The IEdmEntitySet of this TypeSegment</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment)">
            <summary>
            Determine the EntitySet of a NavigationPropertySegment
            </summary>
            <param name="segment">The NavigationPropertySegment to look in.</param>
            <returns>The IEdmEntitySet of this NavigationPropertySegment</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment)">
            <summary>
            Determine the EntitySet of an EntitySetSegment
            </summary>
            <param name="segment">The EntitySetSegment to look in.</param>
            <returns>The IEdmEntitySet of this EntitySetSegment</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.KeySegment)">
            <summary>
            Determine the EntitySet of a KeySegment
            </summary>
            <param name="segment">The KeySegment to look in.</param>
            <returns>The IEdmEntitySet of this KeySegment</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.PropertySegment)">
            <summary>
            Determine the EntitySet of a PropertySegment
            </summary>
            <param name="segment">The PropertySegment to look in.</param>
            <returns>null, since a property doesn't necessarily have an entity set</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.OperationSegment)">
            <summary>
            Determine the EntitySet of an OperationSegment
            </summary>
            <param name="segment">The OperationSegment to look in.</param>
            <returns>The IEdmEntitySet of this OperationSegment</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.CountSegment)">
            <summary>
            Determine the EntitySet of a CountSegment
            </summary>
            <param name="segment">The CountSegment to look in.</param>
            <returns>null, since $count doesn't have an entitySet</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment)">
            <summary>
            Determine the EntitySet of a OpenPropertySegment
            </summary>
            <param name="segment">The OpenPropertySegment to look in.</param>
            <returns>null, since an OpenProperty doesn't have an entity set</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.ValueSegment)">
            <summary>
            Determine the EntitySet of a ValueSegment
            </summary>
            <param name="segment">The ValueSegment to look in.</param>
            <returns>null, since $value doesn't have an entity set</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.BatchSegment)">
            <summary>
            Determine the EntitySet of a BatchSegment
            </summary>
            <param name="segment">The BatchSegment to look in.</param>
            <returns>null, since $batch doesn't have an entity set</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment)">
            <summary>
            Determine the EntitySet of a BatchReferenceSegment
            </summary>
            <param name="segment">The BatchReferenceSegment to look in.</param>
            <returns>The IEdmEntitySet of this BatchReferenceSegment</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.DetermineEntitySetTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.MetadataSegment)">
            <summary>
            Determine the EntitySet of a MetadataSegment
            </summary>
            <param name="segment">The MetadataSegment to look in.</param>
            <returns>null, since $batch doesn't have an entity set</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder">
            <summary>
            Build a semantic tree for Expand based on an Expand syntactic tree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.configuration">
            <summary>
            The configuration used for binding.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.entitySet">
            <summary>
            The entity set at the current level expand.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.entityType">
            <summary>
            The entity type at the current level expand.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.#ctor(Microsoft.Data.OData.Query.ODataUriParserConfiguration,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Constructs a new ExpandBinder.
            </summary>
            <param name="configuration">The configuration used for binding.</param>
            <param name="entityType">The entity type of the top level expand item.</param>
            <param name="entitySet">The entity set of the top level expand item.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.Bind(Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Visit an ExpandToken
            </summary>
            <param name="tokenIn">the token to visit</param>
            <returns>a SelectExpand clause based on this ExpandToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.GenerateSubExpand(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Generate a SubExpand based on the current nav property and the curren token
            </summary>
            <param name="currentNavProp">the current navigation property</param>
            <param name="tokenIn">the current token</param>
            <returns>a new SelectExpand clause bound to the current token and nav prop</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.DecorateExpandWithSelect(Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause,Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SyntacticAst.SelectToken)">
            <summary>
            Decorate an expand tree using a select token.
            </summary>
            <param name="subExpand">the already built sub expand</param>
            <param name="currentNavProp">the current navigation property</param>
            <param name="select">the select token to use</param>
            <returns>A new SelectExpand clause decorated with the select token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.BuildDefaultSubExpand">
            <summary>
            Build a expand clause for a nested expand.
            </summary>
            <returns>A new SelectExpandClause.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.GenerateExpandItem(Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Generate an expand item based on an ExpandTermToken
            </summary>
            <param name="tokenIn">the expandTerm token to visit</param>
            <returns>the expand item for this expand term token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.BuildNewMetadataBinder(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build a new MetadataBinder to use for expand options.
            </summary>
            <param name="targetEntitySet">The entity set being expanded.</param>
            <returns>A new MetadataBinder ready to bind a Filter or Orderby clause.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.Model">
            <summary>
            The model used for binding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.EntityType">
            <summary>
            The top level entity type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.EntitySet">
            <summary>
            The top level entity set for this level.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.Settings">
            <summary>
            The settings to use when binding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinder.Configuration">
            <summary>
            The configuration used for binding.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinderFactory">
            <summary>
            Build an ExpandBinder based on global settings
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandBinderFactory.Create(Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.OData.Query.ODataUriParserConfiguration)">
            <summary>
            Build an ExpandBinder based on global settings
            </summary>
            <param name="elementType">The entity type of the top level expand item.</param>
            <param name="entitySet">The entity set of the top level expand item.</param>
            <param name="configuration">The configuration to use for binding.</param>
            <returns>An ExpandBinder strategy based on the global settings</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.ExpandOptionExpandBinder">
            <summary>
            ExpandOption variant of an ExpandBinder, where the default selection item for a given level is based on the select at that level
            instead of the top level select clause. If nothing is selected for a given expand in the ExpandOption syntax, then we by default
            select all from that item, instead of selecting nothing (and therefore pruning the expand off of the tree).
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandOptionExpandBinder.#ctor(Microsoft.Data.OData.Query.ODataUriParserConfiguration,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build the ExpandOption variant of an ExpandBinder
            </summary>
            <param name="configuration">The configuration used for binding.</param>
            <param name="entityType">The entity type of the top level expand item.</param>
            <param name="entitySet">The entity set of the top level expand item.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandOptionExpandBinder.GenerateSubExpand(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Generate a SubExpand based on the current nav property and the curren token
            </summary>
            <param name="currentNavProp">the current navigation property</param>
            <param name="tokenIn">the current token</param>
            <returns>a new SelectExpand clause bound to the current token and nav prop</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandOptionExpandBinder.DecorateExpandWithSelect(Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause,Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SyntacticAst.SelectToken)">
            <summary>
            Decorate an expand tree using a select token.
            </summary>
            <param name="subExpand">the already built sub expand</param>
            <param name="currentNavProp">the current navigation property</param>
            <param name="select">the select token to use</param>
            <returns>A new SelectExpand clause decorated with the select token.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpandOptionSelectExpandTermParser">
            <summary>
            Object that knows how to parse a single term within a select expression. That is, a path to a property, 
            a wildcard, operation name, etc.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SelectExpandTermParser">
            <summary>
            Object that knows how to parse a single term within a select expression. That is, a path to a property, 
            a wildcard, operation name, etc.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ISelectExpandTermParser">
            <summary>
            Interface for the SelectExpandTermParsing strategy
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ISelectExpandTermParser.ParseSelect">
            <summary>
            Parses a full $select expression.
            </summary>
            <returns>The lexical token representing the select.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ISelectExpandTermParser.ParseExpand">
            <summary>
            Parses a full $expand expression.
            </summary>
            <returns>The lexical token representing the select.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ISelectExpandTermParser.ParseSingleSelectTerm(System.Boolean)">
            <summary>
            Parses a single term in a comma seperated list of things to select.
            </summary>
            <param name="isInnerTerm">is this an inner or outer select term</param>
            <returns>A token representing thing to select.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ISelectExpandTermParser.ParseSingleExpandTerm(System.Boolean)">
            <summary>
            Parses a single term in a comma seperated list of things to expand.
            </summary>
            <param name="isInnerTerm">is this an inner or outer term.</param>
            <returns>A token representing thing to expand.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SelectExpandTermParser.Lexer">
            <summary>
            Lexer used to parse an expression.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SelectExpandTermParser.isSelect">
            <summary>
            are we parsing select.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SelectExpandTermParser.maxDepth">
            <summary>
            the maximum allowable recursive depth.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SelectExpandTermParser.recursionDepth">
            <summary>
            The current recursion depth.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.#ctor(System.String,System.Int32)">
            <summary>
            Create a SelectExpandTermParser
            </summary>
            <param name="clauseToParse">the clause to parse</param>
            <param name="maxDepth">the maximum recursive depth</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.ParseSelect">
            <summary>
            Parses a full $select expression.
            </summary>
            <returns>The lexical token representing the select.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.ParseExpand">
            <summary>
            Parses a full $expand expression.
            </summary>
            <returns>The lexical token representing the select.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.ParseSingleSelectTerm(System.Boolean)">
            <summary>
            Parses a single term in a comma seperated list of things to select.
            </summary>
            <param name="isInnerTerm">is this an inner or outer select term</param>
            <returns>A token representing thing to select.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.ParseSingleExpandTerm(System.Boolean)">
            <summary>
            Parses a single term in a comma seperated list of things to expand.
            </summary>
            <param name="isInnerTerm">is this an inner or outer term.</param>
            <returns>A token representing thing to expand.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.BuildExpandTermToken(System.Boolean,Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Build the list of expand options
            Depends on whether options are allowed or not.
            </summary>
            <param name="isInnerTerm">is this an inner expand term</param>
            <param name="pathToken">the current level token, as a PathToken</param>
            <returns>An expand term token based on the path token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.IsNotEndOfTerm(System.Boolean)">
            <summary>
            determine whether we're at the end of a select or expand term
            </summary>
            <param name="isInnerTerm">flag to indicate whether this is an outer or inner select.</param>
            <returns>true if we are not at the end of a select term.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.ParseSelectExpandProperty">
            <summary>
            Parses a select or expand term into a query token
            </summary>
            <returns>parsed query token</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.ParseNext(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Uses the ExpressionLexer to visit the next ExpressionToken, and delegates parsing of segments, type segments, identifiers, 
            and the star token to other methods.
            </summary>
            <param name="previousToken">Previously parsed QueryToken, or null if this is the first token.</param>
            <returns>A parsed QueryToken representing the next part of the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.ParseSegment(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Parses a segment; a expression that is followed by a slash.
            </summary>
            <param name="parent">The parent of the segment node.</param>
            <returns>The lexical token representing the segment.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.RecurseEnter">
            <summary>
            Marks the fact that a recursive method was entered, and checks that the depth is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParser.RecurseLeave">
            <summary>
            Marks the fact that a recursive method is leaving.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SelectExpandTermParser.MaxDepth">
            <summary>
            The maximum recursive depth.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpandOptionSelectExpandTermParser.#ctor(System.String,System.Int32)">
            <summary>
            Build the ExpandOption strategy.
            </summary>
            <param name="clauseToParse">the clause to parse</param>
            <param name="maxDepth">max recursive depth</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpandOptionSelectExpandTermParser.BuildExpandTermToken(System.Boolean,Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Build the list of expand options
            Depends on whether options are allowed or not.
            </summary>
            <param name="isInnerTerm">is this an inner expand term</param>
            <param name="pathToken">the current level token, as a PathToken</param>
            <returns>An expand term token based on the path token, and all available expand options.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpandOptionSelectExpandTermParser.IsNotEndOfTerm(System.Boolean)">
            <summary>
            determine whether we're at the end of a select or expand term
            </summary>
            <param name="isInnerTerm">flag to indicate whether this is an outer or inner select.</param>
            <returns>true if we are not at the end of a select term.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpandOptionSelectExpandTermParser.ReadQueryOption">
            <summary>
            Read a query option from the lexer.
            </summary>
            <returns>the query option as a string.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer">
            <summary>
            Translator from the old expand syntax tree to the new Expand Option syntax tree
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer.NormalizeExpandTree(Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Normalize an expand syntax tree into the new ExpandOption syntax.
            </summary>
            <param name="treeToNormalize">the tree to normalize</param>
            <returns>a new tree, in the new ExpandOption syntax</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer.InvertPaths(Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Invert the all of the paths in an expandToken, such that they are now in the same order as they are present in the 
            base url
            </summary>
            <param name="treeToInvert">the tree to invert paths on</param>
            <returns>a new tree with all of its paths inverted</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer.CombineTerms(Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Collapse all redundant terms in an expand tree
            </summary>
            <param name="treeToCollapse">the tree to collapse</param>
            <returns>A new tree with all redundant terms collapsed.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer.BuildSubExpandTree(Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Expand all the PathTokens in a particular term into their own separate terms.
            </summary>
            <param name="termToExpand">the term to expand</param>
            <returns>a new ExpandTermToken with each PathToken at its own level.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer.CombineTerms(Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken,Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            add a new expandTermToken into an exisiting token, adding any additional levels and trees along the way.
            </summary>
            <param name="existingToken">the exisiting (already expanded) token</param>
            <param name="newToken">the new (already expanded) token</param>
            <returns>the combined token, or, if the two are mutually exclusive, the same tokens</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer.CombineChildNodes(Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken,Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Combine the child nodes of twoExpandTermTokens into one list of tokens
            </summary>
            <param name="existingToken">the existing token to to</param>
            <param name="newToken">the new token containing terms to add</param>
            <returns>a combined list of the all child nodes of the two tokens.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer.AddChildOptionsToDictionary(Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken,System.Collections.Generic.Dictionary{Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken})">
            <summary>
            Add child options to a new dictionary
            </summary>
            <param name="newToken">the token with child nodes to add to the dictionary</param>
            <param name="combinedTerms">dictionary to add child nodes to</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTreeNormalizer.AddOrCombine(System.Collections.Generic.IDictionary{Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken},Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Adds the expand token to the dictionary or combines it with an existing  or combines it with another existing token with an equivalent path.
            </summary>
            <param name="combinedTerms">The combined terms dictionary.</param>
            <param name="expandedTerm">The expanded term to add or combine.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpressionLexerLiteralExtensions">
            <summary>
            A set of extensions to <see cref="T:Microsoft.Data.OData.Query.ExpressionLexer"/> for parsing literals.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerLiteralExtensions.IsLiteralType(Microsoft.Data.OData.Query.ExpressionTokenKind)">
            <summary>
            Returns whether the <paramref name="tokenKind"/> is a primitive literal type: 
            Binary, Boolean, DateTime, Decimal, Double, Guid, In64, Integer, Null, Single, or String.
            Internal for test use only
            </summary>
            <param name="tokenKind">InternalKind of token.</param>
            <returns>Whether the <paramref name="tokenKind"/> is a literal type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerLiteralExtensions.ReadLiteralToken(Microsoft.Data.OData.Query.ExpressionLexer)">
            <summary>Reads the next token, checks that it is a literal token type, converts to to a Common Language Runtime value as appropriate, and returns the value.</summary>
            <param name="expressionLexer">The expression lexer.</param>
            <returns>The value represented by the next token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerLiteralExtensions.ParseNullLiteral(Microsoft.Data.OData.Query.ExpressionLexer)">
            <summary>
            Parses null literals.
            </summary>
            <param name="expressionLexer">The expression lexer.</param>
            <returns>The literal token produced by building the given literal.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerLiteralExtensions.ParseTypedLiteral(Microsoft.Data.OData.Query.ExpressionLexer,Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Parses typed literals.
            </summary>
            <param name="expressionLexer">The expression lexer.</param>
            <param name="targetTypeReference">Expected type to be parsed.</param>
            <returns>The literal token produced by building the given literal.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerLiteralExtensions.TryParseLiteral(Microsoft.Data.OData.Query.ExpressionLexer)">
            <summary>
            Parses a literal. 
            Precondition: lexer is at a literal token type: Boolean, DateTime, Decimal, Null, String, Int64, Integer, Double, Single, Guid, Binary.
            </summary>
            <param name="expressionLexer">The expression lexer.</param>
            <returns>The literal query token or null if something else was found.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpressionLexerUtils">
            <summary>
            Utilities needed by <see cref="T:Microsoft.Data.OData.Query.ExpressionLexer"/> which are relatively simple and standalone.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexerUtils.SingleSuffixLower">
            <summary>Suffix for single literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexerUtils.SingleSuffixUpper">
            <summary>Suffix for single literals.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerUtils.IsNumeric(Microsoft.Data.OData.Query.ExpressionTokenKind)">
            <summary>Whether the specified token identifier is a numeric literal.</summary>
            <param name="id">Token to check.</param>
            <returns>true if it's a numeric literal; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerUtils.IsInfinityOrNaNDouble(System.String)">
            <summary>
            Checks if the <paramref name="tokenText"/> is INF or NaN.
            Internal for testing only.
            </summary>
            <param name="tokenText">Input token.</param>
            <returns>true if match found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerUtils.IsInfinityLiteralDouble(System.String)">
            <summary>
            Checks whether <paramref name="text"/> equals to 'INF'
            Internal for testing only
            </summary>
            <param name="text">Text to look in.</param>
            <returns>true if the substring is equal using an ordinal comparison; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerUtils.IsInfinityOrNanSingle(System.String)">
            <summary>
            Checks if the <paramref name="tokenText"/> is INFf/INFF or NaNf/NaNF.
            Internal for testing only.
            </summary>
            <param name="tokenText">Input token.</param>
            <returns>true if match found, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexerUtils.IsInfinityLiteralSingle(System.String)">
            <summary>
            Checks whether <paramref name="text"/> EQUALS to 'INFf' or 'INFF'.
            Internal for testing only.
            </summary>
            <param name="text">Text to look in.</param>
            <returns>true if the substring is equal using an ordinal comparison; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.FilterBinder">
            <summary>
            Class responsible for binding a syntactic filter expression into a bound tree of semantic nodes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.FilterBinder.bindMethod">
            <summary>
            Method to use to visit the token tree and bind the tokens recursively.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.FilterBinder.state">
            <summary>
            State to use for binding.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FilterBinder.#ctor(Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Creates a FilterBinder.
            </summary>
            <param name="bindMethod">Method to use to visit the token tree and bind the tokens recursively.</param>
            <param name="state">State to use for binding.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FilterBinder.BindFilter(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Binds the given filter token.
            </summary>
            <param name="filter">The filter token to bind.</param>
            <returns>A FilterNode with the given path linked to it (if provided).</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.FunctionCallBinder">
            <summary>
            Class that knows how to bind function call tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.FunctionCallBinder.bindMethod">
            <summary>
            Method to use for binding the parent node, if needed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.FunctionCallBinder.UnboundFunctionNames">
            <summary>
            The names of functions that we don't bind to BuiltInFunctions
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.#ctor(Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Constructs a FunctionCallBinder with the given method to be used binding the parent token if needed.
            </summary>
            <param name="bindMethod">Method to use for binding the parent token, if needed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.TypePromoteArguments(Microsoft.Data.OData.Query.FunctionSignature,System.Collections.Generic.List{Microsoft.Data.OData.Query.SemanticAst.QueryNode})">
            <summary>
            Promotes types of arguments to match signature if possible.
            </summary>
            <param name="signature">The signature to match the types to.</param>
            <param name="argumentNodes">The types to promote.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.EnsureArgumentsAreSingleValue(System.String,System.Collections.Generic.List{Microsoft.Data.OData.Query.SemanticAst.QueryNode})">
            <summary>
            Checks that all arguments are SingleValueNodes
            </summary>
            <param name="functionName">The name of the function the arguments are from.</param>
            <param name="argumentNodes">The arguments to validate.</param>
            <returns>Returns the types of the arguments provided.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.MatchSignatureToBuiltInFunction(System.String,Microsoft.Data.Edm.IEdmTypeReference[],Microsoft.Data.OData.Query.FunctionSignatureWithReturnType[])">
            <summary>
            Finds the signature that best matches the arguments
            </summary>
            <param name="functionName">The name of the function</param>
            <param name="argumentTypes">The types of the arguments</param>
            <param name="signatures">The signatures to match against</param>
            <returns>Returns the matching signature or throws</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.GetBuiltInFunctionSignatures(System.String)">
            <summary>
            Finds all signatures for the given function name.
            </summary>
            <param name="functionName">The function to get the signatures for.</param>
            <returns>The signatures which match the supplied function name.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.BindFunctionCall(Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Binds the token to a SingleValueFunctionCallNode
            </summary>
            <param name="functionCallToken">Token to bind</param>
            <param name="state">The current state of the binding algorithm</param>
            <returns>The resulting SingleValueFunctionCallNode</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.TryBindEndPathAsFunctionCall(Microsoft.Data.OData.Query.SyntacticAst.EndPathToken,Microsoft.Data.OData.Query.SemanticAst.QueryNode,Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.SemanticAst.QueryNode@)">
            <summary>
            Try to bind an end path token as a function call. Used for bound functions without parameters
            that parse as end path tokens syntactically
            </summary>
            <param name="endPathToken">the end path token to bind</param>
            <param name="parent">the parent node to this end path token.</param>
            <param name="state">the current state of the binding algorithm</param>
            <param name="boundFunction">a single value function call node representing the function call, if it exists</param>
            <returns>true if we found a function for this token, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.TryBindInnerPathAsFunctionCall(Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken,Microsoft.Data.OData.Query.SemanticAst.QueryNode,Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.SemanticAst.QueryNode@)">
            <summary>
            Try to bind an inner path token as a function call. Used for bound functions without parameters
            that parse as inner path tokens syntactically
            </summary>
            <param name="innerPathToken">the end path token to bind</param>
            <param name="parent">the parent node to this end path token.</param>
            <param name="state">the current state of the binding algorithm</param>
            <param name="boundFunction">a single value function call node representing the function call, if it exists</param>
            <returns>true if we found a function for this token, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.TryBindDottedIdentifierAsFunctionCall(Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.SemanticAst.QueryNode@)">
            <summary>
            Try to bind a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken"/> as a function call. Used for container qualified functions without parameters.
            </summary>
            <param name="dottedIdentifierToken">the dotted identifier token to bind</param>
            <param name="parent">the semantically bound parent node for this dotted identifier</param>
            <param name="state">the current stat of the binding algorithm</param>
            <param name="boundFunction">a single value function call node representing the function call, if we found one.</param>
            <returns>true if we found a function for this token, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.BindAsBuiltInFunction(Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken,Microsoft.Data.OData.Query.BindingState,System.Collections.Generic.List{Microsoft.Data.OData.Query.SemanticAst.QueryNode})">
            <summary>
            Bind this function call token as a built in function
            </summary>
            <param name="functionCallToken">the function call token to bidn</param>
            <param name="state">the current state of the binding algorithm</param>
            <param name="argumentNodes">list of semantically bound arguments</param>
            <returns>A function call node bound to this function.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.TryBindIdentifier(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken},Microsoft.Data.OData.Query.SemanticAst.QueryNode,Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.SemanticAst.QueryNode@)">
            <summary>
            Try to bind an identifier to a FunctionCallNode
            </summary>
            <param name="identifier">the identifier to bind</param>
            <param name="arguments">the semantically bound list of arguments.</param>
            <param name="parent">a semantically bound parent node.</param>
            <param name="state">the current state of the binding algorithm</param>
            <param name="boundFunction">a single value function call node representing this funciton call, if we found one.</param>
            <returns>true if we found a function for this token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.IsUnboundFunction(System.String)">
            <summary>
            Determines whether this is a function that we don't bind to a BuiltInFunction
            </summary>
            <param name="functionName">name of the function</param>
            <returns>true if this is a function that we don't bind</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.CreateUnboundFunctionNode(Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken,System.Collections.Generic.List{Microsoft.Data.OData.Query.SemanticAst.QueryNode},Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Build a SingleValueFunctionCallNode for a function that isn't bound to a BuiltInFunction
            </summary>
            <param name="functionCallToken">original query token for this function</param>
            <param name="args">list of already bound query nodes for this function</param>
            <param name="state">The current state of the binding algorithm.</param>
            <returns>A single value function call node bound to this function.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.ValidateAndBuildCastArgs(Microsoft.Data.OData.Query.BindingState,System.Collections.Generic.List{Microsoft.Data.OData.Query.SemanticAst.QueryNode}@)">
            <summary>
            Validate the args list (adding the implicit range variable if necessary), and determine the correct return type for a cast function
            </summary>
            <param name="state">current binding state, used to get the implicit range variable if necessary</param>
            <param name="args">list of arguments, could be changed</param>
            <returns>the return type from this cast function</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.ValidateAndBuildIsOfArgs(Microsoft.Data.OData.Query.BindingState,System.Collections.Generic.List{Microsoft.Data.OData.Query.SemanticAst.QueryNode}@)">
            <summary>
            Validate the arguments (adding the implicit range variable if necessary), and determine the correct return type
            for an IsOf function
            </summary>
            <param name="state">the current state of the binding algorithm, used to get the implicit range variable if necessary</param>
            <param name="args">current list of args, can be changed</param>
            <returns>the correct return type for this function.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.ValidateIsOfOrCast(Microsoft.Data.OData.Query.BindingState,System.Boolean,System.Collections.Generic.List{Microsoft.Data.OData.Query.SemanticAst.QueryNode}@)">
            <summary>
            Validate the arguments to either isof or cast
            </summary>
            <param name="state">the current state of the binding algorithm</param>
            <param name="isCast">flag to indicate which function we're validating</param>
            <param name="args">the list of arguments, which could be changed</param>
            <returns>the return type of the function.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallBinder.TryGetTypeReference(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Try to get an IEdmTypeReference for a given type as a string, returns null if none exists
            </summary>
            <param name="model">the model for validation</param>
            <param name="fullTypeName">the type name to find</param>
            <returns>an IEdmTypeReference for this type string.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.FunctionCallParser">
            <summary>
            Implementation of IFunctionCallParser that allows functions calls and parses arguments with a provided method.
            TODO This inmplementaiton is incomplete.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.IFunctionCallParser">
            <summary>
            Interface for a class that can parse an identifier as a function and return a representitive QueryToken.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.IFunctionCallParser.ParseIdentifierAsFunction(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Parses an identifier that represents a function.
            </summary>
            <param name="parent">the syntactically bound parent of this identifier.</param>
            <returns>QueryToken representing this function.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.IFunctionCallParser.Lexer">
            <summary>
            Reference to the lexer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.FunctionCallParser.lexer">
            <summary>
            Reference to the lexer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.FunctionCallParser.parseMethod">
            <summary>
            Method used to parse arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallParser.#ctor(Microsoft.Data.OData.Query.ExpressionLexer,Microsoft.Data.OData.Query.UriQueryExpressionParser.Parser)">
            <summary>
            Create a new FunctionCallParser.
            </summary>
            <param name="lexer">Lexer positioned at a function identifier.</param>
            <param name="parseMethod">Method to use for parsing individual arguments in the function.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallParser.ParseIdentifierAsFunction(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Parses an identifier that represents a function.
            </summary>
            <param name="parent">Token for the parent of the function being parsed.</param>
            <returns>QueryToken representing this function.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallParser.ParseArgumentList">
            <summary>
            Parses argument lists.
            </summary>
            <returns>The lexical tokens representing the arguments.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallParser.ParseArguments">
            <summary>
            Parses comma-separated arguments.
            </summary>
            <remarks>
            Arguments can either be of the form a=1,b=2,c=3 or 1,2,3.
            They cannot be mixed between those two styles.
            </remarks>
            <returns>The lexical tokens representing the arguments.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallParser.ReadArgumentsAsPositionalValues">
            <summary>
            Read the list of arguments as a set of positional values
            </summary>
            <returns>A list of FunctionParameterTokens representing each argument</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionCallParser.TryReadArgumentsAsNamedValues(System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken}@)">
            <summary>
            Try to read the list of arguments as a set of named values
            </summary>
            <param name="argList">the parsed list of arguments</param>
            <returns>true if the arguments were successfully read.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.FunctionCallParser.Lexer">
            <summary>
            Reference to the lexer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.IdentifierTokenizer">
            <summary>
            Class that knows how to parse an identifier using an ExpressionLexer that is appropriately positioned.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.IdentifierTokenizer.lexer">
            <summary>
            Reference to the lexer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.IdentifierTokenizer.parameters">
            <summary>
            parameters from the expression parser
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.IdentifierTokenizer.functionCallParser">
            <summary>
            Object to handle the parsing of things that look like function calls.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.IdentifierTokenizer.#ctor(System.Collections.Generic.HashSet{System.String},Microsoft.Data.OData.Query.IFunctionCallParser)">
            <summary>
            Parse an Identifier into the right QueryToken
            </summary>
            <param name="parameters">parameters passed in to the UriQueryExpressionParser</param>
            <param name="functionCallParser">Object to use to handle parsing function calls.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.IdentifierTokenizer.ParseIdentifier(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Parses identifiers.
            </summary>
            <param name="parent">the syntactically bound parent of this identifier.</param>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.IdentifierTokenizer.ParseMemberAccess(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Parses member access.
            </summary>
            <param name="instance">Instance being accessed.</param>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.IdentifierTokenizer.ParseStarMemberAccess(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Parses * (all member) access at the beginning of a select expression.
            </summary>
            <param name="instance">Instance being accessed.</param>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.IdentifierTokenizer.ParseError(System.String)">
            <summary>Creates an exception for a parse error.</summary>
            <param name="message">Message text.</param>
            <returns>A new Exception.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor`1">
            <summary>
            Visitor interface for walking the Path Tree.
            </summary>
            <typeparam name="T">Return type for the visitor methods on this visitor.</typeparam>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.SystemToken)">
            <summary>
            Visit an SystemToken
            </summary>
            <param name="tokenIn">The SystemToken to visit</param>
            <returns>A user defined class</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken)">
            <summary>
            Visit an NonSystemToken
            </summary>
            <param name="tokenIn">The NonSystemToken to visit</param>
            <returns>A user defined class</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor">
            <summary>
            Visitor interface for walking the Path Tree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor.Visit(Microsoft.Data.OData.Query.SyntacticAst.SystemToken)">
            <summary>
            Visit an SystemToken
            </summary>
            <param name="tokenIn">The SystemToken to visit</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor.Visit(Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken)">
            <summary>
            Visit an NonSystemToken
            </summary>
            <param name="tokenIn">The NonSystemToken to visit</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1">
            <summary>
            Visitor interface for walking the Syntactic Tree.
            </summary>
            <typeparam name="T">Return type for the visitor methods on this visitor.</typeparam>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.AllToken)">
            <summary>
            Visit an AllToken
            </summary>
            <param name="tokenIn">The All token to visit</param>
            <returns>An AllNode bound to this token</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.AnyToken)">
            <summary>
            Visits an AnyToken
            </summary>
            <param name="tokenIn">The Any token to visit</param>
            <returns>An AnyNode that's bound to this token</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Visits a BinaryOperatorToken
            </summary>
            <param name="tokenIn">The Binary operator token to visit.</param>
            <returns>A BinaryOperatorNode thats bound to this token</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken)">
            <summary>
            Visits a DottedIdentifierToken
            </summary>
            <param name="tokenIn">The DottedIdentifierToken to visit</param>
            <returns>Either a SingleEntityCastNode, or EntityCollectionCastNode bound to this DottedIdentifierToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Visits an ExpandToken
            </summary>
            <param name="tokenIn">The ExpandToken to visit</param>
            <returns>A QueryNode bound to this ExpandToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Visits an ExpandTermToken
            </summary>
            <param name="tokenIn">The ExpandTermToken to visit</param>
            <returns>A QueryNode bound to this ExpandTermToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken)">
            <summary>
            Visits a FunctionCallToken
            </summary>
            <param name="tokenIn">The FunctionCallToken to visit</param>
            <returns>A SingleValueFunctionCallNode bound to this FunctionCallToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.LambdaToken)">
            <summary>
            Visits a LambdaToken
            </summary>
            <param name="tokenIn">The LambdaToken to visit</param>
            <returns>A LambdaNode bound to this LambdaToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.LiteralToken)">
            <summary>
            Visits a LiteralToken
            </summary>
            <param name="tokenIn">LiteralToken to visit</param>
            <returns>A ConstantNode bound to this LiteralToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken)">
            <summary>
            Visits a InnerPathToken
            </summary>
            <param name="tokenIn">The InnerPathToken to bind</param>
            <returns>A SingleValueNode or SingleEntityNode bound to this InnerPathToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.OrderByToken)">
            <summary>
            Visits an OrderByToken
            </summary>
            <param name="tokenIn">The OrderByToken to bind</param>
            <returns>An OrderByClause bound to this OrderByToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.EndPathToken)">
            <summary>
            Visits a EndPathToken
            </summary>
            <param name="tokenIn">The EndPathToken to bind</param>
            <returns>A PropertyAccessNode bound to this EndPathToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken)">
            <summary>
            Visits a CustomQueryOptionToken
            </summary>
            <param name="tokenIn">The CustomQueryOptionToken to bind</param>
            <returns>A CustomQueryOptionNode bound to this CustomQueryOptionToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken)">
            <summary>
            Visits a RangeVariableToken
            </summary>
            <param name="tokenIn">The RangeVariableToken to bind</param>
            <returns>An Entity or NonEntity RangeVariableReferenceNode bound to this RangeVariableToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.SelectToken)">
            <summary>
            Visits a SelectToken
            </summary>
            <param name="tokenIn">The SelectToken to bind</param>
            <returns>A QueryNode bound to this SelectToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.StarToken)">
            <summary>
            Visits a StarToken
            </summary>
            <param name="tokenIn">The StarToken to bind</param>
            <returns>A QueryNode bound to this StarToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken)">
            <summary>
            Visits a UnaryOperatorToken
            </summary>
            <param name="tokenIn">The UnaryOperatorToken to bind</param>
            <returns>A UnaryOperatorNode bound to this UnaryOperatorToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken)">
            <summary>
            Visits a FunctionParameterToken
            </summary>
            <param name="tokenIn">The FunctionParameterTokenb to bind</param>
            <returns>A FunctionParametertoken bound to this UnaryOperatorToken</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.KeyBinder">
            <summary>
            Class that knows how to bind key values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.KeyBinder.keyValueBindMethod">
            <summary>
            Method to bind the value of a key.
            TODO Make it of return type SingleValueQueryNode.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.KeyBinder.#ctor(Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Constructs a KeyBinder object using the given function to bind key values.
            </summary>
            <param name="keyValueBindMethod">Method to call to bind a value in a key.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.KeyBinder.BindKeyValues(Microsoft.Data.OData.Query.SemanticAst.EntityCollectionNode,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.NamedValue})">
            <summary>
            Binds key values to a key lookup on a collection.
            </summary>
            <param name="collectionNode">Already bound collection node.</param>
            <param name="namedValues">The named value tokens to bind.</param>
            <returns>The bound key lookup.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.KeyBinder.BindKeyPropertyValue(Microsoft.Data.OData.Query.NamedValue,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Binds a key property value.
            </summary>
            <param name="namedValue">The named value to bind.</param>
            <param name="collectionItemEntityType">The type of a single item in a collection to apply the key value to.</param>
            <returns>The bound key property value node.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SegmentArgumentParser">
            <summary>Provides a class used to represent a key for a resource.</summary>
            <remarks>
            Internally, every key instance has a collection of values. These values
            can be named or positional, depending on how they were specified
            if parsed from a URI.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SegmentArgumentParser.Empty">
            <summary>Empty key singleton.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SegmentArgumentParser.namedValues">
            <summary>Named values.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SegmentArgumentParser.positionalValues">
            <summary>Positional values.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SegmentArgumentParser.keysAsSegments">
            <summary>Whether or not the key was formatted as a segment.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.#ctor">
            <summary>Initializes a new empty <see cref="T:Microsoft.Data.OData.Query.SegmentArgumentParser"/> instance.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>Initializes a new <see cref="T:Microsoft.Data.OData.Query.SegmentArgumentParser"/> instance.</summary>
            <param name="namedValues">Named values.</param>
            <param name="positionalValues">Positional values for this instance.</param>
            <param name="keysAsSegments">Whether or not the key was formatted as a segment.</param>
            <remarks>
            One of namedValues or positionalValues should be non-null, but not both.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.TryParseKeysFromUri(System.String,Microsoft.Data.OData.Query.SegmentArgumentParser@)">
            <summary>Attempts to parse key values from the specified text.</summary>
            <param name='text'>Text to parse (not null).</param>
            <param name='instance'>After invocation, the parsed key instance.</param>
            <returns>
            true if the key instance was parsed; false if there was a 
            syntactic error.
            </returns>
            <remarks>
            The returned instance contains only string values. To get typed values, a call to
            TryConvertValues is necessary.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.FromSegment(System.String)">
            <summary>
            Creates a key instance from the given raw segment text with a single positional value.
            </summary>
            <param name="segmentText">The segment text.</param>
            <returns>A key instance with the given segment text as its only value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.TryParseNullableTokens(System.String,Microsoft.Data.OData.Query.SegmentArgumentParser@)">
            <summary>Attempts to parse nullable values (only positional values, no name-value pairs) from the specified text.</summary>
            <param name='text'>Text to parse (not null).</param>
            <param name='instance'>After invocation, the parsed key instance.</param>
            <returns>
            true if the given values were parsed; false if there was a 
            syntactic error.
            </returns>
            <remarks>
            The returned instance contains only string values. To get typed values, a call to
            TryConvertValues is necessary.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.TryConvertValues(System.Collections.Generic.IList{Microsoft.Data.Edm.IEdmStructuralProperty},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}@)">
            <summary>Tries to convert values to the keys of the specified type.</summary>
            <param name="keyProperties">The key properties to use for the conversion.</param>
            <param name="keyPairs">The converted key-value pairs.</param>
            <returns>true if all values were converted; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.TryConvertValue(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.String,System.Object@)">
            <summary>
            Try to convert a value into an EDM primitive type
            </summary>
            <param name="primitiveType">the type to convert to</param>
            <param name="valueText">the value to convert</param>
            <param name="convertedValue">The converted value, if conversion succeeded.</param>
            <returns>true if the conversion was successful.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.TryParseFromUri(System.String,System.Boolean,System.Boolean,Microsoft.Data.OData.Query.SegmentArgumentParser@)">
            <summary>Attempts to parse key values from the specified text.</summary>
            <param name='text'>Text to parse (not null).</param>
            <param name="allowNamedValues">Set to true if the parser should accept named values
                so syntax like Name='value'. If this is false, the parsing will fail on such constructs.</param>
            <param name="allowNull">Set to true if the parser should accept null values.
                If set to false, the parser will fail on null values.</param>
            <param name='instance'>After invocation, the parsed key instance.</param>
            <returns>
            true if the key instance was parsed; false if there was a 
            syntactic error.
            </returns>
            <remarks>
            The returned instance contains only string values. To get typed values, a call to
            TryConvertValues is necessary.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentArgumentParser.CreateIfNull``1(``0@)">
            <summary>Creates a new instance if the specified value is null.</summary>
            <typeparam name="T">Type of variable.</typeparam>
            <param name="value">Current value.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SegmentArgumentParser.AreValuesNamed">
            <summary>Whether the values have a name.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SegmentArgumentParser.IsEmpty">
            <summary>Checks whether this key has any values.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SegmentArgumentParser.NamedValues">
            <summary>Returns a dictionary of named values when they AreValuesNamed is true.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SegmentArgumentParser.PositionalValues">
            <summary>Returns a list of values when they AreValuesNamed is false.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SegmentArgumentParser.ValueCount">
            <summary>Number of values in the key.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LambdaBinder">
            <summary>
            Class that knows how to bind a LambdaToken.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LambdaBinder.bindMethod">
            <summary>
            Method used to bind a parent token.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LambdaBinder.#ctor(Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Constructs a LambdaBinder.
            </summary>
            <param name="bindMethod">Method used to bind a parent token.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LambdaBinder.BindLambdaToken(Microsoft.Data.OData.Query.SyntacticAst.LambdaToken,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Binds a LambdaToken to metadata.
            </summary>
            <param name="lambdaToken">Token to bind.</param>
            <param name="state">Object to hold the state of binding.</param>
            <returns>A metadata bound any or all node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LambdaBinder.BindParentToken(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Bind the parent of the LambdaToken
            </summary>
            <param name="queryToken">the parent token</param>
            <returns>the bound parent node</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LambdaBinder.BindExpressionToken(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Bind the expression of the LambdaToken
            </summary>
            <param name="queryToken">the expression token</param>
            <returns>the bound expression node</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralBinder">
            <summary>
            Class that knows how to bind literal values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralBinder.BindLiteral(Microsoft.Data.OData.Query.SyntacticAst.LiteralToken)">
            <summary>
            Binds a literal value to a ConstantNode
            </summary>
            <param name="literalToken">Literal token to bind.</param>
            <returns>Bound query node.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralParser">
            <summary>Use this class to parse literals from keys, etags, skiptokens, and filter/orderby expression constants.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.DefaultInstance">
            <summary>
            Default singleton instance of the literal parser.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.KeysAsSegmentsInstance">
            <summary>
            Singleton instance of the literal parser for when keys-as-segments is turned on, which does not wrap the formatted strings in any quotes or type-markers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.Parsers">
            <summary>
            Mapping between primitive CLR types and lightweight parser classes for that type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.ForKeys(System.Boolean)">
            <summary>
            Gets the literal parser for keys, based on whether the keys are formatted as segments.
            </summary>
            <param name="keyAsSegment">Whether or not the keys is formatted as a segment.</param>
            <returns>The literal parser to use.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.TryParseLiteral(System.Type,System.String,System.Object@)">
            <summary>Converts a string to a primitive value.</summary>
            <param name="targetType">Type to convert string to.</param>
            <param name="text">String text to convert.</param>
            <param name="result">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.LiteralParser.ForETags">
            <summary>
            Gets the literal parser to use for ETags.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralParser.DefaultLiteralParser">
            <summary>
            Default literal parser which has type-markers and single-quotes. Also supports arbitrary literals being re-encoded in binary form.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DefaultLiteralParser.TryParseLiteral(System.Type,System.String,System.Object@)">
            <summary>Converts a string to a primitive value.</summary>
            <param name="targetType">Type to convert string to.</param>
            <param name="text">String text to convert.</param>
            <param name="result">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DefaultLiteralParser.TryRemoveFormattingAndConvert(System.String,System.Type,System.Object@)">
            <summary>
            Tries to parse the literal by first removing required formatting for the expected type, then converting the resulting string.
            </summary>
            <param name="text">String text to convert.</param>
            <param name="targetType">Type to convert string to.</param>
            <param name="targetValue">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralParser.KeysAsSegmentsLiteralParser">
            <summary>
            Simplified literal parser for keys-as-segments which does not expect type-markers, single-quotes, etc. Does not support re-encoding literals as binary.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.KeysAsSegmentsLiteralParser.TryParseLiteral(System.Type,System.String,System.Object@)">
            <summary>Converts a string to a primitive value.</summary>
            <param name="targetType">Type to convert string to.</param>
            <param name="text">String text to convert.</param>
            <param name="result">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.KeysAsSegmentsLiteralParser.UnescapeLeadingDollarSign(System.String)">
            <summary>
            If the string starts with '$', removes it.
            Also asserts that the 2nd character is also '$', as otherwise the string would be treated as a system segment.
            </summary>
            <param name="text">The text.</param>
            <returns>The string value with a leading '$' removed, if the string started with one.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser">
            <summary>
            Helper class for parsing a specific type of primitive literal.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.XmlWhitespaceChars">
            <summary>XML whitespace characters to trim around literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.prefix">
            <summary>
            The expected prefix for the literal. Null indicates no prefix is expected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.suffix">
            <summary>
            The expected suffix for the literal. Null indicates that no suffix is expected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.suffixRequired">
            <summary>
            Whether or not the suffix is required.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.expectedType">
            <summary>
            The expected type for this parser.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser"/> class.
            </summary>
            <param name="expectedType">The expected type for this parser.</param>
            <param name="suffix">The expected suffix for the literal. Null indicates that no suffix is expected.</param>
            <param name="suffixRequired">Whether or not the suffix is required.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser"/> class.
            </summary>
            <param name="expectedType">The expected type for this parser.</param>
            <param name="prefix">The expected prefix for the literal.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser"/> class.
            </summary>
            <param name="expectedType">The expected type for this parser.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.TryConvert(System.String,System.Object@)">
            <summary>
            Tries to convert the given text into this parser's expected type. Conversion only, formatting should already have been removed.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="targetValue">The target value.</param>
            <returns>Whether or not conversion was successful.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.TryRemoveFormatting(System.String@)">
            <summary>
            Tries to remove formatting specific to this parser's expected type.
            </summary>
            <param name="text">The text to remove formatting from.</param>
            <returns>Whether or not the expected formatting was found and succesfully removed.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.ValueOfTypeCanContainQuotes(System.Type)">
            <summary>
            Determines whether the values for the specified types should be 
            quoted in URI keys.
            </summary>
            <param name='type'>Type to check.</param>
            <returns>
            true if values of <paramref name='type' /> require quotes; false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.PrimitiveParser.TryRemoveLiteralSuffix(System.String,System.String@)">
            <summary>
            Check and strip the input <paramref name="text"/> for literal <paramref name="suffix"/>
            </summary>
            <param name="suffix">The suffix value</param>
            <param name="text">The string to check</param>
            <returns>A string that has been striped of the suffix</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1">
            <summary>
            Primitive parser which uses a delegate for conversion.
            </summary>
            <typeparam name="T">The expected CLR type when parsing.</typeparam>
        </member>
        <member name="F:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.convertMethod">
            <summary>
            The delegate to use for conversion.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.#ctor(System.Func{System.String,`0},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1"/> class.
            </summary>
            <param name="convertMethod">The delegate to use for conversion.</param>
            <param name="suffix">The expected suffix for the literal. Null indicates that no suffix is expected.</param>
            <param name="suffixRequired">Whether or not the suffix is required.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.#ctor(System.Func{System.String,`0})">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1"/> class from being created.
            </summary>
            <param name="convertMethod">The delegate to use for conversion.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.#ctor(System.Func{System.String,`0},System.String)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1"/> class from being created.
            </summary>
            <param name="convertMethod">The delegate to use for conversion.</param>
            <param name="prefix">The expected prefix for the literal.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.WithoutMarkup(System.Func{System.String,`0})">
            <summary>
            Creates a primitive parser which wraps the given delegate and does not expect any extra markup in serialized literal.
            </summary>
            <param name="convertMethod">The delegate to use for conversion.</param>
            <returns>A new primitive parser.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.WithPrefix(System.Func{System.String,`0},System.String)">
            <summary>
            Creates a primitive parser which wraps the given delegate and expects serialized literals to start with one of the given prefixes.
            </summary>
            <param name="convertMethod">The delegate to use for conversion.</param>
            <param name="prefix">The expected prefix for the literal.</param>
            <returns>A new primitive parser.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.WithSuffix(System.Func{System.String,`0},System.String)">
            <summary>
            Creates a primitive parser which wraps the given delegate and expects serialized literals to end with the given suffix.
            </summary>
            <param name="convertMethod">The delegate to use for conversion.</param>
            <param name="suffix">The expected suffix for the literal. Null indicates that no suffix is expected.</param>
            <returns>A new primitive parser.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.WithSuffix(System.Func{System.String,`0},System.String,System.Boolean)">
            <summary>
            Creates a primitive parser which wraps the given delegate and expects serialized literals to end with the given suffix.
            </summary>
            <param name="convertMethod">The delegate to use for conversion.</param>
            <param name="suffix">The expected suffix for the literal. Null indicates that no suffix is expected.</param>
            <param name="required">Whether or not the suffix is required.</param>
            <returns>A new primitive parser.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DelegatingPrimitiveParser`1.TryConvert(System.String,System.Object@)">
            <summary>
            Tries to convert the given text into this parser's expected type. Conversion only, formatting should already have been removed.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="targetValue">The target value.</param>
            <returns>
            Whether or not conversion was successful.
            </returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralParser.DecimalPrimitiveParser">
            <summary>
            Parser specific to the Edm.Decimal type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DecimalPrimitiveParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.DecimalPrimitiveParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.DecimalPrimitiveParser.ConvertDecimal(System.String)">
            <summary>
            Special helper to convert a string to a decimal that will allow more than what XmlConvert.ToDecimal supports by default.
            </summary>
            <param name="text">The text to convert.</param>
            <returns>The converted decimal value.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralParser.BinaryPrimitiveParser">
            <summary>
            Parser specific to the Edm.Binary type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.BinaryPrimitiveParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.BinaryPrimitiveParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.BinaryPrimitiveParser.TryConvert(System.String,System.Object@)">
            <summary>
            Tries to convert the given text into this parser's expected type. Conversion only, formatting should already have been removed.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="targetValue">The target value.</param>
            <returns>
            Whether or not conversion was successful.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.BinaryPrimitiveParser.TryRemoveFormatting(System.String@)">
            <summary>
            Tries to remove formatting specific to this parser's expected type.
            </summary>
            <param name="text">The text to remove formatting from.</param>
            <returns>
            Whether or not the expected formatting was found and succesfully removed.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.BinaryPrimitiveParser.HexCharToNibble(System.Char)">
            <summary>Returns the 4 bits that correspond to the specified character.</summary>
            <param name="c">Character in the 0-F range to be converted.</param>
            <returns>The 4 bits that correspond to the specified character.</returns>
            <exception cref="T:System.FormatException">Thrown when 'c' is not in the '0'-'9','a'-'f' range.</exception>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralParser.StringPrimitiveParser">
            <summary>
            Parser specific to the Edm.String type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.StringPrimitiveParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Query.LiteralParser.StringPrimitiveParser"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.StringPrimitiveParser.TryConvert(System.String,System.Object@)">
            <summary>
            Tries to convert the given text into this parser's expected type. Conversion only, formatting should already have been removed.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="targetValue">The target value.</param>
            <returns>
            Whether or not conversion was successful.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralParser.StringPrimitiveParser.TryRemoveFormatting(System.String@)">
            <summary>
            Tries to remove formatting specific to this parser's expected type.
            </summary>
            <param name="text">The text to remove formatting from.</param>
            <returns>
            Whether or not the expected formatting was found and succesfully removed.
            </returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.MetadataBindingUtils">
            <summary>
            Helper methods for metadata binding.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBindingUtils.ConvertToTypeIfNeeded(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If the source node is not of the specified type, then we check if type promotion is possible and inject a convert node.
            If the source node is the same type as the target type (or if the target type is null), we just return the source node as is.
            </summary>
            <param name="source">The source node to apply the convertion to.</param>
            <param name="targetTypeReference">The target primitive type. May be null - this method will do nothing in that case.</param>
            <returns>The converted query node, or the original source node unchanged.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBindingUtils.GetEdmType(Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Retrieves type associated to a segment.
            </summary>
            <param name="segment">The node to retrive the type from.</param>
            <returns>The type of the node, or item type for collections.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBindingUtils.GetEdmTypeReference(Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Retrieves the type reference associated to a segment.
            </summary>
            <param name="segment">The node to retrive the type reference from.</param>
            <returns>The Type reference of the node (item type reference for collections).</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers">
            <summary>
            Class to provide methods that wrap EdmLib calls that are normally not allows in ODataLib, but
            are OK in the Uri Parser. These are OK to suppress because the Uri Parser
            does not need to go through the behavior knob that the ODL reader/writer does.
            This should only be used by the Uri Parser.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.FindTypeFromModel(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Wraps a call to IEdmModel.FindType.
            </summary>
            <param name="model">The model to search.</param>
            <param name="qualifiedName">The qualified name of the type to find within the model.</param>
            <returns>The requested type, or null if no such type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.FindCollectionTypeFromModel(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Wraps call to FindTypeFromModel for a Collection type.
            </summary>
            <param name="model">the model to search</param>
            <param name="qualifiedName">the name to find within the model</param>
            <returns>a type reference to the collection type, or null if no such type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.GetFunctionReturnType(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Wraps a call to IEdmFunctionImport.ReturnType.
            </summary>
            <param name="serviceOperation">The function import containing the return type.</param>
            <returns>Gets the return type of this function.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.GetEntitySetElementType(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Wraps a call to IEdmEntitySet.ElementType.
            </summary>
            <param name="entitySet">The EntitySet to containing the element type.</param>
            <returns>The entity type contained in this entity set.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.GetOperationParameterType(Microsoft.Data.Edm.IEdmFunctionParameter)">
            <summary>
            Wraps a call to IEdmFunctionParameter.Type.
            </summary>
            <param name="serviceOperationParameter">The IEdmFunctionParameter containing the typ[e.</param>
            <returns>The type of this function parameter.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.CheckRelatedTo(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Check whether the parent and child are properly related types
            </summary>
            <param name="parentType">the parent type</param>
            <param name="childType">the child type</param>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the two types are not related.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.GetNavigationPropertyFromExpandPath(Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Follow an ODataPath from an Expand to get the Final Nav Prop
            </summary>
            <param name="path">the path to follow</param>
            <returns>the navigation property at the end of that path.</returns>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the last segment in the path is not a nav prop.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.GetMostDerivedTypeFromPath(Microsoft.Data.OData.Query.SemanticAst.ODataPath,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Follow an ODataPath from to get the most derived type
            </summary>
            <param name="path">the path to follow</param>
            <param name="startingType">the starting type before beginning to walk the path.</param>
            <returns>the most derived type in the path.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.TryGetEntityContainer(System.String,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityContainer@)">
            <summary>
            Is this token a container
            </summary>
            <param name="containerIdentifier">the containerIdentifier of the container to find</param>
            <param name="model">which model to search</param>
            <param name="entityContainer">the container we found, if we found one</param>
            <returns>true if we find a container, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.IsEntityCollection(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this type is an EntityCollection
            </summary>
            <param name="type">The type to check</param>
            <returns>true if the type is an entity collection</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.AllHaveEqualReturnTypeAndAttributes(System.Collections.Generic.IList{Microsoft.Data.Edm.IEdmFunctionImport})">
            <summary>
            Checks whether all function imports have the same return type 
            </summary>
            <param name="functionImports">the list to check</param>
            <returns>true if the list of function imports all have the same return type</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.Metadata.UriEdmHelpers.IsBindingTypeValid(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Is this a valid binding type. i.e. is this an entity, entity colleciton, or complex type.
            </summary>
            <param name="bindingType">the binding type</param>
            <returns>true if this binding type is valid</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.NonOptionExpandBinder">
            <summary>
            NonOption variant of an ExpandBinder, where the default selection at each level is based on the top level select
            clause. If that top level select is not populated, then we select all from this level, instead of selecting nothing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.NonOptionExpandBinder.#ctor(Microsoft.Data.OData.Query.ODataUriParserConfiguration,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build the NonOption variant of an ExpandBinder
            </summary>
            <param name="configuration">The configuration used for binding.</param>
            <param name="entityType">The entity type of the top level expand item.</param>
            <param name="entitySet">The entity set of the top level expand item.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.NonOptionExpandBinder.GenerateSubExpand(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Generate a SubExpand based on the current nav property and the curren token
            </summary>
            <param name="currentNavProp">the current navigation property</param>
            <param name="tokenIn">the current token</param>
            <returns>a new SelectExpand clause bound to the current token and nav prop</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.NonOptionExpandBinder.DecorateExpandWithSelect(Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause,Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SyntacticAst.SelectToken)">
            <summary>
            Decorate an expand tree using a select token.
            </summary>
            <param name="subExpand">the already built sub expand</param>
            <param name="currentNavProp">the current navigation property</param>
            <param name="select">the select token to use</param>
            <returns>A new SelectExpand clause decorated with the select token.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.NonOptionSelectExpandTermParser">
            <summary>
            Object that knows how to parse a single term within a select expression. That is, apath to a property, 
            a wildcard, operation name, etc.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NonOptionSelectExpandTermParser.#ctor(System.String,System.Int32)">
            <summary>
            Build the NonOption strategy.
            </summary>
            <param name="clauseToParse">the clause to parse</param>
            <param name="maxDepth">max recursive depth</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NonOptionSelectExpandTermParser.BuildExpandTermToken(System.Boolean,Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Build the list of expand options
            Depends on whether options are allowed or not.
            </summary>
            <param name="isInnerTerm">is this an inner expand term</param>
            <param name="pathToken">the current level token, as a PathToken</param>
            <returns>An expand term token based on the path token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NonOptionSelectExpandTermParser.IsNotEndOfTerm(System.Boolean)">
            <summary>
            determine whether we're at the end of a select or expand term
            </summary>
            <param name="isInnerTerm">flag to indicate whether this is an outer or inner select.</param>
            <returns>true if we are not at the end of a select term.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.InnerPathTokenBinder">
            <summary>
            Class responsible for binding a InnerPathToken into:
            1. SingleNavigationNode
            2. CollectionNavigationNode
            3. SinglePropertyAccessNode (complex)
            4. CollectionPropertyAccessNode (primitive | complex)
            5. KeyLookupNode
            6. SingleValueFunctionCallNode
            7. SingleEntityFunctionCallNode
            </summary>
            <remarks>TODO The binder does support key lookup on collection navigation properties, however at this time
            the synctactic parser does not set things up correctly to allow end-to-end scenarios to work.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InnerPathTokenBinder.bindMethod">
            <summary>
            Bind method to use for binding a parent node, if needed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.InnerPathTokenBinder.#ctor(Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Constructs a InnerPathTokenBinder.
            </summary>
            <param name="bindMethod">Bind method to use for binding a parent node, if needed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.InnerPathTokenBinder.EnsureParentIsEntityForNavProp(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode)">
            <summary>
            Ensures that the parent node is of entity type, throwing if it is not.
            </summary>
            <param name="parent">Parent node to a navigation property.</param>
            <returns>The given parent node as a SingleEntityNode.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.InnerPathTokenBinder.BindProperty(Microsoft.Data.Edm.IEdmTypeReference,System.String)">
            <summary>
            Given a property name, if the associated type reference is strucutred, then this returns  
            the property of the structured type. Otherwise, it returns null.
            </summary>
            <param name="parentReference">The parent type to be used to find binding options.</param>
            <param name="propertyName">The string designated the property name to be bound.</param>
            <returns>The property associated with string and parent type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.InnerPathTokenBinder.GetNavigationNode(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SemanticAst.SingleEntityNode,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.NamedValue},Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.KeyBinder)">
            <summary>
            Builds an appropriate navigation query node (collection or single) for the given property and parent node.
            </summary>
            <param name="property">Navigation property.</param>
            <param name="parent">Parent Node.</param>
            <param name="namedValues">Named values (key values) that were included in the node we are binding, if any.</param>
            <param name="state">State of binding.</param>
            <param name="keyBinder">Object to perform binding on any key values that are present.</param>
            <returns>A new CollectionNavigationNode or SingleNavigationNode to capture the navigation propety access.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.InnerPathTokenBinder.BindInnerPathSegment(Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Binds a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken"/>.
            This includes more than just navigations - it includes complex property access and primitive collections.
            </summary>
            <param name="segmentToken">The segment token to bind.</param>
            <param name="state">The state of binding.</param>
            <returns>The bound node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.InnerPathTokenBinder.DetermineParentNode(Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Determines the parent node. If the token has a parent, that token is bound. If not, then we 
            use the implicit parameter from the BindingState as the parent node.
            </summary>
            <param name="segmentToken">Token to determine the parent node for.</param>
            <param name="state">Current state of binding.</param>
            <returns>A SingleValueQueryNode that is the parent node of the <paramref name="segmentToken"/>.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.NodeFactory">
            <summary>
            Factory class to build IParameterQueryNodes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NodeFactory.CreateImplicitRangeVariable(Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Creates a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.RangeVariable"/> for an implicit parameter ($it) from an <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/>.
            </summary>
            <param name="path"><see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> that the range variable is iterating over.</param>
            <returns>A new <see cref="T:Microsoft.Data.OData.Query.SemanticAst.RangeVariable"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NodeFactory.CreateImplicitRangeVariable(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Creates a ParameterQueryNode for an implicit parameter ($it).
            </summary>
            <param name="elementType">Element type the parameter represents.</param>
            <param name="entitySet">Entity Set. May be null and must be null for non entities.</param>
            <returns>A new IParameterNode.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NodeFactory.CreateRangeVariableReferenceNode(Microsoft.Data.OData.Query.SemanticAst.RangeVariable)">
            <summary>
            Creates a RangeVariableReferenceNode for a given range variable
            </summary>
            <param name="rangeVariable">Name of the rangeVariable.</param>
            <returns>A new SingleValueNode (either an Entity or NonEntity RangeVariableReferenceNode.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NodeFactory.CreateParameterNode(System.String,Microsoft.Data.OData.Query.SemanticAst.CollectionNode)">
            <summary>
            Creates a ParameterQueryNode for an explicit parameter.
            </summary>
            <param name="parameter">Name of the parameter.</param>
            <param name="nodeToIterateOver">CollectionNode that the parameter is iterating over.</param>
            <returns>A new RangeVariable.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NodeFactory.CreateLambdaNode(Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.SemanticAst.CollectionNode,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.OData.Query.SemanticAst.RangeVariable,Microsoft.Data.OData.Query.QueryTokenKind)">
            <summary>
            Creates an AnyNode or an AllNode from the given 
            </summary>
            <param name="state">State of binding.</param>
            <param name="parent">Parent node to the lambda.</param>
            <param name="lambdaExpression">Bound Lambda expression.</param>
            <param name="newRangeVariable">The new range variable being added by this lambda node.</param>
            <param name="queryTokenKind">Token kind.</param>
            <returns>A new LambdaNode bound to metadata.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler">
            <summary>
            Handler interface for walking the path semantic tree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.TypeSegment)">
            <summary>
            Handle a TypeSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment)">
            <summary>
            Handle a NavigationPropertySegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment)">
            <summary>
            Handle an EntitySetSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.KeySegment)">
            <summary>
            Handle a KeySegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.PropertySegment)">
            <summary>
            Handle a PropertySegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.OperationSegment)">
            <summary>
            Handle an OperationSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment)">
            <summary>
            Handle an OpenPropertySegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.CountSegment)">
            <summary>
            Handle a CountSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment)">
            <summary>
            Handle a LinksSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.ValueSegment)">
            <summary>
            Handle a ValueSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.BatchSegment)">
            <summary>
            Handle a BatchSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment)">
            <summary>
            Handle a BatchReferenceSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler.Handle(Microsoft.Data.OData.Query.SemanticAst.MetadataSegment)">
            <summary>
            Handle a MetadataSegment
            </summary>
            <param name="segment">the segment to Handle</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode">
            <summary>
            Node to represent a function call that returns a collection of entities.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionNode">
            <summary>
            Base class for all semantically bound nodes which represent a composable collection of values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionNode.EntityItemType">
            <summary>
            Get the resouce type of a single entity from the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionNode.EntitySet">
            <summary>
            Get the EntitySet that contains this collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.name">
            <summary>
            the name of this function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.functionImports">
            <summary>
            list of function imports that this node represents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.parameters">
            <summary>
            list of parameters provided to this function
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.entityTypeReference">
            <summary>
            the type a single entity returned by this function
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.returnedCollectionTypeReference">
            <summary>
            the type of the collection returned by this function
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.entitySet">
            <summary>
            the set containing the entities returned by this function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.source">
            <summary>
            The semantically bound parent of this EntityCollectionFunctionCallNode.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport},System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.QueryNode},Microsoft.Data.Edm.IEdmCollectionTypeReference,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Creates an EntityCollecitonFunctionCallNode to represent a function call that returns a collection of entities.
            </summary>
            <param name="name">The name of this function.</param>
            <param name="functionImports">the list of function imports that this node represents.</param>
            <param name="parameters">the list of parameters to this function</param>
            <param name="returnedCollectionTypeReference">the type the entity collection returned by this function. The element type must be an entity type.</param>
            <param name="entitySet">the set containing entities returned by this function</param>
            <param name="source">the semantically bound parent of this EntityCollectionFunctionCallNode.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the provided name is null.</exception>
            <exception cref="T:System.ArgumentNullException">Throws if the provided collection type reference is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the element type of the provided collection type reference is not an entity type.</exception>
            <exception cref="T:System.ArgumentNullException">Throws if the input function imports is null</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.Name">
            <summary>
            Gets the name of this function
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.FunctionImports">
            <summary>
            Gets the list of function imports that this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.Parameters">
            <summary>
            Gets the list of parameters provided to this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.ItemType">
            <summary>
            Gets the individual item type returned by this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.CollectionType">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.EntityItemType">
            <summary>
            Gets the individual entity type returned by this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.EntitySet">
            <summary>
            Gets the entity set contaiing the entities returned by this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.Source">
            <summary>
            Gets the semantically bound parent of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator">
            <summary>
            Segment translator to determine whether a given <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/> is a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment)">
            <summary>
            Translate a NavigationPropertySegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment)">
            <summary>
            Translate an EntitySetSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.KeySegment)">
            <summary>
            Translate a KeySegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.PropertySegment)">
            <summary>
            Translate a PropertySegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment)">
            <summary>
            Translate an OpenPropertySegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.CountSegment)">
            <summary>
            Translate a CountSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment)">
            <summary>
            Translate a NavigationPropertyLinkSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.BatchSegment)">
            <summary>
            Translate a BatchSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment)">
            <summary>
            Translate a BatchReferenceSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.ValueSegment)">
            <summary>
            Translate a ValueSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.IsCollectionTranslator.Translate(Microsoft.Data.OData.Query.SemanticAst.MetadataSegment)">
            <summary>
            Translate a MetadataSegment
            </summary>
            <param name="segment">the segment to Translate</param>
            <returns>UserDefinedValue</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input segment is null.</exception>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment">
            <summary>
            A segment representing $links or $ref
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment">
            <summary>
            The semantic representation of a segment in a path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.identifier">
            <summary>Returns the identifier for this segment i.e. string part without the keys.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.singleResult">
            <summary>Indicates whether this segment targets a single result or not.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.targetEdmEntitySet">
            <summary>The entity set targetted by this segment. Can be null.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.targetEdmType">
            <summary>The type targetted by this segment. Can be null.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.targetKind">
            <summary>The kind of resource targeted by this segment.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.#ctor(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Creates a new Segment and copies values from another Segment.
            </summary>
            <param name="other">Segment to copy values from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.#ctor">
            <summary>
            Creates a new Segment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/> using an implemntation of<see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/> using an implementation of a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the handler interface.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check</param>
            <returns>true if the segments are equal.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.CopyValuesFrom(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Copies over all the values of the internal-only properties from one segment to another.
            </summary>
            <param name="other">Ther segment to copy from.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/>.
            </summary>
            <remarks>This property can be null. Not all segments have a Type, such as a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchSegment"/>.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.Identifier">
            <summary>Returns the identifier for this segment i.e. string part without the keys.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.SingleResult">
            <summary>Whether the segment targets a single result or not.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.TargetEdmEntitySet">
            <summary>The entity set targetted by this segment. Can be null.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.TargetEdmType">
            <summary>The type targetted by this segment. Can be null.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment.TargetKind">
            <summary>The kind of resource targeted by this segment.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment.navigationProperty">
            <summary>
            The navigation property this link or ref acts on.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build a segment to represnt $links or $ref on a Nav prop
            </summary>
            <param name="navigationProperty">The navigaiton property this link or ref acts on</param>
            <param name="entitySet">The set of entities linked to by this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment"/>. This can be null.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input navigationProperty is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/>s.
            </summary>
            <param name="handler">An implementation of the translator interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another.
            </summary>
            <param name="other">The other segment to check.</param>
            <returns>True if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment.NavigationProperty">
            <summary>
            Gets the navigation property this link or ref acts on.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment.EntitySet">
            <summary>
            Gets the set of entities linked to by this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertyLinkSegment"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ODataExpandPath">
            <summary>
            A specific type of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> which can only contain instances of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.TypeSegment"/> or <see cref="T:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath">
            <summary>
            A representation of the path portion of an OData URI which is made up of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ODataPath.segments">
            <summary>
            The segments that make up this path.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPath.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> containing the given segments.
            </summary>
            <param name="segments">The segments that make up the path.</param>
            <exception cref="M:Microsoft.Data.OData.Error.ArgumentNull(System.String)">Throws if input segments is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPath.#ctor(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment[])">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> containing the given segments.
            </summary>
            <param name="segments">The segments that make up the path.</param>
            <exception cref="M:Microsoft.Data.OData.Error.ArgumentNull(System.String)">Throws if input segments is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPath.GetEnumerator">
            <summary>
            Get the segments enumerator
            </summary>
            <returns>The segments enumerator</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPath.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            get the segments enumerator
            </summary>
            <returns>The segments enumerator.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPath.WalkWith``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Walk this path using a translator
            </summary>
            <typeparam name="T">the return type of the translator</typeparam>
            <param name="translator">a user defined translation path</param>
            <returns>an enumerable containing user defined objects for each segment</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPath.WalkWith(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Walk this path using a handler
            </summary>
            <param name="handler">the handler that will be applied to each segment</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPath.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Checks if this path is equal to another path.
            </summary>
            <param name="other">The other path to compare it to</param>
            <returns>True if the two paths are equal</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPath.Add(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Add a segment to this path.
            </summary>
            <param name="newSegment">the segment to add</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input newSegment is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPath.FirstSegment">
            <summary>
            Gets the first segment in the path. Returns null if the path is empty.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPath.LastSegment">
            <summary>
            Get the last segment in the path. Returns null if the path is empty.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataPath.Count">
            <summary>
            Get the number of segments in this path.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataExpandPath.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment})">
            <summary>
            Create an ODataPath object to represent a path semantically
            </summary>
            <param name="segments">The list of segments in the path.</param>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if this list of segments doesn't match the requirements for a $expand</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataExpandPath.#ctor(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment[])">
            <summary>
            Create an ODataPath object based on a single segment
            </summary>
            <param name="segments">A list of segments in the path.</param>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if this list of segments doesn't match the requirements for a $expand</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataExpandPath.GetNavigationProperty">
            <summary>
            Gets the navigation property for this expand path.
            </summary>
            <returns>the navigation property for this expand path.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataExpandPath.ValidatePath">
            <summary>
            Ensure that this expand path contains only valid segment types.
            </summary>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if this list of segments doesn't match the requirements for a $expand</exception>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/>. These method provide convenince functions.
            TODO: Implement this class and it's visitors. These are stubs.
            </summary>
            <remarks>
            The values that these methods compute are not cached.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathExtensions.EdmType(Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Computes the <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> of the resource identified by this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/>.
            </summary>
            <param name="path">Path to compute the type for.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> of the resource, or null if the path does not identify a 
            resource with a type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathExtensions.EntitySet(Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Computes the <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> of the resource identified by this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/>.
            </summary>
            <param name="path">Path to compute the set for.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> of the resource, or null if the path does not identify a 
            resource that is part of a set.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataPathExtensions.IsCollection(Microsoft.Data.OData.Query.SemanticAst.ODataPath)">
            <summary>
            Computes whether or not the resource identified by this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> is a collection.
            </summary>
            <param name="path">Path to perform the computation on.</param>
            <returns>True if the resource if a feed or collection of primitive or complex types. False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataPathFactory">
            <summary>Translates from an IPathSegment into an ODataPath</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathFactory.BindPath(System.Collections.Generic.ICollection{System.String},Microsoft.Data.OData.Query.ODataUriParserConfiguration)">
            <summary>
            Binds a collection of <paramref name="segments"/> to metadata, creating a semantic ODataPath object.
            </summary>
            <param name="segments">Collection of path segments.</param>
            <param name="configuration">The configuration to use when binding the path.</param>
            <returns>A semantic <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> object to describe the path.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriParser">
            <summary>
            Main Public API to parse an ODataURI.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriParser.configuration">
            <summary>
            The parser's configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.#ctor(Microsoft.Data.Edm.IEdmModel,System.Uri)">
            <summary>
            Build an ODataUriParser
            </summary>
            <param name="model">Model to use for metadata binding.</param>
            <param name="serviceRoot">Absolute URI of the service root.</param>
            <exception cref="T:System.ArgumentNullException">Throws if input model is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input serviceRoot is not an AbsoluteUri</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseFilter(System.String,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Parses a <paramref name="filter"/> clause on the given <paramref name="elementType"/>, binding
            the text into semantic nodes using the provided <paramref name="model"/>.
            </summary>
            <param name="filter">String representation of the filter expression.</param>
            <param name="model">Model to use for metadata binding.</param>
            <param name="elementType">Type that the filter clause refers to.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.Query.SemanticAst.FilterClause"/> representing the metadata bound filter expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseFilter(System.String,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Parses a <paramref name="filter"/> clause on the given <paramref name="elementType"/>, binding
            the text into semantic nodes using the provided <paramref name="model"/>.
            </summary>
            <param name="filter">String representation of the filter expression.</param>
            <param name="model">Model to use for metadata binding.</param>
            <param name="elementType">Type that the filter clause refers to.</param>
            <param name="entitySet">EntitySet that the elements beign filtered are from.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.Query.SemanticAst.FilterClause"/> representing the metadata bound filter expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseOrderBy(System.String,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Parses a <paramref name="orderBy"/> clause on the given <paramref name="elementType"/>, binding
            the text into semantic nodes using the provided <paramref name="model"/>.
            </summary>
            <param name="orderBy">String representation of the orderby expression.</param>
            <param name="model">Model to use for metadata binding.</param>
            <param name="elementType">Type that the orderby clause refers to.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause"/> representing the metadata bound orderby expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseOrderBy(System.String,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Parses a <paramref name="orderBy "/> clause on the given <paramref name="elementType"/>, binding
            the text into semantic nodes using the provided <paramref name="model"/>.
            </summary>
            <param name="orderBy">String representation of the orderby expression.</param>
            <param name="model">Model to use for metadata binding.</param>
            <param name="elementType">Type that the orderby clause refers to.</param>
            <param name="entitySet">EntitySet that the elements beign filtered are from.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause"/> representing the metadata bound orderby expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseFilter(System.String,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Parse a filter clause from an instantiated class.
            </summary>
            <param name="filter">the filter clause to parse</param>
            <param name="elementType">Type that the select and expand clauses are projecting.</param>
            <param name="entitySet">EntitySet that the elements being filtered are from.</param>
            <returns>A FilterClause representing the metadata bound filter expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseOrderBy(System.String,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Parse an orderby clause from an instance of this class
            </summary>
            <param name="orderBy">the orderby clause to parse</param>
            <param name="elementType">Type that the select and expand clauses are projecting.</param>
            <param name="entitySet">EntitySet that the elements being filtered are from.</param>
            <returns>An OrderByClause representing the metadata bound orderby expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParsePath(System.Uri)">
            <summary>
            Parses a <paramref name="pathUri"/> into a semantic <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> object. 
            </summary>
            <remarks>
            This is designed to parse the Path of a URL. If it is used to parse paths that are contained
            within other places, such as $filter expressions, then it may not enforce correct rules.
            </remarks>
            <param name="pathUri">The absolute URI which holds the path to parse.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> representing the metadata-bound path expression.</returns>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the serviceRoot member is null, or if the input path is not an absolute uri.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseSelectAndExpand(System.String,System.String,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            ParseSelectAndExpand from an instantiated class
            </summary>
            <param name="select">the select to parse</param>
            <param name="expand">the expand to parse</param>
            <param name="elementType">Type that the select and expand clauses are projecting.</param>
            <param name="entitySet">EntitySet that the elements being filtered are from. This can be null, if so that null will propagate through the resulting SelectExpandClause.</param>
            <returns>A SelectExpandClause with the semantic representation of select and expand terms</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseUri(System.Uri)">
            <summary>
            Parse a full Uri into its contingent parts with semantic meaning attached to each part. 
            See <see cref="T:Microsoft.Data.OData.Query.ODataUri"/>.
            </summary>
            <param name="fullUri">The full uri to parse.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.Query.ODataUri"/> representing the full uri.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseInlineCount(System.String)">
            <summary>
            Parses an inline count option
            </summary>
            <param name="inlineCount">The inline count string from the query</param>
            <returns>An InlineCountKind representing that inline count option.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseUriImplementation(System.Uri)">
            <summary>
            Parses the full Uri.
            </summary>
            <param name="fullUri">The full uri to parse</param>
            <returns>An ODataUri representing the full uri</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseFilterImplementation(System.String,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Parses a <paramref name="filter"/> clause on the given <paramref name="elementType"/>, binding
            the text into semantic nodes using the provided.
            </summary>
            <param name="filter">String representation of the filter expression.</param>
            <param name="elementType">Type that the filter clause refers to.</param>
            <param name="entitySet">EntitySet that the elements beign filtered are from.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.Query.SemanticAst.FilterClause"/> representing the metadata bound filter expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseOrderByImplementation(System.String,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Parses a <paramref name="orderBy "/> clause on the given <paramref name="elementType"/>, binding
            the text into semantic nodes using the provided model.
            </summary>
            <param name="orderBy">String representation of the orderby expression.</param>
            <param name="elementType">Type that the orderby clause refers to.</param>
            <param name="entitySet">EntitySet that the elements beign filtered are from.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause"/> representing the metadata bound orderby expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseSelectAndExpandImplementation(System.String,System.String,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Parses the <paramref name="select"/> and <paramref name="expand"/> clauses on the given <paramref name="elementType"/>, binding
            the text into a metadata-bound list of properties to be selected using the provided model.
            </summary>
            <param name="select">String representation of the select expression from the URI.</param>
            <param name="expand">String representation of the expand expression from the URI.</param>
            <param name="elementType">Type that the select and expand clauses are projecting.</param>
            <param name="entitySet">EntitySet that the elements being filtered are from.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause"/> representing the metadata bound orderby expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriParser.ParseInlineCountImplementation(System.String)">
            <summary>
            Parses an inline count option
            </summary>
            <param name="inlineCount">The inline count string from the query</param>
            <returns>An InlineCountKind representing that inline count option.</returns>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the input inlineCount is not a valid $inlinecount value.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParser.Settings">
            <summary>
            The settings for this instance of <see cref="T:Microsoft.Data.OData.Query.ODataUriParser"/>. Refer to the documentation for the individual properties of <see cref="T:Microsoft.Data.OData.Query.ODataUriParserSettings"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParser.Model">
            <summary>
            Gets the model for this ODataUriParser
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParser.ServiceRoot">
            <summary>
            Gets the absolute URI of the service root.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParser.UrlConventions">
            <summary>
            Gets or Sets the <see cref="T:Microsoft.Data.OData.Query.ODataUrlConventions"/> to use while parsing, specifically
            whether to recognize keys as segments or not.
            </summary>
            <exception cref="T:System.ArgumentNullException">Throws if the input value is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParser.BatchReferenceCallback">
            <summary>
            Gets or Sets a callback that returns a BatchReferenceSegment (to be used for $0 in batch)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriParser.FunctionParameterAliasCallback">
            <summary>
            Gets or sets a callback that returns the raw string value for an aliased function parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUnrecognizedPathException">
            <summary>
            The exception that is thrown when path parsing detects an unrecognized or unresolvable token in a path (which servers should treat as a 404).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataException">
            <summary>
            Exception type representing exceptions in the OData library.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataException.#ctor">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataException" /> class with default values.</summary>
            <remarks>
            The Message property is initialized to a system-supplied message
            that describes the error. This message takes into account the
            current system culture.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataException.#ctor(System.String)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataException" /> class with an error message.</summary>
            <param name="message">The plain text error message for this exception.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataException" /> class with an error message and an inner exception.</summary>
            <param name="message">The plain text error message for this exception.</param>
            <param name="innerException">The inner exception that is the cause of this exception to be thrown.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataException" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
            <param name="info"> A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> containing the information required to serialize  the new <see cref="T:Microsoft.Data.OData.ODataException" />. </param>
            <param name="context"> A <see cref="T:System.Runtime.Serialization.StreamingContext" /> containing the source of the serialized stream  associated with the new <see cref="T:Microsoft.Data.OData.ODataException" />. </param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUnrecognizedPathException.#ctor">
            <summary>
            Initializes a new instance of the ODataUnrecognizedPathException class.
            </summary>
            <remarks>
            The Message property is initialized to a system-supplied message 
            that describes the error. This message takes into account the 
            current system culture. 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUnrecognizedPathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ODataUnrecognizedPathException class.
            </summary>
            <param name="message">Plain text error message for this exception.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUnrecognizedPathException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataServiceException class.
            </summary>
            <param name="message">Plain text error message for this exception.</param>
            <param name="innerException">Exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUnrecognizedPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataUnrecognizedPathException" /> class from the  specified SerializationInfo and StreamingContext instances.</summary>
            <param name="info"> A SerializationInfo containing the information required to serialize the new ODataUnrecognizedPathException. </param>
            <param name="context"> A StreamingContext containing the source of the serialized stream  associated with the new ODataUnrecognizedPathException. </param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUrlConventions">
            <summary>
            Component for controlling what convention are used for generating URLs.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUrlConventions.DefaultInstance">
            <summary>Singleton instance of the default conventions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUrlConventions.KeyAsSegmentInstance">
            <summary>Singleton instance of the key-as-segment conventions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUrlConventions.urlConvention">
            <summary>The url convention to use.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUrlConventions.#ctor(Microsoft.Data.OData.Evaluation.UrlConvention)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Data.OData.Query.ODataUrlConventions"/> class from being created.
            </summary>
            <param name="urlConvention">The url convention to use.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUrlConventions.Default">
            <summary>
            An instance of <see cref="T:Microsoft.Data.OData.Query.ODataUrlConventions"/> which uses default URL conventions. Specifically, this instance will produce keys that use parentheses like "Customers('ALFKI')".
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUrlConventions.KeyAsSegment">
            <summary>
            An instance of <see cref="T:Microsoft.Data.OData.Query.ODataUrlConventions"/> which uses key-as-segment URL conventions. Specifically, this instance will produce keys that use segments like "Customers/ALFKI".
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUrlConventions.UrlConvention">
            <summary>
            Gets the internal representation of the user-specified convention.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.OrderByBinder">
            <summary>
            Class to handle the binding of orderby tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OrderByBinder.bindMethod">
            <summary>
            Method to use to visit the token tree and bind the tokens recursively.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OrderByBinder.#ctor(Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Creates an OrderByBinder
            </summary>
            <param name="bindMethod">Method to use to visit the token tree and bind the tokens recursively.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OrderByBinder.BindOrderBy(Microsoft.Data.OData.Query.BindingState,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.OrderByToken})">
            <summary>
            Processes the order-by tokens of a entityCollection (if any).
            </summary>
            <param name="state">State to use for binding.</param>
            <param name="orderByTokens">The order-by tokens to bind.</param>
            <returns>An OrderByClause representing the orderby statements expressed in the tokens.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OrderByBinder.ProcessSingleOrderBy(Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.SemanticAst.OrderByClause,Microsoft.Data.OData.Query.SyntacticAst.OrderByToken)">
            <summary>
            Processes the specified order-by token.
            </summary>
            <param name="state">State to use for binding.</param>
            <param name="thenBy"> The next OrderBy node, or null if there is no orderby after this.</param>
            <param name="orderByToken">The order-by token to bind.</param>
            <returns>Returns the combined entityCollection including the ordering.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.PathParserModelUtils">
            <summary>
            Set of helpers and extensions to make it easier to convert the semantic path parser
            to using <see cref="T:Microsoft.Data.Edm.IEdmType"/> and the related classes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.PathParserModelUtils.IsOpenType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Returns whether the given type is a structural type that is open.
            </summary>
            <param name="edmType">The type to check.</param>
            <returns>Whether the type is both structural and open.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.PathParserModelUtils.IsEntityOrEntityCollectionType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Returns whether or not the type is an entity or entity collection type.
            </summary>
            <param name="edmType">The type to check.</param>
            <returns>Whether or not the type is an entity or entity collection type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.PathParserModelUtils.IsEntityOrEntityCollectionType(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntityType@)">
            <summary>
            Returns whether or not the type is an entity or entity collection type.
            </summary>
            <param name="edmType">The type to check.</param>
            <param name="entityType">The entity type. If the given type was a collection, this will be the element type.</param>
            <returns>Whether or not the type is an entity or entity collection type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.PathParserModelUtils.GetTargetEntitySet(Microsoft.Data.Edm.IEdmFunctionImport,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the target entity set for the given function import.
            </summary>
            <param name="functionImport">The function import.</param>
            <param name="sourceEntitySet">The source entity set.</param>
            <param name="model">The model.</param>
            <returns>The target entity set of the function import or null if it could not be determined.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.PathParserModelUtils.ThrowIfOpenComplexType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Throws an exception if the given type is an open complex type.
            </summary>
            <param name="edmType">The type to check.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.PathReverser">
            <summary>
            Reverse a Path
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenVisitor`1">
            <summary>
            Visitor interface for walking the Syntactic Tree.
            </summary>
            <typeparam name="T">Generic type produced by the visitor.</typeparam>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.SystemToken)">
            <summary>
            Visit an SystemToken
            </summary>
            <param name="tokenIn">The System token to visit</param>
            <returns>A user defined class</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken)">
            <summary>
            Visit an NonSystemToken
            </summary>
            <param name="tokenIn">The System token to visit</param>
            <returns>A user defined class</returns>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.PathReverser.childToken">
            <summary>
            any children of the root, will always be null on first call
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathReverser.#ctor">
            <summary>
            Build a PathReverser at the top level (with no child token)
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathReverser.#ctor(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Build a PathReverser based on a child token.
            </summary>
            <param name="childToken">the new child of this token</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathReverser.Visit(Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken)">
            <summary>
            Reverse a NonSystemToken
            </summary>
            <param name="tokenIn">the non system token to reverse</param>
            <returns>the reversed NonSystemToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathReverser.Visit(Microsoft.Data.OData.Query.SyntacticAst.SystemToken)">
            <summary>
            Reverse a SystemToken
            </summary>
            <param name="tokenIn">the SystemToken to reverse</param>
            <returns>the reversed SystemToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathReverser.BuildNextStep(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Build the next level PathReverser
            </summary>
            <param name="nextLevelToken">the next level token</param>
            <param name="nextChildToken">the next levels child token</param>
            <returns>the path token from the next level.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenEqualityComparer">
            <summary>
            Equality comparer for <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenEqualityComparer.Equals(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Determines whether the two paths are equivalent.
            </summary>
            <param name="first">The first path to compare.</param>
            <param name="second">The second path to compare.</param>
            <returns>Whether the two paths are equivalent.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenEqualityComparer.GetHashCode(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Returns a hash code for the given path.
            </summary>
            <param name="path">The path to hash.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenEqualityComparer.ToHashableString(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Converts the token to a string that is sufficiently unique to be hashed or compared.
            </summary>
            <param name="token">The path token to convert to a string.</param>
            <returns>A string representing the path.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenVisitor">
            <summary>
            Visitor interface for walking the Syntactic Tree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenVisitor.Visit(Microsoft.Data.OData.Query.SyntacticAst.SystemToken)">
            <summary>
            Visit an SystemToken
            </summary>
            <param name="tokenIn">The System token to visit</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentTokenVisitor.Visit(Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken)">
            <summary>
            Visit an NonSystemToken
            </summary>
            <param name="tokenIn">The System token to visit</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.RangeVariableBinder">
            <summary>
            Class that knows how to bind ParameterQueryTokens.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.RangeVariableBinder.BindRangeVariableToken(Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Binds a parameter token.
            </summary>
            <param name="rangeVariableToken">The parameter token to bind.</param>
            <param name="state">The state of metadata binding.</param>
            <returns>The bound query node.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.EndPathBinder">
            <summary>
            Class that knows how to bind an end path token, which could be several things.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.EndPathBinder.bind">
            <summary>
            Method to bind the value of a key.
            TODO Make it of return type SingleValueQueryNode.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.EndPathBinder.functionCallBinder">
            <summary>
            The function call binder to use to bind this end path to a function if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.EndPathBinder.#ctor(Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Constructs a EndPathBinder object using the given function to bind parent token.
            </summary>
            <param name="bindMethod">Method to bind the EndPathToken's parent, if there is one.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.EndPathBinder.GeneratePropertyAccessQueryForOpenType(Microsoft.Data.OData.Query.SyntacticAst.EndPathToken,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode)">
            <summary>
            This method generates a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode"/> for properties of open type
            </summary>
            <param name="endPathToken">EndPathToken to bind into an open property node.</param>
            <param name="parentNode">Parent node of this open property</param>
            <returns>Will return a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode"/> when open types are supported</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.EndPathBinder.GeneratePropertyAccessQueryNode(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Generates a bound query node representing an <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> given an already semantically bound parent node.
            </summary>
            <param name="parentNode">The semantically bound source node of this end path token</param>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> that will be bound to this node. Must not be primitive collection</param>
            <returns>QueryNode bound to this property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.EndPathBinder.CreateParentFromImplicitRangeVariable(Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Constructs parent node from binding state
            </summary>
            <param name="state">Current binding state</param>
            <returns>The parent node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.EndPathBinder.BindEndPath(Microsoft.Data.OData.Query.SyntacticAst.EndPathToken,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Binds a an end path token into a PropertyAccessToken, OpenPropertyToken, or FunctionCallToken.
            </summary>
            <param name="endPathToken">The property access token to bind.</param>
            <param name="state">State of the binding algorithm.</param>
            <returns>A Query node representing this endpath token, bound to metadata.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.EndPathBinder.DetermineParentNode(Microsoft.Data.OData.Query.SyntacticAst.EndPathToken,Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Determines the parent node. If the token has a parent, that token is bound. If not, then we 
            use the implicit parameter from the BindingState as the parent node.
            </summary>
            <param name="segmentToken">Token to determine the parent node for.</param>
            <param name="state">Current state of binding.</param>
            <returns>A SingleValueQueryNode that is the parent node of the <paramref name="segmentToken"/>.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.RequestTargetKind">
            <summary>
            Provides values to describe the kind of thing targetted by a 
            client request.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.Nothing">
            <summary>Nothing specific is being requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.ServiceDirectory">
            <summary>A top-level directory of service capabilities.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.Resource">
            <summary>Entity Resource is requested - it can be a collection or a single value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.ComplexObject">
            <summary>A single complex value is requested (eg: an Address).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.Primitive">
            <summary>A single value is requested (eg: a Picture property).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.PrimitiveValue">
            <summary>A single value is requested (eg: the raw stream of a Picture).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.Metadata">
            <summary>System metadata.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.VoidOperation">
            <summary>A data-service-defined operation that doesn't return anything.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.Batch">
            <summary>The request is a batch request.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.OpenProperty">
            <summary>An open property is requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.OpenPropertyValue">
            <summary>An open property value is requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.MediaResource">
            <summary>A stream property value is requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.RequestTargetKind.Collection">
            <summary>A single collection of primitive or complex values is requested.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataPathParser">
            <summary>
            Semantic parser for the path of the request URI.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataPathParser.ContentIdRegex">
            <summary>
            regex pattern to match a contentID
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataPathParser.segmentQueue">
            <summary>
            The queue of segments remaining to be parsed. Should be populated and cleared out on each pass through the main path parsing loop.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataPathParser.parsedSegments">
            <summary>
            The collection of segments that have been parsed so far.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataPathParser.configuration">
            <summary>
            The parser's current configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataPathParser.nextSegmentMustReferToMetadata">
            <summary>
            Indicates that the next segment encountered must refer to something in 'metadata-space' and cannot be a key expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.#ctor(Microsoft.Data.OData.Query.ODataUriParserConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.OData.Query.ODataPathParser"/>.
            </summary>
            <param name="configuration">The parser's current configuration.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.ExtractSegmentIdentifierAndParenthesisExpression(System.String,System.String@,System.String@)">
            <summary>
            Extracts the segment identifier and, if there are parenthesis in the segment, the expression in the parenthesis.  
            Will throw if identifier is not found or if the parenthesis expression is malformed.
            </summary>
            <remarks>Internal only so it can be called from tests. Should not be used outside <see cref="T:Microsoft.Data.OData.Query.ODataPathParser"/>.</remarks>
            <param name="segmentText">The segment text.</param>
            <param name="identifier">The identifier that was found.</param>
            <param name="parenthesisExpression">The query portion that was found. Will be null after the call if no query portion was present.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.ParsePath(System.Collections.Generic.ICollection{System.String})">
            <summary>Creates an <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/> array for the given <paramref name="segments"/>.</summary>
            <param name="segments">Segments to process.</param>
            <returns>Segment information describing the given <paramref name="segments"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryBindingParametersAndMatchingOperation(System.String,System.String,Microsoft.Data.Edm.IEdmType,Microsoft.Data.OData.Query.ODataUriParserConfiguration,System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SemanticAst.OperationSegmentParameter}@,Microsoft.Data.Edm.IEdmFunctionImport@)">
            <summary>
            Tries to find a single matching function import for the given identifier, parametes, and binding type.
            </summary>
            <param name="identifier">The identifier from the URI.</param>
            <param name="parenthesisExpression">The parenthesis expression contianing parameters, if any.</param>
            <param name="bindingType">The current binding type or null if there isn't one.</param>
            <param name="configuration">The configuration of the parser.</param>
            <param name="parsedParameters">The parsed parameters from the parenthesis expression.</param>
            <param name="matchingFunctionImport">The single matching function import if one could be determined.</param>
            <returns>Whether or not a matching function import could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TargetKindFromType(Microsoft.Data.Edm.IEdmType)">
            <summary>Determines a matching target kind from the specified type.</summary>
            <param name="type">ResourceType of element to get kind for.</param>
            <returns>An appropriate <see cref="T:Microsoft.Data.OData.Query.RequestTargetKind"/> for the specified <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.CheckSingleResult(System.Boolean,System.String)">
            <summary>
            Checks for single result, otherwise throws.
            </summary>
            <param name="isSingleResult">indicates whether the current result is single result or not.</param>
            <param name="identifier">current segment identifier.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryGetNextSegmentText(System.String@)">
            <summary>
            Tries to get the next segment's text to parse.
            </summary>
            <param name="segmentText">The segment text to parse.</param>
            <returns>Whether there was a next segment.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryGetNextSegmentText(System.Boolean,System.String@)">
            <summary>
            Tries to get the next segment's text to parse. Should not be called except by the other overload which does not have the extra parameter.
            </summary>
            <param name="previousSegmentWasEscapeMarker">Whether the previous segment was an escape marker.</param>
            <param name="segmentText">The segment text to parse.</param>
            <returns>Whether there was a next segment.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryHandleAsKeySegment(System.String)">
            <summary>
            Tries to handle the given text as a key if the URL conventions support it and it was not preceeded by an escape segment.
            </summary>
            <param name="segmentText">The text which might be a key.</param>
            <returns>Whether or not the text was handled as a key.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.ThrowIfMustBeLeafSegment(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Throws if the given segment must be a leaf, as a later segment is being created.
            </summary>
            <param name="previous">The previous segment which may need to be a leaf.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryCreateCountSegment(System.String)">
            <summary>
            Try to handle the segment as $count.
            </summary>
            <param name="segmentText">The segment text to handle.</param>
            <returns>Whether the segment was $count.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryCreateLinksSegment(System.String)">
            <summary>
            Tries to handle the segment as $links. If it is $links, then the rest of the path will be parsed/validated in this call.
            </summary>
            <param name="text">The text of the segment.</param>
            <returns>Whether the text was $links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryBindKeyFromParentheses(System.String)">
            <summary>
            Tries to bind a key from the parenthetical section of a segment.
            </summary>
            <param name="parenthesesSection">The section of the segment inside parentheses, or null if there was none.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryCreateValueSegment(System.String)">
            <summary>
            Try to handle the segment as $value.
            </summary>
            <param name="text">The segment text.</param>
            <returns>Whether the segment was $value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.CreateOpenPropertySegment(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment,System.String,System.String)">
            <summary>
            Creates a new segment for an open property.
            </summary>
            <param name="previous">previous segment info.</param>
            <param name="identifier">name of the segment.</param>
            <param name="parenthesisExpression">whether this segment has a query portion or not.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.CreateNamedStreamSegment(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Creates a named stream segment
            </summary>
            <param name="previous">previous segment info.</param>
            <param name="streamProperty">stream property to create the segment for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.CreateFirstSegment(System.String)">
            <summary>Creates the first <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/> for a request.</summary>
            <param name="segmentText">The text of the segment.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryCreateSegmentForServiceOperation(System.String,System.String)">
            <summary>
            Tries to parse the segment as a service operation
            </summary>
            <param name="identifier">The identifier for the segment.</param>
            <param name="queryPortion">The query portion</param>
            <returns>Whether or not the identifier referred to a service operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryCreateSegmentForOperation(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment,System.String,System.String)">
            <summary>
            Tries to parse a segment as a function or action.
            </summary>
            <param name="previousSegment">The previous segment before the operation to be invoked.</param>
            <param name="identifier">The name of the segment</param>
            <param name="parenthesisExpression">The query portion</param>
            <returns>Whether or not the identifier referred to an action.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.CreateNextSegment(System.String)">
            <summary>
            Creates the next segment.
            </summary>
            <param name="text">The text for the next segment.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryBindProperty(System.String,Microsoft.Data.Edm.IEdmProperty@)">
            <summary>
            Tries to bind the identifier as a property.
            </summary>
            <param name="identifier">The identifier to bind.</param>
            <param name="projectedProperty">The property, if one was found.</param>
            <returns>Whether a property matching the identifier was found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.TryCreateTypeNameSegment(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment,System.String,System.String)">
            <summary>
            Tries to create a type name segment if the given identifier refers to a known type.
            </summary>
            <param name="previous">previous segment info.</param>
            <param name="identifier">The current raw segment identifier being interpreted.</param>
            <param name="parenthesisExpression">Parenthesis expression of this segment.</param>
            <returns>Whether or not a type segment was created for the identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataPathParser.CreatePropertySegment(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment,Microsoft.Data.Edm.IEdmProperty,System.String)">
            <summary>
            Creates a property segment
            </summary>
            <param name="previous">previous segment info.</param>
            <param name="property">property to create the segment for.</param>
            <param name="queryPortion">query portion for this segment, if specified.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SegmentKeyHandler">
            <summary>
            Component for handling key expressions in URIs.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentKeyHandler.TryCreateKeySegmentFromParentheses(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment,System.String,Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment@)">
            <summary>Tries to create a key segment for the given filter if it is non empty.</summary>
            <param name="previous">Segment on which to compose.</param>
            <param name="parenthesisExpression">Parenthesis expression of segment.</param>
            <param name="keySegment">The key segment that was created if the key was non-empty.</param>
            <returns>Whether the key was non-empty.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentKeyHandler.TryHandleSegmentAsKey(System.String,Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment,Microsoft.Data.OData.Evaluation.UrlConvention,Microsoft.Data.OData.Query.SemanticAst.KeySegment@)">
            <summary>
            Tries to handle the current segment as a key property value.
            </summary>
            <param name="segmentText">The segment text.</param>
            <param name="previous">The previous segment.</param>
            <param name="urlConvention">The current url convention for the server.</param>
            <param name="keySegment">The key segment that was created if the segment could be interpreted as a key.</param>
            <returns>Whether or not the segment was interpreted as a key.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentKeyHandler.IsSystemSegment(System.String)">
            <summary>
            Determines whether the segment text is a system-reserved identifier like $'count'.
            </summary>
            <param name="segmentText">The segment text.</param>
            <returns>
              <c>true</c> if the segment text is a system-reserved identifier like $'count'; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SegmentKeyHandler.CreateKeySegment(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment,Microsoft.Data.OData.Query.SegmentArgumentParser)">
            <summary>
            Parses the key properties based on the segment's target type, then creates a new segment for the key.
            </summary>
            <param name="segment">The segment to apply the key to.</param>
            <param name="key">The key to apply.</param>
            <returns>The newly created key segment.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.SelectPathSegmentTokenBinder">
            <summary>
            Builds segments from tokens within $select.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectPathSegmentTokenBinder.ConvertNonTypeTokenToSegment(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Build a segment from a token.
            </summary>
            <param name="tokenIn">the token to bind</param>
            <param name="model">The model.</param>
            <param name="entityType">the entity type of the current scope based on type segments.</param>
            <returns>The segment created from the token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectPathSegmentTokenBinder.TryBindAsWildcard(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.Query.SemanticAst.SelectItem@)">
            <summary>
            Build a wildcard selection item
            </summary>
            <param name="tokenIn">the token to bind to a wildcard</param>
            <param name="model">the model to search for this wildcard</param>
            <param name="item">the new wildcard selection item, if we found one</param>
            <returns>true if we successfully bound to a wildcard, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectPathSegmentTokenBinder.TryBindAsOperation(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment@)">
            <summary>
            Tries to bind a given token as an Operation.
            </summary>
            <param name="pathToken">Token to bind.</param>
            <param name="model">The model.</param>
            <param name="entityType">the current entity type to use as the binding type when looking for operations.</param>
            <param name="segment">Bound segment if the token was bound to an operation successfully, or null.</param>
            <returns>True if the token was bound successfully, or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectPathSegmentTokenBinder.TryBindAsDeclaredProperty(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment@)">
            <summary>
            Tries to bind a given token as an a declared structural or navigation property.
            </summary>
            <param name="tokenIn">Token to bind.</param>
            <param name="entityType">the entity type to search for this property</param>
            <param name="segment">Bound segment if the token was bound to a declared property successfully, or null.</param>
            <returns>True if the token was bound successfully, or false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SelectExpandTermParserFactory">
            <summary>
            Build an ISelectExpandTermParser based on settings.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParserFactory.Create(System.String,Microsoft.Data.OData.Query.ODataUriParserSettings)">
            <summary>
            Build a new ISelectExpandTermParser, either with expand options or without, based on the global settings.
            </summary>
            <param name="clauseToParse">the select or expand text to parse</param>
            <param name="settings">pointer to the top level object</param>
            <returns>A new ISelectExpandTermParser</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SelectExpandTermParserFactory.Create(System.String)">
            <summary>
            Build a new ISelectExpandTermParser with default settings
            </summary>
            <param name="clauseToParse">the clause to parse</param>
            <returns>A NonOptionSelectExpandTermParser</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandTreeFinisher">
            <summary>
            Polish a combined select expand tree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SelectExpandTreeFinisher.PruneSelectExpandTree(Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause)">
            <summary>
            Prune off any unneccessary expands
            </summary>
            <param name="clauseToPrune">the clause to prune</param>
            <returns>a pruned tree.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor">
            <summary>
            Visit a Select property and use it to decorate a SelectExpand Tree
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.model">
            <summary>
            The model used for binding.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.maxDepth">
            <summary>
            the maximum recursive depth.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.expandClauseToDecorate">
            <summary>
            The expand tree to decorate.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.entityType">
            <summary>
            The entity type for this level of the select
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.#ctor(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType,System.Int32,Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause)">
            <summary>
            Build a property visitor to visit the select tree and decorate a SelectExpandClause
            </summary>
            <param name="model">The model used for binding.</param>
            <param name="entityType">The entity type that the $select is being applied to.</param>
            <param name="maxDepth">the maximum recursive depth.</param>
            <param name="expandClauseToDecorate">The already built expand clause to decorate</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.Visit(Microsoft.Data.OData.Query.SyntacticAst.SystemToken)">
            <summary>
            Visit a System Token
            </summary>
            <param name="tokenIn">the system token to visit</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.Visit(Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken)">
            <summary>
            Visit a NonSystemToken
            </summary>
            <param name="tokenIn">the non sytem token to visit</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.ProcessTokenAsPath(Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken)">
            <summary>
            process a nonsystemtoken as a path, following any type segments if necessary
            </summary>
            <param name="tokenIn">the token to process</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.SelectPropertyVisitor.DecoratedExpandClause">
            <summary>
            The expand tree that we're decorating
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.SelectTreeNormalizer">
            <summary>
            Translate a select tree into the right format to be used with an expand tree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectTreeNormalizer.NormalizeSelectTree(Microsoft.Data.OData.Query.SyntacticAst.SelectToken)">
            <summary>
            Normalize a SelectToken into something that can be used to trim an expand tree.
            </summary>
            <param name="treeToNormalize">The select token to normalize</param>
            <returns>Normalized SelectToken</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.AllSelection">
            <summary>
            Class that represents a selection of all properties and functions on an entity.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.Selection">
            <summary>
            Class that specifies what properties and functions have been specified to be selected for a given entity at the current level of the expand tree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.AllSelection.Instance">
            <summary>
            Singleton instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.AllSelection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.AllSelection.#ctor">
            <summary>
            Creates the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment">
            <summary>
            A segment representing an alias to another url in a batch.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.edmType">
            <summary>
            The <see cref="T:Microsoft.Data.Edm.IEdmType"/> of the resource that this placeholder <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment"/> represents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.entitySet">
            <summary>
            The entity set from the alias.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.contentId">
            <summary>
            The contentId that this alias referrs to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.#ctor(System.String,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build a BatchReferenceSegment
            </summary>
            <param name="contentId">The contentId of this segment is referring to</param>
            <param name="edmType">The <see cref="T:Microsoft.Data.Edm.IEdmType"/> of the resource that this placeholder <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment"/> represents.</param>
            <param name="entitySet">The resulting entity set</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input edmType of contentID is null.</exception>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the contentID is not in the right format.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment"/> into something else.
            </summary>
            <typeparam name="T">Type that the translator will return after translating this segment.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment"/> using an implementation of the <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/> interface.
            </summary>
            <param name="handler">An implementation of the Handler interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input Handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of the resource that this placeholder <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment"/> represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.EntitySet">
            <summary>
            Gets the resulting entity set for this batch reference segment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BatchReferenceSegment.ContentId">
            <summary>
            Gets the contentId this alias is referrring to
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.BatchSegment">
            <summary>
            A segment representing $batch
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.BatchSegment.Instance">
            <summary>
            Gets the singleton instance of the batch segment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BatchSegment.#ctor">
            <summary>
            Build a segment to represent $batch.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BatchSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchSegment"/> into something else using an implementation of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after translating this segment.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BatchSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchSegment"/> using an implementation of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the Handler interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BatchSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">The other segment to check.</param>
            <returns>True if the other segment is equivalent to this one.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BatchSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.BatchSegment"/>, which is always null.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ContainerQualifiedWildcardSelectItem">
            <summary>
            Class to represent the selection of all the actions and functions in a specified container.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SelectItem">
            <summary>
            An item that has been selected by the query at the current level of the tree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ContainerQualifiedWildcardSelectItem.container">
            <summary>
            The <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> whose actions and functions should be selected.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ContainerQualifiedWildcardSelectItem.#ctor(Microsoft.Data.Edm.IEdmEntityContainer)">
            <summary>
            Creates an instance of this class with the specified <paramref name="container"/>.
            </summary>
            <param name="container">The <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> whose actions and functions should be selected.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input container is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ContainerQualifiedWildcardSelectItem.Container">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> whose actions and functions should be selected.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.CountSegment">
            <summary>
            A segment representing $count in a path
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CountSegment.Instance">
            <summary>
            Return the singleton instance of Count
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CountSegment.#ctor">
            <summary>
            Build a segment representing $count
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CountSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.CountSegment"/> using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CountSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.CountSegment"/> using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the handler interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CountSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CountSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.CountSegment"/>, which is always Edm.Int32.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.EntitySetExpressionResolver">
            <summary>
            Class that knows how to resolve an IEdmExpression to find its associated EntitySet.
            This functionality is needed to determine what a EntitySets a FunctionImport applies to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.EntitySetExpressionResolver.ResolveEntitySetFromExpression(Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Resolves an IEdmExpression to an IEdmEntitySet.
            </summary>
            <param name="expression">Expression to resolve.</param>
            <returns>The resolved EntitySet.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment">
            <summary>
            A segment representing an EntitySet in a path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment.entitySet">
            <summary>
            The entity set represented by this segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment.type">
            <summary>
            Type of the entities in the set represented by this segment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment.#ctor(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build a segment representing an entity set
            </summary>
            <param name="entitySet">The entity set represented by this segment.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input entitySet is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate an <see cref="T:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment"/> into another type using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle an <see cref="T:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment"/> using the an instance of the <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the handler interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment.EntitySet">
            <summary>
            Gets the entity set represented by this segment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.EntitySetSegment"/>. 
            This will always be an <see cref="T:Microsoft.Data.Edm.IEdmCollectionType"/> for the <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> that this set contains.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem">
            <summary>
            This represents one level of expansion for a particular expansion tree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.pathToNavigationProperty">
            <summary>
            The Path for this expand level.
            This path includes zero or more type segments followed by exactly one Navigation Property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.entitySet">
            <summary>
            The entity set for this expansion level.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.filterOption">
            <summary>
            The filter expand option for this expandItem. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.orderByOption">
            <summary>
            The orderby expand option for this expand item. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.topOption">
            <summary>
            the top expand option for this expand item. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.skipOption">
            <summary>
            The skip option for this expand item. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.inlineCountOption">
            <summary>
            The inlinecount option for this expand item. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.selectAndExpand">
            <summary>
            The select that applies to this level, and any sub expand levels below this one.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.#ctor(Microsoft.Data.OData.Query.SemanticAst.ODataExpandPath,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause)">
            <summary>
            Create an Expand item using a nav prop, its entity set and a SelectExpandClause 
            </summary>
            <param name="pathToNavigationProperty">the path to the navigation property for this expand item, including any type segments</param>
            <param name="entitySet">the entity set for this ExpandItem</param>
            <param name="selectExpandOption">This level select and any sub expands for this expand item.</param>
            <exception cref="T:System.ArgumentNullException">Throws if input pathToNavigationProperty is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.#ctor(Microsoft.Data.OData.Query.SemanticAst.ODataExpandPath,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.OData.Query.SemanticAst.FilterClause,Microsoft.Data.OData.Query.SemanticAst.OrderByClause,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Microsoft.Data.OData.Query.InlineCountKind},Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause)">
            <summary>
            Create an expand item, using a navigationProperty, its entity set, and any expand options.
            </summary>
            <param name="pathToNavigationProperty">the path to the navigation property for this expand item, including any type segments</param>
            <param name="entitySet">the entity set for this expand level.</param>
            <param name="filterOption">A filter clause for this expand (can be null)</param>
            <param name="orderByOption">An Orderby clause for this expand (can be null)</param>
            <param name="topOption">A top clause for this expand (can be null)</param>
            <param name="skipOption">A skip clause for this expand (can be null)</param>
            <param name="inlineCountOption">An Inlinecount clause for this expand (can be null)</param>
            <param name="selectAndExpand">This level select and any sub expands for this expand item.</param>
            <exception cref="T:System.ArgumentNullException">Throws if input pathToNavigationProperty is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.PathToNavigationProperty">
            <summary>
            Gets the Path for this expand level.
            This path includes zero or more type segments followed by exactly one Navigation Property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.EntitySet">
            <summary>
            Gets the EntitySet for this level.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.SelectAndExpand">
            <summary>
            The select and expand clause for this expanded navigation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.FilterOption">
            <summary>
            The filter clause for this expand item
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.OrderByOption">
            <summary>
            Gets the orderby clause for this expand item. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.TopOption">
            <summary>
            Gets the top clause for this expand item. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.SkipOption">
            <summary>
            Gets the skip clause for this expand item. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem.InlineCountOption">
            <summary>
            Gets the inlinecount clause for this expand item. Can be null if not specified(and will always be null in NonOptionMode).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.Expansion">
            <summary>
            A list of all expanded items at the next level down.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.Expansion.expandItems">
            <summary>
            The list of all expanded items at the next level down.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.Expansion.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.ExpandedNavigationSelectItem})">
            <summary>
            Constructor
            </summary>
            <param name="expandItems">The list of all expanded items at the next level down.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.Expansion.ExpandItems">
            <summary>
            The list of all expanded items at the next level down.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.KeySegment">
            <summary>
            A segment representing a key lookup in a path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.KeySegment.keys">
            <summary>
            The set of key property names and the values to be used in searching for the given item.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.KeySegment.edmType">
            <summary>
            The type of the item this key returns.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.KeySegment.entitySet">
            <summary>
            The entity set that this key is used to search.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.KeySegment.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Construct a Segment that represents a key lookup.
            </summary>
            <param name="keys">The set of key property names and the values to be used in searching for the given item.</param>
            <param name="edmType">The type of the item this key returns.</param>
            <param name="entitySet">The entity set that this key is used to search.</param>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the input entity set is not related to the input type.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.KeySegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.KeySegment"/> using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.KeySegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.KeySegment"/> using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the handler interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.KeySegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeySegment.Keys">
            <summary>
            Gets the set of key property names and the values to be used in searching for the given item.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeySegment.EdmType">
            <summary>
            Gets the type of the item this key returns
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeySegment.EntitySet">
            <summary>
            Gets the entity set that this key is used to search.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.MetadataSegment">
            <summary>
            A segment representing $metadata in a path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.MetadataSegment.Instance">
            <summary>
            Gets the singleton instance of MetadataSegment
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.MetadataSegment.#ctor">
            <summary>
            Build a segment to represent $metadata
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.MetadataSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.MetadataSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the translator interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.MetadataSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.MetadataSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.MetadataSegment"/>, which is always null.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ExpansionsOnly">
            <summary>
            Class that represents a selecting none of the properties or functions at this level, but there are still relevant expansions in this subtree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ExpansionsOnly.Instance">
            <summary>
            Get the singleton instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ExpansionsOnly"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ExpansionsOnly.#ctor">
            <summary>
            Creates the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment">
            <summary>
            A segment representing a navigation property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment.navigationProperty">
            <summary>
            The navigation property this segment represents.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build a segment representing a navigation property.
            </summary>
            <param name="navigationProperty">The navigation property this segment represents.</param>
            <param name="entitySet">The set of the entities targetted by this navigation property. This can be null.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input navigationProperty is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment"/>s.
            </summary>
            <param name="handler">An implementation of the translator interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Checks if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment.NavigationProperty">
            <summary>
            Gets the navigation property represented by this NavigationPropertySegment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment.EntitySet">
            <summary>
            Gets the set of the entities targetted by this Navigation Property.
            This can be null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ODataSelectPath">
            <summary>
            A specific type of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataPath"/> which can only contain instances of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.TypeSegment"/>, <see cref="T:Microsoft.Data.OData.Query.SemanticAst.NavigationPropertySegment"/>,
            <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PropertySegment"/>, <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OperationSegment"/>, or <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataSelectPath.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment})">
            <summary>
            Create an ODataSelectPath
            </summary>
            <param name="segments">The list of segments that makes up this path.</param>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the list of segments doesn't match the requirements for a path in $select</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataSelectPath.#ctor(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment[])">
            <summary>
            Create an ODataPath object based on a single segment
            </summary>
            <param name="segments">The list of segments that makes up this path.</param>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the list of segments doesn't match the requirements for a path in $select</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataSelectPath.ValidatePath">
            <summary>
            Ensure that the segments given to us are valid select segments.
            </summary>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the list of segments doesn't match the requirements for a path in $select</exception>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment">
            <summary>
            A segment representing and open property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment.propertyName">
            <summary>
            The name of this open property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment.#ctor(System.String)">
            <summary>
            Build a segment to represent an open property.
            </summary>
            <param name="propertyName">The name of this open property</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the handler interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment.PropertyName">
            <summary>
            Gets the name of this open property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OpenPropertySegment"/>, which is always null. 
            The type of open properties is unknown at this time.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.OperationSegmentParameter">
            <summary>
            Represents a named parameter value for invoking an operation in an OData path.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegmentParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OperationSegmentParameter"/>.
            </summary>
            <param name="name">The name of the parameter. Cannot be null or empty.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OperationSegmentParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OperationSegmentParameter.Value">
            <summary>
            The parameter value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.PathSelectItem">
            <summary>
            Class to represent the selection of a specific path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.PathSelectItem.selectedPath">
            <summary>
            The selected path.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PathSelectItem.#ctor(Microsoft.Data.OData.Query.SemanticAst.ODataSelectPath)">
            <summary>
            Constructs a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectItem"/> to indicate that a specific path is selected.
            </summary>
            <param name="selectedPath">The selected path.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input selectedPath is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.PathSelectItem.SelectedPath">
            <summary>
            Gets the selected path.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.PartialSelection">
            <summary>
            Class that represents a partial subset of items on a given type that have been selected at this level of the select expand tree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.PartialSelection.selectedItems">
            <summary>
            The subset of items that has been selected at this level.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PartialSelection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.SelectItem})">
            <summary>
            Creates a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PartialSelection"/> with the specified set of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectItem"/>.
            </summary>
            <param name="selectedItems">The list of items on the that has been selected.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.PartialSelection.SelectedItems">
            <summary>
            The subset of items that has been selected at this level.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.PropertySegment">
            <summary>
            A segment representing a structural property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.PropertySegment.property">
            <summary>
            The structural property referred to by this segment
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PropertySegment.#ctor(Microsoft.Data.Edm.IEdmStructuralProperty)">
            <summary>
            Build a segment based on a structural property
            </summary>
            <param name="property">The structural property that this segment represents.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input property is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PropertySegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PropertySegment"/> using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>/&gt;.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PropertySegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PropertySegment"/> using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the handler interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.PropertySegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.PropertySegment.Property">
            <summary>
            Gets the structural property that this segment represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.PropertySegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PropertySegment"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause">
            <summary>
            Class representing the combined semantic meaning of any select or expand clauses in the uri.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.expansion">
            <summary>
            Mapping that contains the set of navigation properties for the associated entity that should be expanded, and respective details about the expansions. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.usedInternalLegacyConsturctor">
            <summary>
            Internal flag indicating that this clause was built using the legacy Selection and Expansion classes. In this case, we must 
            call ComputeFinalSelectedItems() before handing out the object publically.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.selection">
            <summary>
            The <see cref="P:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.Selection"/> object that describes what properties and functions should be selected from the associated <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> at this level.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.selectedItems">
            <summary>
            The selected properties and operations.
            </summary>
            <remarks>This list includes expanded navigations properties, which may have additional nested selections and expansions.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.allSelected">
            <summary>
            Gets a flag indicating that everything at this level has been selected. 
            </summary>
            <remarks>
            If true, then all structural properties, bound actions and functions, and all navigations in the SelectedItems list have been selected.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.#ctor(System.Collections.Generic.ICollection{Microsoft.Data.OData.Query.SemanticAst.SelectItem},System.Boolean)">
            <summary>
            Constructs a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause"/> from the given parameters.
            </summary>
            <param name="selectedItems">The selected properties and operations. This list should include any expanded navigation properties.</param>
            <param name="allSelected">Flag indicating if all items have been selected at this level.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.#ctor(Microsoft.Data.OData.Query.SemanticAst.Selection,Microsoft.Data.OData.Query.SemanticAst.Expansion)">
            <summary>
            Constructs a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause"/> from the given parameters.
            </summary>
            <param name="selection">The <see cref="P:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.Selection"/> object that describes what properties and functions should be selected from the associated <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/>.</param>
            <param name="expansion">Mapping that contains the set of navigation properties for the associated entity that should be expanded, and respective details about the expansions. </param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.AddSelectItem(Microsoft.Data.OData.Query.SemanticAst.SelectItem)">
            <summary>
            Add a selection item to the current selection.
            </summary>
            <param name="itemToAdd">the new selection item to add</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.SetAllSelectionRecursively">
            <summary>
            Switch to an AllSelection at this level and recursively at all levels below this one.
            This is non-reversable because once everything is selected, selecting a specific property or other item is redundant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.InitializeEmptySelection">
            <summary>
            Initializes the selection for this clause as ExpansionsOnly if it is not already partial.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.ComputeFinalSelectedItems">
            <summary>
            Computes the list of SelectItems that will be publically availible to consumers.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.SelectedItems">
            <summary>
            Gets the selected properties and operations.
            </summary>
            <remarks>This list includes expanded navigations properties, which may have additional nested selections and expansions.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.AllSelected">
            <summary>
            Gets a flag indicating that everything at this level has been selected. 
            </summary>
            <remarks>
            If true, then all structural properties, bound actions and functions, and all navigations in the SelectedItems list have been selected.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.Selection">
            <summary>
            Gets the <see cref="P:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.Selection"/> object that describes what properties and functions should be selected from the associated <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/>.
            
            TODO Note that this is a legacy internal concept. 
            At the last minute we changed the public API but chose not to change how the implementation work to manage risk.
            We should clean this up and remove this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause.Expansion">
            <summary>
            Mapping that contains the set of navigation properties for the associated entity that should be expanded, and respective details about the expansions. 
            
            TODO Note that this is a legacy internal concept. 
            At the last minute we changed the public API but chose not to change how the implementation work to manage risk.
            We should clean this up and remove this property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode">
            <summary>
            Node representing a type segment that casts an entity collection node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.source">
            <summary>
            The entity collection node that we're casting.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.edmTypeReference">
            <summary>
            The target type that we're casting our entity collection node to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.collectionTypeReference">
            <summary>
            the type of the collection returned by this function
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.entitySet">
            <summary>
            The EntitySet that our collection comes from.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.EntityCollectionNode,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Create a CollectionCastNode with the given source node and the given target type.
            </summary>
            <param name="source">Parent <see cref="T:Microsoft.Data.OData.Query.SemanticAst.CollectionNode"/> that is being cast.</param>
            <param name="entityType">Type to cast to.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input source or entityType are null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walk a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.Source">
            <summary>
            Gets the entity collection node that we're casting.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.ItemType">
            <summary>
            Gets the type that we're casting all items in this collection to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.CollectionType">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.EntityItemType">
            <summary>
            Gets the entity type that we're casting all items in this collection to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.EntitySet">
            <summary>
            Gets the EntitySet that our collection comes from.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode">
            <summary>
            Query node representing a collection navigation property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.navigationProperty">
            <summary>
            The navigation property of the single entity this node represents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.edmEntityTypeReference">
            <summary>
            The resouce type of a single entity item from the collection represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.collectionTypeReference">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.source">
            <summary>
            The parent node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.entitySet">
            <summary>
            The EntitySet from which the collection of entities comes from.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SemanticAst.SingleEntityNode)">
            <summary>
            Creates a CollectionNavigationNode.
            </summary>
            <param name="navigationProperty">The navigation property that defines the collection node.</param>
            <param name="source">The parent of this collection navigation node.</param>
            <returns>The collection node.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input source or navigation property is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input navigation doesn't target a collection.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Creates a CollectionNavigationNode.
            </summary>
            <param name="navigationProperty">The navigation property that defines the collection node.</param>
            <param name="sourceSet">The source entity set.</param>
            <returns>The collection node.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input navigation property is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input navigation doesn't target a collection.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Creates a CollectionNavigationNode.
            </summary>
            <param name="navigationProperty">The navigation property that defines the collection node.</param>
            <returns>The collection node.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input navigation property is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input navigation doesn't target a collection.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.Source">
            <summary>
            Gets the parent node of this Collection Navigation Node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.TargetMultiplicity">
            <summary>
            Gets the target multiplicity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.NavigationProperty">
            <summary>
            Gets the Navigation Property that defines this collection Node.
            </summary>
            <value> The navigation property that defines this collection node. </value>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.ItemType">
            <summary>
            Gets a reference to the resource type a single entity in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.CollectionType">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.EntityItemType">
            <summary>
            Gets the resouce type of a single entity from the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.EntitySet">
            <summary>
            Gets the entity set containing this collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.FilterClause">
            <summary>
            The result of parsing a $filter query option.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.FilterClause.expression">
            <summary>
            The filter expression - this should evaluate to a single boolean value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.FilterClause.rangeVariable">
            <summary>
            The parameter for the expression which represents a single value from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.FilterClause.#ctor(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.OData.Query.SemanticAst.RangeVariable)">
            <summary>
            Creates a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.FilterClause"/>.
            </summary>
            <param name="expression">The filter expression - this should evaluate to a single boolean value. Cannot be null.</param>
            <param name="rangeVariable">The parameter for the expression which represents a single value from the collection. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input expression or rangeVariable is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.FilterClause.Expression">
            <summary>
            Gets the filter expression - this should evaluate to a single boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.FilterClause.RangeVariable">
            <summary>
            Gets the parameter for the expression which represents a single value from the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.FilterClause.ItemType">
            <summary>
            Gets the type of item returned by this clause.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause">
            <summary>
            Represents the result of parsing the $orderby query option.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.expression">
            <summary>
            The order-by expression.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.direction">
            <summary>
            The direction to order.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.rangeVariable">
            <summary>
            The rangeVariable for the expression which represents a single value from the collection we iterate over.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.thenBy">
            <summary>
            The next orderby to perform after performing this orderby, can be null in the case of only a single orderby expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.#ctor(Microsoft.Data.OData.Query.SemanticAst.OrderByClause,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.OData.Query.OrderByDirection,Microsoft.Data.OData.Query.SemanticAst.RangeVariable)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OrderByClause"/>.
            </summary>
            <param name="thenBy">The next orderby to perform after performing this orderby, can be null in the case of only a single orderby expression.</param>
            <param name="expression">The order-by expression. Cannot be null.</param>
            <param name="direction">The direction to order.</param>
            <param name="rangeVariable">The rangeVariable for the expression which represents a single value from the collection we iterate over. </param>
            <exception cref="T:System.ArgumentNullException">Throws if the input expression or rangeVariable is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.ThenBy">
            <summary>
            Gets the next orderby to perform after performing this orderby, can be null in the case of only a single orderby expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.Expression">
            <summary>
            Gets the order-by expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.Direction">
            <summary>
            Gets the direction to order.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.RangeVariable">
            <summary>
            Gets the rangeVariable for the expression which represents a single value from the collection we iterate over.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OrderByClause.ItemType">
            <summary>
            Gets the type of a single item from the collection returned after ordering.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable">
            <summary>
            A RangeVariable inside an any or all expression that doesn't refer to an entity set
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.RangeVariable">
            <summary>
            A RangeVariable, which represents an iterator variable either over a collection, either of entities or not.
            Exists outside of the main SemanticAST, but hooked in via a RangeVariableReferenceNode (either Non-Entity or Entity).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.RangeVariable.Name">
            <summary>
            Gets the name of the associated rangeVariable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.RangeVariable.TypeReference">
            <summary>
            Gets the type of entity referenced by this rangeVariable
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.RangeVariable.Kind">
            <summary>
            Gets the kind of this rangeVariable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.name">
            <summary>
             The name of the associated any/all parameter (null if none)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.entityCollectionNode">
            <summary>
            The Entity collection that this rangeVariable node iterates over
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.entitySet">
            <summary>
            The Entity set of the collection this node iterates over.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.entityTypeReference">
            <summary>
            The entity type of each item in the collection that this range variable iterates over.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.#ctor(System.String,Microsoft.Data.Edm.IEdmEntityTypeReference,Microsoft.Data.OData.Query.SemanticAst.EntityCollectionNode)">
            <summary>
            Creates a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable"/>.
            </summary>
            <param name="name"> The name of the associated any/all parameter (null if none)</param>
            <param name="entityType">The entity type of each item in the collection that this range variable iterates over.</param>
            <param name="entityCollectionNode">The Entity collection that this rangeVariable node iterates over</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input name or entityType is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.#ctor(System.String,Microsoft.Data.Edm.IEdmEntityTypeReference,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Creates a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable"/>.
            </summary>
            <param name="name"> The name of the associated any/all parameter (null if none)</param>
            <param name="entityType">The entity type of each item in the collection that this range variable iterates over.</param>
            <param name="entitySet">The Entity set of the collection this node iterates over.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input name or entityType is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.Name">
            <summary>
            Gets the name of the associated any/all parameter (null if none)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.EntityCollectionNode">
            <summary>
            Gets the Entity collection that this rangeVariable node iterates over
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.EntitySet">
            <summary>
            Gets the Entity set of the collection this node iterates over.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.TypeReference">
            <summary>
            Gets the entity type of each item in the collection that this range variable iterates over.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.EntityTypeReference">
            <summary>
            Gets the entity type of each item in the collection that this range variable iterates over.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable.Kind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode">
            <summary>
            Node to represent a range variable in an Any or All clause that referrs to an entity.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SingleEntityNode">
            <summary>
            Base class for all semantic metadata bound nodes which represent a single composable entity value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SingleValueNode">
            <summary>
            Base class for all semantic metadata bound nodes which represent a single composable value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValueNode.TypeReference">
            <summary>
            Gets the type of the single value this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValueNode.Kind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleEntityNode.EntitySet">
            <summary>
            Gets the EntitySet containing this single entity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleEntityNode.EntityTypeReference">
            <summary>
            Gets the type of this single entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.name">
            <summary>
             The name of the associated range variable (null if none)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.entityTypeReference">
            <summary>
            The entity type of the associated range variable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.rangeVariable">
            <summary>
            The range variable that the node represents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.entitySet">
            <summary>
            The entity set containing the collection that this range variable iterates over.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.#ctor(System.String,Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariable)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode"/>.
            </summary>
            <param name="name"> The name of the associated range variable (null if none)</param>
            <param name="rangeVariable">The actual range variable on the bind stack that this refers to</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input name or rangeVariable is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.Name">
            <summary>
            Gets the name of the associated rangevariable (null if none)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.TypeReference">
            <summary>
            Gets the entity type of the associated range variable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.EntityTypeReference">
            <summary>
            Gets the entity type of the associated range variable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.RangeVariable">
            <summary>
            Gets a reference to the range variable that this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.EntitySet">
            <summary>
            Gets the entity set containing the collection that this range variable iterates over.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable">
            <summary>
            A rangeVariable from an Any or All that doesn't refer to an entity set
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable.name">
            <summary>
             The name of the associated rangeVariable
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable.collectionNode">
            <summary>
            The collection that this rangeVariable node iterates over, can be null in the case of
            single value nodes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable.typeReference">
            <summary>
            The type of the value the range variable represents
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable.#ctor(System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.Query.SemanticAst.CollectionNode)">
            <summary>
            Creates a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable"/>.
            </summary>
            <param name="name"> The name of the associated range variable.</param>
            <param name="typeReference">The type of the value the range variable represents.</param>
            <param name="collectionNode">The collection that this rangeVariable node iterates over, can be null in the case of single value nodes.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input name is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input type reference is an entity type.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable.Name">
            <summary>
            Gets the name of the associated rangevariable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable.TypeReference">
            <summary>
            Gets the type of the value the range variable represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable.CollectionNode">
            <summary>
            Gets the collection that this rangeVariable node iterates over, can be null in the case of single value nodes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable.Kind">
            <summary>
            Gets the kind of this range variable.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode">
            <summary>
            A node that represents a rangeVariable that iterates over a non entity collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.name">
            <summary>
             The name of the associated rangeVariable
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.typeReference">
            <summary>
            The type item referred to by this rangeVariable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.rangeVariable">
            <summary>
            Reference to a rangeVariable on the binding stack.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.#ctor(System.String,Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariable)">
            <summary>
            Creates a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode"/>.
            </summary>
            <param name="name"> The name of the associated rangeVariable</param>
            <param name="rangeVariable">Reference to a rangeVariable on the binding stack.</param>
            <exception cref="T:System.ArgumentNullException">Throws if input name or rangeVariable is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.Name">
            <summary>
            Gets the name of the associated rangeVariable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.TypeReference">
            <summary>
            Gets the type item referred to by this rangeVariable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.RangeVariable">
            <summary>
            Gets the reference to a rangeVariable on the binding stack.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.RangeVariableKind">
            <summary>
            Enumeration of the different kinds of RangeVariables.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.RangeVariableKind.Entity">
            <summary>
            A range variable that referrs to entity types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.RangeVariableKind.Nonentity">
            <summary>
            A range variable that referrs to non-entity types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.OperationSegment">
            <summary>
            A segment representing a call to an action, function, or service operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.UnknownSentinel">
            <summary>
            Sentinel type marking that we could not determine the return type for this segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.operations">
            <summary>
            The list of possible FunctionImport overloads for this segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.parameters">
            <summary>
            the list of parameters to this operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.entitySet">
            <summary>
            The <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> containing the entities that this function returns.
            This will be null if entities are not returned by this operation, or if there is any ambiguity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.computedReturnEdmType">
            <summary>
            The type of item returned by the operation(s), if known.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.#ctor(Microsoft.Data.Edm.IEdmFunctionImport,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build a segment representing a call to an operation - action, function, or service operation.
            </summary>
            <param name="operation">A single function import that this segment will represent.</param>
            <param name="entitySet">The <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> containing the entities that this function returns.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input operation is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport},Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build a segment representing a call to an operation - action, function, or service operation.
            </summary>
            <param name="operationsIn">The list of possible FunctionImport overloads for this segment.</param>
            <param name="entitySet">The <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> containing the entities that this function returns.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input operations is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport},System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.OperationSegmentParameter},Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Creates a segment representing a call to an operation - action, function or service operation.
            </summary>
            <param name="operationsIn">The list of possible FunctionImport overloads for this segment.</param>
            <param name="parameters">The list of parameters supplied to this segment.</param>
            <param name="entitySet">The <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> containing the entities that this function returns.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.#ctor">
            <summary>
            Creates a segment representing a call to an operation - action, function or service operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the handle interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.EnsureTypeAndSetAreCompatable">
            <summary>
            Ensures that the entity set and computed return type make sense.
            </summary>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the return type computed from the function call is null, or if the return type is not in the same hierarchy as the entity set provided.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.Operations">
            <summary>
            Gets the list of possible FunctionImport overloads for this segment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.Parameters">
            <summary>
            Gets the list of parameters for this segment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.OperationSegment"/>. 
            </summary>
            <remarks>
            This value will be null for void service operations.
            If there are multiple candidate operations with varying return types, then this property will throw.
            </remarks>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the type is unknown.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.OperationSegment.EntitySet">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> containing the entities that this function returns.
            This will be null if entities are not returned by this operation, or if there is any ambiguity.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode">
            <summary>
            Node representing a function call which returns a single entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.name">
            <summary>
            the name of this function 
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.functionImports">
            <summary>
            the list of funcitonImports represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.arguments">
            <summary>
            List of arguments provided to the function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.entityTypeReference">
            <summary>
            The return type of this function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.entitySet">
            <summary>
            The EntitySet containing the single entity that this function returns.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.source">
            <summary>
            The semantically bound parent of this function.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.QueryNode},Microsoft.Data.Edm.IEdmEntityTypeReference,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Create a SingleEntityFunctionCallNode
            </summary>
            <param name="name">The name of the function to call</param>
            <param name="arguments">List of arguments provided to the function. Can be null.</param>
            <param name="entityTypeReference">The return type of this function.</param>
            <param name="entitySet">The EntitySet containing the single entity that this function returns.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input name, returnedEntityTypeReference, or entitySet is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport},System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.QueryNode},Microsoft.Data.Edm.IEdmEntityTypeReference,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Create a SingleEntityFunctionCallNode
            </summary>
            <param name="name">The name of the function to call</param>
            <param name="functionImports">the list of function imports this node represents.</param>
            <param name="arguments">List of arguments provided to the function. Can be null.</param>
            <param name="entityTypeReference">The return type of this function.</param>
            <param name="entitySet">The EntitySet containing the single entity that this function returns.</param>
            <param name="source">The semantically bound parent of this function.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input name, returnedEntityTypeReference, or entitySet is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.Name">
            <summary>
            Gets the name of the function to call
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.FunctionImports">
            <summary>
            Gets the list of function imports that this node represents
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.Arguments">
            <summary>
            Gets the list of arguments provided to the function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.TypeReference">
            <summary>
            Gets the return type of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.EntitySet">
            <summary>
            Gets the EntitySet containing the single entity that this function returns.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.EntityTypeReference">
            <summary>
            Gets the return type of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.Source">
            <summary>
            Gets the semantically bound parent of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleEntityFunctionCallNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode">
            <summary>
            Node representing an access to a collection property value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.source">
            <summary>
            The value containing the property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.property">
            <summary>
            The EDM property which is to be accessed.
            </summary>
            <remarks>Only non-entity, collection properties are supported by this node.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.itemType">
            <summary>
            The resouce type of a single item from the collection represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.collectionTypeReference">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode"/>.
            </summary>
            <param name="source">The value containing the property.</param>
            <param name="property">The EDM property which is to be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input source or property is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input property is not a collection of structural properties</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.Source">
            <summary>
            Gets the value containing the property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.Property">
            <summary>
            Gets the EDM property which is to be accessed.
            </summary>
            <remarks>Only non-entity, collection properties are supported by this node.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.ItemType">
            <summary>
            Gets the resouce type of a single item from the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.CollectionType">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ReadOnlyEnumerableForUriParser`1">
            <summary>
            Implementation of IEnumerable which is based on another IEnumerable
            but only exposes readonly access to that collection. This class doesn't implement
            any other public interfaces or public API unlike most other IEnumerable implementations
            which also implement other public interfaces.
            </summary>
            <typeparam name="T">The type of the items in the read-only enumerable.</typeparam>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ReadOnlyEnumerableForUriParser`1.sourceEnumerable">
            <summary>
            The IEnumerable to wrap.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ReadOnlyEnumerableForUriParser`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="sourceEnumerable">The enumerable to wrap.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ReadOnlyEnumerableForUriParser`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns the enumerator to iterate through the items.
            </summary>
            <returns>The enumerator object to use.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ReadOnlyEnumerableForUriParser`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the (non-generic) enumerator to iterate through the items.
            </summary>
            <returns>The enumerator object to use.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.TypeSegment">
            <summary>
            A segment representing a cast on the previous segment to another type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.TypeSegment.edmType">
            <summary>
            The target type of this type segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.TypeSegment.entitySet">
            <summary>
            The set containing the entities that we are casting.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.TypeSegment.#ctor(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Build a type segment using the given <paramref name="edmType"/>.
            </summary>
            <param name="edmType">The target type of this segment, which may be collection type.</param>
            <param name="entitySet">The set containing the entities that we are casting. This can be null.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input edmType is null.</exception>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the input edmType is not relaed to the type of elements in the input entitySet.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.TypeSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.TypeSegment"/> into another type using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.TypeSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.TypeSegment"/> using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the handler interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.TypeSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input other is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.TypeSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.TypeSegment"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.TypeSegment.EntitySet">
            <summary>
            Gets the set containing the entities that we are casting.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.UnknownSelection">
            <summary>
            Singleton sentinal instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.Selection"/> that indicates that $select has not been processed yet. Should never be exposed to the user.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.UnknownSelection.Instance">
            <summary>
            Singleton instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.UnknownSelection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.UnknownSelection.#ctor">
            <summary>
            Creates the singleton instance of this class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ODataUnresolvedFunctionParameterAlias">
            <summary>
            Represents an aliased parameter in a function call that has not yet been resolved to a specific value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataValue">
            <summary>
            Represents the value of a property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataValue.IsNullValue">
            <summary>
            Indicates whether the given value is a null value.
            </summary>
            <value> true if the value is an ODataNullValue, false otherwise. </value>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ODataUnresolvedFunctionParameterAlias.#ctor(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ODataUnresolvedFunctionParameterAlias"/>.
            </summary>
            <param name="alias">The alias provided as the parameter value.</param>
            <param name="type">The EDM type of the parameter represented by this alias.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataUnresolvedFunctionParameterAlias.Type">
            <summary>
            The EDM type of the parameter represented by this alias.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ODataUnresolvedFunctionParameterAlias.Alias">
            <summary>
            The alias provided as the parameter value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UriParserErrorHelper">
            <summary>
            Helper methods for the URI Parser.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriParserErrorHelper.ThrowIfTypesUnrelated(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmType,System.String)">
            <summary>
            Throws if the type is not related to the type of the given set.
            </summary>
            <param name="type">Type to check.</param>
            <param name="secondType">Second type, which should be related to the first type.</param>
            <param name="segmentName">The segment that is checking this.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ValueSegment">
            <summary>
            A segment representing $value
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ValueSegment.edmType">
            <summary>
            The <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ValueSegment"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ValueSegment.#ctor(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Build a segment to represnt $value.
            </summary>
            <param name="previousType">The type of the segment before $value. This may be null, for cases such as open properties.</param>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the input previousType is a colleciton type.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ValueSegment.Translate``1(Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator{``0})">
            <summary>
            Translate a <exception cref="T:Microsoft.Data.OData.Query.SemanticAst.ValueSegment"> into another object using an instance of</exception> <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentTranslator`1"/>.
            </summary>
            <typeparam name="T">Type that the translator will return after visiting this token.</typeparam>
            <param name="translator">An implementation of the translator interface.</param>
            <returns>An object whose type is determined by the type parameter of the translator.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input translator is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ValueSegment.Handle(Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler)">
            <summary>
            Handle a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ValueSegment"/> using an instance of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.PathSegmentHandler"/>.
            </summary>
            <param name="handler">An implementation of the translator interface.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input handler is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ValueSegment.Equals(Microsoft.Data.OData.Query.SemanticAst.ODataPathSegment)">
            <summary>
            Check if this segment is equal to another segment.
            </summary>
            <param name="other">the other segment to check.</param>
            <returns>true if the other segment is equal.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ValueSegment.EdmType">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.IEdmType"/> of this <see cref="T:Microsoft.Data.OData.Query.SemanticAst.ValueSegment"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.WildcardSelectItem">
            <summary>
            Class to represent a '*' selection item, indicating that all structural properties should be selected.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.SelectBinder">
            <summary>
            Use a Select syntactic tree to populate the correct values for Selection in an already parsed
            Expand Semantic Tree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.SelectBinder.visitor">
            <summary>
            Visitor object to walk the select tree
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectBinder.#ctor(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType,System.Int32,Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause)">
            <summary>
            Constructs a new SelectBinder.
            </summary>
            <param name="model">The model used for binding.</param>
            <param name="entityType">The entity type that the $select is being applied to.</param>
            <param name="maxDepth">the maximum recursive depth.</param>
            <param name="expandClauseToDecorate">The already built expand clause to decorate</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectBinder.Bind(Microsoft.Data.OData.Query.SyntacticAst.SelectToken)">
            <summary>
            Visits the top level select token
            </summary>
            <param name="tokenIn">the select token to visit</param>
            <returns>A new SelectExpandClause decorated with the information from the selectToken</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1">
            <summary>
            Visitor interface for walking the Semantic Tree.
            </summary>
            <typeparam name="T">Generic type produced by the visitor.</typeparam>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.AllNode)">
            <summary>
            Visit an AllNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.AnyNode)">
            <summary>
            Visit an AnyNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode)">
            <summary>
            Visit a BinaryOperatorNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.CollectionNavigationNode)">
            <summary>
            Visit a CollectionNavigationNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.CollectionPropertyAccessNode)">
            <summary>
            Visit a CollectionPropertyAccessNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.ConstantNode)">
            <summary>
            Visit a ConstantNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.ConvertNode)">
            <summary>
            Visit a ConvertNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.EntityCollectionCastNode)">
            <summary>
            Visit an EntityCollectionCastNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.EntityRangeVariableReferenceNode)">
            <summary>
            Visit an EntityRangeVariableReferenceNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.NonentityRangeVariableReferenceNode)">
            <summary>
            Visit a NonEntityRangeVariableNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode)">
            <summary>
            Visit a SingleEntityCastNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode)">
            <summary>
            Visit a SingleNavigationNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SingleEntityFunctionCallNode)">
            <summary>
            Visit a SingleEntityFunctionCallNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SingleValueFunctionCallNode)">
            <summary>
            Visit a SingleValueFunctionCallNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.EntityCollectionFunctionCallNode)">
            <summary>
            Visit a EntityCollectionFunctionCallNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.CollectionFunctionCallNode)">
            <summary>
            Visit a CollectionFunctionCallNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode)">
            <summary>
            Visit a SingleValueOpenPropertyAccessNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode)">
            <summary>
            Visit a SingleValuePropertyAccessNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode)">
            <summary>
            Visit a UnaryOperatorNode
            </summary>
            <param name="nodeIn">the node to visit</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1.Visit(Microsoft.Data.OData.Query.SemanticAst.NamedFunctionParameterNode)">
            <summary>
            Visit a NamedFunctionParameterNode.
            </summary>
            <param name="nodeIn">The node to visit.</param>
            <returns>Defined by the implementer</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken">
            <summary>
            Lexical token representing an expand operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.pathToNavProp">
            <summary>
            The nav prop path for this ExpandTerm
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.filterOption">
            <summary>
            the filter option for this expand term
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.orderByOption">
            <summary>
            the order by option for this expand term
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.topOption">
            <summary>
            the top option for this expand term
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.skipOption">
            <summary>
            the skip option for this expand term.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.inlineCountOption">
            <summary>
            the inlineCount option for this expand term.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.selectOption">
            <summary>
            the select option for this expand term.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.expandOption">
            <summary>
            the expand option for this expand term.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Create an expand term token using only a property
            </summary>
            <param name="pathToNavProp">the path to the navigation property</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.OData.Query.SyntacticAst.SelectToken,Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Create an expand term using only the property and its subexpand/select
            </summary>
            <param name="pathToNavProp">the path to the navigation property for this expand term</param>
            <param name="selectOption">the sub select for this token</param>
            <param name="expandOption">the sub expand for this token</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.OData.Query.SyntacticAst.QueryToken,Microsoft.Data.OData.Query.SyntacticAst.OrderByToken,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Microsoft.Data.OData.Query.InlineCountKind},Microsoft.Data.OData.Query.SyntacticAst.SelectToken,Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Create an expand term token
            </summary>
            <param name="pathToNavProp">the nav prop for this expand term</param>
            <param name="filterOption">the filter option for this expand term</param>
            <param name="orderByOption">the orderby option for this expand term</param>
            <param name="topOption">the top option for this expand term</param>
            <param name="skipOption">the skip option for this expand term</param>
            <param name="inlineCountOption">the inlineCountOption for this expand term</param>
            <param name="selectOption">the select option for this expand term</param>
            <param name="expandOption">the expand option for this expand term</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Implement the visitor for this Token
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="visitor">A tree visitor that will visit this node.</param>
            <returns>Determined by the return type of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.PathToNavProp">
            <summary>
            the nav property for this expand term
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.FilterOption">
            <summary>
            The filter option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.OrderByOption">
            <summary>
            the orderby option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.TopOption">
            <summary>
            the top option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.SkipOption">
            <summary>
            the skip option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.InlineCountOption">
            <summary>
            the inline count option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.SelectOption">
            <summary>
            the select option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.ExpandOption">
            <summary>
            the expand option for this expand term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken.Kind">
            <summary>
            the kind of this expand term.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.ExpandToken">
            <summary>
            Lexical token representing an expand operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.ExpandToken.expandTerms">
            <summary>
            The properties according to which to expand in the results.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken})">
            <summary>
            Create a ExpandToken given the property-accesses of the expand query.
            </summary>
            <param name="expandTerms">The properties according to which to expand the results.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.ExpandToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.ExpandToken.ExpandTerms">
            <summary>
            The properties according to which to expand in the results.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken">
            <summary>
            Lexical token representing a segment in a path.
            </summary>
            
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken">
            <summary>
            Lexical token representing a segment in a path.
            </summary>
            
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken.nextToken">
            <summary>
            the next token in the path
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            build this segment token using the next token
            </summary>
            <param name="nextToken">the next token in the path</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken.IsNamespaceOrContainerQualified">
            <summary>
            Is this token namespace or container qualified.
            </summary>
            <returns>true if this token is namespace or container qualified.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken.Accept(Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor)">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken"/>s.
            </summary>
            <param name="visitor">An implementation of the visitor interface.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken.SetNextToken(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            internal setter for the next token.
            </summary>
            <param name="nextTokenIn">the next token to set.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken.NextToken">
            <summary>
            Get the NextToken in the path
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken.Identifier">
            <summary>
            The name of the property to access.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken.namedValues">
            <summary>
            Any named values for this NonSystemToken
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken.identifier">
            <summary>
            The identifier for this token.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.NamedValue},Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Build a NonSystemToken
            </summary>
            <param name="identifier">the identifier of this token</param>
            <param name="namedValues">a list of named values for this token</param>
            <param name="nextToken">the next token in the path</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken.IsNamespaceOrContainerQualified">
            <summary>
            Is this token namespace or container qualified.
            </summary>
            <returns>true if this token is namespace or container qualified.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken.Accept(Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor)">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken"/>s.
            </summary>
            <param name="visitor">An implementation of the visitor interface.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken.NamedValues">
            <summary>
            Get the list of named values for this token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.NonSystemToken.Identifier">
            <summary>
            Get the identifier for this token.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.PathToken">
            <summary>
            Lexical token representing a segment in a path.
            </summary>
            
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.PathToken.NextToken">
            <summary>
            The NextToken in the path(can either be the parent or the child depending on whether the tree has
            been normalized for expand or not.
            TODO: need to revisit this and the rest of the syntactic parser to make it ready for public consumption.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.PathToken.Identifier">
            <summary>
            The name of the property to access.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.SystemToken">
            <summary>
            Lexical token representing a System token such as $count
            </summary>
            
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.SystemToken.identifier">
            <summary>
            The identifier for this SystemToken
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SystemToken.#ctor(System.String,Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Build a new System Token
            </summary>
            <param name="identifier">the identifier for this token.</param>
            <param name="nextToken">the next token in the path</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SystemToken.IsNamespaceOrContainerQualified">
            <summary>
            Is this token namespace or container qualified.
            </summary>
            <returns>always false, since this is a system token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SystemToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SystemToken.Accept(Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor)">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.IPathSegmentTokenVisitor"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken"/>s.
            </summary>
            <param name="visitor">An implementation of the visitor interface.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.SystemToken.Identifier">
            <summary>
            Get the identifier for this token
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1">
            <summary>
            Visitor interface for walking the Syntactic Tree.
            </summary>
            <typeparam name="T">Generic type produced by the visitor.</typeparam>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.AllToken)">
            <summary>
            Visit an AllToken
            </summary>
            <param name="tokenIn">The All token to visit</param>
            <returns>An AllNode bound to this token</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.AnyToken)">
            <summary>
            Visits an AnyToken
            </summary>
            <param name="tokenIn">The Any token to visit</param>
            <returns>An AnyNode that's bound to this token</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Visits a BinaryOperatorToken
            </summary>
            <param name="tokenIn">The Binary operator token to visit.</param>
            <returns>A BinaryOperatorNode thats bound to this token</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken)">
            <summary>
            Visits a DottedIdentifierToken
            </summary>
            <param name="tokenIn">The DottedIdentifierToken to visit</param>
            <returns>Either a SingleEntityCastNode, or EntityCollectionCastNode bound to this DottedIdentifierToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Visits an ExpandToken
            </summary>
            <param name="tokenIn">The ExpandToken to visit</param>
            <returns>A QueryNode bound to this ExpandToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.ExpandTermToken)">
            <summary>
            Visits an ExpandTermToken
            </summary>
            <param name="tokenIn">The ExpandTermToken to visit</param>
            <returns>A QueryNode bound to this ExpandTermToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken)">
            <summary>
            Visits a FunctionCallToken
            </summary>
            <param name="tokenIn">The FunctionCallToken to visit</param>
            <returns>A SingleValueFunctionCallNode bound to this FunctionCallToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.LiteralToken)">
            <summary>
            Visits a LiteralToken
            </summary>
            <param name="tokenIn">The LiteralToken to visit</param>
            <returns>A ConstantNode bound to this LambdaToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.LambdaToken)">
            <summary>
            Visits a LambdaToken
            </summary>
            <param name="tokenIn">The LambdaToken to visit</param>
            <returns>A LambdaNode bound to this LambdaToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken)">
            <summary>
            Visits a InnerPathToken
            </summary>
            <param name="tokenIn">The InnerPathToken to bind</param>
            <returns>A SingleValueNode or SingleEntityNode bound to this InnerPathToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.OrderByToken)">
            <summary>
            Visits an OrderByToken
            </summary>
            <param name="tokenIn">The OrderByToken to bind</param>
            <returns>An OrderByClause bound to this OrderByToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.EndPathToken)">
            <summary>
            Visits an EndPathToken
            </summary>
            <param name="tokenIn">The EndPathToken to bind</param>
            <returns>A PropertyAccessClause bound to this EndPathToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken)">
            <summary>
            Visits a CustomQueryOptionToken
            </summary>
            <param name="tokenIn">The CustomQueryOptionToken to bind</param>
            <returns>A CustomQueryOptionNode bound to this CustomQueryOptionToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken)">
            <summary>
            Visits a RangeVariableToken
            </summary>
            <param name="tokenIn">The RangeVariableToken to bind</param>
            <returns>An Entity or NonEntity RangeVariableReferenceNode bound to this RangeVariableToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.SelectToken)">
            <summary>
            Visits a SelectToken
            </summary>
            <param name="tokenIn">The SelectToken to bind</param>
            <returns>A QueryNode bound to this SelectToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.StarToken)">
            <summary>
            Visits a StarToken
            </summary>
            <param name="tokenIn">The StarToken to bind</param>
            <returns>A QueryNode bound to this StarToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken)">
            <summary>
            Visits a UnaryOperatorToken
            </summary>
            <param name="tokenIn">The UnaryOperatorToken to bind</param>
            <returns>A UnaryOperatorNode bound to this UnaryOperatorToken</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SyntacticTreeVisitor`1.Visit(Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken)">
            <summary>
            Visits a FuntionParameterToken
            </summary>
            <param name="tokenIn">The FunctionParameterToken to bind</param>
            <returns>A user defined value</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.SelectExpandPathBinder">
            <summary>
            Walk down a chain of type segments, checking that we find the correct type at each level.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectExpandPathBinder.FollowTypeSegments(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken,Microsoft.Data.Edm.IEdmModel,System.Int32,Microsoft.Data.Edm.IEdmEntityType@,Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken@)">
            <summary>
            Follow any type segments on the path, stopping at the first segment that isn't a type token.
            </summary>
            <param name="firstTypeToken">the first type segment</param>
            <param name="model">the model these types are contained in.</param>
            <param name="maxDepth">the maximum recursive depth</param>
            <param name="currentLevelEntityType">the top level entity type, will be overwritten with the last entity type in the chain</param>
            <param name="firstNonTypeToken">the first non type token in the path</param>
            <returns>A path with type segments added to it.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.InternalErrorCodes">
            <summary>
            An enumeration that lists the internal errors.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.TypePromotionUtils_GetFunctionSignatures_Binary_UnreachableCodepath">
            <summary>Unreachable codepath in TypePromotionUtils.GetFunctionSignatures(BinaryOperatorKind), unrecognized kind of binary operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.TypePromotionUtils_GetFunctionSignatures_Unary_UnreachableCodepath">
            <summary>Unreachable codepath in TypePromotionUtils.GetFunctionSignatures(UnaryOperatorKind), unrecognized kind of unary operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.MetadataBinder_BindServiceOperation">
            <summary>Unreachable codepath in MetadataBinder.BindServiceOperation, unrecognized kind of service opertion.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.QueryExpressionTranslator_TranslateBinaryOperator_UnreachableCodepath">
            <summary>Unreachable codepath in QueryExpressionTranslator.TranslateBinaryOperator, unrecognized kind of binary operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.UriPrimitiveTypeParser_HexCharToNibble">
            <summary>Unreachable codepath in UriPrimitiveTypeParser.HexCharToNibble</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.UriQueryExpressionParser_ParseComparison">
            <summary>Unreachable codepath in UriQueryExpressionParser.ParseComparison</summary>
            <remarks>Was a new binary operator keyword without adding it to the switch in the ParseComparison?</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.UriPrimitiveTypeParser_TryUriStringToPrimitive">
            <summary>Unreachable codepath in UriPrimitiveTypeParser.TryUriStringToPrimitive</summary>
            <remarks>Unsupported type was asked to be parsed.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.QueryNodeUtils_BinaryOperatorResultType_UnreachableCodepath">
            <summary>Unreachable codepath in QueryNodeUtils.BinaryOperatorResultType, unrecognized kind of binary operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.QueryExpressionTranslator_TranslateUnaryOperator_UnreachableCodepath">
            <summary>Unreachable codepath in QueryExpressionTranslator.TranslateUnaryOperator, unrecognized kind of unary operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.BinaryOperator_GetOperator_UnreachableCodePath">
            <summary>Unreachable codepath in BinaryOperator.GetOperator, unrecognized kind of binary operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.ODataUriBuilder_WriteUnary_UnreachableCodePath">
            <summary>Unreachable codepath in ODataUriBuilder.WriteUnary, unrecognized kind of unary operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalErrorCodes.ODataUriBuilderUtils_ToText_InlineCountKind_UnreachableCodePath">
            <summary>Unreachable codepath in ODataUriBuilderUtils.ToText(InlineCountKind), unrecognized kind of inline count.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.AllNode">
            <summary>
            Query node representing an All query.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.LambdaNode">
            <summary>
            Node representing an Any/All query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.LambdaNode.rangeVariables">
            <summary>
            The collection of rangeVariables in scope for this Any or All.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.LambdaNode.currentRangeVariable">
            <summary>
            The newest range variable added for by this Any or All.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.LambdaNode.#ctor(System.Collections.ObjectModel.Collection{Microsoft.Data.OData.Query.SemanticAst.RangeVariable})">
            <summary>
            Create a LambdaNode
            </summary>
            <param name="rangeVariables">The collection of rangeVariables in scope for this Any or All.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.LambdaNode.#ctor(System.Collections.ObjectModel.Collection{Microsoft.Data.OData.Query.SemanticAst.RangeVariable},Microsoft.Data.OData.Query.SemanticAst.RangeVariable)">
            <summary>
            Create a LambdaNode
            </summary>
            <param name="rangeVariables">The collection of rangeVariables in scope for this Any or All.</param>
            <param name="currentRangeVariable">The newest range variable added for by this Any or All.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.LambdaNode.RangeVariables">
            <summary>
            Gets the collection of rangeVariables in scope for this Any or All.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.LambdaNode.CurrentRangeVariable">
            <summary>
            Gets the newest range variable added for by this Any or All.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.LambdaNode.Body">
            <summary>
            Gets or Sets the associated boolean expression
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.LambdaNode.Source">
            <summary>
            Gets or Sets the parent entity set or navigation property
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.AllNode.#ctor(System.Collections.ObjectModel.Collection{Microsoft.Data.OData.Query.SemanticAst.RangeVariable})">
            <summary>
            Create an AllNode
            </summary>
            <param name="rangeVariables">The name of the rangeVariables list.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.AllNode.#ctor(System.Collections.ObjectModel.Collection{Microsoft.Data.OData.Query.SemanticAst.RangeVariable},Microsoft.Data.OData.Query.SemanticAst.RangeVariable)">
            <summary>
            Create an AllNode
            </summary>
            <param name="rangeVariables">The name of the rangeVariables list.</param>
            <param name="currentRangeVariable">The new range variable being added by this all node</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.AllNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.AllNode.TypeReference">
            <summary>
            The resource type of the single value this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.AllNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.AllToken">
            <summary>
            Lexical token representing the All Query
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken">
            <summary>
            Lexical token representing the Any/All Query
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken.parent">
            <summary>
            The parent token.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken.parameter">
            <summary>
            The parameter which denotes source type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken.expression">
            <summary>
            The expression component of Any.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.QueryToken,System.String,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a AnyAllQueryToken given the expression, parameter, and parent
            </summary>
            <param name="expression">The associated expression.</param>
            <param name="parameter">The parameter denoting source type.</param>
            <param name="parent">The parent token.  Pass null if this property has no parent.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken.Parent">
            <summary>
            The parent token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken.Expression">
            <summary>
            The expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.LambdaToken.Parameter">
            <summary>
            The parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.AllToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.QueryToken,System.String,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a AllToken given the expression, parameter, and parent
            </summary>
            <param name="expression">The associated expression.</param>
            <param name="parameter">The parameter denoting source type.</param>
            <param name="parent">The parent token.  Pass null if this property has no parent.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.AllToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.AllToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.AnyNode">
            <summary>
            Query node representing an Any query.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.AnyNode.#ctor(System.Collections.ObjectModel.Collection{Microsoft.Data.OData.Query.SemanticAst.RangeVariable})">
            <summary>
            Create a AnyNode
            </summary>
            <param name="parameters">The name of the parameter list.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.AnyNode.#ctor(System.Collections.ObjectModel.Collection{Microsoft.Data.OData.Query.SemanticAst.RangeVariable},Microsoft.Data.OData.Query.SemanticAst.RangeVariable)">
            <summary>
            Create a AnyNode
            </summary>
            <param name="parameters">The name of the parameter list.</param>
            <param name="currentRangeVariable">The name of the new range variable being added by this AnyNode</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.AnyNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.AnyNode.TypeReference">
            <summary>
            The resource type of the single value this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.AnyNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.AnyToken">
            <summary>
            Lexical token representing the Any Query
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.AnyToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.QueryToken,System.String,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a AnyToken given the expression, parameter, and parent
            </summary>
            <param name="expression">The associated expression.</param>
            <param name="parameter">The parameter denoting source type.</param>
            <param name="parent">The parent token.  Pass null if this property has no parent.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.AnyToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.AnyToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.Metadata.ODataQueryEdmTypeAnnotation">
            <summary>
            In-memory annotation class to associate CLR instance types with 
            (non-primitive) EDM types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.Metadata.ODataQueryEdmTypeAnnotation.CanReflectOnInstanceType">
            <summary>
            true if reflection over the instance type is supported; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.Metadata.ODataQueryEdmTypeAnnotation.InstanceType">
            <summary>
            The instance type represented by this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.Metadata.ODataQueryEdmServiceOperationAnnotation">
            <summary>
            In-memory annotation class to associate a result kind with a service operation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.Metadata.ODataQueryEdmServiceOperationAnnotation.ResultKind">
            <summary>
            The result kind of the service operation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.Metadata.ODataQueryEdmPropertyAnnotation">
            <summary>
            Annotation to hold information for a particular property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.Metadata.ODataQueryEdmPropertyAnnotation.CanReflectOnProperty">
            <summary>
            true if reflection over the property is allowed; otherwise false.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.Metadata.ODataServiceOperationResultKind">
            <summary>
            Use this type to describe the kind of results returned by a service
            operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.Metadata.ODataServiceOperationResultKind.DirectValue">
            <summary>
            A single direct value which cannot be further composed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.Metadata.ODataServiceOperationResultKind.Enumeration">
            <summary>
            An enumeration of values which cannot be further composed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.Metadata.ODataServiceOperationResultKind.QueryWithMultipleResults">
            <summary>
            A queryable object which returns multiple elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.Metadata.ODataServiceOperationResultKind.QueryWithSingleResult">
            <summary>
            A queryable object which returns a single element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.Metadata.ODataServiceOperationResultKind.Void">
            <summary>
            No result return.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken">
            <summary>
            Lexical token representing a single nonroot segment in the query path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.identifier">
            <summary>
            The Identifier of the segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.namedValues">
            <summary>
            The named values in the key lookup for this segment.
            If the segment has no key lookup, then this property is null.
            If the segment has empty key lookup (), then this property is an empty collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.nextToken">
            <summary>
            The NextToken segment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.#ctor(System.String,Microsoft.Data.OData.Query.SyntacticAst.QueryToken,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.NamedValue})">
            <summary>
            Create a new StartPathToken given the Identifier and NextToken and namedValues if any
            </summary>
            <param name="identifier">The Identifier of the segment, the identifier.</param>
            <param name="nextToken">The NextToken segment, or null if this is the root segment.</param>
            <param name="namedValues">The named values in the key lookup for this segment.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.Identifier">
            <summary>
            The Identifier of the segment, the identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.NextToken">
            <summary>
            The NextToken segment, or null if this is the root segment.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken.NamedValues">
            <summary>
            The named values in the key lookup for this segment.
            If the segment has no key lookup, then this property is null.
            If the segment has empty key lookup (), then this property is an empty collection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataQueryUtils">
            <summary>
            Utility methods used with the OData Query library.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.GetCanReflectOnInstanceTypeProperty(Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Checks whether reflection over the property is allowed or not.
            </summary>
            <param name="property">The property to check.</param>
            <param name="model">The model containing annotations.</param>
            <returns>true if reflection over the property is allowed; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.SetCanReflectOnInstanceTypeProperty(Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Sets whether reflection over the property is allowed or not.
            </summary>
            <param name="property">The property to check.</param>
            <param name="model">The model containing annotations.</param>
            <param name="canReflect">true if reflection over the property is allowed; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.GetServiceOperationResultKind(Microsoft.Data.Edm.IEdmFunctionImport,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the result kind of the <paramref name="serviceOperation"/>.
            </summary>
            <param name="serviceOperation">The <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> to check.</param>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <returns>The result kind of the <paramref name="serviceOperation"/> or null if no result kind annotation exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.SetServiceOperationResultKind(Microsoft.Data.Edm.IEdmFunctionImport,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.Query.Metadata.ODataServiceOperationResultKind)">
            <summary>
            Sets the result kind of the <paramref name="serviceOperation"/>.
            </summary>
            <param name="serviceOperation">The <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> to check.</param>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="resultKind">The result kind to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.ResolveServiceOperation(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Resolves a name to an <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> instance.
            </summary>
            <param name="model">The model to resolve the name against.</param>
            <param name="operationName">The name of the service operation to look up.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> instance with the specified <paramref name="operationName"/>; if no such service operation exists the method throws.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.TryResolveServiceOperation(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Resolves a name to an <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> instance.
            </summary>
            <param name="model">The model to resolve the name against.</param>
            <param name="operationName">The name of the service operation to look up.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> instance with the specified <paramref name="operationName"/> or null if no such service operation exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.GetInstanceType(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Returns the instance type for the specified <paramref name="typeReference"/> or null if none exists.
            </summary>
            <param name="typeReference">The type reference to get the instance type for.</param>
            <param name="model">The model containing annotations.</param>
            <returns>The instance type for the <paramref name="typeReference"/> or null if no instance type exists.</returns>
            <remarks>All primitive type references are guaranteed to have an instance type.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.GetInstanceType(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Returns the instance type for the specified <paramref name="type"/> or null if none exists.
            </summary>
            <param name="type">The type to get the instance type for.</param>
            <param name="model">The model containing annotations.</param>
            <returns>The instance type for the <paramref name="type"/> or null if no instance type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.SetInstanceType(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmModel,System.Type)">
            <summary>
            Sets the instance type for the specified <paramref name="type"/>; if null is specified an existing instance type will be removed.
            </summary>
            <param name="type">The type to get the instance type for.</param>
            <param name="model">Model containing annotations.</param>
            <param name="instanceType">The instance type for the <paramref name="type"/> or null to remove an existing instance type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.GetCanReflectOnInstanceType(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Checks whether reflection over the instance type is allowed or not.
            </summary>
            <param name="typeReference">The type reference to check.</param>
            <param name="model">Model containing annotations.</param>
            <returns>true if reflection over the instance type is allowed; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.SetCanReflectOnInstanceType(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Sets whether reflection over the instance type is allowed or not.
            </summary>
            <param name="typeReference">The type reference to check.</param>
            <param name="model">The model containing annotations.</param>
            <param name="canReflect">true if reflection over the instance type is allowed; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.SetCanReflectOnInstanceType(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Sets whether reflection over the instance type is allowed or not.
            </summary>
            <param name="type">The type to check.</param>
            <param name="model">Model containing annotations.</param>
            <param name="canReflect">true if reflection over the instance type is allowed; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.ResolveEntitySet(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Resolves a name to an <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> instance.
            </summary>
            <param name="model">The model to resolve the name against.</param>
            <param name="entitySetName">The name of the entity set to look up.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> instance with the specified <paramref name="entitySetName"/>; if no such entity set exists the method throws.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.TryResolveEntitySet(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Resolves a name to an <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> instance.
            </summary>
            <param name="model">The model to resolve the name against.</param>
            <param name="entitySetName">The name of the entity set to look up.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> instance with the specified <paramref name="entitySetName"/> or null if no such entity set exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.IsServiceOperation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Method that checks whether a function import is a service operation.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing annotations.</param>
            <param name="functionImport">The <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> to check.</param>
            <returns>true if the <paramref name="functionImport"/> represents a service operation; otherwise false.</returns>
            <remarks>
            A <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> is considered a service operation if it is annotated with an m:HttpMethod attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataQueryUtils.IsAction(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Method that checks whether a function import is an action.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing annotations.</param>
            <param name="functionImport">The <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> to check.</param>
            <returns>true if the <paramref name="functionImport"/> represents an action; otherwise false.</returns>
            <remarks>
            A <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> is considered an action if it is side-effecting but not annotated with an m:HttpMethod attribute.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Query.BinaryOperator">
            <summary>
            Class to wrap around BinaryOperatorKind that gives precedent meaning to it.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.Add">
            <summary>Wrapper for Add operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.And">
            <summary>Wrapper for And operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.Divide">
            <summary>Wrapper for Divide operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.Equal">
            <summary>Wrapper for Equal operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.GreaterThanOrEqual">
            <summary>Wrapper for GreaterThanOrEqual operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.GreaterThan">
            <summary>Wrapper for GreaterThan operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.LessThanOrEqual">
            <summary>Wrapper for LessThanOrEqual operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.LessThan">
            <summary>Wrapper for LessThan operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.Modulo">
            <summary>Wrapper for Modulo operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.Multiply">
            <summary>Wrapper for Multiply operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.NotEqual">
            <summary>Wrapper for NotEqual operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.Or">
            <summary>Wrapper for Or operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.Subtract">
            <summary>Wrapper for Subtract operator kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.text">
            <summary>
            The text for this operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.precedence">
            <summary>
            The precedence for this operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperator.needParenEvenWhenTheSame">
            <summary>
            Whether it needs parentheses against other same operator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperator.#ctor(System.String,System.Int16,System.Boolean)">
            <summary>
            Create a new BinaryOperator given its text, precedence, 
            and whether it needs parentheses against other same operator.
            </summary>
            <param name="text">The text for this operator.</param>
            <param name="precedence">The precedence for this operator in relative to other operators.</param>
            <param name="needParenEvenWhenTheSame">
            Whether it needs parentheses 
            when nesting with other operators of same precedence.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperator.GetOperator(Microsoft.Data.OData.Query.BinaryOperatorKind)">
            <summary>
            Get the BinaryOperator wrapper for the given operatorKind.
            </summary>
            <param name="operatorKind">The kind to get wrapper for.</param>
            <returns>The binary operator for the specified <paramref name="operatorKind"/>.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.BinaryOperator.NeedParenEvenWhenTheSame">
            <summary>
            Whether it needs parentheses against other same operator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.BinaryOperator.Precedence">
            <summary>
            The precedence for this operator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.BinaryOperator.Text">
            <summary>
            The text for this operator.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken">
            <summary>
            Lexical token representing a binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.operatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.left">
            <summary>
            The left operand.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.right">
            <summary>
            The right operand.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.#ctor(Microsoft.Data.OData.Query.BinaryOperatorKind,Microsoft.Data.OData.Query.SyntacticAst.QueryToken,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a new BinaryOperatorToken given the operator, left and right query.
            </summary>
            <param name="operatorKind">The operator represented by this node.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.OperatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.Left">
            <summary>
            The left operand.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken.Right">
            <summary>
            The right operand.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.BinaryOperatorKind">
            <summary>
            Enumeration of binary operators.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.Or">
            <summary>
            The logical or operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.And">
            <summary>
            The logical and operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.Equal">
            <summary>
            The eq operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.NotEqual">
            <summary>
            The ne operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.GreaterThan">
            <summary>
            The gt operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.GreaterThanOrEqual">
            <summary>
            The ge operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.LessThan">
            <summary>
            The lt operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.LessThanOrEqual">
            <summary>
            The le operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.Add">
            <summary>
            The add operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.Subtract">
            <summary>
            The sub operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.Multiply">
            <summary>
            The mul operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.Divide">
            <summary>
            The div operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorKind.Modulo">
            <summary>
            The mod operator.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.BinaryOperatorUriBuilder">
            <summary>
            Class to handle writing an BinaryOperatorToken.
            This class optimizes on reducing parentheses as base on operator precedence.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BinaryOperatorUriBuilder.builder">
            <summary>
            The parent ODataUriBuilder that invokes this binary operator builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorUriBuilder.#ctor(Microsoft.Data.OData.Query.ODataUriBuilder)">
            <summary>
            Create a new BinaryOperatorToken for the given Uri builder to write BinaryOperatorToken.
            </summary>
            <param name="builder">The parent builder of this builder.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorUriBuilder.Write(Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Write the given binary token as Uri part.
            </summary>
            <param name="binary">To write as Uri part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorUriBuilder.NeedParenthesesLeft(Microsoft.Data.OData.Query.BinaryOperator,Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Determine whether parentheses are needed around the left subtree base on the current operator.
            </summary>
            <param name="currentOperator">The current binary node's operator.</param>
            <param name="leftSubtree">The left binary subtree.</param>
            <returns>True if need parenthese, false if not.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorUriBuilder.NeedParenthesesRight(Microsoft.Data.OData.Query.BinaryOperator,Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Determine whether parentheses are needed around the right subtree base on the current operator.
            </summary>
            <param name="currentOperator">The current binary node's operator.</param>
            <param name="rightSubtree">The right binary subtree.</param>
            <returns>True if need parentheses, false if not.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BinaryOperatorUriBuilder.Write(System.Boolean,Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Write the given binary token as Uri part.
            </summary>
            <param name="needParenthesis">Whether parentheses are needed around the written expression.</param>
            <param name="binary">To write as Uri part.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.BuiltInFunctions">
            <summary>
            Class containing definitions of all the built-in functions.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.BuiltInFunctions.builtInFunctions">
            <summary>
            Dictionary of the name of the built-in function and all the signatures.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.TryGetBuiltInFunction(System.String,Microsoft.Data.OData.Query.FunctionSignatureWithReturnType[]@)">
            <summary>
            Returns a list of signatures for a function name.
            </summary>
            <param name="name">The name of the function to look for.</param>
            <param name="signatures">The list of signatures available for the function name.</param>
            <returns>true if the function was found, or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.BuildFunctionSignatureListDescription(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.FunctionSignature})">
            <summary>Builds a description of a list of function signatures.</summary>
            <param name="name">Function name.</param>
            <param name="signatures">Function signatures.</param>
            <returns>A string with ';'-separated list of function signatures.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.CreateSpatialFunctions(System.Collections.Generic.IDictionary{System.String,Microsoft.Data.OData.Query.FunctionSignatureWithReturnType[]})">
            <summary>
            Creates all of the spatial functions
            </summary>
            <param name="functions">Dictionary of functions to add to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.InitializeBuiltInFunctions">
            <summary>
            Builds the list of all built-in functions.
            </summary>
            <returns>Returns a dictionary of built in functions.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.CreateStringFunctions(System.Collections.Generic.IDictionary{System.String,Microsoft.Data.OData.Query.FunctionSignatureWithReturnType[]})">
            <summary>
            Creates all string functions.
            </summary>
            <param name="functions">Dictionary of functions to add to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.CreateDateTimeFunctions(System.Collections.Generic.IDictionary{System.String,Microsoft.Data.OData.Query.FunctionSignatureWithReturnType[]})">
            <summary>
            Creates all date and time functions.
            </summary>
            <param name="functions">Dictionary of functions to add to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.CreateDateTimeFunctionSignatureArray">
            <summary>
            Builds an array of signatures for date time functions.
            </summary>
            <returns>The array of signatures for a date time functions.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.CreateTimeSpanFunctionSignatures">
            <summary>
            Builds the set of signatures for timespan functions.
            </summary>
            <returns>The set of signatures for timespan functions.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.CreateMathFunctions(System.Collections.Generic.IDictionary{System.String,Microsoft.Data.OData.Query.FunctionSignatureWithReturnType[]})">
            <summary>
            Creates all math functions.
            </summary>
            <param name="functions">Dictionary of functions to add to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.BuiltInFunctions.CreateMathFunctionSignatureArray">
            <summary>
            Builds an array of signatures for math functions.
            </summary>
            <returns>The array of signatures for math functions.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ConstantNode">
            <summary>
            Node representing a primitive constant value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.constantValue">
            <summary>
            The primitive constant value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.typeReference">
            <summary>
            Cache for the TypeReference after it has been calculated for the current state of the node.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.#ctor(System.Object,System.String)">
            <summary>
            Create a ConstantNode
            </summary>
            <param name="constantValue">This node's primitive value.</param>
            <param name="literalText">The literal text for this node's value, formatted according to the OData URI literal formatting rules.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input literalText is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.#ctor(System.Object)">
            <summary>
            Create a ConstantNode
            </summary>
            <param name="constantValue">This node's primitive value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.Value">
            <summary>
            Gets the primitive constant value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.LiteralText">
            <summary>
            Get or Set the literal text for this node's value, formatted according to the OData URI literal formatting rules. May be null if the text was not provided at construction time.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.TypeReference">
            <summary>
            Gets the resouce type of the single value this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ConstantNode.InternalKind">
            <summary>
            Gets the kind of the query node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.ConvertNode">
            <summary>
            Node representing a conversion of primitive type to another type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ConvertNode.source">
            <summary>
            The source value to convert.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.ConvertNode.typeReference">
            <summary>
            The target type that the source will be converted to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ConvertNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Constructs a ConvertNode.
            </summary>
            <param name="source">The node to convert.</param>
            <param name="typeReference"> The type to convert the node to</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input source or typeReference is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.ConvertNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ConvertNode.Source">
            <summary>
            Get the source value to convert.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ConvertNode.TypeReference">
            <summary>
            Get the type we're converting to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.ConvertNode.InternalKind">
            <summary>
            Get the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode">
            <summary>
            Query node representing a binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.operatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.left">
            <summary>
            The left operand.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.right">
            <summary>
            The right operand.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.typeReference">
            <summary>
            Cache for the TypeReference after it has been calculated for the current state of the node.
            This can be an expensive calculation so we want to avoid doing it repeatedly.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.#ctor(Microsoft.Data.OData.Query.BinaryOperatorKind,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode)">
            <summary>
            Create a BinaryOperatorNode
            </summary>
            <param name="operatorKind">The binary operator type.</param>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the left or right inputs are null.</exception>
            <exception cref="T:Microsoft.Data.OData.ODataException">Throws if the two operands don't have the same type.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.OperatorKind">
            <summary>
            Gets the operator represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.Left">
            <summary>
            Gets the left operand.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.Right">
            <summary>
            Gets the right operand.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.TypeReference">
            <summary>
            Gets the resource type of the single value this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.BinaryOperatorNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.InlineCountKind">
            <summary>
            Possible values of $inlinecount.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InlineCountKind.None">
            <summary>
            Do not include count in response.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InlineCountKind.AllPages">
            <summary>
            Include the count of all entries in response.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.KeywordKind">
            <summary>
            Keyword enum values related to the URI query syntax
            such as $metadata, $count, $value, etc.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.KeywordKind.Metadata">
            <summary>A segment name in a URI that indicates metadata is being requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.KeywordKind.Value">
            <summary>A segment name in a URI that indicates a plain primitive value is being requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.KeywordKind.Batch">
            <summary>A segment name in a URI that indicates batch is being requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.KeywordKind.Links">
            <summary>A segment name in a URI that indicates that this is an entity reference link operation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.KeywordKind.Count">
            <summary>A segment name in a URI that indicates that this is a count operation.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.LiteralUtils">
            <summary>
            Helper methods for with literals.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralUtils.ParseGeography(System.String)">
            <summary>
            Parse the given text as a Geography literal.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The Geography object if succeeded, else a ParseErrorException is thrown.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralUtils.ParseGeometry(System.String)">
            <summary>
            Parse the given text as a Geometry literal.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>The Geometry object if succeeded, else a ParseErrorException is thrown.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralUtils.ToWellKnownText(System.Spatial.Geography)">
            <summary>
            Convert to string the given Geography instance.
            </summary>
            <param name="instance">Instance to convert.</param>
            <returns>Well-known text representation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.LiteralUtils.ToWellKnownText(System.Spatial.Geometry)">
            <summary>
            Convert to string the given Geometry instance.
            </summary>
            <param name="instance">Instance to convert.</param>
            <returns>Well-known text representation.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.LiteralUtils.Formatter">
            <summary>
            The formatter to create/format text to and from spatial.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriBuilder">
            <summary>
            URI builder that constructes a <see cref="T:System.Uri"/> from the parsed query tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilder.query">
            <summary>
            The query token to write to Uri.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilder.builder">
            <summary>
            The string builder to write the query token to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.#ctor(Microsoft.Data.OData.Query.SyntacticTree)">
            <summary>
            Create a new Uri builder for the given token.
            </summary>
            <param name="query">The token to write out as Uri.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.CreateUri(System.Uri,Microsoft.Data.OData.Query.SyntacticTree)">
            <summary>
            Create a URI for the given queryDescriptor given the base service URI.
            </summary>
            <param name="baseUri">The base service URI.</param>
            <param name="queryDescriptor">The query descriptor to create the result URI from.</param>
            <returns>An absolute URI that base on the baseUri and represent the queryDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.GetUriRepresentation(System.Object)">
            <summary>
            Get the Uri string representation of the given CLR object literal.
            </summary>
            <param name="clrLiteral">The object to return as literal.</param>
            <returns>Uri string represent if is a CLR literal.  Throw exception if not.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteQueryDescriptor(Microsoft.Data.OData.Query.SyntacticTree)">
            <summary>
            Write the descriptor token as URI part to this builder.
            </summary>
            <param name="queryDescriptor">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.Append(System.String)">
            <summary>
            Append the given text to this builder.
            </summary>
            <param name="text">The text to append.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteQuery(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Write the query token as URI part to this builder.
            </summary>
            <param name="queryPart">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteClrLiteral(System.Text.StringBuilder,System.Object)">
            <summary>
            Write the Uri string representation of the given CLR object literal to the given builder.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to write the <paramref name="clrLiteral"/> to.</param>
            <param name="clrLiteral">The object to write as literal.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.Build">
            <summary>
            Build the queryToken as Uri string part.
            </summary>
            <returns>The Uri part representing the queryToken.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteBinary(Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Write the binary token as URI part to this builder.
            </summary>
            <param name="binary">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteFunctionCall(Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken)">
            <summary>
            Write the function call token as URI part to this builder.
            </summary>
            <param name="functionToken">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WritePath(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a path to this builder.
            </summary>
            <param name="path">Array of segments.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteLiteral(Microsoft.Data.OData.Query.SyntacticAst.LiteralToken)">
            <summary>
            Write the literal token as URI part to this builder.
            </summary>
            <param name="literal">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteOrderBys(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.OrderByToken})">
            <summary>
            Write the orderby tokens as URI part to this builder.
            </summary>
            <param name="orderBys">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteOrderBy(Microsoft.Data.OData.Query.SyntacticAst.OrderByToken)">
            <summary>
            Write the orderby token as URI part to this builder.
            </summary>
            <param name="orderBy">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WritePathSegment(Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken)">
            <summary>
            Write out a PathSegmentToken
            </summary>
            <param name="segmentToken">the pathSegmentToken to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WritePropertyAccess(Microsoft.Data.OData.Query.SyntacticAst.EndPathToken)">
            <summary>
            Write the property access token as URI part to this builder.
            </summary>
            <param name="endPath">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteNavigationProperty(Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken)">
            <summary>
            Write the navigation property token as URI part to this builder.
            </summary>
            <param name="navigation">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteQueryOption(Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken)">
            <summary>
            Write the given queryOption as Uri part.
            </summary>
            <param name="queryOption">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteQueryPrefixOrSeparator(System.Boolean)">
            <summary>
            Write ? or &amp; depending on whether it is the start of the whole query or query part.
            </summary>
            <param name="writeQueryPrefix">True if start of whole query, false if not.  
            This is set to false after this method is called.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteSelect(Microsoft.Data.OData.Query.SyntacticAst.SelectToken)">
            <summary>
            Write the select token as URI part to this builder.
            </summary>
            <param name="selectToken">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteExpand(Microsoft.Data.OData.Query.SyntacticAst.ExpandToken)">
            <summary>
            Write the expand token as URI part to this builder.
            </summary>
            <param name="expand">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteStar(Microsoft.Data.OData.Query.SyntacticAst.StarToken)">
            <summary>
            Write the star token as URI part to this builder.
            </summary>
            <param name="star">To write as URI part.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilder.WriteUnary(Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken)">
            <summary>
            Write the unary token as URI part to this builder.
            </summary>
            <param name="unary">To write as URI part.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriBuilderUtils">
            <summary>
            Constants and utility methods for the OData URI builder.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilderUtils.IntegerFormat">
            <summary>
            The format for integer ToString output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilderUtils.FloatFormat">
            <summary>
            The format for float ToString output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilderUtils.BinaryFormat">
            <summary>
            The format for byte ToString output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilderUtils.DoubleFormat">
            <summary>
            The format for double ToString output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilderUtils.DateTimeFormat">
            <summary>
            The format for DateTime ToString output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilderUtils.DateTimeOffsetFormat">
            <summary>
            The format for DateTimeOffset ToString output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilderUtils.DecimalFormatInfo">
            <summary>
            The format for Decimal ToString output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUriBuilderUtils.DoubleFormatInfo">
            <summary>
            The format for Double ToString output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilderUtils.Escape(System.String)">
            <summary>
            Escape a string literal by replacing single ' with ''.
            </summary>
            <param name="text">Text to escape.</param>
            <returns>A string where all ' is replaced by ''.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilderUtils.ToText(Microsoft.Data.OData.Query.InlineCountKind)">
            <summary>
            Returns the string representation of the inline count kind.
            </summary>
            <param name="inlineCount">The inline count kind to convert to string.</param>
            <returns>The string representation of the <paramref name="inlineCount"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilderUtils.NotSupportedQueryTokenKind(Microsoft.Data.OData.Query.QueryTokenKind)">
            <summary>
            Throw ODataException on the given QueryTokenKind as not supported for writing to Uri.
            </summary>
            <param name="queryTokenKind">QueryTokenKind that is not supported.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriBuilderUtils.NotSupported(System.Type)">
            <summary>
            Throw ODataException on the given CLR type as not supported for writing to Uri.
            </summary>
            <param name="type">CLR type that is not supported.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.OpenTypeMethods">
            <summary>Use this class to perform late-bound operations on open properties.</summary>    
            <remarks>This class was copied from the product.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.AddMethodInfo">
            <summary>MethodInfo for Add.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.AndAlsoMethodInfo">
            <summary>MethodInfo for AndAlso.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.ConvertMethodInfo">
            <summary>MethodInfo for Convert.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.DivideMethodInfo">
            <summary>MethodInfo for Divide.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.EqualMethodInfo">
            <summary>MethodInfo for Equal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.GreaterThanMethodInfo">
            <summary>MethodInfo for GreaterThan.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.GreaterThanOrEqualMethodInfo">
            <summary>MethodInfo for GreaterThanOrEqual.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.LessThanMethodInfo">
            <summary>MethodInfo for LessThan.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.LessThanOrEqualMethodInfo">
            <summary>MethodInfo for LessThanOrEqual.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.ModuloMethodInfo">
            <summary>MethodInfo for Modulo.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.MultiplyMethodInfo">
            <summary>MethodInfo for Multiply.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.NegateMethodInfo">
            <summary>MethodInfo for Negate.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.NotMethodInfo">
            <summary>MethodInfo for Not.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.NotEqualMethodInfo">
            <summary>MethodInfo for NotEqual.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.OrElseMethodInfo">
            <summary>MethodInfo for OrElse.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.SubtractMethodInfo">
            <summary>MethodInfo for Subtract.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.TypeIsMethodInfo">
            <summary>MethodInfo for TypeIs.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OpenTypeMethods.GetValueOpenPropertyMethodInfo">
            <summary>MethodInfo for object OpenTypeMethods.GetValue(this object value, string propertyName).</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.GetValue(System.Object,System.String)">
            <summary>Gets a named value from the specified object.</summary>
            <param name='value'>Object to get value from.</param>
            <param name='propertyName'>Name of property to get.</param>
            <returns>The requested value; null if not found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Add(System.Object,System.Object)">
            <summary>Adds two values with no overflow checking.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The added value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.AndAlso(System.Object,System.Object)">
            <summary>Performs logical and of two expressions.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The result of logical and.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Divide(System.Object,System.Object)">
            <summary>Divides two values.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The divided value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Equal(System.Object,System.Object)">
            <summary>Checks whether two values are equal.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left equals right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.GreaterThan(System.Object,System.Object)">
            <summary>Checks whether the left value is greater than the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is greater than right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.GreaterThanOrEqual(System.Object,System.Object)">
            <summary>Checks whether the left value is greater than or equal to the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is greater than or equal to right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.LessThan(System.Object,System.Object)">
            <summary>Checks whether the left value is less than the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is less than right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.LessThanOrEqual(System.Object,System.Object)">
            <summary>Checks whether the left value is less than or equal to the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is less than or equal to right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Modulo(System.Object,System.Object)">
            <summary>Calculates the remainder of dividing the left value by the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The remainder value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Multiply(System.Object,System.Object)">
            <summary>Multiplies two values with no overflow checking.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The multiplication value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.NotEqual(System.Object,System.Object)">
            <summary>Checks whether two values are not equal.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is does not equal right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.OrElse(System.Object,System.Object)">
            <summary>Performs logical or of two expressions.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The result of logical or.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Subtract(System.Object,System.Object)">
            <summary>Subtracts the right value from the left value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The subtraction value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Negate(System.Object)">
            <summary>Negates (arithmetically) the specified value.</summary>
            <param name='value'>Value.</param>
            <returns>The negated value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Not(System.Object)">
            <summary>Negates (logically) the specified value.</summary>
            <param name='value'>Value.</param>
            <returns>The negated value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Convert(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Performs an type cast on the specified value.</summary>
            <param name='value'>Value.</param>
            <param name='typeReference'>Type reference to check for.</param>
            <returns>Casted value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.TypeIs(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Performs an type check on the specified value.</summary>
            <param name='value'>Value.</param>
            <param name='typeReference'>Type reference to check for.</param>
            <returns>True if value is-a type; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Concat(System.Object,System.Object)">
            <summary>
            Concats the given 2 string.
            </summary>
            <param name="first">first string.</param>
            <param name="second">second string.</param>
            <returns>returns a new instance of the concatenated string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.EndsWith(System.Object,System.Object)">
            <summary>
            Checks with the parameters are of string type, if no, then they throw.
            Otherwise returns true if the target string ends with the given sub string
            </summary>
            <param name="targetString">target string</param>
            <param name="substring">sub string</param>
            <returns>Returns true if the target string ends with the given sub string, otherwise return false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.IndexOf(System.Object,System.Object)">
            <summary>
            Returns the index of the given substring in the target string.
            </summary>
            <param name="targetString">target string</param>
            <param name="substring">sub string to match</param>
            <returns>returns the index of the given substring in the target string if present, otherwise returns null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Length(System.Object)">
            <summary>
            Returns the length of the given string value. If the value is not of string type, then it throws.
            </summary>
            <param name="value">value whose length needs to be calculated.</param>
            <returns>length of the string value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Replace(System.Object,System.Object,System.Object)">
            <summary>
            Replaces the given substring with the new string in the target string.
            </summary>
            <param name="targetString">target string</param>
            <param name="substring">substring to be replaced.</param>
            <param name="newString">new string that replaces the sub string.</param>
            <returns>returns a new string with the substring replaced with new string.</returns> 
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.StartsWith(System.Object,System.Object)">
            <summary>
            Checks whether the target string starts with the substring.
            </summary>
            <param name="targetString">target string.</param>
            <param name="substring">substring</param>
            <returns>returns true if the target string starts with the given sub string, otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Substring(System.Object,System.Object)">
            <summary>
            Returns the substring given the starting index
            </summary>
            <param name="targetString">target string</param>
            <param name="startIndex">starting index for the substring.</param>
            <returns>the substring given the starting index.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Substring(System.Object,System.Object,System.Object)">
            <summary>
            Returns the substring from the target string.
            </summary>
            <param name="targetString">target string.</param>
            <param name="startIndex">starting index for the substring.</param>
            <param name="length">length of the substring.</param>
            <returns>Returns the substring given the starting index and length.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.SubstringOf(System.Object,System.Object)">
            <summary>
            Checks whether the given string is a substring of the target string.
            </summary>
            <param name="substring">substring to check for.</param>
            <param name="targetString">target string.</param>
            <returns>returns true if the target string contains the substring, otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.ToLower(System.Object)">
            <summary>
            Returns a copy of the target string converted to lowercase.
            </summary>
            <param name="targetString">target string</param>
            <returns>a new string instance with everything in lowercase.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.ToUpper(System.Object)">
            <summary>
            Returns a copy of the target string converted to uppercase.
            </summary>
            <param name="targetString">target string</param>
            <returns>a new string instance with everything in uppercase.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Trim(System.Object)">
            <summary>
            Removes all leading and trailing white-space characters from the target string. 
            </summary>
            <param name="targetString">target string.</param>
            <returns>returns the trimed string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Year(System.Object)">
            <summary>
            Returns the year value of the given datetime.
            </summary>
            <param name="dateTime">datetime object.</param>
            <returns>returns the year value of the given datetime.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Month(System.Object)">
            <summary>
            Returns the month value of the given datetime.
            </summary>
            <param name="dateTime">datetime object.</param>
            <returns>returns the month value of the given datetime.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Day(System.Object)">
            <summary>
            Returns the day value of the given datetime.
            </summary>
            <param name="dateTime">datetime object.</param>
            <returns>returns the day value of the given datetime.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Hour(System.Object)">
            <summary>
            Returns the hour value of the given datetime.
            </summary>
            <param name="dateTime">datetime object.</param>
            <returns>returns the hour value of the given datetime.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Minute(System.Object)">
            <summary>
            Returns the minute value of the given datetime.
            </summary>
            <param name="dateTime">datetime object.</param>
            <returns>returns the minute value of the given datetime.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Second(System.Object)">
            <summary>
            Returns the second value of the given datetime.
            </summary>
            <param name="dateTime">datetime object.</param>
            <returns>returns the second value of the given datetime.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Ceiling(System.Object)">
            <summary>
            Returns the ceiling of the given value
            </summary>
            <param name="value">decimal or double object.</param>
            <returns>returns the ceiling value for the given double or decimal value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Floor(System.Object)">
            <summary>
            returns the floor of the given value.
            </summary>
            <param name="value">decimal or double object.</param>
            <returns>returns the floor value for the given double or decimal value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.Round(System.Object)">
            <summary>
            Rounds the given value.
            </summary>
            <param name="value">decimal or double object.</param>
            <returns>returns the round value for the given double or decimal value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.AddExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that adds two values with no overflow checking.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The added value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.AndAlsoExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates a call expression that represents a conditional AND operation that evaluates the second operand only if it has to.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The conditional expression; null if the expressions aren't of the right type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.DivideExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that divides two values.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The divided value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.EqualExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that checks whether two values are equal.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left equals right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.GreaterThanExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that checks whether the left value is greater than the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is greater than right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.GreaterThanOrEqualExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that checks whether the left value is greater than or equal to the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is greater than or equal to right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.LessThanExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that checks whether the left value is less than the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is less than right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.LessThanOrEqualExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that checks whether the left value is less than or equal to the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is less than or equal to right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.ModuloExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that calculates the remainder of dividing the left value by the right value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The remainder value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.MultiplyExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that multiplies two values with no overflow checking.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The multiplication value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.OrElseExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates a call expression that represents a conditional OR operation that evaluates the second operand only if it has to.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The conditional expression; null if the expressions aren't of the right type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.NotEqualExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that checks whether two values are not equal.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>true if left is does not equal right; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.SubtractExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>Creates an expression that subtracts the right value from the left value.</summary>
            <param name='left'>Left value.</param><param name='right'>Right value.</param>
            <returns>The subtraction value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.NegateExpression(System.Linq.Expressions.Expression)">
            <summary>Creates an expression that negates (arithmetically) the specified value.</summary>
            <param name='expression'>Value expression.</param>
            <returns>The negated value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.NotExpression(System.Linq.Expressions.Expression)">
            <summary>Creates an expression that negates (logically) the specified value.</summary>
            <param name='expression'>Value expression.</param>
            <returns>The negated value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.OpenTypeMethods.ExpressionAsObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the specified <paramref name="expression"/> with a 
            type assignable to System.Object.
            </summary>
            <param name="expression">Expression to convert.</param>
            <returns>
            The specified <paramref name="expression"/> with a type assignable 
            to System.Object.
            </returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken">
            <summary>
            Lexical token representing the parameter for an Any/All query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken.name">
            <summary>
            The name of the Any/All parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken.#ctor(System.String)">
            <summary>
            Create a new RangeVariableToken
            </summary>
            <param name="name">The name of the visitor for the Any/All query.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken">
            <summary>
            Lexical token representing a query option.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken.name">
            <summary>
            The name of the query option.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken.value">
            <summary>
            The value of the query option.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken.#ctor(System.String,System.String)">
            <summary>
            Create a new CustomQueryOptionToken given name and value.
            </summary>
            <param name="name">The name of the query option.</param>
            <param name="value">The value of the query option.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken.Name">
            <summary>
            The name of the query option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken.Value">
            <summary>
            The value of the query option.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.QueryTokenUtils">
            <summary>
            Helper methods for working with query tokens.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.QueryTokenUtils.ParseInlineCountKind(System.String)">
            <summary>
            Try to parse the given string as a InlineCountKind.
            </summary>
            <param name="inlineCount">The string to be parsed.</param>
            <returns>A InlineCountKind value if successful. Null if not.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.QueryTokenUtils.ParseKeywordKind(System.String)">
            <summary>
            Try to parse the given segment name as a KeywordKind.
            </summary>
            <param name="segment">The segment name.</param>
            <returns>A KeywordKind value if successful. Null if not.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.QueryTokenUtils.GetNameFromKeywordKind(Microsoft.Data.OData.Query.KeywordKind)">
            <summary>
            Get the Uri name equivalent of the given KeywordKind.
            </summary>
            <param name="keyword">The KeywordKind to get name for.</param>
            <returns>A $ keyword that represent the given keyword.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.SelectToken">
            <summary>
            Lexical token representing a select operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.SelectToken.properties">
            <summary>
            The properties according to which to select the results.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectToken.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.PathSegmentToken})">
            <summary>
            Create a SelectToken given the property-accesses of the select query.
            </summary>
            <param name="properties">The properties according to which to select the results.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.SelectToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.SelectToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.SelectToken.Properties">
            <summary>
            The properties according to which to select the results.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SingleValueFunctionCallNode">
            <summary>
            Node representing a function call which returns a single value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.name">
            <summary>
            the name of this function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.functionImports">
            <summary>
            The list of function imports
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.arguments">
            <summary>
            List of arguments to this function call.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.typeReference">
            <summary>
            The type of value returned by this function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.source">
            <summary>
            The semantically bound parent of this function
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.QueryNode},Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Create a SingleValueFunctionCallNode
            </summary>
            <param name="name">The name of the function to call</param>
            <param name="arguments">List of arguments to this function call.</param>
            <param name="typeReference">The type of value returned by this function.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input name is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport},System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.QueryNode},Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Create a SingleValueFunctionCallNode
            </summary>
            <param name="name">The name of the function to call</param>
            <param name="functionImports">the list of functions to call</param>
            <param name="arguments">the list of arguments to this function</param>
            <param name="typeReference">the type of the value returned by this function.</param>
            <param name="source">The semantically bound parent of this function.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input functionImports is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.Name">
            <summary>
            Gets the name of the function to call.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.FunctionImports">
            <summary>
            Gets the list of function imports.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.Arguments">
            <summary>
            Gets the list of arguments to this function call.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.TypeReference">
            <summary>
            Gets The type of value returned by this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.Source">
            <summary>
            Gets the semantically bound parent of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SingleValueFunctionCallNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.FunctionSignature">
            <summary>
            Class representing a function signature using EDM types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.FunctionSignature.argumentTypes">
            <summary>The argument types for this function signature.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionSignature.#ctor(Microsoft.Data.Edm.IEdmTypeReference[])">
            <summary>
            Constructor taking all the argument types.
            </summary>
            <param name="argumentTypes">The argument types for this function signature.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.FunctionSignature.ArgumentTypes">
            <summary>
            The argument types for this function signature.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.FunctionSignatureWithReturnType">
            <summary>
            Class representing a function signature using EDM types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.FunctionSignatureWithReturnType.returnType">
            <summary>
            The return type of this function signature.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.FunctionSignatureWithReturnType.#ctor(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference[])">
            <summary>
            Constructor taking all the argument types.
            </summary>
            <param name="returnType">The return type of this function signature.</param>
            <param name="argumentTypes">The argument types for this function signature.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.FunctionSignatureWithReturnType.ReturnType">
            <summary>
            The return type of this function signature.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.StarToken">
            <summary>
            Lexical token representing an all-properties access.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.StarToken.nextToken">
            <summary>
            The NextToken token to access the property on.
            If this is null, then the property access has no NextToken. That usually means to access the property
            on the implicit parameter for the expression, the result on which the expression is being applied.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.StarToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a new StarToken given the NextToken (if any).
            </summary>
            <param name="nextToken">The NextToken token to access the property on. Pass no if this property has no NextToken.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.StarToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.StarToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.StarToken.NextToken">
            <summary>
            The NextToken token to access the property on.
            If this is null, then the property access has no NextToken. That usually means to access the property
            on the implicit parameter for the expression, the result on which the expression is being applied.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.StarToken.Identifier">
            <summary>
            the name of this token(inherited from PathToken), which in this case is always "*"
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.TypePromotionUtils">
            <summary>
            Helper methods for promoting argument types of operators and function calls.
            </summary>
            <remarks>
            Note that the lists of signatures are for matching primitive types to functions. 
            Equality (eq and ne) operators are a bit special since they are also defined for 
            entity and complex types.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.logicalSignatures">
            <summary>Function signatures for logical operators (and, or).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.notSignatures">
            <summary>Function signatures for the 'not' operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.arithmeticSignatures">
            <summary>Function signatures for arithmetic operators (add, sub, mul, div, mod).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.relationalSignatures">
            <summary>Function signatures for relational operators (eq, ne, lt, le, gt, ge).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.negationSignatures">
            <summary>Function signatures for the 'negate' operator.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.PromoteOperandTypes(Microsoft.Data.OData.Query.BinaryOperatorKind,Microsoft.Data.Edm.IEdmTypeReference@,Microsoft.Data.Edm.IEdmTypeReference@)">
            <summary>Checks that the operands (possibly promoted) are valid for the specified operation.</summary>
            <param name="operatorKind">The operator kind to promote the operand types for.</param>
            <param name="left">Type reference of left operand.</param>
            <param name="right">Type reference of right operand.</param>
            <returns>True if a valid function signature was found that matches the given types after any necessary promotions are made.
            False if there is no binary operators </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.PromoteOperandType(Microsoft.Data.OData.Query.UnaryOperatorKind,Microsoft.Data.Edm.IEdmTypeReference@)">
            <summary>Checks that the operands (possibly promoted) are valid for the specified operation.</summary>
            <param name="operatorKind">The operator kind to promote the operand types for.</param>
            <param name="typeReference">Type of the operand.</param>
            <returns>True if the type could be promoted; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.FindBestFunctionSignature(Microsoft.Data.OData.Query.FunctionSignatureWithReturnType[],Microsoft.Data.Edm.IEdmTypeReference[])">
            <summary>Finds the best fitting function for the specified arguments.</summary>
            <param name="functions">Functions to consider.</param>
            <param name="argumentTypes">Types of the arguments for the function.</param>
            <returns>The best fitting function; null if none found or ambiguous.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.FindExactFunctionSignature(Microsoft.Data.OData.Query.FunctionSignature[],Microsoft.Data.Edm.IEdmTypeReference[])">
            <summary>Finds the exact fitting function for the specified arguments.</summary>
            <param name="functions">Functions to consider.</param>
            <param name="argumentTypes">Types of the arguments for the function.</param>
            <returns>The exact fitting function; null if no exact match was found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.CanConvertTo(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Checks whether the source type is compatible with the target type.</summary>
            <param name="sourceReference">Source type.</param>
            <param name="targetReference">Target type.</param>
            <returns>true if source can be used in place of target; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.GetFunctionSignatures(Microsoft.Data.OData.Query.BinaryOperatorKind)">
            <summary>
            Gets the correct set of function signatures for type promotion for a given binary operator.
            </summary>
            <param name="operatorKind">The operator kind to get the signatures for.</param>
            <returns>The set of signatures for the specified <paramref name="operatorKind"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.GetFunctionSignatures(Microsoft.Data.OData.Query.UnaryOperatorKind)">
            <summary>
            Gets the correct set of function signatures for type promotion for a given binary operator.
            </summary>
            <param name="operatorKind">The operator kind to get the signatures for.</param>
            <returns>The set of signatures for the specified <paramref name="operatorKind"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.FindBestSignature(Microsoft.Data.OData.Query.FunctionSignature[],Microsoft.Data.Edm.IEdmTypeReference[])">
            <summary>Finds the best methods for the specified arguments given a candidate method enumeration.</summary>
            <param name="signatures">The candidate function signatures.</param>
            <param name="argumentTypes">The argument type references to match.</param>
            <returns>The number of "best match" methods.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.IsApplicable(Microsoft.Data.OData.Query.FunctionSignature,Microsoft.Data.Edm.IEdmTypeReference[])">
            <summary>Checks whether the specified method is applicable given the argument expressions.</summary>
            <param name="signature">The candidate function signature to check.</param>
            <param name="argumentTypes">The argument types to match.</param>
            <returns>An applicable function signature if all argument types can be promoted; 'null' otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.CanPromoteTo(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Promotes the specified expression to the given type if necessary.</summary>
            <param name="sourceType">The actual argument type.</param>
            <param name="targetType">The required type to promote to.</param>
            <returns>True if the <paramref name="sourceType"/> could be promoted; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.FindBestApplicableSignatures(System.Collections.Generic.List{Microsoft.Data.OData.Query.FunctionSignature},Microsoft.Data.Edm.IEdmTypeReference[])">
            <summary>Finds the best applicable methods from the specified array that match the arguments.</summary>
            <param name="signatures">The candidate function signatures.</param>
            <param name="argumentTypes">The argument types to match.</param>
            <returns>Best applicable methods.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.MatchesArgumentTypesBetterThan(Microsoft.Data.Edm.IEdmTypeReference[],Microsoft.Data.Edm.IEdmTypeReference[],Microsoft.Data.Edm.IEdmTypeReference[])">
            <summary>
            Checks whether the <paramref name="firstCandidate"/> type list has better argument matching against the <paramref name="argumentTypes"/>
            than the <paramref name="secondCandidate"/> type list.
            </summary>
            <param name="argumentTypes">Actual arguments types.</param>
            <param name="firstCandidate">First type list to check.</param>
            <param name="secondCandidate">Second type list to check.</param>
            <returns>
            True if <paramref name="firstCandidate"/> has better parameter matching than <paramref name="secondCandidate"/>; otherwise false.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.CompareConversions(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Checks which conversion is better.</summary>
            <param name="source">Source type.</param>
            <param name="targetA">First candidate type to convert to.</param>
            <param name="targetB">Second candidate type to convert to.</param>
            <returns>
            Return 1 if s -> t1 is a better conversion than s -> t2
            Return -1 if s -> t2 is a better conversion than s -> t1
            Return 0 if neither conversion is better
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.TryHandleEqualityOperatorForEntityOrComplexTypes(Microsoft.Data.Edm.IEdmTypeReference@,Microsoft.Data.Edm.IEdmTypeReference@)">
            <summary>
            Tries to handle the special eq and ne operators, which have a broader definition than the other binary operators.
            We try a few special cases and return true if we used one of them. Otherwise we return false, and
            allow the regular function matching code to handle the primitive cases.
            </summary>
            <param name="left">Left type.</param>
            <param name="right">Right type.</param>
            <returns>True if this function was able to handle the promotion of these types, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.IsSignedIntegralType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Checks whether the specified type is a signed integral type.</summary>
            <param name="typeReference">Type reference to check.</param>
            <returns>true if <paramref name="typeReference"/> is a signed integral type; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.IsUnsignedIntegralType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Checks whether the specified type is an unsigned integral type.</summary>
            <param name="typeReference">Type to check.</param>
            <returns>true if <paramref name="typeReference"/> is an unsigned integral type; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.IsDecimalType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Checks if the specified type is a decimal or nullable decimal type.</summary>
            <param name="typeReference">Type to check.</param>
            <returns>true if <paramref name="typeReference"/> is either decimal or nullable decimal type; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.IsDoubleOrSingle(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Checks if the specified type is either double or single or the nullable variants.</summary>
            <param name="typeReference">Type to check.</param>
            <returns>true if <paramref name="typeReference"/> is double, single or nullable double or single; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.TypePromotionUtils.GetNumericTypeKind(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>Gets a flag for the numeric kind of type.</summary>
            <param name="typeReference">Type to get numeric kind for.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.Query.TypePromotionUtils.NumericTypeKind"/> of the <paramref name="typeReference"/> argument.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.TypePromotionUtils.NumericTypeKind">
            <summary>Numeric type kinds.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.NumericTypeKind.NotNumeric">
            <summary>A type that is not numeric.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.NumericTypeKind.NotIntegral">
            <summary>A type that is a char, single, double or decimal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.NumericTypeKind.SignedIntegral">
            <summary>A type that is a signed integral.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.TypePromotionUtils.NumericTypeKind.UnsignedIntegral">
            <summary>A type that is an unsigned integral.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.PropertyInfoExtensionMethods">
            <summary>
            Extension methods to make it easier to work with PropertyInfo objects on a type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.PropertyInfoExtensionMethods.GetPropertyInfo(Microsoft.Data.Edm.IEdmStructuredTypeReference,Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the property info for the EDM property on the specified type.
            </summary>
            <param name="typeReference">The type to get the property on.</param>
            <param name="property">Property instance to get the property info for.</param>
            <param name="model">Model containing annotations.</param>
            <returns>Returns the PropertyInfo object for the specified property.</returns>
            <remarks>The method searches this type as well as all its base types for the property.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Query.PropertyInfoTypeAnnotation">
            <summary>
            Annotation stored on a type to hold PropertyInfo objects for its properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.PropertyInfoTypeAnnotation.propertyInfosDeclaredOnThisType">
            <summary>
            Cache of property info objects already created for properties on the type the annotation is on.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.PropertyInfoTypeAnnotation.GetPropertyInfoTypeAnnotation(Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the property info annotation for the specified type or creates a new one if it doesn't exist.
            </summary>
            <param name="structuredType">The type to get the annotation for.</param>
            <param name="model">The model containing annotations.</param>
            <returns>The property info annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.PropertyInfoTypeAnnotation.GetPropertyInfo(Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the property info for the EDM property declared on this type.
            </summary>
            <param name="structuredType">The structured type to get the property on.</param>
            <param name="property">Property instance to get the property info for.</param>
            <param name="model">The model containing annotations.</param>
            <returns>Returns the PropertyInfo object for the specified EDM property.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode">
            <summary>
            Node representing an access to a property value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode.source">
            <summary>
            The value containing this property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode.property">
            <summary>
            The EDM property which is to be accessed.
            </summary>
            <remarks>Only non-entity, non-collection properties are supported by this node.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Constructs a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode"/>.
            </summary>
            <param name="source">The value containing this property.</param>
            <param name="property">The EDM property which is to be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Throws if input source or property is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if input property is not structural, or is a collection.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode.Source">
            <summary>
            Gets the value containing this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode.Property">
            <summary>
            Gets the EDM property which is to be accessed.
            </summary>
            <remarks>Only non-entity, non-collection properties are supported by this node.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode.TypeReference">
            <summary>
            Gets the type of the single value this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValuePropertyAccessNode.InternalKind">
            <summary>
            Gets the kind of this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode">
            <summary>
            Node representing a type segment that casts a single entity parent node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.source">
            <summary>
            The entity that we're casting to a different type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.entityTypeReference">
            <summary>
            The target type that the source is cast to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.entitySet">
            <summary>
            The EntitySet containing the source entity.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.SingleEntityNode,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Created a SingleEntityCastNode with the given source node and the given type to cast to.
            </summary>
            <param name="source"> Source <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SingleValueNode"/> that is being cast.</param>
            <param name="entityType">Type to cast to.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input entityType is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.Source">
            <summary>
            Gets the entity that we're casting to a different type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.TypeReference">
            <summary>
            Gets the target type that the source is cast to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.EntityTypeReference">
            <summary>
            Gets the target type that the source is cast to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.EntitySet">
            <summary>
            Gets the EntitySet containing the source entity..
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleEntityCastNode.InternalKind">
            <summary>
            Gets the kind of this query node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken">
            <summary>
            Lexical token representing a type segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken.identifier">
            <summary>
            The Identifier of the type segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken.nextToken">
            <summary>
            The parent segment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken.#ctor(System.String,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a TypeSegmentQueryToken given the Identifier and the parent (if any)
            </summary>
            <param name="identifier">The Identifier of the type segment, including the namespace.</param>
            <param name="nextToken">The parent segment.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken.Identifier">
            <summary>
            The full name of the type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken.NextToken">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode">
            <summary>
            Node representing a unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.operand">
            <summary>
            The operand of the unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.operatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.typeReference">
            <summary>
            Cache for the TypeReference after it has been calculated for the current state of the node.
            This can be an expensive calculation so we want to avoid doing it repeatedly.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.#ctor(Microsoft.Data.OData.Query.UnaryOperatorKind,Microsoft.Data.OData.Query.SemanticAst.SingleValueNode)">
            <summary>
            Creates a UnaryOperatorNode
            </summary>
            <param name="operatorKind">the kind of operator this node represents</param>
            <param name="operand">the operand that this operator modifies</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input operand is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.OperatorKind">
            <summary>
            Gets the operator represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.Operand">
            <summary>
            Gets the operand of the unary operator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.TypeReference">
            <summary>
            Gets the type of the single value this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.UnaryOperatorNode.InternalKind">
            <summary>
            Gets the kind of this query node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.QueryNodeUtils">
            <summary>
            Helper methods for working with query nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.QueryNodeUtils.AsEntityCollectionNode(Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Checks whether a query node is a collection query node representing a collection of entities.
            </summary>
            <param name="query">The <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/> to check.</param>
            <returns>The converted <see cref="T:Microsoft.Data.OData.Query.SemanticAst.CollectionNode"/> or null if <paramref name="query"/> is not an entity collection node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.QueryNodeUtils.AsCollectionNode(Microsoft.Data.OData.Query.SemanticAst.QueryNode)">
            <summary>
            Checks whether a query node is a collection query node representing a collection.
            </summary>
            <param name="query">The <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/> to check.</param>
            <returns>The converted <see cref="T:Microsoft.Data.OData.Query.SemanticAst.CollectionNode"/> or null if <paramref name="query"/> is not a collection node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.QueryNodeUtils.GetBinaryOperatorResultType(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,Microsoft.Data.OData.Query.BinaryOperatorKind)">
            <summary>
            Compute the result type of a binary operator based on the type of its operands and the operator kind.
            </summary>
            <param name="typeReference">The type reference of the operators.</param>
            <param name="operatorKind">The kind of operator.</param>
            <returns>The result type reference of the binary operator.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpressionLexer">
            <summary>Use this class to parse an expression in the OData URI format.</summary>
            <remarks>
            Literals (non-normative "handy" reference - see spec for correct expression):
            Null            null
            Boolean         true | false
            Int32           (digit+)
            Int64           (digit+)(L|l)
            Decimal         (digit+ ['.' digit+])(M|m)
            Float           (digit+ ['.' digit+][e|E [+|-] digit+)(f|F)
            Double          (digit+ ['.' digit+][e|E [+|-] digit+)
            String          "'" .* "'"
            DateTime        datetime"'"dddd-dd-dd[T|' ']dd:mm[ss[.fffffff]]"'"
            DateTimeOffset  datetimeoffset"'"dddd-dd-dd[T|' ']dd:mm[ss[.fffffff]]-dd:mm"'"
            Time            time"'"dd:mm[ss[.fffffff]]"'"
            Binary          (binary|X)'digit*'
            GUID            guid'digit*'
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.AdditionalUnicodeCategoriesForIdentifier">
            <summary>
            For an identifier, EMD supports chars that match the regex  [\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Lm}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Cf}]
            IsLetterOrDigit covers Ll, Lu, Lt, Lo, Lm, Nd, this set covers the rest 
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.text">
            <summary>Text being parsed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.textLen">
            <summary>Length of text being parsed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.useSemicolonDelimeter">
            <summary> flag to indicate whether to delimit on a semicolon. </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.parsingFunctionParameters">
            <summary>Whether the lexer is being used to parse function parameters. If true, will allow/recognize parameter aliases and typed nulls.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.textPos">
            <summary>Position on text being parsed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.ch">
            <summary>Character being processed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.token">
            <summary>Token being processed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionLexer.ignoreWhitespace">
            <summary>Lexer ignores whitespace</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>Initializes a new <see cref="T:Microsoft.Data.OData.Query.ExpressionLexer"/>.</summary>
            <param name="expression">Expression to parse.</param>
            <param name="moveToFirstToken">If true, this constructor will call NextToken() to move to the first token.</param>
            <param name="useSemicolonDelimeter">If true, the lexer will tokenize based on semicolons as well.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Initializes a new <see cref="T:Microsoft.Data.OData.Query.ExpressionLexer"/>.</summary>
            <param name="expression">Expression to parse.</param>
            <param name="moveToFirstToken">If true, this constructor will call NextToken() to move to the first token.</param>
            <param name="useSemicolonDelimeter">If true, the lexer will tokenize based on semicolons as well.</param>
            <param name="parsingFunctionParameters">Whether the lexer is being used to parse function parameters. If true, will allow/recognize parameter aliases and typed nulls.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.TryPeekNextToken(Microsoft.Data.OData.Query.ExpressionToken@,System.Exception@)">
            <summary>
            Determines if the next token can be processed without error without advancing the token.
            </summary>
            <param name="resultToken">The next ExpressionToken. This value is undefined if error is defined.</param>
            <param name="error">Exception generated from trying to process the next token.</param>
            <returns>True if the next token can be processed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.NextToken">
            <summary>Reads the next token, skipping whitespace as necessary, advancing the Lexer.</summary>
            <returns>The next token.</returns>
            <remarks>Throws on error.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ReadDottedIdentifier(System.Boolean)">
            <summary>
            Starting from an identifier, reads a sequence of dots and 
            identifiers, and returns the text for it, with whitespace 
            stripped.
            </summary>
            <param name="acceptStar">do we allow a star in this identifier</param>
            <returns>The dotted identifier starting at the current identifier.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.PeekNextToken">
            <summary>Returns the next token without advancing the lexer.</summary>
            <returns>The next token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ExpandIdentifierAsFunction">
            <summary>
            Check whether the current identifier is a function. If so, expand the token text to the function signature
            </summary>
            <returns>True if the current identifier is a function call</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ValidateToken(Microsoft.Data.OData.Query.ExpressionTokenKind)">
            <summary>Validates the current token is of the specified kind.</summary>
            <param name="t">Expected token kind.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ParseError(System.String)">
            <summary>Creates an exception for a parse error.</summary>
            <param name="message">Message text.</param>
            <returns>A new Exception.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.NextTokenImplementation(System.Exception@)">
            <summary>Reads the next token, skipping whitespace as necessary.</summary> 
            <param name="error">Error that occurred while trying to process the next token.</param>
            <returns>The next token, which may be 'bad' if an error occurs.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.MoveNextWhenMatch(Microsoft.Data.OData.Query.ExpressionTokenKind)">
            <summary>
            Expand the token selection if the next token matches the input token
            </summary>
            <param name="id">the list of token id to match</param>
            <returns>true if matched</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.HandleTypePrefixedLiterals">
            <summary>Handles lexemes that are formed by an identifier followed by a quoted string.</summary>
            <remarks>This method modified the token field as necessary.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.NextChar">
            <summary>Advanced to the next character.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ParseFromDigit">
            <summary>Parses a token that starts with a digit.</summary>
            <returns>The kind of token recognized.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ParseWhitespace">
            <summary>
            Parses white spaces
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ParseBracketedExpression(System.Char,System.Char)">
            <summary>
            Parses a complex value
            </summary>
            <param name="startingCharacter">the starting delimiter</param>
            <param name="endingCharacter">the ending delimiter.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.AdvanceToNextOccuranceOf(System.Char)">
            <summary>
            Advance the pointer to the next occurance of the given value, swallowing all characters in between.
            </summary>
            <param name="endingValue">the ending delimiter.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ParseIdentifier">
            <summary>Parses an identifier by advancing the current character.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.SetTextPos(System.Int32)">
            <summary>Sets the text position.</summary>
            <param name="pos">New text position.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.ValidateDigit">
            <summary>Validates the current character is a digit.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionLexer.CurrentToken">
            <summary>Token being processed.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionLexer.ExpressionText">
            <summary>Text being parsed.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionLexer.Position">
            <summary>Position on text being parsed.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionLexer.IsValidStartingCharForIdentifier">
            <summary>
            Is the current char a valid starting char for an identifier.
            Valid starting chars for identifier include all that are supported by EDM ([\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Lm}\p{Nl}]) and '_'.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionLexer.IsValidNonStartingCharForIdentifier">
            <summary>
            Is the current char a valid non-starting char for an identifier.
            Valid non-starting chars for identifier include all that are supported 
            by EDM  [\p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Lm}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\p{Cf}]. 
            This list includes '_', which is ConnectorPunctuation (Pc)
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpressionLexer.UnicodeCategoryEqualityComparer">
            <summary>This class implements IEqualityComparer for UnicodeCategory</summary>
            <remarks>
            Using this class rather than EqualityComparer&lt;T&gt;.Default 
            saves from JIT'ing it in each AppDomain.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.UnicodeCategoryEqualityComparer.Equals(System.Globalization.UnicodeCategory,System.Globalization.UnicodeCategory)">
            <summary>
            Checks whether two unicode categories are equal
            </summary>
            <param name="x">first unicode category</param>
            <param name="y">second unicode category</param>
            <returns>true if they are equal, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionLexer.UnicodeCategoryEqualityComparer.GetHashCode(System.Globalization.UnicodeCategory)">
            <summary>
            Gets a hash code for the specified unicode category
            </summary>
            <param name="obj">the input value</param>
            <returns>The hash code for the given input unicode category, the underlying int</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpressionToken">
            <summary>Use this class to represent a lexical expression token.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionToken.GreaterThan">
            <summary>Token representing gt keyword</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionToken.EqualsTo">
            <summary>Token representing eq keyword</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionToken.LessThan">
            <summary>Token representing lt keyword</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionToken.Kind">
            <summary>InternalKind of token.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionToken.Text">
            <summary>Token text.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionToken.Position">
            <summary>Position of token.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionToken.ToString">
            <summary>Provides a string representation of this token.</summary>
            <returns>String representation of this token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionToken.GetIdentifier">
            <summary>Gets the current identifier text.</summary>
            <returns>The current identifier text.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ExpressionToken.IdentifierIs(System.String)">
            <summary>Checks that this token has the specified identifier.</summary>
            <param name="id">Identifier to check.</param>
            <returns>true if this is an identifier with the specified text.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionToken.IsComparisonOperator">
            <summary>Checks whether this token is a comparison operator.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionToken.IsEqualityOperator">
            <summary>Checks whether this token is an equality operator.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionToken.IsKeyValueToken">
            <summary>Checks whether this token is a valid token for a key value.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ExpressionToken.IsFunctionParameterToken">
            <summary>Checks whether this token is a valid token for a function parameter.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpressionTokenKind">
            <summary>Enumeration values for token kinds.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Unknown">
            <summary>Unknown.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.End">
            <summary>End of text.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Equal">
            <summary>'=' - equality character.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Identifier">
            <summary>Identifier.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.NullLiteral">
            <summary>NullLiteral.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.BooleanLiteral">
            <summary>BooleanLiteral.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.StringLiteral">
            <summary>StringLiteral.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.IntegerLiteral">
            <summary>IntegerLiteral.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Int64Literal">
            <summary>Int64 literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.SingleLiteral">
            <summary>Single literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.DateTimeLiteral">
            <summary>DateTime literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.DateTimeOffsetLiteral">
            <summary>DateTimeOffset literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.TimeLiteral">
            <summary>Time literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.DecimalLiteral">
            <summary>Decimal literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.DoubleLiteral">
            <summary>Double literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.GuidLiteral">
            <summary>GUID literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.BinaryLiteral">
            <summary>Binary literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.GeographyLiteral">
            <summary>Geography literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.GeometryLiteral">
            <summary>Geometry literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Exclamation">
            <summary>Exclamation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.OpenParen">
            <summary>OpenParen.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.CloseParen">
            <summary>CloseParen.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Comma">
            <summary>Comma.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Colon">
            <summary>Colon.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Minus">
            <summary>Minus.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Slash">
            <summary>Slash.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Question">
            <summary>Question.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Dot">
            <summary>Dot.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.Star">
            <summary>Star.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.SemiColon">
            <summary>SemiColon</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.ParameterAlias">
            <summary>ParameterAlias</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionTokenKind.BracketedExpression">
            <summary>A Brace BracketedExpression is an expression within brackets or braces. It contains a JSON object or array.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken">
            <summary>
            Lexical token representing a function call.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.name">
            <summary>
            The name of the function to call.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.arguments">
            <summary>
            The arguments for the function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.source">
            <summary>
            the source token for this function call
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.QueryToken})">
            <summary>
            Create a new FunctionCallToken using the given function name and argument values.
            </summary>
            <param name="name">The name of the function to call.</param>
            <param name="argumentValues">The argument values for the function.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken},Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a new FunctionCallToken using the given function name and parameter tokens.
            </summary>
            <param name="name">The name of the function to call.</param>
            <param name="arguments">The arguments for the function.</param>
            <param name="source">The syntactically bound parent of this function</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.Name">
            <summary>
            The name of the function to call.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.Arguments">
            <summary>
            The arguments for the function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken.Source">
            <summary>
            The syntactically bound parent of this function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode">
            <summary>
            Node representing a key lookup on a collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.source">
            <summary>
            The collection that this key is referring to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.entitySet">
            <summary>
            The EntitySet containing the collection this key referrs to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.entityTypeReference">
            <summary>
            The resouce type of the single value the key referrs to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.keyPropertyValues">
            <summary>
            List of the properties and their values that we use to look up our return value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.EntityCollectionNode,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.KeyPropertyValue})">
            <summary>
            Constructs a KeyLookupNode.
            </summary>
            <param name="source">The collection that this key is referring to.</param>
            <param name="keyPropertyValues">List of the properties and their values that we use to look up our return value.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input source is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.Source">
            <summary>
            Gets the collection that this key is referring to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.KeyPropertyValues">
            <summary>
            Gets the list of the properties and their values that we use to look up our return value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.TypeReference">
            <summary>
            Gets the resouce type of the single value that the key referrs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.EntityTypeReference">
            <summary>
            Gets the resouce type of the single value that the key referrs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.EntitySet">
            <summary>
            Gets the EntitySet that contains the collection this key referrs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.KeyLookupNode.InternalKind">
            <summary>
            Gets the kind for this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.KeyPropertyValue">
            <summary>
            Class representing a single key property value in a key lookup.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.KeyPropertyValue.KeyProperty">
            <summary>
            Gets or sets the key property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.KeyPropertyValue.KeyValue">
            <summary>
            Gets or sets the value of the key property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.NamedValue">
            <summary>
            Class representing a single named value (name and value pair).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.NamedValue.name">
            <summary>
            The name of the value. Or null if the name was not used for this value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.NamedValue.value">
            <summary>
            The value - a literal.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.NamedValue.#ctor(System.String,Microsoft.Data.OData.Query.SyntacticAst.LiteralToken)">
            <summary>
            Create a new NamedValue lookup given name and value.
            </summary>
            <param name="name">The name of the value. Or null if the name was not used for this value.</param>
            <param name="value">The value - a literal.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.NamedValue.Name">
            <summary>
            The name of the value. Or null if the name was not used for this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.NamedValue.Value">
            <summary>
            The value - a literal.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken">
            <summary>
            Lexical token representing a literal value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken.originalText">
            <summary>
            The original text value of the literal.
            </summary>
            <remarks>This is used only internally to simulate correct compat behavior with WCF DS.
            We should only use this during type promotion when applying metadata.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken.value">
            <summary>
            The value of the literal. This is a parsed primitive value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken.#ctor(System.Object)">
            <summary>
            Create a new LiteralToken given value and originalText
            </summary>
            <param name="value">The value of the literal. This is a parsed primitive value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken.#ctor(System.Object,System.String)">
            <summary>
            Create a new LiteralToken given value and originalText
            </summary>
            <param name="value">The value of the literal. This is a parsed primitive value.</param>
            <param name="originalText">The original text value of the literal.</param>
            <remarks>This is used only internally to simulate correct compat behavior with WCF DS.
            We should only use this during type promotion when applying metadata.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken.Value">
            <summary>
            The value of the literal. This is a parsed primitive value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.LiteralToken.OriginalText">
            <summary>
            The original text value of the literal.
            </summary>
            <remarks>This is used only internally to simulate correct compat behavior with WCF DS.
            We should only use this during type promotion when applying metadata.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Query.MetadataBinder">
            <summary>
            Binder which applies metadata to a lexical QueryToken tree and produces a bound semantic QueryNode tree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.MetadataBinder.bindingState">
            <summary>
            Encapsulates the state of the metadate binding.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.#ctor(Microsoft.Data.OData.Query.BindingState)">
            <summary>
            Constructs a MetadataBinder with the given <paramref name="initialState"/>.
            This constructor gets used if you are not calling the top level entry point ParseQuery.
            This is an at-your-own-risk constructor, since you must provide valid initial state.
            </summary>
            <param name="initialState">The initialState to use for binding.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.ProcessSkip(System.Nullable{System.Int64})">
            <summary>
            Processes the skip operator (if any) and returns the combined query.
            </summary>
            <param name="skip">The skip amount or null if none was specified.</param>
            <returns> the skip clause </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.ProcessTop(System.Nullable{System.Int64})">
            <summary>
            Processes the top operator (if any) and returns the combined query.
            </summary>
            <param name="top">The top amount or null if none was specified.</param>
            <returns> the top clause </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.ProcessQueryOptions(Microsoft.Data.OData.Query.BindingState,Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor)">
            <summary>
            Process the remaining query options (represent the set of custom query options after
            service operation parameters and system query options have been removed).
            </summary>
            <param name="bindingState">the current state of the binding algorithm.</param>
            <param name="bindMethod">pointer to a binder method.</param>
            <returns>The list of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/> instances after binding.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.Bind(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Visits a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/> in the lexical tree and binds it to metadata producing a semantic <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>.
            </summary>
            <param name="token">The query token on the input.</param>
            <returns>The bound query node output.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindFunctionParameter(Microsoft.Data.OData.Query.SyntacticAst.FunctionParameterToken)">
            <summary>
            Bind a function parameter token
            </summary>
            <param name="token">The token to bind.</param>
            <returns>A semantically bound FunctionCallNode</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindInnerPathSegment(Microsoft.Data.OData.Query.SyntacticAst.InnerPathToken)">
            <summary>
            Binds a InnerPathToken.
            </summary>
            <param name="token">Token to bind.</param>
            <returns>Either a SingleNavigationNode, CollectionNavigationNode, SinglePropertyAccessNode (complex), 
            or CollectionPropertyAccessNode (primitive or complex) that is the metadata-bound version of the given token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindRangeVariable(Microsoft.Data.OData.Query.SyntacticAst.RangeVariableToken)">
            <summary>
            Binds a parameter token.
            </summary>
            <param name="rangeVariableToken">The parameter token to bind.</param>
            <returns>The bound query node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindLiteral(Microsoft.Data.OData.Query.SyntacticAst.LiteralToken)">
            <summary>
            Binds a literal token.
            </summary>
            <param name="literalToken">The literal token to bind.</param>
            <returns>The bound literal token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindBinaryOperator(Microsoft.Data.OData.Query.SyntacticAst.BinaryOperatorToken)">
            <summary>
            Binds a binary operator token.
            </summary>
            <param name="binaryOperatorToken">The binary operator token to bind.</param>
            <returns>The bound binary operator token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindUnaryOperator(Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken)">
            <summary>
            Binds a unary operator token.
            </summary>
            <param name="unaryOperatorToken">The unary operator token to bind.</param>
            <returns>The bound unary operator token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindCast(Microsoft.Data.OData.Query.SyntacticAst.DottedIdentifierToken)">
            <summary>
            Binds a type startPath token.
            </summary>
            <param name="dottedIdentifierToken">The type startPath token to bind.</param>
            <returns>The bound type startPath token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindAnyAll(Microsoft.Data.OData.Query.SyntacticAst.LambdaToken)">
            <summary>
            Binds a LambdaToken.
            </summary>
            <param name="lambdaToken">The LambdaToken to bind.</param>
            <returns>A bound Any or All node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindEndPath(Microsoft.Data.OData.Query.SyntacticAst.EndPathToken)">
            <summary>
            Binds a property access token.
            </summary>
            <param name="endPathToken">The property access token to bind.</param>
            <returns>The bound property access token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.MetadataBinder.BindFunctionCall(Microsoft.Data.OData.Query.SyntacticAst.FunctionCallToken)">
            <summary>
            Binds a function call token.
            </summary>
            <param name="functionCallToken">The function call token to bind.</param>
            <returns>The bound function call token.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.MetadataBinder.BindingState">
            <summary>
            Encapsulates the state of the metadate binding.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.MetadataBinder.QueryTokenVisitor">
            <summary>
            Delegate for a function that visits a QueryToken and translates it into a bound QueryNode.
            TODO Eventually replace this with a real interface for a visitor.
            </summary>
            <param name="token">QueryToken to visit.</param>
            <returns>Metadata bound QueryNode.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.OrderByDirection">
            <summary>
            Enumeration of order by directions.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OrderByDirection.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.OrderByDirection.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.OrderByToken">
            <summary>
            Lexical token representing an order by operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.OrderByToken.direction">
            <summary>
            The direction of the ordering.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.OrderByToken.expression">
            <summary>
            The expression according to which to order the results.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.OrderByToken.#ctor(Microsoft.Data.OData.Query.SyntacticAst.QueryToken,Microsoft.Data.OData.Query.OrderByDirection)">
            <summary>
            Create a new OrderByToken given the expression and direction
            </summary>
            <param name="expression">The expression according to which to order the results.</param>
            <param name="direction">The direction of the ordering.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.OrderByToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.OrderByToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.OrderByToken.Direction">
            <summary>
            The direction of the ordering.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.OrderByToken.Expression">
            <summary>
            The expression according to which to order the results.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.EndPathToken">
            <summary>
            Lexical token representing the last segment in a path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.EndPathToken.identifier">
            <summary>
            The Identifier of the property to access.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.EndPathToken.nextToken">
            <summary>
            The NextToken token to access the property on.
            If this is null, then the property access has no NextToken. That usually means to access the property
            on the implicit parameter for the expression, the result on which the expression is being applied.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.EndPathToken.#ctor(System.String,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a EndPathToken given the Identifier and the NextToken (if any)
            </summary>
            <param name="identifier">The Identifier of the property to access.</param>
            <param name="nextToken">The NextToken token to access the property on. </param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.EndPathToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.EndPathToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.EndPathToken.NextToken">
            <summary>
            The NextToken token to access the property on.
            If this is null, then the property access has no NextToken. That usually means to access the property
            on the implicit parameter for the expression, the result on which the expression is being applied.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.EndPathToken.Identifier">
            <summary>
            The Identifier of the property to access.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUri">
            <summary>
            The root node of a query. Holds the query itself plus additional metadata about the query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUri.path">
            <summary>
            The top level path for this Uri.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUri.customQueryOptions">
            <summary>
            Any custom query options for this Uri.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUri.selectAndExpand">
            <summary>
            Any select or expand options in this uri. Can be null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUri.filter">
            <summary>
            Any filter option in this uri. Can be null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUri.orderBy">
            <summary>
            Any order by option in this uri. Can be null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUri.skip">
            <summary>
            Any skip option in this uri. Can be null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUri.top">
            <summary>
            Any top option in this uri. Can be null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ODataUri.inlineCount">
            <summary>
            Any inline count option in this uri. Can be null.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUri.#ctor(Microsoft.Data.OData.Query.SemanticAst.ODataPath,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SemanticAst.QueryNode},Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause,Microsoft.Data.OData.Query.SemanticAst.FilterClause,Microsoft.Data.OData.Query.SemanticAst.OrderByClause,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{Microsoft.Data.OData.Query.InlineCountKind})">
            <summary>
            Create a new ODataUri. This contains the semantic meaning of the 
            entire uri.
            </summary>
            <param name="path">The top level path for this uri.</param>
            <param name="customQueryOptions">Any custom query options for this uri. Can be null.</param>
            <param name="selectAndExpand">Any $select or $expand option for this uri. Can be null.</param>
            <param name="filter">Any $filter option for this uri. Can be null.</param>
            <param name="orderby">Any $orderby option for this uri. Can be null</param>
            <param name="skip">Any $skip option for this uri. Can be null.</param>
            <param name="top">Any $top option for this uri. Can be null.</param>
            <param name="inlineCount">Any $inlinecount option for this uri. Can be null.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUri.Path">
            <summary>
            Gets the top level path for this uri.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUri.CustomQueryOptions">
            <summary>
            Gets any custom query options for this uri. 
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUri.SelectAndExpand">
            <summary>
            Gets any $select or $expand option for this uri.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUri.Filter">
            <summary>
            Gets any $filter option for this uri.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUri.OrderBy">
            <summary>
            Gets any $orderby option for this uri.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUri.Skip">
            <summary>
            Gets any $skip option for this uri.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUri.Top">
            <summary>
            Gets any $top option for this uri.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUri.InlineCount">
            <summary>
            Get any $inlinecount option for this uri.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticTree">
            <summary>
            Lexical token representing the entire query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.DefaultMaxDepth">
            <summary>
            The default setting for the max depth.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.path">
            <summary>
            The path for the query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.filter">
            <summary>
            The filter for the query. If the property is null, there's no filter for this query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.orderByTokens">
            <summary>
            Enumeration of order by tokens. The order by operations must be applied in the order in which
            they are listed in this enumeration.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.select">
            <summary>
            The select for the query. If the property is null, there's no select for this query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.expand">
            <summary>
            The expand for the query. If the property is null, there's no expand for this query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.skip">
            <summary>
            The number of entities to skip in the result.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.top">
            <summary>
            The (maximum) number of entities to include in the result.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.format">
            <summary>
            The format for the query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.inlineCount">
            <summary>
            Type of inlinecount in the response of the query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticTree.queryOptions">
            <summary>
            The query options for the query; these include non-system query options starting with '$', 
            service operation arguments and custom query options.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticTree.#ctor(System.Collections.Generic.ICollection{System.String},Microsoft.Data.OData.Query.SyntacticAst.QueryToken,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.OrderByToken},Microsoft.Data.OData.Query.SyntacticAst.SelectToken,Microsoft.Data.OData.Query.SyntacticAst.ExpandToken,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Microsoft.Data.OData.Query.InlineCountKind},System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken})">
            <summary>
            Create a new SyntacticTree given its parts as arguments.
            </summary>
            <param name="path">The path for the query. Must not be null.</param>
            <param name="filter">The filter for the query. If the property is null, there's no filter for this query.</param>
            <param name="orderByTokens">Enumeration of order by tokens.</param>
            <param name="select">The select for the query. If the property is null, there's no select for this query.</param>
            <param name="expand">The expansions for the query. If the property is null, there are no expandsion for this query.</param>
            <param name="skip">The number of entities to skip in the result.</param>
            <param name="top">The (maximum) number of entities to include in the result.</param>
            <param name="inlineCount">Type of inlinecount in the response of the query.</param>
            <param name="format">The format for the query.</param>
            <param name="queryOptions">The query options for the query.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticTree.ParseUri(System.Uri,System.Uri)">
            <summary>
            Parses the <paramref name="queryUri"/> and returns a new instance of <see cref="T:Microsoft.Data.OData.Query.SyntacticTree"/>
            describing the query specified by the uri.
            </summary>
            <param name="queryUri">The absolute URI which holds the query to parse. This must be a path relative to the <paramref name="serviceBaseUri"/>.</param>
            <param name="serviceBaseUri">The base URI of the service.</param>
            <returns>A new instance of <see cref="T:Microsoft.Data.OData.Query.SyntacticTree"/> which represents the query specified in the <paramref name="queryUri"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticTree.ParseUri(System.Uri,System.Uri,System.Int32)">
            <summary>
            Parses the <paramref name="queryUri"/> and returns a new instance of <see cref="T:Microsoft.Data.OData.Query.SyntacticTree"/>
            describing the query specified by the uri.
            </summary>
            <param name="queryUri">The absolute URI which holds the query to parse. This must be a path relative to the <paramref name="serviceBaseUri"/>.</param>
            <param name="serviceBaseUri">The base URI of the service.</param>
            <param name="maxDepth">The maximum depth of any single query part. Security setting to guard against DoS attacks causing stack overflows and such.</param>
            <returns>A new instance of <see cref="T:Microsoft.Data.OData.Query.SyntacticTree"/> which represents the query specified in the <paramref name="queryUri"/>.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.Path">
            <summary>
            The path for the query.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.Filter">
            <summary>
            The filter for the query. If the property is null, there's no filter for this query.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.OrderByTokens">
            <summary>
            Enumeration of order by tokens. The order by operations must be applied in the order in which
            they are listed in this enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.Select">
            <summary>
            The select for the query. If the property is null, there's no select for this query.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.Expand">
            <summary>
            The expand for the query. If the property is null, there's no expand for this query.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.Skip">
            <summary>
            The number of entities to skip in the result.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.Top">
            <summary>
            The (maximum) number of entities to include in the result.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.Format">
            <summary>
            The format for the query.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.InlineCount">
            <summary>
            Type of inlinecount in the response of the query.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticTree.QueryOptions">
            <summary>
            The query options for the query; these include non-system query options starting with '$', 
            service operation arguments and custom query options.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.QueryNodeKind">
            <summary>
            Public enumeration of kinds of query nodes. A subset of InternalQueryNodeKind
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.None">
            <summary>
            No query node kind...  the default value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.Constant">
            <summary>
            A constant value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.Convert">
            <summary>
            A node that represents conversion from one type to another.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.NonentityRangeVariableReference">
            <summary>
            Non-entity node referencing a range variable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.BinaryOperator">
            <summary>
            Node used to represent a binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.UnaryOperator">
            <summary>
            Node used to represent a unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.SingleValuePropertyAccess">
            <summary>
            Node describing access to a property which is a single (non-collection) non-entity value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.CollectionPropertyAccess">
            <summary>
            Node describing access to a property which is a non-entity collection value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.SingleValueFunctionCall">
            <summary>
            Function call returning a single value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.Any">
            <summary>
            Any query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.CollectionNavigationNode">
            <summary>
            Node for a navigation property with target multiplicity Many.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.SingleNavigationNode">
            <summary>
            Node for a navigation property with target multiplicity ZeroOrOne or One.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.SingleValueOpenPropertyAccess">
            <summary>
            Single-value property access that refers to an open property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.SingleEntityCast">
            <summary>
            Cast on a single thing.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.All">
            <summary>
            All query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.EntityCollectionCast">
            <summary>
            Cast on a collection of entities.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.EntityRangeVariableReference">
            <summary>
            Placeholder node referencing a rangeVariable on the binding stack that references an entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.SingleEntityFunctionCall">
            <summary>
            Node the represents a function call that returns a single entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.CollectionFunctionCall">
            <summary>
            Node that represents a function call that returns a collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.EntityCollectionFunctionCall">
            <summary>
            Node that represents a funciton call that returns a collection of entities.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryNodeKind.NamedFunctionParameter">
            <summary>
            Node that represents a named function parameter. 
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.InternalQueryNodeKind">
            <summary>
            Internal enumeration of kinds of query nodes. A superset of QueryNodeKind
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.None">
            <summary>
            none... default value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.Constant">
            <summary>
            The constant value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.Convert">
            <summary>
            A node that signifies the promotion of a primitive type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.NonentityRangeVariableReference">
            <summary>
            Non-entity node referencing a range variable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.BinaryOperator">
            <summary>
            Parameter node used to represent a binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.UnaryOperator">
            <summary>
            Parameter node used to represent a unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.SingleValuePropertyAccess">
            <summary>
            Node describing access to a property which is a single (non-collection) non-entity value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.CollectionPropertyAccess">
            <summary>
            Node describing access to a property which is a non-entity collection value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.SingleValueFunctionCall">
            <summary>
            Function call returning a single value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.Any">
            <summary>
            Any query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.CollectionNavigationNode">
            <summary>
            Node for a navigation property with target multiplicity Many.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.SingleNavigationNode">
            <summary>
            Node for a navigation property with target multiplicity ZeroOrOne or One.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.SingleValueOpenPropertyAccess">
            <summary>
            Single-value property access that refers to an open property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.SingleEntityCast">
            <summary>
            Cast on a single thing.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.All">
            <summary>
            All query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.EntityCollectionCast">
            <summary>
            Cast on a collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.EntityRangeVariableReference">
            <summary>
            Entity  node referencing a range variable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.SingleEntityFunctionCall">
            <summary>
            SingleEntityFunctionCall node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.CollectionFunctionCall">
            <summary>
            Node that represents a function call that returns a collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.EntityCollectionFunctionCall">
            <summary>
            Node that represents a funciton call that returns a collection of entities.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.NamedFunctionParameter">
            <summary>
            Node that represents a named function parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.EntitySet">
            <summary>
            The entity set node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.InternalQueryNodeKind.KeyLookup">
            <summary>
            The key lookup on a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.QueryOptionUtils">
            <summary>
            Helper methods for working with query options.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.QueryOptionUtils.GetQueryOptionValueAndRemove(System.Collections.Generic.List{Microsoft.Data.OData.Query.SyntacticAst.CustomQueryOptionToken},System.String)">
            <summary>
            Returns a query option value by its name and removes the query option from the <paramref name="queryOptions"/> collection.
            </summary>
            <param name="queryOptions">The collection of query options.</param>
            <param name="queryOptionName">The name of the query option to get.</param>
            <returns>The value of the query option or null if no such query option exists.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode">
            <summary>
            Node representing an entity set.
            TODO This should be deleted but it is used in many, many tests.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.entitySet">
            <summary>
            The entity set this node represents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.entityType">
            <summary>
            The resouce type of a single entity in the entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.collectionTypeReference">
            <summary>
            the type of the collection returned by this function
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.#ctor(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode"/>
            </summary>
            <param name="entitySet">The entity set this node represents</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input entitySet is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.ItemType">
            <summary>
            Gets the resouce type of a single entity in the entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.CollectionType">
            <summary>
            The type of the collection represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.EntityItemType">
            <summary>
            Gets the resouce type of a single entity in the entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.EntitySet">
            <summary>
            Gets the entity set this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.EntitySetNode.InternalKind">
            <summary>
            Gets the kind for this node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UriPrimitiveTypeParser">
            <summary>
            Parser which consumes the URI format of primitive types and converts it to primitive types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.WhitespaceChars">
            <summary>Whitespace characters to trim around literals.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.IsCharHexDigit(System.Char)">
            <summary>Determines whether the specified character is a valid hexadecimal digit.</summary>
            <param name="c">Character to check.</param>
            <returns>true if <paramref name="c"/> is a valid hex digit; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToPrimitive(System.String,Microsoft.Data.Edm.IEdmTypeReference,System.Object@)">
            <summary>Converts a string to a primitive value.</summary>
            <param name="text">String text to convert.</param>
            <param name="targetType">Type to convert string to.</param>
            <param name="targetValue">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
            <remarks>Copy of the WebConvert.TryKeyStringToPrimitive</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToNonNegativeInteger(System.String,System.Int32@)">
            <summary>
            Try to parse a string value into a non-negative integer.
            </summary>
            <param name="text">The string value to parse.</param>
            <param name="nonNegativeInteger">The non-negative integer value parsed from the <paramref name="text"/>.</param>
            <returns>True if <paramref name="text"/> could successfully be parsed into a non-negative integer; otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryRemoveSuffix(System.String,System.String@)">
            <summary>
            Check and strip the input <paramref name="text"/> for literal <paramref name="suffix"/>
            </summary>
            <param name="suffix">The suffix value</param>
            <param name="text">The string to check</param>
            <returns>A string that has been striped of the suffix</returns>
            <remarks>Copy of WebConvert.TryRemoveLiteralSuffix.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryRemovePrefix(System.String,System.String@)">
            <summary>
            Tries to remove a literal <paramref name="prefix"/> from the specified <paramref name="text"/>.
            </summary>
            <param name="prefix">Prefix to remove; one-letter prefixes are case-sensitive, others insensitive.</param>
            <param name="text">Text to attempt to remove prefix from.</param>
            <returns>true if the prefix was found and removed; false otherwise.</returns>
            <remarks>Copy of WebConvert.TryRemoveLiteralPrefix.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryRemoveQuotes(System.String@)">
            <summary>
            Removes quotes from the single-quotes text.
            </summary>
            <param name="text">Text to remove quotes from.</param>
            <returns>Whether quotes were successfully removed.</returns>
            <remarks>Copy of WebConvert.TryRemoveQuotes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToByteArray(System.String,System.Byte[]@)">
            <summary>
            Converts a string to a byte[] value.
            </summary>
            <param name="text">String text to convert.</param>
            <param name="targetValue">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
            <remarks>Copy of WebConvert.TryKeyStringToByteArray.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToGuid(System.String,System.Guid@)">
            <summary>
            Converts a string to a GUID value.
            </summary>
            <param name="text">String text to convert.</param>
            <param name="targetValue">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
            <remarks>Copy of WebConvert.TryKeyStringToGuid.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToDateTime(System.String,System.DateTime@)">
            <summary>
            Converts a string to a DateTime value.
            </summary>
            <param name="text">String text to convert.</param>
            <param name="targetValue">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
            <remarks>Copy of WebConvert.TryKeyStringToDateTime.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToDateTimeOffset(System.String,System.DateTimeOffset@)">
            <summary>
            Converts a string to a DateTimeOffset value.
            </summary>
            <param name="text">String text to convert.</param>
            <param name="targetValue">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
            <remarks>Copy of WebConvert.TryKeyStringToDateTimeOffset.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToTime(System.String,System.TimeSpan@)">
            <summary>
            Converts a string to a Time value.
            </summary>
            <param name="text">String text to convert.</param>
            <param name="targetValue">After invocation, converted value.</param>
            <returns>true if the value was converted; false otherwise.</returns>
            <remarks>Copy of WebConvert.TryKeyStringToTime.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToGeography(System.String,System.Spatial.Geography@)">
            <summary>
            Try to parse the given text to a Geography object.
            </summary>
            <param name="text">Text to parse.</param>
            <param name="targetValue">Geography to return.</param>
            <returns>True if succeeds, false if not.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryUriStringToGeometry(System.String,System.Spatial.Geometry@)">
            <summary>
            Try to parse the given text to a Geometry object.
            </summary>
            <param name="text">Text to parse.</param>
            <param name="targetValue">Geometry to return.</param>
            <returns>True if succeeds, false if not.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryRemoveLiteralSuffix(System.String,System.String@)">
            <summary>
            Check and strip the input <paramref name="text"/> for literal <paramref name="suffix"/>
            </summary>
            <param name="suffix">The suffix value</param>
            <param name="text">The string to check</param>
            <returns>A string that has been striped of the suffix</returns>
            <remarks>Copy of WebConvert.TryRemoveLiteralSuffix.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.TryRemoveLiteralPrefix(System.String,System.String@)">
            <summary>
            Tries to remove a literal <paramref name="prefix"/> from the specified <paramref name="text"/>.
            </summary>
            <param name="prefix">Prefix to remove; one-letter prefixes are case-sensitive, others insensitive.</param>
            <param name="text">Text to attempt to remove prefix from.</param>
            <returns>true if the prefix was found and removed; false otherwise.</returns>
            <remarks>Copy of WebConvert.TryRemoveLiteralPrefix.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.IsUriValueQuoted(System.String)">
            <summary>
            Checks whether the specified text is a correctly formatted quoted value.
            </summary>
            <param name='text'>Text to check.</param>
            <returns>true if the text is correctly formatted, false otherwise.</returns>
            <remarks>Copy of WebConvert.IsKeyValueQuoted.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.RemoveQuotes(System.String)">
            <summary>
            Removes quotes from the single-quotes text.
            </summary>
            <param name="text">Text to remove quotes from.</param>
            <returns>The specified <paramref name="text"/> with single quotes removed.</returns>
            <remarks>Copy of WebConvert.RemoveQuotes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPrimitiveTypeParser.HexCharToNibble(System.Char)">
            <summary>
            Returns the 4 bits that correspond to the specified character.
            </summary>
            <param name="c">Character in the 0-F range to be converted.</param>
            <returns>The 4 bits that correspond to the specified character.</returns>
            <exception cref="T:System.FormatException">Thrown when 'c' is not in the '0'-'9','a'-'f' range.</exception>
            <remarks>This is a copy of WebConvert.HexCharToNibble.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Query.QueryTokenKind">
            <summary>
            Enumeration of kinds of query tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.BinaryOperator">
            <summary>
            The binary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.UnaryOperator">
            <summary>
            The unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.Literal">
            <summary>
            The literal value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.FunctionCall">
            <summary>
            The function call.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.EndPath">
            <summary>
            The property access.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.OrderBy">
            <summary>
            The order by operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.CustomQueryOption">
            <summary>
            A query option.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.Select">
            <summary>
            The Select query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.Star">
            <summary>
            The *.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.Expand">
            <summary>
            The Expand query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.TypeSegment">
            <summary>
            Type segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.Any">
            <summary>
            Any query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.InnerPath">
            <summary>
            Non root segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.DottedIdentifier">
            <summary>
            type segment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.RangeVariable">
            <summary>
            Parameter token.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.All">
            <summary>
            All query.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.ExpandTerm">
            <summary>
            ExpandTerm Token
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.FunctionParameter">
            <summary>
            FunctionParameterToken
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.FunctionParameterAlias">
            <summary>
            FunctionParameterAlias
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.QueryTokenKind.RawFunctionParameterValue">
            <summary>
            RawFunctionParameterValue
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken">
            <summary>
            Lexical token representing a unary operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken.operatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken.operand">
            <summary>
            The operand.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken.#ctor(Microsoft.Data.OData.Query.UnaryOperatorKind,Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Create a new UnaryOperatorToken given the operator and operand
            </summary>
            <param name="operatorKind">The operator represented by this node.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken.Accept``1(Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.ISyntacticTreeVisitor`1"/> to walk a tree of <see cref="T:Microsoft.Data.OData.Query.SyntacticAst.QueryToken"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken.Kind">
            <summary>
            The kind of the query token.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken.OperatorKind">
            <summary>
            The operator represented by this node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken.Operand">
            <summary>
            The operand.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UnaryOperatorKind">
            <summary>
            Enumeration of binary operators.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UnaryOperatorKind.Negate">
            <summary>
            The unary - operator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UnaryOperatorKind.Not">
            <summary>
            The not operator.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UriQueryConstants">
            <summary>
            Constant values related to the URI query syntax.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.MetadataSegment">
            <summary>A segment name in a URI that indicates metadata is being requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.ValueSegment">
            <summary>A segment name in a URI that indicates a plain primitive value is being requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.BatchSegment">
            <summary>A segment name in a URI that indicates batch is being requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.LinkSegment">
            <summary>A segment name in a URI that indicates that this is an entity reference link operation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.CountSegment">
            <summary>A segment name in a URI that indicates that this is a count operation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.FilterQueryOption">
            <summary>A filter query option name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.OrderByQueryOption">
            <summary>An order by query option name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.SelectQueryOption">
            <summary>A select query option name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.ExpandQueryOption">
            <summary>An expand query option name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.SkipQueryOption">
            <summary>A skip query option name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.Star">
            <summary>A valid value to denote all-properties access.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.TopQueryOption">
            <summary>A top query option name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.InlineCountQueryOption">
            <summary>A inline-count query option name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryConstants.FormatQueryOption">
            <summary>A format query option name.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UriQueryExpressionParser">
            <summary>
            Parser which consumes the query expression ($filter, $orderby) and produces the lexical object model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryExpressionParser.maxDepth">
            <summary>
            The maximum number of recursion nesting allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryExpressionParser.parameters">
            <summary>
            Set of parsed parameters
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryExpressionParser.recursionDepth">
            <summary>
            The current recursion depth.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriQueryExpressionParser.lexer">
            <summary>
            The lexer being used for the parsing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="maxDepth">The maximum depth of each part of the query - a recursion limit.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.TryParseLiteral(Microsoft.Data.OData.Query.ExpressionLexer)">
            <summary>
            Parses a literal.
            </summary>
            <param name="lexer">The lexer to use.</param>
            <returns>The literal query token or null if something else was found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseFilter(System.String)">
            <summary>
            Parses the $filter expression.
            </summary>
            <param name="filter">The $filter expression string to parse.</param>
            <returns>The lexical token representing the filter.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseOrderBy(System.String)">
            <summary>
            Parses the $orderby expression.
            </summary>
            <param name="orderBy">The $orderby expression string to parse.</param>
            <returns>The enumeraion of lexical tokens representing order by tokens.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.CreateLexerForFilterOrOrderByExpression(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.Query.ExpressionLexer"/> for the given filter or orderby expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The lexer for the expression, which will have already moved to the first token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseError(System.String)">
            <summary>Creates an exception for a parse error.</summary>
            <param name="message">Message text.</param>
            <returns>A new Exception.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseTypedLiteral(Microsoft.Data.OData.Query.ExpressionLexer,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.String)">
            <summary>
            Parses typed literals.
            </summary>
            <param name="lexer">The lexer to use.</param>
            <param name="targetTypeReference">Expected type to be parsed.</param>
            <param name="targetTypeName">The EDM type name of the expected type to be parsed.</param>
            <returns>The literal token produced by building the given literal.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseNullLiteral(Microsoft.Data.OData.Query.ExpressionLexer)">
            <summary>
            Parses null literals.
            </summary>
            <param name="lexer">The lexer to use.</param>
            <returns>The literal token produced by building the given literal.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseExpression">
            <summary>
            Parses the expression.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseLogicalOr">
            <summary>
            Parses the or operator.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseLogicalAnd">
            <summary>
            Parses the and operator.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseComparison">
            <summary>
            Parses the eq, ne, lt, gt, le, ge operators.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseAdditive">
            <summary>
            Parses the add, sub operators.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseMultiplicative">
            <summary>
            Parses the mul, div, mod operators.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseUnary">
            <summary>
            Parses the -, not unary operators.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParsePrimary">
            <summary>
            Parses the primary expressions.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParsePrimaryStart">
            <summary>
            Handles the start of primary expressions.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseParenExpression">
            <summary>
            Parses parenthesized expressions.
            </summary>
            <returns>The lexical token representing the expression.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseAny(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Parses the Any portion of the query
            </summary>
            <param name="parent">The parent of the Any node.</param>
            <returns>The lexical token representing the Any query.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseAll(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Parses the All portion of the query
            </summary>
            <param name="parent">The parent of the All node.</param>
            <returns>The lexical token representing the All query.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseAnyAll(Microsoft.Data.OData.Query.SyntacticAst.QueryToken,System.Boolean)">
            <summary>
            Parses the Any/All portion of the query
            </summary>
            <param name="parent">The parent of the Any/All node.</param>
            <param name="isAny">Denotes whether an Any or All is to be parsed.</param>
            <returns>The lexical token representing the Any/All query.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.ParseSegment(Microsoft.Data.OData.Query.SyntacticAst.QueryToken)">
            <summary>
            Parses a segment.
            </summary>
            <param name="parent">The parent of the segment node.</param>
            <returns>The lexical token representing the segment.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.TokenIdentifierIs(System.String)">
            <summary>
            Checks that the current token has the specified identifier.
            </summary>
            <param name="id">Identifier to check.</param>
            <returns>true if the current token is an identifier with the specified text.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.RecurseEnter">
            <summary>
            Marks the fact that a recursive method was entered, and checks that the depth is allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriQueryExpressionParser.RecurseLeave">
            <summary>
            Marks the fact that a recursive method is leaving.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UriQueryExpressionParser.Parser">
            <summary>
            Delegate for a function that parses an expression and translates it into a QueryToken.
            </summary>
            <returns>A QueryToken</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UriPathParser">
            <summary>
            Parser which consumes the URI path and produces the lexical object model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UriPathParser.maxSegments">
            <summary>
            The maximum number of segments allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPathParser.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="maxSegments">The maximum number of segments for each part of the query.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPathParser.ParsePath(System.String)">
            <summary>
            Parses the <paramref name="escapedRelativePathUri"/> and returns a list of strings for each segment.
            </summary>
            <param name="escapedRelativePathUri">The relative URI which holds the query to parse.</param>
            <returns>a list of strings for each segment in the uri.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriPathParser.ParsePathIntoSegments(System.Uri,System.Uri)">
            <summary>
            Returns list of segments in the specified path (eg: /abc/pqr -&gt; abc, pqr).
            </summary>
            <param name="absoluteUri">The absolute URI of the request.</param>
            <param name="serviceBaseUri">The service base URI for the request.</param>
            <returns>List of unescaped segments.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UnaryOperatorBinder">
            <summary>
            Class that knows how to bind unary operators.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.UnaryOperatorBinder.bindMethod">
            <summary>
            Method to use for binding the parent node, if needed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UnaryOperatorBinder.#ctor(System.Func{Microsoft.Data.OData.Query.SyntacticAst.QueryToken,Microsoft.Data.OData.Query.SemanticAst.QueryNode})">
            <summary>
            Constructs a UnaryOperatorBinder with the given method to be used binding the parent token if needed.
            </summary>
            <param name="bindMethod">Method to use for binding the parent token, if needed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UnaryOperatorBinder.BindUnaryOperator(Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken)">
            <summary>
            Binds a unary operator token.
            </summary>
            <param name="unaryOperatorToken">The unary operator token to bind.</param>
            <returns>The bound unary operator token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UnaryOperatorBinder.PromoteOperandType(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,Microsoft.Data.OData.Query.UnaryOperatorKind)">
            <summary>
            Get the promoted type reference of the operand
            </summary>
            <param name="operand">the operand</param>
            <param name="unaryOperatorKind">the operator kind</param>
            <returns>the type reference of the operand</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UnaryOperatorBinder.GetOperandFromToken(Microsoft.Data.OData.Query.SyntacticAst.UnaryOperatorToken)">
            <summary>
            Retrieve SingleValueNode operand from given token.
            </summary>
            <param name="unaryOperatorToken">The token</param>
            <returns>the SingleValueNode operand</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode">
            <summary>
            Node representing a single navigation property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.entitySet">
            <summary>
            The entity set that this NavigationProperty targets.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.source">
            <summary>
            The previous node in the path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.navigationProperty">
            <summary>
            The navigation property this node represents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.entityTypeReference">
            <summary>
            The type of entity that this NavigationProperty targets.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.Query.SemanticAst.SingleEntityNode)">
            <summary>
            Constructs a SingleNavigationNode.
            </summary>
            <param name="navigationProperty">The navigation property this node represents.</param>
            <param name="source">The previous node in the path.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input navigationProperty or source is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input navigationProperty targets more than one entity.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Constructs a SingleNavigationNode.
            </summary>
            <param name="navigationProperty">The navigation property this node represents.</param>
            <param name="sourceSet">The entity set that this of the previous segment.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input navigationProperty or source is null.</exception>
            <exception cref="T:System.ArgumentException">Throws if the input navigationProperty targets more than one entity.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.Source">
            <summary>
            Gets the previous node in the path.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.NavigationProperty">
            <summary>
            Gets the navigation property this node represents.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.TargetMultiplicity">
            <summary>
            Gets the target multiplicity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.TypeReference">
            <summary>
            Gets the type of entity that this NavigationProperty targets.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.EntityTypeReference">
            <summary>
            Gets the type of entity that this NavigationProperty targets.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.EntitySet">
            <summary>
            Gets the entity set that this NavigationProperty targets.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleNavigationNode.InternalKind">
            <summary>
            Gets the kind of this query node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Query.UriUtils">
            <summary>
            Uri utility methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriUtils.UriInvariantInsensitiveIsBaseOf(System.Uri,System.Uri)">
            <summary>
            Determines whether the <paramref name="baseUri"/> Uri instance is a 
            base of the specified Uri instance. 
            </summary>
            <remarks>
            The check is host agnostic. For example, "http://host1.com/Service.svc" is a valid base Uri of "https://host2.org/Service.svc/Bla" 
            but is not a valid base for "http://host1.com/OtherService.svc/Bla".
            </remarks>
            <param name="baseUri">The candidate base URI.</param>
            <param name="uri">The specified Uri instance to test.</param>
            <returns>true if the baseUri Uri instance is a base of uri; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriUtils.ParseQueryOptions(System.Uri)">
            <summary>
            Parses query options from a specified URI into a dictionary.
            </summary>
            <param name="uri">The uri to get the query options from.</param>
            <returns>The parsed query options.</returns>
            <remarks>This method returns <see cref="T:System.Collections.Generic.List`1"/> with all the query options.
            Note that it is valid to include multiple query options with the same name.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriUtils.IsStructuralOrNavigationPropertySelectionItem(Microsoft.Data.OData.Query.SemanticAst.SelectItem)">
            <summary>
            is this selection item a structural or navigation property selection item.
            </summary>
            <param name="selectItem">the selection item to check</param>
            <returns>true if this selection item is a structural property selection item.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriUtils.CreateBaseComparableUri(System.Uri)">
            <summary>Creates a URI suitable for host-agnostic comparison purposes.</summary>
            <param name="uri">URI to compare.</param>
            <returns>URI suitable for comparison.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.UriUtils.IsBaseOf(System.Uri,System.Uri)">
            <summary>
            Check whether the <paramref name="baseUri"/> Uri is the base of the <paramref name="uri"/> Uri.
            </summary>
            <param name="baseUri">The candidate base Uri.</param>
            <param name="uri">The Uri to check.</param>
            <returns>True if the <paramref name="baseUri"/> is the base of the <paramref name="uri"/> Uri.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.AtomAndVerboseJsonTypeNameOracle">
            <summary>
            Class responsible for determining the type name that should be written on the wire for entries and values in the ATOM and Verbose JSON formats.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.TypeNameOracle">
            <summary>
            Class to validate and resolve the type name to be serialized.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.TypeNameOracle.ResolveAndValidateTypeName(Microsoft.Data.Edm.IEdmModel,System.String,Microsoft.Data.Edm.EdmTypeKind)">
            <summary>
            Validates a type name to ensure that it's not an empty string and resolves it against the provided <paramref name="model"/>.
            </summary>
            <param name="model">The model to use.</param>
            <param name="typeName">The type name to validate.</param>
            <param name="expectedTypeKind">The expected type kind for the given type name.</param>
            <returns>The type with the given name and kind if a user model was available, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TypeNameOracle.ResolveAndValidateTypeNameForValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataValue,System.Boolean)">
            <summary>
            Resolves and validates the Edm type for the given <paramref name="value"/>.
            </summary>
            <param name="model">The model to use.</param>
            <param name="typeReferenceFromMetadata">The type inferred from the model or null if the model is not a user model.</param>
            <param name="value">The value in question to resolve the type for.</param>
            <param name="isOpenProperty">true if the type name belongs to an open property, false otherwise.</param>
            <returns>A type for the <paramref name="value"/> or null if no metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TypeNameOracle.GetTypeNameFromValue(System.Object)">
            <summary>
            Gets the type name from the given <paramref name="value"/>.
            </summary>
            <param name="value">The value to get the type name from. This can be an ODataPrimitiveValue, an ODataComplexValue, an ODataCollectionValue or a Clr primitive object.</param>
            <returns>The type name for the given <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TypeNameOracle.ResolveAndValidateTypeFromNameAndMetadata(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmTypeReference,System.String,Microsoft.Data.Edm.EdmTypeKind,System.Boolean)">
            <summary>
            Resolve a type name against the provided <paramref name="model"/>. If not payload type name is specified,
            derive the type from the model type (if available).
            </summary>
            <param name="model">The model to use.</param>
            <param name="typeReferenceFromMetadata">The type inferred from the model or null if the model is not a user model.</param>
            <param name="typeName">The type name to be resolved.</param>
            <param name="typeKindFromValue">The expected type kind of the resolved type.</param>
            <param name="isOpenPropertyType">True if the type name belongs to an open property.</param>
            <returns>A type for the <paramref name="typeName"/> or null if no type name is specified and no metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TypeNameOracle.ValidateMetadataType(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Validates that the (optional) <paramref name="typeReferenceFromMetadata"/> is the same as the (optional) <paramref name="typeReferenceFromValue"/>.
            </summary>
            <param name="typeReferenceFromMetadata">The (optional) type from the metadata definition (the expected type).</param>
            <param name="typeReferenceFromValue">The (optional) type from the value (the actual type).</param>
            <returns>The type as derived from the <paramref name="typeReferenceFromMetadata"/> and/or <paramref name="typeReferenceFromValue"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AtomAndVerboseJsonTypeNameOracle.GetEntryTypeNameForWriting(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Determines the type name for the given entry to write to the payload.
            </summary>
            <param name="entry">The ODataEntry whose type name is to be written</param>
            <returns>Type name to write to the payload, or null if no type name should be written.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AtomAndVerboseJsonTypeNameOracle.GetValueTypeNameForWriting(System.Object,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.SerializationTypeNameAnnotation,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,System.String@)">
            <summary>
            Determines the type name for the given value to write to the payload.
            </summary>
            <param name="value">The value whose type name is to be written. This can be an ODataPrimitiveValue, an ODataComplexValue, an ODataCollectionValue or a Clr primitive object.</param>
            <param name="typeReferenceFromValue">The type resolved from the value.</param>
            <param name="typeNameAnnotation">The serialization type name annotation.</param>
            <param name="collectionValidator">true if the type name belongs to an open property, false otherwise.</param>
            <param name="collectionItemTypeName">Returns the item type name of the collection type if <paramref name="value"/> is a collection value and its type name can be determined.</param>
            <returns>Type name to write to the payload, or null if no type should be written.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomCategoriesMetadata">
            <summary> Atom metadata description for a categories element (app:categories). </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomCategoriesMetadata.Fixed">
            <summary> Gets or sets a value that indicates whether the list of categories is fixed or an open set. </summary>
            <returns>true if the list of categories is fixed; false if the list of categories is an open set.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomCategoriesMetadata.Scheme">
            <summary> Gets or sets the URI indicating the scheme of the categories without a scheme. </summary>
            <returns>The URI indicating the scheme of the categories without a scheme.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomCategoriesMetadata.Href">
            <summary> Gets or sets the URI of the category document. </summary>
            <returns>The URI of the category document.</returns>
            <remarks>
            If this property is not null, the properties <see cref="P:Microsoft.Data.OData.Atom.AtomCategoriesMetadata.Fixed"/> and <see cref="P:Microsoft.Data.OData.Atom.AtomCategoriesMetadata.Scheme"/> must be both null
            and the <see cref="P:Microsoft.Data.OData.Atom.AtomCategoriesMetadata.Categories"/> must be either null or empty collection.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomCategoriesMetadata.Categories">
            <summary> Gets or sets the atom category elements inside this categories element. </summary>
            <returns>The atom category elements inside this categories element.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomInstanceAnnotation">
            <summary>
            Class responsible for storing and manipulating instance annotation data in ATOM payloads.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.target">
            <summary>
            Backing field of the Target property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.term">
            <summary>
            Backing field of the Term property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.value">
            <summary>
            Backing field of the Value property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.#ctor(System.String,System.String,Microsoft.Data.OData.ODataValue)">
            <summary>
            Constructor.
            </summary>
            <param name="target">The target of the annotation.</param>
            <param name="term">The term whose value is being expressed through this annotation.</param>
            <param name="value">The annotation's value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.CreateFrom(Microsoft.Data.OData.ODataInstanceAnnotation,System.String)">
            <summary>
            Creates a new instance of this class by consuming xml from the given reader.
            Creates an Atom-specific instance annotation from the format-independent representation of an annotation.
            </summary>
            <param name="odataInstanceAnnotation">The format-independent represetnation of an instance annotation.</param>
            <param name="target">The value of the target attribute on the m:annotation element, or null if the attribute should be omitted.</param>
            <returns>The created AtomInstanceAnnotation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.CreateFrom(Microsoft.Data.OData.Atom.ODataAtomInputContext,Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer)">
            <summary>
            Creates a new instance of this class by consuming xml from the given input context.
            </summary>
            <param name="inputContext">The input context to use to create the annotation.</param>
            <param name="propertyAndValueDeserializer">The property and value deserializer to use when reading values in the annotation element content.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.Atom.AtomInstanceAnnotation"/> populated with the information from the 'm:annotation' XML element, as long as the value is a string. Returns null otherwise.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element    - The annotation element to read.
            Post-Condition:  XmlNodeType.Any        - The node after the end of the annotation element, or the same element as in the pre-condition if the annotation was skipped.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.LookupAttributeValueNotationNameByEdmTypeKind(Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Retrieves the name of the attribute used in attribute value notation to indicate the given primitive type kind.
            </summary>
            <param name="typeKind">The primitive type kind to look up.</param>
            <returns>The name of the corresponding attribute.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.LookupEdmTypeByAttributeValueNotationName(System.String)">
            <summary>
            Retrieves the Edm type represented by the given attribute name when using attribute value notation.
            </summary>
            <param name="attributeName">The name of the attribute (must be one of "string", "int", "bool", "decimal", "float")</param>
            <returns>A nullable reference to the type represented by the attribute name, or null if the given name is not a valid attribute value notation name.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.ReadValueFromElementContent(Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Reads the current element's content as an ODataValue.
            </summary>
            <param name="propertyAndValueDeserializer">The property and value deserializer to use to read values in ATOM.</param>
            <param name="expectedType">The expected type of the annotation, may be null if the term is not defined in the model.</param>
            <returns>The deserialized value.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element    - The XML element containing the value to read (also the attributes will be read from it)
            Post-Condition:  XmlNodeType.EndElement - The end tag of the element.
                             XmlNodeType.Element    - The empty element node.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.GetValueFromAttributeValueNotation(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.String,System.String,System.String,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Reads an annotation's value from the annotation value notation specified on the current element. 
            </summary>
            <param name="expectedTypeReference">The expected type reference of the vocabulary term from the metadata.</param>
            <param name="attributeValueNotationTypeReference">The type reference indicated by the name of the attribute used in attribute value notation. 
              For example, if the attribute was called "string", this will be a reference to the string type.</param>
            <param name="attributeValueNotationAttributeName">The name of the attribute used by attribute avalue notation.</param>
            <param name="attributeValueNotationAttributeValue">The value of the attribute used by attribute value notation.</param>
            <param name="typeAttributeValue">The value of the "m:type" attribute on the annotation element.</param>
            <param name="positionedOnEmptyElement">true if the annotation element is empty, false otherwise.</param>
            <param name="model">The edm model instance.</param>
            <param name="messageReaderSettings">The message reader settings instance.</param>
            <param name="version">The payload version to read.</param>
            <returns>The primitive value represented on this element via attribute value notation.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.Target">
            <summary>
            The target of this annotation, as specified in the m:annotation/@target attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.TermName">
            <summary>
            The term of this annotation's value, as specified in the m:annotation/@term attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.Value">
            <summary>
            The value of this annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomInstanceAnnotation.IsTargetingCurrentElement">
            <summary>
            True if the annotation is targeting the xml element in which the annotation was found; false if the annotation is targeting a different element.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter">
            <summary>
            Xml writer which wraps another writer and fixes prefixes so that the root element is not prefix-qualified (same for everything else with the same prefix).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.writer">
            <summary>
            The wrapped writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.rootPrefix">
            <summary>
            The root prefix, once the first element of the document has been written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.#ctor(System.Xml.XmlWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter"/>.
            </summary>
            <param name="writer">The writer to wrap.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
            <summary>
            Copies everything from the <see cref="T:System.Xml.XPath.XPathNavigator"/> object to the writer. The position of the <see cref="T:System.Xml.XPath.XPathNavigator"/> remains unchanged.
            </summary>
            <param name="navigator">The <see cref="T:System.Xml.XPath.XPathNavigator"/> to copy from.</param>
            <param name="defattr">true to copy the default attributes; otherwise, false.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="navigator"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
            <summary>
            When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from. </param>
            <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null. </exception>
            <exception cref="T:System.ArgumentException"><paramref name="reader"/> contains invalid characters. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
            <summary>
            When overridden in a derived class, writes out all the attributes found at the current position in the <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">The XmlReader from which to copy the attributes. </param>
            <param name="defattr">true to copy the default attributes from the XmlReader; otherwise, false. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null. </exception>
            <exception cref="T:System.Xml.XmlException">The reader is not positioned on an element, attribute or XmlDeclaration node. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.LookupPrefix(System.String)">
            <summary>
            When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.
            </summary>
            <returns>
            The matching prefix or null if no matching namespace URI is found in the current scope.
            </returns>
            <param name="ns">The namespace URI whose prefix you want to find. </param>
            <exception cref="T:System.ArgumentException"><paramref name="ns"/> is either null or String.Empty. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.Flush">
            <summary>
            When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteNmToken(System.String)">
            <summary>
            When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).
            </summary>
            <param name="name">The name to write. </param><exception cref="T:System.ArgumentException">
            <paramref name="name"/> is not a valid NmToken; or <paramref name="name"/> is either null or String.Empty. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.Close">
            <summary>
            When overridden in a derived class, closes this stream and the underlying stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">A call is made to write more output after Close has been called or the result of this call is an invalid XML document. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, encodes the specified binary bytes as BinHex and writes out the resulting text.
            </summary>
            <param name="buffer">Byte array to encode. </param><param name="index">The position in the buffer indicating the start of the bytes to write. </param><param name="count">The number of bytes to write. </param><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.InvalidOperationException">The writer is closed or in error state.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero. -or-The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteRaw(System.String)">
            <summary>
            When overridden in a derived class, writes raw markup manually from a string.
            </summary>
            <param name="data">String containing the text to write. </param>
            <exception cref="T:System.ArgumentException"><paramref name="data"/> is either null or String.Empty. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.
            </summary>
            <param name="buffer">Byte array to encode. </param><param name="index">The position in the buffer indicating the start of the bytes to write. </param>
            <param name="count">The number of bytes to write. </param><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero. -or-The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes raw markup manually from a character buffer.
            </summary>
            <param name="buffer">Character array containing the text to write. </param><param name="index">The position within the buffer indicating the start of the text to write. </param>
            <param name="count">The number of characters to write. </param><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero. -or-The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes text one buffer at a time.
            </summary>
            <param name="buffer">Character array containing the text to write. </param><param name="index">The position in the buffer indicating the start of the text to write. </param>
            <param name="count">The number of characters to write. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is less than zero. -or-The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="buffer"/> parameter value is not valid.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.
            </summary>
            <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF. </param>
            <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF. </param>
            <exception cref="T:System.ArgumentException">An invalid surrogate character pair was passed. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteString(System.String)">
            <summary>
            When overridden in a derived class, writes the given text content.
            </summary>
            <param name="text">The text to write. </param><exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.
            </summary>
            <param name="prefix">The namespace prefix of the attribute. </param><param name="localName">The local name of the attribute. </param>
            <param name="ns">The namespace URI for the attribute. </param>
            <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteEndAttribute">
            <summary>
            When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)"/> call.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteCData(System.String)">
            <summary>
            When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing the specified text.
            </summary>
            <param name="text">The text to place inside the CDATA block. </param>
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteComment(System.String)">
            <summary>
            When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment. </param>
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.
            </summary>
            <param name="name">The name of the processing instruction. </param>
            <param name="text">The text to include in the processing instruction. </param>
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.<paramref name="name"/> is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument"/> has already been called. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteEntityRef(System.String)">
            <summary>
            When overridden in a derived class, writes out an entity reference as &amp;name;.
            </summary>
            <param name="name">The name of the entity reference. </param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is either null or String.Empty. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteCharEntity(System.Char)">
            <summary>
            When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.
            </summary>
            <param name="ch">The Unicode character for which to generate a character entity. </param>
            <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteWhitespace(System.String)">
            <summary>
            When overridden in a derived class, writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters. </param>
            <exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteStartDocument">
            <summary>
            When overridden in a derived class, writes the XML declaration with the version "1.0".
            </summary>
            <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteStartDocument(System.Boolean)">
            <summary>
            When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.
            </summary>
            <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no". </param>
            <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteEndDocument">
            <summary>
            When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.
            </summary>
            <exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.
            </summary>
            <param name="name">The name of the DOCTYPE. This must be non-empty. </param>
            <param name="pubid">If non-null it also writes public override "pubid" "sysid" where <paramref name="pubid"/> and <paramref name="sysid"/> are replaced with the value of the given arguments. </param>
            <param name="sysid">If <paramref name="pubid"/> is null and <paramref name="sysid"/> is non-null it writes SYSTEM "sysid" where <paramref name="sysid"/> is replaced with the value of this argument. </param>
            <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument. </param>
            <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
            <exception cref="T:System.ArgumentException">The value for <paramref name="name"/> would result in invalid XML. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.
            </summary>
            <param name="prefix">The namespace prefix of the element. </param><param name="localName">The local name of the element. </param>
            <param name="ns">The namespace URI to associate with the element. </param>
            <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteEndElement">
            <summary>
            When overridden in a derived class, closes one element and pops the corresponding namespace scope.
            </summary>
            <exception cref="T:System.InvalidOperationException">This results in an invalid XML document. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteFullEndElement">
            <summary>
            When overridden in a derived class, closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.XmlLang">
            <summary>
            When overridden in a derived class, gets the current xml:lang scope.
            </summary>
            <returns>
            The current xml:lang scope.
            </returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.WriteState">
            <summary>
            When overridden in a derived class, gets the state of the writer.
            </summary>
            <returns>
            One of the <see cref="T:System.Xml.WriteState"/> values.
            </returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.XmlSpace">
            <summary>
            When overridden in a derived class, gets an <see cref="T:System.Xml.XmlSpace"/> representing the current xml:space scope.
            </summary>
            <returns>
            An XmlSpace representing the current xml:space scope.
            </returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.DefaultNamespaceCompensatingXmlWriter.Settings">
            <summary>
            Gets the <see cref="T:System.Xml.XmlWriterSettings"/> object used to create this <see cref="T:System.Xml.XmlWriter"/> instance.
            </summary>
            <returns>
            The <see cref="T:System.Xml.XmlWriterSettings"/> object used to create this writer instance.
            </returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomAnnotationReader">
            <summary>
            Responsible for reading the annotation element in ATOM.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomAnnotationReader.inputContext">
            <summary>
            The input context to use when parsing the annotation element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomAnnotationReader.odataMetadataNamespace">
            <summary>Atomized string representation of the URI used for the OData metadata namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomAnnotationReader.attributeElementName">
            <summary>Atomized name of the decimal attribute of an annotation element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomAnnotationReader.propertyAndValueDeserializer">
            <summary>The property and value deserializer used to read values in ATOM.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomAnnotationReader.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext,Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer)">
            <summary>
            Creates a new ATOM annotation parser.
            </summary>
            <param name="inputContext">The input context this annotation reader should use to read annotation elements.</param>
            <param name="propertyAndValueDeserializer">The property and value deserializer to use to read the value of an annotation element.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomAnnotationReader.TryReadAnnotation(Microsoft.Data.OData.Atom.AtomInstanceAnnotation@)">
            <summary>
            Attempts to read the current element as an annotation element.
            </summary>
            <param name="annotation">If this method returned true, this is the instance annotation information from the parsed element.</param>
            <returns>true if the element was an annotation element, false if it wasn't.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element    - The element to read.
            Post-Condition:  XmlNodeType.EndElement - The end tag of the element (if the element was a non-empty annotation element).
                             XmlNodeType.Element    - The same element as the pre-condition if this method returned false, or an empty annotation element.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomPayloadKindDetectionDeserializer">
            <summary>
            OData ATOM deserializer for detecting the payload kind of an ATOM payload.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer">
            <summary>
            OData ATOM deserializer for properties and value types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomDeserializer">
            <summary>
            Base class for all OData ATOM deserializers.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataDeserializer">
            <summary>
            Base class for all OData deserializers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataDeserializer.inputContext">
            <summary>The input context to use for reading.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataDeserializer.#ctor(Microsoft.Data.OData.ODataInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataDeserializer.CreateDuplicatePropertyNamesChecker">
            <summary>
            Creates a new instance of a duplicate property names checker.
            </summary>
            <returns>The newly created instance of duplicate property names checker.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataDeserializer.UseClientFormatBehavior">
            <summary>
            true if the WCF DS client compatibility format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataDeserializer.UseServerFormatBehavior">
            <summary>
            true if the WCF DS server compatibility format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataDeserializer.UseDefaultFormatBehavior">
            <summary>
            true if the default format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataDeserializer.MessageReaderSettings">
            <summary>
            The message reader settings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataDeserializer.Version">
            <summary>
            The OData version of the input.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataDeserializer.ReadingResponse">
            <summary>
            true if the input is a response payload; false if it's a request payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataDeserializer.Model">
            <summary>
            The model to use.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomDeserializer.atomInputContext">
            <summary>The ATOM input context to use for reading.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomDeserializer.ReadPayloadStart">
            <summary>
            Reads the start of the payload. Wraps the call to XmlReaderExtensions.ReadPayloadStart().
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomDeserializer.ReadPayloadEnd">
            <summary>
            Reads till the end of the payload. Wraps the call to XmlReaderExtensions.ReadPayloadEnd().
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomDeserializer.ProcessUriFromPayload(System.String,System.Uri)">
            <summary>
            Given a URI from the payload, this method will try to make it absolute, or fail otherwise.
            </summary>
            <param name="uriFromPayload">The URI string from the payload to process.</param>
            <param name="xmlBaseUri">The (optional) Xml base URI as specified in the payload.</param>
            <returns>An absolute URI to report.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomDeserializer.ProcessUriFromPayload(System.String,System.Uri,System.Boolean)">
            <summary>
            Given a string representation of a URI from the payload, this method will return an absolute or relative URI.
            </summary>
            <param name="uriFromPayload">The URI string from the payload to process.</param>
            <param name="xmlBaseUri">The (optional) Xml base URI as specified in the payload.</param>
            <param name="makeAbsolute">If true, then this method will try to make the URI absolute, or fail otherwise.</param>
            <returns>An absolute or relative URI to report based on the value of the <paramref name="makeAbsolute"/> parameter.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomDeserializer.AssertXmlCondition(System.Xml.XmlNodeType[])">
            <summary>
            Asserts that the XML reader is positioned on one of the specified node types.
            </summary>
            <param name="allowedNodeTypes">The node types which should appear at this point.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomDeserializer.AssertXmlCondition(System.Boolean,System.Xml.XmlNodeType[])">
            <summary>
            Asserts that the XML reader is positioned on one of the specified node types.
            </summary>
            <param name="allowEmptyElement">True if an empty element node should be added to the list.</param>
            <param name="allowedNodeTypes">The node types which should appear at this point.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomDeserializer.XmlReader">
            <summary>
            The XML reader to read the input from.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomDeserializer.AtomInputContext">
            <summary>
            The ATOM input context to use for reading.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.EmptyNamespace">
            <summary>The empty namespace used for attributes in no namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ODataNullAttributeName">
            <summary>OData attribute which indicates the null value for the element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ODataCollectionItemElementName">
            <summary>Element name for the items in a Collection.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.AtomTypeAttributeName">
            <summary>XML element name to mark type attribute in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.edmStringType">
            <summary>The Edm.String type from the core model.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.recursionDepth">
            <summary>The current recursion depth of values read by this deserializer, measured by the number of complex and collection values read so far.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadTopLevelProperty(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates and reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="expectedProperty">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadNonEntityValue(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,System.Boolean,System.Boolean)">
            <summary>
            Reads the primitive, complex or collection value.
            </summary>
            <param name="expectedValueTypeReference">The expected type reference of the value.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use (cached), or null if new one should be created.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <param name="validateNullValue">true to validate a null value (i.e., throw if a null value is being written for a non-nullable property); otherwise false.</param>
            <param name="epmPresent">Whether any EPM mappings exist.</param>
            <returns>The value read (null, primitive CLR value, ODataComplexValue or ODataCollectionValue).</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element    - The XML element containing the value to read (also the attributes will be read from it)
            Post-Condition:  XmlNodeType.EndElement - The end tag of the element.
                             XmlNodeType.Element    - The empty element node.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.GetNonEntityValueKind">
            <summary>
            Determines the kind of value to read based on the payload shape.
            </summary>
            <returns>The kind of type of the value to read.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element -   The XML element containing the value to get the kind for.
            Post-Condition:  XmlNodeType.Element -   The XML element containing the value to get the kind for.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadNonEntityValueAttributes(System.String@,System.Boolean@)">
            <summary>
            Reads the 'type' and 'isNull' attributes of a value.
            </summary>
            <param name="typeName">The value of the 'type' attribute or null if no 'type' attribute exists.</param>
            <param name="isNull">The value of the 'isNull' attribute or null if no 'isNull' attribute exists.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element    - The element to read attributes from.
            Post-Condition: XmlNodeType.Element    - The element to read attributes from.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadProperties(Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.OData.ReadOnlyEnumerable{Microsoft.Data.OData.ODataProperty},Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean)">
            <summary>
            Reads the content of a properties in an element (complex value, m:properties, ...)
            </summary>
            <param name="structuredType">The type which should declare the properties to be read. Optional.</param>
            <param name="properties">The list of properties to add properties to.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use.</param>
            <param name="epmPresent">Whether any EPM mappings exist.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element    - The element to read properties from.
            Post-Condition: XmlNodeType.Element    - The element to read properties from if it is an empty element.
                            XmlNodeType.EndElement - The end element of the element to read properties from.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadNonEntityValueImplementation(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,System.Boolean,System.Boolean,System.String)">
            <summary>
            Reads the primitive, complex or collection value.
            </summary>
            <param name="expectedTypeReference">The expected type reference of the value.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use (cached), or null if new one should be created.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <param name="validateNullValue">true to validate a null value (i.e., throw if a null value is being written for a non-nullable property); otherwise false.</param>
            <param name="epmPresent">Whether any EPM mappings exist.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>The value read (null, primitive CLR value, ODataComplexValue or ODataCollectionValue).</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element    - The XML element containing the value to read (also the attributes will be read from it)
            Post-Condition:  XmlNodeType.EndElement - The end tag of the element.
                             XmlNodeType.Element    - The empty element node.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadNullValue(Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.String)">
            <summary>
            Read a null value from the payload.
            </summary>
            <param name="expectedTypeReference">The expected type reference (for validation purposes).</param>
            <param name="validateNullValue">true to validate the value against the <paramref name="expectedTypeReference"/>.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>The null value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadPropertiesImplementation(Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.OData.ReadOnlyEnumerable{Microsoft.Data.OData.ODataProperty},Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean)">
            <summary>
            Reads the content of a properties in an element (complex value, m:properties, ...)
            </summary>
            <param name="structuredType">The type which should declare the properties to be read. Optional.</param>
            <param name="properties">The list of properties to add properties to.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use.</param>
            <param name="epmPresent">Whether any EPM mappings exist.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element    - The element to read properties from.
            Post-Condition: XmlNodeType.Element    - The element to read properties from if it is an empty element.
                            XmlNodeType.EndElement - The end element of the element to read properties from.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadProperty(System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.Metadata.ODataNullValueBehaviorKind,System.Boolean)">
            <summary>
            Reads a property.
            </summary>
            <param name="expectedPropertyName">The expected property name to be read from the payload (or null if no expected property name was specified).</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property value.</param>
            <param name="nullValueReadBehaviorKind">Behavior to use when reading null value for the property.</param>
            <param name="epmPresent">Whether any EPM mappings exist.</param>
            <returns>The ODataProperty representing the property in question; if null is returned from this method it means that the property is to be ignored.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element - The XML element representing the property to read.
                                                   Note that the method does NOT check for the property name neither it resolves the property against metadata.
            Post-Condition:  Any                 - The node after the property.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadPrimitiveValue(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Read a primitive value from the reader.
            </summary>
            <param name="actualValueTypeReference">The type of the value to read.</param>
            <returns>The value read from the payload and converted as appropriate to the target type.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element   - the element to read the value for.
                             XmlNodeType.Attribute - an attribute on the element to read the value for.
            Post-Condition:  XmlNodeType.Element    - the element was empty.
                             XmlNodeType.EndElement - the element had some value.
                             
            Note that this method will not read null values, those should be handled by the caller already.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadComplexValue(Microsoft.Data.Edm.IEdmComplexTypeReference,System.String,Microsoft.Data.OData.SerializationTypeNameAnnotation,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean)">
            <summary>
            Read a complex value from the reader.
            </summary>
            <param name="complexTypeReference">The type reference of the value to read (or null if no type is available).</param>
            <param name="payloadTypeName">The name of the type specified in the payload.</param>
            <param name="serializationTypeNameAnnotation">The serialization type name for the complex value (possibly null).</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use (cached), or null if new one should be created.</param>
            <param name="epmPresent">Whether any EPM mappings exist.</param>
            <returns>The value read from the payload.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element   - the element to read the value for.
                             XmlNodeType.Attribute - an attribute on the element to read the value for.
            Post-Condition:  XmlNodeType.EndElement - the element has been read.
                             
            Note that this method will not read null values, those should be handled by the caller already.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.ReadCollectionValue(Microsoft.Data.Edm.IEdmCollectionTypeReference,System.String,Microsoft.Data.OData.SerializationTypeNameAnnotation)">
            <summary>
            Read a collection from the reader.
            </summary>
            <param name="collectionTypeReference">The type of the collection to read (or null if no type is available).</param>
            <param name="payloadTypeName">The name of the collection type specified in the payload.</param>
            <param name="serializationTypeNameAnnotation">The serialization type name for the collection value (possibly null).</param>
            <returns>The value read from the payload.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element   - the element to read the value for.
                             XmlNodeType.Attribute - an attribute on the element to read the value for.
            Post-Condition:  XmlNodeType.Element    - the element was empty.
                             XmlNodeType.EndElement - the element had some value.
                             
            Note that this method will not read null values, those should be handled by the caller already.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.IncreaseRecursionDepth">
            <summary>
            Increases the recursion depth of values by 1. This will throw if the recursion depth exceeds the current limit.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.DecreaseRecursionDepth">
            <summary>
            Decreases the recursion depth of values by 1.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueDeserializer.AssertRecursionDepthIsZero">
            <summary>
            Asserts that the current recursion depth of values is zero. This should be true on all calls into this class from outside of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPayloadKindDetectionDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPayloadKindDetectionDeserializer.DetectPayloadKind(Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) of the payload.
            </summary>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero or more payload kinds depending on what payload kinds were detected.</returns>
            <remarks>This method decides the payload kind based on the fully-qualified element name of the top-level Xml element 
            in the payload for entry, feed, entity reference link, error and service document payload kinds. It performs more checks
            for properties and collection payloads as follows:
            * If an m:type attribute is found => property
            * If an m:null attribute is found => property
            Otherwise the shape of the payload decides:
            * If we only find d:element child nodes => collection or property
            * If we find no child nodes => primitive property
            * If we find anything else => complex property
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPayloadKindDetectionDeserializer.DetectPropertyOrCollectionPayloadKind">
            <summary>
            Detects whether the current element represents a property payload, a collection payload or neither.
            </summary>
            <returns>An enumerable of zero, one or two payload kinds depending on whether a property, collection, both or neither were detected.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomCollectionSerializer">
            <summary>
            OData ATOM serializer for collections.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer">
            <summary>
            OData ATOM serializer for properties and values.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomSerializer">
            <summary>
            Base class for all OData ATOM serializers.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataSerializer">
            <summary>
            Base class for all OData serializers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataSerializer.outputContext">
            <summary>
            The output context to write to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataSerializer.#ctor(Microsoft.Data.OData.ODataOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="outputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataSerializer.CreateDuplicatePropertyNamesChecker">
            <summary>
            Creates a new instance of a duplicate property names checker.
            </summary>
            <returns>The newly created instance of duplicate property names checker.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataSerializer.ValidateAssociationLink(Microsoft.Data.OData.ODataAssociationLink,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Validates association link before writing.
            </summary>
            <param name="associationLink">The association link to validate.</param>
            <param name="entryEntityType">The entity type of the entry the association link belongs to.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataSerializer.UseClientFormatBehavior">
            <summary>
            true if the WCF DS client compatibility format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataSerializer.UseServerFormatBehavior">
            <summary>
            true if the WCF DS server compatibility format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataSerializer.UseDefaultFormatBehavior">
            <summary>
            true if the default format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataSerializer.MessageWriterSettings">
            <summary>
            The message writer settings.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataSerializer.UrlResolver">
            <summary>
            The URL resolver.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataSerializer.Version">
            <summary>
            The OData version of the output.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataSerializer.WritingResponse">
            <summary>
            true if the output is a response payload; false if it's a request payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataSerializer.Model">
            <summary>
            The model to use.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomSerializer.atomOutputContext">
            <summary>
            The ATOM output context to write to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.UriToUrlAttributeValue(System.Uri)">
            <summary>
            Converts the given <paramref name="uri"/> Uri to a string. 
            If the provided baseUri is not null and is a base Uri of the <paramref name="uri"/> Uri 
            the method returns the string form of the relative Uri.
            </summary>
            <param name="uri">The Uri to convert.</param>
            <returns>The string form of the <paramref name="uri"/> Uri. If the Uri is absolute it returns the
            string form of the <paramref name="uri"/>. If the <paramref name="uri"/> Uri is not absolute 
            it returns the original string of the Uri.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.UriToUrlAttributeValue(System.Uri,System.Boolean)">
            <summary>
            Converts the given <paramref name="uri"/> Uri to a string. 
            If the provided baseUri is not null and is a base Uri of the <paramref name="uri"/> Uri 
            the method returns the string form of the relative Uri.
            </summary>
            <param name="uri">The Uri to convert.</param>
            <param name="failOnRelativeUriWithoutBaseUri">If set to true then this method will fail if the uri specified by <paramref name="uri"/> is relative 
            and no base uri is specified.</param>
            <returns>The string form of the <paramref name="uri"/> Uri. If the Uri is absolute it returns the
            string form of the <paramref name="uri"/>. If the <paramref name="uri"/> Uri is not absolute 
            it returns the original string of the Uri.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.WritePayloadStart">
            <summary>
            Start writing an ATOM payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.WritePayloadEnd">
            <summary>
            Finish writing an ATOM payload.
            </summary>
            <remarks>This method MUST NOT be called after writing an in-stream error 
            as it would fail on unclosed elements (or try to close them).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.WriteTopLevelError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes a top-level error payload.
            </summary>
            <param name="error">The error instance to write.</param>
            <param name="includeDebugInformation">A flag indicating whether error details should be written (in debug mode only) or not.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.WriteDefaultNamespaceAttributes(Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags)">
            <summary>
            Write the namespaces for OData (prefix 'd') and OData metadata (prefix 'm')
            </summary>
            <param name="flags">An enumeration value to indicate what default namespace attributes to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.WriteCount(System.Int64,System.Boolean)">
            <summary>
            Writes the count.
            </summary>
            <param name="count">Count value.</param>
            <param name="includeNamespaceDeclaration">True if the namespace declaration for the metadata namespace should be included; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.WriteBaseUriAndDefaultNamespaceAttributes">
            <summary>
            Write the base Uri of the document (if specified) and the namespaces for OData (prefix 'd') and OData metadata (prefix 'm')
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.WriteElementWithTextContent(System.String,System.String,System.String,System.String)">
            <summary>
            Writes an Xml element with the specified primitive value as content.
            </summary>
            <param name="prefix">The prefix for the element's namespace.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace of the element.</param>
            <param name="textContent">The value to be used as element content.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomSerializer.WriteEmptyElement(System.String,System.String,System.String)">
            <summary>
            Writes an Xml element with empty content.
            </summary>
            <param name="prefix">The prefix for the element's namespace.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace of the element.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomSerializer.XmlWriter">
            <summary>
            Returns the <see cref="P:Microsoft.Data.OData.Atom.ODataAtomSerializer.XmlWriter"/> which is to be used to write the content of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomSerializer.AtomOutputContext">
            <summary>
            The ODataAtomOutputContext used by the serializer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags">
            <summary>
            Flags to describe a set of default namespaces.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags.None">
            <summary>No namespaces.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags.OData">
            <summary>OData namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags.ODataMetadata">
            <summary>OData metadata namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags.Atom">
            <summary>ATOM namespace</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags.GeoRss">
            <summary>GeoRss namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags.Gml">
            <summary>GML namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomSerializer.DefaultNamespaceFlags.All">
            <summary>All default namespaces.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.recursionDepth">
            <summary>
            The current recursion depth of values written by this serializer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteTopLevelProperty(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Writes a single property in ATOM format.
            </summary>
            <param name="property">The property to write out.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteInstanceAnnotations(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.Atom.AtomInstanceAnnotation},Microsoft.Data.OData.InstanceAnnotationWriteTracker)">
            <summary>
            Writes a collection of instance annotations in ATOM format.
            </summary>
            <param name="instanceAnnotations">Instance annotation collection to write.</param>
            <param name="tracker">The tracker to track which instance annotations have been written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteInstanceAnnotation(Microsoft.Data.OData.Atom.AtomInstanceAnnotation)">
            <summary>
            Writes a single instance annotation in ATOM format.
            </summary>
            <param name="instanceAnnotation">The instance annotation to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteProperties(Microsoft.Data.Edm.IEdmStructuredType,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty},System.Boolean,System.Action,System.Action,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.Atom.EpmValueCache,Microsoft.Data.OData.Metadata.EpmSourcePathSegment,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Write the given collection of properties.
            </summary>
            <param name="owningType">The <see cref="T:Microsoft.Data.Edm.IEdmStructuredType"/> of the entry (or null if not metadata is available).</param>
            <param name="cachedProperties">Collection of cached properties for the entry.</param>
            <param name="isWritingCollection">true if we are writing a top level collection instead of an entry.</param>
            <param name="beforePropertiesAction">Action which is called before the properties are written, if there are any property.</param>
            <param name="afterPropertiesAction">Action which is called after the properties are written, if there are any property.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="epmValueCache">Cache of values used in EPM so that we avoid multiple enumerations of properties/items. (can be null)</param>
            <param name="epmSourcePathSegment">The EPM source path segment which points to the property which sub-properites we're writing. (can be null)</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
            <returns>true if anything was written, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WritePrimitiveValue(System.Object,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.SerializationTypeNameAnnotation)">
            <summary>
            Writes a primitive value.
            </summary>
            <param name="value">The value to write.</param>
            <param name="collectionValidator">The collection validator instance.</param>
            <param name="expectedTypeReference">The expected type of the primitive value.</param>
            <param name="typeNameAnnotation">The optional type name annotation provided by the user on the OM for this primitive value. The annotation value will override whatever type name is being written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteComplexValue(Microsoft.Data.OData.ODataComplexValue,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.Boolean,System.Action,System.Action,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,Microsoft.Data.OData.Atom.EpmValueCache,Microsoft.Data.OData.Metadata.EpmSourcePathSegment,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Writes out the value of a complex property.
            </summary>
            <param name="complexValue">The complex value to write.</param>
            <param name="metadataTypeReference">The metadata type for the complex value.</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
            <param name="isWritingCollection">true if we are writing a collection instead of an entry.</param>
            <param name="beforeValueAction">Action called before the complex value is written, if it's actually written.</param>
            <param name="afterValueAction">Action called after the copmlex value is written, if it's actually written.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="collectionValidator">The collection validator instance to validate the type names and type kinds of collection items; null if no validation is needed.</param>
            <param name="epmValueCache">Cache of values used in EPM so that we avoid multiple enumerations of properties/items. (can be null)</param>
            <param name="epmSourcePathSegment">The EPM source path segment which points to the property we're writing. (can be null)</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
            <returns>true if anything was written, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.AssertRecursionDepthIsZero">
            <summary>
            Asserts that the current recursion depth of values is zero. This should be true on all calls into this class from outside of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteCollectionValue(Microsoft.Data.OData.ODataCollectionValue,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.Boolean)">
            <summary>
            Write the items of a collection in ATOM format.
            </summary>
            <param name="collectionValue">The collection value to write.</param>
            <param name="propertyTypeReference">The type reference of the collection value (or null if not metadata is available).</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
            <param name="isWritingCollection">true if we are writing a top-level collection instead of an entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WritePrimitiveInstanceAnnotationValue(Microsoft.Data.OData.ODataPrimitiveValue,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes the value of a primitive instance annotation.
            </summary>
            <param name="primitiveValue">The primitive value to write.</param>
            <param name="expectedTypeReference">The expected type of the annotation from the metadata.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteProperty(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmStructuredType,System.Boolean,System.Boolean,System.Action,Microsoft.Data.OData.Atom.EpmValueCache,Microsoft.Data.OData.Metadata.EpmSourcePathSegment,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Writes a single property in ATOM format.
            </summary>
            <param name="property">The property to write out.</param>
            <param name="owningType">The owning type for the <paramref name="property"/> or null if no metadata is available.</param>
            <param name="isTopLevel">true if writing a top-level property payload; otherwise false.</param>
            <param name="isWritingCollection">true if we are writing a top-level collection instead of an entry.</param>
            <param name="beforePropertyAction">Action which is called before the property is written, if it's going to be written.</param>
            <param name="epmValueCache">Cache of values used in EPM so that we avoid multiple enumerations of properties/items. (can be null)</param>
            <param name="epmParentSourcePathSegment">The EPM source path segment which points to the property which sub-property we're writing. (can be null)</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
            <returns>true if the property was actually written, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteComplexValueProperty(Microsoft.Data.OData.ODataComplexValue,System.String,System.Boolean,System.Boolean,System.Action,Microsoft.Data.OData.Atom.EpmValueCache,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,Microsoft.Data.OData.Metadata.EpmSourcePathSegment,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Writes a property with a complex value in ATOM format.
            </summary>
            <param name="complexValue">The complex value to write.</param>
            <param name="propertyName">The name of the property being written.</param>
            <param name="isTopLevel">true if writing a top-level property payload; otherwise false.</param>
            <param name="isWritingCollection">true if we are writing a top-level collection instead of an entry.</param>
            <param name="beforeValueAction">Action called before the complex value is written, if it's actually written.</param>
            <param name="epmValueCache">Cache of values used in EPM so that we avoid multiple enumerations of properties/items. (can be null)</param>
            <param name="propertyTypeReference">The type information for the property being written.</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
            <param name="epmSourcePathSegment">The EPM source path segment which points to the property we're writing. (can be null)</param>
            <param name="complexValueProjectedProperties">Set of projected properties, or null if all properties should be written.</param>
            <returns>true if anything was written, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteCollectionValueProperty(Microsoft.Data.OData.ODataCollectionValue,System.String,System.Boolean,System.Boolean,System.Action,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean)">
            <summary>
            Writes a property with a collection value in ATOM format.
            </summary>
            <param name="collectionValue">The collection value to write.</param>
            <param name="propertyName">The name of the property being written.</param>
            <param name="isTopLevel">true if writing a top-level property payload; otherwise false.</param>
            <param name="isWritingTopLevelCollection">true if writing a top-level collection payload instead of an entry.</param>
            <param name="beforePropertyAction">Action which is called before the property is written, if it's going to be written.</param>
            <param name="propertyTypeReference">The type reference of the collection value (or null if no metadata is available).</param>
            <param name="isOpenPropertyType">true if this property is undeclared and the owning type is open.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.ShouldWritePropertyInContent(Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.OData.ProjectedPropertiesAnnotation,System.String,System.Object,Microsoft.Data.OData.Metadata.EpmSourcePathSegment)">
            <summary>
            Determines if the property with the specified value should be written into content or not.
            </summary>
            <param name="owningType">The owning type of the property to be checked.</param>
            <param name="projectedProperties">The set of projected properties for the <paramref name="owningType"/></param>
            <param name="propertyName">The name of the property to be checked.</param>
            <param name="propertyValue">The property value to write.</param>
            <param name="epmSourcePathSegment">The EPM source path segment for the property being written.</param>
            <returns>true if the property should be written into content, or false otherwise</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteNullPropertyValue(Microsoft.Data.Edm.IEdmTypeReference,System.String,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Writes a null property value in Atom format.
            </summary>
            <param name="propertyTypeReference">The property type or null if we don't have any.</param>
            <param name="propertyName">The name of the property to write out.</param>
            <param name="isTopLevel">true if writing a top-level property payload; otherwise false.</param>
            <param name="isWritingCollection">true if we are writing a collection instead of an entry.</param>
            <param name="beforePropertyAction">Action which is called before the property is written, if it's going to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WritePropertyStart(System.Action,System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes the property start element.
            </summary>
            <param name="beforePropertyCallback">Action called before anything else is written (if it's not null).</param>
            <param name="propertyName">The name of the property to write.</param>
            <param name="isWritingCollection">true if we are writing a collection instead of an entry.</param>
            <param name="isTopLevel">true if writing a top-level property payload; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WritePropertyEnd">
            <summary>
            Writes the property end element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteInstanceAnnotationStart(Microsoft.Data.OData.Atom.AtomInstanceAnnotation)">
            <summary>
            Writes the instance annotation start element.
            </summary>
            <param name="instanceAnnotation">The the instance annotation to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteInstanceAnnotationEnd">
            <summary>
            Writes the instance annotation end element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WritePropertyTypeAttribute(System.String)">
            <summary>
            Writes the m:type attribute for a property given the name of the type.
            </summary>
            <param name="typeName">The type name to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.WriteNullAttribute">
            <summary>
            Write the m:null attribute with a value of 'true'
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.IncreaseRecursionDepth">
            <summary>
            Increases the recursion depth of values by 1. This will throw if the recursion depth exceeds the current limit.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomPropertyAndValueSerializer.DecreaseRecursionDepth">
            <summary>
            Decreases the recursion depth of values by 1.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkSerializer">
            <summary>
            OData ATOM serializer for entity reference links.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkSerializer.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Writes a single Uri in response to a $links query.
            </summary>
            <param name="entityReferenceLink">The entity reference link to write out.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkSerializer.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary>
            Writes a set of links (Uris) in response to a $links query; includes optional count and next-page-link information.
            </summary>
            <param name="entityReferenceLinks">The entity reference links to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkSerializer.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink,System.Boolean)">
            <summary>
            Writes a single Uri in response to a $links query.
            </summary>
            <param name="entityReferenceLink">The entity reference link to write out.</param>
            <param name="isTopLevel">
            A flag indicating whether the link is written as top-level element or not; 
            this controls whether to include namespace declarations etc.
            </param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer">
            <summary>
            OData ATOM serializer for entries and feeds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.atomEntryMetadataSerializer">
            <summary>
            The serializer for writing ATOM metadata for entries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.atomFeedMetadataSerializer">
            <summary>
            The serializer for writing ATOM metadata for feeds.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteEntryPropertiesStart">
            <summary>
            Writes the start element for the m:properties element on the entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteEntryPropertiesEnd">
            <summary>
            Writes the end element for the m:properties element on the entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteEntryTypeName(System.String,Microsoft.Data.OData.Atom.AtomEntryMetadata)">
            <summary>
            Writes the type name category element for the entry.
            </summary>
            <param name="typeName">The type name to write.</param>
            <param name="entryMetadata">The entry metadata if available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteEntryMetadata(Microsoft.Data.OData.Atom.AtomEntryMetadata,Microsoft.Data.OData.Atom.AtomEntryMetadata,System.String)">
            <summary>
            Write the ATOM metadata for an entry
            </summary>
            <param name="entryMetadata">The entry metadata to write.</param>
            <param name="epmEntryMetadata">The ATOM metadata for the entry which came from EPM.</param>
            <param name="updatedTime">Value for the atom:updated element.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteEntryId(System.String)">
            <summary>
            Writes the entry atom:id element.
            </summary>
            <param name="entryId">The value of the ODataEntry.Id property to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteEntryReadLink(System.Uri,Microsoft.Data.OData.Atom.AtomEntryMetadata)">
            <summary>
            Writes the read link element for an entry.
            </summary>
            <param name="readLink">The read link URL.</param>
            <param name="entryMetadata">The ATOM entry metatadata for the current entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteEntryEditLink(System.Uri,Microsoft.Data.OData.Atom.AtomEntryMetadata)">
            <summary>
            Writes the edit link element for an entry.
            </summary>
            <param name="editLink">The edit link URL.</param>
            <param name="entryMetadata">The ATOM entry metatadata for the current entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteEntryMediaEditLink(Microsoft.Data.OData.ODataStreamReferenceValue)">
            <summary>
            Writes the edit-media link for an entry.
            </summary>
            <param name="mediaResource">The media resource representing the MR of the entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteAssociationLink(Microsoft.Data.OData.ODataAssociationLink,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Write the metadata for an OData association link; makes sure any duplicate of the link's values duplicated in metadata are equal.
            </summary>
            <param name="associationLink">The association link for which to write the metadata.</param>
            <param name="owningType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> instance the association link is defined on.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteNavigationLinkStart(Microsoft.Data.OData.ODataNavigationLink,System.Uri)">
            <summary>
            Writes the navigation link's start element and atom metadata.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
            <param name="navigationLinkUrlOverride">Url to use for the navigation link. If this is specified the Url property on the <paramref name="navigationLink"/>
            will be ignored. If this parameter is null, the Url from the navigation link is used.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteFeedMetadata(Microsoft.Data.OData.ODataFeed,System.String,System.Boolean@)">
            <summary>
            Write the given feed metadata in atom format
            </summary>
            <param name="feed">The feed for which to write the meadata or null if it is the metadata of an atom:source element.</param>
            <param name="updatedTime">Value for the atom:updated element.</param>
            <param name="authorWritten">Set to true if the author element was written, false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteFeedDefaultAuthor">
            <summary>
            Writes the default empty author for a feed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteFeedNextPageLink(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Writes the next page link for a feed.
            </summary>
            <param name="feed">The feed to write the next page link for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteFeedDeltaLink(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Writes the delta link for a feed.
            </summary>
            <param name="feed">The feed to write the delta link for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteFeedLink(Microsoft.Data.OData.ODataFeed,System.String,System.Uri,System.Func{Microsoft.Data.OData.Atom.AtomFeedMetadata,Microsoft.Data.OData.Atom.AtomLinkMetadata})">
            <summary>
            Writes a feed link.
            </summary>
            <param name="feed">The feed that contains the link.</param>
            <param name="relation">Relation attribute of the link.</param>
            <param name="href">href attribute of the link.</param>
            <param name="getLinkMetadata">Function to get the AtomLinkMetadata for the feed link.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteStreamProperty(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Writes a stream property to the ATOM payload
            </summary>
            <param name="streamProperty">The stream property to create the payload for.</param>
            <param name="owningType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> instance for which the stream property defined on.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteOperation(Microsoft.Data.OData.ODataOperation)">
            <summary>
            Writes an operation (an action or a function).
            </summary>
            <param name="operation">The association link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedSerializer.WriteReadOrEditLink(System.Uri,Microsoft.Data.OData.Atom.AtomLinkMetadata,System.String)">
            <summary>
            Writes the self or edit link.
            </summary>
            <param name="link">Uri object for the link.</param>
            <param name="linkMetadata">The atom link metadata for the link to specify title, type, hreflang and length of the link.</param>
            <param name="linkRelation">Relationship value. Either "edit" or "self".</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataSerializer">
            <summary>
            OData ATOM serializer for ATOM metadata in an entry
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer">
            <summary>
            Base class for all OData ATOM Metadata serializers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.WriteTextConstruct(System.String,System.String,System.String,Microsoft.Data.OData.Atom.AtomTextConstruct)">
            <summary>
            Writes an Xml element with the specified primitive value as content.
            </summary>
            <param name="prefix">The prefix for the element's namespace.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace of the element.</param>
            <param name="textConstruct">The <see cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct"/> value to be used as element content.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.WriteCategory(Microsoft.Data.OData.Atom.AtomCategoryMetadata)">
            <summary>
            Writes the 'atom:category' element given category metadata.
            </summary>
            <param name="category">The category information to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.WriteCategory(System.String,System.String,System.String,System.String)">
            <summary>
            Writes the 'atom:category' element with the specified attributes.
            </summary>
            <param name="atomPrefix">The prefix to use for the 'category' element.</param>
            <param name="term">The value for the 'term' attribute (required).</param>
            <param name="scheme">The value for the 'scheme' attribute (optional).</param>
            <param name="label">The value for the 'label' attribute (optional).</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.WriteEmptyAuthor">
            <summary>
            Write an empty author element that has the required name element
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.WritePersonMetadata(Microsoft.Data.OData.Atom.AtomPersonMetadata)">
            <summary>
            Writes the specified start/end tags and the specified person metadata as content
            </summary>
            <param name="personMetadata">The person metadata to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.WriteAtomLink(Microsoft.Data.OData.Atom.AtomLinkMetadata,System.String)">
            <summary>
            Write the metadata of a link in ATOM format
            </summary>
            <param name="linkMetadata">The link metadata to write.</param>
            <param name="etag">The (optional) ETag for a link.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.WriteAtomLinkAttributes(Microsoft.Data.OData.Atom.AtomLinkMetadata,System.String)">
            <summary>
            Write the metadata of a link in ATOM format
            </summary>
            <param name="linkMetadata">The link metadata to write.</param>
            <param name="etag">The (optional) ETag for a link.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataSerializer.WriteAtomLinkMetadataAttributes(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Write the metadata attributes of a link in ATOM format
            </summary>
            <param name="relation">The value for the 'rel' attribute.</param>
            <param name="href">The value for the 'href' attribute.</param>
            <param name="hrefLang">The value for the 'hreflang' attribute.</param>
            <param name="title">The value for the 'title' attribute.</param>
            <param name="mediaType">The value for the 'type' attribute.</param>
            <param name="length">The value for the 'length' attribute.</param>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataSerializer.sourceMetadataSerializer">
            <summary>
            Feed ATOM metadata serializer for serializing the atom:source element in an entry.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataSerializer.WriteEntryMetadata(Microsoft.Data.OData.Atom.AtomEntryMetadata,Microsoft.Data.OData.Atom.AtomEntryMetadata,System.String)">
            <summary>
            Write the ATOM metadata for an entry
            </summary>
            <param name="entryMetadata">The entry metadata to write.</param>
            <param name="epmEntryMetadata">The ATOM metadata for the entry which came from EPM.</param>
            <param name="updatedTime">Value for the atom:updated element.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataSerializer.SourceMetadataSerializer">
            <summary>
            Feed ATOM metadata serializer for serializing the atom:source element in an entry.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataSerializer">
            <summary>
            OData ATOM serializer for ATOM metadata in a feed
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataSerializer.WriteFeedMetadata(Microsoft.Data.OData.Atom.AtomFeedMetadata,Microsoft.Data.OData.ODataFeed,System.String,System.Boolean@)">
            <summary>
            Write the given feed metadata in atom format
            </summary>
            <param name="feedMetadata">The metadata to write.</param>
            <param name="feed">The feed for which to write the meadata or null if it is the metadata of an atom:source element.</param>
            <param name="updatedTime">Value for the atom:updated element.</param>
            <param name="authorWritten">Set to true if the author element was written, false otherwise.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomFormat">
            <summary>
            The ATOM OData format.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataFormat">
            <summary>
            Representation of an OData format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFormat.atomFormat">
            <summary>The ATOM format instance.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFormat.verboseJsonFormat">
            <summary>The verbose JSON format instance.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFormat.jsonLightFormat">
            <summary>The JSON Light format instance.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFormat.rawValueFormat">
            <summary>The RAW format instance.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFormat.batchFormat">
            <summary>The batch format instance.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFormat.metadataFormat">
            <summary>The metadata format instance.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFormat.DetectPayloadKind(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFormat.DetectPayloadKind(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFormat.CreateInputContext(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>The newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFormat.CreateOutputContext(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>The newly created output context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataResponseMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataRequestMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFormat.CreateInputContextAsync(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Asynchronously creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>Task which when completed returned the newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFormat.CreateOutputContextAsync(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>Task which represents the pending create operation.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFormat.Atom">
            <summary>Specifies the ATOM format; we also use this for all Xml based formats (if ATOM can't be used).</summary>
            <returns>The ATOM format.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFormat.VerboseJson">
            <summary>Gets the verbose JSON format.</summary>
            <returns>The verbose JSON format.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFormat.Json">
            <summary>Specifies the JSON format.</summary>
            <returns>The JSON format.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFormat.RawValue">
            <summary>Specifies the RAW format; used for raw values.</summary>
            <returns>The RAW format.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFormat.Batch">
            <summary>Gets the batch format instance.</summary>
            <returns>The batch format instance.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFormat.Metadata">
            <summary>Gets the metadata format instance.</summary>
            <returns>The metadata format instance.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.ToString">
            <summary>
            The text representation - the name of the format.
            </summary>
            <returns>The name of the format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.DetectPayloadKind(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.DetectPayloadKind(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.CreateInputContext(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>The newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.CreateOutputContext(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>The newly created output context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataResponseMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataRequestMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.CreateInputContextAsync(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Asynchronously creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>Task which when completed returned the newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.CreateOutputContextAsync(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>Task which represents the pending create operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFormat.DetectPayloadKindImplementation(System.IO.Stream,System.Boolean,System.Boolean,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="messageStream">The message stream to read from for payload kind detection.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero or more payload kinds depending on what payload kinds were detected.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomOutputContext">
            <summary>
            ATOM format output context.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataOutputContext">
            <summary>
            Base class for all output contexts, defines the interface 
            to be implemented by the specific formats.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOutputContext.format">
            <summary>The format for this output context.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOutputContext.messageWriterSettings">
            <summary>The message writer settings to be used for writing.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOutputContext.writingResponse">
            <summary>Set to true if this context is writing a response payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOutputContext.synchronous">
            <summary>true if the input should be written synchronously; false if it should be written asynchronously.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOutputContext.model">
            <summary>The model to use.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOutputContext.urlResolver">
            <summary>The optional URL resolver to perform custom URL resolution for URLs written to the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOutputContext.edmTypeResolver">
            <summary>The type resolver to use.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.#ctor(Microsoft.Data.OData.ODataFormat,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="synchronous">true if the output should be written synchronously; false if it should be written asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.Dispose">
            <summary>
            IDisposable.Dispose() implementation to cleanup unmanaged resources of the context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteInStreamError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to flush the output before the method returns.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteInStreamErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>Task which represents the pending write operation.</returns>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to make sure that all the data up to this point are written before
            the in-stream error is written.
            It is the responsibility of this method to flush the output before the task finishes.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataFeedWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataFeedWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataEntryWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataEntryWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataCollectionWriter(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>The created collection writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataCollectionWriterAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>A running task for the created collection writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataBatchWriter(System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataBatchWriter"/> to write a batch of requests or responses.
            </summary>
            <param name="batchBoundary">The boundary string for the batch structure itself.</param>
            <returns>The created batch writer.</returns>
            <remarks>We don't plan to make this public!</remarks>
            <remarks>
            The write must flush the output when it's finished (inside the last Write call).
            Since we don't want to support batch format extensibility (at least not yet) this method should remain internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataBatchWriterAsync(System.String)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataBatchWriter"/> to write a batch of requests or responses.
            </summary>
            <param name="batchBoundary">The boundary string for the batch structure itself.</param>
            <returns>A running task for the created batch writer.</returns>
            <remarks>We don't plan to make this public!</remarks>
            <remarks>
            The write must flush the output when it's finished (inside the last Write call).
            Since we don't want to support batch format extensibility (at least not yet) this method should remain internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataParameterWriter(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>The created parameter writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreateODataParameterWriterAsync(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>A running task for the created parameter writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteServiceDocumentAsync(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Asynchronously writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
            <returns>A task representing the asynchronous operation of writing the service document.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteProperty(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WritePropertyAsync(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write</param>
            <returns>A task representing the asynchronous operation of writing the property.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>A task representing the asynchronous operation of writing the error.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteEntityReferenceLinksAsync(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <returns>A task representing the asynchronous writing of the entity reference links.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The entity reference link to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteEntityReferenceLinkAsync(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The link result to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <returns>A running task representing the writing of the link.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteValue(System.Object)">
            <summary>
            Writes a single value as the message body.
            </summary>
            <param name="value">The value to write.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteValueAsync(System.Object)">
            <summary>
            Asynchronously writes a single value as the message body.
            </summary>
            <param name="value">The value to write.</param>
            <returns>A running task representing the writing of the value.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.WriteMetadataDocument">
            <summary>
            Writes the metadata document as the message body.
            </summary>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.AssertSynchronous">
            <summary>
            Asserts that the input context was created for synchronous operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.AssertAsynchronous">
            <summary>
            Asserts that the input context was created for asynchronous operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOutputContext.CreatePayloadKindNotSupportedException(Microsoft.Data.OData.ODataPayloadKind)">
            <summary>
            Creates an exception which reports that the specified payload kind if not support by this format.
            </summary>
            <param name="payloadKind">The payload kind which is not supported.</param>
            <returns>An exception to throw.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.MessageWriterSettings">
            <summary>
            The message writer settings to be used for writing.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.Version">
            <summary>
            The version of the OData protocol to use.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.WritingResponse">
            <summary>
            Set to true if a response is being written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.Synchronous">
            <summary>
            true if the output should be written synchronously; false if it should be written asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.Model">
            <summary>
            The model to use or null if no metadata is available.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.UrlResolver">
            <summary>
            The optional URL resolver to perform custom URL resolution for URLs written to the payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.EdmTypeResolver">
            <summary>
            The type resolver to use.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.UseClientFormatBehavior">
            <summary>
            true if the WCF DS client compatibility format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.UseServerFormatBehavior">
            <summary>
            true if the WCF DS server compatibility format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.UseDefaultFormatBehavior">
            <summary>
            true if the default format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOutputContext.UseServerApiBehavior">
            <summary>
            true if the WCF DS server compatibility API behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomOutputContext.typeNameOracle">
            <summary>
            The oracle to use to determine the type name to write for entries and values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomOutputContext.messageOutputStream">
            <summary>The message output stream.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomOutputContext.asynchronousOutputStream">
            <summary>The asynchronous output stream if we're writing asynchronously.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomOutputContext.xmlRootWriter">
            <summary>The XML writer created for the root of the payload.</summary>
            <remarks>
            This field is also used to determine if the output context has been disposed already.
            In case of customized writers are used, this is always the root writer, never changed.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomOutputContext.xmlWriter">
            <summary>The XML writer to write to.</summary>
            <remarks>In case of customized writers are used, this is the current writer to write to.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomOutputContext.xmlCustomizationWriters">
            <summary>A stack used to track XML customization writers.</summary>
            <remarks>
            At the beginning the root writer is pushed to the stack.
            Each non-null entry has an item on this stack.
            If the XML customization was used for a given entry the writer returned by the customization will be pushed to the stack for it.
            This is only used from ODataAtomWriter, other writers don't use this.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomOutputContext.outputInStreamErrorListener">
            <summary>An in-stream error listener to notify when in-stream error is to be written. Or null if we don't need to notify anybody.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="messageStream">The message stream to write the payload to.</param>
            <param name="encoding">The encoding to use for the payload.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="synchronous">true if the output should be written synchronously; false if it should be written asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.Flush">
            <summary>
            Synchronously flush the writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.FlushAsync">
            <summary>
            Asynchronously flush the writer.
            </summary>
            <returns>Task which represents the pending flush operation.</returns>
            <remarks>The method should not throw directly if the flush operation itself fails, it should instead return a faulted task.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteInStreamError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to flush the output before the method returns.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteInStreamErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>Task which represents the pending write operation.</returns>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to make sure that all the data up to this point are written before
            the in-stream error is written.
            It is the responsibility of this method to flush the output before the task finishes.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataFeedWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataFeedWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataEntryWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataEntryWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataCollectionWriter(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>The created collection writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataCollectionWriterAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>A running task for the created collection writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteServiceDocumentAsync(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Asynchronously writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
            <returns>A task representing the asynchronous operation of writing the service document.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteProperty(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WritePropertyAsync(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write</param>
            <returns>A task representing the asynchronous operation of writing the property.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>A task representing the asynchronous operation of writing the error.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteEntityReferenceLinksAsync(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <returns>A task representing the asynchronous writing of the entity reference links.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The entity reference link to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteEntityReferenceLinkAsync(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The link result to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <returns>A running task representing the writing of the link.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.InitializeWriterCustomization">
            <summary>
            Initializes the ability to use customization writers.
            </summary>
            <remarks>
            This needs to be called before any of the writer customization functionality is used.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.PushCustomWriter(System.Xml.XmlWriter)">
            <summary>
            Pushes a writer on the top of the customization stack.
            </summary>
            <param name="customXmlWriter">The writer to push.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.PopCustomWriter">
            <summary>
            Pops a writer from the top of the customization stack.
            </summary>
            <returns>The popped writer, the one which was on the top of the stack before the operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteInStreamErrorImplementation(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an in-stream error.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataFeedWriterImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataEntryWriterImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.CreateODataCollectionWriterImplementation(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>The created collection writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WritePropertyImplementation(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteServiceDocumentImplementation(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteErrorImplementation(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteEntityReferenceLinksImplementation(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary>
            Writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomOutputContext.WriteEntityReferenceLinkImplementation(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The entity reference link to write as message payload.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomOutputContext.XmlWriter">
            <summary>
            Returns the <see cref="P:Microsoft.Data.OData.Atom.ODataAtomOutputContext.XmlWriter"/> which is to be used to write the content of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomOutputContext.TypeNameOracle">
            <summary>
            Returns the oracle to use when determining the type name to write for entries and values.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomReaderNavigationLinkDescriptor">
            <summary>
            Instance of this class describes a navigation link when it's found in the payload.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReaderNavigationLinkDescriptor.navigationLink">
            <summary>The navigation link.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReaderNavigationLinkDescriptor.navigationProperty">
            <summary>The navigation property for the link, is it's available.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReaderNavigationLinkDescriptor.#ctor(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Constructor.
            </summary>
            <param name="navigationLink">The navigation link.</param>
            <param name="navigationProperty">The navigation property for the link, if it's available.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReaderNavigationLinkDescriptor.NavigationLink">
            <summary>The navigation link.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReaderNavigationLinkDescriptor.NavigationProperty">
            <summary>The navigation property for the link, if it's available.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator">
            <summary>
            Helper class to verify that all items of a collection are of the same kind and type.
            </summary>
            <remarks>This class is only used if no expected item type is specified for the collection; 
            otherwise all items are already validated against the expected item type.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.itemTypeDerivedFromCollectionValue">
            <summary>true if the item type was derived from the collection value; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.itemTypeName">
            <summary>The item type name extracted from the first non-null item.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.primitiveItemType">
            <summary>
            The primitive type denoted by the item type name or null if the type name is not a valid primitive type name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.itemTypeKind">
            <summary>The item type kind from the first non-null item.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="itemTypeNameFromCollection">The item type name extracted from the collection type name.</param>
        </member>
        <member name="M:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.ValidateCollectionItem(System.String,Microsoft.Data.Edm.EdmTypeKind)">
            <summary>
            Validates a collection item that was read to make sure it is valid (i.e., has the correct
            type name and type kind) with respect to the other items in the collection.
            </summary>
            <param name="collectionItemTypeName">The type name of the item from the payload.</param>
            <param name="collectionItemTypeKind">The type kind of the item from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.ComputeExpectedTypeKind(System.String,Microsoft.Data.Edm.IEdmPrimitiveType@)">
            <summary>
            Computes the expected type kind of an item from the type name read from the payload.
            </summary>
            <param name="typeName">The type name to compute the type kind from.</param>
            <param name="primitiveItemType">The primitive type for the specified type name or null if the type name is not a valid primitve type.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.EdmTypeKind"/> of the type with the specified <paramref name="typeName"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.ValidateCollectionItemTypeNameAndKind(System.String,Microsoft.Data.Edm.EdmTypeKind)">
            <summary>
            Validate that the expected and actual type names and type kinds are compatible.
            </summary>
            <param name="collectionItemTypeName">The actual type name.</param>
            <param name="collectionItemTypeKind">The actual type kind.</param>
        </member>
        <member name="P:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.ItemTypeNameFromCollection">
            <summary>
            If specified on a collection, returns the item type name that all items are expected to be compatible with; otherwise null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator.ItemTypeKindFromCollection">
            <summary>
            If specified on a collection, returns the item type kind that all items are expected to be compatible with; otherwise EdmTypeKind.None.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.BufferingReadStream">
            <summary>
            Read-only stream which initially buffers all read data in order to replay it later.
            Once no more buffered data exists it reads from the underlying stream directly.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferingReadStream.buffers">
            <summary>The list of buffered chunks of bytes as requested by callers.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferingReadStream.innerStream">
            <summary>
            The stream being wrapped.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferingReadStream.positionInCurrentBuffer">
            <summary>The read position in the current buffer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferingReadStream.bufferingModeDisabled">
            <summary>
            true if the reader is not in buffering mode; otherwise false.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferingReadStream.currentReadNode">
            <summary>
            The current node in the buffer list to read from.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The underlying stream to wrap. Note that only read operations will be invoked on this stream.</param>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.Flush">
            <summary>
            Not supported since the stream only allows reading.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the buffer or the underlying stream.
            </summary>
            <param name="userBuffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the stream. This operation is not supported by this stream.
            </summary>
            <param name="offset">The offset to seek to.</param>
            <param name="origin">The origin of the seek operation.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This operation is not supported by this stream.
            </summary>
            <param name="value">The length in bytes to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream. This operation is not supported by this stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.ResetStream">
            <summary>
            Stops the buffering mode and turns the reader into normal read mode where first
            the buffered data is re-read before the reads are performed on the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.StopBuffering">
            <summary>
            Stop buffering.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True if called from Dispose; false if called from the finalizer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.BufferingReadStream.MoveToNextBuffer">
            <summary>
            Moves the reader to the next buffer and drops already consumed
            data if not in buffering mode.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferingReadStream.CanRead">
            <summary>
            Determines if the stream can read - this one can.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferingReadStream.CanSeek">
            <summary>
            Determines if the stream can seek - this one cannot
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferingReadStream.CanWrite">
            <summary>
            Determines if the stream can write - this one cannot
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferingReadStream.Length">
            <summary>
            Returns the length of the stream, which this implementation doesn't support.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferingReadStream.Position">
            <summary>
            Gets or sets the position in the stream, this stream doesn't support seeking, so position is also unsupported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferingReadStream.IsBuffering">
            <summary>
            true if the stream is in buffering mode; otherwise false.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext">
            <summary>
            Interface used for substitutability of the metadata-centric responsibilities of an entry.
            Metadata may come from a user-provided model or from the SetSerializationInfo() method on a feed or entry. The latter is considered the "no-model" case since only strings
            are provided, and there is no interconnectedness. The goal of this interface is to provide a way to query the metadata information available on an entry without
            needing to know where the metadata originated from.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext.Entry">
            <summary>
            The entry instance.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext.TypeContext">
            <summary>
            The context object to answer basic questions regarding the type of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext.ActualEntityTypeName">
            <summary>
            The actual entity type of the entry, i.e. ODataEntry.TypeName.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext.KeyProperties">
            <summary>
            The key property name and value pairs of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext.ETagProperties">
            <summary>
            The ETag property name and value pairs of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext.SelectedNavigationProperties">
            <summary>
            The selected navigation properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext.SelectedStreamProperties">
            <summary>
            The selected stream properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext.SelectedAlwaysBindableOperations">
            <summary>
            The selected always bindable operations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder">
            <summary>
            Implementation of the metadata builder which only returns values which were explicitly set (never computing or modifying them).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder">
            <summary>
            Extensibility point for customizing how OData entity metadata (edit-links, IDs, ETags, etc) is built.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetEditLink">
            <summary>
            Gets the edit link of the entity.
            </summary>
            <returns>
            The absolute URI of the edit link for the entity.
            Or null if it is not possible to determine the edit link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetReadLink">
            <summary>
            Gets the read link of the entity.
            </summary>
            <returns>
            The absolute URI of the read link for the entity.
            Or null if it is not possible to determine the read link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetId">
            <summary>
            Gets the ID of the entity.
            </summary>
            <returns>
            The ID for the entity.
            Or null if it is not possible to determine the ID.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetETag">
            <summary>
            Gets the ETag of the entity.
            </summary>
            <returns>
            The ETag for the entity.
            Or null if it is not possible to determine the ETag.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetMediaResource">
            <summary>
            Gets the default media resource of the entity.
            </summary>
            <returns>
            The the default media resource of the entity.
            Or null if the entity is not an MLE.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetProperties(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty})">
            <summary>
            Gets the entity properties.
            </summary>
            <param name="nonComputedProperties">Non-computed properties from the entity.</param>
            <returns>The the computed and non-computed entity properties.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetActions">
            <summary>
            Gets the list of computed and non-computed actions for the entity.
            </summary>
            <returns>The list of computed and non-computed actions for the entity.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetFunctions">
            <summary>
            Gets the list of computed and non-computed functions for the entity.
            </summary>
            <returns>The list of computed and non-computed functions for the entity.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.MarkNavigationLinkProcessed(System.String)">
            <summary>
            Marks the given navigation link as processed.
            </summary>
            <param name="navigationPropertyName">The navigation link we've already processed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetNextUnprocessedNavigationLink">
            <summary>
            Returns the next unprocessed navigation link or null if there's no more navigation links to process.
            </summary>
            <returns>Returns the next unprocessed navigation link or null if there's no more navigation links to process.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetStreamEditLink(System.String)">
            <summary>
            Gets the edit link of a stream value.
            </summary>
            <param name="streamPropertyName">The name of the stream property the edit link is computed for; 
            or null for the default media resource.</param>
            <returns>
            The absolute URI of the edit link for the specified stream property or the default media resource.
            Or null if it is not possible to determine the stream edit link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetStreamReadLink(System.String)">
            <summary>
            Gets the read link of a stream value.
            </summary>
            <param name="streamPropertyName">The name of the stream property the read link is computed for; 
            or null for the default media resource.</param>
            <returns>
            The absolute URI of the read link for the specified stream property or the default media resource.
            Or null if it is not possible to determine the stream read link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetNavigationLinkUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Gets the navigation link URI for the specified navigation property.
            </summary>
            <param name="navigationPropertyName">The name of the navigation property to get the navigation link URI for.</param>
            <param name="navigationLinkUrl">The value of the link URI as seen on the wire or provided explicitly by the user or previously returned by the metadata builder, which may be null.</param>
            <param name="hasNavigationLinkUrl">true if the value of the <paramref name="navigationLinkUrl"/> was seen on the wire or provided explicitly by the user or previously returned by
            the metadata builder, false otherwise. This flag allows the metadata builder to determine whether a null navigation link url is an uninitialized value or a value that was set explicitly.</param>
            <returns>
            The navigation link URI for the navigation property.
            null if its not possible to determine the navigation link for the specified navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetAssociationLinkUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Gets the association link URI for the specified navigation property.
            </summary>
            <param name="navigationPropertyName">The name of the navigation property to get the association link URI for.</param>
            <param name="associationLinkUrl">The value of the link URI as seen on the wire or provided explicitly by the user or previously returned by the metadata builder, which may be null.</param>
            <param name="hasAssociationLinkUrl">true if the value of the <paramref name="associationLinkUrl"/> was seen on the wire or provided explicitly by the user or previously returned by
            the metadata builder, false otherwise. This flag allows the metadata builder to determine whether a null association link url is an uninitialized value or a value that was set explicitly.</param>
            <returns>
            The association link URI for the navigation property.
            null if its not possible to determine the association link for the specified navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetOperationTargetUri(System.String,System.String)">
            <summary>
            Get the operation target URI for the specified <paramref name="operationName"/>.
            </summary>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <param name="bindingParameterTypeName">The binding parameter type name to include in the target, or null/empty if there is none.</param>
            <returns>
            The target URI for the operation.
            null if it is not possible to determine the target URI for the specified operation.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.GetOperationTitle(System.String)">
            <summary>
            Get the operation title for the specified <paramref name="operationName"/>.
            </summary>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <returns>
            The title for the operation.
            null if it is not possible to determine the title for the specified operation.
            </returns>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.Null">
            <summary>
            Gets an instance of the metadata builder which never returns anything other than nulls.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.NullEntityMetadataBuilder">
            <summary>
            Implementation of the metadata builder which only returns nulls.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.NullEntityMetadataBuilder.Instance">
            <summary>
            Singleton instance of the null metadata builder.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.NullEntityMetadataBuilder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.NullEntityMetadataBuilder"/> class from being created.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.NullEntityMetadataBuilder.GetEditLink">
            <summary>
            Gets the edit link of the entity.
            </summary>
            <returns>
            The absolute URI of the edit link for the entity.
            Or null if it is not possible to determine the edit link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.NullEntityMetadataBuilder.GetReadLink">
            <summary>
            Gets the read link of the entity.
            </summary>
            <returns>
            The absolute URI of the read link for the entity.
            Or null if it is not possible to determine the read link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.NullEntityMetadataBuilder.GetId">
            <summary>
            Gets the ID of the entity.
            </summary>
            <returns>
            The ID for the entity.
            Or null if it is not possible to determine the ID.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder.NullEntityMetadataBuilder.GetETag">
            <summary>
            Gets the ETag of the entity.
            </summary>
            <returns>
            The ETag for the entity.
            Or null if it is not possible to determine the ETag.
            </returns>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.entry">
            <summary>
            The entry whose payload metadata is being queried.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.#ctor(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Creates a new no-op metadata builder.
            </summary>
            <param name="entry">The entry whose payload metadata is being queried.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetEditLink">
            <summary>
            Gets the edit link of the entity.
            </summary>
            <returns>
            The absolute URI of the edit link for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetReadLink">
            <summary>
            Gets the read link of the entity.
            </summary>
            <returns>
            The absolute URI of the read link for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetId">
            <summary>
            Gets the ID of the entity.
            </summary>
            <returns>
            The ID for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetETag">
            <summary>
            Gets the ETag of the entity.
            </summary>
            <returns>
            The ETag for the entity.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetMediaResource">
            <summary>
            Gets the default media resource of the entity.
            </summary>
            <returns>
            The the default media resource of the entity.
            Or null if the entity is not an MLE.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetProperties(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty})">
            <summary>
            Gets the entity properties.
            </summary>
            <param name="nonComputedProperties">Non-computed properties from the entity.</param>
            <returns>The the computed and non-computed entity properties.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetActions">
            <summary>
            Gets the list of computed and non-computed actions for the entity.
            </summary>
            <returns>The list of computed and non-computed actions for the entity.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetFunctions">
            <summary>
            Gets the list of computed and non-computed functions for the entity.
            </summary>
            <returns>The list of computed and non-computed functions for the entity.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetNavigationLinkUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Gets the navigation link URI for the specified navigation property.
            </summary>
            <param name="navigationPropertyName">The name of the navigation property to get the navigation link URI for.</param>
            <param name="navigationLinkUrl">The value of the link URI as seen on the wire or provided explicitly by the user or previously returned by the metadata builder, which may be null.</param>
            <param name="hasNavigationLinkUrl">true if the value of the <paramref name="navigationLinkUrl"/> was seen on the wire or provided explicitly by the user or previously returned by
            the metadata builder, false otherwise. This flag allows the metadata builder to determine whether a null navigation link url is an uninitialized value or a value that was set explicitly.</param>
            <returns>
            The navigation link URI for the navigation property.
            null if its not possible to determine the navigation link for the specified navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.NoOpEntityMetadataBuilder.GetAssociationLinkUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Gets the association link URI for the specified navigation property.
            </summary>
            <param name="navigationPropertyName">The name of the navigation property to get the association link URI for.</param>
            <param name="associationLinkUrl">The value of the link URI as seen on the wire or provided explicitly by the user or previously returned by the metadata builder, which may be null.</param>
            <param name="hasAssociationLinkUrl">true if the value of the <paramref name="associationLinkUrl"/> was seen on the wire or provided explicitly by the user or previously returned by
            the metadata builder, false otherwise. This flag allows the metadata builder to determine whether a null association link url is an uninitialized value or a value that was set explicitly.</param>
            <returns>
            The association link URI for the navigation property.
            null if its not possible to determine the association link for the specified navigation property.
            </returns>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext">
            <summary>
            Default implementation of <see cref="T:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext"/>
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.EmptyProperties">
            <summary>
            Empty array of properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.entry">
            <summary>
            The entry instance.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.typeContext">
            <summary>
            The context object to answer basic questions regarding the type of the entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.keyProperties">
            <summary>
            The key property name and value pairs of the entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.etagProperties">
            <summary>
            The ETag property name and value pairs of the entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.selectedNavigationProperties">
            <summary>
            The selected navigation properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.selectedStreamProperties">
            <summary>
            The selected stream properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.selectedAlwaysBindableOperations">
            <summary>
            The selected always bindable operations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.#ctor(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.IODataFeedAndEntryTypeContext)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext"/>.
            </summary>
            <param name="entry">The entry instance.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.Create(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.IODataFeedAndEntryTypeContext,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.Evaluation.IODataMetadataContext,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext"/>.
            </summary>
            <param name="entry">The entry instance.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry.</param>
            <param name="serializationInfo">The serialization info of the entry for writing without model.</param>
            <param name="actualEntityType">The entity type of the entry.</param>
            <param name="metadataContext">The metadata context to use.</param>
            <param name="selectedProperties">The selected properties.</param>
            <returns>A new instance of <see cref="T:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.GetPrimitivePropertyClrValue(Microsoft.Data.OData.ODataEntry,System.String,System.String,System.Boolean)">
            <summary>
            Gets the the CLR value for a primitive property.
            </summary>
            <param name="entry">The entry to get the property value.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="entityTypeName">The name of the entity type to get the property value.</param>
            <param name="isKeyProperty">true if the property is a key property, false otherwise.</param>
            <returns>The clr value of the property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.GetPrimitivePropertyClrValue(System.String,Microsoft.Data.OData.ODataProperty,System.Boolean)">
            <summary>
            Gets the CLR value for a primitive property.
            </summary>
            <param name="entityTypeName">The name of the entity type to get the property value.</param>
            <param name="property">The ODataProperty to get the value from.</param>
            <param name="isKeyProperty">true if the property is a key property, false otherwise.</param>
            <returns>The clr value of the property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ValidateEntityTypeHasKeyProperties(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.String)">
            <summary>
            Validates that the entry has key properties.
            </summary>
            <param name="keyProperties">Key properties of the entry.</param>
            <param name="actualEntityTypeName">The entity type name of the entry.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.Entry">
            <summary>
            The entry instance.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.TypeContext">
            <summary>
            The context object to answer basic questions regarding the type of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ActualEntityTypeName">
            <summary>
            The actual entity type of the entry, i.e. ODataEntry.TypeName.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.KeyProperties">
            <summary>
            The key property name and value pairs of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ETagProperties">
            <summary>
            The ETag property name and value pairs of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.SelectedNavigationProperties">
            <summary>
            The selected navigation properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.SelectedStreamProperties">
            <summary>
            The selected stream properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.SelectedAlwaysBindableOperations">
            <summary>
            The selected always bindable operations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel">
            <summary>
            Implementation of <see cref="T:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext"/> based on serialization info.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.EmptyNavigationProperties">
            <summary>
            Empty array of navigation properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.EmptyStreamProperties">
            <summary>
            Empty dictionary of stream properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.EmptyOperations">
            <summary>
            Empty array of operations.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.serializationInfo">
            <summary>
            The serialization info of the entry for writing without model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.#ctor(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.IODataFeedAndEntryTypeContext,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel"/>.
            </summary>
            <param name="entry">The entry instance.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry.</param>
            <param name="serializationInfo">The serialization info of the entry for writing without model.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.GetPropertiesBySerializationInfoPropertyKind(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataPropertyKind,System.String)">
            <summary>
            Gets the property name value pairs filtered by serialization property kind.
            </summary>
            <param name="entry">The entry to get the properties from.</param>
            <param name="propertyKind">The serialization info property kind.</param>
            <param name="actualEntityTypeName">The entity type name of the entry.</param>
            <returns>The property name value pairs filtered by serialization property kind.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.KeyProperties">
            <summary>
            The key property name and value pairs of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.ETagProperties">
            <summary>
            The ETag property name and value pairs of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.ActualEntityTypeName">
            <summary>
            The actual entity type of the entry, i.e. ODataEntry.TypeName.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.SelectedNavigationProperties">
            <summary>
            The selected navigation properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.SelectedStreamProperties">
            <summary>
            The selected stream properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithoutModel.SelectedAlwaysBindableOperations">
            <summary>
            The selected always bindable operations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel">
            <summary>
            Implementation of <see cref="T:Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext"/> based on the given model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.actualEntityType">
            <summary>
            The entity type of the entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.metadataContext">
            <summary>
            The metadata context to use.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.selectedProperties">
            <summary>
            The selected properties.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.#ctor(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.IODataFeedAndEntryTypeContext,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.Evaluation.IODataMetadataContext,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel"/>.
            </summary>
            <param name="entry">The entry instance.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry.</param>
            <param name="actualEntityType">The entity type of the entry.</param>
            <param name="metadataContext">The metadata context to use.</param>
            <param name="selectedProperties">The selected properties.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.KeyProperties">
            <summary>
            The key property name and value pairs of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.ETagProperties">
            <summary>
            The ETag property name and value pairs of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.ActualEntityTypeName">
            <summary>
            The actual entity type name of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.SelectedNavigationProperties">
            <summary>
            The selected navigation properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.SelectedStreamProperties">
            <summary>
            The selected stream properties.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEntryMetadataContext.ODataEntryMetadataContextWithModel.SelectedAlwaysBindableOperations">
            <summary>
            The selected always bindable operations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.IODataMetadataContext">
            <summary>
            Interface used for substitutability of the metadata-centric responsibilities of <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.IODataMetadataContext.GetEntityMetadataBuilderForReader(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState)">
            <summary>
            Gets an entity metadata builder for the given entry.
            </summary>
            <param name="entryState">Entry state to use as reference for information needed by the builder.</param>
            <returns>An entity metadata builder.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.IODataMetadataContext.GetAlwaysBindableOperationsForType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Gets the list of operations that are always bindable to a type.
            </summary>
            <param name="bindingType">The binding type in question.</param>
            <returns>The list of operations that are always bindable to a type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.IODataMetadataContext.OperationsBoundToEntityTypeMustBeContainerQualified(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Determines whether operations bound to this type must be qualified with the operation they belong to when appearing in a $select clause.
            </summary>
            <param name="entityType">The entity type the operations are bound to.</param>
            <returns>True if the operations must be container qualified, otherwise false.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataMetadataContext.Model">
            <summary>
            Gets the Edm Model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataMetadataContext.ServiceBaseUri">
            <summary>
            Gets the service base Uri.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.IODataMetadataContext.MetadataDocumentUri">
            <summary>
            Gets the metadata document uri.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataMetadataContext">
            <summary>
            Default implementation of <see cref="T:Microsoft.Data.OData.Evaluation.IODataMetadataContext"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMetadataContext.model">
            <summary>
            The Edm Model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMetadataContext.edmTypeResolver">
            <summary>
            EdmTypeResolver instance to resolve entity set base type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMetadataContext.alwaysBindableOperationsCache">
            <summary>
            Cache of operations that are always bindable to entity types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMetadataContext.isResponse">
            <summary>
            true if we are reading or writing a response payload, false otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMetadataContext.operationsBoundToEntityTypeMustBeContainerQualified">
            <summary>
            Callback to determine whether operations bound to this type must be qualified with the operation they belong to when appearing in a $select clause.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMetadataContext.metadataDocumentUri">
            <summary>
            The metadata document Uri.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMetadataContext.serviceBaseUri">
            <summary>
            The service base Uri.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMetadataContext.#ctor(System.Boolean,Microsoft.Data.Edm.IEdmModel,System.Uri)">
            <summary>
            Constructs an ODataMetadataContext.
            </summary>
            <param name="isResponse">true if we are writing a response payload, false otherwise.</param>
            <param name="model">The Edm model.</param>
            <param name="metadataDocumentUri">The metadata document uri.</param>
            <remarks>This overload should only be used by the writer.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMetadataContext.#ctor(System.Boolean,System.Func{Microsoft.Data.Edm.IEdmEntityType,System.Boolean},Microsoft.Data.OData.Metadata.EdmTypeResolver,Microsoft.Data.Edm.IEdmModel,System.Uri)">
            <summary>
            Constructs an ODataMetadataContext.
            </summary>
            <param name="isResponse">true if we are reading a response payload, false otherwise.</param>
            <param name="operationsBoundToEntityTypeMustBeContainerQualified">Callback to determine whether operations bound to this type must be qualified with the operation they belong to when appearing in a $select clause.</param>
            <param name="edmTypeResolver">EdmTypeResolver instance to resolve entity set base type.</param>
            <param name="model">The Edm model.</param>
            <param name="metadataDocumentUri">The metadata document Uri.</param>
            <remarks>This overload should only be used by the reader.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMetadataContext.GetEntityMetadataBuilderForReader(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState)">
            <summary>
            Gets an entity metadata builder for the given entry.
            </summary>
            <param name="entryState">Entry state to use as reference for information needed by the builder.</param>
            <returns>An entity metadata builder.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMetadataContext.GetAlwaysBindableOperationsForType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Gets the list of operations that are always bindable to a type.
            </summary>
            <param name="bindingType">The binding type in question.</param>
            <returns>The list of operations that are always bindable to a type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMetadataContext.OperationsBoundToEntityTypeMustBeContainerQualified(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Determines whether operations bound to this type must be qualified with the operation they belong to when appearing in a $select clause.
            </summary>
            <param name="entityType">The entity type the operations are bound to.</param>
            <returns>True if the operations must be container qualified, otherwise false.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataMetadataContext.Model">
            <summary>
            Gets the Edm Model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataMetadataContext.ServiceBaseUri">
            <summary>
            Gets the service base Uri.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataMetadataContext.MetadataDocumentUri">
            <summary>
            Gets the metadata document uri.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator">
            <summary>
            Generates operations which were omitted by the service because they fully match conventions/templates and are always available.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.metadataContext">
            <summary>The current entry metadata context.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.entryMetadataContext">
            <summary>The metadata context of the entry to generate the missing operations for.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.computedActions">
            <summary>The list of computed actions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.computedFunctions">
            <summary>The list of computed functions.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.#ctor(Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext,Microsoft.Data.OData.Evaluation.IODataMetadataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator"/> class.
            </summary>
            <param name="entryMetadataContext">The metadata context of the entry to generate the missing operations for.</param>
            <param name="metadataContext">The current entry metadata context.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.GetComputedActions">
            <summary>
            Gets the computed missing Actions from the generator.
            </summary>
            <returns>The computed missing Actions.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.GetComputedFunctions">
            <summary>
            Gets the computed missing Functions from the generator.
            </summary>
            <returns>The computed missing Functions.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.GetFunctionImportsInEntry(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmModel,System.Uri)">
            <summary>
            Returns a hash set of function imports (actions and functions) in the given entry.
            </summary>
            <param name="entry">The entry in question.</param>
            <param name="model">The edm model to resolve function imports.</param>
            <param name="metadataDocumentUri">The metadata document uri.</param>
            <returns>The hash set of function imports (actions and functions) in the given entry.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataMissingOperationGenerator.ComputeMissingOperationsToEntry">
            <summary>
            Computes the operations that are missing from the payload but should be added by conventions onto the entry.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.IODataFeedAndEntryTypeContext">
            <summary>
            Interface used for substitutability, to answer basic questions regarding the type of the entry or feed.
            Metadata may come from a user-provided model or from the SetSerializationInfo() method on a feed or entry. The latter is considered the "no-model" case since only strings
            are provided, and there is no interconnectedness.  The goal of this interface is to provide a way to query the metadata information available on an entry or feed without
            needing to know where the metadata originated from.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.IODataFeedAndEntryTypeContext.EntitySetName">
            <summary>
            The entity set name of the feed or entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.IODataFeedAndEntryTypeContext.EntitySetElementTypeName">
            <summary>
            The element type name of the entity set of the feed or entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.IODataFeedAndEntryTypeContext.ExpectedEntityTypeName">
            <summary>
            The expected entity type name of the entry.
            For example, in the request URI 'http://example.com/Service.svc/People/Namespace.VIP_Person', the expected entity type is Namespace.VIP_Person.
            (The entity set element type name in this example may be Person, and the actual entity type of a particular entity might be a type more derived than VIP_Person)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.IODataFeedAndEntryTypeContext.IsMediaLinkEntry">
            <summary>
            true if the entry is an MLE, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.IODataFeedAndEntryTypeContext.UrlConvention">
            <summary>
            The Url convention to use for the entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel">
            <summary>
            Class responsible for logic specific to the JSON Light full metadata level (indicated by "odata=fullmetadata" in the media type).
            </summary>
            <remarks>
            The general rule-of-thumb for full-metadata payloads is that they include all "odata.*" annotations that would be included in minimal metadata mode,
            plus any "odata.*" annotations that could be computed client-side if we the client had a model.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonLightMetadataLevel">
            <summary>
            Class responsible for logic that varies based on the JSON Light metadata level. 
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightMetadataLevel.Create(Microsoft.Data.OData.MediaType,System.Uri,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Creates the appropriate metadata level based on the media type being written.
            </summary>
            <param name="mediaType">The full media type being written. This media type must have a type/subtype of "application/json" 
            and should not imply verbose json (by including "odata=verbose" as a parameter).</param>
            <param name="metadataDocumentUri">The metadata document uri from the writer settings.</param>
            <param name="model">The edm model.</param>
            <param name="writingResponse">true if we are writing a response, false otherwise.</param>
            <returns>The JSON Light metadata level being written.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightMetadataLevel.GetTypeNameOracle(System.Boolean)">
            <summary>
            Returns the oracle to use when determing the type name to write for entries and values.
            </summary>
            <param name="autoComputePayloadMetadataInJson">
            If true, the type name to write will vary based on the metadata level. 
            If false, the type name writing rules will always match minimal metadata, 
            regardless of the actual metadata level being written. 
            This is for backwards compatibility.
            </param>
            <returns>An oracle that can be queried to determine the type name to write.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightMetadataLevel.ShouldWriteODataMetadataUri">
            <summary>
            Indicates whether the "odata.metadata" URI should be written based on the current metadata level.
            </summary>
            <returns>true if the metadata URI should be written, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightMetadataLevel.CreateEntityMetadataBuilder(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.IODataFeedAndEntryTypeContext,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.SelectedPropertiesNode,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Creates the metadata builder for the given entry. If such a builder is set, asking for payload
            metadata properties (like EditLink) of the entry may return a value computed by convention, 
            depending on the metadata level and whether the user manually set an edit link or not.
            </summary>
            <param name="entry">The entry to create the metadata builder for.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry or feed.</param>
            <param name="serializationInfo">The serialization info for the entry.</param>
            <param name="actualEntityType">The entity type of the entry.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <param name="isResponse">true if the entity metadata builder to create should be for a response payload; false for a request.</param>
            <param name="keyAsSegment">true if keys should go in seperate segments in auto-generated URIs, false if they should go in parentheses.
            A null value means the user hasn't specified a preference and we should look for an annotation in the entity container, if available.</param>
            <returns>The created metadata builder.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightMetadataLevel.InjectMetadataBuilder(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder)">
            <summary>
            Injects the appropriate metadata builder based on the metadata level.
            </summary>
            <param name="entry">The entry to inject the builder.</param>
            <param name="builder">The metadata builder to inject.</param>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel.model">
            <summary>
            The Edm model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel.metadataDocumentUri">
            <summary>
            The metadata document uri from the writer settings.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel.#ctor(System.Uri,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel"/>.
            </summary>
            <param name="metadataDocumentUri">The metadata document uri from the writer settings.</param>
            <param name="model">The Edm model.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel.GetTypeNameOracle(System.Boolean)">
            <summary>
            Returns the oracle to use when determing the type name to write for entries and values.
            </summary>
            <param name="autoComputePayloadMetadataInJson">
            If true, the type name to write according to full metadata rules. 
            If false, the type name writing according to minimal metadata rules.
            This is for backwards compatibility.
            </param>
            <returns>An oracle that can be queried to determine the type name to write.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel.ShouldWriteODataMetadataUri">
            <summary>
            Indicates whether the "odata.metadata" URI should be written based on the current metadata level.
            </summary>
            <returns>true if the metadata URI should be written, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel.CreateEntityMetadataBuilder(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.IODataFeedAndEntryTypeContext,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.SelectedPropertiesNode,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Creates the metadata builder for the given entry. If such a builder is set, asking for payload
            metadata properties (like EditLink) of the entry may return a value computed by convention, 
            depending on the metadata level and whether the user manually set an edit link or not.
            </summary>
            <param name="entry">The entry to create the metadata builder for.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry or feed.</param>
            <param name="serializationInfo">The serialization info for the entry.</param>
            <param name="actualEntityType">The entity type of the entry.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <param name="isResponse">true if the entity metadata builder to create should be for a response payload; false for a request.</param>
            <param name="keyAsSegment">true if keys should go in seperate segments in auto-generated URIs, false if they should go in parentheses.
            A null value means the user hasn't specified a preference and we should look for an annotation in the entity container, if available.</param>
            <returns>The created metadata builder.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel.InjectMetadataBuilder(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder)">
            <summary>
            Injects the appropriate metadata builder based on the metadata level.
            </summary>
            <param name="entry">The entry to inject the builder.</param>
            <param name="builder">The metadata builder to inject.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.JsonFullMetadataLevel.NonNullMetadataDocumentUri">
            <summary>
            Returns the metadata document URI which has been validated to be non-null.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonFullMetadataTypeNameOracle">
            <summary>
            Class responsible for determining the type name that should be written on the wire for entries and values in JSON full metadata mode.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonLightTypeNameOracle">
            <summary>
            Class responsible for determining the type name that should be written on the wire for entries and values in JSON Light.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightTypeNameOracle.GetEntryTypeNameForWriting(System.String,Microsoft.Data.OData.ODataEntry)">
            <summary>
            Determines the entity type name to write to the payload.
            </summary>
            <param name="expectedTypeName">The expected type name, e.g. the base type of the set or the nav prop.</param>
            <param name="entry">The ODataEntry whose type is to be written.</param>
            <returns>Type name to write to the payload, or null if no type name should be written.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightTypeNameOracle.GetValueTypeNameForWriting(Microsoft.Data.OData.ODataValue,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean)">
            <summary>
            Determines the type name to write to the payload.  Json Light type names are only written into the payload for open properties
            or if the payload type name is more derived than the model type name.
            </summary>
            <param name="value">The ODataValue whose type name is to be written.</param>
            <param name="typeReferenceFromMetadata">The type as expected by the model.</param>
            <param name="typeReferenceFromValue">The type resolved from the value.</param>
            <param name="isOpenProperty">true if the type name belongs to an open property, false otherwise.</param>
            <returns>Type name to write to the payload, or null if no type should be written.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonFullMetadataTypeNameOracle.GetEntryTypeNameForWriting(System.String,Microsoft.Data.OData.ODataEntry)">
            <summary>
            Determines the entity type name to write to the payload.
            </summary>
            <param name="expectedTypeName">The expected type name, e.g. the base type of the set or the nav prop.</param>
            <param name="entry">The ODataEntry whose type is to be written.</param>
            <returns>Type name to write to the payload, or null if no type name should be written.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonFullMetadataTypeNameOracle.GetValueTypeNameForWriting(Microsoft.Data.OData.ODataValue,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean)">
            <summary>
            Determines the type name to write to the payload.  Json Light type names are only written into the payload for open properties
            or if the payload type name is more derived than the model type name.
            </summary>
            <param name="value">The ODataValue whose type name is to be written.</param>
            <param name="typeReferenceFromMetadata">The type as expected by the model.</param>
            <param name="typeReferenceFromValue">The type resolved from the value.</param>
            <param name="isOpenProperty">true if the type name belongs to an open property, false otherwise.</param>
            <returns>Type name to write to the payload, or null if no type should be written.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonMinimalMetadataLevel">
            <summary>
            Class responsible for logic specific to the JSON Light minimal metadata level (indicated by "odata=minimalmetadata" in the media type, or lack of an "odata" parameter in a v3 and above request).
            </summary>
            <remarks>
            The general rule-of-thumb for minimal-metadata payloads is that they include all "odata.*" annotations that can't be computed client-side, assuming the client has the server model available
            as well as the ability to compute missing payload metadata based on the standard conventions.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonMinimalMetadataLevel.GetTypeNameOracle(System.Boolean)">
            <summary>
            Returns the oracle to use when determing the type name to write for entries and values.
            </summary>
            <param name="autoComputePayloadMetadataInJson">Not used in this implementation of the abstract method.</param>
            <returns>An oracle that can be queried to determine the type name to write.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonMinimalMetadataLevel.ShouldWriteODataMetadataUri">
            <summary>
            Indicates whether the "odata.metadata" URI should be written based on the current metadata level.
            </summary>
            <returns>true if the metadata URI should be written, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonMinimalMetadataLevel.CreateEntityMetadataBuilder(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.IODataFeedAndEntryTypeContext,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.SelectedPropertiesNode,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Creates the metadata builder for the given entry. If such a builder is set, asking for payload
            metadata properties (like EditLink) of the entry may return a value computed by convention, 
            depending on the metadata level and whether the user manually set an edit link or not.
            </summary>
            <param name="entry">The entry to create the metadata builder for.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry or feed.</param>
            <param name="serializationInfo">The serialization info for the entry.</param>
            <param name="actualEntityType">The entity type of the entry.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <param name="isResponse">true if the entity metadata builder to create should be for a response payload; false for a request.</param>
            <param name="keyAsSegment">true if keys should go in seperate segments in auto-generated URIs, false if they should go in parentheses.
            A null value means the user hasn't specified a preference and we should look for an annotation in the entity container, if available.</param>
            <returns>The created metadata builder.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonMinimalMetadataLevel.InjectMetadataBuilder(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder)">
            <summary>
            Injects the appropriate metadata builder based on the metadata level.
            </summary>
            <param name="entry">The entry to inject the builder.</param>
            <param name="builder">The metadata builder to inject.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonMinimalMetadataTypeNameOracle">
            <summary>
            Class responsible for determining the type name that should be written on the wire for entries and values in JSON minimal metadata mode, 
            or the other metadata modes of JSON light when <see cref="P:Microsoft.Data.OData.ODataMessageWriterSettings.AutoComputePayloadMetadataInJson"/> is false.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonMinimalMetadataTypeNameOracle.GetEntryTypeNameForWriting(System.String,Microsoft.Data.OData.ODataEntry)">
            <summary>
            Determines the entity type name to write to the payload.
            </summary>
            <param name="expectedTypeName">The expected type name, e.g. the base type of the set or the nav prop.</param>
            <param name="entry">The ODataEntry whose type is to be written.</param>
            <returns>Type name to write to the payload, or null if no type name should be written.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonMinimalMetadataTypeNameOracle.GetValueTypeNameForWriting(Microsoft.Data.OData.ODataValue,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean)">
            <summary>
            Determines the type name to write to the payload.  Json Light type names are only written into the payload for open properties
            or if the payload type name is more derived than the model type name.
            </summary>
            <param name="value">The ODataValue whose type name is to be written.</param>
            <param name="typeReferenceFromMetadata">The type as expected by the model.</param>
            <param name="typeReferenceFromValue">The type resolved from the value.</param>
            <param name="isOpenProperty">true if the type name belongs to an open property, false otherwise.</param>
            <returns>Type name to write to the payload, or null if no type should be written.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonNoMetadataLevel">
            <summary>
            Class responsible for logic specific to the JSON Light no metadata level (indicated by "odata=nometadata" in the media type).
            </summary>
            <remarks>
            The general rule-of-thumb for no-metadata payloads is that they omit any "odata.*" annotations, 
            except for odata.nextlink and odata.count, since the client would get a inaccurate representation of the data available if they were left out.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonNoMetadataLevel.GetTypeNameOracle(System.Boolean)">
            <summary>
            Returns the oracle to use when determing the type name to write for entries and values.
            </summary>
            <param name="autoComputePayloadMetadataInJson">
            If true, the type name to write according to full metadata rules. 
            If false, the type name writing according to minimal metadata rules.
            This is for backwards compatibility.
            </param>
            <returns>An oracle that can be queried to determine the type name to write.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonNoMetadataLevel.ShouldWriteODataMetadataUri">
            <summary>
            Indicates whether the "odata.metadata" URI should be written based on the current metadata level.
            </summary>
            <returns>true if the metadata URI should be written, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonNoMetadataLevel.CreateEntityMetadataBuilder(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.IODataFeedAndEntryTypeContext,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.SelectedPropertiesNode,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Creates the metadata builder for the given entry. If such a builder is set, asking for payload
            metadata properties (like EditLink) of the entry may return a value computed by convention, 
            depending on the metadata level and whether the user manually set an edit link or not.
            </summary>
            <param name="entry">The entry to create the metadata builder for.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry or feed.</param>
            <param name="serializationInfo">The serialization info for the entry.</param>
            <param name="actualEntityType">The entity type of the entry.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <param name="isResponse">true if the entity metadata builder to create should be for a response payload; false for a request.</param>
            <param name="keyAsSegment">true if keys should go in seperate segments in auto-generated URIs, false if they should go in parentheses.
            A null value means the user hasn't specified a preference and we should look for an annotation in the entity container, if available.</param>
            <returns>The created metadata builder.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonNoMetadataLevel.InjectMetadataBuilder(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder)">
            <summary>
            Injects the appropriate metadata builder based on the metadata level.
            </summary>
            <param name="entry">The entry to inject the builder.</param>
            <param name="builder">The metadata builder to inject.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonNoMetadataTypeNameOracle">
            <summary>
            Class responsible for determining the type name that should be written on the wire for entries and values in JSON no metadata mode.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonNoMetadataTypeNameOracle.GetEntryTypeNameForWriting(System.String,Microsoft.Data.OData.ODataEntry)">
            <summary>
            Determines the entity type name to write to the payload.
            </summary>
            <param name="expectedTypeName">The expected type name, e.g. the base type of the set or the nav prop.</param>
            <param name="entry">The ODataEntry whose type is to be written.</param>
            <returns>Type name to write to the payload, or null if no type name should be written.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonNoMetadataTypeNameOracle.GetValueTypeNameForWriting(Microsoft.Data.OData.ODataValue,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean)">
            <summary>
            Determines the type name to write to the payload.  Json Light type names are only written into the payload for open properties
            or if the payload type name is more derived than the model type name.
            </summary>
            <param name="value">The ODataValue whose type name is to be written.</param>
            <param name="typeReferenceFromMetadata">The type as expected by the model.</param>
            <param name="typeReferenceFromValue">The type resolved from the value.</param>
            <param name="isOpenProperty">true if the type name belongs to an open property, false otherwise.</param>
            <returns>Type name to write to the payload, or null if no type should be written.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataFeedAndEntryTypeContext">
            <summary>
            The context object to answer basic questions regarding the type of the entry or feed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.DefaultUrlConvention">
            <summary>
            Default Url convention.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.throwIfMissingTypeInfo">
            <summary>
            If true, throw if any of the set or type name cannot be determined; if false, return null when any of the set or type name cannot determined.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.#ctor(System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Data.OData.ODataFeedAndEntryTypeContext"/>.
            </summary>
            <param name="throwIfMissingTypeInfo">If true, throw if any of the set or type name cannot be determined; if false, return null when any of the set or type name cannot determined.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.Create(Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Data.OData.ODataFeedAndEntryTypeContext"/>.
            </summary>
            <param name="serializationInfo">The serialization info from the feed or entry instance.</param>
            <param name="entitySet">The entity set of the feed or entry.</param>
            <param name="entitySetElementType">The element type of the entity set.</param>
            <param name="expectedEntityType">The expected entity type of the feed or entry.</param>
            <param name="model">The Edm model instance to use.</param>
            <param name="throwIfMissingTypeInfo">If true, throw if any of the set or type name cannot be determined; if false, return null when any of the set or type name cannot determined.</param>
            <returns>A new instance of <see cref="T:Microsoft.Data.OData.ODataFeedAndEntryTypeContext"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ValidateAndReturn``1(``0)">
            <summary>
            Validate and return the given value.
            </summary>
            <typeparam name="T">The type of the value to validate.</typeparam>
            <param name="value">The value to validate.</param>
            <returns>The return value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.EntitySetName">
            <summary>
            The entity set name of the feed or entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.EntitySetElementTypeName">
            <summary>
            The element type name of the entity set of the feed or entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ExpectedEntityTypeName">
            <summary>
            The expected entity type name of the entry.
            For example, in the request URI 'http://example.com/Service.svc/People/Namespace.VIP_Person', the expected entity type is Namespace.VIP_Person.
            (The entity set element type name in this example may be Person, and the actual entity type of a particular entity might be a type more derived than VIP_Person)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.IsMediaLinkEntry">
            <summary>
            true if the entry is an MLE, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.UrlConvention">
            <summary>
            The Url convention to use for the entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithoutModel">
            <summary>
            The context object to answer basic questions regarding the type of the entry or feed based on the serialization info.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithoutModel.serializationInfo">
            <summary>
            The serialization info of the entry for writing without model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithoutModel.#ctor(Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Data.OData.ODataFeedAndEntryTypeContext"/>.
            </summary>
            <param name="serializationInfo">The serialization info from the feed or entry instance.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithoutModel.EntitySetName">
            <summary>
            The entity set name of the feed or entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithoutModel.EntitySetElementTypeName">
            <summary>
            The element type name of the entity set of the feed or entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithoutModel.ExpectedEntityTypeName">
            <summary>
            The expected entity type name of the entry.
            For example, in the request URI 'http://example.com/Service.svc/People/Namespace.VIP_Person', the expected entity type is Namespace.VIP_Person.
            (The entity set element type name in this example may be Person, and the actual entity type of a particular entity might be a type more derived than VIP_Person)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithoutModel.IsMediaLinkEntry">
            <summary>
            true if the entry is an MLE, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithoutModel.UrlConvention">
            <summary>
            The Url convention to use for the entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel">
            <summary>
            The context object to answer basic questions regarding the type of the entry or feed based on the metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.model">
            <summary>
            The Edm model instance to use.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.entitySet">
            <summary>
            The entity set of the feed or entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.entitySetElementType">
            <summary>
            The element type of the entity set of the feed or entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.expectedEntityType">
            <summary>
            The expected entity type of the feed or entry.
            For example, in the request URI 'http://example.com/Service.svc/People/Namespace.VIP_Person', the expected entity type is Namespace.VIP_Person.
            (The entity set element type name in this example may be Person, and the actual entity type of a particular entity might be a type more derived than VIP_Person)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.lazyEntitySetName">
            <summary>
            The entity set name of the feed or entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.lazyIsMediaLinkEntry">
            <summary>
            true if the entry is an media link entry or if the feed contains media link entries, false otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.lazyUrlConvention">
            <summary>
            The url convention to use for the entity set.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.#ctor(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.Data.OData.ODataFeedAndEntryTypeContext"/>.
            </summary>
            <param name="entitySet">The entity set of the feed or entry.</param>
            <param name="entitySetElementType">The element type of the entity set.</param>
            <param name="expectedEntityType">The expected entity type of the feed or entry.</param>
            <param name="model">The Edm model instance to use.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.EntitySetName">
            <summary>
            The entity set name of the feed or entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.EntitySetElementTypeName">
            <summary>
            The element type name of the entity set of the feed or entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.ExpectedEntityTypeName">
            <summary>
            The expected entity type name of the entry.
            For example, in the request URI 'http://example.com/Service.svc/People/Namespace.VIP_Person', the expected entity type is Namespace.VIP_Person.
            (The entity set element type name in this example may be Person, and the actual entity type of a particular entity might be a type more derived than VIP_Person)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.IsMediaLinkEntry">
            <summary>
            true if the entry is an MLE, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntryTypeContext.ODataFeedAndEntryTypeContextWithModel.UrlConvention">
            <summary>
            The Url convention to use for the entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataObjectModelExtensions">
            <summary>
            Extension methods on the OData object model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataObjectModelExtensions.SetSerializationInfo(Microsoft.Data.OData.ODataFeed,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo)">
            <summary>
            Provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for <paramref name="feed"/>.
            </summary>
            <param name="feed">The instance to set the serialization info.</param>
            <param name="serializationInfo">The serialization info to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataObjectModelExtensions.SetSerializationInfo(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo)">
            <summary>
            Provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for <paramref name="entry"/>.
            </summary>
            <param name="entry">The instance to set the serialization info.</param>
            <param name="serializationInfo">The serialization info to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataObjectModelExtensions.SetSerializationInfo(Microsoft.Data.OData.ODataProperty,Microsoft.Data.OData.ODataPropertySerializationInfo)">
            <summary>
            Provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for <paramref name="property"/>.
            </summary>
            <param name="property">The instance to set the serialization info.</param>
            <param name="serializationInfo">The serialization info to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataObjectModelExtensions.SetSerializationInfo(Microsoft.Data.OData.ODataCollectionStart,Microsoft.Data.OData.ODataCollectionStartSerializationInfo)">
            <summary>
            Provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> for <paramref name="collectionStart"/>.
            </summary>
            <param name="collectionStart">The instance to set the serialization info.</param>
            <param name="serializationInfo">The serialization info to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataObjectModelExtensions.SetSerializationInfo(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo)">
            <summary>
            Provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> for <paramref name="entityReferenceLink"/>.
            </summary>
            <param name="entityReferenceLink">The instance to set the serialization info.</param>
            <param name="serializationInfo">The serialization info to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataObjectModelExtensions.SetSerializationInfo(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo)">
            <summary>
            Provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> for <paramref name="entityReferenceLinks"/>.
            </summary>
            <param name="entityReferenceLinks">The instance to set the serialization info.</param>
            <param name="serializationInfo">The serialization info to set.</param>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionStartSerializationInfo">
            <summary>
            Class to provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> for an <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionStartSerializationInfo.collectionTypeName">
            <summary>
            The fully qualified type name of the collection to be written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionStartSerializationInfo.Validate(Microsoft.Data.OData.ODataCollectionStartSerializationInfo)">
            <summary>
            Validates the <paramref name="serializationInfo"/> instance.
            </summary>
            <param name="serializationInfo">The serialization info instance to validate.</param>
            <returns>The <paramref name="serializationInfo"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionStartSerializationInfo.CollectionTypeName">
            <summary>
            The fully qualified type name of the collection to be written.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo">
            <summary>
            Class to provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> for an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo.sourceEntitySetName">
            <summary>
            The source entity set name of the navigation property. Should be fully qualified if the entity set is not in the default container.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo.typecast">
            <summary>
            The fully qualified type name of the declaring entity type of the navigation property if the declaring entity type is not the base type of the source entity set.
            Should be null if the declaring entity type is the base type of the source entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo.navigationPropertyName">
            <summary>
            The name of the navigation property to write the entity reference links for.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo.Validate(Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo)">
            <summary>
            Validates the <paramref name="serializationInfo"/> instance.
            </summary>
            <param name="serializationInfo">The serialization info instance to validate.</param>
            <returns>The <paramref name="serializationInfo"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo.SourceEntitySetName">
            <summary>
            The source entity set name of the navigation property. Should be fully qualified if the entity set is not in the default container.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo.Typecast">
            <summary>
            The fully qualified type name of the declaring entity type of the navigation property if the declaring entity type is not the base type of the source entity set.
            Should be null if the declaring entity type is the base type of the source entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo.NavigationPropertyName">
            <summary>
            The name of the navigation property to write the entity reference links for.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo">
            <summary>
            Class to provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> for an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo.sourceEntitySetName">
            <summary>
            The source entity set name of the navigation property. Should be fully qualified if the entity set is not in the default container.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo.typecast">
            <summary>
            The fully qualified type name of the declaring entity type of the navigation property if the declaring entity type is not the base type of the source entity set.
            Should be null if the declaring entity type is the base type of the source entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo.navigationPropertyName">
            <summary>
            The name of the navigation property to write the entity reference link for.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo.Validate(Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo)">
            <summary>
            Validates the <paramref name="serializationInfo"/> instance.
            </summary>
            <param name="serializationInfo">The serialization info instance to validate.</param>
            <returns>The <paramref name="serializationInfo"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo.SourceEntitySetName">
            <summary>
            The source entity set name of the navigation property. Should be fully qualified if the entity set is not in the default container.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo.Typecast">
            <summary>
            The fully qualified type name of the declaring entity type of the navigation property if the declaring entity type is not the base type of the source entity set.
            Should be null if the declaring entity type is the base type of the source entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo.NavigationPropertyName">
            <summary>
            The name of the navigation property to write the entity reference link for.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo.IsCollectionNavigationProperty">
            <summary>
            true if the navigation property navigates to a collection of entities; false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataPropertyKind">
            <summary>
            The enum of property kinds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPropertyKind.Unspecified">
            <summary>
            Unspecified property kind or if the property is not a key property, an etag property or an open property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPropertyKind.Key">
            <summary>
            The property is a key property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPropertyKind.ETag">
            <summary>
            The property is an etag property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPropertyKind.Open">
            <summary>
            The property is an open property
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataPropertySerializationInfo">
            <summary>
            Class to provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for an <see cref="T:Microsoft.Data.OData.ODataProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPropertySerializationInfo.PropertyKind">
            <summary>
            The kind of the property
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo">
            <summary>
            Class to provide additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for an <see cref="T:Microsoft.Data.OData.ODataEntry"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo.entitySetName">
            <summary>
            The entity set name of the entry to be written. Should be fully qualified if the entity set is not in the default container.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo.entitySetElementTypeName">
            <summary>
            The namespace qualified element type name of the entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo.expectedTypeName">
            <summary>
            The namespace qualified type name of the expected entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo.Validate(Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo)">
            <summary>
            Validates the <paramref name="serializationInfo"/> instance.
            </summary>
            <param name="serializationInfo">The serialization info instance to validate.</param>
            <returns>The <paramref name="serializationInfo"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo.EntitySetName">
            <summary>
            The entity set name of the entry to be written. Should be fully qualified if the entity set is not in the default container.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo.EntitySetElementTypeName">
            <summary>
            The namespace qualified element type name of the entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo.ExpectedTypeName">
            <summary>
            The namespace qualified type name of the expected entity type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValueElement">
            <summary>
            Class to represent a HTTP header value element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueElement.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Internal constructor to create a new instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueElement"/>.
            </summary>
            <param name="name">The name of the preference.</param>
            <param name="value">The value of the preference.</param>
            <param name="parameters">The enumeration of preference parameter key value pairs.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueElement.ToString">
            <summary>
            Converts the current <see cref="T:Microsoft.Data.OData.HttpHeaderValueElement"/> to string.
            </summary>
            <returns>The string for <see cref="T:Microsoft.Data.OData.HttpHeaderValueElement"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueElement.AppendNameValuePair(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Appends the <paramref name="name"/> and <paramref name="value"/> to <paramref name="stringBuilder"/> as name=value.
            </summary>
            <param name="stringBuilder">The string builder to append to.</param>
            <param name="name">The name to append.</param>
            <param name="value">The value to append.</param>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueElement.Name">
            <summary>
            The name of the preference.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueElement.Value">
            <summary>
            The value of the preference.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueElement.Parameters">
            <summary>
            The enumeration of preference parameter key value pairs.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValue">
            <summary>
            Extension methods for http header values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValue.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValue"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValue.ToString">
            <summary>
            Returns the HTTP header value string which can be used to set the header on the requst and response messages.
            </summary>
            <returns>Returns the HTTP header value string which can be used to set the header on the requst and response messages.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValueLexer">
            <summary>
            Lexer to parse HTTP header values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.ElementSeparator">
            <summary>
            The ',' separator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.ParameterSeparator">
            <summary>
            The ';' separator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.ValueSeparator">
            <summary>
            The '=' separator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.httpHeaderName">
            <summary>
            The name of the HTTP header being parsed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.httpHeaderValue">
            <summary>
            The value of the HTTP header being parsed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.startIndexOfNextItem">
            <summary>
            The starting index to the next item to be parsed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.value">
            <summary>
            The value of the current parsed item. If the item type is quoted-string, this returns the unescaped and unquoted string value. For other item types,
            the value is the same as the original text from the header.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.originalText">
            <summary>
            The original text of the current parsed item. If the item type is quoted-string, this returns the escaped and quoted string value straight from the header.
            For other item types, the original text is the same as the item value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/>.
            </summary>
            <param name="httpHeaderName">The name of the HTTP header being parsed.</param>
            <param name="httpHeaderValue">The value of the HTTP header being parsed.</param>
            <param name="value">The value of the current parsed item. If the item type is quoted-string, this returns the unescaped and unquoted string value. For other item types,
            the value is the same as the original text from the header.</param>
            <param name="originalText">The original text of the current parsed item. If the item type is quoted-string, this returns the escaped and quoted string value straight from the header.
            For other item types, the original text is the same as the item value.</param>
            <param name="startIndexOfNextItem">The start index of the next item to be parsed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.Create(System.String,System.String)">
            <summary>
            Constructs a new instance of the HTTP header value item.
            </summary>
            <param name="httpHeaderName">The name of the HTTP header being parsed.</param>
            <param name="httpHeaderValue">The value of the HTTP header being parsed.</param>
            <returns>The newly created instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.ToHttpHeaderValue">
            <summary>
            Reads the content of a HTTP header from this <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> instance to a new <see cref="T:Microsoft.Data.OData.HttpHeaderValue"/> instance.
            </summary>
            <returns>A new <see cref="T:Microsoft.Data.OData.HttpHeaderValue"/> instance populated with the content from this <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.ReadNext">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.
            Parsing is based on this grammar:
                header     = "header-name" ":" 1#element
                element    = token [ BWS "=" BWS (token | quoted-string) ]
                             *( OWS ";" [ OWS parameter ] )
                parameter  = token [ BWS "=" BWS (token | quoted-string) ]
            </summary>
            <returns>Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.ReadHttpHeaderValueElement(Microsoft.Data.OData.HttpHeaderValueLexer@)">
            <summary>
            Reads a <see cref="T:Microsoft.Data.OData.HttpHeaderValueElement"/> from <paramref name="lexer"/> and advances the <paramref name="lexer"/> forward.
            </summary>
            <param name="lexer">The lexer to read from.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.HttpHeaderValueElement"/> that was read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.ReadKeyValuePair(Microsoft.Data.OData.HttpHeaderValueLexer@)">
            <summary>
            Reads a token or token=(token|quoted-string) from the <paramref name="lexer"/>, convert it to a key value pair and advances the <paramref name="lexer"/>.
            </summary>
            <param name="lexer">The lexer to read from.</param>
            <returns>The converted key value pair.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.EndOfHeaderValue">
            <summary>
            Returns true if we've parsed to the end of the header value, false otherwise.
            </summary>
            <returns>Returns true if we've parsed to the end of the header value, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.ReadNextTokenOrQuotedString">
            <summary>
            Reads a token or quoted-string value from the header.
            </summary>
            <returns>The token or quoted-string value that was read from the header.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.ReadNextToken">
            <summary>
            Reads a token from the header.
            </summary>
            <returns>The token item that was read from the header.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.ReadNextSeparator">
            <summary>
            Reads a separator from the header.
            </summary>
            <returns>The separator item that was read from the header.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueLexer.Value">
            <summary>
            The value of the current parsed item. If the item type is quoted-string, this returns the unescaped and unquoted string value. For other item types,
            the value is the same as the original text from the header.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueLexer.OriginalText">
            <summary>
            The original text of the current parsed item. If the item type is quoted-string, this returns the escaped and quoted string value straight from the header.
            For other item types, the original text is the same as the item value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueLexer.Type">
            <summary>
            The type of the current parsed item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderValueItemType">
            <summary>
            The item type enum.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderValueItemType.Start">
            <summary>Currently at the start of the header value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderValueItemType.Token">
            <summary>The current item is a token.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderValueItemType.QuotedString">
            <summary>The current item is a quoted-string.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderValueItemType.ElementSeparator">
            <summary>The current item is the header element separator ','.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderValueItemType.ParameterSeparator">
            <summary>The current item is the parameter separator ';'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderValueItemType.ValueSeparator">
            <summary>The current item is the value separator '='.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderValueItemType.End">
            <summary>At the end of the header value.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderStart">
            <summary>
            Represents the start of the http header value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderStart.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderStart"/>.
            </summary>
            <param name="httpHeaderName">The name of the HTTP header being parsed.</param>
            <param name="httpHeaderValue">The value of the HTTP header being parsed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderStart.ReadNext">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.
            Parsing is based on this grammar:
                header     = "header-name" ":" 1#element
                element    = token [ BWS "=" BWS (token | quoted-string) ]
                             *( OWS ";" [ OWS parameter ] )
                parameter  = token [ BWS "=" BWS (token | quoted-string) ]
            </summary>
            <returns>Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderStart.Type">
            <summary>
            The type of the current item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderToken">
            <summary>
            Represents a token in the HTTP header value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderToken.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderToken"/>.
            </summary>
            <param name="httpHeaderName">The name of the HTTP header being parsed.</param>
            <param name="httpHeaderValue">The value of the HTTP header being parsed.</param>
            <param name="value">The value of the token.</param>
            <param name="startIndexOfNextItem">The start index of the next item.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderToken.ReadNext">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.
            Parsing is based on this grammar:
                header     = "header-name" ":" 1#element
                element    = token [ BWS "=" BWS (token | quoted-string) ]
                             *( OWS ";" [ OWS parameter ] )
                parameter  = token [ BWS "=" BWS (token | quoted-string) ]
            </summary>
            <returns>Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderToken.Type">
            <summary>
            The type of the current item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderQuotedString">
            <summary>
            Represents a quoted-string in the HTTP header value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderQuotedString.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderQuotedString"/>.
            </summary>
            <param name="httpHeaderName">The name of the HTTP header being parsed.</param>
            <param name="httpHeaderValue">The value of the HTTP header being parsed.</param>
            <param name="value">The value of the quoted string, unescaped and without quotes.</param>
            <param name="originalText">The original text of the quoted string, escaped and with quotes.</param>
            <param name="startIndexOfNextItem">The start index of the next item.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderQuotedString.ReadNext">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.
            Parsing is based on this grammar:
                header     = "header-name" ":" 1#element
                element    = token [ BWS "=" BWS (token | quoted-string) ]
                             *( OWS ";" [ OWS parameter ] )
                parameter  = token [ BWS "=" BWS (token | quoted-string) ]
            </summary>
            <returns>Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderQuotedString.Type">
            <summary>
            The type of the current item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderSeparator">
            <summary>
            Represents a separator in the HTTP header value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderSeparator.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderSeparator"/>.
            </summary>
            <param name="httpHeaderName">The name of the HTTP header being parsed.</param>
            <param name="httpHeaderValue">The value of the HTTP header being parsed.</param>
            <param name="value">The value of the separator.</param>
            <param name="startIndexOfNextItem">The start index of the next item.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderSeparator.ReadNext">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.
            Parsing is based on this grammar:
                header     = "header-name" ":" 1#element
                element    = token [ BWS "=" BWS (token | quoted-string) ]
                             *( OWS ";" [ OWS parameter ] )
                parameter  = token [ BWS "=" BWS (token | quoted-string) ]
            </summary>
            <returns>Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderSeparator.Type">
            <summary>
            The type of the current item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderEnd">
            <summary>
            Represents the end of the http header value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderEnd.Instance">
            <summary>
            Static instance of the end item.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderEnd.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderEnd"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderEnd.ReadNext">
            <summary>
            Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.
            Parsing is based on this grammar:
                header     = "header-name" ":" 1#element
                element    = token [ BWS "=" BWS (token | quoted-string) ]
                             *( OWS ";" [ OWS parameter ] )
                parameter  = token [ BWS "=" BWS (token | quoted-string) ]
            </summary>
            <returns>Returns an instance of <see cref="T:Microsoft.Data.OData.HttpHeaderValueLexer"/> to parse the rest of the items on the header value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.HttpHeaderValueLexer.HttpHeaderEnd.Type">
            <summary>
            The type of the current item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.AnnotationFilter">
            <summary>
            Filter class to determine whether or not to read an annotation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilter.IncludeAll">
            <summary>
            Filter that maches all annotation names.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilter.ExcludeAll">
            <summary>
            Filter than maches no annotation names.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilter.AnnotationFilterPatternSeparator">
            <summary>
            Separator for annotation filter patterns.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilter.prioritizedPatternsToMatch">
            <summary>
            Patterns to match, sorted in the order of higher to lower priorities to match.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilter.#ctor(Microsoft.Data.OData.AnnotationFilterPattern[])">
            <summary>
            Private constructor to create a filter from comma delimited patterns to match to include or exclude annotations.
            </summary>
            <param name="prioritizedPatternsToMatch">Patters to match to include or exclude annotations.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilter.Create(System.String)">
            <summary>
            Create a filter from comma delimited patterns to match to include or exclude annotations.
            </summary>
            <param name="filter">Comma delimited patterns to match to include or exclude annotations.</param>
            <returns>The newly created filter.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilter.Matches(System.String)">
            <summary>
            Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should be read, false otherwise.
            </summary>
            <param name="annotationName">The name of the annotation in question.</param>
            <returns>Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should be read, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.AnnotationFilter.IncludeAllFilter">
            <summary>
            Filter to read all annotations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilter.IncludeAllFilter.#ctor">
            <summary>
            Private default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilter.IncludeAllFilter.Matches(System.String)">
            <summary>
            Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should be read, false otherwise.
            </summary>
            <param name="annotationName">The name of the annotation in question.</param>
            <returns>Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should be read, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.AnnotationFilter.ExcludeAllFilter">
            <summary>
            Filter to read no annotation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilter.ExcludeAllFilter.#ctor">
            <summary>
            Private default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilter.ExcludeAllFilter.Matches(System.String)">
            <summary>
            Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should be read, false otherwise.
            </summary>
            <param name="annotationName">The name of the annotation in question.</param>
            <returns>Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should be read, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.AnnotationFilterPattern">
            <summary>
            Filter pattern class to determine whether an annotation name matches the pattern.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilterPattern.NamespaceSeparator">
            <summary>
            The '.' namespace separator.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilterPattern.ExcludeOperator">
            <summary>
            The '-' operator to indicate that the annotation should be excluded from read when it matches the pattern.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilterPattern.WildCard">
            <summary>
            The wild card constant.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilterPattern.DotStar">
            <summary>
            String constant for .*
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilterPattern.IncludeAllPattern">
            <summary>
            The "*" pattern that includes all annotations.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilterPattern.ExcludeAllPattern">
            <summary>
            The "-*" pattern that excludes all annotations.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilterPattern.Pattern">
            <summary>
            The pattern to match.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AnnotationFilterPattern.isExclude">
            <summary>
            true if the annotation should be excluded from reading when its name matches this pattern; false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a pattern instance to determine whether an annotation name matches the pattern.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="isExclude">true if the annotation should be excluded from reading when its name matches this pattern; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.CompareTo(Microsoft.Data.OData.AnnotationFilterPattern)">
            <summary>
            Compares the priority of current pattern with the priority of <paramref name="other"/>.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative priority of the patterns being compared. The return value has the following meanings:
              -1 means this pattern has higher priority than <paramref name="other"/>.
              0 means this pattern has the same priority as <paramref name="other"/>.
              1 means this pattern has lower priority than <paramref name="other"/>.
            </returns>
            <param name="other">A pattern to compare with this pattern.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.Create(System.String)">
            <summary>
            Creates a pattern instance to determine whether an annotation name matches the pattern.
            </summary>
            <param name="pattern">The pattern for this instance.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.AnnotationFilterPattern"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.Sort(Microsoft.Data.OData.AnnotationFilterPattern[])">
            <summary>
            Sorts the patterns in the array from highest to lowest priorities.
            </summary>
            <param name="pattersToSort">The source array to sort. When the method returns the items in this array instance will be rearragned.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.Matches(System.String)">
            <summary>
            Match the given annotation name against the pattern.
            </summary>
            <param name="annotationName">Annotation name in question.</param>
            <returns>Returns true if the given annotation name matches the pattern, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.ComparePatternPriority(System.String,System.String)">
            <summary>
            Compares the priority of <paramref name="pattern1"/> with <paramref name="pattern2"/>.
            </summary>
            <param name="pattern1">The left hand side pattern to compare.</param>
            <param name="pattern2">The right hand side pattern to compare.</param>
            <returns>
            A 32-bit signed integer that indicates the relative priority of the patterns being compared. The return value has the following meanings:
              -1 means <paramref name="pattern1"/> has higher priority than <paramref name="pattern2"/>.
              0 means <paramref name="pattern1"/> has same priority as <paramref name="pattern2"/>.
              1 means <paramref name="pattern1"/> has lower priority than <paramref name="pattern2"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.RemoveExcludeOperator(System.String@)">
            <summary>
            Removes the exclude operator from the given pattern string.
            </summary>
            <param name="pattern">The input pattern to the method and will return the pattern without the exclude operator if it's found.</param>
            <returns>Returns true if the exclude operator is found and removed from the input pattern; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.ValidatePattern(System.String)">
            <summary>
            Validates the pattern.
            </summary>
            <param name="pattern">The pattern to validate.</param>
        </member>
        <member name="P:Microsoft.Data.OData.AnnotationFilterPattern.IsExclude">
            <summary>
            true if the annotation should be excluded from reading when its name matches this pattern; false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.AnnotationFilterPattern.WildCardPattern">
            <summary>
            The wild card pattern that matches everything.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.WildCardPattern.#ctor(System.Boolean)">
            <summary>
            Constructs the wild card pattern.
            </summary>
            <param name="isExclude">true if the annotation should be excluded from reading when its name matches this pattern; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.WildCardPattern.Matches(System.String)">
            <summary>
            Match the given annotation name against the pattern.
            </summary>
            <param name="annotationName">Annotation name in question.</param>
            <returns>Returns true if the given annotation name matches the pattern, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.AnnotationFilterPattern.StartsWithPattern">
            <summary>
            Pattern class to match any annotation name that starts with this pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.StartsWithPattern.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs the starts with pattern.
            </summary>
            <param name="pattern">The pattern to start with.</param>
            <param name="isExclude">true if the annotation should be excluded from reading when its name matches this pattern; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.StartsWithPattern.Matches(System.String)">
            <summary>
            Match the given annotation name against the pattern.
            </summary>
            <param name="annotationName">Annotation name in question.</param>
            <returns>Returns true if the given annotation name matches the pattern, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.AnnotationFilterPattern.ExactMatchPattern">
            <summary>
            Pattern class to match a annotation name that is exactly the same as this pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.ExactMatchPattern.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs the exact match pattern.
            </summary>
            <param name="pattern">The exact pattern to match</param>
            <param name="isExclude">true if the annotation should be excluded from reading when its name matches this pattern; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AnnotationFilterPattern.ExactMatchPattern.Matches(System.String)">
            <summary>
            Match the given annotation name against the pattern.
            </summary>
            <param name="annotationName">Annotation name in question.</param>
            <returns>Returns true if the given annotation name matches the pattern, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.IODataUriParserModelExtensions">
            <summary>
            Contract for providing implementations of more specific lookups needed for parsing OData URIs that are not efficiently answered
            by existing APIs in <see cref="T:Microsoft.Data.Edm.IEdmModel"/> and its related interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.IODataUriParserModelExtensions.FindFunctionImportsByBindingParameterTypeHierarchy(Microsoft.Data.Edm.IEdmType,System.String)">
            <summary>
            Finds all function imports with the given name which are bindable to an instance of the giving binding type or a more derived type.
            </summary>
            <param name="bindingType">The binding entity type.</param>
            <param name="functionImportName">The name of the function imports to find. May be qualified with an entity container name.</param>
            <returns>The function imports that match the search criteria.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.IODataUriParserModelExtensions.FindEntitySetFromContainerQualifiedName(System.String)">
            <summary>
            Finds an entity set given a name that may be container qualified. If no container name is provided, the default container should be used.
            </summary>
            <param name="containerQualifiedEntitySetName">The name which might be container qualified. If no container name is provided, the default container should be used.</param>
            <returns>The entity set if one was found or null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.IODataUriParserModelExtensions.FindServiceOperation(System.String)">
            <summary>
            Finds a service operation for the given name.
            </summary>
            <param name="serviceOperationName">The name of the service operation to find. May be qualified with an entity container name.</param>
            <returns>The function import representing a service operation or null if one could not be found with the given name.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.IODataUriParserModelExtensions.FindFunctionImportByBindingParameterType(Microsoft.Data.Edm.IEdmType,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds a function or action bound to the specific type with the given name.
            </summary>
            <param name="bindingType">The binding type.</param>
            <param name="functionImportName">The name of the function imports to find. May be qualified with an entity container name.</param>
            <param name="nonBindingParameterNamesFromUri">The parameter names of the non-binding parameters, if provided in the request URI.</param>
            <returns>The function import that matches the search criteria or null if there was no match.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataInstanceAnnotation">
            <summary>
            Represents an instance annotation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInstanceAnnotation.#ctor(System.String,Microsoft.Data.OData.ODataValue)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Data.OData.ODataInstanceAnnotation"/> instance.
            </summary>
            <param name="name">The name of the instance annotation.</param>
            <param name="value">The value of the instance annotation.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInstanceAnnotation.ValidateName(System.String)">
            <summary>
            Validates that the given <paramref name="name"/> is a valid instance annotation name.
            </summary>
            <param name="name">Name to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInstanceAnnotation.ValidateValue(Microsoft.Data.OData.ODataValue)">
            <summary>
            Validates the given <paramref name="value"/> is a valid instance annotation value.
            </summary>
            <param name="value">Value to validate.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInstanceAnnotation.Name">
            <summary>
            Instance annotation name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInstanceAnnotation.Value">
            <summary>
            Instance annotation value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessageExtensions">
            <summary>
            Extension methods to IODataRequestMessage and IODataResponseMessage.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageExtensions.GetDataServiceVersion(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Reads the DataServiceVersion header from the <paramref name="message"/> and parses it.
            If no DataServiceVersion header is found it sets the default version to be used for reading.
            </summary>
            <param name="message">The message to get the data service version header from.</param>
            <param name="defaultVersion">The default version to use if the header was not specified.</param>
            <returns>
            The <see cref="T:Microsoft.Data.OData.ODataVersion"/> retrieved from the DataServiceVersion header of the message.
            The default version if none is specified in the header.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageExtensions.GetDataServiceVersion(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Reads the DataServiceVersion header from the <paramref name="message"/> and parses it.
            If no DataServiceVersion header is found it sets the default version to be used for reading.
            </summary>
            <param name="message">The message to get the data service version header from.</param>
            <param name="defaultVersion">The default version to use if the header was not specified.</param>
            <returns>
            The <see cref="T:Microsoft.Data.OData.ODataVersion"/> retrieved from the DataServiceVersion header of the message.
            The default version if none is specified in the header.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageExtensions.PreferHeader(Microsoft.Data.OData.IODataRequestMessage)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.OData.ODataPreferenceHeader"/> instance to get or set preferences on the "Prefer" header of the <paramref name="requestMessage"/>.
            </summary>
            <param name="requestMessage">The request message to get or set the "Prefer" header.</param>
            <returns>Returns the <see cref="T:Microsoft.Data.OData.ODataPreferenceHeader"/> instance to get or set preferences on the "Prefer" header of the <paramref name="requestMessage"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageExtensions.PreferenceAppliedHeader(Microsoft.Data.OData.IODataResponseMessage)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.OData.ODataPreferenceHeader"/> instance to get or set preferences on the "Preference-Applied" header of the <paramref name="responseMessage"/>.
            </summary>
            <param name="responseMessage">The response message to get or set the "Preference-Applied" header.</param>
            <returns>Returns the <see cref="T:Microsoft.Data.OData.ODataPreferenceHeader"/> instance to get or set preferences on the "Preference-Applied" header of the <paramref name="responseMessage"/>.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessageReaderSettingsBase">
            <summary>
            Base Configuration settings for OData message readers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReaderSettingsBase.messageQuotas">
            <summary> Quotas to use for limiting resource consumption when reading an OData message. </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReaderSettingsBase.checkCharacters">
            <summary> The check characters. </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReaderSettingsBase.enableAtomMetadataReading">
            <summary> The enable atom metadata reading. </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReaderSettingsBase.shouldIncludeAnnotation">
            <summary> The annotation filter. </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettingsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettingsBase"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettingsBase.#ctor(Microsoft.Data.OData.ODataMessageReaderSettingsBase)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">The instance to copy.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettingsBase.CheckCharacters">
            <summary>
            Flag to control whether the reader should check for valid Xml characters or not.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettingsBase.EnableAtomMetadataReading">
            <summary>
            Flag to control whether ATOM metadata is read in ATOM payloads.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettingsBase.MessageQuotas">
            <summary>
            Quotas to use for limiting resource consumption when reading an OData message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettingsBase.ShouldIncludeAnnotation">
            <summary>
            Func to evaluate whether an annotation should be read or skipped by the reader. The func should return true if the annotation should
            be read and false if the annotation should be skipped. A null value indicates that all annotations should be skipped.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessageWriterSettingsBase">
            <summary>
            Base Configuration settings for OData message writers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettingsBase.messageQuotas">
            <summary>Quotas to use for limiting resource consumption when writing an OData message.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettingsBase.checkCharacters">
            <summary> The check characters. </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettingsBase.indent">
            <summary> The indent. </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettingsBase.#ctor">
            <summary>
            Constructor to create default settings for OData writers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettingsBase.#ctor(Microsoft.Data.OData.ODataMessageWriterSettingsBase)">
            <summary>
            Copy constructor to create a copy of the settings for OData writers.
            </summary>
            <param name="other">Settings to create a copy from.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettingsBase.Indent">
            <summary>
            Flag to control whether the writer should use indentation or not.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettingsBase.CheckCharacters">
            <summary>
            Flag to control whether the writer should check for valid Xml characters or not.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettingsBase.MessageQuotas">
            <summary>
            Quotas to use for limiting resource consumption when writing an OData message.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataPreferenceHeader">
            <summary>
            Class to set the "Prefer" header on an <see cref="T:Microsoft.Data.OData.IODataRequestMessage"/> or 
            the "Preference-Applied" header on an <see cref="T:Microsoft.Data.OData.IODataResponseMessage"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.ReturnNoContentPreferenceToken">
            <summary>
            The return-no-content preference token.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.ReturnContentPreferenceToken">
            <summary>
            The return-content preference token.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.ODataAnnotationPreferenceToken">
            <summary>
            The odata-annotations preference-extensions token.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.PreferHeaderName">
            <summary>
            The Prefer header name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.PreferenceAppliedHeaderName">
            <summary>
            The Preference-Applied header name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.EmptyParameters">
            <summary>
            Empty header parameters
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.ReturnNoContentPreference">
            <summary>
            The return-no-content preference.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.ReturnContentPreference">
            <summary>
            The return-content preference.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.message">
            <summary>
            The message to set the preference header to and to get the preference header from.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.preferenceHeaderName">
            <summary>
            "Prefer" if message is an IODataRequestMessage; "Preference-Applied" if message is an IODataResponseMessage.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPreferenceHeader.preferences">
            <summary>
            Dictionary of preferences in the header
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.#ctor(Microsoft.Data.OData.IODataRequestMessage)">
            <summary>
            Internal constructor to instantiate an <see cref="T:Microsoft.Data.OData.ODataPreferenceHeader"/> from an <see cref="T:Microsoft.Data.OData.IODataRequestMessage"/>.
            </summary>
            <param name="requestMessage">The request message to get and set the "Prefer" header.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.#ctor(Microsoft.Data.OData.IODataResponseMessage)">
            <summary>
            Internal constructor to instantiate an <see cref="T:Microsoft.Data.OData.ODataPreferenceHeader"/> from an <see cref="T:Microsoft.Data.OData.IODataResponseMessage"/>.
            </summary>
            <param name="responseMessage">The response message to get and set the "Preference-Applied" header.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.AddQuotes(System.String)">
            <summary>
            Adds quotes around the given text value.
            </summary>
            <param name="text">text to quote.</param>
            <returns>Returns the quoted text.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.PreferenceExists(System.String)">
            <summary>
            Returns true if the given preference exists in the header, false otherwise.
            </summary>
            <param name="preference">Preference in question.</param>
            <returns>Returns true if the given preference exists in the header, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.Clear(System.String)">
            <summary>
            Clears the <paramref name="preference"/> from the "Prefer" header on the underlying IODataRequestMessage or
            the "Preference-Applied" header on the underlying IODataResponseMessage.
            </summary>
            <param name="preference">The preference to clear.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.Set(Microsoft.Data.OData.HttpHeaderValueElement)">
            <summary>
            Sets the <paramref name="preference"/> to the "Prefer" header on the underlying IODataRequestMessage or
            the "Preference-Applied" header on the underlying IODataResponseMessage.
            </summary>
            <param name="preference">The preference to set.</param>
            <remarks>
            If <paramref name="preference"/> is already on the header, this method does a replace rather than adding another instance of the same preference.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.Get(System.String)">
            <summary>
            Gets the <paramref name="preferenceName"/> from the "Prefer" header from the underlying <see cref="T:Microsoft.Data.OData.IODataRequestMessage"/> or
            the "Preference-Applied" header from the underlying <see cref="T:Microsoft.Data.OData.IODataResponseMessage"/>.
            </summary>
            <param name="preferenceName">The preference to get.</param>
            <returns>Returns a key value pair of the <paramref name="preferenceName"/> and its value. The Value property of the key value pair may be null since not
            all preferences have value. If the <paramref name="preferenceName"/> is missing from the header, null is returned.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.ParsePreferences">
            <summary>
            Parses the current preference values to a dictionary of preference and value pairs.
            </summary>
            <returns>Returns a dictionary of preference and value pairs; null if the preference header has not been set.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPreferenceHeader.SetPreferencesToMessageHeader">
            <summary>
            Sets the "Prefer" or the "Preference-Applied" header to the underlying message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPreferenceHeader.ReturnContent">
            <summary>
            Property to get and set the "return-content" and "return-no-content" preferences to the "Prefer" header on the underlying IODataRequestMessage or
            the "Preference-Applied" header on the underlying IODataResponseMessage.
            Setting true sets the "return-content" preference and clears the "return-no-content" preference.
            Setting false sets the "return-no-content" preference and clears the "return-content" preference.
            Setting null clears the "return-content" and "return-no-content" preferences.
            Returns true if the "return-content" preference is on the header. Otherwise returns false if the "return-no-content" is on the header.
            Returning null indicates that "return-content" and "return-no-content" are not on the header.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPreferenceHeader.AnnotationFilter">
            <summary>
            Property to get and set the "odata.include-annotations" preference with the given filter to the "Prefer" header on the underlying IODataRequestMessage or
            the "Preference-Applied" header on the underlying IODataResponseMessage.
            If the "odata-annotations" preference is already on the header, set replaces the existing instance.
            Returning null indicates that the "odata.include-annotations" preference is not on the header.
            
            The filter string may be a comma delimited list of any of the following supported patterns:
              "*"        -- Matches all annotation names.
              "ns.*"     -- Matches all annotation names under the namespace "ns".
              "ns.name"  -- Matches only the annotation name "ns.name".
              "-"        -- The exclude operator may be used with any of the supported pattern, for example:
                            "-ns.*"    -- Excludes all annotation names under the namespace "ns".
                            "-ns.name" -- Excludes only the annotation name "ns.name".
            Null or empty filter is equivalent to "-*".
            
            The relative priority of the pattern is base on the relative specificity of the patterns being compared. If pattern1 is under the namespace pattern2,
            pattern1 is more specific than pattern2 because pattern1 matches a subset of what pattern2 matches. We give higher priority to the pattern that is more specific.
            For example:
             "ns.*" has higher priority than "*"
             "ns.name" has higher priority than "ns.*"
             "ns1.name" has same priority as "ns2.*"
            
            Patterns with the exclude operator takes higher precedence than the same pattern without.
            For example: "-ns.name" has higher priority than "ns.name".
            
            Examples:
              "ns1.*,ns.name"       -- Matches any annotation name under the "ns1" namespace and the "ns.name" annotation.
              "*,-ns.*,ns.name"     -- Matches any annotation name outside of the "ns" namespace and only "ns.name" under the "ns" namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPreferenceHeader.Preferences">
            <summary>
            Dictionary of preferences in the header.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ReadOnlyEnumerableExtensions">
            <summary>
            Extension methods for ReadOnlyEnumerable and ReadOnlyEnumerableOfT
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerableExtensions.IsEmptyReadOnlyEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            true if <paramref name="source"/> is the same instance as ReadOnlyEnumerableOfT.Empty(). false otherwise.
            </summary>
            <typeparam name="T">The element type of the enumerable.</typeparam>
            <param name="source">The enumerable in question.</param>
            <returns>Returns true if <paramref name="source"/> is the empty ReadOnlyEnumerableOfT. false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerableExtensions.ToReadOnlyEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Casts an IEnumerableOfT to ReadOnlyEnumerableOfT.
            </summary>
            <typeparam name="T">The element type of the enumerable.</typeparam>
            <param name="source">The source enumerable.</param>
            <param name="collectionName">The name of the collection to report in case there's an error.</param>
            <returns>The casted ReadOnlyEnumerableOfT.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerableExtensions.GetOrCreateReadOnlyEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns the <paramref name="source"/> as ReadOnlyEnumerableOfT or
            a new instance of ReadOnlyEnumerableOfT if <paramref name="source"/> is the same instance as ReadOnlyEnumerableOfT.Empty().
            </summary>
            <typeparam name="T">The element type of the enumerable.</typeparam>
            <param name="source">The source enumerable in question.</param>
            <param name="collectionName">The name of the collection to report in case there's an error.</param>
            <returns>Returns the <paramref name="source"/> as ReadOnlyEnumerableOfT or
            a new instance of ReadOnlyEnumerableOfT if <paramref name="source"/> is the same instance as ReadOnlyEnumerableOfT.Empty().</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerableExtensions.ConcatToReadOnlyEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.String,``0)">
            <summary>
            Returns a ReadOnlyEnumerableOfT that is the result of <paramref name="source"/> plus <paramref name="item"/>.
            </summary>
            <typeparam name="T">The element type of the enumerable.</typeparam>
            <param name="source">The source enumerable to concat.</param>
            <param name="collectionName">The name of the collection to report in case there's an error.</param>
            <param name="item">Item to concat to the source enumerable.</param>
            <returns>Returns a ReadOnlyEnumerableOfT that is the result of <paramref name="source"/> plus <paramref name="item"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerableExtensions.AddAction(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataAction)">
            <summary>
            Adds an ODataAction to an entry.
            </summary>
            <param name="entry">The entry to add the action.</param>
            <param name="action">The action to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerableExtensions.AddFunction(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataFunction)">
            <summary>
            Adds an ODataFunction to an entry.
            </summary>
            <param name="entry">The entry to add the function.</param>
            <param name="function">The function to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerableExtensions.AddAssociationLink(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataAssociationLink)">
            <summary>
            Adds an association link to an entry.
            </summary>
            <param name="entry">The entry to add the association link to.</param>
            <param name="associationLink">The association link to add.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder">
            <summary>
            Implementation of OData entity metadata builder based on OData protocol conventions.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.uriBuilder">
            <summary>The URI builder to use.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.entryMetadataContext">
            <summary>The context to answer basic metadata questions about the entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.metadataContext">
            <summary>The metadata context.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.processedNavigationLinks">
            <summary>The list of navigation links that have been processed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.computedEditLink">
            <summary>The edit link.</summary>
            <remarks>This is lazily evaluated. It may be retrieved from the entry or computed.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.computedReadLink">
            <summary>The read link.</summary>
            <remarks>This is lazily evaluated. It may be retrieved from the entry or computed.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.computedETag">
            <summary>The computed ETag.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.etagComputed">
            <summary>true if the etag value has been computed, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.computedId">
            <summary>The computed ID of this entity instance.</summary>
            <remarks>
            This is always built from the key properties, and never comes from the entry.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.computedEntityInstanceUri">
            <summary>A computed uri that is equivalent to the ID or the edit-link without a type segment.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.computedMediaResource">
            <summary>The computed MediaResource for MLEs.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.computedStreamProperties">
            <summary>The list of computed stream properties.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.unprocessedNavigationLinks">
            <summary>The enumerator for unprocessed navigation links.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.missingOperationGenerator">
            <summary>The missing operation generator for the current entry.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.#ctor(Microsoft.Data.OData.Evaluation.IODataEntryMetadataContext,Microsoft.Data.OData.Evaluation.IODataMetadataContext,Microsoft.Data.OData.Evaluation.ODataUriBuilder)">
            <summary>
            Constructor
            </summary>
            <param name="entryMetadataContext">The context to answer basic metadata questions about the entry.</param>
            <param name="metadataContext">The metadata context.</param>
            <param name="uriBuilder">The uri builder to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetEditLink">
            <summary>
            Gets the edit link of the entity.
            </summary>
            <returns>
            The absolute URI of the edit link for the entity.
            Or null if it is not possible to determine the edit link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetReadLink">
            <summary>
            Gets the read link of the entity.
            </summary>
            <returns>
            The absolute URI of the read link for the entity.
            Or null if it is not possible to determine the read link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetId">
            <summary>
            Gets the ID of the entity.
            </summary>
            <returns>
            The ID for the entity.
            Or null if it is not possible to determine the ID.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetETag">
            <summary>
            Gets the ETag of the entity.
            </summary>
            <returns>
            The ETag for the entity.
            Or null if it is not possible to determine the ETag.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetMediaResource">
            <summary>
            Gets the default media resource of the entity.
            </summary>
            <returns>
            The the default media resource of the entity.
            Or null if the entity is not an MLE.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetProperties(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty})">
            <summary>
            Gets the entity properties.
            </summary>
            <param name="nonComputedProperties">Non-computed properties from the entity.</param>
            <returns>The the computed and non-computed entity properties.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetActions">
            <summary>
            Gets the list of computed and non-computed actions for the entity.
            </summary>
            <returns>The list of computed and non-computed actions for the entity.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetFunctions">
            <summary>
            Gets the list of computed and non-computed functions for the entity.
            </summary>
            <returns>The list of computed and non-computed functions for the entity.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.MarkNavigationLinkProcessed(System.String)">
            <summary>
            Marks the given navigation link as processed.
            </summary>
            <param name="navigationPropertyName">The navigation link we've already processed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetNextUnprocessedNavigationLink">
            <summary>
            Returns the next unprocessed navigation link or null if there's no more navigation links to process.
            </summary>
            <returns>Returns the next unprocessed navigation link or null if there's no more navigation links to process.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetStreamEditLink(System.String)">
            <summary>
            Gets the edit link of a stream value.
            </summary>
            <param name="streamPropertyName">The name of the stream property the edit link is computed for; 
            or null for the default media resource.</param>
            <returns>
            The absolute URI of the edit link for the specified stream property or the default media resource.
            Or null if it is not possible to determine the stream edit link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetStreamReadLink(System.String)">
            <summary>
            Gets the read link of a stream value.
            </summary>
            <param name="streamPropertyName">The name of the stream property the read link is computed for; 
            or null for the default media resource.</param>
            <returns>
            The absolute URI of the read link for the specified stream property or the default media resource.
            Or null if it is not possible to determine the stream read link.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetNavigationLinkUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Gets the navigation link URI for the specified navigation property.
            </summary>
            <param name="navigationPropertyName">The name of the navigation property to get the navigation link URI for.</param>
            <param name="navigationLinkUrl">The value of the link URI as seen on the wire or provided explicitly by the user or previously returned by the metadata builder, which may be null.</param>
            <param name="hasNavigationLinkUrl">true if the value of the <paramref name="navigationLinkUrl"/> was seen on the wire or provided explicitly by the user or previously returned by
            the metadata builder, false otherwise. This flag allows the metadata builder to determine whether a null navigation link url is an uninitialized value or a value that was set explicitly.</param>
            <returns>
            The navigation link URI for the navigation property.
            null if its not possible to determine the navigation link for the specified navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetAssociationLinkUri(System.String,System.Uri,System.Boolean)">
            <summary>
            Gets the association link URI for the specified navigation property.
            </summary>
            <param name="navigationPropertyName">The name of the navigation property to get the association link URI for.</param>
            <param name="associationLinkUrl">The value of the link URI as seen on the wire or provided explicitly by the user or previously returned by the metadata builder, which may be null.</param>
            <param name="hasAssociationLinkUrl">true if the value of the <paramref name="associationLinkUrl"/> was seen on the wire or provided explicitly by the user or previously returned by
            the metadata builder, false otherwise. This flag allows the metadata builder to determine whether a null association link url is an uninitialized value or a value that was set explicitly.</param>
            <returns>
            The association link URI for the navigation property.
            null if its not possible to determine the association link for the specified navigation property.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetOperationTargetUri(System.String,System.String)">
            <summary>
            Get the operation target URI for the specified <paramref name="operationName"/>.
            </summary>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <param name="bindingParameterTypeName">The binding parameter type name to include in the target, or null/empty if there is none.</param>
            <returns>
            The target URI for the operation.
            null if it is not possible to determine the target URI for the specified operation.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetOperationTitle(System.String)">
            <summary>
            Get the operation title for the specified <paramref name="operationName"/>.
            </summary>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <returns>
            The title for the operation.
            null if it is not possible to determine the title for the specified operation.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.ComputeEditLink">
            <summary>
            Computes the edit link.
            </summary>
            <returns>Uri that was computed based on the computed Id and possible type segment.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.ComputeAndCacheId">
            <summary>
            Computes and sets the field for the computed Id.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.GetComputedStreamProperties(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty})">
            <summary>
            Computes all projected or missing stream properties.
            </summary>
            <param name="nonComputedProperties">Non-computed properties from the entity.</param>
            <returns>The the computed stream properties for the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.ComputedId">
            <summary>
            Lazy evaluated computed entity Id. This is always a computed value and never comes from the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.ComputedEntityInstanceUri">
            <summary>
            Lazy evaluated computed entity instance uri. This is always a computed value and never comes from the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataConventionalEntityMetadataBuilder.MissingOperationGenerator">
            <summary>
            The missig operation generator for the current entry.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder">
            <summary>
            Implementation of OData URI builder based on OData protocol conventions.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataUriBuilder">
            <summary>
            Extensibility point for customizing how OData uri's are built.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.BuildBaseUri">
            <summary>
            Builds the base URI for the entity container.
            </summary>
            <returns>
            The base URI for the entity container.
            This can be either an absolute URI,
            or relative URI which will be combined with the URI of the metadata document for the service.
            null if the model doesn't have the service base URI annotation.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.BuildEntitySetUri(System.Uri,System.String)">
            <summary>
            Builds the URI for an entity set.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="entitySetName">The entity set name.</param>
            <returns>The entity set URI.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.BuildEntityInstanceUri(System.Uri,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Builds the entity instance URI with the given key property values.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="keyProperties">The list of name value pair for key properties.</param>
            <param name="entityTypeName">The full name of the entity type we are building the key expression for.</param>
            <returns>The entity instance URI.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.BuildStreamEditLinkUri(System.Uri,System.String)">
            <summary>
            Builds the edit link for a stream property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="streamPropertyName">
            The name of the stream property the link is computed for; 
            or null for the default media resource.
            </param>
            <returns>The edit link for the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.BuildStreamReadLinkUri(System.Uri,System.String)">
            <summary>
            Builds the read link for a stream property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="streamPropertyName">
            The name of the stream property the link is computed for; 
            or null for the default media resource.
            </param>
            <returns>The read link for the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.BuildNavigationLinkUri(System.Uri,System.String)">
            <summary>
            Builds the navigation link for the navigation property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="navigationPropertyName">The name of the navigation property to get the navigation link URI for.</param>
            <returns>The navigation link URI for the navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.BuildAssociationLinkUri(System.Uri,System.String)">
            <summary>
            Builds the association link for the navigation property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="navigationPropertyName">The name of the navigation property to get the association link URI for.</param>
            <returns>The association link URI for the navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.BuildOperationTargetUri(System.Uri,System.String,System.String)">
            <summary>
            Builds the operation target URI for the specified <paramref name="operationName"/>.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <param name="bindingParameterTypeName">The binding parameter type name to include in the target, or null/empty if there is none.</param>
            <returns>The target URI for the operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataUriBuilder.AppendTypeSegment(System.Uri,System.String)">
            <summary>
            Builds a URI with the given type name appended as a new segment on the base URI.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="typeName">The fully qualified type name to append.</param>
            <returns>The URI with the type segment appended.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.serviceBaseUri">
            <summary>The base URI of the service. This will be used as the base URI for all entity containers.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.urlConvention">
            <summary>The specific url-convention to use.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.keySerializer">
            <summary>The specific key-serializer to use based on the convention.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.#ctor(System.Uri,Microsoft.Data.OData.Evaluation.UrlConvention)">
            <summary>
            Constructor.
            </summary>
            <param name="serviceBaseUri">The base URI of the service. This will be used as the base URI for all entity containers.</param>
            <param name="urlConvention">The specific url convention to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.BuildBaseUri">
            <summary>
            Builds the base URI for the entity container.
            </summary>
            <returns>
            The base URI for the entity container.
            This can be either an absolute URI,
            or relative URI which will be combined with the URI of the metadata document for the service.
            null if the model doesn't have the service base URI annotation.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.BuildEntitySetUri(System.Uri,System.String)">
            <summary>
            Builds the URI for an entity set.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="entitySetName">The entity set name.</param>
            <returns>The entity set URI.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.BuildEntityInstanceUri(System.Uri,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Builds the entity instance URI with the given key property values.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="keyProperties">The list of name value pair for key properties.</param>
            <param name="entityTypeName">The full name of the entity type we are building the key expression for.</param>
            <returns>The entity instance URI.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.BuildStreamEditLinkUri(System.Uri,System.String)">
            <summary>
            Builds the edit link for a stream property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="streamPropertyName">
            The name of the stream property the link is computed for; 
            or null for the default media resource.
            </param>
            <returns>The edit link for the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.BuildStreamReadLinkUri(System.Uri,System.String)">
            <summary>
            Builds the read link for a stream property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="streamPropertyName">
            The name of the stream property the link is computed for; 
            or null for the default media resource.
            </param>
            <returns>The read link for the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.BuildNavigationLinkUri(System.Uri,System.String)">
            <summary>
            Builds the navigation link for the navigation property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="navigationPropertyName">The name of the navigation property to get the navigation link URI for.</param>
            <returns>The navigation link URI for the navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.BuildAssociationLinkUri(System.Uri,System.String)">
            <summary>
            Builds the association link for the navigation property.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="navigationPropertyName">The name of the navigation property to get the association link URI for.</param>
            <returns>The association link URI for the navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.BuildOperationTargetUri(System.Uri,System.String,System.String)">
            <summary>
            Builds the operation target URI for the specified <paramref name="operationName"/>.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="operationName">The fully qualified name of the operation for which to get the target URI.</param>
            <param name="bindingParameterTypeName">The binding parameter type name to include in the target, or null/empty if there is none.</param>
            <returns>The target URI for the operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.AppendTypeSegment(System.Uri,System.String)">
            <summary>
            Builds a URI with the given type name appended as a new segment on the base URI.
            </summary>
            <param name="baseUri">The URI to append to.</param>
            <param name="typeName">The fully qualified type name to append.</param>
            <returns>The URI with the type segment appended.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.ValidateBaseUri(System.Uri)">
            <summary>
            Validates the base URI parameter to be a non-null absolute URI.
            </summary>
            <param name="baseUri">The base URI parameter to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.AppendSegment(System.Uri,System.String,System.Boolean)">
            <summary>
            Appends a segment to the specified base URI.
            </summary>
            <param name="baseUri">The base Uri to append the segment to.</param>
            <param name="segment">The segment to append.</param>
            <param name="escapeSegment">True if the new segment should be escaped, otherwise False.</param>
            <returns>New URI with the appended segment and no trailing slash added.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.ValidateKeyValue(System.String,System.Object,System.String)">
            <summary>
            Gets the CLR value of a primitive key property.
            </summary>
            <param name="keyPropertyName">The key property name.</param>
            <param name="keyPropertyValue">The key property value.</param>
            <param name="entityTypeName">The entity type name we are validating the key value for.</param>
            <returns>The primitive value of the key property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataConventionalUriBuilder.AppendKeyExpression(System.Text.StringBuilder,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Appends the key expression for the given entity to the given <see cref="T:System.Text.StringBuilder"/>
            </summary>
            <param name="builder">The builder to append onto.</param>
            <param name="keyProperties">The list of name value pair for key properties.</param>
            <param name="entityTypeName">The full name of the entity type we are building the key expression for.</param>
        </member>
        <member name="T:Microsoft.Data.OData.InstanceAnnotationCollection">
            <summary>
            Annotation to capture all of the custom instance annotations on an ODataAnnotatable.
            </summary>
            <remarks>
            Currently only <see cref="T:Microsoft.Data.OData.ODataError"/>, <see cref="T:Microsoft.Data.OData.ODataEntry"/>, and <see cref="T:Microsoft.Data.OData.ODataFeed"/> supports instance annotations.
            Additionally, instance annotations will only be serialized in Json.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.InstanceAnnotationCollection.inner">
            <summary>
            Backing dictionary of instance annotation term name/object pairs.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationCollection.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.InstanceAnnotationCollection"/> to hold instance annotations for an <see cref="T:Microsoft.Data.OData.ODataAnnotatable"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the ICollection> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:Microsoft.Data.OData.InstanceAnnotationCollection"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:Microsoft.Data.OData.InstanceAnnotationCollection"/> is read-only. </exception>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationCollection.Add(System.String,Microsoft.Data.OData.ODataValue)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param><param name="value">The object to use as the value of the element to add.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationCollection.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="key">The key of the element to remove.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationCollection.TryGetValue(System.String,Microsoft.Data.OData.ODataValue@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.ICollection`1"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for this object.
            </summary>
            <returns>An enumerator for this object.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.InstanceAnnotationCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.Data.OData.InstanceAnnotationCollection"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:Microsoft.Data.OData.InstanceAnnotationCollection"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Data.OData.InstanceAnnotationCollection.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="T:Microsoft.Data.OData.InstanceAnnotationWriteTracker">
            <summary>
            Helper class to track if an annotation has been written.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.InstanceAnnotationWriteTracker.writeStatus">
            <summary>
            Maintains the write status for each annotation using its key.
            If a key exists in the list then it is considered written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationWriteTracker.#ctor">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.InstanceAnnotationWriteTracker"/> to hold write status for instance annotations contained in <see cref="T:Microsoft.Data.OData.InstanceAnnotationCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationWriteTracker.IsAnnotationWritten(System.String)">
            <summary>
            Check if an annotation is already written.
            </summary>
            <returns>true if the annotation is written; otherwise false.</returns>
            <param name="key">The key of the element to check if its written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.InstanceAnnotationWriteTracker.MarkAnnotationWritten(System.String)">
            <summary>
            Mark an annotation as written.
            </summary>
            <returns>true if the annotation was unmarked before; otherwise false.</returns>
            <param name="key">The key of the element to mark as written.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataAnnotationNames">
            <summary>
            Well known OData annotation names reserved for OData Lib.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataMetadata">
            <summary>The OData Metadata annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataNull">
            <summary>The OData 'null' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataType">
            <summary>The OData Type annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataId">
            <summary>The OData ID annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataETag">
            <summary>The OData etag annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataEditLink">
            <summary>The OData edit link annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataReadLink">
            <summary>The OData read link annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataMediaEditLink">
            <summary>The OData media edit link annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataMediaReadLink">
            <summary>The OData media read link annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataMediaContentType">
            <summary>The OData media content type annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataMediaETag">
            <summary>The OData media etag annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataCount">
            <summary>The 'odata.count' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataNextLink">
            <summary>The 'odata.nextLink' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataNavigationLinkUrl">
            <summary>The 'odata.navigationLinkUrl' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataBind">
            <summary>The 'odata.bind' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataAssociationLinkUrl">
            <summary>The 'odata.associationLinkUrl' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataAnnotationGroup">
            <summary>The 'odata.annotationGroup' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataAnnotationGroupReference">
            <summary>The 'odata.annotationGroupReference' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataError">
            <summary>The 'odata.error' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ODataDeltaLink">
            <summary>The 'odata.deltaLink' annotation name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.KnownODataAnnotationNames">
            <summary>
            Hash set of known odata annotation names that have special meanings to OData Lib.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.IsODataAnnotationName(System.String)">
            <summary>
            Returns true if the <paramref name="annotationName"/> starts with "odata.", false otherwise.
            </summary>
            <param name="annotationName">The name of the annotation in question.</param>
            <returns>Returns true if the <paramref name="annotationName"/> starts with "odata.", false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.IsUnknownODataAnnotationName(System.String)">
            <summary>
            Returns true if the <paramref name="annotationName"/> starts with "odata." and is not one of the reserved odata annotation names; returns false otherwise.
            </summary>
            <param name="annotationName">The annotation name in question.</param>
            <returns>Returns true if the <paramref name="annotationName"/> starts with "odata." and is not one of the reserved odata annotation names; returns false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataAnnotationNames.ValidateIsCustomAnnotationName(System.String)">
            <summary>
            Validates that the <paramref name="annotationName"/> is not a reserved OData instance annotation.
            </summary>
            <param name="annotationName">The instance annotation name to check.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer">
            <summary>
            Defines an interface for a class that can write OData values in Json Light.
            This is used internally for mocking.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.WriteNullValue">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.WriteComplexValue(Microsoft.Data.OData.ODataComplexValue,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.Boolean,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Writes out the value of a complex property.
            </summary>
            <param name="complexValue">The complex value to write.</param>
            <param name="metadataTypeReference">The metadata type for the complex value.</param>
            <param name="isTopLevel">true when writing a top-level property; false for nested properties.</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.WriteCollectionValue(Microsoft.Data.OData.ODataCollectionValue,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Writes out the value of a collection property.
            </summary>
            <param name="collectionValue">The collection value to write.</param>
            <param name="metadataTypeReference">The metadata type reference for the collection.</param>
            <param name="isTopLevelProperty">Whether or not a top-level property is being written.</param>
            <param name="isInUri">Whether or not the value is being written for a URI.</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.WritePrimitiveValue(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a primitive value.
            </summary>
            <param name="value">The value to write.</param>
            <param name="expectedTypeReference">The expected type reference of the primitive value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.CreateDuplicatePropertyNamesChecker">
            <summary>
            Creates a <see cref="T:Microsoft.Data.OData.DuplicatePropertyNamesChecker"/> for checking duplication properties inside complex values.
            </summary>
            <returns>A new <see cref="T:Microsoft.Data.OData.DuplicatePropertyNamesChecker"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.JsonWriter">
            <summary>
            JsonWriter this value serializer will use.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.Version">
            <summary>
            Version of OData being written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.Model">
            <summary>
            Model to use for type resolution and verification when writing.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer.Settings">
            <summary>
            The message writer settings to use when writing the message payload.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils">
            <summary>
            Helper methods used by the OData reader for the JsonLight format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils.ParameterSeparatorSplitCharacters">
            <summary>
            The character array used for splitting apart the operation parameter type names in a metadata link. Contains ','.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils.CharactersToTrimFromParameters">
            <summary>
            The set of characters to trim from the parameters of an operation. Contains '(' and ')'.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils.IsMetadataReferenceProperty(System.String)">
            <summary>
            Determines if the specified property name is a name of a metadata reference property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>true if <paramref name="propertyName"/> is a name of a metadata reference property, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils.GetFullyQualifiedFunctionImportName(System.Uri,System.String,System.String@)">
            <summary>
            Gets the fully qualified function import name from the metadata reference property name.
            </summary>
            <param name="metadataDocumentUri">The metadata document Uri.</param>
            <param name="metadataReferencePropertyName">The metadata reference property name.</param>
            <param name="firstParameterTypeName">The first parameter name, if any are present in the given string.</param>
            <returns>The fully qualified function import name.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils.GetUriFragmentFromMetadataReferencePropertyName(System.Uri,System.String)">
            <summary>
            Gets the Uri fragment from the metadata reference property name.
            </summary>
            <param name="metadataDocumentUri">The metadata document Uri.</param>
            <param name="propertyName">The metadata reference property name.</param>
            <returns>The Uri fragment which corresponds to action/function names, etc.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils.GetAbsoluteUriFromMetadataReferencePropertyName(System.Uri,System.String)">
            <summary>
            Converts the metadata reference property name to an absolute Uri.
            </summary>
            <param name="metadataDocumentUri">The metadata document uri.</param>
            <param name="propertyName">The metadata reference property name.</param>
            <returns>The absolute Uri for the metadata reference property name.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils.GetMetadataReferenceName(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Calculates the metadata reference name for the given function import. When there is no overload to the function, this method will
            return the container qualified function import name.  When there is overload to the function this method will
            return FQFN([comma separated parameter type names]) to disambiguate between different overloads.
            </summary>
            <param name="functionImport">The function import in question.</param>
            <returns>The metadata reference name for the given function import.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightUtils.CreateODataOperation(System.Uri,System.String,Microsoft.Data.Edm.IEdmFunctionImport,System.Boolean@)">
            <summary>
            Creates an ODataAction or ODataFunction from a function import.
            </summary>
            <param name="metadataDocumentUri">The metadata document uri.</param>
            <param name="metadataReferencePropertyName">The metadata reference property name.</param>
            <param name="functionImport">The function import to create the ODataOperation for.</param>
            <param name="isAction">true if the created ODataOperation is an ODataAction, false otherwise.</param>
            <returns>The created ODataAction or ODataFunction.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer">
            <summary>
            Responsible for reading annotation groups (both declarations and references) in JSON Light.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer">
            <summary>
            Base class for all OData JsonLight deserializers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.jsonLightInputContext">
            <summary>The JsonLight input context to use for reading.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.metadataContext">
            <summary>Context for entry etadata centric responsibilities.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.metadataUriParseResult">
            <summary>Result of parsing the metadata URI for the payload (or null if none are available).</summary>
            <remarks>This field is only available after the ReadPayloadStart was called.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.TryParsePropertyAnnotation(System.String,System.String@,System.String@)">
            <summary>
            Parses the name of a property and returns the property name and annotation name if the property is a property annotation.
            </summary>
            <param name="propertyAnnotationName">The property name to parse.</param>
            <param name="propertyName">The name of the annotated property, or null if the property is not a property annotation.</param>
            <param name="annotationName">The annotation name, or null if the property is not a property annotation.</param>
            <returns>true if the <paramref name="propertyAnnotationName"/> is a property annotation, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ReadPayloadStart(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean,System.Boolean)">
            <summary>
            Read the start of the top-level data wrapper in JSON responses.
            </summary>
            <param name="payloadKind">The kind of payload we are reading; this guides the parsing of the metadata URI.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker.</param>
            <param name="isReadingNestedPayload">true if we are deserializing a nested payload, e.g. an entry, a feed or a collection within a parameters payload.</param>
            <param name="allowEmptyPayload">true if we allow a comletely empty payload; otherwise false.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first property of the payload after having read (or skipped) the metadata URI property.
                            Or the reader is positioned on an end-object node if there are no properties (other than the metadata URI which is required in responses and optional in requests).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ReadPayloadStartAsync(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean,System.Boolean)">
            <summary>
            Read the start of the top-level data wrapper in JSON responses.
            </summary>
            <param name="payloadKind">The kind of payload we are reading; this guides the parsing of the metadata URI.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker.</param>
            <param name="isReadingNestedPayload">true if we are deserializing a nested payload, e.g. an entry, a feed or a collection within a parameters payload.</param>
            <param name="allowEmptyPayload">true if we allow a comletely empty payload; otherwise false.</param>
            <returns>The parsed metadata URI.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first property of the payload after having read (or skipped) the metadata URI property.
                            Or the reader is positioned on an end-object node if there are no properties (other than the metadata URI which is required in responses and optional in requests).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ReadPayloadEnd(System.Boolean)">
            <summary>
            Reads the end of the top-level data wrapper in JSON responses.
            </summary>
            <param name="isReadingNestedPayload">true if we are deserializing a nested payload, e.g. an entry, a feed or a collection within a parameters payload.</param>
            <remarks>
            Pre-Condition:  any node:                when reading response or a nested payload, will fail if find anything else then EndObject.
                            JsonNodeType.EndOfInput: otherwise
            Post-Condition: JsonNodeType.EndOfInput
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ReadAndValidateAnnotationStringValue(System.String)">
            <summary>
            Reads and validates a string value from the json reader.
            </summary>
            <param name="annotationName">The name of the annotation being read (used for error reporting).</param>
            <returns>The string that was read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ReadAndValidateAnnotationStringValueAsUri(System.String)">
            <summary>
            Reads and validates a string value from the json reader and processes it as a Uri.
            </summary>
            <param name="annotationName">The name of the annotation being read (used for error reporting).</param>
            <returns>The Uri that was read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ReadAndValidateAnnotationStringValueAsLong(System.String)">
            <summary>
            Reads and validates a string value from the json reader and processes it as a long.
            </summary>
            <param name="annotationName">The name of the annotation being read (used for error reporting).</param>
            <returns>The long that was read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ProcessUriFromPayload(System.String)">
            <summary>
            Given a URI from the payload, this method will try to make it absolute, or fail otherwise.
            </summary>
            <param name="uriFromPayload">The URI string from the payload to process.</param>
            <returns>An absolute URI to report.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ProcessProperty(Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Func{System.String,System.Object},System.Action{Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.PropertyParsingResult,System.String})">
            <summary>
            Parses JSON object property starting with the current position of the JSON reader.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use, it will also store the property annotations found.</param>
            <param name="readPropertyAnnotationValue">Function called to read property annotation value.</param>
            <param name="handleProperty">Function callback to handle to resule of parse property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.AssertJsonCondition(Microsoft.Data.OData.Json.JsonNodeType[])">
            <summary>
            Asserts that the JSON reader is positioned on one of the specified node types.
            </summary>
            <param name="allowedNodeTypes">The node types which should appear at this point.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ShouldSkipCustomInstanceAnnotation(System.String)">
            <summary>
            Returns true if <paramref name="annotationName"/> should be skipped by the reader; false otherwise.
            </summary>
            <param name="annotationName">The custom instance annotation name in question.</param>
            <returns>Returns true if <paramref name="annotationName"/> should be skipped by the reader; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.SkippedOverUnknownODataAnnotation(System.String)">
            <summary>
            If <paramref name="annotationName"/> is under the odata namespace but is not known to ODataLib, move the JSON reader forward to skip the
            annotation name and value then return true; return false otherwise.
            </summary>
            <remarks>
            The unknown odata annotation is skipped so that when this version of the reader reads a feed produced by a future version of ODataLib
            that contains an odata annotation that is not recognized on this version, we would simply ignore the annotation rather than failing.
            Note that when we add new odata annotations that cannot be skipped, we would bump the protocol version.
            </remarks>
            <param name="annotationName">The annotation name in question.</param>
            <returns>Returns true if the annotation name and value is skipped; returns false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ParseProperty(Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Func{System.String,System.Object},System.String@)">
            <summary>
            Parses JSON object property starting with the current position of the JSON reader.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use, it will also store the property annotations found.</param>
            <param name="readPropertyAnnotationValue">Function called to read property annotation value.</param>
            <param name="parsedPropertyName">The name of the property or instance annotation found.</param>
            <returns>
            PropertyWithValue - a property with value was found. The <paramref name="parsedPropertyName"/> contains the name of the property.
                                The reader is positioned on the property value.
            PropertyWithoutValue - a property without a value was found. The <paramref name="parsedPropertyName"/> contains the name of the property.
                                   The reader is positioned on the node after property annotations (so either a property or end of object).
            ODataInstanceAnnotation - an odata instance annotation was found. The <paramref name="parsedPropertyName"/> contains the name of the annotation.
                                 The reader is positioned on the value of the annotation.
            CustomInstanceAnnotation - a custom instance annotation was found. The <paramref name="parsedPropertyName"/> contains the name of the annotation.
                                 The reader is positioned on the value of the annotation.
            MetadataReferenceProperty - a property which is a reference into the metadata was found.
                                        The reader is positioned on the value of the property.
            EndOfObject - end of the object scope was reached and no properties are to be reported. The <paramref name="parsedPropertyName"/> is null.
                          This can only happen if there's a property annotation which is ignored (for example custom one) at the end of the object.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ProcessPropertyAnnotation(System.String,System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Func{System.String,System.Object})">
            <summary>
            Process the current property annotation.
            </summary>
            <param name="annotatedPropertyName">The name being annotated. Can be a property or an instance annotation.</param>
            <param name="annotationName">The annotation targeting the <paramref name="annotatedPropertyName"/>.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker.</param>
            <param name="readPropertyAnnotationValue">Callback to read the property annotation value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ReadPayloadStartImplementation(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean,System.Boolean)">
            <summary>
            Read the start of the top-level data wrapper in JSON responses.
            </summary>
            <param name="payloadKind">The kind of payload we are reading; this guides the parsing of the metadata URI.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker.</param>
            <param name="isReadingNestedPayload">true if we are deserializing a nested payload, e.g. an entry, a feed or a collection within a parameters payload.</param>
            <param name="allowEmptyPayload">true if we allow a comletely empty payload; otherwise false.</param>
            <returns>The value of the metadata URI annotation (or null if it was not found).</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first property of the payload after having read (or skipped) the metadata URI property.
                            Or the reader is positioned on an end-object node if there are no properties (other than the metadata URI which is required in responses and optional in requests).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.ReadMetadataUriAnnotation(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean)">
            <summary>
            Reads the odata.metadata annotation.
            </summary>
            <param name="payloadKind">The payload kind for which to read the metadata URI.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker.</param>
            <param name="failOnMissingMetadataUriAnnotation">true if the method should fail if the metadata URI annotation is missing, false if that can be ignored.</param>
            <returns>The value of the metadata URI annotation.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.MetadataContext">
            <summary>
            Context for entry metadata centric responsibilities.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.JsonReader">
            <summary>
            Returns the <see cref="T:Microsoft.Data.OData.Json.BufferingJsonReader"/> which is to be used to read the content of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.MetadataUriParseResult">
            <summary>Result of parsing the metadata URI for the payload (or null if none are available).</summary>
            <remarks>This property is only available after the ReadPayloadStart was called.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.JsonLightInputContext">
            <summary>
            The Json lite input context to use for reading.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.MetadataDocumentUri">
            <summary>
            Gets the metadata document Uri from the MetadataUriParseResult.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.PropertyParsingResult">
            <summary>Possible results of parsing JSON object property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.PropertyParsingResult.EndOfObject">
            <summary>An end of object was reached without any property to be reported.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.PropertyParsingResult.PropertyWithValue">
            <summary>A property with value was found.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.PropertyParsingResult.PropertyWithoutValue">
            <summary>A property without value was found.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.PropertyParsingResult.ODataInstanceAnnotation">
            <summary>A 'odata' instance annotation was found.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.PropertyParsingResult.CustomInstanceAnnotation">
            <summary>A custom instance annotation was found.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightDeserializer.PropertyParsingResult.MetadataReferenceProperty">
            <summary>A metadata reference property was found.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.annotationGroups">
            <summary>
            Mapping of all the annotation groups encountered so far, keyed by name.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Initializes a new <see cref="T:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer"/>.
            </summary>
            <param name="inputContext">The JSON light input context.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.ReadAnnotationGroup(System.Func{System.String,System.Object},System.Func{System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Object})">
            <summary>
            Reads the current property node as an annotaion group, if the property name matches. Otherwise, it does not move the reader.
            </summary>
            <param name="readPropertyAnnotationValue">Fired whenever an OData property annotation is seen. Takes the name of the property annotation and should read and return the annotation's value.</param>
            <param name="readInstanceAnnotationValue">Fired whenever an OData instance annotation is seen. Takes the name of the instance annotation and should read and return the annotation's value.</param>
            <returns>The annotation group which was read, or null if we did not encounter an annotation group.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property:     The property to consider as an annotion group.
            Post-Condition: JsonNodeType.Property:     If the property is not an annotation group, the reader will not move.
                            Any:          The node after the annotation group property, if one was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.AddAnnotationGroup(Microsoft.Data.OData.ODataJsonLightAnnotationGroup)">
            <summary>
            Adds the given annotation group to the set of groups which can be retrieved by annotation group references.
            </summary>
            <param name="annotationGroup">The annotation group to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.VerifyAnnotationGroupNameNotYetFound(Microsoft.Data.OData.ODataJsonLightAnnotationGroup)">
            <summary>
            Checks to see that the name of the given annotation group has not yet been set. Throws otherwise.
            </summary>
            <param name="annotationGroup">The annotation group to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.IsAnnotationGroupName(System.String)">
            <summary>
            Returns whether the given property name indicates this property contains the name of the annotation group.
            </summary>
            <param name="propertyName">The property name to check.</param>
            <returns>true if the property name is annotation group name property, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.VerifyAnnotationGroupNameFound(Microsoft.Data.OData.ODataJsonLightAnnotationGroup)">
            <summary>
            Verifies that the name of the given annotation group was set, and throws otherwise.
            </summary>
            <param name="annotationGroup">The annnotation group to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.VerifyDataPropertyIsAnnotationName(System.String,Microsoft.Data.OData.ODataJsonLightAnnotationGroup)">
            <summary>
            Verifies that the given property name is a valid annotation name, and throws if not.
            </summary>
            <param name="propertyName">The property name to check.</param>
            <param name="annotationGroup">The annotation group which this property would be added to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.CreateExceptionForInvalidAnnotationInsideAnnotationGroup(System.String,Microsoft.Data.OData.ODataJsonLightAnnotationGroup)">
            <summary>
            Creates an ODataException to throw when a non-annotation property is found inside an annotation group.
            </summary>
            <param name="propertyName">The name of the property found inside an annotation group.</param>
            <param name="annotationGroup">The annotation group it was found in.</param>
            <returns>An ODataException with an appropriate message, including the annotation group name if one is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.ReadAnnotationGroupReference">
            <summary>
            Reads an annotation group reference and returns the existing annotation group instance with that name.
            </summary>
            <returns>The annotation group which was referenced.</returns>
            <remarks>This method will throw if no matching annotation group is found.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.JsonLightAnnotationGroupDeserializer.ReadAnnotationGroupDeclaration(System.Func{System.String,System.Object},System.Func{System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Object})">
            <summary>
            Reads an annotation group declaration and returns a newly created annotation group instance.
            </summary>
            <param name="readPropertyAnnotationValue">Function which takes the name of an OData property annotation and reads and returns the value of the annotation.</param>
            <param name="readInstanceAnnotationValue">Function which takes the name of an OData instance annotation and reads and returns the value of the annotation.</param>
            <returns>The annotation group which was read.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject:     The property to consider as an annotion group declaration or reference.
                            Any:                          Any other node type will throw an exception.
            Post-Condition: Any:                          The node after the annotation group property value.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightValidationUtils">
            <summary>
            Helper methods used by the OData reader for the JsonLight format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValidationUtils.ValidateMetadataReferencePropertyName(System.Uri,System.String)">
            <summary>
            Validates that a string is either a valid absolute URI, or (if it begins with '#') it is a valid URI fragment.
            </summary>
            <param name="metadataDocumentUri">The metadata document uri.</param>
            <param name="propertyName">The property name to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValidationUtils.ValidateOperation(System.Uri,Microsoft.Data.OData.ODataOperation)">
            <summary>
            Validates an operation is valid.
            </summary>
            <param name="metadataDocumentUri">The metadata document uri.</param>
            <param name="operation">The operation to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValidationUtils.IsOpenMetadataReferencePropertyName(System.Uri,System.String)">
            <summary>
            Determines if the specified property name is a name of an open metadata reference property.
            </summary>
            <param name="metadataDocumentUri">The metadata document uri.</param>
            <param name="propertyName">The property name in question.</param>
            <returns>true if the specified property name is a name of an open metadata reference property; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValidationUtils.ValidateOperationPropertyValueIsNotNull(System.Object,System.String,System.String)">
            <summary>
            Validates that the property in an operation (an action or a function) is valid.
            </summary>
            <param name="propertyValue">The value of the property.</param>
            <param name="propertyName">The name of the property (used for error reporting).</param>
            <param name="metadata">The metadata value for the operation (used for error reporting).</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionState">
            <summary>
            JSON Ligth specific state which is created during payload kind detection and reused during standard reading if available.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionState.metadataUriParseResult">
            <summary>The parsed metadata URI.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionState.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult)">
            <summary>
            Constructor.
            </summary>
            <param name="metadataUriParseResult">The parsed metadata URI.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionState.MetadataUriParseResult">
            <summary>The parsed metadata URI.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.IJsonWriter">
            <summary>
            Interface for a class that can write arbitrary JSON.
            Internally we want the interface for mocks.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.StartPaddingFunctionScope">
            <summary>
            Start the padding function scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.EndPaddingFunctionScope">
            <summary>
            End the padding function scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.StartObjectScope">
            <summary>
            Start the object scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.EndObjectScope">
            <summary>
            End the current object scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.StartArrayScope">
            <summary>
            Start the array scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.EndArrayScope">
            <summary>
            End the current array scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteDataWrapper">
            <summary>
            Write the "d" wrapper text.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteDataArrayName">
            <summary>
            Write the "results" header for the data array.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteName(System.String)">
            <summary>
            Write the name for the object property.
            </summary>
            <param name="name">Name of the object property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WritePaddingFunctionName(System.String)">
            <summary>
            Writes a function name for JSON padding.
            </summary>
            <param name="functionName">Name of the padding function to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Boolean)">
            <summary>
            Write a boolean value.
            </summary>
            <param name="value">Boolean value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Int32)">
            <summary>
            Write an integer value.
            </summary>
            <param name="value">Integer value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Single)">
            <summary>
            Write a float value.
            </summary>
            <param name="value">Float value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Int16)">
            <summary>
            Write a short value.
            </summary>
            <param name="value">Short value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Int64)">
            <summary>
            Write a long value.
            </summary>
            <param name="value">Long value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Double)">
            <summary>
            Write a double value.
            </summary>
            <param name="value">Double value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Guid)">
            <summary>
            Write a Guid value.
            </summary>
            <param name="value">Guid value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Decimal)">
            <summary>
            Write a decimal value
            </summary>
            <param name="value">Decimal value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.DateTime,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Write a DateTime value
            </summary>
            <param name="value">DateTime value to be written.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.DateTimeOffset,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Writes a DateTimeOffset value
            </summary>
            <param name="value">DateTimeOffset value to be written.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value
            </summary>
            <param name="value">TimeSpan value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.Byte)">
            <summary>
            Write a byte value.
            </summary>
            <param name="value">Byte value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.SByte)">
            <summary>
            Write an sbyte value.
            </summary>
            <param name="value">SByte value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValue(System.String)">
            <summary>
            Write a string value.
            </summary>
            <param name="value">String value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.Flush">
            <summary>
            Clears all buffers for the current writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.WriteValueSeparator">
            <summary>
            Writes a separator of a value if it's needed for the next value to be written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IJsonWriter.StartScope(Microsoft.Data.OData.Json.JsonWriter.ScopeType)">
            <summary>
            Start the scope given the scope type.
            </summary>
            <param name="type">The scope type to start.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter">
            <summary>
            Class responsible for writing a collection of <see cref="T:Microsoft.Data.OData.ODataInstanceAnnotation"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter.valueSerializer">
            <summary>
            Value serializer, responsible for serializing the annotation values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter.typeNameOracle">
            <summary>
            The oracle to use to determine the type name to write for entries and values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter.#ctor(Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer,Microsoft.Data.OData.JsonLight.JsonLightTypeNameOracle)">
            <summary>
            Constructs a <see cref="T:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter"/> that can write a collection of <see cref="T:Microsoft.Data.OData.ODataInstanceAnnotation"/>.
            </summary>
            <param name="valueSerializer">The <see cref="T:Microsoft.Data.OData.JsonLight.IODataJsonLightValueSerializer"/> to use for writing values of instance annotations.
            The <see cref="T:Microsoft.Data.OData.Json.IJsonWriter"/> that is also used internally will be acquired from the this instance.</param>
            <param name="typeNameOracle">The oracle to use to determine the type name to write for entries and values.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter.WriteInstanceAnnotations(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataInstanceAnnotation},Microsoft.Data.OData.InstanceAnnotationWriteTracker)">
            <summary>
            Writes all the instance annotations specified in <paramref name="instanceAnnotations"/>.
            </summary>
            <param name="instanceAnnotations">Collection of instance annotations to write.</param>
            <param name="tracker">The tracker to track if instance annotations are written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter.WriteInstanceAnnotations(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataInstanceAnnotation})">
            <summary>
            Writes all the instance annotations specified in <paramref name="instanceAnnotations"/>.
            </summary>
            <param name="instanceAnnotations">Collection of instance annotations to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter.WriteInstanceAnnotation(Microsoft.Data.OData.ODataInstanceAnnotation)">
            <summary>
            Writes an instance annotation.
            </summary>
            <param name="instanceAnnotation">The instance annotation to write.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLightInstanceAnnotationWriter.JsonWriter">
            <summary>
            JsonWriter instance to use for writing term names.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer">
            <summary>
            OData JsonLight serializer for value types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer">
            <summary>
            Base class for all OData JsonLight serializers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.jsonLightOutputContext">
            <summary>
            The JsonLight output context to write to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.instanceAnnotationWriter">
            <summary>
            Instance annotation writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.allowRelativeUri">
            <summary>
            Set to true when odata.metadata is writen; set to false otherwise.
            When value is false, all URIs writen to the payload must be absolute.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.WritePayloadStart">
            <summary>
            Writes the start of the entire JSON payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.WritePayloadEnd">
            <summary>
            Writes the end of the entire JSON payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.WriteMetadataUriProperty(System.Uri)">
            <summary>
            Writes the metadata URI property and the specified value into the payload.
            </summary>
            <param name="metadataUri">The metadata URI to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.WriteTopLevelPayload(System.Action)">
            <summary>
            Helper method to write the data wrapper around a JSON payload.
            </summary>
            <param name="payloadWriterAction">The action that writes the actual JSON payload that is being wrapped.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.WriteTopLevelError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Write a top-level error message.
            </summary>
            <param name="error">The error instance to write.</param>
            <param name="includeDebugInformation">A flag indicating whether error details should be written (in debug mode only) or not.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.UriToString(System.Uri)">
            <summary>
            Returns the string representation of the URI
            </summary>
            <param name="uri">The uri to process.</param>
            <returns>Returns the string representation of the URI.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.JsonLightOutputContext">
            <summary>
            Returns the <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext"/> which is to be used to write the content of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.JsonWriter">
            <summary>
            Returns the <see cref="P:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.JsonWriter"/> which is to be used to write the content of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightSerializer.InstanceAnnotationWriter">
            <summary>
            Instance annotation writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.recursionDepth">
            <summary>
            The current recursion depth of values written by this serializer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.propertySerializer">
            <summary>
            Property serializer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer"/> class.
            </summary>
            <param name="propertySerializer">The property serializer to use when writing complex values.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer"/> class.
            </summary>
            <param name="outputContext">The output context to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.WriteNullValue">
            <summary>
            Writes a null value to the wire.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.WriteComplexValue(Microsoft.Data.OData.ODataComplexValue,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.Boolean,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Writes out the value of a complex property.
            </summary>
            <param name="complexValue">The complex value to write.</param>
            <param name="metadataTypeReference">The metadata type for the complex value.</param>
            <param name="isTopLevel">true when writing a top-level property; false for nested properties.</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <remarks>The current recursion depth should be a value, measured by the number of complex and collection values between
            this complex value and the top-level payload, not including this one.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.WriteCollectionValue(Microsoft.Data.OData.ODataCollectionValue,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Writes out the value of a collection property.
            </summary>
            <param name="collectionValue">The collection value to write.</param>
            <param name="metadataTypeReference">The metadata type reference for the collection.</param>
            <param name="isTopLevelProperty">Whether or not a top-level property is being written.</param>
            <param name="isInUri">Whether or not the value is being written for a URI.</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
            <remarks>The current recursion depth is measured by the number of complex and collection values between 
            this one and the top-level payload, not including this one.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.WritePrimitiveValue(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a primitive value.
            Uses a registered primitive type converter to write the value if one is registered for the type, otherwise directly writes the value.
            </summary>
            <param name="value">The value to write.</param>
            <param name="expectedTypeReference">The expected type reference of the primitive value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.Microsoft#Data#OData#JsonLight#IODataJsonLightValueSerializer#CreateDuplicatePropertyNamesChecker">
            <summary>
            Creates a new instance of a duplicate property names checker.
            Both ODataJsonLightSerializer and IODataJsonLightValueSerializer define this, so we pass through to our base class.
            </summary>
            <returns>The newly created instance of duplicate property names checker.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.AssertRecursionDepthIsZero">
            <summary>
            Asserts that the current recursion depth of values is zero. This should be true on all calls into this class from outside of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.IncreaseRecursionDepth">
            <summary>
            Increases the recursion depth of values by 1. This will throw if the recursion depth exceeds the current limit.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.DecreaseRecursionDepth">
            <summary>
            Decreases the recursion depth of values by 1.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.Microsoft#Data#OData#JsonLight#IODataJsonLightValueSerializer#JsonWriter">
            <summary>
            Returns the <see cref="T:Microsoft.Data.OData.Json.JsonWriter"/> which is to be used to write the content of the message.
            Both ODataJsonLightSerializer and IODataJsonLightValueSerializer define this, so we pass through to our base class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.Microsoft#Data#OData#JsonLight#IODataJsonLightValueSerializer#Version">
            <summary>
            The OData version of the output.
            Both ODataJsonLightSerializer and IODataJsonLightValueSerializer define this, so we pass through to our base class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.Microsoft#Data#OData#JsonLight#IODataJsonLightValueSerializer#Model">
            <summary>
            The model to use.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.Microsoft#Data#OData#JsonLight#IODataJsonLightValueSerializer#Settings">
            <summary>
            The message writer settings to use when writing the message payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer.PropertySerializer">
            <summary>
            Gets the property serializer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonSharedUtils">
            <summary>
            Shared JSON util code for ODataLib and Server.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonSharedUtils.IsDoubleValueSerializedAsString(System.Double)">
            <summary>
            Determines if the given double is serialized as a string in JSON.
            </summary>
            <param name="value">The value to check.</param>
            <returns>true if the value should be written as a string, false if should be written as a JSON number.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonSharedUtils.ValueTypeMatchesJsonType(Microsoft.Data.OData.ODataPrimitiveValue,Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Determines if the given primitive value is of a basic type where we can rely on just the JSON representation to convey type information.
            If so, we don't have to write the type name.
            </summary>
            <param name="primitiveValue">The primitive value in question.</param>
            <param name="valueTypeReference">The type of the primitive value.</param>
            <returns>true if the given primitive value is of a basic JSON type, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver">
            <summary>
            Responsible for resolving the element type of an entity set with reader (i.e., looser) semantics.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EdmTypeResolver">
            <summary>
            Class responsible for determining the entity type of an entity set.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeResolver.GetElementType(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Returns the element type of the given entity set.
            </summary>
            <param name="entitySet">The entity set to get the element type of.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> representing the element type of the <paramref name="entitySet"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeResolver.GetReturnType(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Returns the return type of the given function import.
            </summary>
            <param name="functionImport">The function import to get the return type from.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the return type fo the <paramref name="functionImport"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeResolver.GetReturnType(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport})">
            <summary>
            Returns the return type of the given function import group.
            </summary>
            <param name="functionImportGroup">The function import group to get the return type from.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the return type fo the <paramref name="functionImportGroup"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeResolver.GetParameterType(Microsoft.Data.Edm.IEdmFunctionParameter)">
            <summary>
            Gets the function parameter type.
            </summary>
            <param name="functionParameter">The function parameter to get the type for.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> representing the type on the function parameter; or null if no such type could be found.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.model">
            <summary>The model to use or null if no model is available.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.readerBehavior">
            <summary>Reader behavior if the caller is a reader, null if no reader behavior is available.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.version">
            <summary>The version of the payload being read.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.#ctor(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion)">
            <summary>Creates a new entity set element type resolver with all the information needed when resolving for reading scenarios.</summary>
            <param name="model">The model to use or null if no model is available.</param>
            <param name="readerBehavior">Reader behavior if the caller is a reader, null if no reader behavior is available.</param>
            <param name="version">The version of the payload being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.GetElementType(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>Returns the element type of the given entity set.</summary>
            <param name="entitySet">The entity set to get the element type of.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> representing the element type of the <paramref name="entitySet"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.GetReturnType(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Returns the return type of the given function import.
            </summary>
            <param name="functionImport">The function import to get the return type from.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the return type fo the <paramref name="functionImport"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.GetReturnType(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport})">
            <summary>
            Returns the return type of the given function import group.
            </summary>
            <param name="functionImportGroup">The function import group to get the return type from.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the return type fo the <paramref name="functionImportGroup"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.GetParameterType(Microsoft.Data.Edm.IEdmFunctionParameter)">
            <summary>
            Gets the function parameter type for read and calls the client type resolver to resolve type when it is specified.
            </summary>
            <param name="functionParameter">The function parameter to resolve the type for.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> representing the type on the function parameter; or null if no such type could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.ResolveTypeReference(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Resolves the given type reference if a client type resolver is available.
            </summary>
            <param name="typeReferenceToResolve">Type reference to resolve.</param>
            <returns>The resolved type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeReaderResolver.ResolveType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Resolves the given type if a client type resolver is available.
            </summary>
            <param name="typeToResolve">Type to resolve.</param>
            <returns>The resolved type.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EdmTypeWriterResolver">
            <summary>
            Responsible for resolving the element type of an entity set with writer semantics.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmTypeWriterResolver.Instance">
            <summary>
            Singleton instance of the resolver.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeWriterResolver.#ctor">
            <summary>
            Private constructor to ensure all access goes through the singleton Instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeWriterResolver.GetElementType(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>Returns the element type of the given entity set.</summary>
            <param name="entitySet">The entity set to get the element type of.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> representing the element type of the <paramref name="entitySet"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeWriterResolver.GetReturnType(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Returns the return type of the given function import.
            </summary>
            <param name="functionImport">The function import to get the return type from.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the return type fo the <paramref name="functionImport"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeWriterResolver.GetReturnType(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport})">
            <summary>
            Returns the return type of the given function import group.
            </summary>
            <param name="functionImportGroup">The function import group to get the return type from.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the return type fo the <paramref name="functionImportGroup"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmTypeWriterResolver.GetParameterType(Microsoft.Data.Edm.IEdmFunctionParameter)">
            <summary>
            Gets the function parameter type for write.
            </summary>
            <param name="functionParameter">The function parameter to resolve the type for.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> representing the type on the function parameter; or null if no such type could be found.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionReaderCoreAsync">
            <summary>
            Base class for OData collection readers that verifies a proper sequence of read calls on the reader and which support true async operations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionReaderCore">
            <summary>
            Base class for OData collection readers that verifies a proper sequence of read calls on the reader.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionReader">
            <summary>
            Base class for OData collection readers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReader.Read">
            <summary>Reads the next item from the message payload. </summary>
            <returns>True if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReader.ReadAsync">
            <summary>Asynchronously reads the next item from the message payload.</summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReader.State">
            <summary>Gets the current state of the reader.</summary>
            <returns>The current state of the reader.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReader.Item">
            <summary>Gets the most recent item that has been read.</summary>
            <returns>The most recent item that has been read.</returns>
            <remarks>
            This property returns an <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> when in state ODataCollectionReaderState.CollectionStart
            or ODataCollectionReaderState.CollectionEnd. It returns either a primitive value, an <see cref="T:Microsoft.Data.OData.ODataComplexValue"/> or 'null' when
            in state ODataCollectionReaderState.Value and 'null' in all other states.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderCore.inputContext">
            <summary>The input context to read from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderCore.scopes">
            <summary>Stack of reader scopes to keep track of the current context of the reader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderCore.listener">
            <summary>If not null, the reader will notify the implementer of the interface of relevant state changes in the reader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderCore.collectionValidator">
            <summary>The collection validator instance if no expected item type has been specified; otherwise null.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderCore.expectedItemTypeReference">
            <summary>The expected item type reference for the items in the collection.</summary>
            <remarks>If an expected type is specified the collection has to be homogeneous.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.#ctor(Microsoft.Data.OData.ODataInputContext,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input to read from.</param>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <param name="listener">If not null, the reader will notify the implementer of the interface of relevant state changes in the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.Read">
            <summary>
            Reads the next item from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReadAsync">
            <summary>
            Asynchronously reads the next item from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReadImplementation">
            <summary>
            Reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReadAtStartImplementation">
            <summary>
            Implementation of the collection reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReadAtCollectionStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'CollectionStart'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReadAtValueImplementation">
            <summary>
            Implementation of the reader logic when in state 'Value'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReadAtCollectionEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'CollectionEnd'.
            </summary>
            <returns>Should be false since no more nodes can be read from the reader after the collection ends.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReadSynchronously">
            <summary>
            Reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReadAsynchronously">
            <summary>
            Asynchronously reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.EnterScope(Microsoft.Data.OData.ODataCollectionReaderState,System.Object)">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.ODataCollectionReaderCore.Scope"/> for the specified <paramref name="state"/> and
            with the provided <paramref name="item"/> and pushes it on the stack of scopes.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataCollectionReaderState"/> to use for the new scope.</param>
            <param name="item">The item to attach with the state in the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.EnterScope(Microsoft.Data.OData.ODataCollectionReaderState,System.Object,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.ODataCollectionReaderCore.Scope"/> for the specified <paramref name="state"/> and
            with the provided <paramref name="item"/> and pushes it on the stack of scopes.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataCollectionReaderState"/> to use for the new scope.</param>
            <param name="item">The item to attach with the state in the new scope.</param>
            <param name="isCollectionElementEmpty">The state of the collection element - empty or not-empty.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.ReplaceScope(Microsoft.Data.OData.ODataCollectionReaderState,System.Object)">
            <summary>
            Replaces the current scope with a new <see cref="T:Microsoft.Data.OData.ODataCollectionReaderCore.Scope"/> with the specified <paramref name="state"/> and
            the item of the current scope.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataCollectionReaderState"/> to use for the new scope.</param>
            <param name="item">The item associated with the replacement state.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.PopScope(Microsoft.Data.OData.ODataCollectionReaderState)">
            <summary>
            Removes the current scope from the stack of all scopes.
            </summary>
            <param name="state">The expected state of the current scope (to be popped).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.InterceptException``1(System.Func{``0})">
            <summary>
            Catch any exception thrown by the action passed in; in the exception case move the reader into
            state ExceptionThrown and then rethrow the exception.
            </summary>
            <typeparam name="T">The type returned from the <paramref name="action"/> to execute.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>The result of executing the <paramref name="action"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.VerifyCanRead(System.Boolean)">
            <summary>
            Verifies that calling Read is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.VerifyCallAllowed(System.Boolean)">
            <summary>
            Verifies that a call is allowed to the reader.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.VerifySynchronousCallAllowed">
            <summary>
            Verifies that a synchronous operation is allowed on this reader.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.VerifyAsynchronousCallAllowed">
            <summary>
            Verifies that an asynchronous operation is allowed on this reader.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.State">
            <summary>
            The current state of the reader.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.Item">
            <summary>
            The most recent item that has been read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.IsCollectionElementEmpty">
            <summary>
            The state of the collection element - empty or non-empty.
            </summary>
            <remarks>
            Only used by ATOM.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.ExpectedItemTypeReference">
            <summary>
            The expected item type for the items in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.CollectionValidator">
            <summary>
            The collection validator instance if no expected item type has been specified; otherwise null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.IsReadingNestedPayload">
            <summary>
            Returns true if we are reading a nested payload, e.g. an entry, a feed or a collection within a parameters payload.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionReaderCore.Scope">
            <summary>
            A collection reader scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderCore.Scope.state">
            <summary>The reader state of this scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderCore.Scope.item">
            <summary>The item attached to this scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderCore.Scope.isCollectionElementEmpty">
            <summary>True, if the collection element attached to this scope is empty. False otherwise.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.Scope.#ctor(Microsoft.Data.OData.ODataCollectionReaderState,System.Object)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="state">The reader state of this scope.</param>
            <param name="item">The item attached to this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCore.Scope.#ctor(Microsoft.Data.OData.ODataCollectionReaderState,System.Object,System.Boolean)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="state">The reader state of this scope.</param>
            <param name="item">The item attached to this scope.</param>
            <param name="isCollectionElementEmpty">The state of the collection element - empty or not-empty</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.Scope.State">
            <summary>
            The reader state of this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.Scope.Item">
            <summary>
            The item attached to this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionReaderCore.Scope.IsCollectionElementEmpty">
            <summary>
            The state of the Collection Element - empty or non-empty.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCoreAsync.#ctor(Microsoft.Data.OData.ODataInputContext,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input to read from.</param>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <param name="listener">If not null, the reader will notify the implementer of the interface of relevant state changes in the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCoreAsync.ReadAtStartImplementationAsync">
            <summary>
            Implementation of the collection reader logic when in state 'Start'.
            </summary>
            <returns>Task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCoreAsync.ReadAtCollectionStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'CollectionStart'.
            </summary>
            <returns>Task which returns true if more nodes can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCoreAsync.ReadAtValueImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'Value'.
            </summary>
            <returns>Task which returns true if more nodes can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCoreAsync.ReadAtCollectionEndImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'CollectionEnd'.
            </summary>
            <returns>Task which should return false since no more nodes can be read from the reader after the collection ends.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionReaderCoreAsync.ReadAsynchronously">
            <summary>
            Asynchronously reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
            <remarks>The base class already implements this but only for fully synchronous readers, the implementation here
            allows fully asynchronous readers.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.SimpleLazy`1">
            <summary>
            A simple implementation of LazyOfT since the framework version is not available in all platforms we compile this code in...
            </summary>
            <typeparam name="T">Type to lazy create.</typeparam>
        </member>
        <member name="F:Microsoft.Data.OData.SimpleLazy`1.mutex">
            <summary>
            For thread safty in creating the value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.SimpleLazy`1.factory">
            <summary>
            The factory method to create the lazy instance.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.SimpleLazy`1.value">
            <summary>
            Holds the lazy instance to create.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.SimpleLazy`1.valueCreated">
            <summary>
            true if the factory method has been called, false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.SimpleLazy`1.#ctor(System.Func{`0})">
            <summary>
            Creates an instance of ODataLazyOfT.
            </summary>
            <param name="factory">The factory method to create the lazy instance.</param>
        </member>
        <member name="M:Microsoft.Data.OData.SimpleLazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            Creates an instance of ODataLazyOfT.
            </summary>
            <param name="factory">The factory method to create the lazy instance.</param>
            <param name="isThreadSafe">true if the value will be created in a thread safety, false assume single thread access to Value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.SimpleLazy`1.CreateValue">
            <summary>
            Creates the value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.SimpleLazy`1.Value">
            <summary>
            Creates the value if it hasn't already been created and returns the created value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMetadataDocumentUri">
            <summary>
            Simple structure for storing both a base URI and the select clause for generating metadata links in JSON-Light payloads.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMetadataDocumentUri.baseUri">
            <summary>The base uri to the metadata document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMetadataDocumentUri.selectClause">
            <summary>The select clause to include when generating metadata links.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataDocumentUri.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.OData.ODataMetadataDocumentUri"/>.
            </summary>
            <param name="baseUri">The base uri to the metadata document.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMetadataDocumentUri.BaseUri">
            <summary>
            Gets the base uri to the metadata document.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMetadataDocumentUri.SelectClause">
            <summary>
            Gets the select clause to include when generating metadata links.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataNullValue">
            <summary>
            Represents a null property value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataNullValue.IsNullValue">
            <summary>
            Indicates whether the given value is a null value.
            </summary>
            <value> true, since this object always represents a null value. </value>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterReaderCoreAsync">
            <summary>
            Base class for OData parameter readers that verifies a proper sequence of read calls on the reader with truly async operations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterReaderCore">
            <summary>
            Base class for OData parameter readers that verifies a proper sequence of read calls on the reader.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterReader">
            <summary> Base class for OData parameter readers. </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReader.CreateCollectionReader">
            <summary> Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection value when the state is ODataParameterReaderState.Collection. </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection value when the state is ODataParameterReaderState.Collection.</returns>
            <remarks>
            When the state is ODataParameterReaderState.Collection, the Name property of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns the name of the parameter
            and the Value property of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns null. Calling this method in any other state will cause an ODataException to be thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReader.Read">
            <summary> Reads the next parameter from the message payload. </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReader.ReadAsync">
            <summary> Asynchronously reads the next item from the message payload. </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReader.State">
            <summary> Gets the current state of the reader. </summary>
            <returns> The current state of the reader. </returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReader.Name">
            <summary> Gets the name of the current parameter that is being read. </summary>
            <returns> The name of the current parameter that is being read. </returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReader.Value">
            <summary> Gets the value of the current parameter that is being read. </summary>
            <returns> The value of the current parameter that is being read. </returns>
            <remarks>
            This property returns a primitive value, an ODataComplexValue or null when State is ODataParameterReaderState.Value.
            This property returns null when State is ODataParameterReaderState.Entry, ODataParameterReaderState.Feed or ODataParameterReaderState.Collection.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.IODataReaderWriterListener">
            <summary>
            An interface that allows the creator of a reader/writer to listen for status changes of the created reader/writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataReaderWriterListener.OnException">
            <summary>
            This method notifies the implementer of this interface that the created reader is in Exception state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataReaderWriterListener.OnCompleted">
            <summary>
            This method notifies the implementer of this interface that the created reader is in Completed state.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.inputContext">
            <summary>The input context to read from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.functionImport">
            <summary>The function import whose parameters are being read.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.scopes">
            <summary>Stack of reader scopes to keep track of the current context of the reader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.parametersRead">
            <summary>Hash set to keep track of all the parameters read from the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.subReaderState">
            <summary>Tracks the state of the sub-reader.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.#ctor(Microsoft.Data.OData.ODataInputContext,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input to read from.</param>
            <param name="functionImport">The function import whose parameters are being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.CreateCollectionReader">
            <summary>
            This method creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection value when the state is ODataParameterReaderState.Collection.
            </summary>
            <remarks>
            When the state is ODataParameterReaderState.Collection, the Name property of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns the name of the parameter
            and the Value property of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns null. Calling this method in any other state will cause an ODataException to be thrown.
            </remarks>
            <returns>Returns an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection value when the state is ODataParameterReaderState.Collection.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.Read">
            <summary>
            Reads the next item from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.ReadAsync">
            <summary>
            Asynchronously reads the next item from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.Microsoft#Data#OData#IODataReaderWriterListener#OnException">
            <summary>
            This method notifies the implementer of this interface that the created reader is in Exception state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.Microsoft#Data#OData#IODataReaderWriterListener#OnCompleted">
            <summary>
            This method notifies the implementer of this interface that the created reader is in Completed state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.GetParameterTypeReference(System.String)">
            <summary>
            Returns the type reference of the parameter in question.
            </summary>
            <param name="parameterName">Name of the parameter in question.</param>
            <returns>Returns the type reference of the parameter in question.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.EnterScope(Microsoft.Data.OData.ODataParameterReaderState,System.String,System.Object)">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.ODataParameterReaderCore.Scope"/> for the specified <paramref name="state"/> with the provided
            <paramref name="name"/> and <paramref name="value"/> and pushes it on the stack of scopes.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataParameterReaderState"/> to use for the new scope.</param>
            <param name="name">The paramter name to attach with the state in the new scope.</param>
            <param name="value">The paramter value to attach with the state in the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.PopScope(Microsoft.Data.OData.ODataParameterReaderState)">
            <summary>
            Removes the current scope from the stack of all scopes.
            </summary>
            <param name="state">The expected state of the current scope (to be popped).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.OnParameterCompleted">
            <summary>
            Called when the a parameter was completed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.ReadImplementation">
            <summary>
            Reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.ReadAtStartImplementation">
            <summary>
            Implementation of the parameter reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.ReadNextParameterImplementation">
            <summary>
            Implementation of the reader logic when in state Value, Entry, Feed or Collection state.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.CreateCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.
            </summary>
            <param name="expectedItemTypeReference">Expected item type reference of the collection to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.ReadSynchronously">
            <summary>
            Reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.ReadAsynchronously">
            <summary>
            Asynchronously reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.GetCreateReaderMethodName(Microsoft.Data.OData.ODataParameterReaderState)">
            <summary>
            Gets the corresponding create reader method name for the given state.
            </summary>
            <param name="state">State in question.</param>
            <returns>Returns the name of the method to create the correct reader for the given state.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.VerifyCanCreateSubReader(Microsoft.Data.OData.ODataParameterReaderState)">
            <summary>
            Verifies that one of CreateEntryReader(), CreateFeedReader() or CreateCollectionReader() can be called.
            </summary>
            <param name="expectedState">The expected state of the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.InterceptException``1(System.Func{``0})">
            <summary>
            Catch any exception thrown by the action passed in; in the exception case move the reader into
            state ExceptionThrown and then rethrow the exception.
            </summary>
            <typeparam name="T">The type returned from the <paramref name="action"/> to execute.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>The result of executing the <paramref name="action"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.VerifyCanRead(System.Boolean)">
            <summary>
            Verifies that calling Read is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.VerifyCallAllowed(System.Boolean)">
            <summary>
            Verifies that a call is allowed to the reader.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.VerifySynchronousCallAllowed">
            <summary>
            Verifies that a synchronous operation is allowed on this reader.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.VerifyAsynchronousCallAllowed">
            <summary>
            Verifies that an asynchronous operation is allowed on this reader.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReaderCore.State">
            <summary>
            The current state of the reader.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReaderCore.Name">
            <summary>
            The name of the current parameter that is being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReaderCore.Value">
            <summary>
            The value of the current parameter that is being read.
            </summary>
            <remarks>
            This property returns a primitive value, an ODataComplexValue or null when State is ODataParameterReaderState.Value.
            This property returns null when State is ODataParameterReaderState.Entry, ODataParameterReaderState.Feed or ODataParameterReaderState.Collection.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReaderCore.FunctionImport">
            <summary>
            The function import whose parameters are being read.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterReaderCore.SubReaderState">
            <summary>Enum to track the state of the sub-reader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.SubReaderState.None">
            <summary>No sub-reader has been created for the current parameter.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.SubReaderState.Active">
            <summary>CreateEntryReader(), CreateFeedReader() or CreateCollectionReader() has been called for the current parameter
            and the newly created reader is not in Completed state.</summary>
            <remarks>If the sub-reader is in Error state, the ODataParameterReader will enter ODataParameterReaderState.Error.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.SubReaderState.Completed">
            <summary>The created sub-reader is in Completed state.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterReaderCore.Scope">
            <summary>
            A parameter reader scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.Scope.state">
            <summary>The reader state of this scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.Scope.name">
            <summary>The parameter name attached to this scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderCore.Scope.value">
            <summary>The parameter value attached to this scope.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCore.Scope.#ctor(Microsoft.Data.OData.ODataParameterReaderState,System.String,System.Object)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="state">The reader state of this scope.</param>
            <param name="name">The parameter name attached to this scope.</param>
            <param name="value">The parameter value attached to this scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReaderCore.Scope.State">
            <summary>
            The reader state of this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReaderCore.Scope.Name">
            <summary>
            The parameter name attached to this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterReaderCore.Scope.Value">
            <summary>
            The parameter value attached to this scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCoreAsync.#ctor(Microsoft.Data.OData.ODataInputContext,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input to read from.</param>
            <param name="functionImport">The function import whose parameters are being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCoreAsync.ReadAtStartImplementationAsync">
            <summary>
            Implementation of the parameter reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCoreAsync.ReadNextParameterImplementationAsync">
            <summary>
            Implementation of the reader logic when in state Value, Entry, Feed or Collection state.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCoreAsync.CreateCollectionReaderAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.
            </summary>
            <param name="expectedItemTypeReference">Expected item type reference of the collection to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterReaderCoreAsync.ReadAsynchronously">
            <summary>
            Asynchronously reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
            <remarks>The base class already implements this but only for fully synchronous readers, the implementation here
            allows fully asynchronous readers.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataPrimitiveValue">
            <summary>
            Represents a primitive property value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPrimitiveValue.#ctor(System.Object)">
            <summary>
            Creates a new primitive value from the given CLR value.
            </summary>
            <param name="value">The primitive to wrap.</param>
            <remarks>The primitive value should not be an instance of ODataValue.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPrimitiveValue.Value">
            <summary>
            Gets the underlying CLR object wrapped by this <see cref="T:Microsoft.Data.OData.ODataPrimitiveValue"/>.
            </summary>
            <value> The underlying primitive CLR value. </value>
        </member>
        <member name="T:Microsoft.Data.OData.ODataReaderCoreAsync">
            <summary>
            Base class for OData readers that verifies a proper sequence of read calls on the reader with true async operations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataReaderCore">
            <summary>
            Base class for OData readers that verifies a proper sequence of read calls on the reader.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataReader">
            <summary>
            Base class for OData readers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReader.Read">
            <summary> Reads the next <see cref="T:Microsoft.Data.OData.ODataItem" /> from the message payload. </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReader.ReadAsync">
            <summary> Asynchronously reads the next <see cref="T:Microsoft.Data.OData.ODataItem" /> from the message payload. </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReader.State">
            <summary>Gets the current state of the reader. </summary>
            <returns>The current state of the reader.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReader.Item">
            <summary>Gets the most recent <see cref="T:Microsoft.Data.OData.ODataItem" /> that has been read. </summary>
            <returns>The most recent <see cref="T:Microsoft.Data.OData.ODataItem" /> that has been read.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderCore.inputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderCore.readingFeed">
            <summary>true if the reader was created for reading a feed; false when it was created for reading an entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderCore.scopes">
            <summary>Stack of reader scopes to keep track of the current context of the reader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderCore.listener">
            <summary>If not null, the reader will notify the implementer of the interface of relevant state changes in the reader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderCore.feedValidator">
            <summary>
            The <see cref="T:Microsoft.Data.OData.FeedWithoutExpectedTypeValidator"/> to use for entries in this feed.
            Only applies when reading a top-level feed; otherwise null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderCore.currentEntryDepth">
            <summary>The number of entries which have been started but not yet ended.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.#ctor(Microsoft.Data.OData.ODataInputContext,System.Boolean,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input to read the payload from.</param>
            <param name="readingFeed">true if the reader is created for reading a feed; false when it is created for reading an entry.</param>
            <param name="listener">If not null, the reader will notify the implementer of the interface of relevant state changes in the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.Read">
            <summary>
            Reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAsync">
            <summary>
            Asynchronously reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAtStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAtFeedStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'FeedStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAtFeedEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'FeedEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAtEntryStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'EntryStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAtEntryEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'EntryEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAtNavigationLinkStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAtNavigationLinkEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAtEntityReferenceLink">
            <summary>
            Implementation of the reader logic when in state 'EntityReferenceLink'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.EnterScope(Microsoft.Data.OData.ODataReaderCore.Scope)">
            <summary>
            Pushes the <paramref name="scope"/> on the stack of scopes.
            </summary>
            <param name="scope">The scope to enter.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReplaceScope(Microsoft.Data.OData.ODataReaderCore.Scope)">
            <summary>
            Replaces the current scope with the specified <paramref name="scope"/>.
            </summary>
            <param name="scope">The scope to replace the current scope with.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.PopScope(Microsoft.Data.OData.ODataReaderState)">
            <summary>
            Removes the current scope from the stack of all scopes.
            </summary>
            <param name="state">The expected state of the current scope (to be popped).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.EndEntry(Microsoft.Data.OData.ODataReaderCore.Scope)">
            <summary>
            Called to transition into the EntryEnd state.
            </summary>
            <param name="scope">The scope for the EntryEnd state.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ApplyEntityTypeNameFromPayload(System.String)">
            <summary>
            If an entity type name is found in the payload this method is called to apply it to the current scope.
            This method should be called even if the type name was not found in which case a null should be passed in.
            The method validates that some type will be available as the current entity type after it returns (if we are parsing using metadata).
            </summary>
            <param name="entityTypeNameFromPayload">The entity type name found in the payload or null if no type was specified in the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadSynchronously">
            <summary>
            Reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadAsynchronously">
            <summary>
            Asynchronously reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.IncreaseEntryDepth">
            <summary>
            Increments the nested entry count by one and fails if the new value exceeds the maxiumum nested entry depth limit.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.DecreaseEntryDepth">
            <summary>
            Decrements the nested entry count by one.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.ReadImplementation">
            <summary>
            Reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.InterceptException``1(System.Func{``0})">
            <summary>
            Catch any exception thrown by the action passed in; in the exception case move the reader into
            state ExceptionThrown and then rethrow the exception.
            </summary>
            <typeparam name="T">The type returned from the <paramref name="action"/> to execute.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>The result of executing the <paramref name="action"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.VerifyCanRead(System.Boolean)">
            <summary>
            Verifies that calling Read is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.VerifyCallAllowed(System.Boolean)">
            <summary>
            Verifies that a call is allowed to the reader.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.State">
            <summary>
            The current state of the reader.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.Item">
            <summary>
            The most recent <see cref="T:Microsoft.Data.OData.ODataItem"/> that has been read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.CurrentEntry">
            <summary>
            Returns the current item as <see cref="T:Microsoft.Data.OData.ODataEntry"/>. Must only be called if the item actually is an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.CurrentFeed">
            <summary>
            Returns the current item as <see cref="T:Microsoft.Data.OData.ODataFeed"/>. Must only be called if the item actually is a feed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.CurrentNavigationLink">
            <summary>
            Returns the current item as <see cref="T:Microsoft.Data.OData.ODataNavigationLink"/>. Must only be called if the item actually is a navigation link.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.CurrentEntityReferenceLink">
            <summary>
            Returns the current item as <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/>. Must only be called if the item actually is an entity reference link.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.CurrentEntityType">
            <summary>
            Returns the expected entity type for the current scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.CurrentEntitySet">
            <summary>
            Returns the entity set for the current scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.CurrentScope">
            <summary>
            Returns the current scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.LinkParentEntityScope">
            <summary>
            Returns the scope of the entity owning the current link.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.IsTopLevel">
            <summary>
            A flag indicating whether the reader is at the top level.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.ExpandedLinkContentParentScope">
            <summary>
            If the current scope is a content of an expanded link, this returns the parent navigation link scope, otherwise null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.IsExpandedLinkContent">
            <summary>
            True if we are reading an entry or feed that is the direct content of an expanded link. Otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.ReadingFeed">
            <summary>
            Set to true if a feed is being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.IsReadingNestedPayload">
            <summary>
            Returns true if we are reading a nested payload, e.g. an entry or a feed within a parameters payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.CurrentFeedValidator">
            <summary>
            Validator to validate consistency of entries in top-level feeds.
            </summary>
            <remarks>We only use this for top-level feeds since we support collection validation for 
            feeds only when metadata is available and in these cases we already validate the 
            types of the entries in nested feeds.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataReaderCore.Scope">
            <summary>
            A reader scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderCore.Scope.state">
            <summary>The reader state of this scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderCore.Scope.item">
            <summary>The item attached to this scope.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCore.Scope.#ctor(Microsoft.Data.OData.ODataReaderState,Microsoft.Data.OData.ODataItem,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="state">The reader state of this scope.</param>
            <param name="item">The item attached to this scope.</param>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the scope.</param>
            <remarks>The <paramref name="expectedEntityType"/> has the following meanings for given state:
            Start -               it's the expected base type of the top-level entry or entries in the top-level feed.
            FeedStart -           it's the expected base type of the entries in the feed.
                                  note that it might be a more derived type than the base type of the entity set for the feed.
            EntryStart -          it's the expected base type of the entry. If the entry has no type name specified
                                  this type will be assumed. Otherwise the specified type name must be
                                  the expected type or a more derived type.
            NavigationLinkStart - it's the expected base type the entries in the expanded link (either the single entry
                                  or entries in the expanded feed).
            EntityReferenceLink - it's null, no need for types on entity reference links.
            In all cases the specified type must be an entity type.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.Scope.State">
            <summary>
            The reader state of this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.Scope.Item">
            <summary>
            The item attached to this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.Scope.EntitySet">
            <summary>
            The entity set we are reading entries from (possibly null).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderCore.Scope.EntityType">
            <summary>
            The entity type for this scope. Can be either the expected one if the real one
            was not found yet, or the one specified in the payload itself (the real one).
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.#ctor(Microsoft.Data.OData.ODataInputContext,System.Boolean,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input to read the payload from.</param>
            <param name="readingFeed">true if the reader is created for reading a feed; false when it is created for reading an entry.</param>
            <param name="listener">If not null, the reader will notify the implementer of the interface of relevant state changes in the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAtStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAtFeedStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'FeedStart'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAtFeedEndImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'FeedEnd'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAtEntryStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'EntryStart'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAtEntryEndImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'EntryEnd'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAtNavigationLinkStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkStart'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAtNavigationLinkEndImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkEnd'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAtEntityReferenceLinkAsync">
            <summary>
            Implementation of the reader logic when in state 'EntityReferenceLink'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderCoreAsync.ReadAsynchronously">
            <summary>
            Asynchronously reads the next <see cref="T:Microsoft.Data.OData.ODataItem"/> from the message payload.
            </summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
            <remarks>The base class already implements this but only for fully synchronous readers, the implementation here
            allows fully asynchronous readers.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataVersionCache`1">
            <summary>
            Simple ODataVersion specific cache.
            </summary>
            <typeparam name="T">The type of the item being cached.</typeparam>
        </member>
        <member name="F:Microsoft.Data.OData.ODataVersionCache`1.v1">
            <summary>
            Lazy constructing T for ODataVersion.V1.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataVersionCache`1.v2">
            <summary>
            Lazy constructing T for ODataVersion.V2.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataVersionCache`1.v3">
            <summary>
            Lazy constructing T for ODataVersion.V3.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionCache`1.#ctor(System.Func{Microsoft.Data.OData.ODataVersion,`0})">
            <summary>
            Constructs an instance of the ODataVersionCache.
            </summary>
            <param name="factory">The method to call to create a new instance of <typeparamref name="T"/> for a given ODataVersion.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataVersionCache`1.Item(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Indexer to get the cached item when given the ODataVersion.
            </summary>
            <param name="version">The ODataVersion to look up.</param>
            <returns>The cached item.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.RawValueWriter">
            <summary>
            Class that hanldes writing top level raw values to a stream.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.RawValueWriter.settings">
            <summary>
            Writer settings.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.RawValueWriter.stream">
            <summary>
            Underlying stream. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.RawValueWriter.encoding">
            <summary>
            Encoding that the TextWriter should use.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.RawValueWriter.textWriter">
            <summary>
            TextWriter instance for writing values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.RawValueWriter.#ctor(Microsoft.Data.OData.ODataMessageWriterSettings,System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.RawValueWriter"/> class.
            Initializes the TextWriter.
            </summary>
            <param name="settings">The writer settings.</param>
            <param name="stream">The stream.  It should be the same underlying stream the TextWriter uses.</param>
            <param name="encoding">The encoding to use in the text writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.RawValueWriter.Dispose">
            <summary>
            Disposes the RawValueWriter. It flushes itself and then disposes its inner TextWriter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.RawValueWriter.Start">
            <summary>
            Start writing a raw output. This should only be called once.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.RawValueWriter.End">
            <summary>
            End the writing of a raw output. This should be the last thing called.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.RawValueWriter.WriteRawValue(System.Object)">
            <summary>
            Converts the specified <paramref name="value"/> into its raw format and writes it to the output.
            The value has to be of primitive type. Only one WriteRawValue call should be made before this object gets disposed.
            </summary>
            <param name="value">The (non-binary) value to write.</param>
            <remarks>We do not accept binary values here; WriteBinaryValue should be used for binary data.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.RawValueWriter.Flush">
            <summary>
            Flushes the RawValueWriter. 
            The call gets pushed to the TextWriter (if there is one). In production code, this is StreamWriter.Flush, which turns into Stream.Flush.
            In the synchronous case the underlying stream is the message stream itself, which will then Flush as well.
            In the async case the underlying stream is the async buffered stream, which ignores Flush call.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.RawValueWriter.InitializeTextWriter">
            <summary>
            Initialized a new text writer over the message payload stream.
            </summary>
            <remarks>This can only be called if the text writer was not yet initialized or it has been closed.
            It can be called several times with CloseWriter calls in between though.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.RawValueWriter.TextWriter">
            <summary>
            Gets the text writer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataValueUtils">
            <summary>
            Class with utility methods to deal with values in ODataLib.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataValueUtils.ToODataValue(System.Object)">
            <summary>
            Converts an object to an ODataValue. If the given object is already an ODataValue (such as an ODataCompleValue, ODataCollectionValue, etc.), the original object will be returned.
            </summary>
            <param name="objectToConvert">The object to convert to an ODataValue</param>
            <returns>The given object as an ODataValue.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataValueUtils.FromODataValue(Microsoft.Data.OData.ODataValue)">
            <summary>
            Converts an ODataValue to the old style of representing values, where null values are null and primitive values are just the direct primitive (no longer wrapped by ODataPrimitiveValue).
            All other value types, such as ODataComplexValue and ODataCollectionValue are returned unchanged.
            </summary>
            <param name="odataValue">The value to convert.</param>
            <returns>The value behind the given ODataValue.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.SelectedPropertiesNode">
            <summary>
            Represents a tree of selected properties based on the $select query option.
            </summary>
            <remarks>
            When reading, it controls the template expansion in JSON Light.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.PathSeparator">
            <summary>The separator character used to separate property names in a path.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.ItemSeparator">
            <summary>The separator character used to separate paths from each other.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.Empty">
            <summary>Singleton which indicates that the nothing is selected.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.EntireSubtree">
            <summary>Singleton which indicates that the entire subtree is selected.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.EmptyStreamProperties">
            <summary>An empty set of stream properties to return when nothing is selected.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.EmptyNavigationProperties">
            <summary>An empty set of navigation properties to return when nothing is selected.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.selectionType">
            <summary>The type of the current node.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.selectedProperties">
            <summary>The list of selected properties at the current level.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.children">
            <summary>A dictionary of property name to child nodes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.hasWildcard">
            <summary>Indicates that this node had a wildcard selection and all properties at this level should be reported.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="selectClause">The string representation of the selected property hierarchy using 
            the same format as in the $select query option.</param>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.#ctor(Microsoft.Data.OData.SelectedPropertiesNode.SelectionType)">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Data.OData.SelectedPropertiesNode"/> class from being created.
            </summary>
            <param name="selectionType">Type of the selection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.Create(System.String)">
            <summary>
            Creates a node from the given raw $select query option value.
            </summary>
            <param name="selectQueryOption">The value of the $select query option.</param>
            <returns>A tree representation of the selected properties specified in the query option.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.CombineNodes(Microsoft.Data.OData.SelectedPropertiesNode,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Recursively combines the left and right nodes. Used when there are type segments present in the select paths which
            causes there to be multiple children for the same property/navigation.
            </summary>
            <param name="left">The left node.</param>
            <param name="right">The right node.</param>
            <returns>The combined node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.GetSelectedPropertiesForNavigationProperty(Microsoft.Data.Edm.IEdmEntityType,System.String)">
            <summary>
            Gets the selected properties node for the specified navigation property.
            </summary>
            <param name="entityType">The current entity type.</param>
            <param name="navigationPropertyName">The name of the navigation property.</param>
            <returns>The selected properties node for the property with name <paramref name="navigationPropertyName"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.GetSelectedNavigationProperties(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Gets the selected navigation properties for the current node.
            </summary>
            <param name="entityType">The current entity type.</param>
            <returns>The set of selected navigation properties.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.GetSelectedStreamProperties(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Gets the selected stream properties for the current node.
            </summary>
            <param name="entityType">The current entity type.</param>
            <returns>The selected stream properties.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.IsOperationSelected(Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmFunctionImport,System.Boolean)">
            <summary>
            Determines whether or not the given operation is selected and takes type-segments into account.
            </summary>
            <param name="entityType">The current entity type.</param>
            <param name="operation">The operation.</param>
            <param name="mustBeContainerQualified">Whether or not the operation name must be container qualified in the $select string.</param>
            <returns>
              <c>true</c> if the operation is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.GetBaseTypesAndSelf(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Gets an enumerable containing the given type and all of its base/ancestor types.
            </summary>
            <param name="entityType">The starting entity type. Will be included in the returned enumeration.</param>
            <returns>An enumerable containing the given type and all of its base/ancestor types.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.CreateSelectedPropertiesHashSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new hash set for storing the names of selected properties.
            </summary>
            <param name="properties">The initial set of selected properties to store in the hash set.</param>
            <returns>The hash set.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.CreateSelectedPropertiesHashSet">
            <summary>
            Creates a new hash set for storing the names of selected properties.
            </summary>
            <returns>The hash set.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.GetPossibleMatchesForSelectedOperation(Microsoft.Data.Edm.IEdmFunctionImport,System.Boolean)">
            <summary>
            Gets the possible identifiers that could cause the given operation to be selected.
            </summary>
            <param name="operation">The operation.</param>
            <param name="mustBeContainerQualified">Whether the operations must be container qualified.</param>
            <returns>The identifiers to look for in the $select string when determining if this action is selected.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.GetMatchingTypeSegments(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Gets the matching type segments for the given type based on this node's children.
            </summary>
            <param name="entityType">The entity type to match.</param>
            <returns>All child nodes which start with a type segment in the given types hierarchy.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.ParsePathSegment(System.String[],System.Int32)">
            <summary>
            Parses the segments of a path in the select clause.
            </summary>
            <param name="segments">The segments of the select path.</param>
            <param name="index">The index of the segment to parse.</param>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.EnsureChildAnnotation(System.String)">
            <summary>
            Ensures that a child annotation for the specified segment name already exists; if not creates one.
            </summary>
            <param name="segmentName">The segment name to get the child annotation for.</param>
            <returns>The existing or newly created child annotation for the <paramref name="segmentName"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.SelectedPropertiesNode.IsOperationSelectedAtThisLevel(Microsoft.Data.Edm.IEdmFunctionImport,System.Boolean)">
            <summary>
            Determines whether or not the given operation is selected without taking type segments into account.
            </summary>
            <param name="operation">The operation.</param>
            <param name="mustBeContainerQualified">Whether the operations must be container qualified.</param>
            <returns>
              <c>true</c> if the operation is selected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Data.OData.SelectedPropertiesNode.SelectionType">
            <summary>
            Enum representing the different special cases of selection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.SelectionType.Empty">
            <summary>
            Represents the case where no properties are selected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.SelectionType.EntireSubtree">
            <summary>
            Represents the case where an entire subtree is selected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.SelectedPropertiesNode.SelectionType.PartialSubtree">
            <summary>
            The normal case where a partial subtree has been selected.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataJsonLightAnnotationGroup">
            <summary>
            Class representing an annotation group in the JSON Light format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataJsonLightAnnotationGroup.name">
            <summary>The name of the annotation group.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataJsonLightAnnotationGroup.annotations">
            <summary>The (instance and property) annotations included in this annotation group.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataJsonLightAnnotationGroup.Name">
            <summary>
            The name of the annotation group.
            </summary>
            <remarks>The name has to be unique across the whole JSON Light payload.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataJsonLightAnnotationGroup.Annotations">
            <summary>
            The (instance and property) annotations included in this annotation group.
            </summary>
            <remarks>The keys in the dictionary are the names of the annotations, the values are their values.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.EdmValueUtils">
            <summary>
            Class with utility methods to deal with EDM values
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.EdmValueUtils.ConvertPrimitiveValue(System.Object,Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Converts a primitive OData value to the corresponding <see cref="T:Microsoft.Data.Edm.Values.IEdmDelayedValue"/>.
            </summary>
            <param name="primitiveValue">The primitive OData value to convert.</param>
            <param name="type">The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> for the primitive value (if available).</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.Values.IEdmDelayedValue"/> for the <paramref name="primitiveValue"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.EdmValueUtils.ToClrValue(Microsoft.Data.Edm.Values.IEdmPrimitiveValue)">
            <summary>
            Gets the clr value of the edm value based on its type.
            </summary>
            <param name="edmValue">The edm value.</param>
            <returns>The clr value</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.EdmValueUtils.TryGetStreamProperty(Microsoft.Data.Edm.Values.IEdmStructuredValue,System.String,Microsoft.Data.Edm.IEdmProperty@)">
            <summary>
            Tries to get a stream property of the specified name.
            </summary>
            <param name="entityInstance">The instance of the entity to get the stream property for.</param>
            <param name="streamPropertyName">The stream property name to find.</param>
            <param name="streamProperty">The stream property found.</param>
            <returns>true if the stream property was found or if the stream property name was null (default stream).
            false if the stream property doesn't exist.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.EdmValueUtils.GetPrimitivePropertyClrValue(Microsoft.Data.Edm.Values.IEdmStructuredValue,System.String)">
            <summary>
            Gets the the CLR value for a primitive property.
            </summary>
            <param name="structuredValue">The structured value.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The clr value of the property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.EdmValueUtils.ConvertFloatingValue(Microsoft.Data.Edm.Values.IEdmFloatingValue,Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Converts a floating-point edm value to a clr value
            </summary>
            <param name="floatingValue">The edm floating-point value.</param>
            <param name="primitiveKind">Kind of the primitive.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.EdmValueUtils.ConvertIntegerValue(Microsoft.Data.Edm.Values.IEdmIntegerValue,Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Converts an integer edm value to a clr value.
            </summary>
            <param name="integerValue">The integer value.</param>
            <param name="primitiveKind">Kind of the primitive.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.EdmValueUtils.ConvertPrimitiveValueWithoutTypeCode(System.Object,Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Convert a primitive value which didn't match any of the known values of the <see cref="T:System.TypeCode"/> enumeration.
            </summary>
            <param name="primitiveValue">The value to convert.</param>
            <param name="type">The expected primitive type or null.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.EdmValueUtils.EnsurePrimitiveType(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Ensures a primitive type reference for a given primitive type kind.
            </summary>
            <param name="type">The possibly null type reference.</param>
            <param name="primitiveKindFromValue">The primitive type kind to ensure.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmPrimitiveTypeReference"/> instance created for the <paramref name="primitiveKindFromValue"/> 
            if <paramref name="type"/> is null; if <paramref name="type"/> is not null, validates it and then returns it.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo">
            <summary>
            Class which holds information about navigation link to be reported by the reader.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.navigationLink">
            <summary>
            The navigation link to report.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.navigationProperty">
            <summary>
            The navigation property for which the link will be reported.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.isExpanded">
            <summary>
            true if the navigation link has a value (is expanded).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.expandedFeed">
            <summary>
            The expanded feed for expanded navigation link to be reported.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.entityReferenceLinks">
            <summary>
            List of entity reference links to be reported to the navigation link.
            </summary>
            <remarks>
            If the navigation link is a singleton this will hold up to 1 item.
            If the navigation link is a collection this will hold any number of items.
            When the entity reference link is reported it is removed from this list.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.#ctor(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmNavigationProperty,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="navigationLink">The navigation link to report.</param>
            <param name="navigationProperty">The navigation property for which the link will be reported.</param>
            <param name="isExpanded">true if the navigation link is expanded.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.CreateDeferredLinkInfo(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Creates a navigation link info for a deferred link.
            </summary>
            <param name="navigationLink">The navigation link to report.</param>
            <param name="navigationProperty">The navigation property for which the link will be reported.</param>
            <returns>The navigation link info created.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.CreateExpandedEntryLinkInfo(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Creates a navigation link info for an expanded entry link.
            </summary>
            <param name="navigationLink">The navigation link to report.</param>
            <param name="navigationProperty">The navigation property for which the link will be reported.</param>
            <returns>The navigation link info created.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.CreateExpandedFeedLinkInfo(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.ODataFeed)">
            <summary>
            Creates a navigation link info for an expanded feed link.
            </summary>
            <param name="navigationLink">The navigation link to report.</param>
            <param name="navigationProperty">The navigation property for which the link will be reported.</param>
            <param name="expandedFeed">The expanded feed for the navigation link to report.</param>
            <returns>The navigation link info created.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.CreateSingletonEntityReferenceLinkInfo(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.ODataEntityReferenceLink,System.Boolean)">
            <summary>
            Creates a navigation link info for a singleton entity reference link.
            </summary>
            <param name="navigationLink">The navigation link to report.</param>
            <param name="navigationProperty">The navigation property for which the link will be reported.</param>
            <param name="entityReferenceLink">The entity reference link for the navigation link to report.</param>
            <param name="isExpanded">true if the navigation link is expanded.</param>
            <returns>The navigation link info created.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.CreateCollectionEntityReferenceLinksInfo(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmNavigationProperty,System.Collections.Generic.LinkedList{Microsoft.Data.OData.ODataEntityReferenceLink},System.Boolean)">
            <summary>
            Creates a navigation link info for a collection of entity reference links.
            </summary>
            <param name="navigationLink">The navigation link to report.</param>
            <param name="navigationProperty">The navigation property for which the link will be reported.</param>
            <param name="entityReferenceLinks">The entity reference links for the navigation link to report.</param>
            <param name="isExpanded">true if the navigation link is expanded.</param>
            <returns>The navigation link info created.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.CreateProjectedNavigationLinkInfo(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Creates a navigation link info for a projected navigation link that is missing from the payload.
            </summary>
            <param name="navigationProperty">The navigation property for which the link will be reported.</param>
            <returns>The navigation link info created.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.ReportEntityReferenceLink">
            <summary>
            Gets the next entity reference link to report and removes it from the internal storage.
            </summary>
            <returns>The entity reference link to report or null.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.NavigationLink">
            <summary>
            The navigation link to report.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.NavigationProperty">
            <summary>
            The navigation property for which the link will be reported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.IsExpanded">
            <summary>
            true if the navigation link is expanded (has a value).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.ExpandedFeed">
            <summary>
            The expanded feed for expanded navigation link to be reported.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo.HasEntityReferenceLink">
            <summary>
            true if the link info has entity reference link which was not yet reported, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterDeserializer">
            <summary>
            OData JsonLight deserializer for parameter payloads.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer">
            <summary>
            OData JsonLight deserializer for properties and value types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.missingPropertyValue">
            <summary>A sentinel value indicating a missing property value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.recursionDepth">
            <summary>
            The current recursion depth of values read by this deserializer, measured by the number of complex, collection, JSON object and JSON array values read so far.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadTopLevelProperty(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates an reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadTopLevelPropertyAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates an reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>A task which returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadNonEntityValue(System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Reads a primitive value, complex value or collection.
            </summary>
            <param name="payloadTypeName">The type name read from the payload as a property annotation, or null if none is available.</param>
            <param name="expectedValueTypeReference">The expected type reference of the property value.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use - if null the method should create a new one if necessary.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="isTopLevelPropertyValue">true if we are reading a top-level property value; otherwise false.</param>
            <param name="insideComplexValue">true if we are reading a complex value and the reader is already positioned inside the complex value; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>The value of the property read.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue   - the value of the property is a primitive value
                            JsonNodeType.StartObject      - the value of the property is an object
                            JsonNodeType.StartArray       - the value of the property is an array - method will fail in this case.
            Post-Condition: almost anything - the node after the property value.
                            
            Returns the value of the property read, which can be one of:
            - null
            - primitive value
            - <see cref="T:Microsoft.Data.OData.ODataComplexValue"/>
            - <see cref="T:Microsoft.Data.OData.ODataCollectionValue"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ValidateDataPropertyTypeNameAnnotation(Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.String)">
            <summary>
            Gets and validates the type name annotation for the specified property.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker in use for the entry content.</param>
            <param name="propertyName">The name of the property to get the type name for.</param>
            <returns>The type name for the property or null if no type name was found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.TryReadODataTypeAnnotationValue(System.String,System.String@)">
            <summary>
            Tries to read an annotation as OData type name annotation.
            </summary>
            <param name="annotationName">The annotation name on which value the reader is positioned on.</param>
            <param name="value">The read value of the annotation (string).</param>
            <returns>true if the annotation is an OData type name annotation, false otherwise.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue - the value of the annotation
                            JsonNodeType.StartObject
                            JsonNodeType.StartArray
            Post-Condition: JsonNodeType.Property       - the next property after the annotation
                            JsonNodeType.EndObject      - end of the parent object
                            JsonNodeType.PrimitiveValue - the reader didn't move
                            JsonNodeType.StartObject
                            JsonNodeType.StartArray
                            
            If the method returns true, it consumed the value of the annotation from the reader.
            If it returns false, it didn't move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadODataTypeAnnotationValue">
            <summary>
            Reads the value of the odata.type annotation.
            </summary>
            <returns>The type name read from the annotation.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue - the value of the annotation, will fail if it's not PrimitiveValue
                            JsonNodeType.StartObject
                            JsonNodeType.StartArray
            Post-Condition: JsonNodeType.Property    - the next property after the annotation
                            JsonNodeType.EndObject   - end of the parent object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadTypePropertyAnnotationValue(System.String)">
            <summary>
            Reads top-level property payload property annotation value.
            </summary>
            <param name="propertyAnnotationName">The name of the property annotation.</param>
            <returns>The value of the annotation read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.TryReadODataTypeAnnotation(System.String@)">
            <summary>
            Tries to read an annotation as OData type name annotation.
            </summary>
            <param name="payloadTypeName">The read value of the annotation (string).</param>
            <returns>true if the annotation is an OData type name annotation, false otherwise.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property       - the property that possibly is an odata.type instance annotation
            Post-Condition: JsonNodeType.Property       - the next property after the annotation or if the reader did not move
                            JsonNodeType.EndObject      - end of the parent object
            If the method returns true, it consumed the value of the annotation from the reader.
            If it returns false, it didn't move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadTopLevelPropertyImplementation(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            This method creates an reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
            <remarks>
            The method assumes that the ReadPayloadStart has already been called and it will not call ReadPayloadEnd.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.UpdateExpectedTypeBasedOnMetadataUri(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Updates the expected type based on the metadata URI if there is one.
            </summary>
            <param name="expectedPropertyTypeReference">The expected property type reference provided by the user through public APIs, or null if one was not provided.</param>
            <returns>The expected type reference updated based on the metadata uri, if there is one.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadCollectionValue(Microsoft.Data.Edm.IEdmCollectionTypeReference,System.String,Microsoft.Data.OData.SerializationTypeNameAnnotation)">
            <summary>
            Reads a collection value.
            </summary>
            <param name="collectionValueTypeReference">The collection type reference of the value.</param>
            <param name="payloadTypeName">The type name read from the payload.</param>
            <param name="serializationTypeNameAnnotation">The serialization type name for the collection value (possibly null).</param>
            <returns>The value of the collection.</returns>
            <remarks>
            Pre-Condition:  Fails if the current node is not a JsonNodeType.StartArray
            Post-Condition: almost anything - the node after the collection value (after the EndArray)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadPrimitiveValue(System.Boolean,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Boolean,System.String)">
            <summary>
            Reads a primitive value.
            </summary>
            <param name="insideJsonObjectValue">true if the reader is positioned on the first property of the value which is a JSON Object 
                (or the second property if the first one was odata.type).</param>
            <param name="expectedValueTypeReference">The expected type reference of the value, or null if none is available.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>The value of the primitive value.</returns>
            <remarks>
            Pre-Condition:  insideJsonObjectValue == false -> none - Fails if the current node is not a JsonNodeType.PrimitiveValue
                            insideJsonObjectValue == true -> JsonNodeType.Property or JsonNodeType.EndObject - the first property of the value object,
                                or the second property if first was odata.type, or the end-object.
            Post-Condition: almost anything - the node after the primitive value.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadComplexValue(Microsoft.Data.Edm.IEdmComplexTypeReference,System.String,Microsoft.Data.OData.SerializationTypeNameAnnotation,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads a complex value.
            </summary>
            <param name="complexValueTypeReference">The expected type reference of the value.</param>
            <param name="payloadTypeName">The type name read from the payload.</param>
            <param name="serializationTypeNameAnnotation">The serialization type name for the collection value (possibly null).</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use - this is always initialized as necessary, do not clear.</param>
            <returns>The value of the complex value.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property - the first property of the complex value object, or the second one if the first one was odata.type.
                            JsonNodeType.EndObject - the end object of the complex value object.
            Post-Condition: almost anything - the node after the complex value (after the EndObject)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadNonEntityValueImplementation(System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Reads a primitive, complex or collection value.
            </summary>
            <param name="payloadTypeName">The type name read from the payload as a property annotation, or null if none is available.</param>
            <param name="expectedTypeReference">The expected type reference of the property value.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use - if null the method should create a new one if necessary.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="isTopLevelPropertyValue">true if we are reading a top-level property value; otherwise false.</param>
            <param name="insideComplexValue">true if we are reading a complex value and the reader is already positioned inside the complex value; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>The value of the property read.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue   - the value of the property is a primitive value
                            JsonNodeType.StartObject      - the value of the property is an object
                            JsonNodeType.StartArray       - the value of the property is an array
            Post-Condition: almost anything - the node after the property value.
                            
            Returns the value of the property read, which can be one of:
            - null
            - primitive value
            - <see cref="T:Microsoft.Data.OData.ODataComplexValue"/>
            - <see cref="T:Microsoft.Data.OData.ODataCollectionValue"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.TryReadPayloadTypeFromObject(Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean,System.String@)">
            <summary>
            Reads the payload type name from a JSON object (if it exists).
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to track the detected 'odata.type' annotation (if any).</param>
            <param name="insideComplexValue">true if we are reading a complex value and the reader is already positioned inside the complex value; otherwise false.</param>
            <param name="payloadTypeName">The value of the odata.type annotation or null if no such annotation exists.</param>
            <returns>true if a type name was read from the payload; otherwise false.</returns>
            <remarks>
            Precondition:   StartObject     the start of a JSON object
            Postcondition:  Property        the first property of the object if no 'odata.type' annotation exists as first property
                                            or the first property after the 'odata.type' annotation.
                            EndObject       for an empty JSON object or an object with only the 'odata.type' annotation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ReadingComplexProperty(Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.Edm.IEdmTypeReference,System.String@)">
            <summary>
            Detects whether we are currently reading a complex property or not. This can be determined from metadata (if we have it)
            or from the presence of the odata.type instance annotation in the payload.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker in use for the entry content.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <param name="payloadTypeName">The type name of the complex value if found in the payload; otherwise null.</param>
            <returns>true if we are reading a complex property; otherwise false.</returns>
            <remarks>
            This method does not move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.IsTopLevelNullValue">
            <summary>
            Tries to read a top-level null value from the JSON reader.
            </summary>
            <returns>true if a null value could be read from the JSON reader; otherwise false.</returns>
            <remarks>If the method detects the odata.null annotation, it will read it; otherwise the reader does not move.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.ValidateNoPropertyInNullPayload(Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Make sure that we don't find any other odata.* annotations or properties after reading a payload with the odata.null annotation or the odata.metadata annotation with value ending #Edm.Null
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.GetNonEntityValueKind">
            <summary>
            Determines the value kind for a non-entity value (that is top-level property value, property value on a complex type, item in a collection)
            </summary>
            <returns>The type kind of the property value.</returns>
            <remarks>
            Doesn't move the JSON reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.IncreaseRecursionDepth">
            <summary>
            Increases the recursion depth of values by 1. This will throw if the recursion depth exceeds the current limit.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.DecreaseRecursionDepth">
            <summary>
            Decreases the recursion depth of values by 1.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertyAndValueDeserializer.AssertRecursionDepthIsZero">
            <summary>
            Asserts that the current recursion depth of values is zero. This should be true on all calls into this class from outside of this class.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterDeserializer.propertyAnnotationValueReader">
            <summary>OData property annotation reader for parameter payloads.</summary>
            <remarks>OData property annotations are not supported in parameter payloads.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterDeserializer.parameterReader">
            <summary>The JSON Light parameter reader.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader,Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parameterReader">The JSON Light parameter reader.</param>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterDeserializer.ReadNextParameter(Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads the next parameter from the parameters payload.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker used to read a parameter payload.</param>
            <returns>true if a parameter was read from the payload; otherwise false.</returns>
            <remarks>
            Pre-Condition:  Property or EndObject   the property node of the parameter to read or the end object node if there are not parameters
            Post-Condition: Property or EndObject   the node after the property value of a primitive, complex or null collection parameter
                            Any                     the start of the value representing a non-null collection parameter (the collection reader will fail if this is not a StartArray node)
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser">
            <summary>
            Parser for odata metadata URIs used in JSON Lite.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.SelectQueryOptionStart">
            <summary>The start of the select query option (including the '=' character).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.model">
            <summary>The model to use when resolving the target of the URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.parseResult">
            <summary>The result of parsing the metadata URI.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.#ctor(Microsoft.Data.Edm.IEdmModel,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult"/> class.
            </summary>
            <param name="model">The model to use when resolving the target of the URI.</param>
            <param name="metadataUriFromPayload">The metadata URI read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.Parse(Microsoft.Data.Edm.IEdmModel,System.String,Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataVersion,Microsoft.Data.OData.ODataReaderBehavior)">
            <summary>
            Creates a metadata URI parser and parses the metadata URI read from the payload.
            </summary>
            <param name="model">The model to use when resolving the target of the URI.</param>
            <param name="metadataUriFromPayload">The string value of the odata.metadata annotation read from the payload.</param>
            <param name="payloadKind">The payload kind we expect the metadata URI to conform to.</param>
            <param name="version">The OData version to use for determining the set of built-in functions available.</param>
            <param name="readerBehavior">Reader behavior if the caller is a reader, null if no reader behavior is available.</param>
            <returns>The result from parsing the metadata URI.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ExtractSelectQueryOption(System.String)">
            <summary>
            Extracts the value of the $select query option from the specified fragment.
            </summary>
            <param name="fragment">The fragment to extract the $select query option from.</param>
            <returns>The value of the $select query option or null if none exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.TokenizeMetadataUri">
            <summary>
            Parses a metadata URI read from the payload into its parts.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ParseMetadataUri(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Applies the model and validates the metadata URI against it.
            </summary>
            <param name="expectedPayloadKind">The payload kind we expect the metadata URI to conform to.</param>
            <param name="readerBehavior">Reader behavior if the caller is a reader, null if no reader behavior is available.</param>
            <param name="version">The version of the payload being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ParseMetadataUriFragment(System.String,Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Parses the fragment of a metadata URI.
            </summary>
            <param name="fragment">The fragment to parse</param>
            <param name="readerBehavior">Reader behavior if the caller is a reader, null if no reader behavior is available.</param>
            <param name="version">The OData version to use for determining the set of built-in functions available.</param>
            <returns>The detected payload kind based on parsing the fragment.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ParseAssociationLinks(Microsoft.Data.OData.Metadata.EdmTypeResolver,System.Int32,System.String[],Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Returns the parse results of the metadata uri if it has a AssociationLink in the uri
            </summary>
            <param name="edmTypeResolver">Edm Type Resolver to determine entityset type element.</param>
            <param name="partCount">Number of split parts the metadata fragment is split into.</param>
            <param name="parts">The  actual metadata fragment parts.</param>
            <param name="readerBehavior">The reader behavior.</param>
            <param name="version">The odata version.</param>
            <returns>Returns with an EntityReferenceLink or Links depending on the Uri, sets the parse results with the navigation, and set</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.SetEntityLinkParseResults(Microsoft.Data.Edm.IEdmNavigationProperty,System.String)">
            <summary>
            Set the EntityLinks Parse results.
            </summary>
            <param name="navigationProperty">Navigation property to add to the results.</param>
            <param name="singleElement">Single element string, used to confirm if this is an error case or not.</param>
            <returns>Returns ReferenceLink or Collection Link based on the navigation and at element</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ResolveEntityReferenceLinkMetadataFragment(Microsoft.Data.OData.Metadata.EdmTypeResolver,Microsoft.Data.Edm.IEdmEntitySet,System.String,System.String,Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Parses the fragment of an entity reference link metadata URI.
            </summary>
            <param name="edmTypeResolver">Edm Type Resolver used to get the ElementType of the entity set.</param>
            <param name="entitySet">Entity Set used as a starting point to find the navigation property</param>
            <param name="typeName">The name of the type declaring the navigation property.</param>
            <param name="propertyName">The name of the navigation property.</param>
            <param name="readerBehavior">Reader behavior if the caller is a reader, null if no reader behavior is available.</param>
            <param name="version">The version of the payload being read.</param>
            <returns>The resolved navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ValidateLinkMetadataUriFragmentItemSelector(System.String)">
            <summary>
            Validate the Metadata Uri Fragment is @Element for a $links metadata uri, will throw a $links specific error
            </summary>
            <param name="elementSelector">Element selector.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ValidateMetadataUriFragmentItemSelector(System.String)">
            <summary>
            Validate the Metadata Uri Fragment is @Element for a non $links metadata uri, throws if its not correct
            </summary>
            <param name="elementSelector">Element selector.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ResolveNavigationProperty(Microsoft.Data.Edm.IEdmEntityType,System.String)">
            <summary>
            Resolves a navigation property name to an IEdmNavigationProperty.
            </summary>
            <param name="entityType">Entity Type to look for the navigation property on.</param>
            <param name="navigationPropertyName">Navigation property name to find.</param>
            <returns>Returns the navigation property of throws an exception if it cannot be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ResolveEntitySet(System.String,System.Func{Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.OData.ODataPayloadKind})">
            <summary>
            Resolves the entity set.
            </summary>
            <param name="entitySetPart">The entity set part.</param>
            <param name="resolvedEntitySet">The resolved entity set.</param>
            <returns>Returns the OData Payload Kind</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ResolveTypeCast(Microsoft.Data.Edm.IEdmEntitySet,System.String,Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Resolves an entity set with an optional type cast and updates the parse result.
            </summary>
            <param name="entitySet">The entity set to resolve the type cast against.</param>
            <param name="typeCast">The optional type cast.</param>
            <param name="readerBehavior">Reader behavior if the caller is a reader, null if no reader behavior is available.</param>
            <param name="version">The version of the payload being read.</param>
            <param name="entitySetElementType">The type of the given entity set.</param>
            <returns>The resolved entity type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParser.ResolveType(System.String,Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Resolves a type.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="readerBehavior">Reader behavior if the caller is a reader, null if no reader behavior is available.</param>
            <param name="version">The version of the payload being read.</param>
            <returns>The resolved Edm type.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState">
            <summary>
            Interface representing a state of the JSON writer for entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.GetOrCreateTypeContext(Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Gets or creates the type context to answer basic questions regarding the type info of the entry.
            </summary>
            <param name="model">The Edm model to use.</param>
            <param name="writingResponse">True if writing a response payload, false otherwise.</param>
            <returns>The type context to answer basic questions regarding the type info of the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.Entry">
            <summary>
            The entry being written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.EntityType">
            <summary>
            The entity type for the entry (if available)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.EntityTypeFromMetadata">
            <summary>
            The entity type which was derived from the model (may be either the same as entity type or its base type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.SerializationInfo">
            <summary>
            The serialization info for the current entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.EditLinkWritten">
            <summary>
            Flag which indicates that the odata.editLink metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.ReadLinkWritten">
            <summary>
            Flag which indicates that the odata.readLink metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.MediaEditLinkWritten">
            <summary>
            Flag which indicates that the odata.mediaEditLink metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.MediaReadLinkWritten">
            <summary>
            Flag which indicates that the odata.mediaReadLink metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.MediaContentTypeWritten">
            <summary>
            Flag which indicates that the odata.mediaContentType metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState.MediaETagWritten">
            <summary>
            Flag which indicates that the odata.mediaETag metadata property has been written.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.JsonLightConstants">
            <summary>
            Constants for the JSON Lite format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.ODataAnnotationNamespacePrefix">
            <summary>The prefix for OData annotation names.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.ODataPropertyAnnotationSeparatorChar">
            <summary>The separator of property annotations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.ODataNullAnnotationTrueValue">
            <summary>The value 'true' for the OData null annotation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.ODataValuePropertyName">
            <summary>The 'value' property name for the Json Light value property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.ODataEntityReferenceLinkUrlName">
            <summary>The name of the property returned for a singleton $links query.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.ODataWorkspaceCollectionUrlName">
            <summary>The name of the property returned for a URL of a workspace collection.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.ODataWorkspaceCollectionNameName">
            <summary>The name of the property returned for a name of a workspace collection.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.ODataAnnotationGroupNamePropertyName">
            <summary>The 'name' property name of an annotation group declaration.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.MetadataUriSelectQueryOptionName">
            <summary>The name of the $select query option.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.MetadataUriQueryOptionValueSeparator">
            <summary>The '=' character used to separate a query option name from its value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.MetadataUriQueryOptionSeparator">
            <summary>The '&amp;' separator character between query options.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.MetadataUriFragmentIndicator">
            <summary>The hash sign acting as fragment indicator in a metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.MetadataUriFragmentPartSeparator">
            <summary>The slash sign used as separator in the fragment of a metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.MetadataUriFragmentItemSelector">
            <summary>The @Element token that indicates that the payload is a single item from a set.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.FunctionParameterStart">
            <summary>The '(' used to mark the start of function parameters in the fragment of a metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.FunctionParameterEnd">
            <summary>The ')' used to mark the end of function parameters in the fragment of a metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.FunctionParameterSeparator">
            <summary>The "," to use as the separator for the function parameters in the fragment of a metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.JsonLightConstants.MetadataUriFragmentNull">
            <summary>The token that indicates the payload is a property with null value.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder">
            <summary>
            Builder class to construct the metadata pointers for the Json Light format for the various payload kinds.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.CreateFromSettings(Microsoft.Data.OData.JsonLight.JsonLightMetadataLevel,System.Boolean,Microsoft.Data.OData.ODataMessageWriterSettings,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Creates a metadata uri builder after validating user input.
            </summary>
            <param name="metadataLevel">The JSON Light metadata level being written.</param>
            <param name="writingResponse">if set to <c>true</c> indicates that a response is being written.</param>
            <param name="writerSettings">The writer settings.</param>
            <param name="model">The Edm model instance.</param>
            <returns>The metadata uri builder to use while writing.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.CreateDirectlyFromUri(Microsoft.Data.OData.ODataMetadataDocumentUri,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Creates a metadata uri builder for the given base metadata document uri.
            DEVNOTE: specifically for unit testing.
            </summary>
            <param name="metadataDocumentUri">The non-null, absolute metadata document URI.</param>
            <param name="model">The Edm model instance.</param>
            <param name="writingResponse">if set to <c>true</c> indicates that a response is being written.</param>
            <returns>A new metadata uri builder.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.TryBuildFeedMetadataUri(Microsoft.Data.OData.ODataFeedAndEntryTypeContext,System.Uri@)">
            <summary>
            Creates the metadata URI for a feed based on the entity set the entries in the feed belong to.
            </summary>
            <param name="typeContext">The context object to answer basic questions regarding the type of the feed.</param>
            <param name="metadataUri">Returns the metadata URI for a feed based on the entity set the entries in the feed belong to.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.TryBuildEntryMetadataUri(Microsoft.Data.OData.ODataFeedAndEntryTypeContext,System.Uri@)">
            <summary>
            Creates the metadata URI for an entry based on the entity set it belongs to.
            </summary>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry.</param>
            <param name="metadataUri">Returns the metadata URI for an entry based on the entity set it belongs to.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.TryBuildMetadataUriForValue(Microsoft.Data.OData.ODataProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for a property based on its value.
            </summary>
            <param name="property">The property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for a property based on its owning type.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.TryBuildEntityReferenceLinkMetadataUri(Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for an entity reference link.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="entitySet">The entity set of the declaring type of the navigation property</param>
            <param name="navigationProperty">The navigation property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for an entity reference link or a collection of entity reference links.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.TryBuildEntityReferenceLinksMetadataUri(Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for a collection of entity reference links.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="entitySet">The entity set of the declaring type of the navigation property</param>
            <param name="navigationProperty">The navigation property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for an entity reference link or a collection of entity reference links.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.TryBuildCollectionMetadataUri(Microsoft.Data.OData.ODataCollectionStartSerializationInfo,Microsoft.Data.Edm.IEdmTypeReference,System.Uri@)">
            <summary>
            Creates the metadata URI for an operation (function, action, service op) based on its function import.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="itemTypeReference">The item type of the collection.</param>
            <param name="metadataUri">Returns the metadata URI for an operation (function, action, service op) based on its function import.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.TryBuildServiceDocumentMetadataUri(System.Uri@)">
            <summary>
            Creates the metadata URI for the service document.
            </summary>
            <param name="metadataUri">Returns the metadata URI for the service document.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.BaseUri">
            <summary>
            Gets the base URI of the metadata document uri. May be null to indicate that there is no metadata document uri.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder">
            <summary>
            Metadata uri builder which uses a user-provided uri and $select clause.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.metadataDocumentUri">
            <summary>
            The base metadata document uri and $select clause provided by the user.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.model">
            <summary>
            The Edm model instance.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.writingResponse">
            <summary>
            if set to <c>true</c> indicates that a response is being written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.#ctor(Microsoft.Data.OData.ODataMetadataDocumentUri,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder"/> class.
            </summary>
            <param name="metadataDocumentUri">The non-null, absolute metadata document URI.</param>
            <param name="model">The Edm model instance.</param>
            <param name="writingResponse">if set to <c>true</c> indicates that a response is being written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.TryBuildFeedMetadataUri(Microsoft.Data.OData.ODataFeedAndEntryTypeContext,System.Uri@)">
            <summary>
            Creates the metadata URI for a feed based on the entity set the entries in the feed belong to.
            </summary>
            <param name="typeContext">The context object to answer basic questions regarding the type of the feed.</param>
            <param name="metadataUri">Returns the metadata URI for a feed based on the entity set the entries in the feed belong to.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.TryBuildEntryMetadataUri(Microsoft.Data.OData.ODataFeedAndEntryTypeContext,System.Uri@)">
            <summary>
            Creates the metadata URI for an entry based on the entity set it belongs to.
            </summary>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry.</param>
            <param name="metadataUri">Returns the metadata URI for an entry based on the entity set it belongs to.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.TryBuildMetadataUriForValue(Microsoft.Data.OData.ODataProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for a property based on its value.
            </summary>
            <param name="property">The property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for a property based on its owning type.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.TryBuildEntityReferenceLinkMetadataUri(Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for an entity reference link.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="entitySet">The entity set of the declaring type of the navigation property</param>
            <param name="navigationProperty">The navigation property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for an entity reference link or a collection of entity reference links.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.TryBuildEntityReferenceLinksMetadataUri(Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for a collection of entity reference links.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="entitySet">The entity set of the declaring type of the navigation property</param>
            <param name="navigationProperty">The navigation property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for an entity reference link or a collection of entity reference links.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.TryBuildCollectionMetadataUri(Microsoft.Data.OData.ODataCollectionStartSerializationInfo,Microsoft.Data.Edm.IEdmTypeReference,System.Uri@)">
            <summary>
            Creates the metadata URI for an operation (function, action, service op) based on its function import.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="itemTypeReference">The item type of the collection.</param>
            <param name="metadataUri">Returns the metadata URI for an operation (function, action, service op) based on its function import.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.TryBuildServiceDocumentMetadataUri(System.Uri@)">
            <summary>
            Creates the metadata URI for the service document.
            </summary>
            <param name="metadataUri">Returns the metadata URI for the service document.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.GetMetadataUriTypeNameForValue(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Gets the metadata URI type name based on the given property.
            </summary>
            <param name="property">The property.</param>
            <returns>The type name for the metadata URI.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.GetEntitySetName(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the entity set name for the metadata Uri.
            </summary>
            <param name="entitySet">The entity set in question.</param>
            <param name="edmModel">The model instance.</param>
            <returns>Returns the entity set name for the metadata Uri.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.GetTypecast(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Returns the fully qualified name of <paramref name="entityType"/> if it is a derived type of the <paramref name="entitySet"/>;
            returns null if <paramref name="entityType"/> is the root type of <paramref name="entitySet"/>.
            </summary>
            <param name="entitySet">The entity set in question.</param>
            <param name="entityType">The eneity type in question.</param>
            <returns>
            Returns the fully qualified name of <paramref name="entityType"/> if it is a derived type of the <paramref name="entitySet"/>;
            returns null if <paramref name="entityType"/> is the root type of <paramref name="entitySet"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.CreateTypeMetadataUri(Microsoft.Data.OData.ODataMetadataDocumentUri,System.String)">
            <summary>
            Creates the metadata URI for a type.
            </summary>
            <param name="metadataDocumentUri">The non-null, absolute metadata document URI.</param>
            <param name="fullTypeName">The fully qualified type name to create the metadata URI for.</param>
            <returns>Returns the metadata URI for a value based on its type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.CreateFeedOrEntryMetadataUri(Microsoft.Data.OData.ODataMetadataDocumentUri,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataFeedAndEntryTypeContext,System.Boolean,System.Boolean)">
            <summary>
            Creates the metadata URI for a feed or entry.
            </summary>
            <param name="metadataDocumentUri">The non-null, absolute metadata document URI.</param>
            <param name="model">The Edm model instance.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry or feed.</param>
            <param name="isEntry">true if the metadata URI is built for an entry, false if the metadata URI is built for a feed.</param>
            <param name="writingResponse">true if the metadata URI is for a response payload, false if the metadata URI is for a request payload.</param>
            <returns>Returns the metadata URI for the feed or entry.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.CreateEntityContainerElementMetadataUri(Microsoft.Data.OData.ODataMetadataDocumentUri,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the metadata URI for an entity set.
            </summary>
            <param name="metadataDocumentUri">The non-null, absolute metadata document URI.</param>
            <param name="entitySetName">The fully qualified entity set name for which to create the metadata URI.</param>
            <param name="typecast">The fully qualified entity type name of the entries in the result. This has to be an entity type derived
              from the result entity set's base type or null to use its base type.</param>
            <param name="navigationPropertyName">Navigation Property name to create a $link metadata uri to, if not null a $link uri will be created</param>
            <param name="appendItemSelector">true to append the '@Element" item selector at the end of the metadata URI; otherwise false.</param>
            <returns>The metadata URI for the <paramref name="entitySetName"/>.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.DefaultMetadataUriBuilder.BaseUri">
            <summary>
            Gets the base URI of the metadata document uri. May be null to indicate that there is no metadata document uri.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder">
            <summary>
            Metadata uri builder which never actually builds anything. Used for the case where 'nometadata' is explicitly requested in the media type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.Instance">
            <summary>
            Singleton instance of <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder"/> class from being created.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.TryBuildFeedMetadataUri(Microsoft.Data.OData.ODataFeedAndEntryTypeContext,System.Uri@)">
            <summary>
            Creates the metadata URI for a feed based on the entity set the entries in the feed belong to.
            </summary>
            <param name="typeContext">The context object to answer basic questions regarding the type of the feed.</param>
            <param name="metadataUri">Returns the metadata URI for a feed based on the entity set the entries in the feed belong to.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.TryBuildEntryMetadataUri(Microsoft.Data.OData.ODataFeedAndEntryTypeContext,System.Uri@)">
            <summary>
            Creates the metadata URI for an entry based on the entity set it belongs to.
            </summary>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry.</param>
            <param name="metadataUri">Returns the metadata URI for an entry based on the entity set it belongs to.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.TryBuildMetadataUriForValue(Microsoft.Data.OData.ODataProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for a property based on its value.
            </summary>
            <param name="property">The property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for a property based on its owning type.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.TryBuildEntityReferenceLinkMetadataUri(Microsoft.Data.OData.ODataEntityReferenceLinkSerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for an entity reference link.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="entitySet">The entity set of the declaring type of the navigation property</param>
            <param name="navigationProperty">The navigation property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for an entity reference link or a collection of entity reference links.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.TryBuildEntityReferenceLinksMetadataUri(Microsoft.Data.OData.ODataEntityReferenceLinksSerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Uri@)">
            <summary>
            Creates the metadata URI for a collection of entity reference links.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="entitySet">The entity set of the declaring type of the navigation property</param>
            <param name="navigationProperty">The navigation property to create the metadata URI for.</param>
            <param name="metadataUri">Returns the metadata URI for an entity reference link or a collection of entity reference links.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.TryBuildCollectionMetadataUri(Microsoft.Data.OData.ODataCollectionStartSerializationInfo,Microsoft.Data.Edm.IEdmTypeReference,System.Uri@)">
            <summary>
            Creates the metadata URI for an operation (function, action, service op) based on its function import.
            </summary>
            <param name="serializationInfo">Serialization information to generate the metadata uri.</param>
            <param name="itemTypeReference">The item type of the collection.</param>
            <param name="metadataUri">Returns the metadata URI for an operation (function, action, service op) based on its function import.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.TryBuildServiceDocumentMetadataUri(System.Uri@)">
            <summary>
            Creates the metadata URI for the service document.
            </summary>
            <param name="metadataUri">Returns the metadata URI for the service document.</param>
            <returns>true if we have successfully built the metadata URI; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriBuilder.NullMetadataUriBuilder.BaseUri">
            <summary>
            Gets the base URI of the metadata document uri. May be null to indicate that there is no metadata document uri.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult">
            <summary>
            The result of parsing an OData metadata URI in JSON Lite.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.metadataUriFromPayload">
            <summary>The metadata URI read from the payload in its unparsed form.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.metadataDocumentUri">
            <summary>The metadata document URI as read from the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.fragment">
            <summary>The fragment portion of the metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.selectQueryOption">
            <summary>The $select query option.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.entitySet">
            <summary>The resolved entity set as specified in the metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.edmType">
            <summary>The resolved structured type as specified in the metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.navigationProperty">
            <summary>The navigation property as specified in the metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.detectedPayloadKinds">
            <summary>The detected payload kinds from parsing the metadata URI.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.isNullProperty">
            <summary>true if we just parsed the metadata Uri for null properties, i.e. ~/$metadata#Edm.Null; false otherwise.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult"/> class.
            </summary>
            <param name="metadataUriFromPayload">The metadata URI read from the payload in its unparsed form.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.MetadataUri">
            <summary>
            The metadata URI read from the payload in its unparsed form.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.MetadataDocumentUri">
            <summary>
            The metadata document URI as read from the payload.
            </summary>
            <remarks>This is the metadata URI as read from the payload without the fragment.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.Fragment">
            <summary>
            The fragment portion of the metadata URI.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.SelectQueryOption">
            <summary>
            The $select query option.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.EntitySet">
            <summary>
            The resolved entity set as specified in the metadata URI.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.EdmType">
            <summary>
            The resolved structured type as specified in the metadata URI.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.NavigationProperty">
            <summary>
            The navigation property as specified in the metadata URI.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.DetectedPayloadKinds">
            <summary>
            The detected payload kinds from parsing the metadata URI.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult.IsNullProperty">
            <summary>
            true if we just parsed the metadata Uri for null properties, i.e. ~/$metadata#Edm.Null; false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ReorderingJsonReader">
            <summary>
            Reader for the JSON Lite format that supports look-ahead and re-ordering of payloads.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.BufferingJsonReader">
            <summary>
            Reader for the JSON format (http://www.json.org) that supports look-ahead.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonReader">
            <summary>
            Reader for the JSON format. http://www.json.org
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.InitialCharacterBufferSize">
            <summary>
            The initial size of the buffer of characters.
            </summary>
            <remarks>
            4K (page size) divided by the size of a single character 2 and a little less
            so that array structures also fit into that page.
            The goal is for the entire buffer to fit into one page so that we don't cause
            too many L1 cache misses.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.MaxCharacterCountToMove">
            <summary>
            Maximum number of characters to move in the buffer. If the current token size is bigger than this, we will allocate a larger buffer.
            </summary>
            <remarks>This threshold is copied from the XmlReader implementation.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.DateTimeFormatPrefix">
            <summary>
            The text which every date time value starts with.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.DateTimeFormatSuffix">
            <summary>
            The text which every date time value ends with.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.reader">
            <summary>
            The text reader to read input characters from.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.scopes">
            <summary>
            Stack of scopes.
            </summary>
            <remarks>
            At the begining the Root scope is pushed to the stack and stays there for the entire parsing 
              (so that we don't have to check for empty stack and also to track the number of root-level values)
            Each time a new object or array is started the Object or Array scope is pushed to the stack.
            If a property inside an Object is found, the Property scope is pushed to the stack.
            The Property is popped once we find the value for the property.
            The Object and Array scopes are popped when their end is found.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.allowAnnotations">
            <summary>true if annotations are allowed and thus the reader has to 
            accept more characters in property names than we do normally; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.supportAspNetDateTimeFormat">
            <summary>true if the reader should recognize ASP.NET JSON DateTime and DateTimeOffset format "\/Date(...)\/".
            false if the reader should not recognize such strings and read them as arbitrary string.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.endOfInputReached">
            <summary>
            End of input from the reader was already reached.
            </summary>
            <remarks>This is used to avoid calling Read on the text reader multiple times
            even though it already reported the end of input.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.characterBuffer">
            <summary>
            Buffer of characters from the input.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.storedCharacterCount">
            <summary>
            Number of characters available in the input buffer.
            </summary>
            <remarks>This can have value of 0 to characterBuffer.Length.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.tokenStartIndex">
            <summary>
            Index into the characterBuffer which points to the first character
            of the token being currently processed (while in the Read method)
            or of the next token to be processed (while in the caller code).
            </summary>
            <remarks>This can have value from 0 to storedCharacterCount.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.nodeType">
            <summary>
            The last reported node type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.nodeValue">
            <summary>
            The value of the last reported node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.stringValueBuilder">
            <summary>
            Cached string builder to be used when constructing string values (needed to resolve escape sequences).
            </summary>
            <remarks>The string builder instance is cached to avoid excessive allocation when many string values with escape sequences
            are found in the payload.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.#ctor(System.IO.TextReader,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">The text reader to read input characters from.</param>
            <param name="jsonFormat">The specific JSON-based format expected by the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.Read">
            <summary>
            Reads the next node from the input.
            </summary>
            <returns>true if a new node was found, or false if end of input was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.IsWhitespaceCharacter(System.Char)">
            <summary>
            Determines if a given character is a whitespace character.
            </summary>
            <param name="character">The character to test.</param>
            <returns>true if the <paramref name="character"/> is a whitespace; false otherwise.</returns>
            <remarks>Note that the behavior of this method is different from Char.IsWhitespace, since that method
            returns true for all characters defined as whitespace by the Unicode spec (which is a lot of characters),
            this one on the other hand recognizes just the whitespaces as defined by the JSON spec.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.TryParseDateTimePrimitiveValue(System.String)">
            <summary>
            Parses a date time primitive value.
            </summary>
            <param name="stringValue">The string value to parse.</param>
            <returns>The parsed date time value, or null if the string value doesn't represent a date time value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ParseValue">
            <summary>
            Parses a "value", that is an array, object or primitive value.
            </summary>
            <returns>The node type to report to the user.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ParseProperty">
            <summary>
            Parses a property name and the colon after it.
            </summary>
            <returns>The node type to report to the user.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ParseStringPrimitiveValue">
            <summary>
            Parses a primitive string value.
            </summary>
            <returns>The value of the string primitive value.</returns>
            <remarks>
            Assumes that the current token position points to the opening quote.
            Note that the string parsing can never end with EndOfInput, since we're already seen the quote.
            So it can either return a string succesfully or fail.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ParseStringPrimitiveValue(System.Boolean@)">
            <summary>
            Parses a primitive string value.
            </summary>
            <param name="hasLeadingBackslash">Set to true if the first character in the string was a backslash. This is used when parsing DateTime values
            since they must start with an escaped slash character (\/).</param>
            <returns>The value of the string primitive value.</returns>
            <remarks>
            Assumes that the current token position points to the opening quote.
            Note that the string parsing can never end with EndOfInput, since we're already seen the quote.
            So it can either return a string succesfully or fail.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ParseNullPrimitiveValue">
            <summary>
            Parses the null primitive value.
            </summary>
            <returns>Always returns null if successful. Otherwise throws.</returns>
            <remarks>Assumes that the current token position points to the 'n' character.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ParseBooleanPrimitiveValue">
            <summary>
            Parses the true or false primitive values.
            </summary>
            <returns>true of false boolean value if successful. Otherwise throws.</returns>
            <remarks>Assumes that the current token position points to the 't' or 'f' character.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ParseNumberPrimitiveValue">
            <summary>
            Parses the number primitive values.
            </summary>
            <returns>Int32 or Double value if successful. Otherwise throws.</returns>
            <remarks>Assumes that the current token position points to the first character of the number, so either digit, dot or dash.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ParseName">
            <summary>
            Parses a name token.
            </summary>
            <returns>The value of the name token.</returns>
            <remarks>Name tokens are (for backward compat reasons) either
            - string value quoted with double quotes.
            - string value quoted with single quotes.
            - sequence of letters, digits, underscores and dollar signs (without quoted and in any order).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.EndOfInput">
            <summary>
            Called when end of input is reached.
            </summary>
            <returns>Always returns false, used for easy readability of the callers.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.PushScope(Microsoft.Data.OData.Json.JsonReader.ScopeType)">
            <summary>
            Creates a new scope of type <paramref name="newScopeType"/> and pushes the stack.
            </summary>
            <param name="newScopeType">The scope type to push.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.PopScope">
            <summary>
            Pops a scope from the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.TryPopPropertyScope">
            <summary>
            Pops a property scope if it's present on the stack.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.SkipWhitespaces">
            <summary>
            Skips all whitespace characters in the input.
            </summary>
            <returns>true if a non-whitespace character was found in which case the tokenStartIndex is pointing at that character.
            false if there are no non-whitespace characters left in the input.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.EnsureAvailableCharacters(System.Int32)">
            <summary>
            Ensures that a specified number of characters after the token start is available in the buffer.
            </summary>
            <param name="characterCountAfterTokenStart">The number of character after the token to make available.</param>
            <returns>true if at least the required number of characters is available; false if end of input was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ConsumeTokenToString(System.Int32)">
            <summary>
            Consumes the <paramref name="characterCount"/> characters starting at the start of the token
            and returns them as a string.
            </summary>
            <param name="characterCount">The number of characters after the token start to consume.</param>
            <returns>The string value of the consumed token.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.ReadInput">
            <summary>
            Reads more characters from the input.
            </summary>
            <returns>true if more characters are available; false if end of input was reached.</returns>
            <remarks>This may move characters in the characterBuffer, so after this is called
            all indeces to the characterBuffer are invalid except for tokenStartIndex.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Json.JsonReader.Value">
            <summary>
            The value of the last reported node.
            </summary>
            <remarks>This is non-null only if the last node was a PrimitiveValue or Property.
            If the last node is a PrimitiveValue this property returns the value:
            - null if the null token was found.
            - boolean if the true or false token was found.
            - string if a string token was found.
            - DateTime if a string token formatted as DateTime was found.
            - Int32 if a number which fits into the Int32 was found.
            - Double if a number which doesn't fit into Int32 was found.
            If the last node is a Property this property returns a string which is the name of the property.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Json.JsonReader.NodeType">
            <summary>
            The type of the last node read.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonReader.ScopeType">
            <summary>
            Various scope types for Json writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.ScopeType.Root">
            <summary>
            Root scope - the top-level of the JSON content.
            </summary>
            <remarks>This scope is only once on the stack and that is at the bottom, always.
            It's used to track the fact that only one top-level value is allowed.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.ScopeType.Array">
            <summary>
            Array scope - inside an array.
            </summary>
            <remarks>This scope is pushed when [ is found and is active before the first and between the elements in the array.
            Between the elements it's active when the parser is in front of the comma, the parser is never after comma as then
            it always immediately processed the next token.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.ScopeType.Object">
            <summary>
            Object scope - inside the object (but not in a property value).
            </summary>
            <remarks>This scope is pushed when { is found and is active before the first and between the properties in the object.
            Between the properties it's active when the parser is in front of the comma, the parser is never after comma as then
            it always immediately processed the next token.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.ScopeType.Property">
            <summary>
            Property scope - after the property name and colon and througout the value.
            </summary>
            <remarks>This scope is pushed when a property name and colon is found.
            The scope remains on the stack while the property value is parsed, but once the property value ends, it's immediately removed
            so that it doesn't appear on the stack after the value (ever).</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonReader.Scope">
            <summary>
            Class representing scope information.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonReader.Scope.type">
            <summary>
            The type of the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReader.Scope.#ctor(Microsoft.Data.OData.Json.JsonReader.ScopeType)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The type of the scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Json.JsonReader.Scope.ValueCount">
            <summary>
            Get/Set the number of values found under the current scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.JsonReader.Scope.Type">
            <summary>
            Gets the scope type for this scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.bufferedNodesHead">
            <summary>The (possibly empty) list of buffered nodes.</summary>
            <remarks>This is a circular linked list where this field points to the first item of the list.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.currentBufferedNode">
            <summary>
            A pointer into the bufferedNodes list to track the most recent position of the current buffered node.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.maxInnerErrorDepth">
            <summary>
            The maximumum number of recursive internalexception objects to allow when reading in-stream errors.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.inStreamErrorPropertyName">
            <summary>The name of the property that denotes an in-stream error.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.isBuffering">
            <summary>A flag indicating whether the reader is in buffering mode or not.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.removeOnNextRead">
            <summary>
            A flag indicating that the last node for non-buffering read was taken from the buffer; we leave the 
            node in the buffer until the next Read call.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.parsingInStreamError">
            <summary>
            Debug flag to ensure we do not re-enter the instance while reading ahead and trying to parse an in-stream error.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.disableInStreamErrorDetection">
            <summary>
            true if the parser should check for in-stream errors whenever a start-object node is encountered; otherwise false.
            This is set to false for parsing of top-level errors where we don't want the in-stream error detection code to kick in.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.#ctor(System.IO.TextReader,System.String,System.Int32,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">The text reader to read input characters from.</param>
            <param name="inStreamErrorPropertyName">The name of the property that denotes an in-stream error.</param>
            <param name="maxInnerErrorDepth">The maximum number of recursive internalexception objects to allow when reading in-stream errors.</param>
            <param name="jsonFormat">The specific JSON-based format expected by the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.Read">
            <summary>
            Reads the next node from the input.
            </summary>
            <returns>true if a new node was found, or false if end of input was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.StartBuffering">
            <summary>
            Puts the reader into the state where it buffers read nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.BookmarkCurrentPosition">
            <summary>
            Creates a bookmark at the current position of the reader.
            </summary>
            <returns>The bookmark object, it should be treated as a black box by the caller.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.MoveToBookmark(System.Object)">
            <summary>
            Moves the reader to the bookmarked position.
            </summary>
            <param name="bookmark">The bookmark object to move to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.StopBuffering">
            <summary>
            Puts the reader into the state where no buffering happen on read.
            Either buffered nodes are consumed or new nodes are read (and not buffered).
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.StartBufferingAndTryToReadInStreamErrorPropertyValue(Microsoft.Data.OData.ODataError@)">
            <summary>
            A method to detect whether the current property value represents an in-stream error.
            </summary>
            <param name="error">The <see cref="T:Microsoft.Data.OData.ODataError"/> read from the payload.</param>
            <returns>true if the current value is an in-stream error value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.ReadInternal">
            <summary>
            Reads the next node from the input. If we have still nodes in the buffer, takes the node
            from there. Otherwise reads a new node from the underlying reader and buffers it (depending on the current mode).
            </summary>
            <returns>true if a new node was found, or false if end of input was reached.</returns>
            <remarks>
            If the parsingInStreamError field is false, the method will read ahead for every StartObject node read from the input to check whether the JSON object 
            represents an in-stream error. If so, it throws an <see cref="T:Microsoft.Data.OData.ODataErrorException"/>. If false, this check will not happen.
            This parsingInStremError field is set to true when trying to parse an in-stream error; in normal operation it is false.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.ProcessObjectValue">
            <summary>
            Called whenever we find a new object value in the payload.
            The base class implementation reads ahead and tries to parse it as an in-stream error payload. If it finds one it will throw it.
            </summary>
            <remarks>
            This method is called when the reader is in the buffering mode and can read ahead (buffering) as much as it needs to
            once it returns the reader will be returned to the position before the method was called.
            The reader is always positioned on a start object when this method is called.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.ReadNextAndCheckForInStreamError">
            <summary>
            Reads the next node from the JSON reader and if a start-object node is detected starts reading ahead and
            tries to parse an in-stream error.
            </summary>
            <returns>true if a new node was found, or false if end of input was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.TryReadInStreamErrorPropertyValue(Microsoft.Data.OData.ODataError@)">
            <summary>
            Try to read an error structure from the stream. Return null if no error structure can be read.
            </summary>
            <param name="error">An <see cref="T:Microsoft.Data.OData.ODataError"/> instance that was read from the reader or null if none could be read.</param>
            <returns>true if an <see cref="T:Microsoft.Data.OData.ODataError"/> instance that was read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.TryReadMessagePropertyValue(Microsoft.Data.OData.ODataError)">
            <summary>
            Try to read the message property value of an error value.
            </summary>
            <param name="error">An <see cref="T:Microsoft.Data.OData.ODataError"/> instance to set the read message property values on.</param>
            <returns>true if the message property values could be read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.TryReadInnerErrorPropertyValue(Microsoft.Data.OData.ODataInnerError@,System.Int32)">
            <summary>
            Try to read an inner error property value.
            </summary>
            <param name="innerError">An <see cref="T:Microsoft.Data.OData.ODataInnerError"/> instance that was read from the reader or null if none could be read.</param>
            <param name="recursionDepth">The number of times this method has been called recursively.</param>
            <returns>true if an <see cref="T:Microsoft.Data.OData.ODataInnerError"/> instance that was read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.TryReadErrorStringPropertyValue(System.String@)">
            <summary>
            Reads the string value of a property.
            </summary>
            <param name="stringValue">The string value read if the method returns true; otherwise null.</param>
            <returns>true if a string value (or null) was read as property value of the current property; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.SkipValueInternal">
            <summary>
            Skips over a JSON value (primitive, object or array) while parsing in-stream errors.
            Note that the SkipValue extension method can not be used in this case as this method has to 
            access the base instance's NodeType and call ReadInternal.
            </summary>
            <remarks>
            Pre-Condition: JsonNodeType.PrimitiveValue, JsonNodeType.StartArray or JsonNodeType.StartObject
            Post-Condition: JsonNodeType.PrimitiveValue, JsonNodeType.EndArray or JsonNodeType.EndObject
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.RemoveFirstNodeInBuffer">
            <summary>
            Removes the head node from the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.BufferingJsonReader.NodeType">
            <summary>
            The type of the last node read.
            </summary>
            <remarks>
            Depending on whether buffering is on or off this will return the node type of the last
            buffered read or the node type of the last unbuffered read.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Json.BufferingJsonReader.Value">
            <summary>
            The value of the last reported node.
            </summary>
            <remarks>
            Depending on whether buffering is on or off this will return the node type of the last
            buffered read or the node type of the last unbuffered read.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Json.BufferingJsonReader.DisableInStreamErrorDetection">
            <summary>
            true if the parser should check for in-stream errors whenever a start-object node is encountered; otherwise false.
            This is set to false for parsing of top-level errors where we don't want the in-stream error detection code to kick in.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode">
            <summary>
            Private class used to buffer nodes when reading in buffering mode.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode.nodeType">
            <summary>The type of the node read.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode.nodeValue">
            <summary>The value of the node.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode.#ctor(Microsoft.Data.OData.Json.JsonNodeType,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="nodeType">The type of the node read.</param>
            <param name="value">The value of the node.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode.NodeType">
            <summary>
            The type of the node read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode.Value">
            <summary>
            The value of the node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode.Previous">
            <summary>
            The previous node in the list of nodes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode.Next">
            <summary>
            The next node in the list of nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.#ctor(System.IO.TextReader,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">The text reader to read input characters from.</param>
            <param name="maxInnerErrorDepth">The maximum number of recursive internalexception objects to allow when reading in-stream errors.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.ProcessObjectValue">
            <summary>
            Called whenever we find a new object value in the payload.
            Buffers and re-orders an object value for later consumption by the JsonLight reader.
            </summary>
            <remarks>
            This method is called when the reader is in the buffering mode and can read ahead (buffering) as much as it needs to
            once it returns the reader will be returned to the position before the method was called.
            The reader is always positioned on a start object when this method is called.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.ReadPropertyName(System.String@,System.String@)">
            <summary>
            Reads a property name from the JSON reader and determines if it's a regular property, an instance annotation or a property annotation.
            </summary>
            <param name="propertyName">The name of the regular property which the reader is positioned on or which a property annotation belongs to.</param>
            <param name="annotationName">The name of the instance or property annotation, or null if the reader is on a regular property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferValue">
            <summary>
            Reads over a value buffering it.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject">
            <summary>
            A data structure to represent the buffered object with information about its properties,
            their order and annotations.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.propertyCache">
            <summary>The cache for properties.</summary>
            <remarks>The key is the property or instance annotation name, 
            the value are the buffered properties grouped by property name (incl. annotation properties).</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.dataProperties">
            <summary>The set of data property names.</summary>
            <remarks>Data properties are the properties that are neither an instance annotation property nor a property annotation.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.propertyNamesWithAnnotations">
            <summary>A list of property names with their annotation name.</summary>
            <remarks>This is needed to properly maintain the relative order of annotation properties if no data
            property for the annotation property exists in the object.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.AddBufferedProperty(System.String,System.String,Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedProperty)">
            <summary>
            Adds a new buffered property to the list of buffered properties for this object.
            </summary>
            <param name="propertyName">The name of the data property (null for instance annotations).</param>
            <param name="annotationName">The name of the annotation (null for data properties).</param>
            <param name="bufferedProperty">The buffered property to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.Reorder">
            <summary>
            Reorders the buffered properties to conform to the required payload order.
            </summary>
            <remarks>The required order is: odata.metadata comes first, odata.type comes next, then all odata.* property annotations
            and finally, we preserve the relative order of custom annotations and data properties.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.SortBufferedProperties(System.Collections.Generic.IList{Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedProperty})">
            <summary>
            Sort the data properties and property annotations stored for a particular property name.
            </summary>
            <param name="bufferedProperties">The list of buffered properties to sort.</param>
            <returns>The sorted enumerable of buffered properties.</returns>
            <remarks>The sort order is for all odata.* property annotations to come before the data property
            but otherwise preserve the relative order of custom property annotations with regard to the position of the data property.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.IsODataInstanceAnnotation(System.String)">
            <summary>
            Checks whether an annotation name is an odata.* annotation.
            </summary>
            <param name="annotationName">The annotation name to check.</param>
            <returns>true if the annotation name represents an odata.* annotation; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.IsODataMetadataAnnotation(System.String)">
            <summary>
            Checks whether an annotation name is a odata.metadata annotation.
            </summary>
            <param name="annotationName">The annotation name to check.</param>
            <returns>true if the annotation name represents an odata.metadata annotation; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.IsODataAnnotationGroupReferenceAnnotation(System.String)">
            <summary>
            Checks whether an annotation name is a odata.annotationGroup annotation.
            </summary>
            <param name="annotationName">The annotation name to check.</param>
            <returns>true if the annotation name represents an odata.annotationGroup annotation; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.IsODataAnnotationGroupAnnotation(System.String)">
            <summary>
            Checks whether an annotation name is a odata.annotationGroupReference annotation.
            </summary>
            <param name="annotationName">The annotation name to check.</param>
            <returns>true if the annotation name represents an odata.annotationGroupReference annotation; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.IsODataTypeAnnotation(System.String)">
            <summary>
            Checks whether an annotation name is a odata.type annotation.
            </summary>
            <param name="annotationName">The annotation name to check.</param>
            <returns>true if the annotation name represents an odata.type annotation; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.IsODataIdAnnotation(System.String)">
            <summary>
            Checks whether an annotation name is a odata.id annotation.
            </summary>
            <param name="annotationName">The annotation name to check.</param>
            <returns>true if the annotation name represents an odata.id annotation; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.IsODataETagAnnotation(System.String)">
            <summary>
            Checks whether an annotation name is a odata.etag annotation.
            </summary>
            <param name="annotationName">The annotation name to check.</param>
            <returns>true if the annotation name represents an odata.etag annotation; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.SortPropertyNames">
            <summary>
            Sorts the property names for an object.
            </summary>
            <returns>The sorted enumerable of property names.</returns>
            <remarks>The sort order is to put odata.metadata first, then odata.type, odata.id, and odata.etag, followed by all other odata.* instance annotations.
            For the rest, we preserve the relative order of custom annotations with regard to the data property.
            Note that we choose the position of the first property annotation in cases where no data property for a set of 
            property annotations exists.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.ObjectStart">
            <summary>
            The node in the linked list of buffered nodes where this object starts.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedObject.CurrentProperty">
            <summary>
            The current buffered property being processed.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedProperty">
            <summary>
            A data structure to represent a buffered property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedProperty.InsertAfter(Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode)">
            <summary>
            Reorders the buffered property to be positioned after the <paramref name="node"/> node.
            </summary>
            <param name="node">The node after which to insert this buffered property.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedProperty.PropertyAnnotationName">
            <summary>
            The annotation name for this buffered property (either instance annotation or property annotation).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedProperty.PropertyNameNode">
            <summary>
            The node in the linked list of buffered nodes that represents the property name of the buffered property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ReorderingJsonReader.BufferedProperty.EndOfPropertyValueNode">
            <summary>
            The node in the linked list of buffered nodes that represents the end of the property value of the buffered property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.IODataJsonOperationsDeserializerContext">
            <summary>
            Interface representing a context necessary for reading JSON operations values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IODataJsonOperationsDeserializerContext.ProcessUriFromPayload(System.String)">
            <summary>
            Given a URI from the payload, this method will try to make it absolute, or fail otherwise.
            </summary>
            <param name="uriFromPayload">The URI string from the payload to process.</param>
            <returns>An absolute URI to report.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IODataJsonOperationsDeserializerContext.AddActionToEntry(Microsoft.Data.OData.ODataAction)">
            <summary>
            Adds the specified action to the current entry.
            </summary>
            <param name="action">The action whcih is fully populated with the data from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IODataJsonOperationsDeserializerContext.AddFunctionToEntry(Microsoft.Data.OData.ODataFunction)">
            <summary>
            Adds the specified function to the current entry.
            </summary>
            <param name="function">The function whcih is fully populated with the data from the payload.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Json.IODataJsonOperationsDeserializerContext.JsonReader">
            <summary>
            The JSON reader to read the operations value from.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.ODataJsonOutputContextBase">
            <summary>
            Base class for all JSON output contexts.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.outputInStreamErrorListener">
            <summary>An in-stream error listener to notify when in-stream error is to be written. Or null if we don't need to notify anybody.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.messageOutputStream">
            <summary>The message output stream.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.asynchronousOutputStream">
            <summary>The asynchronous output stream if we're writing asynchronously.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.textWriter">
            <summary>The text writer created for the output stream.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.jsonWriter">
            <summary>The JSON writer to write to.</summary>
            <remarks>This field is also used to determine if the output context has been disposed already.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.TextWriter,Microsoft.Data.OData.ODataMessageWriterSettings,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="textWriter">The text writer to write to.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="model">The model to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="messageStream">The message stream to write the payload to.</param>
            <param name="encoding">The encoding to use for the payload.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="synchronous">true if the output should be written synchronously; false if it should be written asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.Flush">
            <summary>
            Synchronously flush the writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.FlushAsync">
            <summary>
            Asynchronously flush the writer.
            </summary>
            <returns>Task which represents the pending flush operation.</returns>
            <remarks>The method should not throw directly if the flush operation itself fails, it should instead return a faulted task.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.JsonWriter">
            <summary>
            Returns the <see cref="P:Microsoft.Data.OData.Json.ODataJsonOutputContextBase.JsonWriter"/> which is to be used to write the content of the message.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.ODataJsonReaderCoreUtils">
            <summary>
            Helper methods used by the OData reader for the Verbose JSON and JSON Light formats.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonReaderCoreUtils.ReadSpatialValue(Microsoft.Data.OData.Json.BufferingJsonReader,System.Boolean,Microsoft.Data.OData.ODataInputContext,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Boolean,System.Int32,System.String)">
            <summary>
            Try and parse spatial type from the json payload.
            </summary>
            <param name="jsonReader">The JSON reader to read from.</param>
            <param name="insideJsonObjectValue">true if the reader is positioned on the first property of the value which is a JSON Object 
                (or the second property if the first one was odata.type).</param>
            <param name="inputContext">The input context with all the settings.</param>
            <param name="expectedValueTypeReference">Expected edm property type.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="recursionDepth">The recursion depth to start with.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>An instance of the spatial type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonReaderCoreUtils.TryReadNullValue(Microsoft.Data.OData.Json.BufferingJsonReader,Microsoft.Data.OData.ODataInputContext,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.String)">
            <summary>
            Tries to read a null value from the JSON reader.
            </summary>
            <param name="jsonReader">The JSON reader to read from.</param>
            <param name="inputContext">The input context with all the settings.</param>
            <param name="expectedTypeReference">The expected type reference of the value.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>true if a null value could be read from the JSON reader; otherwise false.</returns>
            <remarks>If the method detects a null value it will read it (position the reader after the null value); 
            otherwise the reader does not move.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonReaderCoreUtils.ReadObjectValue(Microsoft.Data.OData.Json.JsonReader,System.Boolean,Microsoft.Data.OData.ODataInputContext,System.Int32)">
            <summary>
            Reads the json object value from the jsonReader
            </summary>
            <param name="jsonReader">Json reader to read payload from the wire.</param>
            <param name="insideJsonObjectValue">true if the reader is positioned on the first property of the value which is a JSON Object
            (or the second property if the first one was odata.type).</param>
            <param name="inputContext">The input context with all the settings.</param>
            <param name="recursionDepth">The recursion depth to start with.</param>
            <returns>an instance of IDictionary containing the spatial value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonReaderCoreUtils.ReadArrayValue(Microsoft.Data.OData.Json.JsonReader,Microsoft.Data.OData.ODataInputContext,System.Int32)">
            <summary>
            Read the json array from the reader.
            </summary>
            <param name="jsonReader">JsonReader instance.</param>
            <param name="inputContext">The input context with all the settings.</param>
            <param name="recursionDepth">The recursion depth to start with.</param>
            <returns>a list of json objects.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader">
            <summary>
            Reader for the JSON format that supports look-ahead and deduplicates properties.
            </summary>
            <remarks>
            This reader will buffer the entire object record whenever it finds the start of the object record.
            It then goes through all its properties and removes duplicates.
            It then reports the object record as if there were no duplicates in it.
            If there was a duplicate property it will be reported at the position the first occurence of the property was found
            but with the value of the last occurence.
            This is to implement WCF DS Server compatibility behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.#ctor(System.IO.TextReader,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">The text reader to read input characters from.</param>
            <param name="maxInnerErrorDepth">The maximum number of recursive internalexception objects to allow when reading in-stream errors.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.ProcessObjectValue">
            <summary>
            Called whenever we find a new object value in the payload.
            Removes duplicate properties in the current object record.
            </summary>
            <remarks>
            This method assumes that we are buffering and that the current buffered node is a StartObject.
            It then goes, buffers the entire object record (and all its children) and removes duplicate properties (using the WCF DS Server algorithm).
            It will remove duplicate properties on any objects in the subtree of the top-level object as well (behaves recursively).
            The method also checks for in-stream errors and throws if it finds one.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.ObjectRecordPropertyDeduplicationRecord">
            <summary>
            Private class used to store information necessary to deduplicate properties of a single JSON object record.
            </summary>
            <remarks>
            This class is a dictionary
            Key is the name of a property in the object record.
            Value is a list of property deduplication records in the order we find the properties in the payload.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.ObjectRecordPropertyDeduplicationRecord.CurrentPropertyRecord">
            <summary>
            Points to the property record which is currently being constructed.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.PropertyDeduplicationRecord">
            <summary>
            Private class used to store information necessary to deduplicate a single JSON property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.PropertyDeduplicationRecord.propertyNode">
            <summary>
            The node in the buffered nodes list which points to the property node
            which this deduplication record describes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.PropertyDeduplicationRecord.lastPropertyValueNode">
            <summary>
            The node in the buffered nodes list which points to the last node of the value of the property node
            this deduplication record describes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.PropertyDeduplicationRecord.#ctor(Microsoft.Data.OData.Json.BufferingJsonReader.BufferedNode)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyNode">The property node to create the record for.</param>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.PropertyDeduplicationRecord.PropertyNode">
            <summary>
            The node in the buffered nodes list which points to the property node
            which this deduplication record describes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.PropertyDeduplicatingJsonReader.PropertyDeduplicationRecord.LastPropertyValueNode">
            <summary>
            The node in the buffered nodes list which points to the last node of the value of the property node
            this deduplication record describes.
            </summary>
            <remarks>
            Observation: Even if the value itself is an object for which we will do the property deduplication and thus we will shuffle its nodes around,
            in that case the last value node will point to the end object node which will not change during the deduplication process.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataTypeAnnotation">
            <summary>
            Annotation which stores the EDM type information of a value.
            </summary>
            <remarks>
            This annotation will be used on ODataEntry, ODataComplexValue and ODataCollectionValue.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataTypeAnnotation.type">
            <summary>The EDM type of the value this annotation is on.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataTypeAnnotation.entitySet">
            <summary>The entity set of the value this annotation is on. Only applies to entity values.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataTypeAnnotation.#ctor(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates a new instance of the type annotation for an entity value.
            </summary>
            <param name="entitySet">The entity set the entity belongs to (required).</param>
            <param name="entityType">The entity type of the entity value if not the base type of the entity set (optional).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataTypeAnnotation.#ctor(Microsoft.Data.Edm.IEdmComplexTypeReference)">
            <summary>
            Creates a new instance of the type annotation for a complex value.
            </summary>
            <param name="complexType">The type of the complex value (required).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataTypeAnnotation.#ctor(Microsoft.Data.Edm.IEdmCollectionTypeReference)">
            <summary>
            Creates a new instance of the type annotation for a collection value.
            </summary>
            <param name="collectionType">The type of the collection value (required).</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataTypeAnnotation.Type">
            <summary>
            The EDM type of the value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataTypeAnnotation.EntitySet">
            <summary>
            The entity set the value belongs to (only applies to entity values).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEdmCollectionValue">
            <summary>
            An <see cref="T:Microsoft.Data.Edm.Values.IEdmCollectionValue"/> implementation of an OData collection value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEdmCollectionValue.collectionValue">
            <summary>
            The <see cref="T:Microsoft.Data.OData.ODataCollectionValue"/> to convert into an <see cref="T:Microsoft.Data.Edm.Values.IEdmCollectionValue"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEdmCollectionValue.#ctor(Microsoft.Data.OData.ODataCollectionValue)">
            <summary>
            Creates a new instance of an <see cref="T:Microsoft.Data.OData.Evaluation.ODataEdmCollectionValue"/>.
            </summary>
            <param name="collectionValue">The <see cref="T:Microsoft.Data.OData.ODataCollectionValue"/> to create the collection value for.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEdmCollectionValue.Elements">
            <summary>
            Gets the values stored in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEdmCollectionValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEdmNullValue">
            <summary>
            An <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> implementation of an OData entry or complex value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEdmNullValue.UntypedInstance">
            <summary>Static, un-typed <see cref="T:Microsoft.Data.Edm.Values.IEdmNullValue"/> instance for use in ODataLib.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEdmNullValue.#ctor(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates a new Edm null value with the specified type.
            </summary>
            <param name="type">The type of the null value (if available).</param>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEdmNullValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEdmValueUtils">
            <summary>
            Class with utility methods to deal with EDM values over OData OM instances.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEdmValueUtils.GetEdmPropertyValue(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmStructuredTypeReference)">
            <summary>
            Converts an <see cref="T:Microsoft.Data.OData.ODataProperty"/> into the corresponding <see cref="T:Microsoft.Data.Edm.Values.IEdmPropertyValue"/>.
            </summary>
            <param name="property">The non-null <see cref="T:Microsoft.Data.OData.ODataProperty"/> to convert.</param>
            <param name="declaringType">The declaring type of the property.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.Values.IEdmPropertyValue"/> implementation of the <paramref name="property"/> value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEdmValueUtils.ConvertValue(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Converts an OData value into the corresponding <see cref="T:Microsoft.Data.Edm.Values.IEdmDelayedValue"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="type">The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> of the value or null if no type reference is available.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.Values.IEdmDelayedValue"/> implementation of the <paramref name="value"/>.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Evaluation.ODataEdmStructuredValue">
            <summary>
            An <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> implementation of an OData entry or complex value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEdmStructuredValue.properties">
            <summary>Properties of an OData entry or complex value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Evaluation.ODataEdmStructuredValue.structuredType">
            <summary>The type of this structured value.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEdmStructuredValue.#ctor(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Creates a new Edm structured value from an OData entry.
            </summary>
            <param name="entry">The <see cref="T:Microsoft.Data.OData.ODataEntry"/> to create the structured value for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEdmStructuredValue.#ctor(Microsoft.Data.OData.ODataComplexValue)">
            <summary>
            Creates a new Edm structured value from an OData complex value.
            </summary>
            <param name="complexValue">The <see cref="T:Microsoft.Data.OData.ODataComplexValue"/> to create the structured value for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Evaluation.ODataEdmStructuredValue.FindPropertyValue(System.String)">
            <summary>
            Finds the value corresponding to the provided property name.
            </summary>
            <param name="propertyName">Property to find the value of.</param>
            <returns>The found property, or null if no property was found.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEdmStructuredValue.PropertyValues">
            <summary>
            Gets the property values of this structured value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Evaluation.ODataEdmStructuredValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState">
            <summary>
            Interface representing a state of the JSON reader for entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.Entry">
            <summary>
            The entry being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.EntityType">
            <summary>
            The entity type for the entry (if available)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.MetadataBuilder">
            <summary>
            The metadata builder instance for the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.AnyPropertyFound">
            <summary>
            Flag which indicates that during parsing of the entry represented by this state,
            any property which is not an instance annotation was found. This includes property annotations
            for property which is not present in the payload.
            </summary>
            <remarks>
            This is used to detect incorrect ordering of the payload (for example odata.id must not come after the first property).
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.FirstNavigationLinkInfo">
            <summary>
            If the reader finds a navigation link to report, but it must first report the parent entry
            it will store the navigation link info in this property. So this will only ever store the first navigation link of an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.DuplicatePropertyNamesChecker">
            <summary>
            The duplicate property names checker for the entry represented by the current state. May be null.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.SelectedProperties">
            <summary>
            The selected properties that should be expanded during template evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.NavigationPropertiesRead">
            <summary>
            The set of names of the navigation properties we have read so far while reading the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState.ProcessingMissingProjectedNavigationLinks">
            <summary>
            true if we have started processing missing projected navigation links, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionDeserializer">
            <summary>
            OData JsonLight deserializer for collections.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionDeserializer.duplicatePropertyNamesChecker">
            <summary>Cached duplicate property names checker to use if the items are complex values.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionDeserializer.ReadCollectionStart(Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference@)">
            <summary>
            Reads the start of a collection; this includes collection-level properties (e.g., the 'results' property) if the version permits it.
            </summary>
            <param name="collectionStartDuplicatePropertyNamesChecker">The duplicate property names checker used to keep track of the properties and annotations
            in the collection wrapper object.</param>
            <param name="isReadingNestedPayload">true if we are reading a nested collection inside a paramter payload; otherwise false.</param>
            <param name="expectedItemTypeReference">The expected item type reference or null if none is expected.</param>
            <param name="actualItemTypeReference">The validated actual item type reference (if specified in the payload) or the expected item type reference.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection-level information. Currently this is only the name of the collection in ATOM.</returns>
            <remarks>
            Pre-Condition:  Any:                      the start of a nested collection value; if this is not a 'StartArray' node this method will fail.
                            JsonNodeType.Property:    the first property of the collection wrapper object after the metadata URI.
                            JsonNodeType.EndObject:   when the collection wrapper object has no properties (other than the metadata URI).
            Post-Condition: JsonNodeType.StartArray:  the start of the array of the collection items.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionDeserializer.ReadCollectionItem(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator)">
            <summary>
            Reads an item in the collection.
            </summary>
            <param name="expectedItemTypeReference">The expected type of the item to read.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <returns>The value of the collection item that was read; this can be an ODataComplexValue, a primitive value or 'null'.</returns>
            <remarks>
            Pre-Condition:  The first node of the item in the collection
                            NOTE: this method will throw if the node is not
                            JsonNodeType.StartObject:    for a complex item
                            JsonNodeType.PrimitiveValue: for a primitive item
            Post-Condition: The reader is positioned on the first node of the next item or an EndArray node if there are no more items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionDeserializer.ReadCollectionEnd(System.Boolean)">
            <summary>
            Reads the end of a collection; this includes collection-level instance annotations.
            </summary>
            <param name="isReadingNestedPayload">true if we are reading a nested collection inside a paramter payload; otherwise false.</param>
            <remarks>
            Pre-Condition:  EndArray node:      End of the collection content array
            Post-Condition: EndOfInput:         All of the collection payload has been consumed.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader">
            <summary>
            OData collection reader for the JsonLight format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.jsonLightInputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.jsonLightCollectionDeserializer">
            <summary>The collection deserializer to use to read from the input.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The input to read the payload from.</param>
            <param name="expectedItemTypeReference">The expected type for the items in the collection.</param>
            <param name="listener">If not null, the reader will notify the implementer of the interface of relevant state changes in the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtStartImplementation">
            <summary>
            Implementation of the collection reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first node of the first item or the EndArray node of an empty item array
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtStartImplementationAsync">
            <summary>
            Implementation of the collection reader logic when in state 'Start'.
            </summary>
            <returns>Task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first node of the first item or the EndArray node of an empty item array
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtCollectionStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'CollectionStart'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  The first node of the first item in the collection or the EndArray node of the (empty) item array
                            NOTE: this method will throw if the node is not
                            JsonNodeType.EndArray:       for an empty item array of the collection
                            JsonNodeType.StartObject:    for a complex value as first item
                            JsonNodeType.PrimitiveValue: for a primitive value as first item
            Post-Condition: The reader is positioned on the first node of the second item or an EndArray node if there are no items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtCollectionStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'CollectionStart'.
            </summary>
            <returns>Task which returns true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  The first node of the first item in the collection or the EndArray node of the (empty) item array
                            NOTE: this method will throw if the node is not
                            JsonNodeType.EndArray:       for an empty item array of the collection
                            JsonNodeType.StartObject:    for a complex value as first item
                            JsonNodeType.PrimitiveValue: for a primitive value as first item
            Post-Condition: The reader is positioned on the first node of the second item or an EndArray node if there are no items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtValueImplementation">
            <summary>
            Implementation of the reader logic when in state 'Value'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  The first node of the next item in the collection or the EndArray node of the item array
                            NOTE: this method will throw if the node is not
                            JsonNodeType.EndArray:       for the end of the item array of the collection
                            JsonNodeType.StartObject:    for a complex item
                            JsonNodeType.PrimitiveValue: for a primitive item
            Post-Condition: The reader is positioned on the first node of the next item or an EndArray node if there are no items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtValueImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'Value'.
            </summary>
            <returns>Task which returns true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  The first node of the next item in the collection or the EndArray node of the item array
                            NOTE: this method will throw if the node is not
                            JsonNodeType.EndArray:       for the end of the item array of the collection
                            JsonNodeType.StartObject:    for a complex item
                            JsonNodeType.PrimitiveValue: for a primitive item
            Post-Condition: The reader is positioned on the first node of the next item or an EndArray node if there are no items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtCollectionEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'CollectionEnd'.
            </summary>
            <returns>false since no more nodes can be read from the reader after the collection ended.</returns>
            <remarks>
            Pre-Condition: JsonNodeType.EndArray        the end of the item array of the collection
            Post-Condition: JsonNodeType.EndOfInput     nothing else to read when not reading a nested payload
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtCollectionEndImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'CollectionEnd'.
            </summary>
            <returns>Task which should return false since no more nodes can be read from the reader after the collection ends.</returns>
            <remarks>
            Pre-Condition: JsonNodeType.EndArray        the end of the item array of the collection
            Post-Condition: JsonNodeType.EndOfInput     nothing else to read when not reading a nested payload
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtStartImplementationSynchronously(Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Implementation of the collection reader logic when in state 'Start'.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker for the top-level scope.</param>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first node of the first item or the EndArray node of an empty item array
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtCollectionStartImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'CollectionStart'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  The first node of the first item in the collection or the EndArray node of the (empty) item array
                            NOTE: this method will throw if the node is not
                            JsonNodeType.EndArray:       for an empty item array of the collection
                            JsonNodeType.StartObject:    for a complex value as first item
                            JsonNodeType.PrimitiveValue: for a primitive value as first item
            Post-Condition: The reader is positioned on the first node of the second item or an EndArray node if there are no items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtValueImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'Value'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  The first node of the next item in the collection or the EndArray node of the item array
                            NOTE: this method will throw if the node is not
                            JsonNodeType.EndArray:       for the end of the item array of the collection
                            JsonNodeType.StartObject:    for a complex item
                            JsonNodeType.PrimitiveValue: for a primitive item
            Post-Condition: The reader is positioned on the first node of the next item or an EndArray node if there are no items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionReader.ReadAtCollectionEndImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'CollectionEnd'.
            </summary>
            <returns>false since no more nodes can be read from the reader after the collection ended.</returns>
            <remarks>
            Pre-Condition: JsonNodeType.EndArray        the end of the item array of the collection
            Post-Condition: JsonNodeType.EndOfInput     nothing else to read when not reading a nested payload
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionSerializer">
            <summary>
            OData JsonLight serializer for collections.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionSerializer.writingTopLevelCollection">
            <summary>true when writing a top-level collection that requires the 'value' wrapper object; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionSerializer.metadataUriBuilder">
            <summary>The metadata uri builder to use.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionSerializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
            <param name="writingTopLevelCollection">true when writing a top-level collection that requires the 'value' wrapper object; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionSerializer.WriteCollectionStart(Microsoft.Data.OData.ODataCollectionStart,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes the start of a collection.
            </summary>
            <param name="collectionStart">The collection start to write.</param>
            <param name="itemTypeReference">The item type of the collection or null if no metadata is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionSerializer.WriteCollectionEnd">
            <summary>
            Writes the end of a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter">
            <summary>
            ODataCollectionWriter for the JsonLight format.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionWriterCore">
            <summary>
            Base class for OData collection writers that verifies a proper sequence of write calls on the writer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionWriter">
            <summary>
            Base class for OData collection writers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriter.WriteStart(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>Start writing a collection.</summary>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart" /> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriter.WriteStartAsync(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>Asynchronously start writing a collection.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart" /> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriter.WriteItem(System.Object)">
            <summary>Starts writing an entry.</summary>
            <param name="item">The collection item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriter.WriteItemAsync(System.Object)">
            <summary>Asynchronously start writing a collection item.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
            <param name="item">The collection item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriter.WriteEnd">
            <summary>Finishes writing a collection.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriter.WriteEndAsync">
            <summary>Asynchronously finish writing a collection.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriter.Flush">
            <summary>Flushes the write buffer to the underlying stream.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriter.FlushAsync">
            <summary>Flushes the write buffer to the underlying stream asynchronously.</summary>
            <returns>A task instance that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.IODataOutputInStreamErrorListener">
            <summary>
            An interface that allows the implementations of the writers to get notified if an in-stream error is to be written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataOutputInStreamErrorListener.OnInStreamError">
            <summary>
            This method notifies the listener, that an in-stream error is to be written.
            </summary>
            <remarks>
            This listener can choose to fail, if the currently written payload doesn't support in-stream error at this position.
            If the listener returns, the writer should not allow any more writing, since the in-stream error is the last thing in the payload.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.outputContext">
            <summary>The output context to write to.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.listener">
            <summary>If not null, the writer will notify the implementer of the interface of relevant state changes in the writer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.scopes">
            <summary>Stack of writer scopes to keep track of the current context of the writer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.expectedItemType">
            <summary>The expected type of the items in the collection or null if no expected item type exists.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.duplicatePropertyNamesChecker">
            <summary>Checker to detect duplicate property names on complex collection items.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.collectionValidator">
            <summary>The collection validator instance if no expected item type has been specified; otherwise null.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.#ctor(Microsoft.Data.OData.ODataOutputContext,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Constructor.
            </summary>
            <param name="outputContext">The output context to write to.</param>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.#ctor(Microsoft.Data.OData.ODataOutputContext,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="outputContext">The output context to write to.</param>
            <param name="expectedItemType">The type reference of the expected item type or null if no expected item type exists.</param>
            <param name="listener">If not null, the writer will notify the implementer of the interface of relevant state changes in the writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.Flush">
            <summary>
            Flushes the write buffer to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.FlushAsync">
            <summary>
            Asynchronously flushes the write buffer to the underlying stream.
            </summary>
            <returns>A task instance that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteStart(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>
            Start writing a collection.
            </summary>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteStartAsync(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>
            Asynchronously start writing a collection.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection.</param>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteItem(System.Object)">
            <summary>
            Write a collection item.
            </summary>
            <param name="item">The collection item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteItemAsync(System.Object)">
            <summary>
            Asynchronously start writing a collection item.
            </summary>
            <param name="item">The collection item to write.</param>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteEnd">
            <summary>
            Finish writing a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteEndAsync">
            <summary>
            Asynchronously finish writing a collection.
            </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.Microsoft#Data#OData#IODataOutputInStreamErrorListener#OnInStreamError">
            <summary>
            This method notifies the listener, that an in-stream error is to be written.
            </summary>
            <remarks>
            This listener can choose to fail, if the currently written payload doesn't support in-stream error at this position.
            If the listener returns, the writer should not allow any more writing, since the in-stream error is the last thing in the payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.IsErrorState(Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState)">
            <summary>
            Determines whether a given writer state is considered an error state.
            </summary>
            <param name="state">The writer state to check.</param>
            <returns>True if the writer state is an error state; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.StartCollection(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>
            Start writing a collection.
            </summary>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.EndCollection">
            <summary>
            Finish writing a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteCollectionItem(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a collection item (either primitive or complex)
            </summary>
            <param name="item">The collection item to write.</param>
            <param name="expectedItemTypeReference">The expected type of the collection item or null if no expected item type exists.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.VerifyCanWriteStart(System.Boolean,Microsoft.Data.OData.ODataCollectionStart)">
            <summary>
            Verifies that calling WriteStart is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteStartImplementation(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>
            Start writing a collection - implementation of the actual functionality.
            </summary>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.VerifyCanWriteItem(System.Boolean)">
            <summary>
            Verify that calling WriteItem is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteItemImplementation(System.Object)">
            <summary>
            Write a collection item - implementation of the actual functionality.
            </summary>
            <param name="item">The collection item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.VerifyCanWriteEnd(System.Boolean)">
            <summary>
            Verifies that calling WriteEnd is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.WriteEndImplementation">
            <summary>
            Finish writing a collection - implementation of the actual functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.VerifyCanFlush(System.Boolean)">
            <summary>
            Verifies that calling Flush is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.VerifyCallAllowed(System.Boolean)">
            <summary>
            Verifies that a call is allowed to the writer.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.StartPayloadInStartState">
            <summary>
            Checks whether we are currently writing the first top-level element; if so call StartPayload
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.InterceptException(System.Action)">
            <summary>
            Catch any exception thrown by the action passed in; in the exception case move the writer into
            state ExceptionThrown and then rethrow the exception.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.NotifyListener(Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState)">
            <summary>
            Notifies the implementer of the <see cref="T:Microsoft.Data.OData.IODataReaderWriterListener"/> interface of relevant state changes in the writer.
            </summary>
            <param name="newState">The new writer state.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.EnterScope(Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState,System.Object)">
            <summary>
            Enter a new writer scope; verifies that the transition from the current state into new state is valid
            and attaches the item to the new scope.
            </summary>
            <param name="newState">The writer state to transition into.</param>
            <param name="item">The item to associate with the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.LeaveScope">
            <summary>
            Leave the current writer scope and return to the previous scope. 
            When reaching the top-level replace the 'Started' scope with a 'Completed' scope.
            </summary>
            <remarks>Note that this method is never called once an error has been written or a fatal exception has been thrown.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.ReplaceScope(Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState,Microsoft.Data.OData.ODataItem)">
            <summary>
            Replaces the current scope with a new scope; checks that the transition is valid.
            </summary>
            <param name="newState">The new state to transition into.</param>
            <param name="item">The item associated with the new state.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.ValidateTransition(Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState)">
            <summary>
            Verify that the transition from the current state into new state is valid .
            </summary>
            <param name="newState">The new writer state to transition into.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionWriterCore.State">
            <summary>
            The current state of the writer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionWriterCore.DuplicatePropertyNamesChecker">
            <summary>Checker to detect duplicate property names on complex collection items.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionWriterCore.CollectionValidator">
            <summary>
            The collection validator instance.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionWriterCore.ItemTypeReference">
            <summary>
            The item type of the collection being written or null if no metadata is available.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState">
            <summary>
            An enumeration representing the current state of the writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState.Start">
            <summary>The writer is at the start; nothing has been written yet.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState.Collection">
            <summary>
            The writer has started writing and is writing the wrapper elements for the 
            collection items (if any). No or all items have been written.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState.Item">
            <summary>The writer is in a state where collection items can be written.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState.Completed">
            <summary>The writer has completed; nothing can be written anymore.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState.Error">
            <summary>Writer has written an error; nothing can be written anymore.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionWriterCore.Scope">
            <summary>
            A writer scope; keeping track of the current writer state and an item associated with this state.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.Scope.state">
            <summary>The writer state of this scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionWriterCore.Scope.item">
            <summary>The item attached to this scope.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataCollectionWriterCore.Scope.#ctor(Microsoft.Data.OData.ODataCollectionWriterCore.CollectionWriterState,System.Object)">
            <summary>
            Constructor creating a new writer scope.
            </summary>
            <param name="state">The writer state of this scope.</param>
            <param name="item">The item attached to this scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionWriterCore.Scope.State">
            <summary>
            The writer state of this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionWriterCore.Scope.Item">
            <summary>
            The item attached to this scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.jsonLightOutputContext">
            <summary>
            The output context to write to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.jsonLightCollectionSerializer">
            <summary>
            The JsonLight collection serializer to use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Constructor for creating a collection writer to use when writing operation result payloads.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor for creating a collection writer to use when writing parameter payloads.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
            <param name="expectedItemType">The type reference of the expected item type or null if no expected item type exists.</param>
            <param name="listener">If not null, the writer will notify the implementer of the interface of relevant state changes in the writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.StartCollection(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>
            Start writing a collection.
            </summary>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.EndCollection">
            <summary>
            Finish writing a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightCollectionWriter.WriteCollectionItem(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a collection item (either primitive or complex)
            </summary>
            <param name="item">The collection item to write.</param>
            <param name="expectedItemType">The expected type of the collection item or null if no expected item type exists.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer">
            <summary>
            OData JsonLight deserializer for entity reference links.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLinks(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLinksAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>A task which returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLink(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads a top-level entity reference link - implementation of the actual functionality.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLinkAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads a top-level entity reference link - implementation of the actual functionality.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>A task which returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLinksImplementation(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use for the top-level scope.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLinkImplementation(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads a top-level entity reference link - implementation of the actual functionality.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use for the top-level scope.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLinksAnnotations(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean)">
            <summary>
            Reads the entity reference link instance annotations.
            </summary>
            <param name="links">The <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> to read the annotations for.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker for the entity reference links scope.</param>
            <param name="forLinksStart">true when parsing the instance annotations before the 'value' property; 
            false when parsing the instance annotations after the 'value' property.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.Property               The first property in the payload (or the first property after the metadata URI in responses)
                            JsonNodeType.EndObject              The end of the entity reference links object
            Post-Condition: JsonNodeType.EndObject              When the end of the entity reference links object is reached
                            Any                                 The first node of the value of the 'url' property (if found)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLinksNextLinkAnnotationValue(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary>
            Reads the odata.nextlink value of an entity reference links nextlink annotation.
            </summary>
            <param name="links">The entity reference links to read the next link value for; the value of the nextlink will be assigned to this instance.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue         The value of the instance annotation
            Post-Condition: JsonNodeType.EndObject              The end of the entity reference links object
                            JsonNodeType.Property               The next property after the instance annotation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceCountAnnotationValue(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary>
            Reads the value of an entity reference links count annotation.
            </summary>
            <param name="links">The entity reference links to read the count value for; the value of the count will be assigned to this instance.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue         The value of the instance annotation
            Post-Condition: JsonNodeType.EndObject              The end of the entity reference links object
                            JsonNodeType.Property               The next property after the instance annotation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkDeserializer.ReadSingleEntityReferenceLink(Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean)">
            <summary>
            Read an entity reference link.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to check for duplicate properties and 
            duplicate annotations; this is a separate instance per entity reference link.</param>
            <param name="topLevel">true if we are reading a singleton entity reference link at the top level; false if we are reading 
            an entity reference link as part of a collection of entity reference links.</param>
            <returns>An instance of <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> which was read.</returns>
            <remarks>
            Pre-Condition:  StartObject     when the entity reference link is part of a collection
                            Property        the first property in the entity reference link (for a top-level link)
                            EndObject       the end object node of an entity reference link (for a top-level link)
            Post-Condition: EndInput        for a top-level object
                            EndArray        for the last link in a collection of links
                            Any             for the first node of the next link in a collection of links
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer">
            <summary>
            OData JsonLight serializer for entity reference links.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer.metadataUriBuilder">
            <summary>The metadata uri builder to use.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a single top-level Uri in response to a $links query.
            </summary>
            <param name="link">The entity reference link to write out.</param>
            <param name="entitySet">The entity set of the navigation property</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a set of links (Uris) in response to a $links query; includes optional count and next-page-link information.
            </summary>
            <param name="entityReferenceLinks">The set of entity reference links to write out.</param>
            <param name="entitySet">The entity set of the navigation property</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer.WriteEntityReferenceLinkImplementation(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Boolean)">
            <summary>
            Writes a single Uri in response to a $links query.
            </summary>
            <param name="entityReferenceLink">The entity reference link to write out.</param>
            <param name="entitySet">The entity set of the navigation property</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <param name="isTopLevel">true if the entity reference link being written is at the top level of the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer.WriteEntityReferenceLinksImplementation(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a set of links (Uris) in response to a $links query; includes optional count and next-page-link information.
            </summary>
            <param name="entityReferenceLinks">The set of entity reference links to write out.</param>
            <param name="entitySet">The entity set of the navigation property</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer.WriteNextLinkAnnotation(System.Uri)">
            <summary>
            Writes the next link property, which consists of the property name and value.
            </summary>
            <param name="nextPageLink">The non-null value of the next link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntityReferenceLinkSerializer.WriteCountAnnotation(System.Int64)">
            <summary>
            Writes the odata.count property, which consists of the property name and value.
            </summary>
            <param name="countValue">The value of the count property to write.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer">
            <summary>
            OData JsonLight deserializer for entries and feeds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.annotationGroupDeserializer">
            <summary>The annotation group deserializer for reading annotation groups.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadFeedContentStart">
            <summary>
            Reads the start of the JSON array for the content of the feed.
            </summary>
            <remarks>
            Pre-Condition:  JsonNodeType.StartArray:    The start of the feed property array; this method will fail if the node is anything else.
            Post-Condition: JsonNodeType.StartObject:   The first item in the feed
                            JsonNodeType.EndArray:      The end of the feed
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadFeedContentEnd">
            <summary>
            Reads the end of the array containing the feed content.
            </summary>
            <remarks>
            Pre-Condition:  JsonNodeType.EndArray
            Post-Condition: JsonNodeType.Property   if the feed is part of an expanded navigation link and there are more properties in the object
                            JsonNodeType.EndObject  if the feed is a top-level feed or the expanded navigation link is the last property of the payload
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntryTypeName(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState)">
            <summary>
            Reads the entry type name annotation (odata.type)
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.Property          The first property after the odata.metadata in the entry object.
                            JsonNodeType.EndObject         End of the entry object.
            Post-Condition: JsonNodeType.Property          The property after the odata.type (if there was any), or the property on which the method was called.
                            JsonNodeType.EndObject         End of the entry object.
                            
            This method fills the ODataEntry.TypeName property if the type name is found in the payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntryContent(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState)">
            <summary>
            Reads the content of an entry until a navigation link is detected.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <returns>A reader navigation link info representing the navigation link detected while reading the entry contents; null if no navigation link was detected.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property               The property to read
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            Post-Condition: JsonNodeType.EndObject              If no (more) properties exist in the entry's content
                            JsonNodeType.Property               If we've read a deferred link (this is the property after the deferred link)
                            JsonNodeType.StartObject            Expanded entry
                            JsonNodeType.StartArray             Expanded feed
                            JsonNodeType.PrimitiveValue (null)  Expanded null
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ValidateEntryMetadata(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState)">
            <summary>
            Validates entry metadata.
            </summary>
            <param name="entryState">The entry state to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadTopLevelFeedAnnotations(Microsoft.Data.OData.ODataFeed,Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.Boolean,System.Boolean)">
            <summary>
            Reads the feed instance annotations for a top-level feed.
            </summary>
            <param name="feed">The <see cref="T:Microsoft.Data.OData.ODataFeed"/> to read the instance annotations for.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker for the top-level scope.</param>
            <param name="forFeedStart">true when parsing the instance annotations before the feed property; 
            false when parsing the instance annotations after the feed property.</param>
            <param name="readAllFeedProperties">true if we should scan ahead for the annotations and ignore the actual data properties (used with
            the reordering reader); otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntryPropertyAnnotationValue(System.String)">
            <summary>
            Reads a value of property annotation on the entry level.
            </summary>
            <param name="propertyAnnotationName">The name of the property annotation to read.</param>
            <returns>The value of the property annotation.</returns>
            <remarks>
            This method should read the property annotation value and return a representation of the value which will be later
            consumed by the entry reading code.
            
            Pre-Condition:  JsonNodeType.PrimitiveValue         The value of the property annotation property
                            JsonNodeType.StartObject
                            JsonNodeType.StartArray
            Post-Condition: JsonNodeType.EndObject              The end of the entry object
                            JsonNodeType.Property               The next property after the property annotation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ApplyAnnotationGroupIfPresent(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState)">
            <summary>
            Reads an annotation group if one exists, and updates the given entry with the annotations from the annotation group.
            </summary>
            <param name="entryState">The state for the entry which should get the annotations.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntryInstanceAnnotation(System.String,System.Boolean,System.Boolean,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads instance annotation in the entry object.
            </summary>
            <param name="annotationName">The name of the instance annotation found.</param>
            <param name="anyPropertyFound">true if a non-annotation property has already been encountered.</param>
            <param name="typeAnnotationFound">true if the 'odata.type' annotation has already been encountered, or should have been by now.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker for the entry being read.</param>
            <returns>The value of the annotation.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue         The value of the instance annotation property
                            JsonNodeType.StartObject
                            JsonNodeType.StartArray
            Post-Condition: JsonNodeType.EndObject              The end of the entry object
                            JsonNodeType.Property               The next property after the instance annotation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ApplyEntryInstanceAnnotation(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String,System.Object)">
            <summary>
            Reads instance annotation in the entry object.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="annotationName">The name of the instance annotation found.</param>
            <param name="annotationValue">The value of the annotation.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue         The value of the instance annotation property
                            JsonNodeType.StartObject
                            JsonNodeType.StartArray
            Post-Condition: JsonNodeType.EndObject              The end of the entry object
                            JsonNodeType.Property               The next property after the instance annotation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadCustomInstanceAnnotationValue(Microsoft.Data.OData.DuplicatePropertyNamesChecker,System.String)">
            <summary>
            Reads the value of the instance annotation.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker instance.</param>
            <param name="name">The name of the instance annotation.</param>
            <returns>Returns the value of the instance annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadAndApplyFeedInstanceAnnotationValue(System.String,Microsoft.Data.OData.ODataFeed,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads the value of a feed annotation (count or next link).
            </summary>
            <param name="annotationName">The name of the annotation found.</param>
            <param name="feed">The feed to read the annotation for; if non-null, the annotation value will be assigned to the feed.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker instance.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue         The value of the annotation
            Post-Condition: JsonNodeType.EndObject              The end of the feed object
                            JsonNodeType.Property               The next annotation after the current annotation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntryPropertyWithoutValue(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String)">
            <summary>
            Reads entry property which doesn't have value, just annotations.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="propertyName">The name of the property read.</param>
            <returns>A reader navigation link info representing the navigation link detected while reading the entry contents; null if no navigation link was detected.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject              The end of the entry object.
                            JsonNodeType.Property               The property after the one we're to read.
            Post-Condition: JsonNodeType.EndObject              This method doesn't move the reader.
                            JsonNodeType.Property               
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadNextLinkAnnotationAtFeedEnd(Microsoft.Data.OData.ODataFeed,Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads any next link annotation immediately after the end of a feed.
            </summary>
            <param name="feed">The feed being read.</param>
            <param name="expandedNavigationLinkInfo">The information about the expanded link. This must be non-null if we're reading an expanded feed, and must be null if we're reading a top-level feed.</param>
            <param name="duplicatePropertyNamesChecker">The top-level duplicate property names checker, if we're reading a top-level feed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadDeferredNavigationLink(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads the information of a deferred link.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="navigationPropertyName">The name of the navigation property for which to read the deferred link.</param>
            <param name="navigationProperty">The navigation property for which to read the deferred link. This can be null.</param>
            <returns>Returns the navigation link info for the deferred navigation link read.</returns>
            <remarks>
            This method doesn't move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadExpandedEntryNavigationLink(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads expanded entry navigation link.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="navigationProperty">The navigation property for which to read the expanded link.</param>
            <returns>The navigation link info for the expanded link read.</returns>
            <remarks>
            This method doesn't move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadExpandedFeedNavigationLink(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads expanded feed navigation link.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="navigationProperty">The navigation property for which to read the expanded link.</param>
            <returns>The navigation link info for the expanded link read.</returns>
            <remarks>
            This method doesn't move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntityReferenceLinkForSingletonNavigationLinkInRequest(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,Microsoft.Data.Edm.IEdmNavigationProperty,System.Boolean)">
            <summary>
            Reads entity reference link for a singleton navigation link in request.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <param name="isExpanded">true if the navigation link is expanded.</param>
            <returns>The navigation link info for the entity reference link read.</returns>
            <remarks>
            This method doesn't move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntityReferenceLinksForCollectionNavigationLinkInRequest(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,Microsoft.Data.Edm.IEdmNavigationProperty,System.Boolean)">
            <summary>
            Reads entity reference links for a collection navigation link in request.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <param name="isExpanded">true if the navigation link is expanded.</param>
            <returns>The navigation link info for the entity reference links read.</returns>
            <remarks>
            This method doesn't move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.AddEntryProperty(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String,System.Object)">
            <summary>
            Adds a new property to an entry.
            </summary>
            <param name="entryState">The entry state for the entry to add the property to.</param>
            <param name="propertyName">The name of the property to add.</param>
            <param name="propertyValue">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadExpandedFeedAnnotationsAtFeedEnd(Microsoft.Data.OData.ODataFeed,Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo)">
            <summary>
            Checks if there is a next link annotation immediately after an expanded feed, and reads and stores it if there is one. 
            We fail here if we encounter any other property annotation for the expanded navigation (since these should come before the property itself).
            </summary>
            <param name="feed">The feed that was just read.</param>
            <param name="expandedNavigationLinkInfo">The information for the current expanded navigation link being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ApplyAnnotationGroup(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,Microsoft.Data.OData.ODataJsonLightAnnotationGroup)">
            <summary>
            Applies the all the annotations from the given annotation group to an entry.
            </summary>
            <param name="entryState">The state for the entry which should get the annotations.</param>
            <param name="annotationGroup">The annotation group to apply.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.SetEntryMediaResource(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,Microsoft.Data.OData.ODataStreamReferenceValue)">
            <summary>
            Sets specified media resource on an entry and hooks up metadata builder.
            </summary>
            <param name="entryState">The entry state to use.</param>
            <param name="mediaResource">The media resource to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntryPropertyWithValue(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String)">
            <summary>
            Reads entry property (which is neither instance nor property annotation) which has a value.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="propertyName">The name of the property read.</param>
            <returns>A reader navigation link info representing the navigation link detected while reading the entry contents; null if no navigation link was detected.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue         The value of the property
                            JsonNodeType.StartObject
                            JsonNodeType.StartArray
            Post-Condition: JsonNodeType.EndObject              The end of the entry object
                            JsonNodeType.Property               The next property after the property
                            JsonNodeType.StartObject            Expanded entry
                            JsonNodeType.StartArray             Expanded feed
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadEntryDataProperty(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,Microsoft.Data.Edm.IEdmProperty,System.String)">
            <summary>
            Read an entry-level data property and check its version compliance. 
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="edmProperty">The EDM property of the property being read, or null if the property is an open property.</param>
            <param name="propertyTypeName">The type name specified for the property in property annotation, or null if no such type name is available.</param>
            <remarks>
            Pre-Condition:  The reader is positioned on the first node of the property value
            Post-Condition: JsonNodeType.Property:    the next property of the entry
                            JsonNodeType.EndObject:   the end-object node of the entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadOpenProperty(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String,System.Boolean)">
            <summary>
            Read an open property.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="propertyName">The name of the open property to read.</param>
            <param name="propertyWithValue">true if the property has a value, false if it doesn't.</param>
            <remarks>
            Pre-Condition:  The reader is positioned on the first node of the property value
            Post-Condition: JsonNodeType.Property:    the next property of the entry
                            JsonNodeType.EndObject:   the end-object node of the entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadUndeclaredProperty(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String,System.Boolean)">
            <summary>
            Read an undeclared property. That is a property which is not declared by the model, but the owning type is not an open type.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="propertyName">The name of the open property to read.</param>
            <param name="propertyWithValue">true if the property has a value, false if it doesn't.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue:  propertyWithValue is true and the reader is positioned on the first node of the property value.
                            JsonNodeType.StartObject:
                            JsonNodeType.StartArray:
                            JsonNodeType.Property:        propertyWithValue is false and the reader is positioned on the node after the property.
                            JsonNodeType.EndObject:
            Post-Condition: JsonNodeType.Property:    the next property of the entry
                            JsonNodeType.EndObject:   the end-object node of the entry
            </remarks>
            <returns>A navigation link info instance if the propery read is a navigation link which should be reported to the caller.
            Otherwise null if the property was either ignored or read and added to the list of properties on the entry.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadStreamPropertyValue(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String)">
            <summary>
            Reads a stream property value from the property annotations.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="streamPropertyName">The name of the stream property to read the value for.</param>
            <returns>The newly created stream reference value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadSingleOperationValue(Microsoft.Data.OData.Json.IODataJsonOperationsDeserializerContext,Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String,System.Boolean)">
            <summary>
            Reads one operation for the entry being read.
            </summary>
            <param name="readerContext">The Json operation deserializer context.</param>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="metadataReferencePropertyName">The name of the metadata reference property being read.</param>
            <param name="insideArray">true if the operation value is inside an array, i.e. multiple targets for the operation; false otherwise.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject:   first node of the operation value.
            Post-Condition: JsonNodeType.Property:      the property after the current operation being read when there is one target for the operation.
                            JsonNodeType.StartObject:   the first node of the next operation value when there are multiple targets for the operation.
                            JsonNodeType.EndArray:      the end-array of the operation values when there are multiple target for the operation.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.SetMetadataBuilder(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,Microsoft.Data.OData.ODataOperation)">
            <summary>
            Sets the metadata builder for the operation.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="operation">The operation to set the metadata builder on.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.CreateODataOperationAndAddToEntry(Microsoft.Data.OData.Json.IODataJsonOperationsDeserializerContext,Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String)">
            <summary>
            Creates a new instance of ODataAction or ODataFunction for the <paramref name="metadataReferencePropertyName"/>.
            </summary>
            <param name="readerContext">The Json operation deserializer context.</param>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="metadataReferencePropertyName">The name of the metadata reference property being read.</param>
            <returns>A new instance of ODataAction or ODataFunction for the <paramref name="metadataReferencePropertyName"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ReadMetadataReferencePropertyValue(Microsoft.Data.OData.JsonLight.IODataJsonLightReaderEntryState,System.String)">
            <summary>
            Read the metadata reference property value for the entry being read.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="metadataReferencePropertyName">The name of the metadata reference property being read.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.Property:      first node of the metadata reference property's value. Currently 
                                                        actions and functions are the only supported metadata reference property,
                                                        we will throw if this is not a start object or start array node.
            Post-Condition: JsonNodeType.Property:      the property after the annotation value
                            JsonNodeType.EndObject:     the end-object of the entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ValidateCanReadMetadataReferenceProperty">
            <summary>
            Validates that we can read metadata reference property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.ValidateExpandedNavigationLinkPropertyValue(System.Nullable{System.Boolean})">
            <summary>
            Validates that the value of a JSON property can represent expanded navigation link.
            </summary>
            <param name="isCollection">true if the property is entity set reference property; false for a resource reference property, null if unknown.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.OperationsDeserializerContext">
            <summary>
            Operations deserializer context to pass to JSON operations reader.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.OperationsDeserializerContext.entry">
            <summary>
            The entry to add operations to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.OperationsDeserializerContext.jsonLightEntryAndFeedDeserializer">
            <summary>
            The deserializer to use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.OperationsDeserializerContext.#ctor(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer)">
            <summary>
            Constructor.
            </summary>
            <param name="entry">The entry to add operations to.</param>
            <param name="jsonLightEntryAndFeedDeserializer">The deserializer to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.OperationsDeserializerContext.ProcessUriFromPayload(System.String)">
            <summary>
            Given a URI from the payload, this method will try to make it absolute, or fail otherwise.
            </summary>
            <param name="uriFromPayload">The URI string from the payload to process.</param>
            <returns>An absolute URI to report.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.OperationsDeserializerContext.AddActionToEntry(Microsoft.Data.OData.ODataAction)">
            <summary>
            Adds the specified action to the current entry.
            </summary>
            <param name="action">The action whcih is fully populated with the data from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.OperationsDeserializerContext.AddFunctionToEntry(Microsoft.Data.OData.ODataFunction)">
            <summary>
            Adds the specified function to the current entry.
            </summary>
            <param name="function">The function whcih is fully populated with the data from the payload.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedDeserializer.OperationsDeserializerContext.JsonReader">
            <summary>
            The JSON reader to read the operations value from.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer">
            <summary>
            OData JsonLight serializer for entries and feeds.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer">
            <summary>
            OData JsonLight serializer for properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.jsonLightValueSerializer">
            <summary>
            Serializer to use to write property values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.WriteTopLevelProperty(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Write an <see cref="T:Microsoft.Data.OData.ODataProperty"/> to the given stream. This method creates an
            async buffered stream and writes the property to it.
            </summary>
            <param name="property">The property to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.WriteProperties(Microsoft.Data.Edm.IEdmStructuredType,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty},System.Boolean,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Writes property names and value pairs.
            </summary>
            <param name="owningType">The <see cref="T:Microsoft.Data.Edm.IEdmStructuredType"/> of the entry (or null if not metadata is available).</param>
            <param name="properties">The enumeration of properties to write out.</param>
            <param name="isComplexValue">
            Whether the properties are being written for complex value. Also used for detecting whether stream properties
            are allowed as named stream properties should only be defined on ODataEntry instances
            </param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.IsOpenPropertyType(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Test to see if <paramref name="property"/> is an open property or not.
            </summary>
            <param name="property">The property in question.</param>
            <param name="owningType">The owning type of the property.</param>
            <param name="edmProperty">The metadata of the property.</param>
            <returns>true if the property is an open property; false if it is not, or if openness cannot be determined</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.WriteProperty(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmStructuredType,System.Boolean,System.Boolean,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Writes a name/value pair for a property.
            </summary>
            <param name="property">The property to write out.</param>
            <param name="owningType">The owning type for the <paramref name="property"/> or null if no metadata is available.</param>
            <param name="isTopLevel">true when writing a top-level property; false for nested properties.</param>
            <param name="allowStreamProperty">Should pass in true if we are writing a property of an ODataEntry instance, false otherwise.
            Named stream properties should only be defined on ODataEntry instances.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.WriteStreamReferenceProperty(System.String,Microsoft.Data.OData.ODataStreamReferenceValue)">
            <summary>
            Writes a stream property.
            </summary>
            <param name="propertyName">The name of the property to write.</param>
            <param name="streamReferenceValue">The stream reference value to be written</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.WritePropertyTypeName(System.String,System.String,System.Boolean)">
            <summary>
            Writes the type name on the wire.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="typeNameToWrite">Type name of the property.</param>
            <param name="isTopLevel">true when writing a top-level property; false for nested properties.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightPropertySerializer.JsonLightValueSerializer">
            <summary>
            Gets the json light value writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.annotationGroups">
            <summary>A map from annotation group name to annotation group for all annotation groups
            encountered so far in this payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.metadataUriBuilder">
            <summary>The metadata uri builder to use.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteAnnotationGroup(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Writes an annotation group declaration or annotation group reference if specified for the entry.
            </summary>
            <param name="entry">The entry to write the annotation group declaration or reference for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteEntryStartMetadataProperties(Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState)">
            <summary>
            Writes the metadata properties for an entry which can only occur at the start.
            </summary>
            <param name="entryState">The entry state for which to write the metadata properties.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteEntryMetadataProperties(Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState)">
            <summary>
            Writes the metadata properties for an entry which can occur both at the start or at the end.
            </summary>
            <param name="entryState">The entry state for which to write the metadata properties.</param>
            <remarks>
            This method will only write properties which were not written yet.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteEntryEndMetadataProperties(Microsoft.Data.OData.JsonLight.IODataJsonLightWriterEntryState,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Writes the metadata properties for an entry which can only occur at the end.
            </summary>
            <param name="entryState">The entry state for which to write the metadata properties.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate names checker for properties of this entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteNavigationLinkMetadata(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Writes the navigation link metadata.
            </summary>
            <param name="navigationLink">The navigation link to write the metadata for.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteOperations(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataOperation},System.Boolean)">
            <summary>
            Writes "actions" or "functions" metadata.
            </summary>
            <param name="operations">The operations to write.</param>
            <param name="isAction">true when writing the entry's actions; false when writing the entry's functions.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.TryWriteEntryMetadataUri(Microsoft.Data.OData.ODataFeedAndEntryTypeContext)">
            <summary>
            Tries to writes the metadata URI property for an entry into the payload if one is available.
            </summary>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.TryWriteFeedMetadataUri(Microsoft.Data.OData.ODataFeedAndEntryTypeContext)">
            <summary>
            Tries to writes the metadata URI property for a feed into the payload if one is available.
            </summary>
            <param name="typeContext">The context object to answer basic questions regarding the type of the feed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteAssociationLink(System.String,System.Uri)">
            <summary>
            Writes an association link property annotation.
            </summary>
            <param name="propertyName">The name of the navigation property for which to write the association link.</param>
            <param name="associationLinkUrl">The association link URL to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.GetOperationMetadataString(Microsoft.Data.OData.ODataOperation)">
            <summary>
            Gets the metadata reference fragment from the operation metadata uri.
            i.e. if the operation metadata uri is {absolute metadata document uri}#{container-qualified-operation-name},
            this method will return #{container-qualified-operation-name}.
            </summary>
            <param name="operation">Operation in question.</param>
            <returns>The metadata reference fragment from the operation metadata uri.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.GetOperationTargetUriString(Microsoft.Data.OData.ODataOperation)">
            <summary>
            Returns the target uri string from the given operation.
            </summary>
            <param name="operation">Operation in question.</param>
            <returns>Returns the target uri string from the given operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.ValidateOperationMetadataGroup(System.Linq.IGrouping{System.String,Microsoft.Data.OData.ODataOperation})">
            <summary>
            Validates a group of operations with the same Metadata Uri.
            </summary>
            <param name="operations">Operations to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteOperationMetadataGroup(System.Linq.IGrouping{System.String,Microsoft.Data.OData.ODataOperation})">
            <summary>
            Writes a group of operation (all actions or all functions) that have the same "metadata".
            </summary>
            <remarks>
            Expects the actions or functions scope to already be open.
            </remarks>
            <param name="operations">A grouping of operations that are all actions or all functions and share the same "metadata".</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.WriteOperation(Microsoft.Data.OData.ODataOperation)">
            <summary>
            Writes an operation (an action or a function).
            </summary>
            <remarks>
            Expects the write to already have written the "rel value" and opened an array.
            </remarks>
            <param name="operation">The operation to write.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightEntryAndFeedSerializer.MetadataDocumentBaseUri">
            <summary>
            Gets the base Uri of the metadata document uri, if it has been set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer">
            <summary>
            OData JsonLight deserializer for errors.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadTopLevelError">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None       - The reader must not have been used yet.
            Post-Condition: JsonNodeType.EndOfInput
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadTopLevelErrorAsync">
            <summary>
            Read a top-level error.
            </summary>
            <returns>A task which returns an <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None       - The reader must not have been used yet.
            Post-Condition: JsonNodeType.EndOfInput
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadTopLevelErrorImplementation">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property       - The first property of the top level object.
                            JsonNodeType.EndObject      - If there are no properties in the top level object.
                            any                         - Will throw if anything else.
            Post-Condition: JsonNodeType.EndOfInput
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadJsonObjectInErrorPayload(System.Action{System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker})">
            <summary>
            Reads all the properties in a single JSON object scope, calling <paramref name="readPropertyWithValue"/> for each non-annotation property encountered.
            </summary>
            <param name="readPropertyWithValue">
            An action which takes the name of the current property and processes the property value as necessary.
            At the start of this action, the reader is positioned at the property value node.
            The action should leave the reader positioned on the node after the property value.
            </param>
            <remarks>
            
            This method should only be used for scopes where we allow (and ignore) annotations in a custom namespace, i.e. scopes which directly correspond to a class in the OM.
            
            Pre-Condition:  JsonNodeType.StartObject    - The start of the JSON object being processed.
                            any                         - Will throw if not StartObject.
            Post-Condition: any                         - The node after the EndObject node for the JSON object being processed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadErrorPropertyAnnotationValue(System.String)">
            <summary>
            Reads a value of property annotation on an error payload.
            </summary>
            <param name="propertyAnnotationName">The name of the property annotation to read.</param>
            <returns>The value of the property annotation.</returns>
            <remarks>
            This method should read the property annotation value and return a representation of the value which will be later
            consumed by the entry reading code, or throw if ther is something unexpected.
            
            Pre-Condition:  JsonNodeType.PrimitiveValue         The value of the property annotation property
                            JsonNodeType.StartObject
                            JsonNodeType.StartArray
            Post-Condition: JsonNodeType.EndObject              The end of the error object
                            JsonNodeType.Property               The next property after the property annotation
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadODataErrorObject(Microsoft.Data.OData.ODataError)">
            <summary>
            Reads the JSON object which is the value of the "odata.error" property.
            </summary>
            <param name="error">The <see cref="T:Microsoft.Data.OData.ODataError"/> object to update with data from the payload.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject    - The start of the "odata.error" object.
                            any                         - Will throw if not StartObject.
            Post-Condition: any                         - The node after the "odata.error" object's EndNode.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadErrorMessageObject(Microsoft.Data.OData.ODataError)">
            <summary>
            Reads the JSON object which is the value of the "message" property.
            </summary>
            <param name="error">The <see cref="T:Microsoft.Data.OData.ODataError"/> object to update with data from the payload.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject    - The start of the "message" object.
                            any                         - Will throw if not StartObject.
            Post-Condition: any                         - The node after the "message" object's EndNode.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadInnerError(System.Int32)">
            <summary>
            Reads an inner error payload.
            </summary>
            <param name="recursionDepth">The number of times this method has been called recursively.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataInnerError"/> representing the read inner error.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject    - The start of the "innererror" object.
                            any                         - will throw if not StartObject.
            Post-Condition: any                         - The node after the "innererror" object's EndNode.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadPropertyValueInInnerError(System.Int32,Microsoft.Data.OData.ODataInnerError,System.String)">
            <summary>
            Reads a property value which occurs in the "innererror" object scope.
            </summary>
            <param name="recursionDepth">The number of parent inner errors for this inner error.</param>
            <param name="innerError">The <see cref="T:Microsoft.Data.OData.ODataError"/> object to update with the data from this property value.</param>
            <param name="propertyName">The name of the property whose value is to be read.</param>
            <remarks>
            Pre-Condition:  any                         - The value of the property being read.
            Post-Condition: JsonNodeType.Property       - The property after the one being read.
                            JsonNodeType.EndObject      - The end of the "innererror" object.
                            any                         - Anything else after the property value is an invalid payload (but won't fail in this method).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadPropertyValueInODataErrorObject(Microsoft.Data.OData.ODataError,System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads a property value which occurs in the "odata.error" object scope.
            </summary>
            <param name="error">The <see cref="T:Microsoft.Data.OData.ODataError"/> object to update with the data from this property value.</param>
            <param name="propertyName">The name of the property whose value is to be read.</param>
            <param name="duplicationPropertyNameChecker">DuplicatePropertyNamesChecker to use for extracting property annotations
            targetting any custom instance annotations on the error.</param>
            <remarks>
            Pre-Condition:  any                         - The value of the property being read.
            Post-Condition: JsonNodeType.Property       - The property after the one being read.
                            JsonNodeType.EndObject      - The end of the "odata.error" object.
                            any                         - Anything else after the property value is an invalid payload (but won't fail in this method).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightErrorDeserializer.ReadPropertyValueInMessageObject(Microsoft.Data.OData.ODataError,System.String)">
            <summary>
            Reads a property value which occurs in the "message" object scope. 
            </summary>
            <param name="error">The <see cref="T:Microsoft.Data.OData.ODataError"/> object to update with the data from this property value.</param>
            <param name="propertyName">The name of the propety whose value is to be read.</param>
            <remarks>
            Pre-Condition:  any                         - The value of the property being read.
            Post-Condition: JsonNodeType.Property       - The property after the one being read.
                            JsonNodeType.EndObject      - The end of the "message" object.
                            any                         - Anything else after the property value is an invalid payload (but won't fail in this method).
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat">
            <summary>
            The JsonLight OData format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.ToString">
            <summary>
            The text representation - the name of the format.
            </summary>
            <returns>The name of the format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.DetectPayloadKind(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.DetectPayloadKind(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.CreateInputContext(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>The newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.CreateOutputContext(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>The newly created output context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataResponseMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataRequestMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.CreateInputContextAsync(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Asynchronously creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>Task which when completed returned the newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.CreateOutputContextAsync(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>Task which represents the pending create operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.DetectPayloadKindImplementation(System.IO.Stream,Microsoft.Data.OData.ODataMessage,System.Boolean,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="messageStream">The message stream to read from for payload kind detection.</param>
            <param name="message">The message being read.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightFormat.DetectPayloadKindImplementationAsync(System.IO.Stream,Microsoft.Data.OData.ODataMessage,System.Boolean,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="messageStream">The message stream to read from for payload kind detection.</param>
            <param name="message">The message being read.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext">
            <summary>
            Implementation of the OData input for JsonLight OData format.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataInputContext">
            <summary>
            Base class for all input contexts, defines the interface 
            to be implemented by the specific formats.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.format">
            <summary>The format for this input context.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.messageReaderSettings">
            <summary>The message reader settings to be used for reading.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.version">
            <summary>The protocol version to use when reading the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.readingResponse">
            <summary>Set to true if this context is reading a response payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.synchronous">
            <summary>true if the input should be read synchronously; false if it should be read asynchronously.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.urlResolver">
            <summary>The optional URL resolver to perform custom URL resolution for URLs read from the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.model">
            <summary>The model to use.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.edmTypeResolver">
            <summary>The type resolver to use.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataInputContext.disposed">
            <summary>Set to true if the input was disposed.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.#ctor(Microsoft.Data.OData.ODataFormat,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this input context.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.Dispose">
            <summary>
            IDisposable.Dispose() implementation to cleanup unmanaged resources of the context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateFeedReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entries in the feed.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateFeedReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entries in the feed.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateEntryReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateEntryReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateCollectionReaderAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateBatchReader(System.String)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataBatchReader"/>.
            </summary>
            <param name="batchBoundary">The batch boundary to use.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataBatchReader"/>.</returns>
            <remarks>
            Since we don't want to support batch format extensibility (at least not yet) this method should remain internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateBatchReaderAsync(System.String)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataBatchReader"/>.
            </summary>
            <param name="batchBoundary">The batch boundary to use.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataBatchReader"/>.</returns>
            <remarks>
            Since we don't want to support batch format extensibility (at least not yet) this method should remain internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateParameterReader(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateParameterReaderAsync(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadServiceDocument">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadServiceDocumentAsync">
            <summary>
            Asynchronously read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadMetadataDocument">
            <summary>
            Read a metadata document. 
            This method reads the metadata document from the input and returns 
            an <see cref="T:Microsoft.Data.Edm.IEdmModel"/> that represents the read metadata document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmModel"/> representing the read metadata document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadProperty(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Read the property from the input and 
            return an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadPropertyAsync(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously read the property from the input and 
            return an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadError">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadErrorAsync">
            <summary>
            Asynchronously read a top-level error.
            </summary>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadEntityReferenceLinks(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadEntityReferenceLinksAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadEntityReferenceLink(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Read a top-level entity reference link.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadEntityReferenceLinkAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously read a top-level entity reference link.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadValue(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Read a top-level value.
            </summary>
            <param name="expectedPrimitiveTypeReference">The expected type reference for the value to be read; null if no expected type is available.</param>
            <returns>An <see cref="T:System.Object"/> representing the read value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ReadValueAsync(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Asynchronously read a top-level value.
            </summary>
            <param name="expectedPrimitiveTypeReference">The expected type reference for the value to be read; null if no expected type is available.</param>
            <returns>Task which when completed returns an <see cref="T:System.Object"/> representing the read value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the object has already been disposed.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.AssertSynchronous">
            <summary>
            Asserts that the input context was created for synchronous operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.AssertAsynchronous">
            <summary>
            Asserts that the input context was created for asynchronous operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreateDuplicatePropertyNamesChecker">
            <summary>
            Creates a new instance of a duplicate property names checker.
            </summary>
            <returns>The newly created instance of duplicate property names checker.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.ResolveUri(System.Uri,System.Uri)">
            <summary>
            Method to use the custom URL resolver to resolve a base URI and a payload URI.
            This method returns null if not custom resolution is desired.
            If the method returns a non-null URL that value will be used without further validation.
            </summary>
            <param name="baseUri">The (optional) base URI to use for the resolution.</param>
            <param name="payloadUri">The URI read from the payload.</param>
            <returns>
            A <see cref="T:System.Uri"/> instance that reflects the custom resolution of the method arguments
            into a URL or null if no custom resolution is desired; in that case the default resolution is used.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.DisposeImplementation">
            <summary>
            Disposes the input context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInputContext.CreatePayloadKindNotSupportedException(Microsoft.Data.OData.ODataPayloadKind)">
            <summary>
            Creates an exception which reports that the specified payload kind if not support by this format.
            </summary>
            <param name="payloadKind">The payload kind which is not supported.</param>
            <returns>An exception to throw.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.MessageReaderSettings">
            <summary>
            The message reader settings to be used for reading.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.Version">
            <summary>
            The version of the OData protocol to use.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.ReadingResponse">
            <summary>
            Set to true if a response is being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.Synchronous">
            <summary>
            true if the input should be read synchronously; false if it should be read asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.Model">
            <summary>
            The model to use or null if no metadata is available.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.EdmTypeResolver">
            <summary>
            The type resolver to use.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.UrlResolver">
            <summary>
            The optional URL resolver to perform custom URL resolution for URLs read from the payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.UseClientFormatBehavior">
            <summary>
            true if the WCF DS client compatibility format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.UseServerFormatBehavior">
            <summary>
            true if the WCF DS server compatibility format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.UseDefaultFormatBehavior">
            <summary>
            true if the default format behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.UseClientApiBehavior">
            <summary>
            true if the WCF DS client compatibility API behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.UseServerApiBehavior">
            <summary>
            true if the WCF DS server compatibility API behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInputContext.UseDefaultApiBehavior">
            <summary>
            true if the default API behavior should be used; otherwise false.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.payloadKindDetectionState">
            <summary>JSON Light specific state stored during payload kind detection.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.textReader">
            <summary>The text reader created for the input stream.</summary>
            <remarks>
            The ODataJsonLightInputContext instance owns the textReader instance and thus disposes it. 
            We further set this field to null when the input is disposed and use it for checks whether the instance has already been disposed.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.jsonReader">
            <summary>The JSON reader to read from.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionState)">
            <summary>Constructor.</summary>
            <param name="format">The format for this input context.</param>
            <param name="messageStream">The stream to read data from.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use to read the input.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionState">JSON Ligth specific state stored during payload kind detection (or null if no payload kind detection happened).</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.TextReader,Microsoft.Data.OData.MediaType,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionState)">
            <summary>Constructor.</summary>
            <param name="format">The format for this input context.</param>
            <param name="reader">The reader to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionState">JSON Ligth specific state stored during payload kind detection (or null if no payload kind detection happened).</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateFeedReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entries in the feed.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateFeedReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entries in the feed.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateEntryReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateEntryReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateCollectionReaderAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Task which when completed returns the newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateParameterReader(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateParameterReaderAsync(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadServiceDocument">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadServiceDocumentAsync">
            <summary>
            Asynchronously read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadProperty(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates an reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadPropertyAsync(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously read the property from the input and 
            return an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadError">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadErrorAsync">
            <summary>
            Asynchronously read a top-level error.
            </summary>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadEntityReferenceLinks(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadEntityReferenceLinksAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadEntityReferenceLink(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads a top-level entity reference link.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.ReadEntityReferenceLinkAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously read a top-level entity reference link.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.DetectPayloadKind(Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.DetectPayloadKindAsync(Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task which returns an enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.DisposeImplementation">
            <summary>
            Disposes the input context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateTextReaderForMessageStreamConstructor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Helper method to create a TextReader over the message stream. This is needed by the constructor to dispose the message stream if the creation fails
            since this is called from the constructor in place where exception handling is not possible.
            </summary>
            <param name="messageStream">The stream to read data from.</param>
            <param name="encoding">The encoding to use to read the input.</param>
            <returns>The newly created text reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.VerifyCanCreateParameterReader(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Verifies that CreateParameterReader can be called.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.VerifyCanCreateODataReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Verifies that CreateEntryReader or CreateFeedReader can be called.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="entityType">The expected entity type for the entry/entries to be read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.VerifyCanCreateCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Verifies that CreateCollectionReader can be called.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.VerifyCanReadEntityReferenceLink(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Verifies that ReadEntityReferenceLink can be called.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.VerifyCanReadProperty">
            <summary>
            Verifies that ReadProperty can be called.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.VerifyCanDetectPayloadKind">
            <summary>
            Verifies that DetectPayloadKind can be called.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.VerifyUserModel">
            <summary>
            Verifies that a user model is available for reading.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateFeedReaderImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entries in the feed.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateEntryReaderImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateCollectionReaderImplementation(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.CreateParameterReaderImplementation(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.JsonReader">
            <summary>
            Returns the <see cref="T:Microsoft.Data.OData.Json.BufferingJsonReader"/> which is to be used to read the content of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext.PayloadKindDetectionState">
            <summary>
            JSON Light specific state stored during payload kind detection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext">
            <summary>
            JsonLight format output context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.metadataLevel">
            <summary>
            The json metadata level (i.e., fullmetadata, nometadata, minimalmetadata) being written.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.typeNameOracle">
            <summary>
            The oracle to use to determine the type name to write for entries and values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.TextWriter,Microsoft.Data.OData.ODataMessageWriterSettings,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="textWriter">The text writer to write to.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="model">The model to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="messageStream">The message stream to write the payload to.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use for the payload.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="synchronous">true if the output should be written synchronously; false if it should be written asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateMetadataUriBuilder">
            <summary>
            Creates a metadata uri builder for the current output context.
            </summary>
            <returns>The metadata uri builder to use when writing.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteInStreamError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to flush the output before the method returns.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteInStreamErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>Task which represents the pending write operation.</returns>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to make sure that all the data up to this point are written before
            the in-stream error is written.
            It is the responsibility of this method to flush the output before the task finishes.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataFeedWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <returns>The created writer.</returns>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataFeedWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataEntryWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataEntryWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataCollectionWriter(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>The created collection writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataCollectionWriterAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>A running task for the created collection writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataParameterWriter(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>The created parameter writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataParameterWriterAsync(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>A running task for the created parameter writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteServiceDocumentAsync(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Asynchronously writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
            <returns>A task representing the asynchronous operation of writing the service document.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteProperty(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WritePropertyAsync(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write</param>
            <returns>A task representing the asynchronous operation of writing the property.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>A task representing the asynchronous operation of writing the error.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteEntityReferenceLinksAsync(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <returns>A task representing the asynchronous writing of the entity reference links.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The entity reference link to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteEntityReferenceLinkAsync(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The link result to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <returns>A running task representing the writing of the link.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataFeedWriterImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataEntryWriterImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataCollectionWriterImplementation(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>The created collection writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.CreateODataParameterWriterImplementation(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>The created parameter writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteInStreamErrorImplementation(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an in-stream error.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WritePropertyImplementation(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteServiceDocumentImplementation(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteErrorImplementation(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteEntityReferenceLinksImplementation(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.WriteEntityReferenceLinkImplementation(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The entity reference link to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.TypeNameOracle">
            <summary>
            Returns the oracle to use when determining the type name to write for entries and values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext.MetadataLevel">
            <summary>
            The json metadata level (i.e., fullmetadata, nometadata, minimalmetadata) being written.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader">
            <summary>
            OData parameter reader for the Json Light format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.jsonLightInputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.jsonLightParameterDeserializer">
            <summary>The parameter deserializer to read the parameter input with.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.duplicatePropertyNamesChecker">
            <summary>The duplicate property names checker to use for the parameter payload.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The input to read the payload from.</param>
            <param name="functionImport">The function import whose parameters are being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.ReadAtStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet.
            Post-Condition: When the new state is Value, the reader is positioned at the closing '}' or at the name of the next parameter.
                            When the new state is Entry, the reader is positioned at the starting '{' of the entry payload.
                            When the new state is Feed or Collection, the reader is positioned at the starting '[' of the feed or collection payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.ReadAtStartImplementationAsync">
            <summary>
            Implementation of the parameter reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet.
            Post-Condition: When the new state is Value, the reader is positioned at the closing '}' or at the name of the next parameter.
                            When the new state is Entry, the reader is positioned at the starting '{' of the entry payload.
                            When the new state is Feed or Collection, the reader is positioned at the starting '[' of the feed or collection payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.ReadNextParameterImplementation">
            <summary>
            Implementation of the reader logic on the subsequent reads after the first parameter is read.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property or JsonNodeType.EndObject:     assumes the last read puts the reader at the begining of the next parameter or at the end of the payload.
            Post-Condition: When the new state is Value, the reader is positioned at the closing '}' or at the name of the next parameter.
                            When the new state is Entry, the reader is positioned at the starting '{' of the entry payload.
                            When the new state is Feed or Collection, the reader is positioned at the starting '[' of the feed or collection payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.ReadNextParameterImplementationAsync">
            <summary>
            Implementation of the reader logic when in state Value, Entry, Feed or Collection state.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property or JsonNodeType.EndObject:     assumes the last read puts the reader at the begining of the next parameter or at the end of the payload.
            Post-Condition: When the new state is Value, the reader is positioned at the closing '}' or at the name of the next parameter.
                            When the new state is Entry, the reader is positioned at the starting '{' of the entry payload.
                            When the new state is Feed or Collection, the reader is positioned at the starting '[' of the feed or collection payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.CreateCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.
            </summary>
            <param name="expectedItemTypeReference">Expected item type reference of the collection to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.</returns>
            <remarks>
            Pre-Condition:  Any:    the reader should be on the start array node of the collection value; if it is not we let the collection reader fail.
            Post-Condition: Any:    the reader should be on the start array node of the collection value; if it is not we let the collection reader fail.
            NOTE: this method does not move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.CreateCollectionReaderAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.
            </summary>
            <param name="expectedItemTypeReference">Expected item type reference of the collection to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.</returns>
            <remarks>
            Pre-Condition:  Any:    the reader should be on the start array node of the collection value; if it is not we let the collection reader fail.
            Post-Condition: Any:    the reader should be on the start array node of the collection value; if it is not we let the collection reader fail.
            NOTE: this method does not move the reader.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.ReadAtStartImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet.
            Post-Condition: When the new state is Value, the reader is positioned at the closing '}' or at the name of the next parameter.
                            When the new state is Entry, the reader is positioned at the starting '{' of the entry payload.
                            When the new state is Feed or Collection, the reader is positioned at the starting '[' of the feed or collection payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.ReadNextParameterImplementationSynchronously">
            <summary>
            Implementation of the reader logic on the subsequent reads after the first parameter is read.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property or JsonNodeType.EndObject:     assumes the last read puts the reader at the begining of the next parameter or at the end of the payload.
            Post-Condition: When the new state is Value, the reader is positioned at the closing '}' or at the name of the next parameter.
                            When the new state is Entry, the reader is positioned at the starting '{' of the entry payload.
                            When the new state is Feed or Collection, the reader is positioned at the starting '[' of the feed or collection payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterReader.CreateCollectionReaderSynchronously(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.
            </summary>
            <param name="expectedItemTypeReference">Expected item type reference of the collection to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.</returns>
            <remarks>
            Pre-Condition:  Any:    the reader should be on the start array node of the collection value; if it is not we let the collection reader fail.
            Post-Condition: Any:    the reader should be on the start array node of the collection value; if it is not we let the collection reader fail.
            NOTE: this method does not move the reader.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter">
            <summary>
            ODataParameterWriter for the JsonLight format.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterWriterCore">
            <summary>
            Base class for OData parameter writers that verifies a proper sequence of write calls on the writer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterWriter">
            <summary>Base class for OData collection writers.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.WriteStart">
            <summary>Start writing a parameter payload.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.WriteStartAsync">
            <summary>Asynchronously start writing a parameter payload.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.WriteValue(System.String,System.Object)">
            <summary>Start writing a value parameter.</summary>
            <param name="parameterName">The name of the parameter to write.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.WriteValueAsync(System.String,System.Object)">
            <summary>Asynchronously start writing a value parameter.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
            <param name="parameterName">The name of the parameter to write.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.CreateCollectionWriter(System.String)">
            <summary>Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter" /> to write the value of a collection parameter.</summary>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionWriter" />.</returns>
            <param name="parameterName">The name of the collection parameter to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.CreateCollectionWriterAsync(System.String)">
            <summary>Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter" /> to write the value of a collection parameter.</summary>
            <returns>The asynchronously created <see cref="T:Microsoft.Data.OData.ODataCollectionWriter" />.</returns>
            <param name="parameterName">The name of the collection parameter to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.WriteEnd">
            <summary>Finish writing a parameter payload.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.WriteEndAsync">
            <summary>Asynchronously finish writing a parameter payload.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.Flush">
            <summary>Flushes the write buffer to the underlying stream.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriter.FlushAsync">
            <summary>Asynchronously flushes the write buffer to the underlying stream.</summary>
            <returns>A task instance that represents the asynchronous operation.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.outputContext">
            <summary>The output context to write to.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.functionImport">
            <summary>The function import whose parameters will be written.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.scopes">
            <summary>Stack of writer scopes to keep track of the current context of the writer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.parameterNamesWritten">
            <summary>Parameter names that have already been written, used to detect duplicate writes on a parameter.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.duplicatePropertyNamesChecker">
            <summary>Checker to detect duplicate property names on complex parameter values.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.#ctor(Microsoft.Data.OData.ODataOutputContext,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Constructor.
            </summary>
            <param name="outputContext">The output context to write to.</param>
            <param name="functionImport">The function import whose parameters will be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.Flush">
            <summary>
            Flushes the write buffer to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.FlushAsync">
            <summary>
            Asynchronously flushes the write buffer to the underlying stream.
            </summary>
            <returns>A task instance that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteStart">
            <summary>
            Start writing a parameter payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteStartAsync">
            <summary>
            Asynchronously start writing a parameter payload.
            </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteValue(System.String,System.Object)">
            <summary>
            Start writing a value parameter.
            </summary>
            <param name="parameterName">The name of the parameter to write.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteValueAsync(System.String,System.Object)">
            <summary>
            Asynchronously start writing a value parameter.
            </summary>
            <param name="parameterName">The name of the parameter to write.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.CreateCollectionWriter(System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write the value of a collection parameter.
            </summary>
            <param name="parameterName">The name of the collection parameter to write.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.CreateCollectionWriterAsync(System.String)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write the value of a collection parameter.
            </summary>
            <param name="parameterName">The name of the collection parameter to write.</param>
            <returns>A running task for the created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteEnd">
            <summary>
            Finish writing a parameter payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteEndAsync">
            <summary>
            Asynchronously finish writing a parameter payload.
            </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.Microsoft#Data#OData#IODataReaderWriterListener#OnException">
            <summary>
            This method notifies the implementer of this interface that the created reader is in Exception state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.Microsoft#Data#OData#IODataReaderWriterListener#OnCompleted">
            <summary>
            This method notifies the implementer of this interface that the created reader is in Completed state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.Microsoft#Data#OData#IODataOutputInStreamErrorListener#OnInStreamError">
            <summary>
            This method notifies the listener, that an in-stream error is to be written.
            </summary>
            <remarks>
            This listener can choose to fail, if the currently written payload doesn't support in-stream error at this position.
            If the listener returns, the writer should not allow any more writing, since the in-stream error is the last thing in the payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteValueParameter(System.String,System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a value parameter (either primitive or complex).
            </summary>
            <param name="parameterName">The name of the parameter to write.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
            <param name="expectedTypeReference">The expected type reference of the parameter value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.CreateFormatCollectionWriter(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates a format specific <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write the value of a collection parameter.
            </summary>
            <param name="parameterName">The name of the collection parameter to write.</param>
            <param name="expectedItemType">The type reference of the expected item type or null if no expected item type exists.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyCanWriteStart(System.Boolean)">
            <summary>
            Verifies that calling WriteStart is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteStartImplementation">
            <summary>
            Start writing a parameter payload - implementation of the actual functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyCanWriteParameterAndGetTypeReference(System.Boolean,System.String)">
            <summary>
            Verifies that the parameter with name <paramref name="parameterName"/> can be written and returns the
            type reference of the parameter.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
            <param name="parameterName">The name of the parameter to be written.</param>
            <returns>The type reference of the parameter; null if no function import was specified to the writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyCanWriteValueParameter(System.Boolean,System.String,System.Object)">
            <summary>
            Verify that calling WriteValue is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
            <param name="parameterName">The name of the parameter to be written.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
            <returns>The type reference of the parameter; null if no function import was specified to the writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyCanCreateCollectionWriter(System.Boolean,System.String)">
            <summary>
            Verify that calling CreateCollectionWriter is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
            <param name="parameterName">The name of the parameter to be written.</param>
            <returns>The expected item type of the items in the collection or null if no item type is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.GetParameterTypeReference(System.String)">
            <summary>
            Gets the type reference of the parameter in question. Returns null if no function import was specified to the writer.
            </summary>
            <param name="parameterName">The name of the parameter in question.</param>
            <returns>The type reference of the parameter; null if no function import was specified to the writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteValueImplementation(System.String,System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Write a value parameter - implementation of the actual functionality.
            </summary>
            <param name="parameterName">The name of the parameter to write.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
            <param name="expectedTypeReference">The expected type reference of the parameter value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.CreateCollectionWriterImplementation(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write the value of a collection parameter.
            </summary>
            <param name="parameterName">The name of the collection parameter to write.</param>
            <param name="expectedItemType">The type reference of the expected item type or null if no expected item type exists.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyCanWriteEnd(System.Boolean)">
            <summary>
            Verifies that calling WriteEnd is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyAllParametersWritten">
            <summary>
            If an <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> is specified, then this method ensures that all parameters present in the 
            function import are written to the payload.
            </summary>
            <remarks>The binding parameter is optional in the payload. Hence this method will not check for missing binding parameter.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.WriteEndImplementation">
            <summary>
            Finish writing a parameter payload - implementation of the actual functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyNotInErrorOrCompletedState">
            <summary>
            Verifies that the current state is not Error or Completed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyCanFlush(System.Boolean)">
            <summary>
            Verifies that calling Flush is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.VerifyCallAllowed(System.Boolean)">
            <summary>
            Verifies that a call is allowed to the writer.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.InterceptException(System.Action)">
            <summary>
            Catch any exception thrown by the action passed in; in the exception case move the writer into
            state ExceptionThrown and then rethrow the exception.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.InterceptException``1(System.Func{``0})">
            <summary>
            Catch any exception thrown by the function passed in; in the exception case move the writer into
            state ExceptionThrown and then rethrow the exception.
            </summary>
            <typeparam name="T">The return type of <paramref name="function"/>.</typeparam>
            <param name="function">The function to execute.</param>
            <returns>Returns the return value from executing <paramref name="function"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.EnterErrorScope">
            <summary>
            Enters the Error scope if we are not already in Error state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.EnterScope(Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState)">
            <summary>
            Verifies that the transition from the current state into new state is valid and enter a new writer scope.
            </summary>
            <param name="newState">The writer state to transition into.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.LeaveScope">
            <summary>
            Leave the current writer scope and return to the previous scope. 
            When reaching the top-level replace the 'Start' scope with a 'Completed' scope.
            </summary>
            <remarks>Note that this method is never called once the writer is in 'Error' state.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.ReplaceScope(Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState)">
            <summary>
            Replaces the current scope with a new scope; checks that the transition is valid.
            </summary>
            <param name="newState">The new state to transition into.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataParameterWriterCore.ValidateTransition(Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState)">
            <summary>
            Verify that the transition from the current state into new state is valid.
            </summary>
            <param name="newState">The new writer state to transition into.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterWriterCore.DuplicatePropertyNamesChecker">
            <summary>Checker to detect duplicate property names on complex parameter values.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataParameterWriterCore.State">
            <summary>
            The current state of the writer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState">
            <summary>
            An enumeration representing the current state of the writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState.Start">
            <summary>The writer is at the start; nothing has been written yet.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState.CanWriteParameter">
            <summary>
            The writer is in a state where the next parameter can be written.
            The writer enters this state after WriteStart() or after the previous parameter is written.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState.ActiveSubWriter">
            <summary>One of the create writer method has been called and the created sub writer is not in Completed state.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState.Completed">
            <summary>The writer has completed; nothing can be written anymore.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterWriterCore.ParameterWriterState.Error">
            <summary>An error had occured while writing the payload; nothing can be written anymore.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.jsonLightOutputContext">
            <summary>
            The output context to write to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.jsonLightValueSerializer">
            <summary>
            The JsonLight property and value serializer to use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
            <param name="functionImport">The function import whose parameters will be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.WriteValueParameter(System.String,System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a value parameter (either primitive or complex)
            </summary>
            <param name="parameterName">The name of the parameter to write.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
            <param name="expectedTypeReference">The expected type reference of the parameter value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightParameterWriter.CreateFormatCollectionWriter(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates a format specific <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write the value of a collection parameter.
            </summary>
            <param name="parameterName">The name of the collection parameter to write.</param>
            <param name="expectedItemType">The type reference of the expected item type or null if no expected item type exists.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/>.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionDeserializer">
            <summary>
            OData JsonLight deserializer for detecting the payload kind of a JsonLight payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionDeserializer.DetectPayloadKind(Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s).
            </summary>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionDeserializer.DetectPayloadKindAsync(Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s).
            </summary>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task which returns an enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightPayloadKindDetectionDeserializer.DetectPayloadKindImplementation(Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s).
            </summary>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightReader">
            <summary>
            OData reader for the JsonLight format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.jsonLightInputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.jsonLightEntryAndFeedDeserializer">
            <summary>The entry and feed deserializer to read input with.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.topLevelScope">
            <summary>The scope associated with the top level of this payload.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The input to read the payload from.</param>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read (in case of entry reader) or entries in the feed to be read (in case of feed reader).</param>
            <param name="readingFeed">true if the reader is created for reading a feed; false when it is created for reading an entry.</param>
            <param name="listener">If not null, the Json reader will notify the implementer of the interface of relevant state changes in the Json reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: when reading a feed:    the reader is positioned on the first item in the feed or the end array node of an empty feed
                            when reading an entry:  the first node of the first navigation link value, null for a null expanded link or an end object 
                                                    node if there are no navigation links.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: when reading a feed:    the reader is positioned on the first item in the feed or the end array node of an empty feed
                            when reading an entry:  the first node of the first navigation link value, null for a null expanded link or an end object 
                                                    node if there are no navigation links.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtFeedStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'FeedStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  Any start node            - The first entry in the feed
                            JsonNodeType.EndArray     - The end of the feed
            Post-Condition: The reader is positioned over the StartObject node of the first entry in the feed or 
                            on the node following the feed end in case of an empty feed
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtFeedStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'FeedStart'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  Any start node            - The first entry in the feed
                            JsonNodeType.EndArray     - The end of the feed
            Post-Condition: The reader is positioned over the StartObject node of the first entry in the feed or 
                            on the node following the feed end in case of an empty feed
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtFeedEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'FeedEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition: JsonNodeType.Property        if the feed has further instance or property annotations after the feed property
                           JsonNodeType.EndObject       if the feed has no further instance or property annotations after the feed property
            Post-Condition: JsonNodeType.EndOfInput     for a top-level feed when not reading a nested payload
                            JsonNodeType.Property       more properties exist on the owning entry after the expanded link containing the feed
                            JsonNodeType.EndObject      no further properties exist on the owning entry after the expanded link containing the feed
                            JsonNodeType.EndArray       end of expanded link in request, in this case the feed doesn't actually own the array object and it won't read it.
                            Any                         in case of expanded feed in request, this might be the next item in the expanded array, which is not an entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtFeedEndImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'FeedEnd'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition: JsonNodeType.Property        if the feed has further instance or property annotations after the feed property
                           JsonNodeType.EndObject       if the feed has no further instance or property annotations after the feed property
            Post-Condition: JsonNodeType.EndOfInput     for a top-level feed when not reading a nested payload
                            JsonNodeType.Property       more properties exist on the owning entry after the expanded link containing the feed
                            JsonNodeType.EndObject      no further properties exist on the owning entry after the expanded link containing the feed
                            JsonNodeType.EndArray       end of expanded link in request, in this case the feed doesn't actually own the array object and it won't read it.
                            Any                         in case of expanded feed in request, this might be the next item in the expanded array, which is not an entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntryStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'EntryStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            Start of the expanded entry of the navigation link to read next.
                            JsonNodeType.StartArray             Start of the expanded feed of the navigation link to read next.
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry of the navigation link to read next.
                            JsonNodeType.Property               The next property after a deferred link or entity reference link
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            Post-Condition: JsonNodeType.StartObject            Start of the expanded entry of the navigation link to read next.
                            JsonNodeType.StartArray             Start of the expanded feed of the navigation link to read next.
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry of the navigation link to read next.
                            JsonNodeType.Property               The next property after a deferred link or entity reference link
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntryStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'EntryStart'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            Start of the expanded entry of the navigation link to read next.
                            JsonNodeType.StartArray             Start of the expanded feed of the navigation link to read next.
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry of the navigation link to read next.
                            JsonNodeType.Property               The next property after a deferred link or entity reference link
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            Post-Condition: JsonNodeType.StartObject            Start of the expanded entry of the navigation link to read next.
                            JsonNodeType.StartArray             Start of the expanded feed of the navigation link to read next.
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry of the navigation link to read next.
                            JsonNodeType.Property               The next property after a deferred link or entity reference link
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntryEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'EntryEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject              end of object of the entry
                            JsonNodeType.PrimitiveValue (null)  end of null expanded entry
            Post-Condition: The reader is positioned on the first node after the entry's end-object node
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntryEndImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'EntryEnd'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject              end of object of the entry
                            JsonNodeType.PrimitiveValue (null)  end of null expanded entry
            Post-Condition: The reader is positioned on the first node after the entry's end-object node
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtNavigationLinkStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            start of an expanded entry
                            JsonNodeType.StartArray             start of an expanded feed
                            JsonNodeType.PrimitiveValue (null)  expanded null entry
                            JsonNodeType.Property               deferred link with more properties in owning entry
                            JsonNodeType.EndObject              deferred link as last property of the owning entry
            Post-Condition: JsonNodeType.StartArray:            start of expanded entry
                            JsonNodeType.StartObject            start of expanded feed
                            JsonNodeType.PrimitiveValue (null)  expanded null entry
                            JsonNodeType.Property               deferred link with more properties in owning entry
                            JsonNodeType.EndObject              deferred link as last property of the owning entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtNavigationLinkStartImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkStart'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            start of an expanded entry
                            JsonNodeType.StartArray             start of an expanded feed
                            JsonNodeType.PrimitiveValue (null)  expanded null entry
                            JsonNodeType.Property               deferred link with more properties in owning entry
                            JsonNodeType.EndObject              deferred link as last property of the owning entry
            Post-Condition: JsonNodeType.StartArray:            start of expanded entry
                            JsonNodeType.StartObject            start of expanded feed
                            JsonNodeType.PrimitiveValue (null)  expanded null entry
                            JsonNodeType.Property               deferred link with more properties in owning entry
                            JsonNodeType.EndObject              deferred link as last property of the owning entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtNavigationLinkEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject:         navigation link is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the navigation link in the owning entry
            Post-Condition: JsonNodeType.StartObject        start of the expanded entry navigation link to read next
                            JsonNodeType.StartArray         start of the expanded feed navigation link to read next
                            JsonNoteType.Primitive (null)   expanded null entry navigation link to read next
                            JsonNoteType.Property           property after deferred link or entity reference link
                            JsonNodeType.EndObject          end of the parent entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtNavigationLinkEndImplementationAsync">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkEnd'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject:         navigation link is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the navigation link in the owning entry
            Post-Condition: JsonNodeType.StartObject        start of the expanded entry navigation link to read next
                            JsonNodeType.StartArray         start of the expanded feed navigation link to read next
                            JsonNoteType.Primitive (null)   expanded null entry navigation link to read next
                            JsonNoteType.Property           property after deferred link or entity reference link
                            JsonNodeType.EndObject          end of the parent entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntityReferenceLink">
            <summary>
            Implementation of the reader logic when in state 'EntityReferenceLink'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            This method doesn't move the reader
            Pre-Condition:  JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
                            Any:                            expanded collection link - the node after the entity reference link.
            Post-Condition: JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
                            Any:                            expanded collection link - the node after the entity reference link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntityReferenceLinkAsync">
            <summary>
            Implementation of the reader logic when in state 'EntityReferenceLink'.
            </summary>
            <returns>A task which returns true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            This method doesn't move the reader
            Pre-Condition:  JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
                            Any:                            expanded collection link - the node after the entity reference link.
            Post-Condition: JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
                            Any:                            expanded collection link - the node after the entity reference link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtStartImplementationSynchronously(Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use for the top-level scope.</param>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: when reading a feed:    the reader is positioned on the first item in the feed or the end array node of an empty feed
                            when reading an entry:  the first node of the first navigation link value, null for a null expanded link or an end object 
                                                    node if there are no navigation links.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtFeedStartImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'FeedStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  Any start node            - The first entry in the feed
                            JsonNodeType.EndArray     - The end of the feed
            Post-Condition: The reader is positioned over the StartObject node of the first entry in the feed or 
                            on the node following the feed end in case of an empty feed
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtFeedEndImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'FeedEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition: JsonNodeType.Property        if the feed has further instance or property annotations after the feed property
                           JsonNodeType.EndObject       if the feed has no further instance or property annotations after the feed property
            Post-Condition: JsonNodeType.EndOfInput     for a top-level feed when not reading a nested payload
                            JsonNodeType.Property       more properties exist on the owning entry after the expanded link containing the feed
                            JsonNodeType.EndObject      no further properties exist on the owning entry after the expanded link containing the feed
                            JsonNodeType.EndArray       end of expanded link in request, in this case the feed doesn't actually own the array object and it won't read it.
                            Any                         in case of expanded feed in request, this might be the next item in the expanded array, which is not an entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntryStartImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'EntryStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            Start of the expanded entry of the navigation link to read next.
                            JsonNodeType.StartArray             Start of the expanded feed of the navigation link to read next.
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry of the navigation link to read next.
                            JsonNodeType.Property               The next property after a deferred link or entity reference link
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            Post-Condition: JsonNodeType.StartObject            Start of the expanded entry of the navigation link to read next.
                            JsonNodeType.StartArray             Start of the expanded feed of the navigation link to read next.
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry of the navigation link to read next.
                            JsonNodeType.Property               The next property after a deferred link or entity reference link
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntryEndImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'EntryEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject              end of object of the entry
                            JsonNodeType.PrimitiveValue (null)  end of null expanded entry
            Post-Condition: The reader is positioned on the first node after the entry's end-object node
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtNavigationLinkStartImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            start of an expanded entry
                            JsonNodeType.StartArray             start of an expanded feed
                            JsonNodeType.PrimitiveValue (null)  expanded null entry
                            JsonNodeType.Property               deferred link with more properties in owning entry
                            JsonNodeType.EndObject              deferred link as last property of the owning entry or
                                                                reporting projected navigation links missing in the payload
            Post-Condition: JsonNodeType.StartArray:            start of expanded entry
                            JsonNodeType.StartObject            start of expanded feed
                            JsonNodeType.PrimitiveValue (null)  expanded null entry
                            JsonNodeType.Property               deferred link with more properties in owning entry
                            JsonNodeType.EndObject              deferred link as last property of the owning entry or
                                                                reporting projected navigation links missing in the payload
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtNavigationLinkEndImplementationSynchronously">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject:         navigation link is last property in owning entry or
                                                            reporting projected navigation links missing in the payload
                            JsonNodeType.Property:          there are more properties after the navigation link in the owning entry
            Post-Condition: JsonNodeType.StartObject        start of the expanded entry navigation link to read next
                            JsonNodeType.StartArray         start of the expanded feed navigation link to read next
                            JsonNoteType.Primitive (null)   expanded null entry navigation link to read next
                            JsonNoteType.Property           property after deferred link or entity reference link
                            JsonNodeType.EndObject          end of the parent entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadAtEntityReferenceLinkSynchronously">
            <summary>
            Implementation of the reader logic when in state 'EntityReferenceLink'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            This method doesn't move the reader
            Pre-Condition:  JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
                            Any:                            expanded collection link - the node after the entity reference link.
            Post-Condition: JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
                            Any:                            expanded collection link - the node after the entity reference link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadFeedStart(Microsoft.Data.OData.ODataFeed,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Reads the start of the JSON array for the content of the feed and sets up the reader state correctly.
            </summary>
            <param name="feed">The feed to read the contents for.</param>
            <param name="selectedProperties">The selected properties node capturing what properties should be expanded during template evaluation.</param>
            <remarks>
            Pre-Condition:  The first node of the feed property value; this method will throw if the node is not
                            JsonNodeType.StartArray
            Post-Condition: The reader is positioned on the first item in the feed, or on the end array of the feed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadFeedEnd">
            <summary>
            Reads the end of the current feed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadExpandedEntryStart(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Reads the start of an expanded entry (null or non-null).
            </summary>
            <param name="navigationLink">The navigation link that is being expanded.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            The start of the entry object
                            JsonNodeType.PrimitiveValue (null)  The null entry value
            Post-Condition: JsonNodeType.StartObject            Start of expanded entry of the navigation link to read next
                            JsonNodeType.StartArray             Start of expanded feed of the navigation link to read next
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry of the navigation link to read next, or the null value of the current null entry
                            JsonNodeType.Property               Property after deferred link or expanded entity reference
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadEntryStart(Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Reads the start of an entry and sets up the reader state correctly
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use for the entry; 
            or null if a new one should be created.</param>
            <param name="selectedProperties">The selected properties node capturing what properties should be expanded during template evaluation.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            If the entry is in a feed - the start of the entry object
                            JsonNodeType.Property               If the entry is a top-level entry and has at least one property
                            JsonNodeType.EndObject              If the entry is a top-level entry and has no properties
            Post-Condition: JsonNodeType.StartObject            Start of expanded entry of the navigation link to read next
                            JsonNodeType.StartArray             Start of expanded feed of the navigation link to read next
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry of the navigation link to read next
                            JsonNodeType.Property               Property after deferred link or expanded entity reference
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadExpandedNavigationLinkEnd(System.Boolean)">
            <summary>
            Verifies that the current item is an <see cref="T:Microsoft.Data.OData.ODataNavigationLink"/> instance,
            sets the cardinality of the link (IsCollection property) and moves the reader
            into state 'NavigationLinkEnd'.
            </summary>
            <param name="isCollection">A flag indicating whether the link represents a collection or not.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReadNextNavigationLinkContentItemInRequest">
            <summary>
            Reads the next item in a navigation link content in a request payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.StartEntry(Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Starts the entry, initializing the scopes and such. This method starts a non-null entry only.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use for the entry; 
            or null if a new one should be created.</param>
            <param name="selectedProperties">The selected properties node capturing what properties should be expanded during template evaluation.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.StartNavigationLink(Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo)">
            <summary>
            Starts the navigation link.
            Does metadata validation of the navigation link and sets up the reader to report it.
            </summary>
            <param name="navigationLinkInfo">The navigation link info for the navigation link to start.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.ReplaceScope(Microsoft.Data.OData.ODataReaderState)">
            <summary>
            Replaces the current scope with a new scope with the specified <paramref name="state"/> and
            the item of the current scope.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataReaderState"/> to use for the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.EndEntry">
            <summary>
            Called to transition into the EntryEnd state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.CurrentEntryState">
            <summary>
            Returns the current entry state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.CurrentJsonLightFeedScope">
            <summary>
            Returns current scope cast to JsonLightFeedScope
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.CurrentJsonLightNavigationLinkScope">
            <summary>
            Returns current scope cast to JsonLightNavigationLinkScope
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightTopLevelScope">
            <summary>
            A reader top-level scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightTopLevelScope.#ctor(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected type for the scope.</param>
            <remarks>The <paramref name="expectedEntityType"/> has the following meaning
              it's the expected base type of the top-level entry or entries in the top-level feed.
            In all cases the specified type must be an entity type.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightTopLevelScope.DuplicatePropertyNamesChecker">
            <summary>
            The duplicate property names checker for the top level scope represented by the current state.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope">
            <summary>
            A reader entry scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.navigationPropertiesRead">
            <summary>The set of names of the navigation properties we have read so far while reading the entry.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.#ctor(Microsoft.Data.OData.ODataReaderState,Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="readerState">The reader state of the new scope that is being created.</param>
            <param name="entry">The item attached to this scope.</param>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected type for the scope.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker for this entry scope.</param>
            <param name="selectedProperties">The selected properties node capturing what properties should be expanded during template evaluation.</param>
            <remarks>The <paramref name="expectedEntityType"/> has the following meaning
              it's the expected base type of the entry. If the entry has no type name specified
              this type will be assumed. Otherwise the specified type name must be
              the expected type or a more derived type.
            In all cases the specified type must be an entity type.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.MetadataBuilder">
            <summary>
            The metadata builder instance for the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.AnyPropertyFound">
            <summary>
            Flag which indicates that during parsing of the entry represented by this state,
            any property which is not an instance annotation was found. This includes property annotations
            for property which is not present in the payload.
            </summary>
            <remarks>
            This is used to detect incorrect ordering of the payload (for example odata.id must not come after the first property).
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.FirstNavigationLinkInfo">
            <summary>
            If the reader finds a navigation link to report, but it must first report the parent entry
            it will store the navigation link info in this property. So this will only ever store the first navigation link of an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.DuplicatePropertyNamesChecker">
            <summary>
            The duplicate property names checker for the entry represented by the current state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.SelectedProperties">
            <summary>
            The selected properties that should be expanded during template evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.NavigationPropertiesRead">
            <summary>
            The set of names of the navigation properties we have read so far while reading the entry.
            true if we have started processing missing projected navigation links, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.ProcessingMissingProjectedNavigationLinks">
            <summary>
            true if we have started processing missing projected navigation links, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.Microsoft#Data#OData#JsonLight#IODataJsonLightReaderEntryState#Entry">
            <summary>
            The entry being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightEntryScope.Microsoft#Data#OData#JsonLight#IODataJsonLightReaderEntryState#EntityType">
            <summary>
            The entity type for the entry (if available).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightFeedScope">
            <summary>
            A reader feed scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightFeedScope.#ctor(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="feed">The item attached to this scope.</param>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected type for the scope.</param>
            <param name="selectedProperties">The selected properties node capturing what properties should be expanded during template evaluation.</param>
            <remarks>The <paramref name="expectedEntityType"/> has the following meaning
              it's the expected base type of the entries in the feed.
              note that it might be a more derived type than the base type of the entity set for the feed.
            In all cases the specified type must be an entity type.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightFeedScope.SelectedProperties">
            <summary>
            The selected properties that should be expanded during template evaluation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightNavigationLinkScope">
            <summary>
            A reader scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightNavigationLinkScope.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightReaderNavigationLinkInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="navigationLinkInfo">The navigation link info attached to this scope.</param>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected type for the scope.</param>
            <remarks>The <paramref name="expectedEntityType"/> has the following meaning
              it's the expected base type the entries in the expanded link (either the single entry
              or entries in the expanded feed).
            In all cases the specified type must be an entity type.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightReader.JsonLightNavigationLinkScope.NavigationLinkInfo">
            <summary>
            The navigation link info for the navigation link to report.
            This is only used on a StartNavigationLink scope in responses.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils">
            <summary>
            Helper methods used by the OData reader for the JsonLight format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils.ConvertValue(System.Object,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.String)">
            <summary>
            Converts the given JSON value to the expected type as per OData conversion rules for JSON values.
            </summary>
            <param name="value">Value to the converted.</param>
            <param name="primitiveTypeReference">Type reference to which the value needs to be converted.</param>
            <param name="messageReaderSettings">The message reader settings used for reading.</param>
            <param name="version">The version of the OData protocol used for reading.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>Object which is in sync with the property type (modulo the V1 exception of converting numbers to non-compatible target types).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils.EnsureInstance``1(``0@)">
            <summary>
            Ensure that the <paramref name="instance"/> is not null; if so create a new instance.
            </summary>
            <typeparam name="T">The type of the instance to check.</typeparam>
            <param name="instance">The instance to check for null.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils.IsODataAnnotationName(System.String)">
            <summary>
            Determines if the specified <paramref name="propertyName"/> is an OData annotation property name.
            </summary>
            <param name="propertyName">The property name to test.</param>
            <returns>true if the property name is an OData annotation property name, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils.IsAnnotationProperty(System.String)">
            <summary>
            Determines if the specified property name is a name of an annotation property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>true if <paramref name="propertyName"/> is a name of an annotation property, false otherwise.</returns>
            <remarks>
            This method returns true both for normal annotation as well as property annotations.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils.ValidateAnnotationStringValue(System.String,System.String)">
            <summary>
            Validates that the annotation string value is valid.
            </summary>
            <param name="propertyValue">The value of the annotation.</param>
            <param name="annotationName">The name of the (instance or property) annotation (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils.GetPayloadTypeName(System.Object)">
            <summary>
            Gets the payload type name for an OData OM instance for JsonLight.
            </summary>
            <param name="payloadItem">The payload item to get the type name for.</param>
            <returns>The type name as read from the payload item (or constructed for primitive items).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils.ConvertStringValue(System.String,System.Type)">
            <summary>
            Converts the given JSON string value to the expected type as per OData conversion rules for JSON values.
            </summary>
            <param name="stringValue">String value to the converted.</param>
            <param name="targetType">Target type to which the string value needs to be converted.</param>
            <returns>Object which is in sync with the target type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightReaderUtils.ConvertInt32Value(System.Int32,System.Type,Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Converts the given JSON int value to the expected type as per OData conversion rules for JSON values.
            </summary>
            <param name="intValue">Int32 value to the converted.</param>
            <param name="targetType">Target type to which the int value needs to be converted.</param>
            <param name="primitiveTypeReference">Type reference to which the value needs to be converted.</param>
            <returns>Object which is in sync with the property type.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentDeserializer">
            <summary>
            OData JsonLight deserializer for service documents.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentDeserializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightInputContext">The JsonLight input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentDeserializer.ReadServiceDocument">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:        assumes that the JSON reader has not been used yet.
            Post-Condition: JsonNodeType.EndOfInput  
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentDeserializer.ReadServiceDocumentAsync">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>A task which returns an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:        assumes that the JSON reader has not been used yet.
            Post-Condition: JsonNodeType.EndOfInput  
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentDeserializer.ReadServiceDocumentImplementation(Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use for the top-level scope.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property   The property right after the metadata URI property.
                            JsonNodeType.EndObject  The EndObject of the service document.
            Post-Condition: Any                     The node after the EndObject of the service document.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentDeserializer.ReadResourceCollection(Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads a resource collection within a service document.
            </summary>
            <param name="duplicatePropertyNamesChecker">The <see cref="T:Microsoft.Data.OData.DuplicatePropertyNamesChecker"/> to use for parsing annotations within the resource collection object.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.ODataResourceCollectionInfo"/> representing the read resource collection.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject:     The beginning of the JSON object representing the resource collection.
                            other:                        Will throw with an appropriate message on any other node type encountered.
            Post-Condition: JsonNodeType.StartObject:     The beginning of the next resource collection in the array.
                            JsonNodeType.EndArray:        The end of the array.
                            other:                        Any other node type occuring after the end object of the current resource collection. (Would be invalid).
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentSerializer">
            <summary>
            OData JsonLight serializer for service documents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentSerializer.metadataUriBuilder">
            <summary>The metadata uri builder to use.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentSerializer.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightServiceDocumentSerializer.WriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document in JsonLight format.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter">
            <summary>
            Implementation of the ODataWriter for the JsonLight format.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriterCore">
            <summary>
            Base class for OData writers that verifies a proper sequence of write calls on the writer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriter">
            <summary>
            Base class for OData writers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteStart(Microsoft.Data.OData.ODataFeed)">
            <summary>Starts the writing of a feed.</summary>
            <param name="feed">The feed or collection to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteStartAsync(Microsoft.Data.OData.ODataFeed)">
            <summary> Asynchronously start writing a feed. </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
            <param name="feed">The feed or collection to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteStart(Microsoft.Data.OData.ODataEntry)">
            <summary>Starts the writing of an entry.</summary>
            <param name="entry">The entry or item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteStartAsync(Microsoft.Data.OData.ODataEntry)">
            <summary> Asynchronously start writing an entry. </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
            <param name="entry">The entry or item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteStart(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>Starts the writing of a navigation link.</summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteStartAsync(Microsoft.Data.OData.ODataNavigationLink)">
            <summary> Asynchronously start writing a navigation link. </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
            <param name="navigationLink">The navigation link to writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteEnd">
            <summary>Finishes the writing of a feed, an entry, or a navigation link.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteEndAsync">
            <summary> Asynchronously finish writing a feed, entry, or navigation link. </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary> Writes an entity reference link, which is used to represent binding to an existing resource in a request payload. </summary>
            <param name="entityReferenceLink">The entity reference link to write.</param>
            <remarks>
            This method can only be called for writing request messages. The entity reference link must be surrounded
            by a navigation link written through WriteStart/WriteEnd.
            The <see cref="P:Microsoft.Data.OData.ODataNavigationLink.Url"/> will be ignored in that case and the Uri from the <see cref="P:Microsoft.Data.OData.ODataEntityReferenceLink.Url"/> will be used
            as the binding URL to be written.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.WriteEntityReferenceLinkAsync(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary> Asynchronously writes an entity reference link, which is used to represent binding to an existing resource in a request payload. </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
            <param name="entityReferenceLink">The entity reference link to write.</param>
            <remarks>
            This method can only be called for writing request messages. The entity reference link must be surrounded
            by a navigation link written through WriteStart/WriteEnd.
            The <see cref="P:Microsoft.Data.OData.ODataNavigationLink.Url"/> will be ignored in that case and the Uri from the <see cref="P:Microsoft.Data.OData.ODataEntityReferenceLink.Url"/> will be used
            as the binding URL to be written.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.Flush">
            <summary>Flushes the write buffer to the underlying stream.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriter.FlushAsync">
            <summary>Flushes the write buffer to the underlying stream asynchronously.</summary>
            <returns>A task instance that represents the asynchronous operation.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.outputContext">
            <summary>The output context to write to.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.writingFeed">
            <summary>True if the writer was created for writing a feed; false when it was created for writing an entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.scopes">
            <summary>Stack of writer scopes to keep track of the current context of the writer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.feedValidator">
            <summary>
            The <see cref="T:Microsoft.Data.OData.FeedWithoutExpectedTypeValidator"/> to use for entries in this feed.
            Only applies when writing a top-level feed; otherwise null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.currentEntryDepth">
            <summary>The number of entries which have been started but not yet ended.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.#ctor(Microsoft.Data.OData.ODataOutputContext,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="outputContext">The output context to write to.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="writingFeed">True if the writer is created for writing a feed; false when it is created for writing an entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.Flush">
            <summary>
            Flushes the write buffer to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.FlushAsync">
            <summary>
            Asynchronously flushes the write buffer to the underlying stream.
            </summary>
            <returns>A task instance that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStart(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Start writing a feed.
            </summary>
            <param name="feed">Feed/collection to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStartAsync(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Asynchronously start writing a feed.
            </summary>
            <param name="feed">Feed/collection to write.</param>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStart(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Start writing an entry.
            </summary>
            <param name="entry">Entry/item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStartAsync(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Asynchronously start writing an entry.
            </summary>
            <param name="entry">Entry/item to write.</param>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStart(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a navigation link.
            </summary>
            <param name="navigationLink">Navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStartAsync(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Asynchronously start writing a navigation link.
            </summary>
            <param name="navigationLink">Navigation link to writer.</param>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteEnd">
            <summary>
            Finish writing a feed/entry/navigation link.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteEndAsync">
            <summary>
            Asynchronously finish writing a feed/entry/navigation link.
            </summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Writes an entity reference link, which is used to represent binding to an existing resource in a request payload.
            </summary>
            <param name="entityReferenceLink">The entity reference link to write.</param>
            <remarks>
            This method can only be called for writing request messages. The entity reference link must be surrounded
            by a navigation link written through WriteStart/WriteEnd.
            The <see cref="P:Microsoft.Data.OData.ODataNavigationLink.Url"/> will be ignored in that case and the Uri from the <see cref="P:Microsoft.Data.OData.ODataEntityReferenceLink.Url"/> will be used
            as the binding URL to be written.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteEntityReferenceLinkAsync(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Asynchronously writes an entity reference link, which is used to represent binding to an existing resource in a request payload.
            </summary>
            <param name="entityReferenceLink">The entity reference link to write.</param>
            <returns>A task instance that represents the asynchronous write operation.</returns>
            <remarks>
            This method can only be called for writing request messages. The entity reference link must be surrounded
            by a navigation link written through WriteStart/WriteEnd.
            The <see cref="P:Microsoft.Data.OData.ODataNavigationLink.Url"/> will be ignored in that case and the Uri from the <see cref="P:Microsoft.Data.OData.ODataEntityReferenceLink.Url"/> will be used
            as the binding URL to be written.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.Microsoft#Data#OData#IODataOutputInStreamErrorListener#OnInStreamError">
            <summary>
            This method notifies the listener, that an in-stream error is to be written.
            </summary>
            <remarks>
            This listener can choose to fail, if the currently written payload doesn't support in-stream error at this position.
            If the listener returns, the writer should not allow any more writing, since the in-stream error is the last thing in the payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.IsErrorState(Microsoft.Data.OData.ODataWriterCore.WriterState)">
            <summary>
            Determines whether a given writer state is considered an error state.
            </summary>
            <param name="state">The writer state to check.</param>
            <returns>True if the writer state is an error state; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.GetProjectedPropertiesAnnotation(Microsoft.Data.OData.ODataWriterCore.Scope)">
            <summary>
            Gets the projected properties annotation for the specified scope.
            </summary>
            <param name="currentScope">The scope to get the projected properties annotation for.</param>
            <returns>The projected properties annotation for <paramref name="currentScope"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.StartEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Start writing an entry.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.EndEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Finish writing an entry.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.StartFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Start writing a feed.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.EndFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Finish writing a feed.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteDeferredNavigationLink(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Write a deferred (non-expanded) navigation link.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.StartNavigationLinkWithContent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a navigation link with content.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.EndNavigationLinkWithContent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Finish writing a navigation link with content.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteEntityReferenceInNavigationLinkContent(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Write an entity reference link into a navigation link content.
            </summary>
            <param name="parentNavigationLink">The parent navigation link which is being written around the entity reference link.</param>
            <param name="entityReferenceLink">The entity reference link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.CreateFeedScope(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new feed scope.
            </summary>
            <param name="feed">The feed for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly create scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.CreateEntryScope(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new entry scope.
            </summary>
            <param name="entry">The entry for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly create scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.GetEntrySerializationInfo(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Gets the serialization info for the given entry.
            </summary>
            <param name="entry">The entry to get the serialization info for.</param>
            <returns>The serialization info for the given entry.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.CreateNavigationLinkScope(Microsoft.Data.OData.ODataWriterCore.WriterState,Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Creates a new navigation link scope.
            </summary>
            <param name="writerState">The writer state for the new scope.</param>
            <param name="navLink">The navigation link for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly created navigation link scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.PrepareEntryForWriteStart(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataFeedAndEntryTypeContext,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Place where derived writers can perform custom steps before the entry is writen, at the begining of WriteStartEntryImplementation.
            </summary>
            <param name="entry">Entry to write.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry or feed.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ValidateEntryMediaResource(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Validates the media resource on the entry.
            </summary>
            <param name="entry">The entry to validate.</param>
            <param name="entityType">The entity type of the entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ValidateEntryType(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Gets the type of the entry and validates it against the model.
            </summary>
            <param name="entry">The entry to get the type for.</param>
            <returns>The validated entity type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ValidateNoDeltaLinkForExpandedFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Validates that the ODataFeed.DeltaLink is null for the given expanded feed.
            </summary>
            <param name="feed">The expanded feed in question.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.VerifyCanWriteStartFeed(System.Boolean,Microsoft.Data.OData.ODataFeed)">
            <summary>
            Verifies that calling WriteStart feed is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
            <param name="feed">Feed/collection to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStartFeedImplementation(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Start writing a feed - implementation of the actual functionality.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.VerifyCanWriteStartEntry(System.Boolean,Microsoft.Data.OData.ODataEntry)">
            <summary>
            Verifies that calling WriteStart entry is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
            <param name="entry">Entry/item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStartEntryImplementation(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Start writing an entry - implementation of the actual functionality.
            </summary>
            <param name="entry">Entry/item to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.VerifyCanWriteStartNavigationLink(System.Boolean,Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Verifies that calling WriteStart navigation link is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
            <param name="navigationLink">Navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteStartNavigationLinkImplementation(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a navigation link - implementation of the actual functionality.
            </summary>
            <param name="navigationLink">Navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.VerifyCanWriteEnd(System.Boolean)">
            <summary>
            Verify that calling WriteEnd is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteEndImplementation">
            <summary>
            Finish writing a feed/entry/navigation link.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.MarkNavigationLinkAsProcessed(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Marks the navigation currently being written as processed in the parent entity's metadata builder.
            This is needed so that at the end of writing the entry we can query for all the unwritten navigation properties
            defined on the entity type and write out their metadata in fullmetadata mode.
            </summary>
            <param name="link">The navigation link being written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.VerifyCanWriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink,System.Boolean)">
            <summary>
            Verifies that calling WriteEntityReferenceLink is valid.
            </summary>
            <param name="entityReferenceLink">The entity reference link to write.</param>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.WriteEntityReferenceLinkImplementation(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Write an entity reference link.
            </summary>
            <param name="entityReferenceLink">The entity reference link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.VerifyCanFlush(System.Boolean)">
            <summary>
            Verifies that calling Flush is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.VerifyCallAllowed(System.Boolean)">
            <summary>
            Verifies that a call is allowed to the writer.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ThrowODataException(System.String,Microsoft.Data.OData.ODataItem)">
            <summary>
            Enters the 'ExceptionThrown' state and then throws an ODataException with the specified error message.
            </summary>
            <param name="errorMessage">The error message for the exception.</param>
            <param name="item">The OData item to associate with the 'ExceptionThrown' state.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.StartPayloadInStartState">
            <summary>
            Checks whether we are currently writing the first top-level element; if so call StartPayload
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.CheckForNavigationLinkWithContent(Microsoft.Data.OData.ODataPayloadKind)">
            <summary>
            Checks whether we are currently writing a navigation link and switches to NavigationLinkWithContent state if we do.
            </summary>
            <param name="contentPayloadKind">
            What kind of payload kind is being written as the content of a navigation link.
            Only Feed, Entry or EntityRefernceLink are allowed.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.InterceptException(System.Action)">
            <summary>
            Catch any exception thrown by the action passed in; in the exception case move the writer into
            state ExceptionThrown and then rethrow the exception.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.IncreaseEntryDepth">
            <summary>
            Increments the nested entry count by one and fails if the new value exceeds the maxiumum nested entry depth limit.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.DecreaseEntryDepth">
            <summary>
            Decrements the nested entry count by one.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.EnterScope(Microsoft.Data.OData.ODataWriterCore.WriterState,Microsoft.Data.OData.ODataItem)">
            <summary>
            Enter a new writer scope; verifies that the transition from the current state into new state is valid
            and attaches the item to the new scope.
            </summary>
            <param name="newState">The writer state to transition into.</param>
            <param name="item">The item to associate with the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.LeaveScope">
            <summary>
            Leave the current writer scope and return to the previous scope. 
            When reaching the top-level replace the 'Started' scope with a 'Completed' scope.
            </summary>
            <remarks>Note that this method is never called once an error has been written or a fatal exception has been thrown.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.PromoteNavigationLinkScope">
            <summary>
            Promotes the current navigation link scope to a navigation link scope with content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ValidateTransition(Microsoft.Data.OData.ODataWriterCore.WriterState)">
            <summary>
            Verify that the transition from the current state into new state is valid .
            </summary>
            <param name="newState">The new writer state to transition into.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.PushScope(Microsoft.Data.OData.ODataWriterCore.WriterState,Microsoft.Data.OData.ODataItem,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new writer scope.
            </summary>
            <param name="state">The writer state of the scope to create.</param>
            <param name="item">The item attached to the scope to create.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.CurrentScope">
            <summary>
            The current scope for the writer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.State">
            <summary>
            The current state of the writer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.SkipWriting">
            <summary>
            true if the writer should not write any input specified and should just skip it.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.IsTopLevel">
            <summary>
            A flag indicating whether the writer is at the top level.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.ParentNavigationLink">
            <summary>
            Returns the immediate parent link which is being expanded, or null if no such link exists
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.ParentEntryEntityType">
            <summary>
            Returns the entity type of the immediate parent entry for which a navigation link is being written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.ParentEntryEntitySet">
            <summary>
            Returns the entity type of the immediate parent entry for which a navigation link is being written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.FeedScopeEntryCount">
            <summary>
            Returns the number of entries seen so far on the current feed scope.
            </summary>
            <remarks>Can only be accessed on a feed scope.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.DuplicatePropertyNamesChecker">
            <summary>
            Checker to detect duplicate property names.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.EntryEntityType">
            <summary>
            The entity type of the current entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.ParentNavigationLinkScope">
            <summary>
            Returns the parent navigation link scope of an entry in an expanded link (if it exists).
            The entry can either be the content of the expanded link directly or nested inside a feed.
            </summary>
            <returns>The parent navigation scope of an entry in an expanded link (if it exists).</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.CurrentFeedValidator">
            <summary>
            Validator to validate consistency of collection items (or null if no such validator applies to the current scope).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriterCore.WriterState">
            <summary>
            An enumeration representing the current state of the writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.WriterState.Start">
            <summary>The writer is at the start; nothing has been written yet.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.WriterState.Entry">
            <summary>The writer is currently writing an entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.WriterState.Feed">
            <summary>The writer is currently writing a feed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.WriterState.NavigationLink">
            <summary>The writer is currently writing a navigation link (possibly an expanded link but we don't know yet).</summary>
            <remarks>
            This state is used when a navigation link was started but we didn't see any children for it yet.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.WriterState.NavigationLinkWithContent">
            <summary>The writer is currently writing a navigation link with content.</summary>
            <remarks>
            This state is used when a navigation link with either an entity reference link or expanded feed/entry was written.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.WriterState.Completed">
            <summary>The writer has completed; nothing can be written anymore.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.WriterState.Error">
            <summary>The writer is in error state; nothing can be written anymore.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriterCore.ScopeStack">
            <summary>
            Lightweight wrapper for the stack of scopes which exposes a few helper properties for getting parent scopes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.ScopeStack.scopes">
            <summary>
            Use a list to store the scopes instead of a true stack so that parent/grandparent lookups will be fast.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ScopeStack.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataWriterCore.ScopeStack"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ScopeStack.Push(Microsoft.Data.OData.ODataWriterCore.Scope)">
            <summary>
            Pushes the specified scope onto the stack.
            </summary>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ScopeStack.Pop">
            <summary>
            Pops the current scope off the stack.
            </summary>
            <returns>The popped scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.ScopeStack.Peek">
            <summary>
            Peeks at the current scope on the top of the stack.
            </summary>
            <returns>The current scope at the top of the stack.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.ScopeStack.Count">
            <summary>
            Gets the count of items in the stack.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.ScopeStack.Parent">
            <summary>
            Gets the scope below the current scope on top of the stack.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.ScopeStack.ParentOfParent">
            <summary>
            Gets the scope below the parent of the current scope on top of the stack.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.ScopeStack.ParentOrNull">
            <summary>
            Gets the scope below the current scope on top of the stack or null if there is only one item on the stack or the stack is empty.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriterCore.Scope">
            <summary>
            A writer scope; keeping track of the current writer state and an item associated with this state.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.Scope.state">
            <summary>The writer state of this scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.Scope.item">
            <summary>The item attached to this scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.Scope.skipWriting">
            <summary>Set to true if the content of the scope should not be written.</summary>
            <remarks>This is used when writing navigation links which were not projected on the owning entry.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.Scope.selectedProperties">
            <summary>The selected properties for the current scope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.Scope.entitySet">
            <summary>The entity set we are going to write entities for.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.Scope.entityType">
            <summary>The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.Scope.#ctor(Microsoft.Data.OData.ODataWriterCore.WriterState,Microsoft.Data.OData.ODataItem,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor creating a new writer scope.
            </summary>
            <param name="state">The writer state of this scope.</param>
            <param name="item">The item attached to this scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of this scope should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.Scope.EntityType">
            <summary>
            The entity type for the entries in the feed to be written (or null if the entity set base type should be used).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.Scope.State">
            <summary>
            The writer state of this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.Scope.Item">
            <summary>
            The item attached to this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.Scope.EntitySet">
            <summary>The entity set we are going to write entities for.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.Scope.SelectedProperties">
            <summary>The selected properties for the current scope.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.Scope.SkipWriting">
            <summary>
            Set to true if the content of this scope should not be written.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriterCore.FeedScope">
            <summary>
            A scope for an feed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.FeedScope.serializationInfo">
            <summary>The serialization info for the current feed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.FeedScope.entryCount">
            <summary>The number of entries in this feed seen so far.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.FeedScope.instanceAnnotationWriteTracker">
            <summary>Maintains the write status for each annotation using its key.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.FeedScope.typeContext">
            <summary>The type context to answer basic questions regarding the type info of the entry.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.FeedScope.#ctor(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new feed scope.
            </summary>
            <param name="feed">The feed for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.FeedScope.GetOrCreateTypeContext(Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Gets or creates the type context to answer basic questions regarding the type info of the entry.
            </summary>
            <param name="model">The Edm model to use.</param>
            <param name="writingResponse">True if writing a response payload, false otherwise.</param>
            <returns>The type context to answer basic questions regarding the type info of the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.FeedScope.EntryCount">
            <summary>
            The number of entries in this feed seen so far.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.FeedScope.InstanceAnnotationWriteTracker">
            <summary>
            Tracks the write status of the annotations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriterCore.EntryScope">
            <summary>
            A scope for an entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.EntryScope.duplicatePropertyNamesChecker">
            <summary>Checker to detect duplicate property names.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.EntryScope.serializationInfo">
            <summary>The serialization info for the current entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.EntryScope.odataEntryTypeName">
            <summary>The value from ODataEntry.TypeName.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.EntryScope.entityTypeFromMetadata">
            <summary>The entity type which was derived from the model (may be either the same as entity type or its base type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.EntryScope.typeContext">
            <summary>The type context to answer basic questions regarding the type info of the entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterCore.EntryScope.instanceAnnotationWriteTracker">
            <summary>Maintains the write status for each annotation using its key.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.EntryScope.#ctor(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,System.Boolean,Microsoft.Data.OData.ODataWriterBehavior,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new entry scope.
            </summary>
            <param name="entry">The entry for the new scope.</param>
            <param name="serializationInfo">The serialization info for the current entry.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="writingResponse">true if we are writing a response, false if it's a request.</param>
            <param name="writerBehavior">The <see cref="T:Microsoft.Data.OData.ODataWriterBehavior"/> instance controlling the behavior of the writer.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.EntryScope.GetOrCreateTypeContext(Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Gets or creates the type context to answer basic questions regarding the type info of the entry.
            </summary>
            <param name="model">The Edm model to use.</param>
            <param name="writingResponse">True if writing a response payload, false otherwise.</param>
            <returns>The type context to answer basic questions regarding the type info of the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.EntryScope.EntityTypeFromMetadata">
            <summary>
            The entity type which was derived from the model, i.e. the expected entity type, which may be either the same as entity type or its base type.
            For example, if we are writing a feed of Customers and the current entry is of DerivedCustomer, this.EntityTypeFromMetadata would be Customer and this.EntityType would be DerivedCustomer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.EntryScope.SerializationInfo">
            <summary>
            The serialization info for the current entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.EntryScope.DuplicatePropertyNamesChecker">
            <summary>
            Checker to detect duplicate property names.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterCore.EntryScope.InstanceAnnotationWriteTracker">
            <summary>
            Tracks the write status of the annotations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriterCore.NavigationLinkScope">
            <summary>
            A scope for a navigation link.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.NavigationLinkScope.#ctor(Microsoft.Data.OData.ODataWriterCore.WriterState,Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new navigation link scope.
            </summary>
            <param name="writerState">The writer state for the new scope.</param>
            <param name="navLink">The navigation link for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterCore.NavigationLinkScope.Clone(Microsoft.Data.OData.ODataWriterCore.WriterState)">
            <summary>
            Clones this navigation link scope and sets a new writer state.
            </summary>
            <param name="newWriterState">The <see cref="T:Microsoft.Data.OData.ODataWriterCore.WriterState"/> to set.</param>
            <returns>The cloned navigation link scope with the specified writer state.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.jsonLightOutputContext">
            <summary>
            The output context to write to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.jsonLightEntryAndFeedSerializer">
            <summary>
            The JsonLight entry and feed serializer to use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.#ctor(Microsoft.Data.OData.JsonLight.ODataJsonLightOutputContext,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonLightOutputContext">The output context to write to.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="writingFeed">true if the writer is created for writing a feed; false when it is created for writing an entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.StartPayload">
            <summary>
            Starts writing a payload (called exactly once before anything else)
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.EndPayload">
            <summary>
            Ends writing a payload (called exactly once after everything else in case of success)
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.PrepareEntryForWriteStart(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataFeedAndEntryTypeContext,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Place where derived writers can perform custom steps before the entry is writen, at the begining of WriteStartEntryImplementation.
            </summary>
            <param name="entry">Entry to write.</param>
            <param name="typeContext">The context object to answer basic questions regarding the type of the entry or feed.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.ValidateEntryMediaResource(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Validates the media resource on the entry.
            </summary>
            <param name="entry">The entry to validate.</param>
            <param name="entityType">The entity type of the entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.StartEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Start writing an entry.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.EndEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Finish writing an entry.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.StartFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Start writing a feed.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.EndFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Finish writing a feed.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.WriteDeferredNavigationLink(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a deferred (non-expanded) navigation link.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.StartNavigationLinkWithContent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a navigation link with content.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.EndNavigationLinkWithContent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Finish writing a navigation link with content.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.WriteEntityReferenceInNavigationLinkContent(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Write an entity reference link.
            </summary>
            <param name="parentNavigationLink">The parent navigation link which is being written around the entity reference link.</param>
            <param name="entityReferenceLink">The entity reference link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.CreateFeedScope(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new feed scope.
            </summary>
            <param name="feed">The feed for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly create scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.CreateEntryScope(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new entry scope.
            </summary>
            <param name="entry">The entry for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly create scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.CreateNavigationLinkScope(Microsoft.Data.OData.ODataWriterCore.WriterState,Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Creates a new JSON Light navigation link scope.
            </summary>
            <param name="writerState">The writer state for the new scope.</param>
            <param name="navLink">The navigation link for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly created JSON Light  navigation link scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.WriteFeedCount(Microsoft.Data.OData.ODataFeed,System.String)">
            <summary>
            Writes the odata.count annotation for a feed if it has not been written yet (and the count is specified on the feed).
            </summary>
            <param name="feed">The feed to write the count for.</param>
            <param name="propertyName">The name of the expanded nav property or null for a top-level feed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.WriteFeedNextLink(Microsoft.Data.OData.ODataFeed,System.String)">
            <summary>
            Writes the odata.nextLink annotation for a feed if it has not been written yet (and the next link is specified on the feed).
            </summary>
            <param name="feed">The feed to write the next link for.</param>
            <param name="propertyName">The name of the expanded nav property or null for a top-level feed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.WriteFeedDeltaLink(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Writes the odata.deltaLink annotation for a feed if it has not been written yet (and the delta link is specified on the feed).
            </summary>
            <param name="feed">The feed to write the delta link for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.ValidateNoCustomInstanceAnnotationsForExpandedFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Validates that the ODataFeed.InstanceAnnotations collection is empty for the given expanded feed.
            </summary>
            <param name="feed">The expanded feed in question.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.CurrentEntryScope">
            <summary>
            Returns the current JsonLightEntryScope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.CurrentFeedScope">
            <summary>
            Returns the current JsonLightFeedScope.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightFeedScope">
            <summary>
            A scope for a JSON lite feed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightFeedScope.countWritten">
            <summary>true if the odata.count was already written, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightFeedScope.nextLinkWritten">
            <summary>true if the odata.nextLink was already written, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightFeedScope.deltaLinkWritten">
            <summary>true if the odata.deltaLink was already written, false otherwise.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightFeedScope.#ctor(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new feed scope.
            </summary>
            <param name="feed">The feed for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightFeedScope.CountWritten">
            <summary>
            true if the odata.count annotation was already written, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightFeedScope.NextPageLinkWritten">
            <summary>
            true if the odata.nextLink annotation was already written, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightFeedScope.DeltaLinkWritten">
            <summary>
            true if the odata.deltaLink annotation was already written, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope">
            <summary>
            A scope for an entry in JSON Light writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.alreadyWrittenMetadataProperties">
            <summary>Bit field of the JSON Light metadata properties written so far.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.#ctor(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,System.Boolean,Microsoft.Data.OData.ODataWriterBehavior,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new entry scope.
            </summary>
            <param name="entry">The entry for the new scope.</param>
            <param name="serializationInfo">The serialization info for the current entry.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="writingResponse">true if we are writing a response, false if it's a request.</param>
            <param name="writerBehavior">The <see cref="T:Microsoft.Data.OData.ODataWriterBehavior"/> instance controlling the behavior of the writer.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.SetWrittenMetadataProperty(Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty)">
            <summary>
            Marks the <paramref name="jsonLightMetadataProperty"/> as written in this entry scope.
            </summary>
            <param name="jsonLightMetadataProperty">The metadta property which was written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.IsMetadataPropertyWritten(Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty)">
            <summary>
            Determines if the <paramref name="jsonLightMetadataProperty"/> was already written for this entry scope.
            </summary>
            <param name="jsonLightMetadataProperty">The metadata property to test for.</param>
            <returns>true if the <paramref name="jsonLightMetadataProperty"/> was already written for this entry scope; false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.Entry">
            <summary>
            The entry being written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.EditLinkWritten">
            <summary>
            Flag which indicates that the odata.editLink metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.ReadLinkWritten">
            <summary>
            Flag which indicates that the odata.readLink metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.MediaEditLinkWritten">
            <summary>
            Flag which indicates that the odata.mediaEditLink metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.MediaReadLinkWritten">
            <summary>
            Flag which indicates that the odata.mediaReadLink metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.MediaContentTypeWritten">
            <summary>
            Flag which indicates that the odata.mediaContentType metadata property has been written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.MediaETagWritten">
            <summary>
            Flag which indicates that the odata.mediaETag metadata property has been written.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty">
            <summary>
            Enumeration of JSON Light metadata property flags, used to keep track of which properties were already written.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty.EditLink">
            <summary>The odata.editLink property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty.ReadLink">
            <summary>The odata.readLink property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty.MediaEditLink">
            <summary>The odata.mediaEditLink property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty.MediaReadLink">
            <summary>The odata.mediaReadLink property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty.MediaContentType">
            <summary>The odata.mediaContentType property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightEntryScope.JsonLightEntryMetadataProperty.MediaETag">
            <summary>The odata.mediaETag property.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightNavigationLinkScope">
            <summary>
            A scope for a JSON Light navigation link.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightNavigationLinkScope.entityReferenceLinkWritten">
            <summary>true if we have already written an entity reference link for this navigation link in requests; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightNavigationLinkScope.feedWritten">
            <summary>true if we have written at least one feed for this navigation link in requests; otherwise false.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightNavigationLinkScope.#ctor(Microsoft.Data.OData.ODataWriterCore.WriterState,Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new JSON Light navigation link scope.
            </summary>
            <param name="writerState">The writer state for the new scope.</param>
            <param name="navLink">The navigation link for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightNavigationLinkScope.Clone(Microsoft.Data.OData.ODataWriterCore.WriterState)">
            <summary>
            Clones this JSON Light navigation link scope and sets a new writer state.
            </summary>
            <param name="newWriterState">The writer state to set.</param>
            <returns>The cloned navigation link scope with the specified writer state.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightNavigationLinkScope.EntityReferenceLinkWritten">
            <summary>
            true if we have already written an entity reference link for this navigation link in requests; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.JsonLight.ODataJsonLightWriter.JsonLightNavigationLinkScope.FeedWritten">
            <summary>
            true if we have written at least one feed for this navigation link in requests; otherwise false.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.JsonLight.ODataJsonLightWriterUtils">
            <summary>
            Helper methods used by the OData writer for the JsonLight format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriterUtils.WriteODataTypeInstanceAnnotation(Microsoft.Data.OData.Json.IJsonWriter,System.String)">
            <summary>
            Writes the odata.type instance annotation with the specified type name.
            </summary>
            <param name="jsonWriter">The JSON writer to write to.</param>
            <param name="typeName">The type name to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriterUtils.WriteODataTypePropertyAnnotation(Microsoft.Data.OData.Json.IJsonWriter,System.String,System.String)">
            <summary>
            Writes the odata.type propert annotation for the specified property with the specified type name.
            </summary>
            <param name="jsonWriter">The JSON writer to write to.</param>
            <param name="propertyName">The name of the property for which to write the odata.type annotation.</param>
            <param name="typeName">The type name to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriterUtils.WriteValuePropertyName(Microsoft.Data.OData.Json.IJsonWriter)">
            <summary>
            Writes the 'value' property name.
            </summary>
            <param name="jsonWriter">The JSON writer to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.JsonLight.ODataJsonLightWriterUtils.WritePropertyAnnotationName(Microsoft.Data.OData.Json.IJsonWriter,System.String,System.String)">
            <summary>
            Write a JSON property name which represents a property annotation.
            </summary>
            <param name="jsonWriter">The JSON writer to write to.</param>
            <param name="propertyName">The name of the property to annotate.</param>
            <param name="annotationName">The name of the annotation to write.</param>
        </member>
        <member name="T:Microsoft.Data.OData.ODataJsonDateTimeFormat">
            <summary>
            Enumeration describing the various serialization formats for dates in JSON
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataJsonDateTimeFormat.ODataDateTime">
            <summary>
            Represents a DateTime value in the OData format of \/Date(ticksrepresentingdatetime)\/
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataJsonDateTimeFormat.ISO8601DateTime">
            <summary>
            Represents a DateTime value in the ISO 8601 format of YYYY-MM-DDThh:mm:ss.sTZD eg 1997-07-16T19:20:30.45+01:00
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.MediaTypeResolver">
            <summary>
            Class with the responsibility of resolving media types (MIME types) into formats and payload kinds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.ApplicationAtomXmlMediaType">
            <summary>application/atom+xml media type</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.ApplicationXmlMediaType">
            <summary>application/xml media type</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.TextXmlMediaType">
            <summary>text/xml media type</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.ApplicationJsonMediaType">
            <summary>application/json media type</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.ApplicationJsonVerboseMediaType">
            <summary>application/json;odata=verbose media type</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.defaultMediaTypes">
            <summary>
            An array that maps stores the supported media types for all <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> .
            </summary>
            <remarks>
            The set of supported media types is ordered (desc) by their precedence/priority with respect to (1) format and (2) media type.
            As a result the default media type for a given payloadKind is the first entry in the MediaTypeWithFormat array.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.MediaTypeResolverCache">
            <summary>Cache for MediaTypeResolvers for each version.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.version">
            <summary>
            The version the media type resolver is used with.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.mediaTypesForPayloadKind">
            <summary>
            Array of supported media types and formats for each payload kind.
            The index into the array matches the order of the ODataPayloadKind enum.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeResolver.JsonPayloadKinds">
            <summary>
            The set of payload kinds which are supported for the JSON formats.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.#ctor(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Creates a new media type resolver for writers with the mappings for the specified version.
            </summary>
            <param name="version">The version used to write the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.#ctor(Microsoft.Data.OData.ODataVersion,Microsoft.Data.OData.ODataBehaviorKind)">
            <summary>
            Creates a new media type resolver for readers with the mappings for the specified version and behavior kind.
            </summary>
            <param name="version">The version used to read the payload.</param>
            <param name="formatBehaviorKind">The format behavior kind used.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.GetWriterMediaTypeResolver(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Creates a new media type resolver for writers with the mappings for the specified version.
            </summary>
            <param name="version">The version used to write the payload.</param>
            <returns>A new media type resolver for readers with the mappings for the specified version and behavior kind.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.CreateReaderMediaTypeResolver(Microsoft.Data.OData.ODataVersion,Microsoft.Data.OData.ODataBehaviorKind)">
            <summary>
            Creates a new media type resolver for readers with the mappings for the specified version and behavior kind.
            </summary>
            <param name="version">The version used to read the payload.</param>
            <param name="formatBehaviorKind">The format behavior kind used.</param>
            <returns>A new media type resolver for readers with the mappings for the specified version and behavior kind.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.GetMediaTypesForPayloadKind(Microsoft.Data.OData.ODataPayloadKind)">
            <summary>
            Gets the supported media types and formats for the given payload kind.
            </summary>
            <param name="payloadKind">The payload kind to get media types for.</param>
            <returns>An array of media type / format pairs, sorted by priority.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.IsIllegalMediaType(Microsoft.Data.OData.MediaType)">
            <summary>
            Checks for an illegal media type that cannot be caught during content negotiation/resolution
            since it would match an unsupported media type.
            </summary>
            <param name="mediaType">The parsed media type to check.</param>
            <returns>true if the media type is illegal (and we should fail); otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.CloneDefaultMediaTypes">
            <summary>
            Clones the default media types.
            </summary>
            <returns>The cloned media type table.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.AddMediaTypeEntryOrdered(System.Collections.Generic.IList{Microsoft.Data.OData.MediaTypeWithFormat},Microsoft.Data.OData.MediaTypeWithFormat,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Inserts the specified media type before the first occurrence of <paramref name="beforeFormat"/>.
            </summary>
            <param name="mediaTypeList">The media type list to insert into.</param>
            <param name="mediaTypeToInsert">The media type to insert.</param>
            <param name="beforeFormat">The format of the media type before which <paramref name="mediaTypeToInsert"/> should be inserted.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.AddJsonLightMediaTypes">
            <summary>
            Configure the media type tables so that Json Light is the first JSON format in the table.
            </summary>
            <remarks>
            This is only used in V3 and beyond.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.AddForJsonPayloadKinds(Microsoft.Data.OData.MediaTypeWithFormat)">
            <summary>
            Adds the given media type/format for all the payload kinds which support JSON.
            </summary>
            <param name="mediaTypeWithFormat">The media type/format pair to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.InsertForJsonPayloadKinds(Microsoft.Data.OData.MediaTypeWithFormat,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Inserts the given media type/format for all the payload kinds which support JSON before the first media type with the given format.
            </summary>
            <param name="mediaTypeWithFormat">The media type/format pair to add.</param>
            <param name="beforeFormat">The format of the media type before which <paramref name="mediaTypeWithFormat"/> should be inserted.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeResolver.AddV2ClientMediaTypes">
            <summary>
            Additional media types per payload kind for the WCF DS client on pre-v3 payloads.
            Anything that normally accepts application/atom+xml should also accept application/xml, and vice versa.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeResolver.DefaultMediaTypeResolver">
            <summary>
            Accesses the default media type resolver.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.MediaTypeWithFormat">
            <summary>
            A helper class to associate a <see cref="T:Microsoft.Data.OData.ODataFormat"/> with a media type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeWithFormat.MediaType">
            <summary>The media type.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeWithFormat.Format">
            <summary>
            The <see cref="T:Microsoft.Data.OData.ODataFormat"/> for this media type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationHeaders">
            <summary>
            A dictionary implementation with special key-matching semantics; it accepts case-insensitive matches
            but prefers a case-sensitive one (if present).
            </summary>
            <remarks>As an implementation choice we did not use a second dictionary to maintain a cache of case-insensitive
            keys since we don't want to pay the price of an extra dictionary for cases where the looked up keys
            match case sensitively (as per spec, should be the default case).</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationHeaders.caseSensitiveDictionary">
            <summary>The backing dictionary using case-sensitive key comparison.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationHeaders.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationHeaders.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the dictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationHeaders.ContainsKeyOrdinal(System.String)">
            <summary>
            Determines whether the dictionary contains an element with the specified key using case-sensitive comparison.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns>true if the dictionary contains an element with the <paramref name="key"/>; otherwise, false.</returns>
            <remarks>This method will only try to match the key using case-sensitive comparison.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationHeaders.Remove(System.String)">
            <summary>
            Removes the entry with the specified <paramref name="key"/> from the headers.
            </summary>
            <param name="key">The key of the item to remove.</param>
            <returns>true if the item with the specified <paramref name="key"/> was removed; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationHeaders.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationHeaders.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationHeaders.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationHeaders.FindKeyIgnoreCase(System.String)">
            <summary>
            Finds <paramref name="key"/> in the case sensitive dictionary ignoring the case for comparison.
            </summary>
            <param name="key">The key to find.</param>
            <returns>The key from the case sensitive dictionary that matched the <paramref name="key"/> or null if no match was found.</returns>
            <remarks>This method throws if multiple case insensitive matches for the specified <paramref name="key"/> exist.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationHeaders.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.MessageStreamWrapper">
            <summary>
            Factory class for the various wrapper streams around the actual message stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.CreateNonDisposingStream(System.IO.Stream)">
            <summary>
            Creates a non-disposing stream.
            </summary>
            <param name="innerStream">The inner <see cref="T:System.IO.Stream"/> to wrap.</param>
            <returns>A stream wrapping the <paramref name="innerStream"/> that ignores calls to Dispose.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.CreateStreamWithMaxSize(System.IO.Stream,System.Int64)">
            <summary>
            Creates a stream with a given maximum size.
            </summary>
            <param name="innerStream">The inner <see cref="T:System.IO.Stream"/> to wrap.</param>
            <param name="maxBytesToBeRead">The maximum number of bytes to be read from the <paramref name="innerStream"/>.</param>
            <returns>A stream wrapping the <paramref name="innerStream"/> that
            enforces the maximum number of bytes to be read from the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.CreateNonDisposingStreamWithMaxSize(System.IO.Stream,System.Int64)">
            <summary>
            Creates a non-disposing stream with a given maximum size.
            </summary>
            <param name="innerStream">The inner <see cref="T:System.IO.Stream"/> to wrap.</param>
            <param name="maxBytesToBeRead">The maximum number of bytes to be read from the <paramref name="innerStream"/>.</param>
            <returns>A stream wrapping the <paramref name="innerStream"/> that ignores calls to Dispose and 
            enforces the maximum number of bytes to be read from the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.IsNonDisposingStream(System.IO.Stream)">
            <summary>
            Checks whether the provided stream already ignores calls to Dispose.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to check.</param>
            <returns>true if the <paramref name="stream"/> ignores calls to Dispose; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream">
            <summary>
            Stream wrapper that supports counting the total number of bytes read from the stream and ensures
            that they don't exceed a specified maximum (used for security purposes) and ignoring calls
            to Dispose if the underlying stream should not be disposed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.maxBytesToBeRead">
            <summary>The maximum number of bytes to be read from the stream before reporting an error.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.ignoreDispose">
            <summary>true to not dispose the inner stream when Dispose is called; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.innerStream">
            <summary>Stream that is being wrapped.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.totalBytesRead">
            <summary>The total number of bytes read from the stream so far.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.#ctor(System.IO.Stream,System.Boolean,System.Int64)">
            <summary>
            Constructs an instance of the byte counting stream wrapper class.
            </summary>
            <param name="innerStream">Stream that is being wrapped.</param>
            <param name="ignoreDispose">true if calls to Dispose should be ignored; otherwise false.</param>
            <param name="maxBytesToBeRead">The maximum number of bytes to be read from the stream before reporting an error.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.Flush">
            <summary>
            Flush the stream to the underlying storage.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins a read operation from the stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="callback">The async callback.</param>
            <param name="state">The async state.</param>
            <returns>Async result representing the asynchornous operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.EndRead(System.IAsyncResult)">
            <summary>
            Ends a read operation from the stream.
            </summary>
            <param name="asyncResult">The async result representing the read operation.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the stream.
            </summary>
            <param name="offset">The offset to seek to.</param>
            <param name="origin">The origin of the seek operation.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The length in bytes to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation to the stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The async callback.</param>
            <param name="state">The async state.</param>
            <returns>Async result representing the write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends the asynchronous write operation.
            </summary>
            <param name="asyncResult">Async result representing the write operation.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.Dispose(System.Boolean)">
            <summary>
            Dispose this wrapping stream and the underlying stream.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.IncreaseTotalBytesRead(System.Int32)">
            <summary>
            Increases the number of total bytes read from the stream.
            </summary>
            <param name="bytesRead">The number of bytes read from the stream during the last read operation.</param>
            <remarks>Since we don't own the underlying stream we also have to prepare for streams returning &lt; 0 bytes read.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.CanRead">
            <summary>
            Determines if the stream can read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.CanSeek">
            <summary>
            Determines if the stream can seek.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.CanWrite">
            <summary>
            Determines if the stream can write.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.Position">
            <summary>
            Gets or sets the position in the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MessageStreamWrapper.MessageStreamWrappingStream.IgnoreDispose">
            <summary>true if the wrapping stream ignores calls to Dispose; otherwise false.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer">
            <summary>
            OData Verbose JSON deserializer for detecting the payload kind of a JSON payload.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer">
            <summary>
            OData Verbose JSON deserializer for properties and value types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer">
            <summary>
            Base class for all OData Verbose JSON deserializers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.jsonInputContext">
            <summary>The JSON input context to use for reading.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonInputContext">The JSON input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.ReadPayloadStart(System.Boolean)">
            <summary>
            Read the start of the top-level data wrapper in JSON responses.
            </summary>
            <param name="isReadingNestedPayload">true if we are deserializing a nested payload, e.g. an entry, a feed or a collection within a parameters payload.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first node of the payload (this can be the first node or the value of the 'd' property node)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.ReadPayloadStart(System.Boolean,System.Boolean)">
            <summary>
            Read the start of the top-level data wrapper in JSON responses.
            </summary>
            <param name="isReadingNestedPayload">true if we are deserializing a nested payload, e.g. an entry, a feed or a collection within a parameters payload.</param>
            <param name="expectResponseWrapper">true if the response "d" wrapper should be in the payload, false otherwise.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first node of the payload (this can be the first node or the value of the 'd' property node)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.ReadPayloadEnd(System.Boolean)">
            <summary>
            Reads the end of the top-level data wrapper in JSON responses.
            </summary>
            <param name="isReadingNestedPayload">true if we are deserializing a nested payload, e.g. an entry, a feed or a collection within a parameters payload.</param>
            <remarks>
            Pre-Condition:  any node:                when reading response or a nested payload, will fail if find anything else then EndObject.
                            JsonNodeType.EndOfInput: otherwise
            Post-Condition: JsonNodeType.EndOfInput
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.ReadPayloadEnd(System.Boolean,System.Boolean)">
            <summary>
            Reads the end of the top-level data wrapper in JSON responses.
            </summary>
            <param name="isReadingNestedPayload">true if we are deserializing a nested payload, e.g. an entry, a feed or a collection within a parameters payload.</param>
            <param name="expectResponseWrapper">true if the response "d" wrapper should be in the payload, false otherwise.</param>
            <remarks>
            Pre-Condition:  any node:                when reading response or a nested payload, will fail if find anything else then EndObject.
                            JsonNodeType.EndOfInput: otherwise
            Post-Condition: JsonNodeType.EndOfInput
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.ProcessUriFromPayload(System.String)">
            <summary>
            Given a URI from the payload, this method will try to make it absolute, or fail otherwise.
            </summary>
            <param name="uriFromPayload">The URI string from the payload to process.</param>
            <returns>An absolute URI to report.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.ProcessUriFromPayload(System.String,System.Boolean)">
            <summary>
            Given a URI from the payload, this method will try to make it absolute, or fail otherwise.
            </summary>
            <param name="uriFromPayload">The URI string from the payload to process.</param>
            <param name="requireAbsoluteUri">true if the payload URI needs to be translated into an absolute URI; otherwise false.</param>
            <returns>An absolute URI to report.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.AssertJsonCondition(Microsoft.Data.OData.Json.JsonNodeType[])">
            <summary>
            Asserts that the JSON reader is positioned on one of the specified node types.
            </summary>
            <param name="allowedNodeTypes">The node types which should appear at this point.</param>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.JsonReader">
            <summary>
            Returns the <see cref="T:Microsoft.Data.OData.Json.BufferingJsonReader"/> which is to be used to read the content of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonDeserializer.VerboseJsonInputContext">
            <summary>
            The Verbose Json input context to use for reading.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.recursionDepth">
            <summary>
            The current recursion depth of values read by this deserializer, measured by the number of complex, collection, JSON object and JSON array values read so far.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The JSON input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.ReadTopLevelProperty(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates an reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="expectedProperty">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.FindTypeNameInPayload">
            <summary>
            Reads an entry, complex or collection content in buffering mode until it finds the type name in the __metadata object
            or hits the end of the object. If called for a primitive value, returns 'null' (since primitive types cannot have
            type names in JSON)
            </summary>
            <returns>The type name as read from the __metadata object; null if none was found.</returns>
            <remarks>
            This method does not move the reader.
            Pre-Condition:  JsonNodeType.PrimitiveValue         A primitive value
                            JsonNodeType.StartObject            Any non-primitive value
            Post-Condition: JsonNodeType.PrimitiveValue         A primitive value
                            JsonNodeType.StartObject            Any non-primitive value
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.ReadNonEntityValue(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,System.Boolean,System.String)">
            <summary>
            Reads a primitive value, complex value or collection.
            </summary>
            <param name="expectedValueTypeReference">The expected type reference of the property value.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use - if null the method should create a new one if necessary.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>The value of the property read.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue   - the value of the property is a primitive value
                            JsonNodeType.StartObject      - the value of the property is an object
                            JsonNodeType.StartArray       - the value of the property is an array - method will fail in this case.
            Post-Condition: almost anything - the node after the property value.
                            
            Returns the value of the property read, which can be one of:
            - null
            - primitive value
            - <see cref="T:Microsoft.Data.OData.ODataComplexValue"/>
            - <see cref="T:Microsoft.Data.OData.ODataCollectionValue"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.ReadTypeNameFromMetadataPropertyValue">
            <summary>
            Reads the type name from the value of a __metadata property. All other properties in the __metadata property value are ignored.
            </summary>
            <returns>The type name found, or null if none was found.</returns>
            <remarks>
            This method can be used in buffering and non-buffering mode.
            
            Pre-Condition:  Fails if the current node is not a JsonNodeType.StartObject
            Post-Condition: JsonNodeType.Property - the next property after the __metadata property value.
                            JsonNodeType.EndObject - if the __metadata property was the last property in the object.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.ReadPrimitiveValue(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Boolean,System.String)">
            <summary>
            Reads a primitive value.
            </summary>
            <param name="expectedValueTypeReference">The expected type reference of the value.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>The value of the primitive value.</returns>
            <remarks>
            Pre-Condition:  none - Fails if the current node is not a JsonNodeType.PrimitiveValue
            Post-Condition: almost anything - the node after the primitive value.
            
            Made internal only for testability.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.ReadCollectionValueImplementation(Microsoft.Data.Edm.IEdmCollectionTypeReference,System.String,Microsoft.Data.OData.SerializationTypeNameAnnotation)">
            <summary>
            Reads a collection value.
            </summary>
            <param name="collectionValueTypeReference">The collection type reference of the value.</param>
            <param name="payloadTypeName">The type name read from the payload.</param>
            <param name="serializationTypeNameAnnotation">The serialization type name for the collection value (possibly null).</param>
            <returns>The value of the collection.</returns>
            <remarks>
            Pre-Condition:  Fails if the current node is not a JsonNodeType.StartObject
            Post-Condition: almost anything - the node after the collection value (after the EndObject)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.ReadComplexValueImplementation(Microsoft.Data.Edm.IEdmComplexTypeReference,System.String,Microsoft.Data.OData.SerializationTypeNameAnnotation,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Reads a complex value.
            </summary>
            <param name="complexValueTypeReference">The expected type reference of the value.</param>
            <param name="payloadTypeName">The type name read from the payload.</param>
            <param name="serializationTypeNameAnnotation">The serialization type name for the collection value (possibly null).</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use - if null the method should create a new one if necessary.</param>
            <returns>The value of the complex value.</returns>
            <remarks>
            Pre-Condition:  Fails if the current node is not a JsonNodeType.StartObject or JsonNodeType.PrimitiveValue (with null value)
            Post-Condition: almost anything - the node after the complex value (after the EndObject)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.ReadNonEntityValueImplementation(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,System.Boolean,System.String)">
            <summary>
            Reads a primitive, complex or collection value.
            </summary>
            <param name="expectedTypeReference">The expected type reference of the property value.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use - if null the method should create a new one if necessary.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable.</param>
            <returns>The value of the property read.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.PrimitiveValue   - the value of the property is a primitive value
                            JsonNodeType.StartObject      - the value of the property is an object
                            JsonNodeType.StartArray       - the value of the property is an array - method will fail in this case.
            Post-Condition: almost anything - the node after the property value.
                            
            Returns the value of the property read, which can be one of:
            - null
            - primitive value
            - <see cref="T:Microsoft.Data.OData.ODataComplexValue"/>
            - <see cref="T:Microsoft.Data.OData.ODataCollectionValue"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.GetNonEntityValueKind">
            <summary>
            Determines the value kind for a non-entity value (that is top-level property value, property value on a complex type, item in a collection)
            </summary>
            <returns>The type kind of the property value.</returns>
            <remarks>
            Doesn't move the JSON reader.
            Pre-Condition:  JsonNodeType.PrimitiveValue
                            JsonNodeType.StartObject
            Post-Condition: JsonNodeType.PrimitiveValue
                            JsonNodeType.StartObject
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.ShouldReadTopLevelPropertyValueWithoutPropertyWrapper(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Determines if the top-level property payload should be read as usual, or without the property wrapper.
            </summary>
            <param name="expectedPropertyTypeReference">The expected type reference for the property value to read.</param>
            <returns>true if the property payload should be read without the property wrapper, false if it should be read as usual with the property wrapper.</returns>
            <remarks>This method is to support backward compat behavior for WCF DS Server, which can read open property values without property wrapper.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.IncreaseRecursionDepth">
            <summary>
            Increases the recursion depth of values by 1. This will throw if the recursion depth exceeds the current limit.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.DecreaseRecursionDepth">
            <summary>
            Decreases the recursion depth of values by 1.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueDeserializer.AssertRecursionDepthIsZero">
            <summary>
            Asserts that the current recursion depth of values is zero. This should be true on all calls into this class from outside of this class.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.detectedPayloadKinds">
            <summary>The set of detected payload kinds.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The Verbose JSON input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.DetectPayloadKind">
            <summary>
            Detects the payload kind(s).
            </summary>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.DetectStartArrayPayloadKind(System.Boolean)">
            <summary>
            Detects whether a JSON payload where the current node is a start array node represents
            a feed, a set of entity reference links, a collection or a combination of them.
            </summary>
            <param name="isTopLevel">true if the array is a top-level array; if it is a property value false.</param>
            <remarks>
            This method does not move the reader.
            Pre-Condition:  JsonNodeType.StartArray         The StartArray node of the feed or entity reference links array (if at the top-level)
            Post-Condition: JsonNodeType.StartArray         The StartArray node of the feed or entity reference links array (if at the top-level)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.ProcessMetadataPropertyValue">
            <summary>
            Read the value of the __metadata property and compute the payload kind based on the type name.
            </summary>
            <remarks>This method checks whether it can determine the type kind from the type name; if we
            find a primitive or collection type we set the result to empty since such payloads are not supported.
            Otherwise we'll treat the payload as an entry since top-level complex values are not supported either.
            Pre-Condition:  Any                             The first node of the __metadata property value
            Post-Condition: Property or EndObject           This method reads the entire value of the __metadata object and positions
                                                            the reader on the next property or on the EndObject node if this is the last property.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.ProcessEntitySetsArray">
            <summary>
            Process the array value of an 'EntitySets' property to determine whether it should be treated as service document payload.
            </summary>
            <remarks>
            This method does not move the Json reader.
            Pre-Condition:  StartArray                      The start of the array value of the 'EntitySets' property
            Post-Condition: StartArray                      The start of the array value of the 'EntitySets' property
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.AddPayloadKinds(Microsoft.Data.OData.ODataPayloadKind[])">
            <summary>
            Adds the set of specified payload kinds to the detected payload kinds (if the specified 
            payload kinds are valid for the current request/response).
            </summary>
            <param name="payloadKinds">The payload kinds to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.RemovePayloadKinds(Microsoft.Data.OData.ODataPayloadKind[])">
            <summary>
            Removes the set of specified payload kinds from the detected payload kinds (if the specified 
            payload kinds are valid for the current request/response).
            </summary>
            <param name="payloadKinds">The payload kinds to remove.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPayloadKindDetectionDeserializer.AddOrRemovePayloadKinds(System.Func{Microsoft.Data.OData.ODataPayloadKind,System.Boolean},Microsoft.Data.OData.ODataPayloadKind[])">
            <summary>
            Adds or removes the set of specified payload kinds to/from the detected payload kinds (if the specified 
            payload kinds are valid for the current request/response).
            </summary>
            <param name="addOrRemoveAction">The function that implements the 'Add' or 'Remove' action.</param>
            <param name="payloadKinds">The payload kinds to add/remove.</param>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessageQuotas">
            <summary>Quotas to use for limiting resource consumption when reading or writing OData messages.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageQuotas.maxPartsPerBatch">
            <summary>The maximum number of top level query operations and changesets allowed in a single batch.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageQuotas.maxOperationsPerChangeset">
            <summary>The maximum number of operations allowed in a single changeset.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageQuotas.maxNestingDepth">
            <summary>The maximum depth of nesting allowed when reading or writing recursive payloads.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageQuotas.maxReceivedMessageSize">
            <summary>The maximum number of bytes that should be read from the message.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageQuotas.maxEntityPropertyMappingsPerType">
            <summary>The maximum number of entity mapping attributes to be found for an entity type (on the type itself and all its base types).</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageQuotas.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" /> class.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageQuotas.#ctor(Microsoft.Data.OData.ODataMessageQuotas)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataMessageQuotas" /> class.</summary>
            <param name="other">The instance to copy.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageQuotas.MaxPartsPerBatch">
            <summary>Gets or sets the maximum number of top level query operations and changesets allowed in a single batch.</summary>
            <returns>The maximum number of top level query operations and changesets allowed in a single batch.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageQuotas.MaxOperationsPerChangeset">
            <summary>Gets or sets the maximum number of operations allowed in a single changeset.</summary>
            <returns>The maximum number of operations allowed in a single changeset.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageQuotas.MaxNestingDepth">
            <summary>Gets or sets the maximum depth of nesting allowed when reading or writing recursive payloads.</summary>
            <returns>The maximum depth of nesting allowed when reading or writing recursive payloads.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageQuotas.MaxReceivedMessageSize">
            <summary>Gets or sets the maximum number of bytes that should be read from the message.</summary>
            <returns>The maximum number of bytes that should be read from the message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageQuotas.MaxEntityPropertyMappingsPerType">
            <summary>Gets or sets the maximum number of entity mapping attributes to be found for an entity type (on the type itself and all its base types).</summary>
            <returns>The maximum number of entity mapping attributes to be found for an entity type.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataPayloadKindDetectionInfo">
            <summary>
            Represents the set of information available for payload kind detection.
            </summary>
            <remarks>This class is used to represent the input to run payload kind detection using
            <see cref="M:Microsoft.Data.OData.ODataMessageReader.DetectPayloadKind"/>. See the documentation of that method for more 
            information.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.contentType">
            <summary>The parsed content type as <see cref="T:Microsoft.Data.OData.MediaType"/>.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.encoding">
            <summary>The encoding specified in the charset parameter of contentType or the default encoding from MediaType.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.messageReaderSettings">
            <summary>The <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings"/> being used for reading the message.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.model">
            <summary>The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> for the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.possiblePayloadKinds">
            <summary>The possible payload kinds based on content type negotiation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.payloadKindDetectionFormatState">
            <summary>Format specific state created during payload kind detection for that format.</summary>
            <remarks>
            This instance will be stored on the message reader and passed to the format if it will be used
            for actually reading the payload.
            Format can store information which was already extracted from the payload during payload kind detection
            and which it wants to avoid to recompute again during actual reading.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.#ctor(Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.Edm.IEdmModel,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataPayloadKind})">
            <summary>
            Constructor.
            </summary>
            <param name="contentType">The parsed content type as <see cref="T:Microsoft.Data.OData.MediaType"/>.</param>
            <param name="encoding">The encoding from the content type or the default encoding from <see cref="T:Microsoft.Data.OData.MediaType"/>.</param>
            <param name="messageReaderSettings">The <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings"/> being used for reading the message.</param>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> for the payload.</param>
            <param name="possiblePayloadKinds">The possible payload kinds based on content type negotiation.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.GetEncoding">
            <summary>
            The encoding derived from the content type or the default encoding.
            </summary>
            <returns>The encoding derived from the content type or the default encoding.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)">
            <summary>
            Sets a format specific state created during payload kind detection.
            </summary>
            <param name="state">A format specific state, the value is opaque to the message reader, it only stores the reference.</param>
            <remarks>
            The state will be stored on the message reader and passed to the format if it will be used
            for actually reading the payload.
            Format can store information which was already extracted from the payload during payload kind detection
            and which it wants to avoid to recompute again during actual reading.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.MessageReaderSettings">
            <summary>
            The <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings"/> being used for reading the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.Model">
            <summary>
            The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> for the payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.PossiblePayloadKinds">
            <summary>
            The possible payload kinds based on content type negotiation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.ContentType">
            <summary>
            The <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings"/> being used for reading the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.PayloadKindDetectionFormatState">
            <summary>
            The format specific payload kind detection state.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.InternalErrorCodesCommon">
            <summary>
            An enumeration that lists the internal errors that are shared between the OData library and the query library.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodesCommon.EdmLibraryExtensions_ToTypeReference">
            <summary>Unreachable codepath in EdmLibraryExtensions.ToTypeReference (unsupported type kind).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodesCommon.EdmLibraryExtensions_ToClrType">
            <summary>Unreachable codepath in EdmLibraryExtensions.ToClrType (unsupported type kind).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodesCommon.EdmLibraryExtensions_PrimitiveTypeReference">
            <summary>Unreachable codepath in EdmLibraryExtensions.PrimitiveTypeReference (unsupported primitive type kind).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodesCommon.EdmLibraryExtensions_IsAssignableFrom_Primitive">
            <summary>Unreachable codepath in EdmLibraryExtensions.IsAssignableFrom(IEdmPrimitiveType, IEdmPrimitiveType).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodesCommon.EdmLibraryExtensions_IsAssignableFrom_Type">
            <summary>Unreachable codepath in EdmLibraryExtensions.IsAssignableFrom(IEdmType, IEdmType).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodesCommon.EdmLibraryExtensions_BaseType">
            <summary>Unreachable codepath in EdmLibraryExtensions.BaseType.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodesCommon.EdmLibraryExtensions_Clone_TypeKind">
            <summary>Unreachable codepath in EdmLibraryExtensions.Clone for unexpected type kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodesCommon.EdmLibraryExtensions_Clone_PrimitiveTypeKind">
            <summary>Unreachable codepath in EdmLibraryExtensions.Clone for unexpected primitive type kind.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataPayloadKindDetectionResult">
            <summary>Represents the result of running payload kind detection for a specified payload kind and format.</summary>
            <remarks>This class is used to represent the result of running payload kind detection using
            <see cref="M:Microsoft.Data.OData.ODataMessageReader.DetectPayloadKind"/>. See the documentation of that method for more
            information.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKindDetectionResult.payloadKind">
            <summary>The detected payload kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKindDetectionResult.format">
            <summary>The format for the detected payload kind.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataPayloadKindDetectionResult.#ctor(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Constructor.
            </summary>
            <param name="payloadKind">The detected payload kind.</param>
            <param name="format">The format for the detected payload kind.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPayloadKindDetectionResult.PayloadKind">
            <summary>Gets the detected payload kind.</summary>
            <returns>The detected payload kind.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataPayloadKindDetectionResult.Format">
            <summary>Gets the format for the detected payload kind.</summary>
            <returns>The format for the detected payload kind.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.FeedWithoutExpectedTypeValidator">
            <summary>
            Helper class to verify that all items of a collection are of the same kind and type.
            </summary>
            <remarks>This class is only used if no expected item type is specified for the collection; 
            otherwise all items are already validated against the expected item type.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.FeedWithoutExpectedTypeValidator.itemType">
            <summary>
            The base type for all entries in the feed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.FeedWithoutExpectedTypeValidator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.FeedWithoutExpectedTypeValidator.ValidateEntry(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Validates the type of an entry in a top-level feed.
            </summary>
            <param name="entityType">The type of the entry.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataSerializer">
            <summary>
            OData ATOM serializer for ATOM metadata in a service document
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataSerializer.WriteWorkspaceMetadata(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes the ATOM metadata for a single workspace element.
            </summary>
            <param name="workspace">The workspace element to get the metadata for and write it.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataSerializer.WriteResourceCollectionMetadata(Microsoft.Data.OData.ODataResourceCollectionInfo)">
            <summary>
            Writes the ATOM metadata for a single (resource) collection element.
            </summary>
            <param name="collection">The collection element to get the metadata for and write it.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentSerializer">
            <summary>
            OData ATOM serializer for service documents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentSerializer.atomServiceDocumentMetadataSerializer">
            <summary>
            The serializer for service document ATOM metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentSerializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentSerializer.WriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document in ATOM/XML format.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonWriterExtensions">
            <summary>
            Extension methods for the JSON writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriterExtensions.WriteJsonObjectValue(Microsoft.Data.OData.Json.IJsonWriter,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Microsoft.Data.OData.Json.IJsonWriter},Microsoft.Data.OData.ODataVersion)">
            <summary>
            Writes the json object value to the <paramref name="jsonWriter"/>.
            </summary>
            <param name="jsonWriter">The <see cref="T:Microsoft.Data.OData.Json.JsonWriter"/> to write to.</param>
            <param name="jsonObjectValue">Writes the given json object value to the underlying json writer.</param>
            <param name="injectPropertyAction">Called when the top-level object is started to possibly inject first property into the object.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriterExtensions.WritePrimitiveValue(Microsoft.Data.OData.Json.IJsonWriter,System.Object,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Writes a primitive value.
            </summary>
            <param name="jsonWriter">The <see cref="T:Microsoft.Data.OData.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value to write.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriterExtensions.WriteJsonArrayValue(Microsoft.Data.OData.Json.IJsonWriter,System.Collections.IEnumerable,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Writes the json array value.
            </summary>
            <param name="jsonWriter">The <see cref="T:Microsoft.Data.OData.Json.JsonWriter"/> to write to.</param>
            <param name="arrayValue">Writes the json array value to the underlying json writer.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriterExtensions.WriteJsonValue(Microsoft.Data.OData.Json.IJsonWriter,System.Object,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Writes the json value (primitive, IDictionary or IEnumerable) to the underlying json writer.
            </summary>
            <param name="jsonWriter">The <see cref="T:Microsoft.Data.OData.Json.JsonWriter"/> to write to.</param>
            <param name="propertyValue">value to write.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionSerializer">
            <summary>
            OData Verbose JSON serializer for collections.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer">
            <summary>
            OData Verbose JSON serializer for properties and value types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer">
            <summary>
            Base class for all OData Verbose JSON serializers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.verboseJsonOutputContext">
            <summary>
            The Verbose JSON output context to write to.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.WritePayloadStart">
            <summary>
            Writes the start of the entire JSON payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.WritePayloadStart(System.Boolean)">
            <summary>
            Writes the start of the entire JSON payload.
            </summary>
            <param name="disableResponseWrapper">When set to true the "d" response wrapper won't be written even in responses</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.WritePayloadEnd">
            <summary>
            Writes the end of the enitire JSON payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.WritePayloadEnd(System.Boolean)">
            <summary>
            Writes the end of the enitire JSON payload.
            </summary>
            <param name="disableResponseWrapper">When set to true the "d" response wrapper won't be written even in responses</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.WriteTopLevelPayload(System.Action)">
            <summary>
            Helper method to write the data wrapper around a JSON payload.
            </summary>
            <param name="payloadWriterAction">The action that writes the actual JSON payload that is being wrapped.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.WriteTopLevelPayload(System.Action,System.Boolean)">
            <summary>
            Helper method to write the data wrapper around a JSON payload.
            </summary>
            <param name="payloadWriterAction">The action that writes the actual JSON payload that is being wrapped.</param>
            <param name="disableResponseWrapper">When set to true the "d" response wrapper won't be written even in responses</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.WriteTopLevelError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Write a top-level error message.
            </summary>
            <param name="error">The error instance to write.</param>
            <param name="includeDebugInformation">A flag indicating whether error details should be written (in debug mode only) or not.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.UriToAbsoluteUriString(System.Uri)">
            <summary>
            Converts the specified URI into an absolute URI.
            </summary>
            <param name="uri">The uri to process.</param>
            <returns>An absolute URI which is either the specified <paramref name="uri"/> if it was absolute,
            or it's a combination of the BaseUri and the relative <paramref name="uri"/>.
            The return value is the string representation of the URI.</returns>
            <remarks>This method will fail if the specified <paramref name="uri"/> is relative and there's no base URI available.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.UriToUriString(System.Uri,System.Boolean)">
            <summary>
            Returns the string representation of the URI; Converts the URI into an absolute URI if the <paramref name="makeAbsolute"/> parameter is set to true.
            </summary>
            <param name="uri">The uri to process.</param>
            <param name="makeAbsolute">true, if the URI needs to be translated into an absolute URI; false otherwise.</param>
            <returns>If the <paramref name="makeAbsolute"/> parameter is set to true, then a string representation of an absolute URI which is either the 
            specified <paramref name="uri"/> if it was absolute, or it's a combination of the BaseUri and the relative <paramref name="uri"/>; 
            otherwise a string representation of the specified <paramref name="uri"/>.
            </returns>
            <remarks>This method will fail if <paramref name="makeAbsolute"/> is set to true and the specified <paramref name="uri"/> is relative and there's no base URI available.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.VerboseJsonOutputContext">
            <summary>
            Returns the <see cref="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext"/> which is to be used to write the content of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.JsonWriter">
            <summary>
            Returns the <see cref="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonSerializer.JsonWriter"/> which is to be used to write the content of the message.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.recursionDepth">
            <summary>
            The current recursion depth of values written by this serializer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WriteTopLevelProperty(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Write an <see cref="T:Microsoft.Data.OData.ODataProperty"/> to the given stream. This method creates an
            async buffered stream and writes the property to it.
            </summary>
            <param name="property">The property to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WriteProperties(Microsoft.Data.Edm.IEdmStructuredType,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty},System.Boolean,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Writes property names and value pairs.
            </summary>
            <param name="owningType">The <see cref="T:Microsoft.Data.Edm.IEdmStructuredType"/> of the entry (or null if not metadata is available).</param>
            <param name="properties">The enumeration of properties to write out.</param>
            <param name="isComplexValue">
            Whether the properties are being written for complex value. Also used for detecting whether stream properties
            are allowed as named stream properties should only be defined on ODataEntry instances
            </param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WritePrimitiveValue(System.Object,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a primitive value.
            Uses a registered primitive type converter to write the value if one is registered for the type, otherwise directly writes the value.
            </summary>
            <param name="value">The value to write.</param>
            <param name="collectionValidator">The collection validator instance.</param>
            <param name="expectedTypeReference">The expected type reference of the primitive value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WriteComplexValue(Microsoft.Data.OData.ODataComplexValue,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator)">
            <summary>
            Writes out the value of a complex property.
            </summary>
            <param name="complexValue">The complex value to write.</param>
            <param name="propertyTypeReference">The metadata type for the complex value.</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="collectionValidator">The collection validator instance to validate the type names and type kinds of collection items; null if no validation is needed.</param>
            <remarks>The current recursion depth should be a value, measured by the number of complex and collection values between
            this complex value and the top-level payload, not including this one.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WriteCollectionValue(Microsoft.Data.OData.ODataCollectionValue,Microsoft.Data.Edm.IEdmTypeReference,System.Boolean)">
            <summary>
            Writes out the value of a collection property.
            </summary>
            <param name="collectionValue">The collection value to write.</param>
            <param name="metadataTypeReference">The metadata type reference for the collection.</param>
            <param name="isOpenPropertyType">true if the type name belongs to an open property.</param>
            <remarks>The current recursion depth is measured by the number of complex and collection values between 
            this one and the top-level payload, not including this one.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WriteStreamReferenceValueContent(Microsoft.Data.OData.ODataStreamReferenceValue)">
            <summary>
            Writes the metadata content for a media resource or a named stream
            </summary>
            <param name="streamReferenceValue">The stream reference value for which to write the metadata</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WriteETag(System.String,System.String)">
            <summary>
            Writes the etag property with the given string value.
            </summary>
            <param name="etagName">The name of the ETag, e.g. media_etag or etag</param>
            <param name="etagValue">The value of the ETag</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.AssertRecursionDepthIsZero">
            <summary>
            Asserts that the current recursion depth of values is zero. This should be true on all calls into this class from outside of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WriteProperty(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmStructuredType,System.Boolean,Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Writes a name/value pair for a property.
            </summary>
            <param name="property">The property to write out.</param>
            <param name="owningType">The <see cref="T:Microsoft.Data.Edm.IEdmStructuredType"/> of the entry or complex type containing the property (or null if not metadata is available).</param>
            <param name="allowStreamProperty">Should pass in true if we are writing a property of an ODataEntry instance, false otherwise.
            Named stream properties should only be defined on ODataEntry instances.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.WriteStreamReferenceValue(Microsoft.Data.OData.ODataStreamReferenceValue)">
            <summary>
            Writes a stream property value.
            </summary>
            <param name="streamReferenceValue">The stream reference value to be written</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.IncreaseRecursionDepth">
            <summary>
            Increases the recursion depth of values by 1. This will throw if the recursion depth exceeds the current limit.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer.DecreaseRecursionDepth">
            <summary>
            Decreases the recursion depth of values by 1.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionSerializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionSerializer.WriteCollectionStart">
            <summary>
            Writes the start of a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionSerializer.WriteCollectionEnd">
            <summary>
            Writes the end of a collection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkSerializer">
            <summary>
            OData Verbose JSON serializer for entity reference links.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkSerializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkSerializer.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Writes a single top-level Uri in response to a $links query.
            </summary>
            <param name="link">The entity reference link to write out.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkSerializer.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary>
            Writes a set of links (Uris) in response to a $links query; includes optional count and next-page-link information.
            </summary>
            <param name="entityReferenceLinks">The set of entity reference links to write out.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkSerializer.WriteEntityReferenceLinkImplementation(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Writes a single Uri in response to a $links query.
            </summary>
            <param name="entityReferenceLink">The entity reference link to write out.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkSerializer.WriteEntityReferenceLinksImplementation(Microsoft.Data.OData.ODataEntityReferenceLinks,System.Boolean)">
            <summary>
            Writes a set of links (Uris) in response to a $links query; includes optional count and next-page-link information.
            </summary>
            <param name="entityReferenceLinks">The set of entity reference links to write out.</param>
            <param name="includeResultsWrapper">true if the 'results' wrapper should be included into the payload; otherwise false.</param>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedSerializer">
            <summary>
            OData Verbose JSON serializer for entries and feeds.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedSerializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedSerializer.WriteEntryMetadata(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ProjectedPropertiesAnnotation,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Writes the __metadata property and its content for an entry
            </summary>
            <param name="entry">The entry for which to write the metadata.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
            <param name="entryEntityType">The entity type of the entry to write.</param>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedSerializer.WriteOperations(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataOperation},System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes "actions" or "functions" metadata.
            </summary>
            <param name="operations">The operations to write.</param>
            <param name="operationName">The name of the property used for the operations.</param>
            <param name="isAction">true when writing the entry's actions; false when writing the entry's functions.</param>
            <param name="writingJsonLight">true if we're writing JSON lite, false if we're writing verbose JSON.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedSerializer.WriteAssociationLink(Microsoft.Data.OData.ODataAssociationLink,Microsoft.Data.OData.DuplicatePropertyNamesChecker)">
            <summary>
            Writes the metadata content for an association link
            </summary>
            <param name="associationLink">The association link to write.</param>
            <param name="duplicatePropertyNamesChecker">The checker instance for duplicate property names.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedSerializer.WriteOperationMetadataGroup(System.Linq.IGrouping{System.String,Microsoft.Data.OData.ODataOperation})">
            <summary>
            Writes a group of operation (all actions or all functions) that have the same "metadata".
            </summary>
            <remarks>
            Expects the actions or functions scope to already be open.
            </remarks>
            <param name="operations">A grouping of operations that are all actions or all functions and share the same "metadata".</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedSerializer.WriteOperation(Microsoft.Data.OData.ODataOperation)">
            <summary>
            Writes an operation (an action or a function).
            </summary>
            <remarks>
            Expects the write to already have written the "rel value" and opened an array.
            </remarks>
            <param name="operation">The operation to write.</param>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext">
            <summary>
            Verbose JSON format output context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.typeNameOracle">
            <summary>
            The oracle to use to determine the type name to write for entries and values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.TextWriter,Microsoft.Data.OData.ODataMessageWriterSettings,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="textWriter">The text writer to write to.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="model">The model to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="messageStream">The message stream to write the payload to.</param>
            <param name="encoding">The encoding to use for the payload.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="synchronous">true if the output should be written synchronously; false if it should be written asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteInStreamError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to flush the output before the method returns.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteInStreamErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>Task which represents the pending write operation.</returns>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to make sure that all the data up to this point are written before
            the in-stream error is written.
            It is the responsibility of this method to flush the output before the task finishes.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataFeedWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataFeedWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataEntryWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataEntryWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataCollectionWriter(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>The created collection writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataCollectionWriterAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>A running task for the created collection writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataParameterWriter(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>The created parameter writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataParameterWriterAsync(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>A running task for the created parameter writer.</returns>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteServiceDocumentAsync(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Asynchronously writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
            <returns>A task representing the asynchronous operation of writing the service document.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteProperty(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WritePropertyAsync(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write</param>
            <returns>A task representing the asynchronous operation of writing the property.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>A task representing the asynchronous operation of writing the error.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteEntityReferenceLinksAsync(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <returns>A task representing the asynchronous writing of the entity reference links.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The entity reference link to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteEntityReferenceLinkAsync(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The link result to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
            <returns>A running task representing the writing of the link.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataFeedWriterImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataEntryWriterImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataCollectionWriterImplementation(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>The created collection writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.CreateODataParameterWriterImplementation(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>The created parameter writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteInStreamErrorImplementation(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an in-stream error.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WritePropertyImplementation(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The property to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteServiceDocumentImplementation(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document with the specified <paramref name="defaultWorkspace"/> 
            as message payload.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteErrorImplementation(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteEntityReferenceLinksImplementation(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary>
            Writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.WriteEntityReferenceLinkImplementation(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The entity reference link to write as message payload.</param>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext.TypeNameOracle">
            <summary>
            Returns the oracle to use when determining the type name to write for entries and values.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonServiceDocumentSerializer">
            <summary>
            OData Verbose JSON serializer for service documents.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonServiceDocumentSerializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonServiceDocumentSerializer.WriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Writes a service document in JSON format.
            </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
        </member>
        <member name="T:Microsoft.Data.OData.NonDisposingStream">
            <summary>
            Stream wrapper for the message stream to ignore the Stream.Dispose method so that readers/writers on top of
            it can be disposed without affecting it.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.NonDisposingStream.innerStream">
            <summary>
            Stream that is being wrapped.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.#ctor(System.IO.Stream)">
            <summary>
            Constructs an instance of the stream wrapper class.
            </summary>
            <param name="innerStream">Stream that is being wrapped.</param>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.Flush">
            <summary>
            Flush the stream to the underlying storage.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins a read operation from the stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="callback">The async callback.</param>
            <param name="state">The async state.</param>
            <returns>Async result representing the asynchornous operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.EndRead(System.IAsyncResult)">
            <summary>
            Ends a read operation from the stream.
            </summary>
            <param name="asyncResult">The async result representing the read operation.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the stream.
            </summary>
            <param name="offset">The offset to seek to.</param>
            <param name="origin">The origin of the seek operation.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The length in bytes to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation to the stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The async callback.</param>
            <param name="state">The async state.</param>
            <returns>Async result representing the write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.NonDisposingStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends the asynchronous write operation.
            </summary>
            <param name="asyncResult">Async result representing the write operation.</param>
        </member>
        <member name="P:Microsoft.Data.OData.NonDisposingStream.CanRead">
            <summary>
            Determines if the stream can read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.NonDisposingStream.CanSeek">
            <summary>
            Determines if the stream can seek.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.NonDisposingStream.CanWrite">
            <summary>
            Determines if the stream can write.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.NonDisposingStream.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.NonDisposingStream.Position">
            <summary>
            Gets or sets the position in the stream.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMetadataOutputContext">
            <summary>
            RAW format output context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMetadataOutputContext.messageOutputStream">
            <summary>The message output stream.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMetadataOutputContext.xmlWriter">
            <summary>The XmlWriter to write to.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataOutputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="messageStream">The message stream to write the payload to.</param>
            <param name="encoding">The encoding to use for the payload.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="synchronous">true if the output should be written synchronously; false if it should be written asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataOutputContext.Flush">
            <summary>
            Synchronously flush the writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataOutputContext.WriteInStreamError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to flush the output before the method returns.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataOutputContext.WriteMetadataDocument">
            <summary>
            Writes the metadata document as the message body.
            </summary>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataOutputContext.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="T:Microsoft.Data.OData.ODataRawOutputContext">
            <summary>
            RAW format output context. Used by RAW values and batch.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawOutputContext.encoding">
            <summary>The encoding to use for the output.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawOutputContext.messageOutputStream">
            <summary>The message output stream.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawOutputContext.asynchronousOutputStream">
            <summary>The asynchronous output stream if we're writing asynchronously.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawOutputContext.outputStream">
            <summary>The output stream to write to (both sync and async cases).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawOutputContext.outputInStreamErrorListener">
            <summary>Listener to notify when writing in-stream errors.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawOutputContext.rawValueWriter">
            <summary>RawValueWriter used to write actual values to the stream.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="format">The format for this output context.</param>
            <param name="messageStream">The message stream to write the payload to.</param>
            <param name="encoding">The encoding to use for the payload.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="synchronous">true if the output should be written synchronously; false if it should be written asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.Flush">
            <summary>
            Synchronously flush the writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.FlushAsync">
            <summary>
            Asynchronously flush the writer.
            </summary>
            <returns>Task which represents the pending flush operation.</returns>
            <remarks>The method should not throw directly if the flush operation itself fails, it should instead return a faulted task.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.WriteInStreamError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to flush the output before the method returns.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.WriteInStreamErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary>
            Writes an <see cref="T:Microsoft.Data.OData.ODataError"/> into the message payload.
            </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation">
            A flag indicating whether debug information (e.g., the inner error from the <paramref name="error"/>) should 
            be included in the payload. This should only be used in debug scenarios.
            </param>
            <returns>Task which represents the pending write operation.</returns>
            <remarks>
            This method is called if the ODataMessageWriter.WriteError is called once some other
            write operation has already started.
            The method should write the in-stream error representation for the specific format into the current payload.
            Before the method is called no flush is performed on the output context or any active writer.
            It is the responsibility of this method to make sure that all the data up to this point are written before
            the in-stream error is written.
            It is the responsibility of this method to flush the output before the task finishes.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.CreateODataBatchWriter(System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataBatchWriter"/> to write a batch of requests or responses.
            </summary>
            <param name="batchBoundary">The boundary string for the batch structure itself.</param>
            <returns>The created batch writer.</returns>
            <remarks>We don't plan to make this public!</remarks>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.CreateODataBatchWriterAsync(System.String)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataBatchWriter"/> to write a batch of requests or responses.
            </summary>
            <param name="batchBoundary">The boundary string for the batch structure itself.</param>
            <returns>A running task for the created batch writer.</returns>
            <remarks>We don't plan to make this public!</remarks>
            <remarks>The write must flush the output when it's finished (inside the last Write call).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.WriteValue(System.Object)">
            <summary>
            Writes a single value as the message body.
            </summary>
            <param name="value">The value to write.</param>
            <remarks>It is the responsibility of this method to flush the output before the method returns.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.WriteValueAsync(System.Object)">
            <summary>
            Asynchronously writes a single value as the message body.
            </summary>
            <param name="value">The value to write.</param>
            <returns>A running task representing the writing of the value.</returns>
            <remarks>It is the responsibility of this method to flush the output before the task finishes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.InitializeRawValueWriter">
            <summary>
            Initialized a new text writer over the message payload stream.
            </summary>
            <remarks>This can only be called if the text writer was not yet initialized or it has been closed.
            It can be called several times with CloseWriter calls in between though.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.CloseWriter">
            <summary>
            Closes the text writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.VerifyNotDisposed">
            <summary>
            Verifies the output context was not yet disposed, fails otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.FlushBuffers">
            <summary>
            Flushes all buffered data to the underlying stream synchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.FlushBuffersAsync">
            <summary>
            Flushes all buffered data to the underlying stream asynchronously.
            </summary>
            <returns>Task which represents the pending operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.WriteValueImplementation(System.Object)">
            <summary>
            Writes a single value as the message body.
            </summary>
            <param name="value">The value to write.</param>
            <remarks>Once the method returns all the data should be written, the only other call after this will be Dispose on the output context.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawOutputContext.CreateODataBatchWriterImplementation(System.String)">
            <summary>
            Creates a batch writer.
            </summary>
            <param name="batchBoundary">The boundary string for the batch structure itself.</param>
            <returns>The newly created batch writer.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataRawOutputContext.OutputStream">
            <summary>
            The output stream to write the payload to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataRawOutputContext.TextWriter">
            <summary>
            The text writer to use to write text into the payload.
            </summary>
            <remarks>
            InitializeRawValueWriter must be called before this is used.
            
            Also, within this class we should be using RawValueWriter for everything. Ideally we wouldn't leak the TextWriter out, but
            the Batch writer needs it at the moment.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.ODataNullValueBehaviorKind">
            <summary> Represents the behavior of readers when reading property with null value. </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataNullValueBehaviorKind.Default">
            <summary>
            The default behavior - this means validate the null value against the declared type
            and then report the null value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataNullValueBehaviorKind.IgnoreValue">
            <summary>
            This means to not report the value and not validate it against the model.
            </summary>
            <remarks>
            This setting can be used to correctly work with clients that send null values
            for uninitialized properties in requests instead of omitting them altogether.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataNullValueBehaviorKind.DisableValidation">
            <summary>
            This means to report the value, but not validate it against the model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat">
            <summary>
            The verbose JSON OData format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.ToString">
            <summary>
            The text representation - the name of the format.
            </summary>
            <returns>The name of the format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.DetectPayloadKind(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.DetectPayloadKind(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.CreateInputContext(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>The newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.CreateOutputContext(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>The newly created output context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataResponseMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataRequestMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.CreateInputContextAsync(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Asynchronously creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>Task which when completed returned the newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.CreateOutputContextAsync(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>Task which represents the pending create operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonFormat.DetectPayloadKindImplementation(System.IO.Stream,System.Boolean,System.Boolean,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="messageStream">The message stream to read from for payload kind detection.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchFormat">
            <summary>
            The $batch OData format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.ToString">
            <summary>
            The text representation - the name of the format.
            </summary>
            <returns>The name of the format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.DetectPayloadKind(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.DetectPayloadKind(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.CreateInputContext(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>The newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.CreateOutputContext(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>The newly created output context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataResponseMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataRequestMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.CreateInputContextAsync(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Asynchronously creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>Task which when completed returned the newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.CreateOutputContextAsync(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>Task which represents the pending create operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchFormat.DetectPayloadKindImplementation(Microsoft.Data.OData.MediaType)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="contentType">The content type of the message.</param>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMetadataFormat">
            <summary>
            The metadata OData format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.ToString">
            <summary>
            The text representation - the name of the format.
            </summary>
            <returns>The name of the format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.DetectPayloadKind(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.DetectPayloadKind(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.CreateInputContext(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>The newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.CreateOutputContext(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>The newly created output context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataResponseMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataRequestMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.CreateInputContextAsync(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Asynchronously creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>Task which when completed returned the newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.CreateOutputContextAsync(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>Task which represents the pending create operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataFormat.DetectPayloadKindImplementation(System.IO.Stream,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="messageStream">The message stream to read from for payload kind detection.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero or one payload kinds depending on whether the metadata payload kind was detected or not.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataUndeclaredPropertyBehaviorKinds">
            <summary>Enumerates the behavior of readers when reading undeclared property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataUndeclaredPropertyBehaviorKinds.None">
            <summary>
            The default behavior - the reader will fail if it finds a property which is not declared by the model
            and the type is not open.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataUndeclaredPropertyBehaviorKinds.IgnoreUndeclaredValueProperty">
            <summary>
            The reader will skip reading the property if it's not declared by the model and the current type is not open.
            </summary>
            <remarks>
            This flag can only be used when reading responses.
            All information about the undeclared property is going to be ignored, so for example ATOM metadata related to that property
            will not be reported either.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataUndeclaredPropertyBehaviorKinds.ReportUndeclaredLinkProperty">
            <summary>
            The reader will read and report link properties which are not declared by the model.
            </summary>
            <remarks>
            This flag can only be used when reading responses.
            If a link property in the payload is defined in the model it will be read as usual. If it is not declared
            it will still be read and reported, but it won't be validated against the model.
            
            Link properties are:
            - Navigation links
            - Association links
            - Stream properties
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ExpressionConstants">
            <summary>This type provides constants used in URI query expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.It">
            <summary>"$it" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordAdd">
            <summary>"add" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordAnd">
            <summary>"and" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordAscending">
            <summary>"asc" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordDescending">
            <summary>"desc" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordDivide">
            <summary>"div" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordModulo">
            <summary>"mod" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordMultiply">
            <summary>"mul" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordNot">
            <summary>"not" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordOr">
            <summary>"or" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordSub">
            <summary>"sub" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolNegate">
            <summary>'-' constant to represent an negate unary operator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolEqual">
            <summary>'=' constant to represent an assignment in name=value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolComma">
            <summary>',' constant to represent an value list separator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolForwardSlash">
            <summary>'/' constant to represent the forward slash used in a query.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolOpenParen">
            <summary>'(' constant to represent an open parenthesis.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolClosedParen">
            <summary>')' constant to represent an closed parenthesis.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolQueryStart">
            <summary>'?' constant to represent the start of the query part.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolQueryConcatenate">
            <summary>'&amp;' constant to represent the concatenation of query parts.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolSingleQuote">
            <summary>'\'' constant to represent a single quote as prefix/suffix for literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolSingleQuoteEscaped">
            <summary>"''" constant to represent a single-quote escape character in a string literal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.SymbolEscapedSpace">
            <summary>" " constant to represent a space character in a Uri query part.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.InlineCountAllPages">
            <summary>The 'allpages' value for the '$inlinecount' query option</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.InlineCountNone">
            <summary>The 'none' value for the '$inlinecount' query option</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordEqual">
            <summary>"eq" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordFalse">
            <summary>"false" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordGreaterThan">
            <summary>"gt" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordGreaterThanOrEqual">
            <summary>"ge" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordLessThan">
            <summary>"lt" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordLessThanOrEqual">
            <summary>"le" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordNotEqual">
            <summary>"ne" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordNull">
            <summary>"null" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.KeywordTrue">
            <summary>"true" keyword for expressions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.UnboundFunctionCast">
            <summary> "cast" function </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.UnboundFunctionIsOf">
            <summary> "isof function </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.UnboundFunctionLength">
            <summary> Spatial length function </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.UnboundFunctionIntersects">
            <summary> Spatial intersects function. </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.InfinityLiteral">
            <summary>"INF" literal used to represent infinity.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.NaNLiteral">
            <summary>"NaN" literal used to represent not-a-number values.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralPrefixDateTime">
            <summary>'datetime' constant prefixed to datetime literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralPrefixDateTimeOffset">
            <summary>'datetimeoffset' constant prefixed to datetimeoffset literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralPrefixTime">
            <summary>'time' constant prefixed to time literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralPrefixGeometry">
            <summary>'geometry' constant prefixed to geometry literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralPrefixGeography">
            <summary>'geography' constant prefixed to geography literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralPrefixGuid">
            <summary>'guid' constant prefixed to guid literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralPrefixShortBinary">
            <summary>'X': Prefix to binary type string representation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralPrefixBinary">
            <summary>'binary' constant prefixed to binary literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralSuffixInt64">
            <summary>'L': Suffix for long (int64) type's string representation</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralSuffixSingle">
            <summary>'f': Suffix for float (single) type's string representation</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralSuffixDouble">
            <summary>'D': Suffix for double (Real) type's string representation</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralSuffixDecimal">
            <summary>'M': Suffix for decimal type's string representation</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.LiteralSingleQuote">
            <summary>'datetime' constant prefixed to datetime literals.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.QueryOptionFilter">
            <summary> the filter query option </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.QueryOptionOrderby">
            <summary> the orderby query option </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.QueryOptionTop">
            <summary> the top query option </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.QueryOptionSkip">
            <summary> the skip query option </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.QueryOptionInlineCount">
            <summary> the inlinecount query option </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.QueryOptionSelect">
            <summary> the select query option </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.ExpressionConstants.QueryOptionExpand">
            <summary> the expand query option </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationWriteStream">
            <summary>
            A stream handed to clients from ODataBatchOperationMessage.GetStream or ODataBatchOperationMessage.GetStreamAsync. 
            This stream communicates status changes to the owning batch writer (via IODataBatchOperationListener) 
            to properly flush buffered data and move the batch writer's state machine forward.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationStream">
            <summary>
            A stream handed to clients from ODataBatchOperationMessage.GetStream or ODataBatchOperationMessage.GetStreamAsync. 
            This stream communicates status changes to an IODataBatchOperationListener instance.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationStream.listener">
            <summary>Listener interface to be notified of operation changes.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationStream.#ctor(Microsoft.Data.OData.IODataBatchOperationListener)">
            <summary>
            Constructor.
            </summary>
            <param name="listener">Listener interface to be notified of operation changes.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the stream. This operation is not supported by this stream.
            </summary>
            <param name="offset">The offset to seek to.</param>
            <param name="origin">The origin of the seek operation.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationStream.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True if called from Dispose; false if called form the finalizer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationStream.ValidateNotDisposed">
            <summary>
            Validates that the stream was not already disposed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationWriteStream.batchStream">
            <summary>The batch stream underlying this operation stream.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationWriteStream.#ctor(System.IO.Stream,Microsoft.Data.OData.IODataBatchOperationListener)">
            <summary>
            Constructor.
            </summary>
            <param name="batchStream">The underlying stream to write the message to.</param>
            <param name="listener">Listener interface to be notified of operation changes.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationWriteStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The length in bytes to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationWriteStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationWriteStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Writes to the stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The callback to be called when the asynchronous operation completes.</param>
            <param name="state">A custom state object to be associated with the asynchronous operation.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> for the asynchronous writing of the buffer to the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationWriteStream.EndWrite(System.IAsyncResult)">
            <summary>
            Finish the asynchronous write operation.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> returned from BaginWrite.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationWriteStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This operation is not supported by this stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationWriteStream.Flush">
            <summary>
            Flush the stream to the underlying batch stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationWriteStream.Dispose(System.Boolean)">
            <summary>
            Dispose the operation stream.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationWriteStream.CanRead">
            <summary>
            Determines if the stream can read - this one can't
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationWriteStream.CanSeek">
            <summary>
            Determines if the stream can seek - this one can't
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationWriteStream.CanWrite">
            <summary>
            Determines if the stream can write - this one can
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationWriteStream.Length">
            <summary>
            Returns the length of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationWriteStream.Position">
            <summary>
            Gets or sets the position in the stream. Setting of the position is not supported since the stream doesn't support seeking.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationReadStream">
            <summary>
            A stream handed to clients from ODataBatchOperationMessage.GetStream or ODataBatchOperationMessage.GetStreamAsync. 
            This stream communicates status changes to the owning batch reader (via IODataBatchOperationListener) 
            to prevent clients to use the batch reader while a content stream is still in use.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationReadStream.batchReaderStream">
            <summary>
            The batch stream underlying this operation stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.#ctor(Microsoft.Data.OData.ODataBatchReaderStream,Microsoft.Data.OData.IODataBatchOperationListener)">
            <summary>
            Constructor.
            </summary>
            <param name="batchReaderStream">The underlying stream to read from.</param>
            <param name="listener">Listener interface to be notified of operation changes.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.Flush">
            <summary>
            Flush the stream; not supported for a read stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The length in bytes to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.Create(Microsoft.Data.OData.ODataBatchReaderStream,Microsoft.Data.OData.IODataBatchOperationListener,System.Int32)">
            <summary>
            Create a batch operation read stream over the specified batch stream with a given content length.
            </summary>
            <param name="batchReaderStream">The batch stream underlying the operation stream to create.</param>
            <param name="listener">The batch operation listener.</param>
            <param name="length">The content length of the operation stream.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.ODataBatchOperationReadStream"/> to read the content of a batch operation from.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.Create(Microsoft.Data.OData.ODataBatchReaderStream,Microsoft.Data.OData.IODataBatchOperationListener)">
            <summary>
            Create a batch operation read stream over the specified batch stream using the batch delimiter to detect the end of the stream.
            </summary>
            <param name="batchReaderStream">The batch stream underlying the operation stream to create.</param>
            <param name="listener">The batch operation listener.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.ODataBatchOperationReadStream"/> to read the content of a batch operation from.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationReadStream.CanRead">
            <summary>
            Determines if the stream can read - this one can
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationReadStream.CanSeek">
            <summary>
            Determines if the stream can seek - this one can't
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationReadStream.CanWrite">
            <summary>
            Determines if the stream can write - this one can't
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationReadStream.Length">
            <summary>
            Returns the length of the stream. Not supported by this stream.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationReadStream.Position">
            <summary>
            Gets or sets the position in the stream. Not supported by this stream.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationReadStream.ODataBatchOperationReadStreamWithLength">
            <summary>
            A batch operation stream with the content length specified.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationReadStream.ODataBatchOperationReadStreamWithLength.length">
            <summary>The length of the operation content.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.ODataBatchOperationReadStreamWithLength.#ctor(Microsoft.Data.OData.ODataBatchReaderStream,Microsoft.Data.OData.IODataBatchOperationListener,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="batchReaderStream">The underlying batch stream to write the message to.</param>
            <param name="listener">Listener interface to be notified of operation changes.</param>
            <param name="length">The total length of the stream.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.ODataBatchOperationReadStreamWithLength.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationReadStream.ODataBatchOperationReadStreamWithDelimiter">
            <summary>
            A batch operation read stream with no content length so we have to check for the boundary.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationReadStream.ODataBatchOperationReadStreamWithDelimiter.exhausted">
            <summary>true if the stream has been exhausted and no further reads can happen; otherwise false.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.ODataBatchOperationReadStreamWithDelimiter.#ctor(Microsoft.Data.OData.ODataBatchReaderStream,Microsoft.Data.OData.IODataBatchOperationListener)">
            <summary>
            Constructor.
            </summary>
            <param name="batchReaderStream">The underlying batch stream to write the message to.</param>
            <param name="listener">Listener interface to be notified of operation changes.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationReadStream.ODataBatchOperationReadStreamWithDelimiter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchUtils">
            <summary>
            Helper methods used by the ODataBatchWriter and ODataBatchReader (and related classes).
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUtils.CreateOperationRequestUri(System.Uri,System.Uri,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates the URI for a batch request operation.
            </summary>
            <param name="uri">The uri to process.</param>
            <param name="baseUri">The base Uri to use.</param>
            <param name="urlResolver">An optional custom URL resolver to resolve URLs for writing them into the payload.</param>
            <returns>An URI to be used in the request line of a batch request operation. It uses the <paramref name="urlResolver"/>
            first and falls back to the defaullt URI building schema if the no URL resolver is specified or the URL resolver
            returns null. In the default scheme, the method either returns the specified <paramref name="uri"/> if it was absolute,
            or it's combination with the <paramref name="baseUri"/> if it was relative.</returns>
            <remarks>
            This method will fail if no custom resolution is implemented and the specified <paramref name="uri"/> is 
            relative and there's no base URI available.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUtils.CreateBatchOperationReadStream(Microsoft.Data.OData.ODataBatchReaderStream,Microsoft.Data.OData.ODataBatchOperationHeaders,Microsoft.Data.OData.IODataBatchOperationListener)">
            <summary>
            Creates a batch operation stream from the specified batch stream.
            </summary>
            <param name="batchReaderStream">The batch stream to create the operation read stream for.</param>
            <param name="headers">The headers of the current part; based on the header we create different, optimized stream implementations.</param>
            <param name="operationListener">The operation listener to be passed to the newly created read stream.</param>
            <returns>A new <see cref="T:Microsoft.Data.OData.ODataBatchOperationReadStream"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUtils.CreateBatchOperationWriteStream(System.IO.Stream,Microsoft.Data.OData.IODataBatchOperationListener)">
            <summary>
            Creates a batch operation write stream over the specified output stream.
            </summary>
            <param name="outputStream">The output stream to create the operation write stream over.</param>
            <param name="operationListener">The operation listener to be passed to the newly created write stream.</param>
            <returns>A new <see cref="T:Microsoft.Data.OData.ODataBatchOperationWriteStream"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUtils.EnsureArraySize(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Grows the specified byte array by the specified amount.
            </summary>
            <param name="buffer">The byte array to grow.</param>
            <param name="numberOfBytesInBuffer">The number of bytes currently in the buffer.</param>
            <param name="requiredByteCount">The number of bytes to be added to the array.</param>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchReaderStreamScanResult">
            <summary>
            An enumeration representing the result of a scan operation through 
            the batch reader stream's buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamScanResult.NoMatch">
            <summary>No match with the requested boundary was found (not even a partial one).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamScanResult.PartialMatch">
            <summary>A partial match with the requested boundary was found.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamScanResult.Match">
            <summary>A complete match with the requested boundary was found.</summary>
            <remarks>
            This is only returned if we could also check whether the boundary is an end
            boundary or not; otherwise a partial match is returned.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchReaderStreamBuffer">
            <summary>
            This class represents the internal buffer of the <see cref="T:Microsoft.Data.OData.ODataBatchReaderStream"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.BufferLength">
            <summary>The size of the look-ahead buffer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.MaxLineFeedLength">
            <summary>Length of the longest supported line terminator character sequence; makes the code easier to read.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.TwoDashesLength">
            <summary>The length of two '-' characters to make the code easier to read.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.bytes">
            <summary>The byte array storing the actual bytes of the buffer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.currentReadPosition">
            <summary>The current position inside the buffer.</summary>
            <remarks>This is the position of the byte that is the next to be read.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.numberOfBytesInBuffer">
            <summary>The number of (not yet consumed) bytes currently in the buffer.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.SkipTo(System.Int32)">
            <summary>
            Skip to the specified position in the buffer. 
            Adjust the current position and the number of bytes in the buffer.
            </summary>
            <param name="newPosition">The position to skip to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.RefillFrom(System.IO.Stream,System.Int32)">
            <summary>
            Refills the buffer from the specified stream.
            </summary>
            <param name="stream">The stream to refill the buffer from.</param>
            <param name="preserveFrom">The index in the current buffer starting from which the 
            currently buffered data should be preserved.</param>
            <returns>true if the underlying stream got exhausted while refilling.</returns>
            <remarks>This method will first shift any data that is to be preserved to the beginning
            of the buffer and then refill the rest of the buffer from the <paramref name="stream"/>.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.ScanForLineEnd(System.Int32@,System.Int32@)">
            <summary>
            Scans the current buffer for a line end.
            </summary>
            <param name="lineEndStartPosition">The start position of the line terminator or -1 if not found.</param>
            <param name="lineEndEndPosition">The end position of the line terminator or -1 if not found.</param>
            <returns>An enumeration value indicating whether the line termintor was found completely, partially or not at all.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.ScanForBoundary(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Scans the current buffer for the specified boundary.
            </summary>
            <param name="boundaries">The boundary strings to search for; this enumerable is sorted from the inner-most boundary
            to the top-most boundary. The boundary strings don't include the leading line terminator or the leading dashes.</param>
            <param name="maxDataBytesToScan">Stop if no boundary (or boundary start) is found after this number of bytes.</param>
            <param name="boundaryStartPosition">The start position of the boundary or -1 if not found.
            Note that the start position is the first byte of the leading line terminator.</param>
            <param name="boundaryEndPosition">The end position of the boundary or -1 if not found.
            Note that the end position is the last byte of the trailing line terminator.</param>
            <param name="isEndBoundary">true if the boundary is an end boundary (followed by two dashes); otherwise false.</param>
            <param name="isParentBoundary">true if the detected boundary is the parent boundary; otherwise false.</param>
            <returns>An enumeration value indicating whether the boundary was completely, partially or not found in the buffer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.ScanForBoundaryStart(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Scans the current buffer for a boundary start, which is either a line feed or two dashes (since we don't require the leading line feed).
            </summary>
            <param name="scanStartIx">The index at which to start scanning for the boundary start.</param>
            <param name="maxDataBytesToScan">Stop if no boundary start was found after this number of non end-of-line bytes.</param>
            <param name="lineEndStartPosition">The start position of the line end or -1 if not found.</param>
            <param name="boundaryDelimiterStartPosition">The start position of the boundary delimiter or -1 if not found.</param>
            <returns>An enumeration value indicating whether the boundary start was completely, partially or not found in the buffer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.ScanForLineEnd(System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Scans the current buffer for a line end.
            </summary>
            <param name="scanStartIx">The index at which to start scanning for the line terminator.</param>
            <param name="maxDataBytesToScan">Stop if no line end (or beginning of line end) was found after this number of non end-of-line bytes.</param>
            <param name="allowLeadingWhitespaceOnly">true if only whitespace data bytes are expected before the end-of-line characters; otherwise false.</param>
            <param name="lineEndStartPosition">The start position of the line terminator or -1 if not found.</param>
            <param name="lineEndEndPosition">The end position of the line terminator or -1 if not found.</param>
            <param name="endOfBufferReached">true if the end of the buffer was reached while scanning for the line end; otherwise false.</param>
            <returns>An enumeration value indicating whether the line termintor was found completely, partially or not at all.</returns>
            <remarks>This method only returns <see cref="F:Microsoft.Data.OData.ODataBatchReaderStreamScanResult.PartialMatch"/> if we found the start
            of a line terminator at the last character in the buffer.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.MatchBoundary(System.Int32,System.Int32,System.String,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Check whether the bytes in the buffer at the specified start index match the expected boundary string.
            </summary>
            <param name="lineEndStartPosition">The start of the line feed preceding the boundary (if present).</param>
            <param name="boundaryDelimiterStartPosition">The start position of the boundary delimiter.</param>
            <param name="boundary">The boundary string to check for.</param>
            <param name="boundaryStartPosition">If a match is detected, the start of the boundary delimiter, 
            i.e., either the start of the leading line feed or of the leading dashes.</param>
            <param name="boundaryEndPosition">If a match is detected, the position of the boundary end; otherwise -1.</param>
            <param name="isEndBoundary">true if the detected boundary is an end boundary; otherwise false.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataBatchReaderStreamScanResult"/> indicating whether a match, a partial match or no match was found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.MatchBoundary(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Try to match the specified boundary string starting at the specified position.
            </summary>
            <param name="boundary">The boundary string to search for; this does not include 
            the leading line terminator or the leading dashes.</param>
            <param name="startIx">The index at which to start matching the boundary.</param>
            <param name="matchLength">The number of characters to match.</param>
            <param name="isEndBoundary">true if the boundary string is used in an end boundary; otherwise false.</param>
            <returns>true if it was established that the buffer starting at <paramref name="startIx"/>
            matches the <paramref name="boundary"/>; otherwise false.</returns>
            <remarks>This method also returns false if the boundary string was completly matched against the
            buffer but it could not be determined whether it is used in an end boundary or not.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.ShiftToBeginning(System.Int32)">
            <summary>
            Shifts all bytes in the buffer after a specified start index to the beginning of the buffer.
            </summary>
            <param name="startIndex">The start index where to start shifting.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.Bytes">
            <summary>
            The byte array that acts as the actual storage of the buffered data.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.CurrentReadPosition">
            <summary>
            The current position inside the buffer.
            </summary>
            <remarks>This is the position of the byte that is the next to be read.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.NumberOfBytesInBuffer">
            <summary>
            The number of (not yet consumed) bytes currently in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReaderStreamBuffer.Item(System.Int32)">
            <summary>
            Indexer into the byte buffer.
            </summary>
            <param name="index">The position in the buffer to get.</param>
            <returns>The byte at position <paramref name="index"/> in the buffer.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchReaderStream">
            <summary>
            Class used by the <see cref="T:Microsoft.Data.OData.ODataBatchReader"/> to read the various pieces of a batch payload.
            </summary>
            <remarks>
            This stream separates a batch payload into multiple parts by scanning ahead and matching
            a boundary string against the current payload.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.LineBufferLength">
            <summary>
            The default length for the line buffer byte array used to read lines; expecting lines to normally be less than 2000 bytes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.lineBuffer">
            <summary>
            The byte array used for reading lines from the stream. We cache the byte array on the stream instance
            rather than allocating a new one for each ReadLine call.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.inputContext">
            <summary>The input context to read the content from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.batchBoundary">
            <summary>The boundary string for the batch structure itself.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.batchBuffer">
            <summary>The buffer used by the batch reader stream to scan for boundary strings.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.batchEncoding">
            <summary>The encoding to use to read from the batch stream.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.changesetBoundary">
            <summary>The boundary string for a changeset (or null if not in a changeset part).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.changesetEncoding">
            <summary>The encoding for a given changeset.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderStream.underlyingStreamExhausted">
            <summary>
            true if the underlying stream was exhausted during a read operation; we won't try to read from the 
            underlying stream again once it was exhausted.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.#ctor(Microsoft.Data.OData.ODataRawInputContext,System.String,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input context to read the content from.</param>
            <param name="batchBoundary">The boundary string for the batch structure itself.</param>
            <param name="batchEncoding">The encoding to use to read from the batch stream.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ResetChangeSetBoundary">
            <summary>
            Resets the changeset boundary at the end of the changeset.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.SkipToBoundary(System.Boolean@,System.Boolean@)">
            <summary>
            Skips all the data in the stream until a boundary is found.
            </summary>
            <param name="isEndBoundary">true if the boundary that was found is an end boundary; otherwise false.</param>
            <param name="isParentBoundary">true if the detected boundary is a parent boundary (i.e., the expected boundary is missing).</param>
            <returns>true if a boundary was found; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ReadWithDelimiter(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the batch stream while ensuring that we stop reading at each boundary.
            </summary>
            <param name="userBuffer">The byte array to read bytes into.</param>
            <param name="userBufferOffset">The offset in the buffer where to start reading bytes into.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ReadWithLength(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the batch stream without checking for a boundary delimiter since we 
            know the length of the stream.
            </summary>
            <param name="userBuffer">The byte array to read bytes into.</param>
            <param name="userBufferOffset">The offset in the buffer where to start reading bytes into.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ProcessPartHeader">
            <summary>
            Reads the headers of a part.
            </summary>
            <returns>true if the start of a changeset part was detected; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ReadHeaders">
            <summary>
            Reads the headers of a batch part or an operation.
            </summary>
            <returns>A dictionary of header names to header values; never null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ReadFirstNonEmptyLine">
            <summary>
            Read and return the next line from the batch stream, skipping all empty lines.
            </summary>
            <remarks>This method will throw if end-of-input was reached while looking for the next line.</remarks>
            <returns>The text of the first non-empty line (not including any terminating newline characters).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ValidateHeaderLine(System.String,System.String@,System.String@)">
            <summary>
            Parses a header line and validates that it has the correct format.
            </summary>
            <param name="headerLine">The header line to validate.</param>
            <param name="headerName">The name of the header.</param>
            <param name="headerValue">The value of the header.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ReadLine">
            <summary>
            Reads a line (all bytes until a line feed) from the underlying stream.
            </summary>
            <returns>Returns the string that was read from the underyling stream (not including a terminating line feed), or null if the end of input was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.EnsureBatchEncoding">
            <summary>
            Ensure that a batch encoding exists; if not, detect it from the first couple of bytes of the stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.DetectEncoding">
            <summary>Detect the encoding based data from the stream.</summary>
            <returns>The encoding discovered from the bytes in the buffer or the fallback encoding.</returns>
            <remarks>
            We don't have to skip a potential preamble of the encoding since the batch reader
            will skip over everything (incl. the potential preamble) until it finds the first
            boundary.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ReadPartHeaders(System.Boolean@)">
            <summary>
            Reads and validates the headers of a batch part.
            </summary>
            <param name="isChangeSetPart">true if the headers indicate a changset part; otherwise false.</param>
            <returns>A dictionary of header names to header values; never null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.ValidatePartHeaders(Microsoft.Data.OData.ODataBatchOperationHeaders,System.Boolean@)">
            <summary>
            Validates the headers that have been read for a part.
            </summary>
            <param name="headers">The set of headers to validate.</param>
            <param name="isChangeSetPart">true if the headers indicate a changset part; otherwise false.</param>
            <returns>The set of validated headers.</returns>
            <remarks>
            An operation part is required to have content type 'application/http' and content transfer
            encoding 'binary'. A changeset is required to have content type 'multipart/mixed'.
            Note that we allow additional headers for batch parts; clients of the library can choose
            to be more strict.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReaderStream.DetermineChangesetBoundaryAndEncoding(System.String)">
            <summary>
            Parse the content type header value to retrieve the boundary and encoding of a changeset.
            </summary>
            <param name="contentType">The content type to parse.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReaderStream.BatchBoundary">
            <summary>
            The boundary string for the batch structure itself.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReaderStream.ChangeSetBoundary">
            <summary>
            The boundary string for the current changeset (only set when reading a changeset
            or an operation in a changeset).
            </summary>
            <remarks>When not reading a changeset (or operation in a changeset) this field is null.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReaderStream.CurrentBoundaries">
            <summary>
            The current boundary string to be used for reading with delimiter.
            </summary>
            <remarks>This is the changeset boundary when reading a changeset or the batch boundary otherwise.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReaderStream.CurrentEncoding">
            <summary>
            The current encoding to use when reading from the stream.
            </summary>
            <remarks>This is the changeset encoding when reading a changeset or the batch encoding otherwise.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchReaderState">
            <summary>Enumeration with all the states the batch reader can be in.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderState.Initial">
            <summary>The state the batch reader is in after having been created.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderState.Operation">
            <summary>The batch reader detected an operation.</summary>
            <remarks>In this state the start boundary, the request/response line 
            and the operation headers have already been read.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderState.ChangesetStart">
            <summary>The batch reader detected the start of a change set.</summary>
            <remarks>In this state the start boundary and the change set 
            headers have already been read.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderState.ChangesetEnd">
            <summary>The batch reader completed reading a change set.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderState.Completed">
            <summary>The batch reader completed reading the batch payload.</summary>
            <remarks>The batch reader cannot be used in this state anymore.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReaderState.Exception">
            <summary>The batch reader encountered an error reading the batch payload.</summary>
            <remarks>The batch reader cannot be used in this state anymore.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter">
            <summary>
            ODataParameterWriter for the Verbose JSON format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.verboseJsonOutputContext">
            <summary>
            The output context to write to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.verboseJsonPropertyAndValueSerializer">
            <summary>
            The JSON property and value serializer to use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
            <param name="functionImport">The function import whose parameters will be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.WriteValueParameter(System.String,System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a value parameter (either primitive or complex)
            </summary>
            <param name="parameterName">The name of the parameter to write.</param>
            <param name="parameterValue">The value of the parameter to write.</param>
            <param name="expectedTypeReference">The expected type reference of the parameter value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterWriter.CreateFormatCollectionWriter(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates a format specific <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write the value of a collection parameter.
            </summary>
            <param name="parameterName">The name of the collection parameter to write.</param>
            <param name="expectedItemType">The type reference of the expected item type or null if no expected item type exists.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/>.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriNullValue">
            <summary>
            Class to represent a null value with or without type information for URI paremeters.
            </summary>
            <remarks>This class is only intended for use as a sentinal for null values in URI parameters.  It cannot be used elsewhere.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.ODataUriNullValue.TypeName">
            <summary>
            String representation of the type of this null value. 'null' indicates that no type information was provided.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.GeometryTypeConverter">
            <summary>
            Handles serialization and deserialization for types derived from Geometry.
            This file is currently compiled by ODataLib and Astoria server, because it contains
                 functionality related to both serialization and deserialization, but deserialization
                 is not yet integrated into Astoria. Once that integration happens this functionality 
                 should be fully contained within ODataLib only.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.IPrimitiveTypeConverter">
            <summary>
            Interface used for serialization and deserialization of primitive types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IPrimitiveTypeConverter.TokenizeFromXml(System.Xml.XmlReader)">
            <summary>
            Create an instance of a primitive type from the value in an Xml reader.
            </summary>
            <param name="reader">The Xml reader to use to read the value.</param>
            <returns>An instance of the primitive type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.IPrimitiveTypeConverter.WriteAtom(System.Object,System.Xml.XmlWriter)">
            <summary>
            Write the Atom representation of an instance of a primitive type to an XmlWriter.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="writer">The Xml writer to use to write the instance.</param>
        </member>
        <member name="M:Microsoft.Data.OData.IPrimitiveTypeConverter.WriteVerboseJson(System.Object,Microsoft.Data.OData.Json.IJsonWriter,System.String,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Write the Verbose Json representation of an instance of a primitive type to a json writer.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="jsonWriter">Instance of JsonWriter.</param>
            <param name="typeName">Type name of the instance to write. If the type name is null, the type name will not be written in the payload.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.IPrimitiveTypeConverter.WriteJsonLight(System.Object,Microsoft.Data.OData.Json.IJsonWriter,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Write the Json Lite representation of an instance of a primitive type to a json writer.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="jsonWriter">Instance of JsonWriter.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.GeometryTypeConverter.TokenizeFromXml(System.Xml.XmlReader)">
            <summary>
            Create a Geometry instance from the value in an Xml reader.
            </summary>
            <param name="reader">The Xml reader to use to read the value.</param>
            <remarks>In order to be consistent with how we are reading other types of property values elsewhere in the product, the reader
            is expected to be placed at the beginning of the element when entering this method. After this method call, the reader will be placed
            at the EndElement, such that the next Element will be read in the next Read call. The deserializer that uses this value expects 
            the reader to be in these states when entering and leaving the method.
            </remarks>
            <returns>Geometry instance that was read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.GeometryTypeConverter.WriteAtom(System.Object,System.Xml.XmlWriter)">
            <summary>
            Write the Atom representation of an instance of a primitive type to an XmlWriter.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="writer">The Xml writer to use to write the instance.</param>
        </member>
        <member name="M:Microsoft.Data.OData.GeometryTypeConverter.WriteVerboseJson(System.Object,Microsoft.Data.OData.Json.IJsonWriter,System.String,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Write the Verbose Json representation of an instance of a primitive type to a json object.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="jsonWriter">Instance of JsonWriter.</param>
            <param name="typeName">Type name of the instance to write. If the type name is null, the type name will not be written in the payload.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.GeometryTypeConverter.WriteJsonLight(System.Object,Microsoft.Data.OData.Json.IJsonWriter,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Write the Json Lite representation of an instance of a primitive type to a json object.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="jsonWriter">Instance of JsonWriter.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer">
            <summary>
            OData ATOM deserializer for ATOM metadata on feeds.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer">
            <summary>
            Base class for all OData ATOM Metadata deserializers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.EmptyNamespace">
            <summary>The empty namespace used for attributes in no namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.AtomNamespace">
            <summary>Schema namespace for Atom.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.ReadAtomPersonConstruct(Microsoft.Data.OData.Metadata.EpmTargetPathSegment)">
            <summary>
            Reads a person (author/contributor) element.
            </summary>
            <param name="epmTargetPathSegment">The EPM target path segment for the element to read, or null if no EPM for that element is defined.</param>
            <returns>The person metadata object with the read values.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:contributor/atom:author) - the atom:author/atom:contributor element to read.
            Post-Condition: Any                                                - the node after the atom:author/atom:contributor element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.ReadAtomDateConstruct">
            <summary>
            Reads the element value as DateTimeOffset value.
            </summary>
            <returns>The DateTimeOffset value of the element.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the element which value to read.
            Post-Condition: Any                 - the node after the element.
            
            This method is not used in WCF DS client mode.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.ReadAtomDateConstructAsString">
            <summary>
            Reads the element value as of a date construct as string value.
            </summary>
            <returns>The string value of the date construct element.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the element which value to read.
            Post-Condition: Any                 - the node after the element.
            
            This method is only used in WCF DS client mode.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.ReadAtomTextConstruct">
            <summary>
            Read the ATOM text construct element.
            </summary>
            <returns>The element read represented as ATOM text construct.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the element to read.
            Post-Condition: Any                 - the node after the element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.ReadElementStringValue">
            <summary>
            Reads the value of the current XML element and returns it as a string.
            </summary>
            <returns>The string value read.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the element which value to read.
            Post-Condition: Any                 - the node after the element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.ReadTitleElement">
            <summary>
            Reads an "atom:title" element and returns an <seealso cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct"/>.
            </summary>
            <returns>An <seealso cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct"/> with the title information.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - The start of the atom:title element.
            Post-Condition: Any                 - The next node after the atom:title element. 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.ShouldReadElement(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,System.String,Microsoft.Data.OData.Metadata.EpmTargetPathSegment@)">
            <summary>
            Determines if we need to read a child element (either for EPM or for ATOM metadata).
            </summary>
            <param name="parentSegment">The parent EPM target path segment.</param>
            <param name="segmentName">The name of the element/segment to read.</param>
            <param name="subSegment">The EPM target path subsegment which describes the element, or null if there's none.</param>
            <returns>true if the subelement should be read, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomMetadataDeserializer.ReadAtomMetadata">
            <summary>
            Flag indicating if ATOM metadata is required to be read by the user.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.EmptyNamespace">
            <summary>The empty namespace used for attributes in no namespace.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
            <param name="inSourceElement">Whether this deserializer is reading feed metadata for a source element (true) or a feed element (false).</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadAtomElementAsFeedMetadata(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an element in the ATOM namespace in feed or source content.
            </summary>
            <param name="atomFeedMetadata">The atom feed metadata object to store metadata details in.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:*) - the ATOM element to read.
            Post-Condition: Any                          - the node after the ATOM element which was read.
            
            If the the property InSourceElement is true (i.e., we're reading within source content), then the value 
            of the atom:id element will be stored in the feed metadata as SourceId, otherwise it will be ignored.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadAtomLinkElementInFeed(System.String,System.String)">
            <summary>
            Reads the atom:link element and returns a new ATOM link metadata object.
            </summary>
            <param name="relation">The value of the rel attribute for the link element.</param>
            <param name="hrefStringValue">The value of the href attribute for the link element.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata"/> instance storing the information about this link.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:link) - the atom:link element to read.
            Post-Condition: Any                             - the node after the ATOM element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadAuthorElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:author element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:author) - the atom:author element to read.
            Post-Condition: Any                               - the node after the atom:author element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadCategoryElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:category element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:category) - the atom:category element to read.
            Post-Condition: Any                                 - the node after the atom:category which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadContributorElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:contributor element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:contributor) - the atom:contributor element to read.
            Post-Condition: Any                                    - the node after the atom:contributor element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadGeneratorElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:generator element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:generator) - the atom:generator element to read.
            Post-Condition: Any                                  - the node after the atom:generator element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadIconElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:icon element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:icon) - the atom:icon element to read.
            Post-Condition: Any                             - the node after the atom:icon element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadIdElementAsSourceId(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:id element in a source element.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:icon) - the atom:icon element to read.
            Post-Condition: Any                             - the node after the atom:icon element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadLinkElementIntoLinksCollection(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:link element into the Links collection of feed metadata (i.e., links that are not special to the OData protocol).
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:link) - the atom:link element to read.
            Post-Condition: Any                             - the node after the atom:link element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadLogoElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:logo element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:logo) - the atom:logo element to read.
            Post-Condition: Any                             - the node after the atom:logo element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadRightsElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:rights element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:rights) - the atom:rights element to read.
            Post-Condition: Any                               - the node after the atom:rights element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadSubtitleElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:subtitle element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:subtitle) - the atom:subtitle element to read.
            Post-Condition: Any                                 - the node after the atom:subtitle element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadTitleElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:title element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:title) - the atom:title element to read.
            Post-Condition: Any                              - the node after the atom:title element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadUpdatedElement(Microsoft.Data.OData.Atom.AtomFeedMetadata)">
            <summary>
            Reads an atom:updated element in a feed.
            </summary>
            <param name="atomFeedMetadata">The feed metadata to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:updated) - the atom:updated element to read.
            Post-Condition: Any                                - the node after the atom:updated element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.ReadUriValuedElement">
            <summary>
            Reads an atom:* element whose value is a URI.
            </summary>
            <returns>The <see cref="T:System.Uri"/> which was read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.VerifyNotPreviouslyDefined(System.Object)">
            <summary>
            Fails with the appropriate exception message if the given value is not null.
            </summary>
            <param name="metadataValue">The metadata value to ensure is null.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomFeedMetadataDeserializer.InSourceElement">
            <summary>
            Whether this deserializer is reading feed metadata for a source element (true) or a feed element (false).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader">
            <summary>
            OData parameter reader for the Verbose JSON format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.verboseJsonInputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.verboseJsonPropertyAndValueDeserializer">
            <summary>The property and value deserializer to read input with.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The input to read the payload from.</param>
            <param name="functionImport">The function import whose parameters are being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.ReadAtStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet.
            Post-Condition: When the new state is Value, the reader is positioned at the closing '}' or at the name of the next parameter.
                            When the new state is Entry, the reader is positioned at the starting '{' of the entry payload.
                            When the new state is Feed or Collection, the reader is positioned at the starting '[' of the feed or collection payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.ReadNextParameterImplementation">
            <summary>
            Implementation of the reader logic on the subsequent reads after the first parameter is read.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property or JsonNodeType.EndObject:     assumes the last read puts the reader at the begining of the next parameter or at the end of the payload.
            Post-Condition: When the new state is Value, the reader is positioned at the closing '}' or at the name of the next parameter.
                            When the new state is Entry, the reader is positioned at the starting '{' of the entry payload.
                            When the new state is Feed or Collection, the reader is positioned at the starting '[' of the feed or collection payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.CreateCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.
            </summary>
            <param name="expectedItemTypeReference">Expected item type reference of the collection to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read the collection with type <paramref name="expectedItemTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.EndOfParameters">
            <summary>
            Checks to see if we are at the end of the parameters payload.
            </summary>
            <returns>Returns true if we are at the ending '}' of the parameters payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.ReadParametersEnd">
            <summary>
            Reads the end '}' of the parameters payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonParameterReader.ReadNextParameter">
            <summary>
            Reads the next parameter from the parameters payload.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer">
            <summary>
            OData ATOM deserializer for ATOM metadata in a service document
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.AtomNamespace">
            <summary>Schema namespace for Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.AtomCategoryElementName">
            <summary>The name of the 'category' element in a service document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.AtomHRefAttributeName">
            <summary>The name of the 'href' attribute in an 'app:categories' element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.AtomPublishingFixedAttributeName">
            <summary>The name of the 'fixed' attribute in an 'app:categories' element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.AtomCategorySchemeAttributeName">
            <summary>The name of the 'scheme' attribute in an 'app:categories' or 'atom:category' element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.AtomCategoryTermAttributeName">
            <summary>The name of the 'term' attribute in an 'atom:category' element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.AtomCategoryLabelAttributeName">
            <summary>The name of the 'label' attribute in an 'atom:category' element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.EmptyNamespace">
            <summary>The empty namespace</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.ReadTitleElementInWorkspace(Microsoft.Data.OData.Atom.AtomWorkspaceMetadata)">
            <summary>
            Reads an atom:title element and adds the new information to <paramref name="workspaceMetadata"/>.
            </summary>
            <param name="workspaceMetadata">The non-null workspace metadata object to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - The start of the atom:title element.
            Post-Condition: Any                 - The next node after the atom:title element. 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.ReadTitleElementInCollection(Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata,Microsoft.Data.OData.ODataResourceCollectionInfo)">
            <summary>
            Reads an atom:title element and adds the new information to <paramref name="collectionInfo"/> and (if ATOM metadata reading is on) <paramref name="collectionMetadata"/>.
            </summary>
            <param name="collectionMetadata">The collection metadata object to augment, or null if metadata reading is not on.</param>
            <param name="collectionInfo">The non-null collection info object being populated.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - The start of the title element.
            Post-Condition: Any                 - The next node after the title element. 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.ReadCategoriesElementInCollection(Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata)">
            <summary>
            Reads an app:categories element as well as each atom:category element contained within it, and adds the new information to <paramref name="collectionMetadata"/>.
            </summary>
            <param name="collectionMetadata">The non-null collection metadata object to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - The start of the app:categories element.
            Post-Condition: Any                 - The next node after the app:categories element. 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.ReadAcceptElementInCollection(Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata)">
            <summary>
            Reads an "app:accept" element and adds the new information to <paramref name="collectionMetadata"/>.
            </summary>
            <param name="collectionMetadata">The non-null collection metadata object to augment.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - The start of the app:accept element.
            Post-Condition: Any                 - The next node after the app:accept element. 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentMetadataDeserializer.ReadCategoryElementInCollection">
            <summary>
            Reads an "atom:category" element and returns the data as an <seealso cref="T:Microsoft.Data.OData.Atom.AtomCategoryMetadata"/> object.
            </summary>
            <returns>An <seealso cref="T:Microsoft.Data.OData.Atom.AtomCategoryMetadata"/> object with its properties filled in according to what was found in the XML.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - The start of the atom:category element.
            Post-Condition: Any                 - The next node after the atom:category element.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataParameterReaderState">
            <summary> Enumeration of all possible states of an <see cref="T:Microsoft.Data.OData.ODataParameterReader" />. </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderState.Start">
            <summary>The reader is at the start; nothing has been read yet.</summary>
            <remarks>In this state the Name and Value properties of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns null.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderState.Value">
            <summary>The reader read a primitive or a complex parameter.</summary>
            <remarks>In this state the Name property of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns the name of the parameter
            and the Value property of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns the value read (e.g. a primitive value, an ODataComplexValue or null).</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderState.Collection">
            <summary>The reader is reading a collection parameter.</summary>
            <remarks>In this state the Name property of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns the name of the parameter
            and the Value property of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> returns null. The CreateCollectionReader() method on the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>
            must be called to get the reader to read the collection value.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderState.Exception">
            <summary>The reader has thrown an exception; nothing can be read from the reader anymore.</summary>
            <remarks>In this state the Name and Value properties of the <see cref="T:Microsoft.Data.OData.ODataReader"/> return null.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataParameterReaderState.Completed">
            <summary>The reader has completed; nothing can be read anymore.</summary>
            <remarks>In this state the Name and Value properties of the <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> return null.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchUrlResolver">
            <summary>
            Implementation of the batch-specific URL resolver that resolves cross-referencing URLs properly.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.IODataUrlResolver">
            <summary>Supports custom resolution of URLs found in the payload.</summary>
            <remarks>
            This interface can be implemented on messages (see <see cref="T:Microsoft.Data.OData.IODataRequestMessage"/> and
            <see cref="T:Microsoft.Data.OData.IODataResponseMessage"/>). When a message implementing this interface is
            passed to an <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> or <see cref="T:Microsoft.Data.OData.ODataMessageReader"/>, the
            message writer/reader will use this interface for custom URL resolution.
            On writers this means that whenever a URI is written into the payload the resolution
            method on this interface is called to resolve a base URI and a payload URI to the
            actual URI to be written to the payload. If the method returns null from a resolution
            call the default resolution will be used.
            On readers this means that a base URI (either from the payload or the reader settings) and
            the URI read from the payload are passed to the method. The result is what is being reported
            on the OData OM instances. Again if the resolution method returns null the default resolution
            kicks in.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.IODataUrlResolver.ResolveUrl(System.Uri,System.Uri)">
            <summary>Implements a custom URL resolution scheme. This method returns null if no custom resolution is desired. If the method returns a non-null URL that value will be used without further validation.</summary>
            <returns>An instance that reflects the custom resolution of the method arguments into a URL or null if no custom resolution is desired; in that case the default resolution is used.</returns>
            <param name="baseUri">The (optional) base URI to use for the resolution.</param>
            <param name="payloadUri">The URI read from the payload.</param>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchUrlResolver.batchMessageUrlResolver">
            <summary>The URL resolver from the batch message.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchUrlResolver.contentIdCache">
            <summary>A hashset with all content IDs used so far in the batch; this is used for cross-referencing URL resolution.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUrlResolver.#ctor(Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Constructor.
            </summary>
            <param name="batchMessageUrlResolver">The URL resolver from the batch message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUrlResolver.Microsoft#Data#OData#IODataUrlResolver#ResolveUrl(System.Uri,System.Uri)">
            <summary>
            Method to implement a custom URL resolution scheme.
            This method returns null if not custom resolution is desired.
            If the method returns a non-null URL that value will be used without further validation.
            </summary>
            <param name="baseUri">The (optional) base URI to use for the resolution.</param>
            <param name="payloadUri">The URI read from the payload.</param>
            <returns>
            A <see cref="T:System.Uri"/> instance that reflects the custom resolution of the method arguments
            into a URL or null if no custom resolution is desired; in that case the default resolution is used.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUrlResolver.AddContentId(System.String)">
            <summary>
            Add the content ID to the hashset of valid content IDs.
            </summary>
            <param name="contentId">The (non-null) content ID to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUrlResolver.ContainsContentId(System.String)">
            <summary>
            Checks whether a given (non-null) content ID is already in the content ID cache.
            </summary>
            <param name="contentId">The content ID to check for.</param>
            <returns>true if the content ID cache already contains a content ID with value <paramref name="contentId"/>; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchUrlResolver.Reset">
            <summary>
            Resets the cache of content IDs. This is called at the end of each changeset
            since content IDs are only unique within a changeset.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchUrlResolver.BatchMessageUrlResolver">
            <summary>
            The URL resolver from the batch message.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataContentTypeException">
            <summary>Exception type representing exception when Content-Type of a message is not supported.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataContentTypeException.#ctor">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataContentTypeException" /> class.</summary>
            <remarks>
            The Message property is initialized to a system-supplied message
            that describes the error. This message takes into account the
            current system culture.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataContentTypeException.#ctor(System.String)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataContentTypeException" /> class.</summary>
            <param name="message">Plain text error message for this exception.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataContentTypeException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataContentTypeException" /> class.</summary>
            <param name="message">Plain text error message for this exception.</param>
            <param name="innerException">Exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataContentTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataContentTypeException" /> class from the  specified SerializationInfo and StreamingContext instances.</summary>
            <param name="info"> A SerializationInfo containing the information required to serialize  the new ODataException. </param>
            <param name="context"> A StreamingContext containing the source of the serialized stream  associated with the new ODataException. </param>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriConversionUtils">
            <summary>
            Utility functions for writing values for use in a URL.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.ConvertToUriPrimitiveLiteral(System.Object,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Converts a primitive to a string for use in a Url.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="version">OData version to be compliant with.</param>
            <returns>A string representation of <paramref name="value"/> to be added to a Url.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.ConvertFromComplexOrCollectionValue(System.String,Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Converts the given string <paramref name="value"/> to an ODataComplexValue or ODataCollectionValue and returns it.
            Tries in both JSON light and Verbose JSON.
            </summary>
            <remarks>Does not handle primitive values.</remarks>
            <param name="value">Value to be deserialized.</param>
            <param name="version">ODataVersion to be compliant with.</param>
            <param name="model">Model to use for verification.</param>
            <param name="typeReference">Expected type reference from deserialization. If null, verification will be skipped.</param>
            <returns>An ODataComplexValue or ODataCollectionValue that results from the deserialization of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.VerifyAndCoerceUriPrimitiveLiteral(System.Object,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Verifies that the given <paramref name="primitiveValue"/> is or can be coerced to <paramref name="expectedTypeReference"/>, and coerces it if necessary.
            </summary>
            <param name="primitiveValue">An EDM primitive value to verify.</param>
            <param name="model">Model to verify against.</param>
            <param name="expectedTypeReference">Expected type reference.</param>
            <param name="version">The version to use for reading.</param>
            <returns>Coerced version of the <paramref name="primitiveValue"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.ConvertToUriComplexLiteral(Microsoft.Data.OData.ODataComplexValue,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Converts a <see cref="T:Microsoft.Data.OData.ODataComplexValue"/> to a string for use in a Url.
            </summary>
            <param name="complexValue">Instance to convert.</param>
            <param name="model">Model to be used for validation. User model is optional. The EdmLib core model is expected as a minimum.</param>
            <param name="version">Version to be compliant with.</param>
            <param name="format">ODataFormat to use for the format of the literal.</param>
            <returns>A string representation of <paramref name="complexValue"/> to be added to a Url.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.ConvertToUriNullValue(Microsoft.Data.OData.Query.ODataUriNullValue)">
            <summary>
            Converts an <see cref="T:Microsoft.Data.OData.Query.ODataUriNullValue"/> to a string for use in a Url.
            </summary>
            <param name="nullValue">Instance to convert.</param>
            <returns>A string representation of <paramref name="nullValue"/> to be added to a Url.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.ConvertToUriCollectionLiteral(Microsoft.Data.OData.ODataCollectionValue,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataVersion,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Converts a <see cref="T:Microsoft.Data.OData.ODataCollectionValue"/> to a string for use in a Url.
            </summary>
            <param name="collectionValue">Instance to convert.</param>
            <param name="model">Model to be used for validation. User model is optional. The EdmLib core model is expected as a minimum.</param>
            <param name="version">Version to be compliant with. Collection requires &gt;= V3.</param>
            <param name="format">ODataFormat to use for the format of the literal.</param>
            <returns>A string representation of <paramref name="collectionValue"/> to be added to a Url.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.WriteJsonVerboseLiteral(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataMessageWriterSettings,System.IO.TextWriter,System.Action{Microsoft.Data.OData.VerboseJson.ODataVerboseJsonPropertyAndValueSerializer})">
            <summary>
            Write a literal value in JSON Verbose format.
            </summary>
            <param name="model">EDM Model to use for validation and type lookups.</param>
            <param name="messageWriterSettings">Settings to use when writing.</param>
            <param name="textWriter">TextWriter to use as the output for the value.</param>
            <param name="writeValue">Delegate to use to actually write the value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.WriteJsonLightLiteral(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataMessageWriterSettings,System.IO.TextWriter,System.Action{Microsoft.Data.OData.JsonLight.ODataJsonLightValueSerializer})">
            <summary>
            Write a literal value in JSON Light format.
            </summary>
            <param name="model">EDM Model to use for validation and type lookups.</param>
            <param name="messageWriterSettings">Settings to use when writing.</param>
            <param name="textWriter">TextWriter to use as the output for the value.</param>
            <param name="writeValue">Delegate to use to actually write the value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriConversionUtils.CoerceNumericType(System.Object,Microsoft.Data.Edm.IEdmPrimitiveType)">
            <summary>
            Coerces the given <paramref name="primitiveValue"/> to the appropriate CLR type based on <paramref name="targetEdmType"/>. 
            </summary>
            <param name="primitiveValue">Primitive value to coerce.</param>
            <param name="targetEdmType">Edm primitive type to check against.</param>
            <returns><paramref name="primitiveValue"/> as the corresponding CLR type indicated by <paramref name="targetEdmType"/>, or null if unable to coerce.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.ODataUriUtils">
            <summary>
            URI Utility methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriUtils.ConvertFromUriLiteral(System.String,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Converts the given <paramref name="value"/> to a corresponding CLR type. Expects the 
            <paramref name="value"/> to have already been properly unescaped from an actual Uri.
            </summary>
            <param name="value">Value from a Uri to be converted.</param>
            <param name="version">Version to be compliant with.</param>
            <returns>A CLR object that the <paramref name="value"/> represents.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriUtils.ConvertFromUriLiteral(System.String,Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Converts the given <paramref name="value"/> to a corresponding CLR type. Expects the 
            <paramref name="value"/> to have already been properly unescaped from an actual Uri.
            </summary>
            <param name="value">Value from a Uri to be converted.</param>
            <param name="version">Version to be compliant with.</param>
            <param name="model">Optional model to perform verification against.</param>
            <param name="typeReference">Optional IEdmTypeReference to perform verification against. 
             Callers must provide a <paramref name="model"/> containing this type if it is specified.</param>
            <returns>A CLR object that the <paramref name="value"/> represents.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriUtils.ConvertToUriLiteral(System.Object,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Converts the given object to a string for use in a Uri. Does not perform any of the escaping that <see cref="T:System.Uri"/> provides.
            No type verification is used.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="version">Version to be compliant with.</param>
            <returns>A string representation of <paramref name="value"/> for use in a Url.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriUtils.ConvertToUriLiteral(System.Object,Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Converts the given object to a string for use in a Uri. Does not perform any of the escaping that <see cref="T:System.Uri"/> provides.
            Will perform type verification based on the given model if possible.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="version">Version to be compliant with.</param>
            <param name="model">Optional model to perform verification against.</param>
            <returns>A string representation of <paramref name="value"/> for use in a Url.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Query.ODataUriUtils.ConvertToUriLiteral(System.Object,Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Converts the given object to a string in the specified format for use in a Uri. Does not perform any of the escaping that <see cref="T:System.Uri"/> provides.
            Will perform type verification based on the given model if possible.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="version">Version to be compliant with.</param>
            <param name="model">Optional model to perform verification against.</param>
            <param name="format">ODataFormat to use for structured values such as complex types and collections.</param>
            <returns>A string representation of <paramref name="value"/> for use in a Url.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataRawValueFormat">
            <summary>
            The RAW OData format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.ToString">
            <summary>
            The text representation - the name of the format.
            </summary>
            <returns>The name of the format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.DetectPayloadKind(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.DetectPayloadKind(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>The set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.CreateInputContext(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>The newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.CreateOutputContext(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>The newly created output context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataResponseMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="responseMessage">The response message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.DetectPayloadKindAsync(Microsoft.Data.OData.IODataRequestMessageAsync,Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Asynchronously detects the payload kinds supported by this format for the specified message payload.
            </summary>
            <param name="requestMessage">The request message with the payload stream.</param>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>A task that when completed returns the set of <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/>s 
            that are supported with the specified payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.CreateInputContextAsync(Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,System.Object)">
            <summary>
            Asynchronously creates an instance of the input context for this format.
            </summary>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
            <param name="message">The message to use.</param>
            <param name="contentType">The content type of the message to read.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="payloadKindDetectionFormatState">Format specific state stored during payload kind detection
            using the <see cref="M:Microsoft.Data.OData.ODataPayloadKindDetectionInfo.SetPayloadKindDetectionFormatState(System.Object)"/>.</param>
            <returns>Task which when completed returned the newly created input context.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.CreateOutputContextAsync(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.MediaType,System.Text.Encoding,Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an instance of the output context for this format.
            </summary>
            <param name="message">The message to use.</param>
            <param name="mediaType">The specific media type being written.</param>
            <param name="encoding">The encoding to use.</param>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="writingResponse">true if writing a response message; otherwise false.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <returns>Task which represents the pending create operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawValueFormat.DetectPayloadKindImplementation(Microsoft.Data.OData.MediaType)">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <param name="contentType">The content type of the message.</param>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode">
            <summary>
            Semantic node that represents a single-value open property access, which is not bound to an EDM model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode.source">
            <summary>
            The value containing this property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode.name">
            <summary>
            The name of the open property to be bound outside the EDM model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode.#ctor(Microsoft.Data.OData.Query.SemanticAst.SingleValueNode,System.String)">
            <summary>
            Constructs a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode"/>.
            </summary>
            <param name="source">The value containing this property.</param>
            <param name="openPropertyName">The name of the open property to be bound outside the EDM model.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the input source or openPropertyName is null.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode.Accept``1(Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor{``0})">
            <summary>
            Accept a <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNodeVisitor`1"/> that walks a tree of <see cref="T:Microsoft.Data.OData.Query.SemanticAst.QueryNode"/>s.
            </summary>
            <typeparam name="T">Type that the visitor will return after visiting this token.</typeparam>
            <param name="visitor">An implementation of the visitor interface.</param>
            <returns>An object whose type is determined by the type parameter of the visitor.</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the input visitor is null.</exception>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode.Source">
            <summary>
             Gets the value containing this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode.Name">
            <summary>
            Gets the name of the open property to be bound outside the EDM model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode.TypeReference">
            <summary>
            Gets the type of the single value this node represents.
            </summary>
            <remarks>
            The value of this property will always be null for open properties.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Query.SemanticAst.SingleValueOpenPropertyAccessNode.InternalKind">
            <summary>
            Gets the kind of this query node.
            </summary>
        </member>
        <member name="T:System.Data.Services.Common.SyndicationTextContentKind">
            <summary>Enumeration used to identify text content of syndication item. </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Plaintext">
            <summary>
            Plaintext
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Xhtml">
            <summary>
            XHTML
            </summary>
        </member>
        <member name="T:System.Data.Services.Common.SyndicationItemProperty">
            <summary>Enumeration type that is used to identify the syndication item element or attribute in the Open Data Protocol (OData) feed to which an entity property is mapped.</summary>
            <remarks>
            Potentially the following atom specific elements could also be considered:
            * Content?
            * Id
            * Source?
            </remarks>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.CustomProperty">
            <summary>
            User specified a non-syndication property
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorEmail">
            <summary>
            author/email
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorName">
            <summary>
            author/name
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorUri">
            <summary>
            author/uri
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.ContributorEmail">
            <summary>
            contributor/email
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.ContributorName">
            <summary>
            contributor/name
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.ContributorUri">
            <summary>
            contributor/uri
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Updated">
            <summary>
            updated
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Published">
            <summary>
            published
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Rights">
            <summary>
            rights
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Summary">
            <summary>
            summary
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="T:System.Data.Services.Common.EntityPropertyMappingAttribute">
            <summary>Attribute that specifies a custom mapping between properties of an entity type and elements of an entry in an Open Data Protocol (OData) feed returned by the data service. </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.sourcePath">
            <summary>
            Source property path.
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetPath">
            <summary>
            Target Xml element/attribute.
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetSyndicationItem">
            <summary>
            If mapping to syndication element, the name of syndication item.
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetTextContentKind">
            <summary>
            If mapping to syndication content, the content type of syndication item.
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetNamespacePrefix">
            <summary>
            If mapping to non-syndication element/attribute, the namespace prefix for the 
            target element/attribute.
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetNamespaceUri">
            <summary>
            If mapping to non-syndication element/attribute, the namespace for the 
            target element/attribute.
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.keepInContent">
            <summary>
            The content can optionally be kept in the original location along with the 
            newly mapping location by setting this option to true, false by default.
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EntityPropertyMappingAttribute.#ctor(System.String,System.Data.Services.Common.SyndicationItemProperty,System.Data.Services.Common.SyndicationTextContentKind,System.Boolean)">
            <summary>Creates a new instance of the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" />.</summary>
            <param name="sourcePath">The name of the property, as string, of the entity type that is mapped to the specified property of the feed item.</param>
            <param name="targetSyndicationItem">A <see cref="T:System.Data.Services.Common.SyndicationItemProperty" /> value that represents the element in the feed to which to map the property. This value must be set to None if the <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath" /> is not null.</param>
            <param name="targetTextContentKind">A <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetTextContentKind" /> value that identifies the format of the content to display in the feed.</param>
            <param name="keepInContent">Boolean value that is true when the property being mapped must appear both in its mapped-to location and in the content section of the feed. </param>
        </member>
        <member name="M:System.Data.Services.Common.EntityPropertyMappingAttribute.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Creates an instance of the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> to map a property to a custom feed element.</summary>
            <param name="sourcePath">The name of the property of the entity type, as string, that is mapped to the specified property in the feed.</param>
            <param name="targetPath">The name of the target, as string, in the resulting feed to which the property is mapped.</param>
            <param name="targetNamespacePrefix">This parameter, together with <paramref name="targetNamespaceUri" />, specifies the namespace in which the <paramref name="targetPath " />element exists.</param>
            <param name="targetNamespaceUri">Specifies the namespace URI of the element, as string, specified by the <paramref name="targetNamespaceUri" /> property. </param>
            <param name="keepInContent">Boolean value that is true when the property being mapped must appear both in its mapped-to location and in the content section of the feed. </param>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.SourcePath">
            <summary>Gets the name of the property of the syndication item that will be mapped to the specified element of the feed.</summary>
            <returns>String value that contains property name.</returns>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath">
            <summary>Gets the name of the custom target in the feed to which the property is mapped.</summary>
            <returns>String value with target XML element or attribute.</returns>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetSyndicationItem">
            <summary>Gets the syndication item in the entry targeted by the mapping.</summary>
            <returns>A <see cref="T:System.Data.Services.Common.SyndicationItemProperty" /> value that is the target of the mapping.</returns>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetNamespacePrefix">
            <summary>Gets a string value that, together with <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetNamespaceUri" />, specifies the namespace in which the <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath" />element exists.</summary>
            <returns>String value that contains the target namespace prefix.</returns>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetNamespaceUri">
            <summary>Gets a string value that specifies the namespace URI of the element specified by the <see cref="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath" /> property.</summary>
            <returns>String that contains the namespace URI.</returns>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetTextContentKind">
            <summary>Gets the type of content of the property mapped by <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" />.</summary>
            <returns>A string that identifies the type of content in the feed element.</returns>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.KeepInContent">
            <summary>Gets a Boolean value that indicates whether a property value should be repeated both in the content section of the feed and in the mapped location.</summary>
            <returns>A <see cref="T:System.Boolean" /> value that is true when the property is mapped into both locations in the feed; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBehaviorKind">
            <summary>
            Enumeration for the different kinds of reader and writer behaviors
            supported in the OData library.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBehaviorKind.Default">
            <summary>The default behavior of the OData library.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBehaviorKind.WcfDataServicesServer">
            <summary>The behavior of the WCF Data Services server.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBehaviorKind.WcfDataServicesClient">
            <summary>The behavior of the WCF Data Services client.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataReaderBehavior">
            <summary>
            Class that captures all the information needed to make readers behave
            differently when used inside of WCF Data Services or outside.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.defaultReaderBehavior">
            <summary>The default reader behavior for the OData library.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.apiBehaviorKind">
            <summary>The API behavior kind of this behavior.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.typeResolver">
            <summary>Custom type resolver used by the WCF DS Client.</summary>
            <remarks>
            This function is used instead of calling the IEdmModel.FindType.
            The first parameter to the function is the expected type (the type infered from the parent property or specified by the external caller).
            The second parameter is the type name from the payload.
            The function should return the resolved type, or null if no such type was found.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.allowDuplicatePropertyNames">
            <summary>
            If set to true, allows the writers to write duplicate properties of entries and 
            complex values (i.e., properties that have the same name). Defaults to 'false'.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.usesV1Provider">
            <summary>true if the server uses a V1 provider; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.typeScheme">
            <summary>Used to specify custom type scheme. Used for compatibility with WCF DS Client.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.odataNamespace">
            <summary>Used to specify custom data namespace. Used for compatibility with WCF DS Client.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.formatBehaviorKind">
            <summary>The format behavior kind of this behavior.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderBehavior.operationsBoundToEntityTypeMustBeContainerQualified">
            <summary>Determines whether operations bound to the given type must be container qualified.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderBehavior.#ctor(Microsoft.Data.OData.ODataBehaviorKind,Microsoft.Data.OData.ODataBehaviorKind,System.Boolean,System.Boolean,System.Func{Microsoft.Data.Edm.IEdmType,System.String,Microsoft.Data.Edm.IEdmType},System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="formatBehaviorKind">The format behavior kind of this behavior.</param>
            <param name="apiBehaviorKind">The API behavior kind of this behavior.</param>
            <param name="allowDuplicatePropertyNames">
            If set to true, allows the writers to write duplicate properties of entries and 
            complex values (i.e., properties that have the same name). Defaults to 'false'.
            </param>
            <param name="usesV1Provider">true if the server uses a V1 provider; otherwise false.</param>
            <param name="typeResolver">Custom type resolver which takes both expected type and type name.
            This function is used instead of the IEdmModel.FindType is it's specified.
            The first parameter to the function is the expected type (the type infered from the parent property or specified by the external caller).
            The second parameter is the type name from the payload.
            The function should return the resolved type, or null if no such type was found.</param>
            <param name="odataNamespace">Custom data namespace.</param>
            <param name="typeScheme">Custom type scheme to use when resolving types.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderBehavior.CreateWcfDataServicesClientBehavior(System.Func{Microsoft.Data.Edm.IEdmType,System.String,Microsoft.Data.Edm.IEdmType},System.String,System.String)">
            <summary>
            Create the reader behavior for the WCF Data Services client.
            </summary>
            <param name="typeResolver">Custom type resolver which takes both expected type and type name.
            This function is used instead of the IEdmModel.FindType is it's specified.
            The first parameter to the function is the expected type (the type infered from the parent property or specified by the external caller).
            The second parameter is the type name from the payload.
            The function should return the resolved type, or null if no such type was found.</param>
            <param name="odataNamespace">Custom data namespace.</param>
            <param name="typeScheme">Custom type scheme to use when resolving types.</param>
            <returns>The created reader behavior.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderBehavior.CreateWcfDataServicesServerBehavior(System.Boolean)">
            <summary>
            Create the reader behavior for the WCF Data Services server.
            </summary>
            <param name="usesV1Provider">true if the server uses a V1 provider; otherwise false.</param>
            <returns>The created reader behavior.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataReaderBehavior.ResetFormatBehavior">
            <summary>
            Resets the format behavior of the current reader behavior to the default format behavior.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.DefaultBehavior">
            <summary>
            Get the default reader behavior for the OData library.
            </summary>
            <returns>The default reader behavior.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.ODataTypeScheme">
            <summary>
            Used to specify custom type scheme. Used for compatibility with WCF DS Client.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.ODataNamespace">
            <summary>
            Used to specify custom data namespace. Used for compatibility with WCF DS Client.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.AllowDuplicatePropertyNames">
            <summary>
            If set to true, allows the writers to write duplicate properties of entries and 
            complex values (i.e., properties that have the same name). Defaults to 'false'.
            </summary>
            <remarks>
            Independently of this setting duplicate property names are never allowed if one 
            of the duplicate property names refers to a named stream property, 
            an association link or a collection.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.UseV1ProviderBehavior">
            <summary>
            true if the server is using V1 provider; false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.TypeResolver">
            <summary>
            Custom type resolver used by the WCF DS Client.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.FormatBehaviorKind">
            <summary>The format behavior kind of this behavior.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.ApiBehaviorKind">
            <summary>The API behavior kind of this behavior.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataReaderBehavior.OperationsBoundToEntityTypeMustBeContainerQualified">
            <summary>Determines whether operations bound to the given entity type must be container qualified.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWriterBehavior">
            <summary>
            Class that captures all the information needed to make writer behave
            differently when used inside of WCF Data Services or outside.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterBehavior.defaultWriterBehavior">
            <summary>The default writer behavior for the OData library.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterBehavior.apiBehaviorKind">
            <summary>The API behavior kind of this behavior.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterBehavior.usesV1Provider">
            <summary>true if the server uses a V1 provider; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterBehavior.allowNullValuesForNonNullablePrimitiveTypes">
            <summary>true to allow null values for non-nullable primitive types; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterBehavior.allowDuplicatePropertyNames">
            <summary>
            If set to true, allows the writers to write duplicate properties of entries and complex values 
            (i.e., properties that have the same name). Defaults to 'false'.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterBehavior.typeScheme">
            <summary>Used to specify custom type scheme. Used for compatibility with WCF DS Client.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterBehavior.odataNamespace">
            <summary>Used to specify custom data namespace. Used for compatibility with WCF DS Client.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataWriterBehavior.formatBehaviorKind">
            <summary>The format behavior kind of this behavior.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterBehavior.#ctor(Microsoft.Data.OData.ODataBehaviorKind,Microsoft.Data.OData.ODataBehaviorKind,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="formatBehaviorKind">The format behavior kind of this behavior.</param>
            <param name="apiBehaviorKind">The API behavior kind of this behavior.</param>
            <param name="usesV1Provider">true if the server uses a V1 provider; otherwise false.</param>
            <param name="allowNullValuesForNonNullablePrimitiveTypes">
            true to allow null values for non-nullable primitive types; otherwise false.
            </param>
            <param name="allowDuplicatePropertyNames">
            If set to true, allows the writers to write duplicate properties of entries 
            and complex values (i.e., properties that have the same name).
            </param>
            <param name="odataNamespace">Custom data namespace.</param>
            <param name="typeScheme">Custom type scheme to use when resolving types.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterBehavior.CreateWcfDataServicesClientBehavior(System.String,System.String)">
            <summary>
            Create the writer behavior for the WCF Data Services client.
            </summary>
            <param name="odataNamespace">Custom data namespace.</param>
            <param name="typeScheme">Custom type scheme to use when resolving types.</param>
            <returns>The created writer behavior.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterBehavior.CreateWcfDataServicesServerBehavior(System.Boolean)">
            <summary>
            Create the writer behavior for the WCF Data Services server.
            </summary>
            <param name="usesV1Provider">true if the server uses a V1 provider; otherwise false.</param>
            <returns>The created writer behavior.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataWriterBehavior.UseDefaultFormatBehavior">
            <summary>
            Resets the format behavior of the current writer behavior to the default format behavior.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterBehavior.DefaultBehavior">
            <summary>
            Get the default writer behavior.
            </summary>
            <returns>The default writer behavior.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterBehavior.ODataTypeScheme">
            <summary>
            Used to specify custom type scheme. Used for compatibility with WCF DS Client.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterBehavior.ODataNamespace">
            <summary>
            Used to specify custom data namespace. Used for compatibility with WCF DS Client.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterBehavior.UseV1ProviderBehavior">
             <summary>
             EPM mappings are defined on entity types but not on complex types.  For entity types, the EPM mapping for each of its primitive properties stay the same.
             For complex types however, the EPM mappings changes depending on the entity type each complex property is declared on.
             For example, if the "Customer" entity type has the properties Address1 and Address2 both of the complex type "Address".  If properties in Address1
             are not mapped while properties in Address2 are mapped with KeepInContent=false, when we serialze the Address type in atom format, we keep properties of
             Address1 in content while skipping properties of Address2 from the content.  Thus the same complex type can get serialized differently for each instance
             of the type.
            
             Astoria has a bug for V1 providers in which it creates and caches EPM information on the complex type itself the first time it serializes
             an instance of the complex type.  So subsequent writes will serialize the complex type the same way regardless of its EPM mapping.
             This creates the following 2 problems:
             1. If a primitive property of a complex type is not part of a EPM mapping or has KeepInContent=true the first time it's serialized, the property will always
                be serialized in the content for the remaining lifetime of the service, even for instances where KeepInContent=false.
             2. If a primitive property of a complex type has KeepInContent=false the first time it's serialized, the property will always be missing in the content
                for the remaining lifetime of the service, even for instances that do not belong to a EPM mapping or have KeepInContent=true.
             Unfortunately we cannot fix issue 1 because it can break existing third party clients.  We have to fix issue 2 because it is a data corruption issue.
            
             The solution is to remember on the first write whether a primitive property of a complex type is serialized in content or not.  On subsequent writes
             to the same property, we will always keep it in content if the initial write is in content.  Otherwise we calculate whether it should be in content
             based on ShouldWritePropertyInContent.
            
             NOTE: this assumes that the complex type in question does not change throughout the lifetime of the service.
             
             See bug 174185.
             </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterBehavior.AllowNullValuesForNonNullablePrimitiveTypes">
            <summary>
            If set to true, the writers will allow writing null values even if the metadata specifies a non-nullable primitive type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterBehavior.AllowDuplicatePropertyNames">
            <summary>
            If set to true, allows the writers to write duplicate properties of entries and complex values (i.e., properties that have the same name). Defaults to 'false'.
            </summary>
            <remarks>
            Independently of this setting duplicate property names are never allowed if one of the duplicate property names refers to
            a named stream property, an association link or a collection.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterBehavior.FormatBehaviorKind">
            <summary>The format behavior kind of this behavior.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWriterBehavior.ApiBehaviorKind">
            <summary>The API behavior kind of this behavior.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer">
            <summary>
            OData ATOM deserializer for error payloads.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.ReadErrorElement(Microsoft.Data.OData.Atom.BufferingXmlReader,System.Int32)">
            <summary>
            Reads the content of an error element.
            </summary>
            <param name="xmlReader">The Xml reader to read the error payload from.</param>
            <param name="maxInnerErrorDepth">The maximumum number of recursive internalexception elements to allow.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.ODataError"/> representing the error.</returns>
            <remarks>
            This method is used to read top-level errors as well as in-stream errors (from inside the buffering Xml reader).
            Pre-Condition:  XmlNodeType.Element   - The m:error start element.
            Post-Condition: XmlNodeType.EndElement - The m:error end-element.
                            XmlNodeType.Element    - The empty m:error start element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.ReadTopLevelError">
            <summary>
            Reads a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.None    - assumes that the Xml reader has not been used yet.
            Post-Condition: Any                 - the next node after the m:error end element or the empty m:error element node.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.VerifyErrorElementNotFound(Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateErrorElementPropertyBitMask@,Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateErrorElementPropertyBitMask,System.String)">
            <summary>
            Verifies that the specified element was not yet found in a top-level error element.
            </summary>
            <param name="elementsFoundBitField">
            The bit field which stores which elements of an error were found so far.
            </param>
            <param name="elementFoundBitMask">The bit mask for the element to check.</param>
            <param name="elementName">The name of the element to check (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.VerifyInnerErrorElementNotFound(Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateInnerErrorElementPropertyBitMask@,Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateInnerErrorElementPropertyBitMask,System.String)">
            <summary>
            Verifies that the specified element was not yet found in an inner error element.
            </summary>
            <param name="elementsFoundBitField">
            The bit field which stores which elements of an inner error were found so far.
            </param>
            <param name="elementFoundBitMask">The bit mask for the element to check.</param>
            <param name="elementName">The name of the element to check (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.ReadInnerErrorElement(Microsoft.Data.OData.Atom.BufferingXmlReader,System.Int32,System.Int32)">
            <summary>
            Reads the content of an inner error element.
            </summary>
            <param name="xmlReader">The (buffering) Xml reader to read the error payload from.</param>
            <param name="recursionDepth">The number of times this function has been called recursively.</param>
            <param name="maxInnerErrorDepth">The maximumum number of recursive internalexception elements to allow.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.ODataInnerError"/> representing the inner error.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the m:innererror or m:internalexception element
            Post-Condition: Any                 - the node after the m:innererror/m:internalexception end element or the node after the empty m:innererror/m:internalexception element node.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateErrorElementPropertyBitMask">
            <summary>
            An enumeration of the various kinds of elements in an m:error element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateErrorElementPropertyBitMask.None">
            <summary>No duplicates.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateErrorElementPropertyBitMask.Code">
            <summary>The 'code' element of the error element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateErrorElementPropertyBitMask.Message">
            <summary>The 'message' element of the error element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateErrorElementPropertyBitMask.InnerError">
            <summary>The 'innererror' element of the error element.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateInnerErrorElementPropertyBitMask">
            <summary>
            An enumeration of the various kinds of elements in an internal error element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateInnerErrorElementPropertyBitMask.None">
            <summary>No duplicates.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateInnerErrorElementPropertyBitMask.Message">
            <summary>The 'message' element of the inner error element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateInnerErrorElementPropertyBitMask.TypeName">
            <summary>The 'type' element of the inner error element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateInnerErrorElementPropertyBitMask.StackTrace">
            <summary>The 'stacktrace' element of the inner error element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomErrorDeserializer.DuplicateInnerErrorElementPropertyBitMask.InternalException">
            <summary>The 'internalexception' element of the inner error element.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmCustomReader">
            <summary>
            Reader for the EPM custom-only. Read the EPM properties from cached values.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmReader">
            <summary>
            Base class for EPM readers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.EpmReader.atomInputContext">
            <summary>The input context currently in use.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.EpmReader.entryState">
            <summary>The reader entry state to use for the entry to which the EPM is applied.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmReader.#ctor(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="entryState">The reader entry state to use for the entry to which the EPM is applied.</param>
            <param name="inputContext">The input context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmReader.SetEntryEpmValue(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo,System.Object)">
            <summary>
            Sets the value read from EPM to a property on an entry.
            </summary>
            <param name="epmInfo">The EPM info for the mapping for which the value was read.</param>
            <param name="propertyValue">The property value read, if the value was specified as null then this should be null,
            if the value was missing the method should not be called at all.
            For primitive properties this should be the string value, for all other properties this should be the exact value type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmReader.SetEpmValue(Microsoft.Data.OData.ReadOnlyEnumerable{Microsoft.Data.OData.ODataProperty},Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo,System.Object)">
            <summary>
            Sets the value read from EPM to a property on an entry.
            </summary>
            <param name="targetList">The target list, which is a list of properties (on entry or complex value).</param>
            <param name="targetTypeReference">The type of the value on which to set the property (can be entity or complex).</param>
            <param name="epmInfo">The EPM info for the mapping for which the value was read.</param>
            <param name="propertyValue">The property value read, if the value was specified as null then this should be null,
            if the value was missing the method should not be called at all.
            For primitive properties this should be the string value, for all other properties this should be the exact value type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmReader.SetEpmValueForSegment(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo,System.Int32,Microsoft.Data.Edm.IEdmStructuredTypeReference,Microsoft.Data.OData.ReadOnlyEnumerable{Microsoft.Data.OData.ODataProperty},System.Object)">
            <summary>
            Sets a property value for a segment of the EPM source path.
            </summary>
            <param name="epmInfo">The EPM info according to which we are mapping the value to properties.</param>
            <param name="propertyValuePathIndex">The index in the epmInfo.PropertyValuePath for the source segment for which to set the value.</param>
            <param name="segmentStructuralTypeReference">The structural type of the parent segment.</param>
            <param name="existingProperties">The list of properties of the parent segment, this method may add to this list.</param>
            <param name="propertyValue">The property value read, if the value was specified as null then this should be null,
            if the value was missing the method should not be called at all.
            For primitive properties this should be the string value, for all other properties this should be the exact value type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmReader.AddEpmPropertyValue(Microsoft.Data.OData.ReadOnlyEnumerable{Microsoft.Data.OData.ODataProperty},System.String,System.Object,System.Boolean)">
            <summary>
            Creates and adds a new property to the list of properties for an EPM.
            </summary>
            <param name="properties">The list of properties to add the property to.</param>
            <param name="propertyName">The name of the property to add.</param>
            <param name="propertyValue">The value of the property to add.</param>
            <param name="checkDuplicateEntryPropertyNames">true if the new property should be checked for duplicates against the entry properties; false otherwise.
            This should be true if the <paramref name="properties"/> is the list of properties for the entry, and false in all other cases.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.EpmReader.EntryState">
            <summary>The reader entry state to use for the entry to which the EPM is applied.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.EpmReader.Version">
            <summary>The version of OData protocol to use.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.EpmReader.MessageReaderSettings">
            <summary>The reader settings to use.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomReader.#ctor(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="entryState">The reader entry state for the entry to which the EPM is applied.</param>
            <param name="inputContext">The input context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomReader.ReadEntryEpm(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Reads the custom EPM for an entry.
            </summary>
            <param name="entryState">The reader entry state for the entry to which the EPM is applied.</param>
            <param name="inputContext">The input context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomReader.ReadEntryEpm">
            <summary>
            Reads an EPM for the entire entry.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmCustomReaderValueCache">
            <summary>
            Cache for values read during deserialization of custom EPM.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.EpmCustomReaderValueCache.customEpmValues">
            <summary>
            List of custom EPM values read.
            This is a map from EPM info to the value read from the payload.
            </summary>
            <remarks>
            The list order is the order in which the values were read from the payload.
            They will be applied to the entry properties in that order (this needs to be maintained).
            The key is the EPM info for the mapping according to which the value was read.
            The value is the string value read from the content (not converted in any way).
            null value means true null value should be used.
            If the value was missing from the payload there will be no record of it in this list.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomReaderValueCache.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomReaderValueCache.Contains(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo)">
            <summary>
            Determines if the cache already contains a value for the specified EPM mapping.
            </summary>
            <param name="epmInfo">The EPM info for the EPM mapping to look for.</param>
            <returns>true if the cache already contains a value for this mapping, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomReaderValueCache.Add(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo,System.String)">
            <summary>
            Adds a value to cache.
            </summary>
            <param name="epmInfo">The EPM info for the mapping according to which the value was read.</param>
            <param name="value">The value to cache.</param>
            <remarks>
            The method will only store the first value for any given EPM info, since in custom EPM
            only the first occurrence of the element/attribute is used, the others are ignored.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.EpmCustomReaderValueCache.CustomEpmValues">
            <summary>
            The list of stored custom EPM values (key is the EPM info, value is the string value read for it).
            The list is in the order in which the values were read from the payload.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomEpmDeserializer">
            <summary>
            OData ATOM deserializer for EPM.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEpmDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEpmDeserializer.TryReadExtensionElementInEntryContent(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads an extension element in non-ATOM namespace in the content of the entry element.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <returns>true if a mapping for the current custom element was found and the element was read; otherwise false.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the element in non-ATOM namespace to read.
            Post-Condition: Any                 - the node after the extension element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEpmDeserializer.TryReadCustomEpmElement(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Metadata.EpmTargetPathSegment)">
            <summary>
            Reads an element for custom EPM.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="epmTargetPathSegment">The EPM target segment for the parent element to which the element belongs.</param>
            <returns>true if a mapping for the current custom element was found and the element was read; otherwise false.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the element to read.
            Post-Condition: Any                 - the node after the element which was read.
            
            The method works on any element, it checks if the element should be used for EPM or not.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEpmDeserializer.ReadCustomEpmAttribute(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Metadata.EpmTargetPathSegment)">
            <summary>
            Reads an attribute for custom EPM.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="epmTargetPathSegmentForElement">The EPM target segment for the element to which the attribute belongs.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Attribute - the attribute to read.
            Post-Condition: XmlNodeType.Attribute - the same attribute, the method doesn't move the reader.
            
            The method works on any attribute, it checks if the attribute should be used for EPM or not.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer">
            <summary>
            OData ATOM deserializer for entity reference links.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.ODataLinksElementName">
            <summary>OData element name for the 'links' element</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.ODataCountElementName">
            <summary>OData element name for the 'count' element</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.ODataNextElementName">
            <summary>OData element name for the 'next' element</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.ODataUriElementName">
            <summary>OData element name for the 'uri' element</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.ReadEntityReferenceLinks">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
            <remarks>
            Pre-Condition:  PayloadStart        - assumes that the XML reader has not been used yet.
            Post-Condtion:  XmlNodeType.None    - The reader must be at the end of the input.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.ReadEntityReferenceLink">
            <summary>
            Reads a top-level entity reference link.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> instance representing the read entity reference link.</returns>
            <remarks>
            Pre-Condition:  PayloadStart        - assumes that the XML reader has not been used yet.
            Post-Condtion:  XmlNodeType.None    - The reader must be at the end of the input.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.VerifyEntityReferenceLinksElementNotFound(Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.DuplicateEntityReferenceLinksElementBitMask@,Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.DuplicateEntityReferenceLinksElementBitMask,System.String,System.String)">
            <summary>
            Verifies that the specified element was not yet found in the entity reference links element.
            </summary>
            <param name="elementsFoundBitField">The bit field which stores which elements of an inner error were found so far.</param>
            <param name="elementFoundBitMask">The bit mask for the element to check.</param>
            <param name="elementNamespace">The namespace name of the element ot check (used for error reporting).</param>
            <param name="elementName">The name of the element to check (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.ReadLinksElement">
            <summary>
            Reads all top-level entity reference links and the (optional) inline count and next link elements.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> instance representing the read entity reference links.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - The 'd:links' element.
            Post-Condtion:  any                 - The node after the 'd:links' end element (or empty 'd:links' element).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.ReadUriElement">
            <summary>
            Read an entity reference link.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> which was read.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the 'd:uri' element to read.
            Post-Condition: Any                 - the node after the 'd:uri' element which was read.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.DuplicateEntityReferenceLinksElementBitMask">
            <summary>
            An enumeration of the various kinds of properties on an entity reference link collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.DuplicateEntityReferenceLinksElementBitMask.None">
            <summary>No duplicates.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.DuplicateEntityReferenceLinksElementBitMask.Count">
            <summary>The 'm:count' element of the 'links' element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntityReferenceLinkDeserializer.DuplicateEntityReferenceLinksElementBitMask.NextLink">
            <summary>The 'd:next' element of the 'links' element.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.MetadataUtilsCommon">
            <summary>
            Class with utility methods for dealing with OData metadata that are shared with the OData.Query project.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsODataPrimitiveTypeKind(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Checks whether a type reference refers to an OData primitive type (i.e., a primitive, non-stream type).
            </summary>
            <param name="typeReference">The (non-null) <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to check.</param>
            <returns>true if the <paramref name="typeReference"/> is an OData primitive type reference; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsODataPrimitiveTypeKind(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Checks whether a type refers to an OData primitive type (i.e., a primitive, non-stream type).
            </summary>
            <param name="type">The (non-null) <see cref="T:Microsoft.Data.Edm.IEdmType"/> to check.</param>
            <returns>true if the <paramref name="type"/> is an OData primitive type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsODataComplexTypeKind(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Checks whether a type reference refers to an OData complex type.
            </summary>
            <param name="typeReference">The (non-null) <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to check.</param>
            <returns>true if the <paramref name="typeReference"/> is an OData complex type reference; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsODataComplexTypeKind(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Checks whether a type refers to an OData complex type.
            </summary>
            <param name="type">The (non-null) <see cref="T:Microsoft.Data.Edm.IEdmType"/> to check.</param>
            <returns>true if the <paramref name="type"/> is an OData complex type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsODataEntityTypeKind(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Checks whether a type reference refers to an OData entity type.
            </summary>
            <param name="typeReference">The (non-null) <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to check.</param>
            <returns>true if the <paramref name="typeReference"/> is an OData entity type reference; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsODataEntityTypeKind(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Checks whether a type refers to an OData entity type.
            </summary>
            <param name="type">The (non-null) <see cref="T:Microsoft.Data.Edm.IEdmType"/> to check.</param>
            <returns>true if the <paramref name="type"/> is an OData entity type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsODataValueType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Checks whether a type reference is considered a value type in OData.
            </summary>
            <param name="typeReference">The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to check.</param>
            <returns>true if the <paramref name="typeReference"/> is considered a value type; otherwise false.</returns>
            <remarks>
            The notion of value type in the OData space is driven by the IDSMP requirements where 
            Clr types denote the primitive types.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsNonEntityCollectionType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Checks whether a type reference refers to a OData collection value type of non-entity elements.
            </summary>
            <param name="typeReference">The (non-null) <see cref="T:Microsoft.Data.Edm.IEdmType"/> to check.</param>
            <returns>true if the <paramref name="typeReference"/> is a non-entity OData collection value type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.IsNonEntityCollectionType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Checks whether a type refers to a OData collection value type of non-entity elements.
            </summary>
            <param name="type">The (non-null) <see cref="T:Microsoft.Data.Edm.IEdmType"/> to check.</param>
            <returns>true if the <paramref name="type"/> is a non-entity OData collection value type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.AsPrimitiveOrNull(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Casts an <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to a <see cref="T:Microsoft.Data.Edm.IEdmPrimitiveTypeReference"/> or returns null if this is not supported.
            </summary>
            <param name="typeReference">The type reference to convert.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmPrimitiveTypeReference"/> instance or null if the <paramref name="typeReference"/> cannot be converted.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.AsEntityOrNull(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Casts an <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to a <see cref="T:Microsoft.Data.Edm.IEdmEntityTypeReference"/> or returns null if this is not supported.
            </summary>
            <param name="typeReference">The type reference to convert.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmComplexTypeReference"/> instance or null if the <paramref name="typeReference"/> cannot be converted.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.AsStructuredOrNull(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Casts an <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to a <see cref="T:Microsoft.Data.Edm.IEdmStructuredTypeReference"/> or returns null if this is not supported.
            </summary>
            <param name="typeReference">The type reference to convert.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmStructuredTypeReference"/> instance or null if the <paramref name="typeReference"/> cannot be converted.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtilsCommon.CanConvertPrimitiveTypeTo(Microsoft.Data.Edm.IEdmPrimitiveType,Microsoft.Data.Edm.IEdmPrimitiveType)">
            <summary>
            Determines if a <paramref name="sourcePrimitiveType"/> is convertibale according to OData rules to the
            <paramref name="targetPrimitiveType"/>.
            </summary>
            <param name="sourcePrimitiveType">The type which is to be converted.</param>
            <param name="targetPrimitiveType">The type to which we want to convert.</param>
            <returns>true if the source type is convertible to the target type; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.ODataEdmPropertyAnnotation">
            <summary>Represents an annotation to hold information for a particular property.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.ODataEdmPropertyAnnotation.NullValueReadBehaviorKind">
            <summary> Gets the behavior for readers when reading property with null value. </summary>
            <returns>The behavior for readers when reading property with null value.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataAction">
            <summary>Represents an OData action.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataOperation">
            <summary>
            Represents a function or an action.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.metadataBuilder">
            <summary>the metadata builder for this operation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.title">
            <summary>A human-readable description of the <see cref="T:Microsoft.Data.OData.ODataAction"/> or the <see cref="T:Microsoft.Data.OData.ODataFunction"/>.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.hasNonComputedTitle">
            <summary>true if a title was provided by the user or seen on the wire, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.computedTitle">
            <summary>A human-readable description of the <see cref="T:Microsoft.Data.OData.ODataAction"/> or the <see cref="T:Microsoft.Data.OData.ODataFunction"/>, computed by the metadata builder.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.target">
            <summary>The URI to invoke the <see cref="T:Microsoft.Data.OData.ODataAction"/> or the <see cref="T:Microsoft.Data.OData.ODataFunction"/>.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.hasNonComputedTarget">
            <summary>true if a target was provided by the user or seen on the wire, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.computedTarget">
            <summary>The URI to invoke the <see cref="T:Microsoft.Data.OData.ODataAction"/> or the <see cref="T:Microsoft.Data.OData.ODataFunction"/>, computed by the metadata builder.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.operationFullName">
            <summary>The cached full name of the operation to use.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataOperation.bindingParameterTypeName">
            <summary>The binding parameter type name for this operation.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOperation.SetMetadataBuilder(Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder,System.Uri)">
            <summary>
            Sets the metadata builder for this operation.
            </summary>
            <param name="builder">The metadata builder used to compute values from model annotations.</param>
            <param name="metadataDocumentUri">The metadata document Uri.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataOperation.GetMetadataBuilder">
            <summary>
            Gets the metadata builder for this operation.
            </summary>
            <returns>The metadata builder used to compute values.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOperation.Metadata">
            <summary>Gets or sets the URI to get metadata for the <see cref="T:Microsoft.Data.OData.ODataAction" />.</summary>
            <returns>The URI to get metadata for the <see cref="T:Microsoft.Data.OData.ODataAction" />.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOperation.Title">
            <summary>Gets or sets a human-readable description of the <see cref="T:Microsoft.Data.OData.ODataAction" />.</summary>
            <returns>A human-readable description of the <see cref="T:Microsoft.Data.OData.ODataAction" />.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataOperation.Target">
            <summary>Gets or sets the URI to invoke the <see cref="T:Microsoft.Data.OData.ODataAction" />.</summary>
            <returns> The URI to invoke the <see cref="T:Microsoft.Data.OData.ODataAction" />.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataFunction">
            <summary>Represents an OData function.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMetadataInputContext">
            <summary>
            Implementation of the OData input for metadata documents.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMetadataInputContext.baseXmlReader">
            <summary>The XML reader used to parse the input.</summary>
            <remarks>Do not use this to actually read the input, instead use the xmlReader.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMetadataInputContext.xmlReader">
            <summary>The XML reader to read from.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataInputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>Constructor.</summary>
            <param name="format">The format for this input context.</param>
            <param name="messageStream">The stream to read data from.</param>
            <param name="encoding">The encoding to use to read the input.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataInputContext.ReadMetadataDocument">
            <summary>
            Read a metadata document. 
            This method reads the metadata document from the input and returns 
            an <see cref="T:Microsoft.Data.Edm.IEdmModel"/> that represents the read metadata document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmModel"/> representing the read metadata document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataInputContext.DisposeImplementation">
            <summary>
            Disposes the input context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMetadataInputContext.ReadMetadataDocumentImplementation">
            <summary>
            This methods reads the metadata from the input and returns an <see cref="T:Microsoft.Data.Edm.IEdmModel"/>
            representing the read metadata information.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmModel"/> instance representing the read metadata.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EdmLibraryExtensions">
            <summary>
            Class with code that will eventually live in EdmLib.
            </summary>
            <remarks>This class should go away completely when the EdmLib integration is fully done.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.CollectionTypeQualifier">
            <summary>The qualifier to turn a type name into a Collection type name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.CollectionTypeFormat">
            <summary>Format string to describe a Collection of a given type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.PrimitiveTypeReferenceMap">
            <summary>
            Map of CLR primitive type to EDM primitive type reference. Doesn't include spatial types since they need assignability and not equality.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.BooleanTypeReference">
            <summary>Type reference for Edm.Boolean.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ByteTypeReference">
            <summary>Type reference for Edm.Byte.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.DateTimeTypeReference">
            <summary>Type reference for Edm.DateTime.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.DecimalTypeReference">
            <summary>Type reference for Edm.Decimal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.DoubleTypeReference">
            <summary>Type reference for Edm.Double.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.Int16TypeReference">
            <summary>Type reference for Edm.Int16.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.Int32TypeReference">
            <summary>Type reference for Edm.Int32.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.Int64TypeReference">
            <summary>Type reference for Edm.Int64.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.SByteTypeReference">
            <summary>Type reference for Edm.SByte.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.StringTypeReference">
            <summary>Type reference for Edm.String.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.SingleTypeReference">
            <summary>Type reference for Edm.Float.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsUserModel(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            A method that determines whether a given model is a user model or one of the built-in core models
            that can only used for primitive type resolution.
            </summary>
            <param name="model">The model to check.</param>
            <returns>true if the <paramref name="model"/> is a user model; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsPrimitiveType(System.Type)">
            <summary>
            Checks whether the provided <paramref name="clrType"/> is a supported primitive type.
            </summary>
            <param name="clrType">The CLR type to check.</param>
            <returns>true if the <paramref name="clrType"/> is a supported primitive type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.EntityTypes(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Returns all the entity types in a model.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> to get the entity types for (must not be null).</param>
            <returns>An enumerable of all <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> instances in the <paramref name="model"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ToCollectionTypeReference(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Creates a collection value type for the specified <paramref name="itemTypeReference"/>.
            </summary>
            <param name="itemTypeReference">The <see cref="T:Microsoft.Data.Edm.IEdmPrimitiveTypeReference"/> for the item type.</param>
            <returns>The created <see cref="T:Microsoft.Data.Edm.IEdmCollectionTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ToCollectionTypeReference(Microsoft.Data.Edm.IEdmComplexTypeReference)">
            <summary>
            Creates a collection type for the specified <paramref name="itemTypeReference"/>.
            </summary>
            <param name="itemTypeReference">The <see cref="T:Microsoft.Data.Edm.IEdmComplexTypeReference"/> for the item type.</param>
            <returns>The created <see cref="T:Microsoft.Data.Edm.IEdmCollectionTypeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsAssignableFrom(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Checks if the <paramref name="baseType"/> type reference is assignable from the <paramref name="subtype"/> type reference.
            In other words, if <paramref name="subtype"/> is a subtype of <paramref name="baseType"/> or not.
            </summary>
            <param name="baseType">Type of the base type.</param>
            <param name="subtype">Type of the sub type.</param>
            <returns>true, if the <paramref name="baseType"/> is assignable to <paramref name="subtype"/>. Otherwise returns false.</returns>
            <remarks>Note that this method only checks the type definition for assignability; it does not consider nullability
            or any other facets of the type reference.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsAssignableFrom(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Checks if the <paramref name="baseType"/> type is assignable from the <paramref name="subtype"/> type.
            In other words, if <paramref name="subtype"/> is a subtype of <paramref name="baseType"/> or not.
            </summary>
            <param name="baseType">Type of the base type.</param>
            <param name="subtype">Type of the sub type.</param>
            <returns>true, if the <paramref name="baseType"/> is assignable to <paramref name="subtype"/>. Otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetCommonBaseType(Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Checks if the <paramref name="firstType"/> structured type and the <paramref name="secondType"/> structured type
            have a common base type.
            In other words, if <paramref name="secondType"/> is a subtype of <paramref name="firstType"/> or not.
            </summary>
            <param name="firstType">Type of the base type.</param>
            <param name="secondType">Type of the sub type.</param>
            <returns>The common base type or null if no common base type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetCommonBaseType(Microsoft.Data.Edm.IEdmPrimitiveType,Microsoft.Data.Edm.IEdmPrimitiveType)">
            <summary>
            Checks if the <paramref name="firstType"/> primitive type and the <paramref name="secondType"/> primitive type
            have a common base type.
            In other words, if <paramref name="secondType"/> is a subtype of <paramref name="firstType"/> or not.
            </summary>
            <param name="firstType">Type of the base type.</param>
            <param name="secondType">Type of the sub type.</param>
            <returns>The common base type or null if no common base type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.BaseType(Microsoft.Data.Edm.IEdmPrimitiveType)">
            <summary>
            Returns the base type of a primitive type.
            </summary>
            <param name="type">The <see cref="T:Microsoft.Data.Edm.IEdmPrimitiveType"/> to get the base type for.</param>
            <returns>The base type of the <paramref name="type"/> or null if no base type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.AsComplexOrNull(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Casts an <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to a <see cref="T:Microsoft.Data.Edm.IEdmComplexTypeReference"/> or returns null if this is not supported.
            </summary>
            <param name="typeReference">The type reference to convert.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmComplexTypeReference"/> instance or null if the <paramref name="typeReference"/> cannot be converted.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.AsCollectionOrNull(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Casts an <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to a <see cref="T:Microsoft.Data.Edm.IEdmCollectionTypeReference"/> or returns null if this is not supported.
            </summary>
            <param name="typeReference">The type reference to convert.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmCollectionTypeReference"/> instance or null if the <paramref name="typeReference"/> cannot be converted.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ResolvePrimitiveTypeName(System.String)">
            <summary>
            Resolves the name of a primitive type.
            </summary>
            <param name="typeName">The name of the type to resolve.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the type specified by the <paramref name="typeName"/>;
            or null if no such type could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetCollectionItemType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Get the <see cref="T:Microsoft.Data.Edm.IEdmEntityTypeReference"/> of the item type of the <paramref name="typeReference"/>.
            </summary>
            <param name="typeReference">The collection type to get the item type for.</param>
            <returns>The item type of the <paramref name="typeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetCollectionType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Returns the IEdmCollectionType implementation with the given IEdmType as element type.
            </summary>
            <param name="itemType">IEdmType instance which is the element type.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmCollectionType"/> instance using the <paramref name="itemType"/> as Collection item type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetCollectionType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns the IEdmCollectionType implementation with the given IEdmTypeReference as element type.
            </summary>
            <param name="itemTypeReference">IEdmTypeReference instance which is the element type.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.IEdmCollectionType"/> instance using the <paramref name="itemTypeReference"/> as Collection item type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsGeographyType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Checks whether a type reference is a Geography type.
            </summary>
            <param name="typeReference">The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to check.</param>
            <returns>true if the <paramref name="typeReference"/> is a Geography type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsGeometryType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Checks whether a type reference is a Geometry type.
            </summary>
            <param name="typeReference">The <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> to check.</param>
            <returns>true if the <paramref name="typeReference"/> is a Geometry type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetCollectionItemTypeName(System.String)">
            <summary>
            Returns CollectionValue item type name or null if the provided type name is not a collectionValue.
            </summary>
            <param name="typeName">CollectionValue type name read from payload.</param>
            <returns>CollectionValue element type name or null if not a collectionValue.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.FunctionImportGroupName(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport})">
            <summary>
            Gets the name of a function import group.
            </summary>
            <param name="functionImportGroup">The function import group in question.</param>
            <returns>The name of the function import group.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.FunctionImportGroupFullName(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmFunctionImport})">
            <summary>
            Gets the full name of a function import group.
            </summary>
            <param name="functionImportGroup">The function import group in question.</param>
            <returns>The full name of the function import group.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.NameWithParameters(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Name of the function import with parameters.
            </summary>
            <param name="functionImport">Function import in question.</param>
            <returns>Name of the function import with parameters.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.FullNameWithParameters(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Full name of the function import with parameters.
            </summary>
            <param name="functionImport">Function import in question.</param>
            <returns>Full name of the function import with parameters.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.OperationsBoundToEntityTypeMustBeContainerQualified(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Determines whether operations bound to this type must be qualified with the operation they belong to when appearing in a $select clause.
            </summary>
            <param name="entityType">The entity type the operations are bound to.</param>
            <returns>True if the operations must be container qualified, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ODataFullName(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Gets the full name of the definition referred to by the type reference.
            </summary>
            <param name="typeReference">The type reference to get the full name for.</param>
            <returns>The full name of this <paramref name="typeReference"/>.</returns>
            <remarks>
            Note that this method is different from the EdmLib FullName extension method in that it also returns
            names for collection types. For EdmLib, collection types are functions and thus don't have a full name.
            The name/string they use in CSDL is just shorthand for them.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ODataFullName(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Gets the full name of the type.
            </summary>
            <param name="type">The type to get the full name for.</param>
            <returns>The full name of the <paramref name="type"/>.</returns>
            <remarks>
            Note that this method is different from the EdmLib FullName extension method in that it also returns
            names for collection types. For EdmLib, collection types are functions and thus don't have a full name.
            The name/string they use in CSDL is just shorthand for them.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.Clone(Microsoft.Data.Edm.IEdmTypeReference,System.Boolean)">
            <summary>
            Clones the specified type reference.
            </summary>
            <param name="typeReference">The type reference to clone.</param>
            <param name="nullable">true to make the cloned type reference nullable; false to make it non-nullable.</param>
            <returns>The cloned <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.TargetMultiplicityTemporary(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the multiplicity of a navigation property.
            </summary>
            <param name="property">Reference to the calling object.</param>
            <returns>The multiplicity of the navigation property in question.</returns>
            <remarks>This has been added to EdmLib, but EdmLib won't be released for a while.
            If you need to use this functionality before we release EdmLib, then use this method. Change your calls
            to use the real method whenever we release EdmLib again.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsAssignableFrom(Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Checks if the <paramref name="baseType"/> is assignable to <paramref name="subtype"/>.
            In other words, if <paramref name="subtype"/> is a subtype of <paramref name="baseType"/> or not.
            </summary>
            <param name="baseType">Type of the base type.</param>
            <param name="subtype">Type of the sub type.</param>
            <returns>true, if the <paramref name="baseType"/> is assignable to <paramref name="subtype"/>. Otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsSpatialType(Microsoft.Data.Edm.IEdmPrimitiveType)">
            <summary>
            Checks if the primitive type is a geography or geometry type.
            </summary>
            <param name="primitiveType">The type to check.</param>
            <returns>true, if the <paramref name="primitiveType"/> is a geography or geometry type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsAssignableFrom(Microsoft.Data.Edm.IEdmPrimitiveType,Microsoft.Data.Edm.IEdmPrimitiveType)">
            <summary>
            Checks if the <paramref name="baseType"/> primitive type is assignable to <paramref name="subtype"/> primitive type.
            In other words, if <paramref name="subtype"/> is a subtype of <paramref name="baseType"/> or not.
            </summary>
            <param name="baseType">Type of the base type.</param>
            <param name="subtype">Type of the sub type.</param>
            <returns>true, if the <paramref name="baseType"/> is assignable to <paramref name="subtype"/>. Otherwise returns false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetPrimitiveClrType(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Returns the primitive CLR type for the specified primitive type reference.
            </summary>
            <param name="primitiveTypeReference">The primitive type to resolve.</param>
            <returns>The CLR type for the primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ToTypeReference(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Turns a <see cref="T:Microsoft.Data.Edm.IEdmType"/> into the corresponding non-nullable <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/>.
            </summary>
            <param name="type">The type to convert.</param>
            <returns>A non-nullable type reference for the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsOpenType(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Determines whether the provided <paramref name="type"/> is an open type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if the <paramref name="type"/> is an open type; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.IsStream(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Determines whether the provided <paramref name="type"/> is a stream.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if the <paramref name="type"/> represents a stream; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ContainsProperty(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Checks whether the specified <paramref name="property"/> is defined for the type <paramref name="type"/>.
            </summary>
            <param name="type">The type to check the properties on.</param>
            <param name="property">The property to check for.</param>
            <returns>true if the <paramref name="property"/> is defined for the <paramref name="type"/>; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ContainsProperty(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Checks whether the specified <paramref name="property"/> is defined for the type <paramref name="typeReference"/>.
            </summary>
            <param name="typeReference">The type to check the properties on.</param>
            <param name="property">The property to check for.</param>
            <returns>true if the <paramref name="property"/> is defined for the <paramref name="typeReference"/>; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.FullName(Microsoft.Data.Edm.IEdmEntityContainerElement)">
            <summary>
            Returns the fully qualified name of an entity container element.
            </summary>
            <param name="containerElement">The container element to get the full name for.</param>
            <returns>The full name of the owning entity container, slash, name of the container element.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetPrimitiveTypeReference(System.Type)">
            <summary>
            Returns the primitive type reference for the given Clr type.
            </summary>
            <param name="clrType">The Clr type to resolve.</param>
            <returns>The primitive type reference for the given Clr type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ToTypeReference(Microsoft.Data.Edm.IEdmType,System.Boolean)">
            <summary>
            Turns a <see cref="T:Microsoft.Data.Edm.IEdmType"/> into the corresponding <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/>.
            </summary>
            <param name="type">The type to convert.</param>
            <param name="nullable">true if the returned type reference should be nullable; otherwise false.</param>
            <returns>A type reference for the <paramref name="type"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetCollectionTypeName(System.String)">
            <summary>
            Creates the EDM type name for a collection of the specified item type name. E.g. Collection(Edm.String)
            </summary>
            <param name="itemTypeName">Type name of the items in the collection.</param>
            <returns>Type name for a collection of the specified item type name.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ResolveEntitySet(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Finds the entity set with the specified container and name.
            </summary>
            <param name="model">The model to find the entity set in.</param>
            <param name="containerQualifiedEntitySetName">The container qualified name of the entity set.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> with the specified name or null if no such entity set exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ResolveFunctionImports(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Finds the function import group with the specified container and name. If the name contains the function parameters, this
            method will return the function import with matching parameters.
            </summary>
            <param name="model">The model to find the function import in.</param>
            <param name="containerQualifiedFunctionImportName">The container qualified name of the function import.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> group with the specified name or null if no such function import exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ResolveFunctionImports(Microsoft.Data.Edm.IEdmModel,System.String,System.Boolean)">
            <summary>
            Finds the function import group with the specified container and name. If the name contains the function parameters, this
            method will return the function import with matching parameters.
            </summary>
            <param name="model">The model to find the function import in.</param>
            <param name="containerQualifiedFunctionImportName">The container qualified name of the function import. May contain parameter type names, e.g. Function1(P1Type,P2Type) only if <paramref name="allowParameterTypeNames"/> is true.</param>
            <param name="allowParameterTypeNames">Whether parameter type names are allowed to appear in the function import name to resolve.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> group with the specified name or null if no such function import exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ResolveFunctionImports(Microsoft.Data.Edm.IEdmEntityContainer,System.String)">
            <summary>
            Resolves a function import or function import group.
            </summary>
            <param name="container">The entity container.</param>
            <param name="functionImportName">The function import name to resolve. May contain parameter type names, e.g. Function1(P1Type,P2Type)</param>
            <returns>The resolved function import or function import group.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ResolveFunctionImports(Microsoft.Data.Edm.IEdmEntityContainer,System.String,System.Boolean)">
            <summary>
            Resolves a function import or function import group.
            </summary>
            <param name="container">The entity container.</param>
            <param name="functionImportName">The function import name to resolve. May contain parameter type names, e.g. Function1(P1Type,P2Type) only if <paramref name="allowParameterTypeNames"/> is true.</param>
            <param name="allowParameterTypeNames">Whether parameter type names are allowed to appear in the function import name to resolve.</param>
            <returns>The resolved function import or function import group.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.FindFunctionImportsByBindingParameterTypeHierarchy(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType,System.String)">
            <summary>
            Finds all function imports with the given name which are bindable to an instance of the giving binding type or a more derived type.
            </summary>
            <param name="model">The model to find the function import in.</param>
            <param name="bindingType">The binding entity type.</param>
            <param name="functionImportName">The name of the function imports to find. May be qualified with an entity container name.</param>
            <returns>The function imports that match the search criteria.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.FindFunctionImportsBySpecificBindingParameterType(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmType,System.String)">
            <summary>
            Finds all function imports with the given name which are bindable to an instance of the giving binding type or a more derived type.
            </summary>
            <param name="model">The model to find the function import in.</param>
            <param name="bindingType">The binding entity type.</param>
            <param name="functionImportName">The name of the function imports to find. May be qualified with an entity container name.</param>
            <returns>The function imports that match the search criteria.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetPrimitiveClrType(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Returns the primitive CLR type for the specified primitive type reference.
            </summary>
            <param name="primitiveType">The primitive type to resolve.</param>
            <param name="isNullable">Whether the returned type should be a nullable variant or not.</param>
            <returns>The CLR type for the primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.GetCollectionItemTypeName(System.String,System.Boolean)">
            <summary>
            Returns Collection item type name or null if the provided type name is not a collection.
            </summary>
            <param name="typeName">Collection type name.</param>
            <param name="isNested">Whether it is a nested (recursive) call.</param>
            <returns>Collection element type name or null if not a collection.</returns>
            <remarks>
            The following rules are used for collection type names:
            - it has to start with "Collection(" and end with ")" - trailing and leading whitespaces make the type not to be recognized as collection.
            - there is to be no characters (including whitespaces) between "Collection" and "(" - otherwise it won't berecognized as collection
            - collection item type name has to be a non-empty string - i.e. "Collection()" won't be recognized as collection
            - nested collection - e.g. "Collection(Collection(Edm.Int32))" - are not supported - we will throw
            Note the following are examples of valid type names which are not collection:
            - "Collection()"
            - " Collection(Edm.Int32)"
            - "Collection (Edm.Int32)"
            - "Collection("
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ParameterTypesToString(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Gets the function import parameter types in string.
            </summary>
            <param name="functionImport">Function import in question.</param>
            <returns>Comma separated function import parameter types enclosed in parantheses.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ToTypeReference(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Gets a reference to a primitive kind definition of the appropriate kind.
            </summary>
            <param name="primitiveType">Primitive type to create a reference for.</param>
            <param name="nullable">Flag specifying if the referenced type should be nullable per default.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.TryGetSingleOrDefaultEntityContainer(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityContainer@)">
            <summary>
            Gets the single entity container or the default one if there are multiple containers.
            </summary>
            <param name="model">Model to find entity containers in.</param>
            <param name="foundContainer">Single container that was found.</param>
            <returns>Entity Container found in the model</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EdmLibraryExtensions.ResolveContainerQualifiedElementName(Microsoft.Data.Edm.IEdmModel,System.String,System.Func{Microsoft.Data.Edm.IEdmEntityContainer,System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmEntityContainerElement}})">
            <summary>
            Finds the container elements with the specified container and name.
            </summary>
            <param name="model">The model to find the element in.</param>
            <param name="containerQualifiedElementName">The container qualified name of the elements.</param>
            <param name="resolver">The resolver method to resolve the elements.</param>
            <returns>The enumeration of <see cref="T:Microsoft.Data.Edm.IEdmEntityContainerElement"/> with the specified name or null if no such element exists.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EpmConstants">
            <summary>
            Constant values used related to EPM (entity property mapping).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataEpmKeepInContent">
            <summary>Attribute name for the FC_KeepInContent attribute used for EPM.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataEpmContentKind">
            <summary>Attribute name for the FC_ContentKind attribute used for EPM.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataEpmSourcePath">
            <summary>Attribute name for the FC_SourcePath attribute used for EPM.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataEpmTargetPath">
            <summary>Attribute name for the FC_TargetPath attribute used for EPM.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataEpmNsPrefix">
            <summary>Attribute name for the target namespace prefix (FC_NsPrefix) attribute used for custom EPM.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataEpmNsUri">
            <summary>Attribute name for the target namespace Uri (FC_NsUri) attribute used for custom EPM.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemAuthorEmail">
            <summary>Target path for author/email</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemAuthorName">
            <summary>Target path for author/name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemAuthorUri">
            <summary>Target path for author/uri</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemContributorEmail">
            <summary>Target path for contributor/email</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemContributorName">
            <summary>Target path for contributor/name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemContributorUri">
            <summary>Target path for contributor/uri</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemUpdated">
            <summary>Target path for updated</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemPublished">
            <summary>Target path for published</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemRights">
            <summary>Target path for rights</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemSummary">
            <summary>Target path for summary</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndItemTitle">
            <summary>Target path for title</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathAuthorEmail">
            <summary>Target path for author/email</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathAuthorName">
            <summary>Target path for author/name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathAuthorUri">
            <summary>Target path for author/uri</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathContributorEmail">
            <summary>Target path for contributor/email</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathContributorName">
            <summary>Target path for contributor/name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathContributorUri">
            <summary>Target path for contributor/uri</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathUpdated">
            <summary>Target path for updated</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathPublished">
            <summary>Target path for published</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathRights">
            <summary>Target path for rights</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathSummary">
            <summary>Target path for summary</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.PropertyMappingTargetPathTitle">
            <summary>Target path for title</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndContentKindPlaintext">
            <summary>String value for the syndication content kind 'text'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndContentKindHtml">
            <summary>String value for the syndication content kind 'HTML'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmConstants.ODataSyndContentKindXHtml">
            <summary>String value for the syndication content kind 'XHTML'.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder">
            <summary>
            Builder class for the name of EPM attributes as serialized in CSDL.
            This class keeps track of the number of mappings for a given type/property and appends post fixes to the names as needed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.Separator">
            <summary>Separator character for building attribute names.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.index">
            <summary>Current index.</summary>
            <remarks>The first time the name builder is used the names have no suffix. 
            The second time (after calling MoveNext once)
            the name builder will use suffix '_1', then suffix '_2' and so on.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.suffix">
            <summary>Suffix for current attribute names.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.MoveNext">
            <summary>Move to next attribute name generation.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.EpmKeepInContent">
            <summary>Current keep-in-content attribute name.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.EpmSourcePath">
            <summary>Current source path attribute name.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.EpmTargetPath">
            <summary>Current target path attribute name.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.EpmContentKind">
            <summary>Current content kind attribute name.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.EpmNsPrefix">
            <summary>Current namespace prefix attribute name.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmAttributeNameBuilder.EpmNsUri">
            <summary>Current namespace Uri attribute name.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache">
            <summary>
            Annotation stored on an entity type to hold entity property mapping information.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.mappings">
            <summary>
            A list of the EPM mappings this cache was constructed for. 
            Used to determine whether the cache is dirty or not.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.mappingsForInheritedProperties">
            <summary>
            Inherited EntityPropertyMapping attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.mappingsForDeclaredProperties">
            <summary>
            Own EntityPropertyMapping attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.epmSourceTree">
            <summary>
            EPM source tree for the type this annotation belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.epmTargetTree">
            <summary>
            EPM target tree for the type this annotation belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.model">
            <summary>
            EDM model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.totalMappingCount">
            <summary>The total number of entity property mappings for the entity type that this cache is created for (on the type itself and all its base types).</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.#ctor(Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection,Microsoft.Data.Edm.IEdmModel,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="mappings">The EPM mappings to create the cache for.</param>
            <param name="model">The EDM model.</param>
            <param name="totalMappingCount">The total number of entity property mappings 
            for the entity type that this cache is created for (on the type itself and all its base types).</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.BuildEpmForType(Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Initializes the EPM annotation with EPM information from the specified type.
            </summary>
            <param name="definingEntityType">Entity type to use the EPM infromation from.</param>
            <param name="affectedEntityType">Entity type for this the EPM information is being built.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.IsDirty(Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection)">
            <summary>
            Checks whether the current cache is dirty with respect to the <paramref name="propertyMappings"/>.
            </summary>
            <param name="propertyMappings">The EPM mappings to check this cache against.</param>
            <returns>true if the <paramref name="propertyMappings"/> are not the same as the ones the cache has been created for (or have changed).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.PropertyExistsOnType(Microsoft.Data.Edm.IEdmStructuredType,System.Data.Services.Common.EntityPropertyMappingAttribute)">
            <summary>
            Does given property in the attribute exist in the specified type.
            </summary>
            <param name="structuredType">The type to inspect.</param>
            <param name="epmAttribute">Attribute which has PropertyName.</param>
            <returns>true if property exists in the specified type, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.MappingsForInheritedProperties">
            <summary>
            Inherited EntityPropertyMapping attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.MappingsForDeclaredProperties">
            <summary>
            Own EntityPropertyMapping attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.EpmSourceTree">
            <summary>
            EPM source tree for the type this annotation belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.EpmTargetTree">
            <summary>
            EPM target tree for the type this annotation belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.AllMappings">
            <summary>
            All EntityPropertyMapping attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache.TotalMappingCount">
            <summary>
            The total number of entity property mappings for the entity type that this cache is created for (on the type itself and all its base types).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection">
            <summary>
            Represents an enumerable of <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> that new items can be added to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection.mappings">
            <summary>List of the mappings represented by this enumerable.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection.#ctor">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection" /> class.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection.#ctor(System.Collections.Generic.IEnumerable{System.Data.Services.Common.EntityPropertyMappingAttribute})">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection" /> class.</summary>
            <param name="other">An enumerable of <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> used to initialize the instance. This argument must not be null.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection.Add(System.Data.Services.Common.EntityPropertyMappingAttribute)">
            <summary>Adds the mapping to the list of all mappings represented by this class.</summary>
            <param name="mapping">The <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> to add to the enumerable represented by this class.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection.GetEnumerator">
            <summary>Returns an enumerator for the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> instances in this enumerable.</summary>
            <returns>An enumerator for the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> instances in this enumerable.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns a non-generic enumerator for the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> instances in this enumerable.</summary>
            <returns>A non-generic enumerator for the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute" /> instances in this enumerable.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection.Count">
            <summary>
            The count of mappings stored in this collection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils">
            <summary>
            Helper methods used by the OData reader for the Verbose JSON format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.DetermineFeedPropertyKind(System.String)">
            <summary>
            Compares the <paramref name="propertyName"/> against the list of supported feed-level properties and
            returns the kind of property.
            </summary>
            <param name="propertyName">The name of the property to check.</param>
            <returns>The kind of feed-level property of the property with name <paramref name="propertyName"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ConvertValue(System.Object,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.String)">
            <summary>
            Converts the given JSON value to the expected type as per OData conversion rules for JSON values.
            </summary>
            <param name="value">Value to the converted.</param>
            <param name="primitiveTypeReference">Type reference to which the value needs to be converted.</param>
            <param name="messageReaderSettings">The message reader settings used for reading.</param>
            <param name="version">The version of the OData protocol used for reading.</param>
            <param name="validateNullValue">true to validate null values; otherwise false.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
            <returns>Object which is in sync with the property type (modulo the V1 exception of converting numbers to non-compatible target types).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EnsureInstance``1(``0@)">
            <summary>
            Ensure that the <paramref name="instance"/> is not null; if so create a new instance.
            </summary>
            <typeparam name="T">The type of the instance to check.</typeparam>
            <param name="instance">The instance to check for null.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyNotFound(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask@,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask)">
            <summary>
            Checks whether the specified property has already been found before.
            </summary>
            <param name="propertiesFoundBitField">
            The bit field which stores which properties of an error or inner error were found so far.
            </param>
            <param name="propertyFoundBitMask">The bit mask for the property to check.</param>
            <returns>true if the property has not been read before; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ValidateMetadataStringProperty(System.String,System.String)">
            <summary>
            Validates that the string property in __metadata is valid.
            </summary>
            <param name="propertyValue">The value of the property.</param>
            <param name="propertyName">The name of the property (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.VerifyMetadataPropertyNotFound(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask,System.String)">
            <summary>
            Verifies that the specified property was not yet found.
            </summary>
            <param name="propertiesFoundBitField">The bit field which stores which metadata properties were found so far.</param>
            <param name="propertyFoundBitMask">The bit mask for the property to check.</param>
            <param name="propertyName">The name of the property to check (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ValidateEntityReferenceLinksStringProperty(System.String,System.String)">
            <summary>
            Validates that the string property in an entity reference links collection is valid.
            </summary>
            <param name="propertyValue">The value of the property.</param>
            <param name="propertyName">The name of the property (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ValidateCountPropertyInEntityReferenceLinks(System.Nullable{System.Int64})">
            <summary>
            Validates that the count property in an OData-owned object wrapper is valid.
            </summary>
            <param name="propertyValue">The value of the property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.VerifyEntityReferenceLinksWrapperPropertyNotFound(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EntityReferenceLinksWrapperPropertyBitMask@,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EntityReferenceLinksWrapperPropertyBitMask,System.String)">
            <summary>
            Verifies that the specified property was not yet found.
            </summary>
            <param name="propertiesFoundBitField">
            The bit field which stores which properties of an entity reference link collection were found so far.
            </param>
            <param name="propertyFoundBitMask">The bit mask for the property to check.</param>
            <param name="propertyName">The name of the property to check (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.VerifyErrorPropertyNotFound(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask@,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask,System.String)">
            <summary>
            Verifies that the specified property was not yet found.
            </summary>
            <param name="propertiesFoundBitField">
            The bit field which stores which properties of an error or inner error were found so far.
            </param>
            <param name="propertyFoundBitMask">The bit mask for the property to check.</param>
            <param name="propertyName">The name of the property to check (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ValidateMediaResourceStringProperty(System.String,System.String)">
            <summary>
            Validates that the string property in __mediaresource is valid.
            </summary>
            <param name="propertyValue">The value of the property.</param>
            <param name="propertyName">The name of the property (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ValidateFeedProperty(System.Object,System.String)">
            <summary>
            Validates that the property in feed wrapper is valid.
            </summary>
            <param name="propertyValue">The value of the property.</param>
            <param name="propertyName">The name of the property (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.GetPayloadTypeName(System.Object)">
            <summary>
            Gets the payload type name for an OData OM instance for JSON.
            </summary>
            <param name="payloadItem">The payload item to get the type name for.</param>
            <returns>The type name as read from the payload item (or constructed for primitive items).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ConvertStringValue(System.String,System.Type,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Converts the given JSON string value to the expected type as per OData conversion rules for JSON values.
            </summary>
            <param name="stringValue">String value to the converted.</param>
            <param name="targetType">Target type to which the string value needs to be converted.</param>
            <param name="version">The version of the payload being read.</param>
            <returns>Object which is in sync with the target type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ConvertInt32Value(System.Int32,System.Type,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Boolean)">
            <summary>
            Converts the given JSON int value to the expected type as per OData conversion rules for JSON values.
            </summary>
            <param name="intValue">Int32 value to the converted.</param>
            <param name="targetType">Target type to which the int value needs to be converted.</param>
            <param name="primitiveTypeReference">Type reference to which the value needs to be converted.</param>
            <param name="usesV1ProviderBehavior">true if the conversion should use the V1 provider behavior, false if the default behavior should be used.</param>
            <returns>Object which is in sync with the property type (modulo the V1 exception of converting numbers to non-compatible target types).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ConvertDateTimeValue(System.DateTime,System.Type,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,Microsoft.Data.OData.ODataReaderBehavior)">
            <summary>
            Converts the given datetime value into the allowed target types.
            </summary>
            <param name="datetimeValue">DateTime value as read by the JsonReader.</param>
            <param name="targetType">Target type to which the datetime value needs to be converted.</param>
            <param name="primitiveTypeReference">Type reference to which the value needs to be converted.</param>
            <param name="readerBehavior">ODataReaderBehavior instance.</param>
            <returns>Object which is in sync with the target type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.IsV1PrimitiveType(System.Type)">
            <summary>
            Checks if the given type is a V1 primitive type or not.
            </summary>
            <param name="targetType">Type instance.</param>
            <returns>True if the given target type is a V1 primitive type otherwise returns false.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.FeedPropertyKind">
            <summary>
            An enumeration of the various kinds of properties on a feed wrapper object.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.FeedPropertyKind.Unsupported">
            <summary>An unsupported property at the feed level.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.FeedPropertyKind.Count">
            <summary>The inline count property of a feed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.FeedPropertyKind.Results">
            <summary>The results property of a feed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.FeedPropertyKind.NextPageLink">
            <summary>The next page link property of a feed.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EntityReferenceLinksWrapperPropertyBitMask">
            <summary>
            An enumeration of the various kinds of properties on an entity reference link collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EntityReferenceLinksWrapperPropertyBitMask.None">
            <summary>An unsupported property at the wrapper level.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EntityReferenceLinksWrapperPropertyBitMask.Count">
            <summary>The inline count property of an entity reference links wrapper.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EntityReferenceLinksWrapperPropertyBitMask.Results">
            <summary>The results property of an entity reference links wrapper.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EntityReferenceLinksWrapperPropertyBitMask.NextPageLink">
            <summary>The next page link property of an entity reference links wrapper.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask">
            <summary>
            Enumeration of all properties in error payloads, the value of the enum is the bitmask which identifies
            a bit per property.
            </summary>
            <remarks>
            We only use a single enumeration for both top-level as well as inner errors. 
            This means that some bits are never set for top-level (or inner errors).
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.None">
            <summary>No property found yet.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.Error">
            <summary>The "error" of the top-level object.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.Code">
            <summary>The "code" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.Message">
            <summary>The "message" property of either the error object or the inner error object.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.MessageLanguage">
            <summary>The "lang" property of the message object.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.MessageValue">
            <summary>The "value" property of the message object.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.InnerError">
            <summary>The "innererror" or "internalexception" property of the error object or an inner error object.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.TypeName">
            <summary>The "type" property of an inner error object.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.ErrorPropertyBitMask.StackTrace">
            <summary>The "stacktrace" property of an inner error object.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask">
            <summary>
            Enumeration of all properties in __metadata, the value of the enum is the bitmask which identifies
            a bit per property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.None">
            <summary>No property found yet.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.Uri">
            <summary>The "uri" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.Type">
            <summary>The "type" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.ETag">
            <summary>The "etag" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.MediaUri">
            <summary>The "media_src" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.EditMedia">
            <summary>The "edit_media" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.ContentType">
            <summary>The "content_type" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.MediaETag">
            <summary>The "media_etag" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.Properties">
            <summary>The "properties" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.Id">
            <summary>The "id" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.Actions">
            <summary>The "actions" property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask.Functions">
            <summary>The "functions" property.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader">
            <summary>
            OData reader for the Verbose JSON format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.verboseJsonInputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.verboseJsonEntryAndFeedDeserializer">
            <summary>The entry and feed deserializer to read input with.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The input to read the payload from.</param>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read (in case of entry reader) or entries in the feed to be read (in case of feed reader).</param>
            <param name="readingFeed">true if the reader is created for reading a feed; false when it is created for reading an entry.</param>
            <param name="listener">If not null, the Json reader will notify the implementer of the interface of relevant state changes in the Json reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadAtStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: when reading a feed:    the reader is positioned on the first item in the feed or the end array node of an empty feed
                            when reading an entry:  the first node of the first navigation link value, null for a null expanded link or an end object 
                                                    node if there are no navigation links.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadAtFeedStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'FeedStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  Any start node            - The first entry in the feed
                            JsonNodeType.EndArray     - The end of the feed
            Post-Condition: The reader is positioned over the StartObject node of the first entry in the feed or 
                            on the node following the feed end in case of an empty feed
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadAtFeedEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'FeedEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition: JsonNodeType.EndArray        if the feed is not wrapped in the 'results' wrapper
                           JsonNodeType.EndObject       if the feed is wrapped in the 'results' wrapper
            Post-Condition: JsonNodeType.EndOfInput     for a top-level feed when not reading a nested payload
                            JsonNodeType.Property       more properties exist on the owning entry after the expanded link containing the feed
                            JsonNodeType.EndObject      no further properties exist on the owning entry after the expanded link containing the feed
                            JsonNodeType.EndArray       end of expanded link in request, in this case the feed doesn't actually own the array object and it won't read it.
                            Any                         in case of expanded feed in request, this might be the next item in the expanded array, which is not an entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadAtEntryStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'EntryStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            The first node of the navigation link property value to read next (feed wrapped in 'results' wrapper)
                            JsonNodeType.StartArray             The first node of the navigation link property value to read next (feed not wrapped in 'results' wrapper)
                            JsonNodeType.PrimitiveValue (null)  The null expanded entry value (representing the end of that entry)
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            Post-Condition: JsonNodeType.StartObject            The first node of the navigation link property value to read next (feed wrapped in 'results' wrapper)
                            JsonNodeType.StartArray             The first node of the navigation link property value to read next (feed not wrapped in 'results' wrapper)
                            JsonNodeType.PrimitiveValue (null)  The null expanded entry value (representing the end of that entry)
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadAtEntryEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'EntryEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject              end of object of the entry
                            JsonNodeType.PrimitiveValue (null)  end of null expanded entry
            Post-Condition: The reader is positioned on the first node after the entry's end-object node
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadAtNavigationLinkStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            The first node of the navigation link property value to read next 
                                                                (deferred link or entry inside expanded link or wrapped feed inside expanded link)
                            JsonNodeType.StartArray             feed not wrapped with 'results' wrapper inside of expanded link
                            JsonNodeType.PrimitiveValue (null)  expanded null entry
            Post-Condition: JsonNodeType.StartArray:            expanded link with a feed that is not wrapped with 'results' wrapper
                            JsonNodeType.StartObject            expanded link with a feed that is warpped with 'results' wrapper
                            JsonNodeType.PrimitiveValue (null)  expanded null entry
                            JsonNodeType.Property               deferred link with more properties in owning entry
                            JsonNodeType.EndObject              deferred link as last property of the owning entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadAtNavigationLinkEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
            Post-Condition: JsonNodeType.StartObject        The first node of the navigation link property value to read next
                            JsonNodeType.StartArray         The first node of the navigation link property value with a non-wrapped feed to read next
                            JsonNodeType.EndObject          If no (more) properties exist in the entry's content
                            JsonNoteType.Primitive (null)   If an expanded link with null entity instance was found.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadAtEntityReferenceLink">
            <summary>
            Implementation of the reader logic when in state 'EntityReferenceLink'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            This method doesn't move the reader
            Pre-Condition:  JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
                            Any:                            expanded collection link - the node after the entity reference link.
            Post-Condition: JsonNodeType.EndObject:         expanded link property is last property in owning entry
                            JsonNodeType.Property:          there are more properties after the expanded link property in the owning entry
                            Any:                            expanded collection link - the node after the entity reference link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadFeedStart(System.Boolean)">
            <summary>
            Reads the start of a feed and sets up the reader state correctly.
            </summary>
            <param name="isExpandedLinkContent">true if the feed is inside an expanded link.</param>
            <remarks>
            Pre-Condition:  The first node of the feed; this method will throw if the node is not
                            JsonNodeType.StartArray:    a feed without 'results' wrapper
                            JsonNodeType.StartObject:   a feed with 'results' wrapper
            Post-Condition: The reader is positioned on the first item in the feed, or on the end array of the feed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadExpandedCollectionNavigationLinkContentInRequest">
            <summary>
            Reads the next node in the content of an expanded navigation link which represents a collection and is in a request payload.
            </summary>
            <remarks>
            This method deals with all the special cases in request payload expanded navigation link for collections.
            It should be called when the array start of the content of such a link was already read.
            It should be called in these cases:
            - Start of the navigation link (to report the first content item of it)
            - Entity reference link was reported (to report the next item of the navigation link content)
            - Feed end was reported, to report the next non-entry item in the navigation link content
            - Entry end was reported, to determine if the next entry should be reported, or if the feed should be closed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadEntryStart">
            <summary>
            Reads the start of an entry and sets up the reader state correctly
            </summary>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            Will fail if it's anything else
            Post-Condition: JsonNodeType.StartObject            The first node of the navigation link property value to read next (deferred link or entry or >=v2 feed wrapper)
                            JsonNodeType.StartArray             The first node of the navigation link property value with a non-wrapped feed to read next
                            JsonNodeType.PrimitiveValue (null)  The null value of the navigation link property value to read next (expanded null entry)
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadEntryMetadata">
            <summary>
            Reads the __metadata property for an entry and resolves its type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReadExpandedNavigationLinkEnd(System.Boolean)">
            <summary>
            Verifies that the current item is an <see cref="T:Microsoft.Data.OData.ODataNavigationLink"/> instance,
            sets the cardinality of the link (IsCollection property) and moves the reader
            into state 'NavigationLinkEnd'.
            </summary>
            <param name="isCollection">A flag indicating whether the link represents a collection or not.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.StartEntry">
            <summary>
            Starts the entry, initializing the scopes and such. This method starts a non-null entry only.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.StartNavigationLink(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Starts the navigation link.
            Does metadata validation of the navigation link and sets up the reader to report it.
            </summary>
            <param name="navigationLink">The navigation link to start.</param>
            <param name="navigationProperty">The navigation property for the navigation link to start.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.EnterScope(Microsoft.Data.OData.ODataReaderState,Microsoft.Data.OData.ODataItem,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope"/> for the specified <paramref name="state"/> and
            with the provided <paramref name="item"/> and pushes it on the stack of scopes.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataReaderState"/> to use for the new scope.</param>
            <param name="item">The item to attach with the state in the new scope.</param>
            <param name="expectedEntityType">The expected type for the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.ReplaceScope(Microsoft.Data.OData.ODataReaderState)">
            <summary>
            Replaces the current scope with a new <see cref="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope"/> with the specified <paramref name="state"/> and
            the item of the current scope.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataReaderState"/> to use for the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.EndEntry">
            <summary>
            Called to transition into the EntryEnd state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.CurrentEntryState">
            <summary>
            Returns the current entry state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.CurrentJsonScope">
            <summary>
            Returns current scope cast to JsonScope
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope">
            <summary>
            A reader scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState">
            <summary>
            Interface representing a state of the Verbose JSON reader for entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState.Entry">
            <summary>
            The entry being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState.EntityType">
            <summary>
            The entity type for the entry (if available)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState.MetadataPropertyFound">
            <summary>
            Flag which indicates that during parsing of the entry represented by this state,
            the __metadata property was already found.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState.FirstNavigationLink">
            <summary>
            If the reader finds a navigation link to report, but it must first report the parent entry
            it will store the navigation link in this property. So this will only ever store the first navigation link of an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState.FirstNavigationProperty">
            <summary>
            If the reader finds a navigation link to report, but it must first report the parent entry
            it will store the navigation property in this property. So this will only ever store the first navigation proeprty of an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState.DuplicatePropertyNamesChecker">
            <summary>
            The duplicate property names checker for the entry represented by the current state.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.#ctor(Microsoft.Data.OData.ODataReaderState,Microsoft.Data.OData.ODataItem,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="state">The reader state of this scope.</param>
            <param name="item">The item attached to this scope.</param>
            <param name="expectedEntityType">The expected type for the scope.</param>
            <remarks>The <paramref name="expectedEntityType"/> has the following meanings for given state:
            Start -               it's the expected base type of the top-level entry or entries in the top-level feed.
            FeedStart -           it's the expected base type of the entries in the feed.
                                  note that it might be a more derived type than the base type of the entity set for the feed.
            EntryStart -          it's the expected base type of the entry. If the entry has no type name specified
                                  this type will be assumed. Otherwise the specified type name must be
                                  the expected type or a more derived type.
            NavigationLinkStart - it's the expected base type the entries in the expanded link (either the single entry
                                  or entries in the expanded feed).
            In all cases the specified type must be an entity type.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.MetadataPropertyFound">
            <summary>
            Flag which indicates that during parsing of the entry represented by this scope,
            the __metadata property was already found.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.FirstNavigationLink">
            <summary>
            If the reader finds a navigation link to report, but it must first report the parent entry
            it will store the navigation link in this property. So this will only ever store the first navigation link of an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.FirstNavigationProperty">
            <summary>
            If the reader finds a navigation link to report, but it must first report the parent entry
            it will store the navigation property in this property. So this will only ever store the first navigation proeprty of an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.DuplicatePropertyNamesChecker">
            <summary>
            The duplicate property names checker for the entry represented by the current state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.FeedInExpandedNavigationLinkInRequest">
            <summary>
            Flag which is only used on a StartFeed scope.
            true - if the feed is the special feed reported as content of an expanded navigation link in request.
            false - if the feed is any other (regular) feed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.FeedHasResultsWrapper">
            <summary>
            Flag which is used to remember whether the feed was wrapped in with 'results' wrapper and which indicates
            whether to expect (and read) '}' character at the end of the feed. Used on StartFeed scope for top level
            feeds and on NavigationLinkStart scope for nested expanded feed.
            true - if the feed was wrapped in results wrapper
            false - if the feed was not wrapped in results wrapper
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.ExpandedNavigationLinkInRequestHasContent">
            <summary>
            Flag which is only used on a StartNavigationLink scope in requests.
            true - we already found some content for the navigation link in question and it was (or is going to be) reported to the caller.
            false - we haven't found any content for the navigation link yet.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.Microsoft#Data#OData#VerboseJson#IODataVerboseJsonReaderEntryState#Entry">
            <summary>
            The entry being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReader.JsonScope.Microsoft#Data#OData#VerboseJson#IODataVerboseJsonReaderEntryState#EntityType">
            <summary>
            The entity type for the entry (if available).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EpmExtensionMethods">
            <summary>
            Extension methods to make it easier to work with EPM.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationBaseNames">
            <summary>
            All supported base names for serializable EPM annotations.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmExtensionMethods.TargetPathToSyndicationItemMap">
            <summary>
            FC_TargetPath to <see cref="T:System.Data.Services.Common.SyndicationItemProperty"/> enum mapping.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EnsureEpmCache(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType,System.Int32)">
            <summary>
            Ensures that an up-to-date EPM cache exists for the specified <paramref name="entityType"/>. 
            If no cache exists, a new one will be created based on the public mappings (if any).
            If the public mappings have changed (and the cache is thus dirty), the method re-constructs the cache.
            If all public mappings have been removed, the method also removes the EPM cache.
            </summary>
            <param name="model">IEdmModel containing the annotations.</param>
            <param name="entityType">IEdmEntityType instance for which to ensure the EPM cache.</param>
            <param name="maxMappingCount">The maximum allowed number of entity property mappings 
            for a given entity type (on the type itself and all its base types).</param>
            <returns>An instance of <see cref="T:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache"/>, if there are any EPM mappings for the given entity type, otherwise returns null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.HasEntityPropertyMappings(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Determines if the <paramref name="entityType"/> has any EPM defined on it (or its base types).
            </summary>
            <param name="model">The model containing the annotations.</param>
            <param name="entityType">The entity type to test for presence of EPM.</param>
            <returns>true if the <paramref name="entityType"/> has EPM; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.GetEntityPropertyMappings(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Returns the EPM information for an entity type.
            </summary>
            <param name="model">The model containing the annotations.</param>
            <param name="entityType">The entity type to get the EPM information for.</param>
            <returns>Returns the EPM information for an entity type. If there's no such information, this returns null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.GetEpmCache(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Returns the cached EPM information for an entity type.
            </summary>
            <param name="model">The model containing the annotations.</param>
            <param name="entityType">The entity type to get the cached EPM information for.</param>
            <returns>Returns the cached EPM information for an entity type. If there's no cached information, this returns null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.GetAnnotationBindingsToRemoveSerializableEpmAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets all the annotations bindings in order to remove all EPM related annotations from a given <see cref="T:Microsoft.Data.Edm.IEdmElement"/>.
            </summary>
            <param name="model">The model containing the annotations.</param>
            <param name="annotatable">The annotatable to get the EPM annotations for.</param>
            <returns>A dictionary of local annotation name to annotation binding mappings for all serializable EPM annotations on <paramref name="annotatable"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.ClearInMemoryEpmAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Removes the in-memory EPM annotations from an entity type; potentially also drops an existing EPM cache.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to remove the EPM annotation from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.SaveEpmAnnotationsForProperty(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache)">
            <summary>
            Saves the EPM annotations on the given <paramref name="property"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> to save the EPM annotations for.</param>
            <param name="epmCache">The EPM cache for the owning entity type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.SaveEpmAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.Collections.Generic.IEnumerable{System.Data.Services.Common.EntityPropertyMappingAttribute},System.Boolean,System.Boolean)">
            <summary>
            Saves the EPM annotations on the given <paramref name="annotatable"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to save the EPM annotations on.</param>
            <param name="mappings">All the EPM annotations to be saved.</param>
            <param name="skipSourcePath">true if the source path should be saved explicitly; otherwise false.</param>
            <param name="removePrefix">true if the prefix of the source path should be removed; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmCachedKeepPrimitiveInContent(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmComplexType)">
            <summary>
            Returns the cached keep-in-content annotation for the primitive properties of a complex type.
            </summary>
            <param name="model">The model containing the annotation.</param>
            <param name="complexType">The complex type to get the cached keep-in-content annotation for.</param>
            <returns>Returns the keep-in-content annotation for a type. If there's no such annotation this returns null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.ToTargetPath(System.Data.Services.Common.SyndicationItemProperty)">
            <summary>
            Maps the enumeration of allowed <see cref="T:System.Data.Services.Common.SyndicationItemProperty"/> values to their string representations.
            </summary>
            <param name="targetSyndicationItem">Value of the <see cref="T:System.Data.Services.Common.SyndicationItemProperty"/> given in 
            the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> contstructor.</param>
            <returns>String representing the xml element path in the syndication property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.LoadEpmAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Loads the serializable EPM annotations on the given <paramref name="entityType"/> into their in-memory representation.
            </summary>
            <param name="model">The model the entity type belongs to.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to load the EPM annotations for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.LoadEpmAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection,System.String,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Loads the serializable EPM annotations on the given <paramref name="annotatable"/> into their in-memory representation.
            </summary>
            <param name="model">The model the annotatable belongs to.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to load the EPM annotations for.</param>
            <param name="mappings">The collection of EPM annotations to add newly loaded annotations to.</param>
            <param name="typeName">The name of the type for which to load the annotations or that declares the <paramref name="property"/>. Only used in error messages.</param>
            <param name="property">The property to parse the EPM annotations for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.MapTargetPathToSyndicationProperty(System.String)">
            <summary>
            Given a <paramref name="targetPath"/> gets the corresponding syndication property.
            </summary>
            <param name="targetPath">Target path in the form of a syndication property name.</param>
            <returns>
            Enumeration value of a <see cref="T:System.Data.Services.Common.SyndicationItemProperty"/> or SyndicationItemProperty.CustomProperty 
            if the <paramref name="targetPath"/> does not map to any syndication property name.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.ToAttributeValue(System.Data.Services.Common.SyndicationTextContentKind)">
            <summary>
            Translates a content kind enumeration value to the corresponding string attribute value for serialization to CSDL.
            </summary>
            <param name="contentKind">The content kind to translate.</param>
            <returns>A string corresponding to the <paramref name="contentKind"/> value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.ToAttributeValue(System.Data.Services.Common.SyndicationItemProperty)">
            <summary>
            Translates a syndication item property enumeration value to the corresponding string attribute value for serialization to CSDL.
            </summary>
            <param name="syndicationItemProperty">The syndication item property to translate.</param>
            <returns>A string corresponding to the <paramref name="syndicationItemProperty"/> value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.MapContentKindToSyndicationTextContentKind(System.String,System.String,System.String,System.String)">
            <summary>
            Maps the <paramref name="contentKind"/> string to an enumeration value of the <see cref="T:System.Data.Services.Common.SyndicationTextContentKind"/> enumeration.
            </summary>
            <param name="contentKind">The content kind string to map.</param>
            <param name="attributeSuffix">The suffix of the attribute name currently being parsed or validated.Only used in error messages.</param>
            <param name="typeName">The name of the type for which to load the annotations or that declares the <paramref name="propertyName"/>. Only used in error messages.</param>
            <param name="propertyName">The name of the property to parse the EPM annotations for. Only used in error messages.</param>
            <returns>An <see cref="T:System.Data.Services.Common.SyndicationTextContentKind"/> value if the <paramref name="contentKind"/> could be successfully mapped; otherwise throws.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.ParseSerializableEpmAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Parses the serializable EPM annotations of the <paramref name="annotatable"/>, groups them by suffix
            and translates them into a set of structs.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to parse the EPM annotations for.</param>
            <param name="typeName">The name of the type for which the annotations are parsed or that declares the <paramref name="property"/>. Only used in error messages.</param>
            <param name="property">The property to parse the EPM annotations for.</param>
            <returns>An enumerable of <see cref="T:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues"/> that represents all the parsed annotations grouped by their suffix.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.ValidateAnnotationValues(Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues,System.String,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Validates the annotation values parsed for an EPM mapping.
            </summary>
            <param name="annotationValues">The <see cref="T:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues"/> to validate.</param>
            <param name="typeName">The name of the type for which the annotations are validated or that declares the <paramref name="property"/>. Only used in error messages.</param>
            <param name="property">The property for which the annotations are validated; null if the annotations are for a type.</param>
            <returns>An <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> instance that represents the mapping created from the <paramref name="annotationValues"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.RemoveEpmCache(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Removes an existing EPM cache annotation.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to remove the EPM cache from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.IsEpmAnnotation(Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation)">
            <summary>
            Checks whether a given OData annotation is an EPM related annotation.
            </summary>
            <param name="annotation">The <see cref="T:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation"/> instance to check.</param>
            <returns>true if the annotation is EPM related; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.IsEpmAnnotation(Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation,System.String@,System.String@)">
            <summary>
            Checks whether a given serializable annotation represents part of an EPM mapping.
            </summary>
            <param name="annotation">The annotation to check.</param>
            <param name="baseName">The base name of the EPM annotation.</param>
            <param name="suffix">The suffix of the EPM annotation or null if not an EPM annotation.</param>
            <returns>true if the <paramref name="annotation"/> is an EPM annotation; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.ConvertEdmAnnotationValue(Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation)">
            <summary>
            Converts the value of the <paramref name="annotation"/> to a string.
            </summary>
            <param name="annotation">The <see cref="T:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation"/> to convert.</param>
            <returns>The string representation of the converted annotation value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.NamesMatchByReference(System.String,System.String)">
            <summary>
            Checks that two strings are the same references (and asserts that if they are not they also
            don't have the same value).
            </summary>
            <param name="first">The first string to compare.</param>
            <param name="second">The second string to compare.</param>
            <returns>true if the <paramref name="first"/> and <paramref name="second"/> are the same reference; otherwise false;</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.HasOwnOrInheritedEpm(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Checks whether the <paramref name="entityType"/> has EPM defined for it (either directly
            on the type or on one of the base types).
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to check.</param>
            <returns>true if the <paramref name="entityType"/> has EPM defined; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.GetODataAnnotationBinding(Microsoft.Data.Edm.IEdmElement,System.String,System.String)">
            <summary>
            Gets the annotation binding with the OData metadata namespace and the specified <paramref name="localName"/> for the <paramref name="annotatable"/>.
            </summary>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to set the annotation on.</param>
            <param name="localName">The local name of the annotation to set.</param>
            <param name="value">The value of the annotation to set.</param>
            <returns>An <see cref="T:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding"/> instance that represnets the annotation with the specified name and value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EnsureEpmCacheInternal(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType,System.Int32,System.Boolean@)">
            <summary>
            Ensures that an up-to-date EPM cache exists for the specified <paramref name="entityType"/>. 
            If no cache exists, a new one will be created based on the public mappings (if any).
            If the public mappings have changed (and the cache is thus dirty), the method re-constructs the cache.
            If all public mappings have been removed, the method also removes the EPM cache.
            </summary>
            <param name="model">IEdmModel instance containing the annotations.</param>
            <param name="entityType">IEdmEntityType instance for which to ensure the EPM cache.</param>
            <param name="maxMappingCount">The maximum allowed number of entity property mappings 
            for a given entity type (on the type itself and all its base types).</param>
            <param name="cacheModified">true if the cache was modified; otherwise false.</param>
            <returns>An instance of <see cref="T:Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache"/>, if there are any EPM mappings for the given entity type, otherwise returns null.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues">
            <summary>
            Private struct to store the values of the serializable EPM annotations during loading.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues.SourcePath">
            <summary>The string value of the FC_SourcePath attribute (or null if not present).</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues.TargetPath">
            <summary>The string value of the FC_TargetPath attribute (or null if not present).</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues.KeepInContent">
            <summary>The string value of the FC_KeepInContent attribute (or null if not present).</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues.ContentKind">
            <summary>The string value of the FC_ContentKind attribute (or null if not present).</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues.NamespaceUri">
            <summary>The string value of the FC_NsUri attribute (or null if not present).</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues.NamespacePrefix">
            <summary>The string value of the FC_NsPrefix attribute (or null if not present).</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmExtensionMethods.EpmAnnotationValues.AttributeSuffix">
            <summary>The attribute suffix used for the attribute names.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EpmSourcePathSegment">
            <summary>
            Representation of each node in the EpmSourceTree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmSourcePathSegment.propertyName">
            <summary>
            Name of the property under the parent type.
            </summary>
            <remarks>This fields is used to differentiate between some special node types as well.
            - null - this is the root node of the source tree.
            - "" (empty string) - this is a node representing a value of a primitive item in a collection property.
            - anything else - this is a node representing a property with the name of this field.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmSourcePathSegment.subProperties">
            <summary>
            List of sub-properties if this segment corresponds to a complex type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmSourcePathSegment.epmInfo">
            <summary>
            Corresponding EntityPropertyMappingInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmSourcePathSegment.#ctor">
            <summary>
            Constructor creates a root source path segment
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmSourcePathSegment.#ctor(System.String)">
            <summary>
            Constructor creates a source path segment with the name set to <paramref name="propertyName"/>
            </summary>
            <param name="propertyName">StartPath property name</param>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmSourcePathSegment.PropertyName">
            <summary>
            Name of the property under the parent type.
            </summary>
            <remarks>This property is used to differentiate between some special node types as well.
            - null - this is the root node of the source tree.
            - "" (empty string) - this is a node representing a value of a primitive item in a collection property.
            - anything else - this is a node representing a property with the name of this property.
            These values should not be compared directly, instead use the IsCollectionValueItemValue property to differentiate between the last two.
            The root node itself should never be accessed directly so far.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmSourcePathSegment.SubProperties">
            <summary>
            List of sub-properties if this segment corresponds to a complex type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmSourcePathSegment.EpmInfo">
            <summary>
            Corresponding EntityPropertyMappingInfo.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EpmSourceTree">
            <summary>
            Tree representing the sourceName properties in all the EntityPropertyMappingAttributes for a type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmSourceTree.root">
            <summary>
            Root of the tree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmSourceTree.epmTargetTree">
            <summary>
            <see cref="T:Microsoft.Data.OData.Metadata.EpmTargetTree"/> corresponding to this tree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmSourceTree.#ctor(Microsoft.Data.OData.Metadata.EpmTargetTree)">
            <summary>
            Constructor which creates an empty root.
            </summary>
            <param name="epmTargetTree">Target xml tree</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmSourceTree.Add(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo)">
            <summary>
            Adds a path to the source and target tree which is obtained by looking at the EntityPropertyMappingAttribute in the <paramref name="epmInfo"/>
            </summary>
            <param name="epmInfo">EnitityPropertyMappingInfo holding the source path</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmSourceTree.Validate(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Validates the source tree.
            </summary>
            <param name="entityType">The entity type for which the validation is performed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmSourceTree.Validate(Microsoft.Data.OData.Metadata.EpmSourcePathSegment,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Validates the specified segment and all its subsegments.
            </summary>
            <param name="pathSegment">The path segment to validate.</param>
            <param name="type">The type of the property represented by this segment (null for open properties).</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmSourceTree.GetPropertyType(Microsoft.Data.Edm.IEdmType,System.String)">
            <summary>
            Returns the type of the property on the specified type.
            </summary>
            <param name="type">The type to look for the property on.</param>
            <param name="propertyName">The name of the property to look for.</param>
            <returns>The type of the property specified.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmSourceTree.Root">
            <summary>
            Root of the tree
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EpmTargetPathSegment">
            <summary>
            Representation of each node in the EpmTargetTree.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.segmentName">
            <summary>
            Name of the xml element/attribute.
            </summary>
            <remarks>This field is used to differentiate between special nodes as well.
            - null - this is the root of the target tree.
            - anything else (doesn't start with @) - this node represents an element with the specified name.
            - anything else (starts with @) - this node represents an attribute with the specified name.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.segmentAttributeName">
            <summary>
            Cached attribute name if the segment represents an attribute.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.segmentNamespaceUri">
            <summary>
            URI of the namespace to which the <see cref="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.segmentName"/> belongs.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.segmentNamespacePrefix">
            <summary>
            Prefix to be used in xml document for <see cref="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.segmentNamespaceUri"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.subSegments">
            <summary>
            If this is a non-leaf element, the child elements/attributes collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.parentSegment">
            <summary>
            Parent element of this element/attribute.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.epmInfo">
            <summary>
            The EPM info object for this target segment, if there's any.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.#ctor">
            <summary>
            Constructor initializes the list of sub-nodes to be empty, used for creating root nodes
            in the EpmTargetTree.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.#ctor(System.String,System.String,System.String,Microsoft.Data.OData.Metadata.EpmTargetPathSegment)">
            <summary>
            Used for creating non-root nodes in the syndication/custom trees.
            </summary>
            <param name="segmentName">Name of xml element/attribute</param>
            <param name="segmentNamespaceUri">URI of the namespace for <paramref name="segmentName"/></param>
            <param name="segmentNamespacePrefix">Namespace prefix to be used for <paramref name="segmentNamespaceUri"/></param>
            <param name="parentSegment">Reference to the parent node if this is a sub-node, useful for traversals in visitors</param>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.SegmentName">
            <summary>
            Name of the xml element/attribute.
            </summary>
            <remarks>This property is used to differentiate between special nodes as well.
            - null - this is the root of the target tree.
            - anything else (doesn't start with @) - this node represents an element with the specified name.
            - anything else (starts with @) - this node represents an attribute with the specified name.
            The value of the property should not be compared directly to differentiate between these cases, instead
            properties IsAttribute and IsElementContentSegment should be used. The root node should not be accessed directly
            from anywhere so far.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.AttributeName">
            <summary>
            Retruns name of the attribute the property is mapped to. Must not be called if a property is mapped to an element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.SegmentNamespaceUri">
            <summary>
            URI of the namespace to which the <see cref="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.segmentName"/> belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.SegmentNamespacePrefix">
            <summary>
            Prefix to be used in xml document for <see cref="F:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.segmentNamespaceUri"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.EpmInfo">
            <summary>
            EntityPropertyMappingInfo corresponding to current segement.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.HasContent">
            <summary>
            Whether this node corresponds to ResourceType or ClientType property values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.IsAttribute">
            <summary>
            Does this node correspond to xml attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.ParentSegment">
            <summary>
            Parent node in the tree (always an element if present).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetPathSegment.SubSegments">
            <summary>
            Sub-nodes of this node. Only exist if current node is an element node.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EpmTargetTree">
            <summary>
            Tree representing the targetName properties in all the EntityPropertyMappingAttributes for a type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetTree.syndicationRoot">
            <summary>
            Root of the sub-tree for syndication content.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetTree.nonSyndicationRoot">
            <summary>
            Root of the sub-tree for custom content.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EpmTargetTree.countOfNonContentV2Mappings">
            <summary>
            Number of properties that have V2 mapping with KeepInContent false.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmTargetTree.#ctor">
            <summary>
            Initializes the sub-trees for syndication and non-syndication content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmTargetTree.Add(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo)">
            <summary>
            Adds a path to the tree which is obtained by looking at the EntityPropertyMappingAttribute in the <paramref name="epmInfo"/>.
            </summary>
            <param name="epmInfo">EnitityPropertyMappingInfo holding the target path</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmTargetTree.Remove(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo)">
            <summary>
            Removes a path in the tree which is obtained by looking at the EntityPropertyMappingAttribute in the <paramref name="epmInfo"/>.
            </summary>
            <param name="epmInfo">EnitityPropertyMappingInfo holding the target path</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmTargetTree.Validate">
            <summary>
            Validates the target tree.
            </summary>
            <remarks>This also cleans up the tree if necessary.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmTargetTree.HasMixedContent(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,System.Collections.Generic.List{System.Data.Services.Common.EntityPropertyMappingAttribute})">
            <summary>
            Checks if mappings could potentially result in mixed content and dis-allows it.
            </summary>
            <param name="currentSegment">StartPath being processed.</param>
            <param name="ancestorsWithContent">A list of ancestor attributes that have content. 
            Can contain a maximum of one attribute when the method is called, must never contain more than two.</param>
            <returns>boolean indicating if the tree is valid or not.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EpmTargetTree.GetPropertyNameFromEpmInfo(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo)">
            <summary>
            Given an <see cref="T:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo"/> gives the correct target path for it
            </summary>
            <param name="epmInfo">Given <see cref="T:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo"/></param>
            <returns>string with the correct value for the target path</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetTree.SyndicationRoot">
            <summary>
            Root of the sub-tree for syndication content.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetTree.NonSyndicationRoot">
            <summary>
            Root of the sub-tree for custom content.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EpmTargetTree.MinimumODataProtocolVersion">
            <summary>
            Minimum protocol version required to serialize this target tree.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.AtomMetadataReaderUtils">
            <summary>
            Class with utility methods for reading ATOM metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.CreateNewAtomEntryMetadata">
            <summary>
            Creates a new instance of ATOM entry metadata.
            </summary>
            <returns>The newly created ATOM entry metadata.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.CreateNewAtomFeedMetadata">
            <summary>
            Creates a new instance of ATOM feed metadata.
            </summary>
            <returns>The newly created ATOM feed metadata.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.AddAuthor(Microsoft.Data.OData.Atom.AtomEntryMetadata,Microsoft.Data.OData.Atom.AtomPersonMetadata)">
            <summary>
            Adds a new author to entry metadata.
            </summary>
            <param name="entryMetadata">The entry metadata to add the author to.</param>
            <param name="authorMetadata">The author metadata to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.AddContributor(Microsoft.Data.OData.Atom.AtomEntryMetadata,Microsoft.Data.OData.Atom.AtomPersonMetadata)">
            <summary>
            Adds a new contributor to entry metadata.
            </summary>
            <param name="entryMetadata">The entry metadata to add the contributor to.</param>
            <param name="contributorMetadata">The contributor metadata to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.AddLink(Microsoft.Data.OData.Atom.AtomEntryMetadata,Microsoft.Data.OData.Atom.AtomLinkMetadata)">
            <summary>
            Adds a new link to entry metadata.
            </summary>
            <param name="entryMetadata">The entry metadata to add the link to.</param>
            <param name="linkMetadata">The link metadata to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.AddLink(Microsoft.Data.OData.Atom.AtomFeedMetadata,Microsoft.Data.OData.Atom.AtomLinkMetadata)">
            <summary>
            Adds a new link to feed metadata.
            </summary>
            <param name="feedMetadata">The feed metadata to add the link to.</param>
            <param name="linkMetadata">The link metadata to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.AddCategory(Microsoft.Data.OData.Atom.AtomEntryMetadata,Microsoft.Data.OData.Atom.AtomCategoryMetadata)">
            <summary>
            Adds a new category to entry metadata.
            </summary>
            <param name="entryMetadata">The entry metadata to add the category to.</param>
            <param name="categoryMetadata">The category metadata to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.AddCategory(Microsoft.Data.OData.Atom.AtomFeedMetadata,Microsoft.Data.OData.Atom.AtomCategoryMetadata)">
            <summary>
            Adds a new category to feed metadata.
            </summary>
            <param name="feedMetadata">The feed metadata to add the category to.</param>
            <param name="categoryMetadata">The category metadata to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.AddAuthor(Microsoft.Data.OData.Atom.AtomFeedMetadata,Microsoft.Data.OData.Atom.AtomPersonMetadata)">
            <summary>
            Adds a new author to feed metadata.
            </summary>
            <param name="feedMetadata">The feed metadata to add the author to.</param>
            <param name="authorMetadata">The author metadata to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AtomMetadataReaderUtils.AddContributor(Microsoft.Data.OData.Atom.AtomFeedMetadata,Microsoft.Data.OData.Atom.AtomPersonMetadata)">
            <summary>
            Adds a new contributor to feed metadata.
            </summary>
            <param name="feedMetadata">The feed metadata to add the contributor to.</param>
            <param name="contributorMetadata">The author metadata to add.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmSyndicationReader">
            <summary>
            Reader for the EPM syndication-only. Read the EPM properties from ATOM metadata OM.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationReader.#ctor(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="entryState">The reader entry state for the entry to which the EPM is applied.</param>
            <param name="inputContext">The input context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationReader.ReadEntryEpm(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Reads the syndication EPM for an entry.
            </summary>
            <param name="entryState">The reader entry state for the entry to which the EPM is applied.</param>
            <param name="inputContext">The input context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationReader.ReadEntryEpm">
            <summary>
            Reads an EPM for the entire entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationReader.ReadPropertyValueSegment(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,Microsoft.Data.OData.Atom.AtomEntryMetadata)">
            <summary>
            Reads a leaf segment which maps to a property value.
            </summary>
            <param name="targetSegment">The segment being read.</param>
            <param name="entryMetadata">The ATOM entry metadata to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationReader.ReadParentSegment(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,Microsoft.Data.OData.Atom.AtomEntryMetadata)">
            <summary>
            Reads a non-leaf segment which has sub segments.
            </summary>
            <param name="targetSegment">The segment being read.</param>
            <param name="entryMetadata">The ATOM entry metadata to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationReader.ReadPersonEpm(Microsoft.Data.OData.ReadOnlyEnumerable{Microsoft.Data.OData.ODataProperty},Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.Metadata.EpmTargetPathSegment,Microsoft.Data.OData.Atom.AtomPersonMetadata)">
            <summary>
            Reads EPM values from a person construct (author or contributor).
            </summary>
            <param name="targetList">The target list, this can be either a list of properties (on entry or complex value),
            or a list of items (for a collection of primitive types).</param>
            <param name="targetTypeReference">The type of the value on which to set the property (can be entity, complex or primitive).</param>
            <param name="targetSegment">The target segment which points to either author or contributor element.</param>
            <param name="personMetadata">The person ATOM metadata to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationReader.ReadTextConstructEpm(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,Microsoft.Data.OData.Atom.AtomTextConstruct)">
            <summary>
            Reads the value of the ATOM text construct and sets it to the EPM.
            </summary>
            <param name="targetSegment">The EPM target segment for the value to read.</param>
            <param name="textConstruct">The text construct to read it from (can be null).</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmWriter">
            <summary>
            Base class for EPM writers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.EpmWriter.atomOutputContext">
            <summary>The output context currently in use.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriter.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriter.ReadEntryPropertyValue(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo,Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Reads a property value starting on an entry.
            </summary>
            <param name="epmInfo">The EPM info which describes the mapping for which to read the property value.</param>
            <param name="epmValueCache">The EPM value cache for the entry to read from.</param>
            <param name="entityType">The type of the entry.</param>
            <returns>The value of the property (may be null), or null if the property itself was not found due to one of its parent properties being null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriter.ReadComplexPropertyValue(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo,Microsoft.Data.OData.ODataComplexValue,Microsoft.Data.OData.Atom.EpmValueCache,System.Int32,Microsoft.Data.Edm.IEdmComplexTypeReference)">
            <summary>
            Reads a property value starting on a complex value.
            </summary>
            <param name="epmInfo">The EPM info which describes the mapping for which to read the property value.</param>
            <param name="complexValue">The complex value to start with.</param>
            <param name="epmValueCache">The EPM value cache to use.</param>
            <param name="sourceSegmentIndex">The index in the property value path to start with.</param>
            <param name="complexType">The type of the complex value.</param>
            <returns>The value of the property (may be null), or null if the property itself was not found due to one of its parent properties being null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriter.ReadPropertyValue(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty},System.Int32,Microsoft.Data.Edm.IEdmStructuredTypeReference,Microsoft.Data.OData.Atom.EpmValueCache)">
            <summary>
            Reads a property value starting with the specified index to the property value path.
            </summary>
            <param name="epmInfo">The EPM info which describes the mapping for which to read the property value.</param>
            <param name="cachedProperties">The enumeration of properties to search for the first property in the property value path.</param>
            <param name="sourceSegmentIndex">The index in the property value path to start with.</param>
            <param name="structuredTypeReference">The type of the entry or complex value the <paramref name="cachedProperties"/> enumeration belongs to.</param>
            <param name="epmValueCache">The EPM value cache to use.</param>
            <returns>The value of the property (may be null), or null if the property itself was not found due to one of its parent properties being null.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.EpmWriter.Version">
            <summary>The version of OData protocol to use.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.EpmWriter.WriterBehavior">
            <summary>The settings to control the behavior of the writer.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState">
            <summary>
            Interface representing a state of the ATOM reader for entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.Entry">
            <summary>
            The entry being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.EntityType">
            <summary>
            The entity type for the entry (if available)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.EntryElementEmpty">
            <summary>
            Flag which indicates that the ATOM entry element representing the entry is empty.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.HasReadLink">
            <summary>
            Flag which indicates whether we have found a read link for this empty (even if it had a null URI value).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.HasEditLink">
            <summary>
            Flag which indicates whether we have found an edit link for this empty (even if it had a null URI value).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.HasEditMediaLink">
            <summary>
            Flag which indicates whether we have found an edit-media link for this empty (even if it had a null URI value).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.HasId">
            <summary>
            Flag which indicates whether we have found an id element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.HasContent">
            <summary>
            Flag which indicates whether we have found a content element .
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.HasTypeNameCategory">
            <summary>
            Flag which indicates whether we have found a category element with the required type name.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.HasProperties">
            <summary>
            Flag which indicates whether we have found a m:properties element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.MediaLinkEntry">
            <summary>
            Flag indicating if we have already made a decision about the current entry and its being MLE or not.
            If this property has a null value, we don't know for sure yet (both are possible), if it has non-null value
            then we already know for sure and if we find something different we should fail.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.FirstNavigationLinkDescriptor">
            <summary>
            If the reader finds a navigation link to report, but it must first report the parent entry
            it will store the navigation link descriptor in this property. So this will only ever store the first navigation link of an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.DuplicatePropertyNamesChecker">
            <summary>
            The duplicate property names checker for the entry represented by the current state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.CachedEpm">
            <summary>
            The EPM information for the entry, or null if there's no EPM for this entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.AtomEntryMetadata">
            <summary>
            The ATOM entry metadata to fill as we read the content of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderEntryState.EpmCustomReaderValueCache">
            <summary>
            The cache for values read from custom EPM.
            </summary>
            <remarks>
            This should only be accessed if there's CachedEpm available for this entry.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.IODataAtomReaderFeedState">
            <summary>
            Interface representing a state of the ATOM reader for feed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderFeedState.Feed">
            <summary>
            The feed being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderFeedState.FeedElementEmpty">
            <summary>
            Flag which indicates that the ATOM feed element representing the feed is empty.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderFeedState.AtomFeedMetadata">
            <summary>
            The ATOM feed metadata to fill as we read the content of the feed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderFeedState.HasCount">
            <summary>
            Flag which indicates if a m:count element was found.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderFeedState.HasNextPageLink">
            <summary>
            Flag which indicates if a link[@rel='next'] element was found.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderFeedState.HasReadLink">
            <summary>
            Flag which indicates if a link[@rel='self'] element was found.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.IODataAtomReaderFeedState.HasDeltaLink">
            <summary>
            Flag which indicates if a link[@rel='http://docs.oasis-open.org/odata/ns/delta'] element was found.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomCollectionDeserializer">
            <summary>
            OData ATOM deserializer for collections.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomCollectionDeserializer.duplicatePropertyNamesChecker">
            <summary>Cached duplicate property names checker to use if the items are complex values.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionDeserializer.ReadCollectionStart(System.Boolean@)">
            <summary>
            Reads the start element of a collection.
            </summary>
            <param name="isCollectionElementEmpty">true, if the collection element is empty; false otherwise.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection-level information. Currently this only contains 
            the name of the collection.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element - The start element of the collection.
            Post-Condition:  Any                 - The next node after the start element node of the collection or the 
                                                   empty collection element node.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionDeserializer.ReadCollectionEnd">
            <summary>
            Reads the end of a collection.
            </summary>
            <remarks>
            Pre-condition:  XmlNodeType.EndElement - The end element of the collection.
                            XmlNodeType.Element    - The start element of the collection, if the element is empty.
            Post-condition: Any                    - Next node after the end element of the collection.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionDeserializer.ReadCollectionItem(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator)">
            <summary>
            Reads an item in the collection. 
            </summary>
            <param name="expectedItemType">The expected type of the item to read.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <returns>The value of the collection item that was read; this can be an ODataComplexValue, a primitive value or 'null'.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element    - The start element node of the item in the collection.
            Post-Condition: Any                    - The next node after the end tag of the item.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionDeserializer.SkipToElementInODataNamespace">
            <summary>
            Reads from the Xml reader skipping all nodes until an Element or an EndElement in the OData namespace  
            is found or the reader.EOF is reached.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomDeserializerExpandedNavigationLinkContent">
            <summary>
            Possible content types of expanded navigation link in ATOM.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomDeserializerExpandedNavigationLinkContent.None">
            <summary>No content found, no m:inline.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomDeserializerExpandedNavigationLinkContent.Empty">
            <summary>Empty content found, m:inline without anything in it. Usually represents null entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomDeserializerExpandedNavigationLinkContent.Entry">
            <summary>Expanded entry found.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomDeserializerExpandedNavigationLinkContent.Feed">
            <summary>Expanded feed found.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer">
            <summary>
            OData ATOM deserializer for entries and feeds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomNamespace">
            <summary>Schema namespace for Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomEntryElementName">
            <summary>XML element name to mark entry element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomCategoryElementName">
            <summary>'category' - XML element name for ATOM 'category' element for entries.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomCategoryTermAttributeName">
            <summary>'term' - XML attribute name for ATOM 'term' attribute for categories.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomCategorySchemeAttributeName">
            <summary>'scheme' - XML attribute name for ATOM 'scheme' attribute for categories.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomContentElementName">
            <summary>XML element name to mark content element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomLinkElementName">
            <summary>XML element name to mark link element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomPropertiesElementName">
            <summary>Element containing property values when 'content' is used for media link entries</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomFeedElementName">
            <summary>XML element name to mark feed element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomIdElementName">
            <summary>XML element name to mark id element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomLinkRelationAttributeName">
            <summary>XML attribute name of the link relation attribute in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.AtomLinkHrefAttributeName">
            <summary>XML attribute name of the href attribute of a link in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.MediaLinkEntryContentSourceAttributeName">
            <summary>Atom source attribute name for the content of media link entries.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ODataETagAttributeName">
            <summary>OData attribute which indicates the etag value for the declaring entry element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ODataCountElementName">
            <summary>OData element name for the 'count' element</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ODataInlineElementName">
            <summary>'Inline' - wrapping element for inlined entry/feed content.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ODataActionElementName">
            <summary>Element name for m:action.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ODataFunctionElementName">
            <summary>Element name for m:function.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ODataOperationMetadataAttribute">
            <summary>Attribute name for m:action|m:function/@metadata.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ODataOperationTitleAttribute">
            <summary>Attribute name for m:action|m:function/@title.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ODataOperationTargetAttribute">
            <summary>Attribute name for m:action|m:function/@target.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.atomAnnotationReader">
            <summary>
            The reader used to parse annotation elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.entryMetadataDeserializer">
            <summary>
            ATOM deserializer for ATOM metadata on entries.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.feedMetadataDeserializer">
            <summary>
            ATOM deserializer for ATOM metadata on feeds.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.EnsureMediaResource(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,System.Boolean)">
            <summary>
            Ensure a media resource is created for the specified entry.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="validateMLEPresence">If set to true, this method will validate that marking the entry as MLE
            doesn't collide with it already being marked as non-MLE.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.VerifyEntryStart">
            <summary>
            Verified that the reader is positioned on the atom:entry start element node.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadEntryStart(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Read the start of the entry.
            This method verifies that the current element is atom:entry and it reads the ETag from it.
            </summary>
            <param name="entry">The entry instance to fill the properties on.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element   - The method will fail if it's not element called atom:entry
            Post-Condition: XmlNodeType.Element   - The atom:entry element
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadEntryContent(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads the content of an entry (child nodes of the atom:entry, not the atom:content element).
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <returns>A descriptor representing the navigation link detected;
            null if no navigation link was found and the end of the entry was reached.</returns>
            <remarks>
            Pre-Condition:  Anything but Attribute - the child node of the atom:entry element, can be pretty much anything, the method will skip over insignificant nodes and text nodes if found.
            Post-Condition: XmlNodeType.EndElement atom:entry - The end of the atom:entry element if no nav. link was found and the end of the entry was reached.
                            XmlNodeType.Element atom:link     - The start tag of the atom:link element representing a navigation link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadEntryEnd">
            <summary>
            Read the end of the entry.
            </summary>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (empty) atom:entry - The atom:entry empty element to read end of.
                            XmlNodeType.EndElement atom:entry      - The end element of atom:entry to read.
            Post-Condition: Any                                    - The node right after the entry element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadFeedStart">
            <summary>
            Read the start of the feed.
            This method verifies that the current element is atom:feed.
            </summary>
            <remarks>
            Pre-Condition:  XmlNodeType.Element   - The method will fail if it's not called atom:feed (but won't validate that it's an element)
            Post-Condition: XmlNodeType.Element   - The atom:feed element
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadFeedContent(Microsoft.Data.OData.Atom.IODataAtomReaderFeedState,System.Boolean)">
            <summary>
            Reads the content of a feed (child nodes of the atom:feed).
            </summary>
            <param name="feedState">The reader feed state for the feed being read.</param>
            <param name="isExpandedLinkContent">true if the feed is inside an expanded link.</param>
            <returns>true if an entry was found or false if no more entries were found in the feed.</returns>
            <remarks>
            Pre-Condition:  Anything but Attribute           - the child node of the atom:feed element, can be pretty much anything, the method will skip over insignificant nodes and text nodes if found.
            Post-Condition: XmlNodeType.EndElement atom:feed - The end of the atom:feed element if no entry was found and the end of the feed was reached.
                            XmlNodeType.Element atom:entry   - The start tag of the atom:entry element representing an entry in the feed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadFeedEnd">
            <summary>
            Read the end of the feed.
            </summary>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (empty) atom:feed - The atom:feed empty element to read end of.
                            XmlNodeType.EndElement atom:feed      - The end element of atom:feed to read.
            Post-Condition: Any                                   - The node right after the entry element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadNavigationLinkContentBeforeExpansion">
            <summary>
            Read the content of the navigation link before any expansion was found.
            </summary>
            <returns>
            An enumeration value indicating what content was found:
            None - no m:inline was found, the link is deferred. The reader is positioned on the atom:link end element.
            Empty - empty m:inline was found - usually means null entry. The reader is positioned on empty start m:inline or end element m:inline.
            Entry - expanded entry was found. The reader is positioned on the atom:entry element.
            Feed - expanded feed was found. The reader is positioned on the atom:feed element.
            </returns>
            <remarks>
            Pre-Condition:  Any                                  - a node in the atom:link content.
            Post-Condition: XmlNodeType.EndElement atom:link     - the end of the navigation link was reached.
                            XmlNodeType.Element atom:feed        - an expanded feed was found.
                            XmlNodeType.Element atom:entry       - an expanded entry was found.
                            XmlNodeType.Element (empty) m:inline - empty inline was found.
                            XmlNodeType.EndElement m:inline      - empty inline was found.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.IsReaderOnInlineEndElement">
            <summary>
            Determines if the reader is positioned on the m:inline end element or empty m:inline start element.
            </summary>
            <returns>true if the reader is on m:inline end element or m:inline empty start element; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.SkipNavigationLinkContentOnExpansion">
            <summary>
            Skips everything until an end-element for atom:link is found.
            </summary>
            <remarks>
            This method should only be used to skip the rest of the link content after the ReadNavigationLinkContentBeforeExpansion was called.
            Pre-Condition:  XmlNodeType.Element atom:entry       - start of the expanded entry
                            XmlNodeType.Element atom:feed        - start of the expanded feed
                            XmlNodeType.Element (empty) m:inline - empty m:inline element (emptyInline = true)
                            XmlNodeType.EndElement m:inline      - end of the m:inline element.
            Post-Condition: XmlNodeType.EndElement atom:link     - the end element of the navigation link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadNavigationLinkContentAfterExpansion(System.Boolean)">
            <summary>
            Read the content of the navigation link after the expansion was found.
            The method returns when the entire atom:link was read.
            </summary>
            <param name="emptyInline">
            true if the reader is positioned on the empty start tag or end tag of the m:inline element.
            false if the reader is inside m:inline (or on the end tag of m:inline).
            </param>
            <remarks>
            Pre-Condition:  Any                                  - child node of the m:inline element (emptyInline == false)
                            XmlNodeType.Element (empty) m:inline - empty m:inline element (emptyInline = true)
                            XmlNodeType.EndElement m:inline      - end of the m:inline element.
            Post-Condition: XmlNodeType.EndElement atom:link     - the end element of the navigation link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadNavigationLinkEnd">
            <summary>
            Read the end of the navigation link.
            </summary>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (empty) atom:link  - the empty atom:link element of a deferred navigation link.
                            XmlNodeType.EndElement atom:link       - the end element atom:link.
            Post-Condition: Any                                    - The node right after the link element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.FindTypeName">
            <summary>
            Reads the entry content in buffering mode and looks for the type name (the category element with the right attributes).
            </summary>
            <returns>The type name if one of found or null if none was found.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element   - the atom:entry element
            Post-Condition: XmlNodeType.Element   - the atom:entry element on which the reader started.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.GetNewOrExistingStreamPropertyValue(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,System.String)">
            <summary>
            Returns an existing stream property value if it already exists in the list of OData properties otherwise creates a new 
            ODataProperty for the stream property and returns the value of that property.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="streamPropertyName">The name of the stream property to return.</param>
            <returns>A new or an existing stream property value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ValidateDuplicateElement(System.Boolean)">
            <summary>
            If the <paramref name="duplicateElementFound"/> is true, then the default behavior should throw.
            </summary>
            <remarks>This method assumes the reader is positioned on the duplicated element.</remarks>
            <param name="duplicateElementFound">Used to determine if duplicate check should throw an exception.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomElementInEntry(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads an ATOM element inside the atom:entry from the input.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <returns>
            If the atom element is representing a navigation link a descriptor for that link is returned,
            otherwise null.
            </returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element in ATOM namespace - The element in ATOM namespace to read.
            Post-Condition: Any                                   - The node after the ATOM element if it's not a navigation link.
                            XmlNodeType.Element atom:link         - The start tag of atom:link if it's a navigation link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomContentElement(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads the atom:content element.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:content  - The atom:content element to read.
            Post-Condition:  Any                               - The node after the atom:content element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomContentAttributes(System.String@,System.String@)">
            <summary>
            Reads the attributes of the &lt;atom:content&gt; element.
            </summary>
            <param name="contentType">The content type attribute value (or null if not found).</param>
            <param name="contentSource">The content source attribute value (or null if not found).</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomIdElementInEntry(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads the atom:id element in the atom:entry element.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:id - The atom:id element to read.
            Post-Condition:  Any                         - The node after the atom:id element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomLinkElementInEntry(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads the atom:link element in atom:entry.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <returns>
            If the link is a navigation link the method returns a descriptor representing that link,
            otherwise the method returns null.
            </returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:link  - The atom:link element to read.
            Post-Condition:  Any                            - The node after the atom:link element if it's not a navigation link.
                             XmlNodeType.Element atom:link  - The atom:link start tag if it's a navigation link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.TryReadAtomStandardRelationLinkInEntry(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,System.String,System.String)">
            <summary>
            Reads the atom:link element with one of the standard relation values in the atom:entry element.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="linkRelation">The rel attribute value for the link.</param>
            <param name="linkHRef">The href attribute value for the link (or null if the href attribute was not present).</param>
            <returns>If the rel was one of the recognized standard relations and this method read the link
            the return value is true. Otherwise the method doesn't move the reader and returns false.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:link  - The atom:link element to read.
            Post-Condition:  Any                            - The node after the atom:link element if the link was read by this method.
                             XmlNodeType.Element atom:link  - The atom:link element to read if the link was not read by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.TryReadNavigationLinkInEntry(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,System.String,System.String)">
            <summary>
            Reads a navigation link in entry element.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="linkRelation">The value of the rel attribute of the link to read, unescaped parsed URI.</param>
            <param name="linkHRef">The value of the href attribute of the link to read.</param>
            <returns>A descriptor of a navigation link if a navigation link was found; null otherwise.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element atom:link - the start tag of the atom:link element to read.
            Post-Condition: XmlNodeType.Element atom:link - the start tag of the atom:link element - the reader doesn't move
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.TryReadStreamPropertyLinkInEntry(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,System.String,System.String,System.Boolean@)">
            <summary>
            Reads a stream property edit or read link in an atom:entry.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="linkRelation">The rel attribute value for the link, unescaped parsed URI.</param>
            <param name="linkHRef">The href attribute value for the link (or null if the href attribute was not present).</param>
            <param name="isStreamPropertyLink">true if the link is a stream property read or edit link; otherwise false.</param>
            <returns>true, if the named stream was read successfully, false otherwise.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:link  - The atom:link element to read.
            Post-Condition:  Any                            - The node after the atom:link element if the link was read by this method.
                             XmlNodeType.Element atom:link  - The atom:link element to read if the link was not read by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadStreamPropertyLinkInEntry(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Reads a stream property link in an atom:entry.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="streamPropertyName">The name of the stream property that is being read.</param>
            <param name="linkRelation">The rel attribute value for the link.</param>
            <param name="linkHRef">The href attribute value for the link (or null if the href attribute was not present).</param>
            <param name="editLink">true if we are reading an edit link; otherwise false.</param>
            <returns>true if the stream property link was read; otherwise false.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:link  - The atom:link element to read.
            Post-Condition:  Any                            - The node after the atom:link element if the link was read by this method.
                             XmlNodeType.Element atom:link  - The atom:link element to read if the link was not read by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.TryReadAssociationLinkInEntry(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,System.String,System.String)">
            <summary>
            Reads a an association link in atom:entry.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="linkRelation">The rel attribute value for the link, unescaped parsed URI.</param>
            <param name="linkHRef">The href attribute value for the link (or null if the href attribute was not present).</param>
            <returns>true, if the association link was read succesfully, false otherwise.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:link  - The atom:link element to read.
            Post-Condition:  Any                            - The node after the atom:link element if the link was read by this method.
                             XmlNodeType.Element atom:link  - The atom:link element to read if the link was not read by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.TryReadOperation(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads a an m:action or m:function in atom:entry.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <returns>true, if the m:action or m:function was read succesfully, false otherwise.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element m:action|m:function - The m:action or m:function element to read.
            Post-Condition:  Any                                     - The node after the m:action or m:function element if it was read by this method.
                             XmlNodeType.Element m:action|m:function - The m:action or m:function element to read if it was not read by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomElementInFeed(Microsoft.Data.OData.Atom.IODataAtomReaderFeedState,System.Boolean)">
            <summary>
            Reads an ATOM element inside the atom:feed from the input.
            </summary>
            <param name="feedState">The reader feed state for the feed being read.</param>
            <param name="isExpandedLinkContent">true if the feed is inside an expanded link.</param>
            <returns>true if the atom:entry element was found and the reader was not moved;
            false otherwise and the reader is positioned on the next node after the ATOM element.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element in ATOM namespace - The element in ATOM namespace to read.
            Post-Condition: Any                                   - The node after the ATOM element which was consumed.
                            XmlNodeType.Element atom:entry        - The start of the atom:entry element (the reader did not move in this case).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomStandardRelationLinkInFeed(Microsoft.Data.OData.Atom.IODataAtomReaderFeedState,System.String,System.String,System.Boolean)">
            <summary>
            Reads the atom:link element with one of the standard relation values in the atom:feed element.
            </summary>
            <param name="feedState">The reader feed state for the feed being read.</param>
            <param name="linkRelation">The rel attribute value for the link.</param>
            <param name="linkHRef">The href attribute value for the link (or null if the href attribute was not present).</param>
            <param name="isExpandedLinkContent">true if the feed is inside an expanded link.</param>
            <returns>If the rel was one of the recognized standard relations and this method read the link
            the return value is true. Otherwise the method doesn't move the reader and returns false.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:link  - The atom:link element to read.
            Post-Condition:  Any                            - The node after the atom:link element if the link was read by this method.
                             XmlNodeType.Element atom:link  - The atom:link element to read if the link was not read by this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadLinkMetadataIfRequired(System.String,System.String,System.Action{Microsoft.Data.OData.Atom.AtomLinkMetadata})">
            <summary>
             Reads the Atom metadata for the link if metadata is required to be read, skip it otherwise.
            </summary>
            <param name="linkRelation">The rel attribute value for the link.</param>
            <param name="linkHRef">The href attribute value for the link (or null if the href attribute was not present).</param>
            <param name="setFeedLink">Action for adding AtomLinkMetadata to the AtomFeedMetadata</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomLinkRelationAndHRef(System.String@,System.String@)">
            <summary>
            Reads the atom:link element's rel and href attributes.
            </summary>
            <param name="linkRelation">The value of the rel attribute or null if no such attribute was found.</param>
            <param name="linkHRef">The value of the href attribute or null if no such attribute was found.</param>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:link  - The atom:link element to read.
            Post-Condition:  XmlNodeType.Element atom:link  - The atom:link element to read - the reader doesn't not move.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadNavigationLinkContent">
            <summary>
            Reads the content of navigation link.
            </summary>
            <returns>
            true if m:inline was found,
            false if the end of the atom:link was found.
            </returns>
            <remarks>
            Pre-Condition:  Any                              - a child node of the atom:link element.
            Post-Condition: XmlNodeType.Element m:inline     - the m:inline was found, the method returns true.
                            XmlNodeType.EndElement atom:link - the atom:link end element, end of the navigation link, the method returns false.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadInlineElementContent">
            <summary>
            Reads content of the m:inline element.
            </summary>
            <returns>
            Enumeration denoting what was found in the content.
            Empty - The end of the m:inline element was found - the reader is positioned on the m:inline end element.
            Entry - An expanded entry was found - the reader is positioned on atom:entry element.
            Feed - An expanded feed was found - the reader is positioned on atom:feed element.
            None - will never be returned.
            </returns>
            <remarks>
            Pre-Condition:  Any                                  - child node of the m:inline element.
            Post-Condition: XmlNodeType.Element atom:feed        - an expanded feed was found.
                            XmlNodeType.Element atom:entry       - an expanded entry was found.
                            XmlNodeType.EndElement m:inline      - empty inline was found.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.VerifyAtomContentMediaType(System.String)">
            <summary>
            Verifies that the specified content type of an atom:content element matches the expected value.
            </summary>
            <param name="contentType">The content type value read from the payload.</param>
            <returns>The verified media type name (without parameters or charset) of the content type.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.EntryMetadataDeserializer">
            <summary>
            ATOM deserializer for ATOM metadata on entries.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.FeedMetadataDeserializer">
            <summary>
            ATOM deserializer for ATOM metadata on feeds.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomEntryAndFeedDeserializer.ReadAtomMetadata">
            <summary>
            Flag indicating if ATOM metadata is required to be read by the user.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer">
            <summary>
            OData ATOM deserializer for ATOM metadata on entries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.EmptyNamespace">
            <summary>The empty namespace used for attributes in no namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.AtomNamespace">
            <summary>Schema namespace for Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.sourceMetadataDeserializer">
            <summary>
            Feed ATOM metadata deserializer for deserializing the atom:source element in an entry.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ReadAtomElementInEntryContent(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads an element in ATOM namespace in the content of the entry element.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:*) - the ATOM element to read.
            Post-Condition: Any                          - the node after the ATOM element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ReadAtomLinkElementInEntryContent(System.String,System.String)">
            <summary>
            Reads the atom:link element in the entry content.
            </summary>
            <param name="relation">The value of the rel attribute for the link element.</param>
            <param name="hrefStringValue">The value of the href attribute for the link element.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata"/> instance storing the information about this link, or null if link info doesn't need to be stored.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:link) - the atom:link element to read.
            Post-Condition: XmlNodeType.Element (atom:link) - the atom:link element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ReadAtomCategoryElementInEntryContent(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState)">
            <summary>
            Reads the atom:category element in the entry content.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:category) - the atom:category element to read.
            Post-Condition: Any                                 - the node after the atom:category which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ReadAtomCategoryElement">
            <summary>
            Reads the atom:category element.
            </summary>
            <returns>The ATOM category metadata read.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:category) - the atom:category element to read.
            Post-Condition: Any                                 - the node after the atom:category which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ReadAtomSourceInEntryContent">
            <summary>
            Reads the atom:source element in the entry content.
            </summary>
            <returns>The information in the source element as <see cref="T:Microsoft.Data.OData.Atom.AtomFeedMetadata"/>.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:source) - the atom:source element to read.
            Post-Condition: Any                               - the node after the atom:source which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ReadAuthorElement(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Metadata.EpmTargetPathSegment)">
            <summary>
            Reads an author element.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="epmTargetPathSegment">The EPM target path segment for the element to read, or null if no EPM for that element is defined.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:author) - the atom:author element to read.
            Post-Condition: Any                               - the node after the atom:author element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ReadContributorElement(Microsoft.Data.OData.Atom.IODataAtomReaderEntryState,Microsoft.Data.OData.Metadata.EpmTargetPathSegment)">
            <summary>
            Reads a contributor element.
            </summary>
            <param name="entryState">The reader entry state for the entry being read.</param>
            <param name="epmTargetPathSegment">The EPM target path segment for the element to read, or null if no EPM for that element is defined.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (atom:contributor) - the atom:contributor element to read.
            Post-Condition: Any                                    - the node after the atom:contributor element which was read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ShouldReadCollectionElement(System.Boolean)">
            <summary>
            Determines if a person element should be read or skipped.
            </summary>
            <param name="someAlreadyExist">true if some elements from the collection in question already exist; false if this is the first one.</param>
            <returns>true if the collection element should be read; false if it should be skipped.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.ShouldReadSingletonElement(System.Boolean)">
            <summary>
            Determines if we should read an element which is allowed to appear only once in ATOM.
            </summary>
            <param name="alreadyExists">true if we already found such element before; false if this is the first occurence.</param>
            <returns>true if the element should be processed; false if the element should be skipped.</returns>
            <remarks>The method may throw if multiple occurences of such element occure and they should be treated as an error.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomEntryMetadataDeserializer.SourceMetadataDeserializer">
            <summary>
            Feed ATOM metadata deserializer for deserializing the atom:source element in an entry.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer">
            <summary>
            /// OData ATOM deserializer for service document.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomPublishingServiceElementName">
            <summary>The name of the top-level service document element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomPublishingWorkspaceElementName">
            <summary>The name of the 'workspace' element of a service document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomHRefAttributeName">
            <summary>href attribute name in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomPublishingCollectionElementName">
            <summary>The name of the 'collection' element of a service document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomPublishingCategoriesElementName">
            <summary>The name of the 'categories' element of a service document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomPublishingAcceptElementName">
            <summary>The name of the 'accept' element of a service document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomPublishingNamespace">
            <summary>The Atom Publishing Protocol (APP) namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomNamespace">
            <summary>The ATOM namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.AtomTitleElementName">
            <summary>The name of the 'title' element of a service document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.EmptyNamespace">
            <summary>The emtpy namespace used for attributes in no namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.serviceDocumentMetadataDeserializer">
            <summary>
            ATOM deserializer for ATOM metadata on service documents.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The ATOM input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.ReadServiceDocument">
            <summary>
            Reads a service document.
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element - The start element of the service document.
            Post-Condtion:   XmlNodeType.None    - The reader must be at the end of the input.
            </remarks>   
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.ReadWorkspace">
            <summary>
            Reads a workspace of a service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the workspace of a service document.</returns>
            <remarks>
            Pre-Condition:  Any    - the next node after the service element.
            Post-Condition: Any    - The next node after the workspace element. 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.ReadCollectionElement">
            <summary>
            Reads a resource collection element of a workspace of the service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataResourceCollectionInfo"/> representing the resource collection in a workspace of a service document.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element - the collection element inside the workspace.
            Post-Condition: Any    - The next node after the collection element. 
            </remarks>   
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.SkipToElementInAtomPublishingNamespace">
            <summary>
            Reads from the Xml reader skipping all nodes until an Element or an EndElement in the ATOM
            publishing namespace is found.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomServiceDocumentDeserializer.ServiceDocumentMetadataDeserializer">
            <summary>
            ATOM deserializer for ATOM metadata on service documents.
            This is created on-demand only when needed, but then it's cached.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.GeographyTypeConverter">
            <summary>
            Handles serialization and deserialization for types derived from Geography.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.GeographyTypeConverter.TokenizeFromXml(System.Xml.XmlReader)">
            <summary>
            Create a geography instance from the value in an Xml reader.
            </summary>
            <param name="reader">The Xml reader to use to read the value.</param>
            <remarks>In order to be consistent with how we are reading other types of property values elsewhere in the product, the reader
            is expected to be placed at the beginning of the element when entering this method. After this method call, the reader will be placed
            at the EndElement, such that the next Element will be read in the next Read call. The deserializer that uses this value expects 
            the reader to be in these states when entering and leaving the method.
            </remarks>
            <returns>Geography instance that was read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.GeographyTypeConverter.WriteAtom(System.Object,System.Xml.XmlWriter)">
            <summary>
            Write the Atom representation of an instance of a primitive type to an XmlWriter.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="writer">The Xml writer to use to write the instance.</param>
        </member>
        <member name="M:Microsoft.Data.OData.GeographyTypeConverter.WriteVerboseJson(System.Object,Microsoft.Data.OData.Json.IJsonWriter,System.String,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Write the Verbose Json representation of an instance of a primitive type to a json writer.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="jsonWriter">Instance of JsonWriter.</param>
            <param name="typeName">Type name of the instance to write. If the type name is null, the type name will not be written in the payload.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.GeographyTypeConverter.WriteJsonLight(System.Object,Microsoft.Data.OData.Json.IJsonWriter,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Write the Json Lite representation of an instance of a primitive type to a json writer.
            </summary>
            <param name="instance">The instance to write.</param>
            <param name="jsonWriter">Instance of JsonWriter.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.CachedPrimitiveKeepInContentAnnotation">
            <summary>
            Annotation which stores a hashset of property names of a complex type that returned KeepInContent == true 
            when written the first time. See the comments on ODataWriterBehavior.UseV1ProviderBehavior for more details.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.CachedPrimitiveKeepInContentAnnotation.keptInContentPropertyNames">
            <summary>
            A hash set with the property names of properties that are kept in the content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.CachedPrimitiveKeepInContentAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="keptInContentPropertyNames">Enumeration of property names that are kept in content.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.CachedPrimitiveKeepInContentAnnotation.IsKeptInContent(System.String)">
            <summary>
            Determines if a property is in a list of properties that are kept in the content.
            </summary>
            <param name="propertyName">The name of the property to lookup.</param>
            <returns>true if the property is kept in the content; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomTextConstruct">
            <summary>
            Atom metadata description for a text construct (plain text, html or xhtml).
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomTextConstruct.ToTextConstruct(System.String)">
            <summary> Converts a string to an <see cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct" /> instance. </summary>
            <returns>The <see cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct" /> instance created for text.</returns>
            <param name="text">The <see cref="T:System.String" /> to convert to an <see cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct" />.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomTextConstruct.op_Implicit(System.String)~Microsoft.Data.OData.Atom.AtomTextConstruct">
            <summary>
            Implicit conversion from string to <see cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct"/>.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to convert to an <see cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct"/>.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.Atom.AtomTextConstruct"/> result.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomTextConstruct.Kind">
            <summary>Gets or sets the kind of the text construct (plain text, html, xhtml).</summary>
            <returns>The kind of the text construct.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomTextConstruct.Text">
            <summary>Gets or sets the text content.</summary>
            <returns>The text content.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomTextConstructKind">
            <summary>
            Enumeration for classifying the different kinds of text content in ATOM metadata.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomTextConstructKind.Text">
            <summary>Plain text.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomTextConstructKind.Html">
            <summary>Html text.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomTextConstructKind.Xhtml">
            <summary>XHtml text.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.BufferingXmlReader">
            <summary>
            XML reader which supports look-ahead.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.XmlNamespace">
            <summary>The "http://www.w3.org/XML/1998/namespace" namespace for the "xml" prefix.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.XmlBaseAttributeName">
            <summary>The "base" name for the XML base attribute.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.XmlLangAttributeName">
            <summary>The 'lang' attribute local name of the xml:lang attribute.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.ODataMetadataNamespace">
            <summary>XML namespace for data service annotations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.ODataNamespace">
            <summary>XML namespace for data services. This is to provide compatibility with WCF DS client which accepts custom data namespace value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.ODataErrorElementName">
            <summary>The 'error' local name of the error element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.reader">
            <summary>The underlying XML reader this buffering reader is wrapping.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.bufferedNodes">
            <summary>The (possibly empty) list of buffered nodes.</summary>
            <remarks>This list stores only non-attribute nodes, attributes are stored in a separate list on an element node.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.endOfInputBufferedNode">
            <summary>
            A special buffered node instance which represents the end of input.
            We always have just one instance and compare references.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.disableXmlBase">
            <summary>Flag to control if the xml:base attributes should be processed when reading.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.maxInnerErrorDepth">
            <summary>The maximumum number of recursive internalexception elements to allow when reading in-stream errors.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.documentBaseUri">
            <summary>The base URI for the document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.currentBufferedNode">
            <summary>A pointer into the bufferedNodes list to track the most recent position of the current buffered node.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.currentAttributeNode">
            <summary>
            A pointer into the linked list of attribute nodes which is only used if the currentBufferedNodeToReport is the attribute value node (not the attribute itself).
            In that case it points to the current attribute node.
            In all other cases this node is null.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.currentBufferedNodeToReport">
            <summary>
            A pointer either into the bufferedNodes list or into the list of attributes on a buffered element node
            which points to the node which should be reported to the user.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.isBuffering">
            <summary>A flag indicating whether the reader is in buffering mode or not.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.removeOnNextRead">
            <summary>
            A flag indicating that the last node for non-buffering read was taken from the buffer; we leave the 
            node in the buffer until the next Read call.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.disableInStreamErrorDetection">
            <summary>Flag to control whether in-stream errors should be detected when reading.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.xmlBaseStack">
            <summary>The stack of XML base URI definitions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.bufferStartXmlBaseStack">
            <summary>The XML base stack state when the buffering started. This is only used when in buffering mode.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.#ctor(System.Xml.XmlReader,System.Uri,System.Uri,System.Boolean,System.Int32,System.String)">
            <summary>Constructor</summary>
            <param name="reader">The reader to wrap.</param>
            <param name="parentXmlBaseUri">If this reader is wrapping an inner reader of some kind, this parameter should pass the xml:base effective value of the parent.</param>
            <param name="documentBaseUri">The base URI for the document.</param>
            <param name="disableXmlBase">Flag to control if the xml:base attributes should be processed when reading.</param>
            <param name="maxInnerErrorDepth">The maximum number of recursive internalexception elements to allow when reading in-stream errors.</param>
            <param name="odataNamespace">XML namespace for data services.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.Read">
            <summary>
            Reads the next node from the input.
            </summary>
            <returns>true if another node is available and the reader has moved to it; false if end of input was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.MoveToElement">
            <summary>
            Moves the reader to the element which owns the current attribute.
            </summary>
            <returns>true if the reader has moved (that is the current node was an attribute);
            false if the reader didn't move (the reader was already positioned on an element or other node).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.MoveToFirstAttribute">
            <summary>
            Moves the reader to the first attribute of the current element.
            </summary>
            <returns>true if the reader moved to the first attribute; false if there are no attribute for the current node (the reader didn't move).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.MoveToNextAttribute">
            <summary>
            Moves the reader to the next attribute on the current element.
            </summary>
            <returns>true if the reader moved to the next attribute (if the node was an element it moves to the first attribute);
            false if the reader didn't move (no attributes for the current node).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.ReadAttributeValue">
            <summary>
            Reads the next node from the value of an attribute.
            </summary>
            <returns>true if next node was available; false if end of the attribute value was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.Close">
            <summary>
            Closes the reader and the underlying input.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.GetAttribute(System.Int32)">
            <summary>
            Returns the value of an attribute based on its index.
            </summary>
            <param name="i">The index of the attribute, starts at 0.</param>
            <returns>The value of the attribute at index <paramref name="i"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Returns the value of an attribute based on its fully qualified name.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the attribute with specified <paramref name="name"/> and <paramref name="namespaceURI"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.GetAttribute(System.String)">
            <summary>
            Returns the value of an attribute based on its name.
            </summary>
            <param name="name">The name of the attribute. (prefix:localname)</param>
            <returns>The value of the attribute with specified <paramref name="name"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.LookupNamespace(System.String)">
            <summary>
            Looks up a namespace URI based on the prefix.
            </summary>
            <param name="prefix">The prefix to search for.</param>
            <returns>The namespace URI for the specified <paramref name="prefix"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves the reader to the attribute specified by fully qualified name.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
            <returns>true if the attribute specified by <paramref name="name"/> and <paramref name="ns"/> was found and the reader is positioned on it;
            false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.MoveToAttribute(System.String)">
            <summary>
            Moves the reader to the attribute specified by name.
            </summary>
            <param name="name">The name of the attribute (prefix:localname).</param>
            <returns>true if the attribute specified by <paramref name="name"/> was found and the reader is positioned on it;
            false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.ResolveEntity">
            <summary>
            Resolves the current entity node.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.StartBuffering">
            <summary>
            Puts the reader into the state where it buffers read nodes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.StopBuffering">
            <summary>
            Puts the reader into the state where no buffering happen on read.
            Either buffered nodes are consumed or new nodes are read (and not buffered).
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.ReadInternal(System.Boolean)">
            <summary>
            The actual implementatin of the Read method. Moves the reader to the next node.
            </summary>
            <param name="ignoreInStreamErrors">true if the reader should not check for in-stream errors; otherwise false.</param>
            <returns>true if next node is available and the reader has moved; false if end-of-input was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.ReadNextAndCheckForInStreamError">
            <summary>
            Reads the next node from the XML reader and if m:error element node is detected starts reading ahead and
            tries to parse an in-stream error.
            </summary>
            <returns>true if a new node was found, or false if end of input was reached.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.IsEndOfInputNode(Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode)">
            <summary>
            Determines if the specified node is the end of input node.
            </summary>
            <param name="node">The buffered node to test.</param>
            <returns>true if the node is the special end of input node, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferCurrentReaderNode">
            <summary>
            Buffers the current reader state into a node.
            </summary>
            <returns>The newly created buffered node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.GetCurrentElementNode">
            <summary>
            Returns the current element node (or node which acts like an element, it doesn't have to be of type Element).
            </summary>
            <returns>The current element node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.FindAttributeBufferedNode(System.Int32)">
            <summary>
            Finds the buffered node for the attribute specified by its index.
            </summary>
            <param name="index">The index of the attribute.</param>
            <returns>The linked list node of the found attribute, or null if no such attribute could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.FindAttributeBufferedNode(System.String,System.String)">
            <summary>
            Finds the buffered node for the attribute specified by its local name and namespace URI.
            </summary>
            <param name="localName">The local name of the attribute.</param>
            <param name="namespaceUri">The namespace URI of the attribute.</param>
            <returns>The linked list node of the found attribute, or null if no such attribute could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.FindAttributeBufferedNode(System.String)">
            <summary>
            Finds the buffered node for the attribute specified by its qualified name.
            </summary>
            <param name="qualifiedName">The qualified name of the attribute to find, that is prefix:localName.</param>
            <returns>The linked list node of the found attribute, or null if no such attribute could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.MoveFromAttributeValueNode">
            <summary>
            If the reader is positioned on the attribute value node, this moves it to the owning attribute node.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.GetAttributeWithAtomizedName(System.String,System.String)">
            <summary>
            Returns the value of an attribute based on its fully qualified name.
            </summary>
            <param name="name">The local name of the attribute. This string must already be atomized against the reader's nametable.</param>
            <param name="namespaceURI">The namespace URI of the attribute. This string must already be atomized against the reader's nametable.</param>
            <returns>The value of the attribute with specified <paramref name="name"/> and <paramref name="namespaceURI"/>.</returns>
            <remarks>
            Behaves the same as GetAttribute, but it assumes that the parameters are already atomized against our nametable.
            This allows the method to be much faster.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.ValidateInternalState">
            <summary>
            Validates internal state of the reader - debug only.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.NodeType">
            <summary>
            Returns the type of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.IsEmptyElement">
            <summary>
            Returns true if the reader is positioned on an empty element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.LocalName">
            <summary>
            Returns the local name of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.Prefix">
            <summary>
            Returns the prefix of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.NamespaceURI">
            <summary>
            Returns the namespace URI of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.Value">
            <summary>
            Returns the value of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.Depth">
            <summary>
            Returns the depth of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.EOF">
            <summary>
            Returns true if the end of input was reached.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.ReadState">
            <summary>
            Returns the current state of the reader.
            </summary>
            <remarks>We need to support ReadState in order for Skip to work without us implementing it again.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.NameTable">
            <summary>
            Returns the nametable used by the reader.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.AttributeCount">
            <summary>
            Returns the number of attributes on the node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BaseURI">
            <summary>
            Returns the base URI of the node - note that this is not based on the xml:base attribute, just the input streams.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.HasValue">
            <summary>
            Returns true if the current node has a value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.XmlBaseUri">
            <summary>
            The active XML base URI for the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.ParentXmlBaseUri">
            <summary>
            The active XML base URI for the parent node (parent element) of the current node.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.DisableInStreamErrorDetection">
            <summary>
            Flag to control whether in-stream errors should be detected when reading.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode">
            <summary>
            Class representing one buffered XML node
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.attributeNodes">
            <summary>
            The list of attribute nodes, if this node is an element node.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.#ctor(System.Xml.XmlReader)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">The XML reader to get all the interesting values from. The reader
            is positioned on the node which the new buffered node should buffer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.#ctor(System.String,System.Int32,System.Xml.XmlNameTable)">
            <summary>
            Constructor for an attribute value node
            </summary>
            <param name="value">The value of the attribute value node to create.</param>
            <param name="depth">The parent attribute depth.</param>
            <param name="nametable">The nametable to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.#ctor(System.String)">
            <summary>
            Constructor for end of input node.
            </summary>
            <param name="emptyString">The atomized instance of an empty string.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.CreateEndOfInput(System.Xml.XmlNameTable)">
            <summary>
            Creates a special node which represents the end of input.
            </summary>
            <param name="nametable">The nametable of the underlying reader.</param>
            <returns>The newly created node.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.NodeType">
            <summary>The type of the buffered node.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.NamespaceUri">
            <summary>The namespace URI of the buffered node.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.LocalName">
            <summary>The local name of the buffered node.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.Prefix">
            <summary>The prefix of the buffered node.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.Value">
            <summary>The value of the buffered node.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.Depth">
            <summary>The depth of the buffered node.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.IsEmptyElement">
            <summary>Denotes if the buffered node is an empty element.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.BufferedNode.AttributeNodes">
            <summary>List of attributes. If the node is not element, this will be null.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.BufferingXmlReader.XmlBaseDefinition">
            <summary>
            Helper class to store XML base URI definition for a specific depth of the reader.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.BufferingXmlReader.XmlBaseDefinition.#ctor(System.Uri,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="baseUri">The XML base URI for the definition.</param>
            <param name="depth">The depth of the XML reader for the definition.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.XmlBaseDefinition.BaseUri">
            <summary>The base URI for this definition.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.BufferingXmlReader.XmlBaseDefinition.Depth">
            <summary>The depth of the XmlReader on which this XML base is defined.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomStreamReferenceMetadata">
            <summary>
            Atom metadata for stream reference values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomStreamReferenceMetadata.SelfLink">
            <summary>Gets or sets an Atom link metadata for the self link.</summary>
            <returns>An Atom link metadata for the self link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomStreamReferenceMetadata.EditLink">
            <summary>Gets or sets an Atom link metadata for the edit link.</summary>
            <returns>An Atom link metadata for the edit link.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomCollectionReader">
            <summary>
            OData collection reader for ATOM format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomCollectionReader.atomInputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomCollectionReader.atomCollectionDeserializer">
            <summary>The collection deserializer to use to read from the input.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionReader.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The input to read the payload from.</param>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionReader.ReadAtStartImplementation">
            <summary>
            Implementation of the collection reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.None    - assumes that the Xml reader has not been used yet.
            Post-Condition: Any                 - the next node after the collection element node or the empty collection element node.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionReader.ReadAtCollectionStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'CollectionStart'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  Any - the next node after the collection element or the empty collection element node.
            Post-Condition: Any - the next node after the end tag of the item or the collection.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionReader.ReadAtValueImplementation">
            <summary>
            Implementation of the reader logic when in state 'Value'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  Any - the next node after the end tag of the item. 
            Post-Condition: Any - the next node after the end tag of the item or the collection. 
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionReader.ReadAtCollectionEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'CollectionEnd'.
            </summary>
            <returns>false since no more nodes can be read from the reader after the collection ends.</returns>
            <remarks>
            Pre-Condition: Any - the next node after the end tag of the collection element.
            Post-Condtion: XmlNodeType.None  - the reader is at the end of the input.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomInputContext">
            <summary>
            Implementation of the OData input for ATOM OData format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomInputContext.baseXmlReader">
            <summary>The XML reader used to parse the input.</summary>
            <remarks>Do not use this to actually read the input, instead use the xmlReader.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomInputContext.xmlReader">
            <summary>The XML reader to read from.</summary>
            <remarks>If entry XML customization is used this is the reader for the current entry.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomInputContext.xmlCustomizationReaders">
            <summary>A stack used to track XML customization readers.</summary>
            <remarks>
            At the beginning the base reader is pushed to the stack.
            Each non-null entry has an item on this stack.
            If the XML customization was used for a given entry the reader returned by the customization will be pushed to the stack for it.
            This is only used from ODataAtomReader, other readers don't use this.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>Constructor.</summary>
            <param name="format">The format for this input context.</param>
            <param name="messageStream">The stream to read data from.</param>
            <param name="encoding">The encoding to use to read the input.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateFeedReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base type for the entries in the feed.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateFeedReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base type for the entries in the feed.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateEntryReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateEntryReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateCollectionReaderAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Task which when completed returns the newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadServiceDocument">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadServiceDocumentAsync">
            <summary>
            Asynchronously read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadProperty(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates an reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadPropertyAsync(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously read the property from the input and 
            return an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> or <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadError">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadErrorAsync">
            <summary>
            Asynchronously read a top-level error.
            </summary>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadEntityReferenceLinks(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadEntityReferenceLinksAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadEntityReferenceLink(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads a top-level entity reference link.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadEntityReferenceLinkAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously read a top-level entity reference link.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.DetectPayloadKind(Microsoft.Data.OData.ODataPayloadKindDetectionInfo)">
            <summary>
            Detects the payload kind(s) of the payload.
            </summary>
            <param name="detectionInfo">Additional information available for the payload kind detection.</param>
            <returns>An enumerable of zero or more payload kinds depending on what payload kinds were detected.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.InitializeReaderCustomization">
            <summary>
            Initializes the ability to use customization readers.
            </summary>
            <remarks>
            This needs to be called before any of the reader customization functionality is used.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.PushCustomReader(System.Xml.XmlReader,System.Uri)">
            <summary>
            Pushes a reader on the top of the customization stack.
            </summary>
            <param name="customXmlReader">The reader to push.</param>
            <param name="xmlBaseUri">The xml:base URI to use as the base uri for all of the payload read from that reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.PopCustomReader">
            <summary>
            Pops a reader from the top of the customization stack.
            </summary>
            <returns>The popped reader, the one which was on the top of the stack before the operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.DisposeImplementation">
            <summary>
            Disposes the input context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateFeedReaderImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base type for the entries in the feed.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateEntryReaderImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.CreateCollectionReaderImplementation(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadPropertyImplementation(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates and reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadServiceDocumentImplementation">
            <summary>
            This methods creates and reads a service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadErrorImplementation">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadEntityReferenceLinksImplementation">
            <summary>
            Reads top-level entity reference links.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomInputContext.ReadEntityReferenceLinkImplementation">
            <summary>
            Reads a top-level entity reference link.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomInputContext.XmlReader">
            <summary>
            Returns the <see cref="T:Microsoft.Data.OData.Atom.BufferingXmlReader"/> which is to be used to read the content of the message.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomReaderUtils">
            <summary>
            Helper methods used by the OData reader for the ATOM format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReaderUtils.CreateXmlReader(System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>
            Creates an Xml reader over the specified stream with the provided settings.
            </summary>
            <param name="stream">The stream to create the XmlReader over.</param>
            <param name="encoding">The encoding to use to read the input.</param>
            <param name="messageReaderSettings">The OData message reader settings used to control the settings of the Xml reader.</param>
            <returns>An <see cref="T:System.Xml.XmlReader"/> instance configured with the provided settings.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReaderUtils.ReadMetadataNullAttributeValue(System.String)">
            <summary>
            Parses the value of the m:null attribute and returns a boolean.
            </summary>
            <param name="attributeValue">The string value of the m:null attribute.</param>
            <returns>true if the value denotes that the element should be null; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReaderUtils.CreateXmlReaderSettings(Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>
            Creates a new XmlReaderSettings instance using the encoding.
            </summary>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <returns>The Xml reader settings to use for this reader.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomReader">
            <summary>
            OData reader for the ATOM format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.atomInputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.atomEntryAndFeedDeserializer">
            <summary>The deserializer to use to read input.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.atomEntryAndFeedDeserializersStack">
            <summary>Stack of entry and feed deserializers, we need to create a new one for each XML customization
            so that the strings get atomized again and so that we can return to the original one without reatomizing everything.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.#ctor(Microsoft.Data.OData.Atom.ODataAtomInputContext,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="atomInputContext">The input to read the payload from.</param>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read (in case of entry reader) or entries in the feed to be read (in case of feed reader).</param>
            <param name="readingFeed">true if the reader is created for reading a feed; false when it is created for reading an entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  PayloadStart - assumes that the XML reader has not been used yet.
            Post-Condition: XmlNodeType.Element (empty) atom:entry   - The entry element when reading top-level entry and the entry element is empty.
                            XmlNodeType.EndElement atom:entry        - The end element of the top-level entry (if there were no nav. links. in it).
                            XmlNodeType.Element atom:link            - the atom:link element representing the first navigation link in the top-level entry.
                            XmlNodeType.Element (empty) atom:feed    - The feed element when reading top-level feed and the feed element is empty.
                            XmlNodeType.EndElement atom:feed         - The end element of the top-level feed (if there were no entries in it).
                            XmlNodeType.Element atom:entry           - if the feed contains an entry (the start tag of the first entry).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtFeedStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'FeedStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:feed (empty)  - The empty start tag of atom:feed.
                             XmlNodeType.EndElement atom:feed       - The end tag of the atom:feed.
                             XmlNodeType.Element atom:entry         - The start tag of the first entry element to read.
                             XmlNodeType.Element m:inline (empty)   - The empty start tag of an expanded navigation link m:inline element which we report as empty feed.
                             XmlNodeType.EndElement m:inline        - The end tag of an expanded navigation link m:inline element which we report as empty feed.
            Post-Condition:  XmlNodeType.Element atom:feed (empty)  - The empty start tag of atom:feed.
                             XmlNodeType.EndElement atom:feed       - The end tag of the atom:feed.
                             XmlNodeType.Element atom:entry (empty) - The empty start tag of the first entry in the feed.
                             XmlNodeType.EndElement atom:entry      - The end tag of the first entry in the feed (if it had no nav. links).
                             XmlNodeType.Element atom:link          - the atom:link element representing the first navigation link in the first entry in the feed.
                             XmlNodeType.Element m:inline (empty)   - The empty start tag of an expanded navigation link m:inline element which we report as empty feed.
                             XmlNodeType.EndElement m:inline        - The end tag of an expanded navigation link m:inline element which we report as empty feed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtFeedEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'FeedEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element (empty) atom:feed  - The empty start tag of atom:feed
                             XmlNodeType.EndElement atom:feed       - The end element of the atom:feed
                             XmlNodeType.Element m:inline (empty)   - The empty start tag of an expanded navigation link m:inline element which we report as empty feed.
                             XmlNodeType.EndElement m:inline        - The end tag of an expanded navigation link m:inline element which we report as empty feed.
            Post-Condition:  Any                                    - The node right after the top-level atom:feed element
                             XmlNodeType.EndElement atom:link       - The end of parent expanded link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtEntryStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'EntryStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element atom:entry (empty) - The empty start tag of atom:entry.
                             XmlNodeType.EndElement atom:entry      - The end tag of the atom:entry.
                             XmlNodeType.Element atom:link          - The start tag of the atom:link which represents the first navigation link.
                             XmlNodeType.Element (empty) m:inline   - the empty m:inline element of an expanded null entry.
                             XmlNodeType.EndElement m:inline        - the end element m:inline of an expanded null entry.
            Post-Condition:  XmlNodeType.Element atom:entry (empty) - The empty start tag of atom:entry.
                             XmlNodeType.EndElement atom:entry      - The end tag of the atom:entry.
                             XmlNodeType.Element atom:link          - The start tag of the atom:link which represents the first navigation link.
                             XmlNodeType.Element (empty) m:inline   - the empty m:inline element of an expanded null entry.
                             XmlNodeType.EndElement m:inline        - the end element m:inline of an expanded null entry.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtEntryEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'EntryEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element (empty) atom:entry - The empty start tag of atom:entry.
                             XmlNodeType.EndElement atom:entry      - The end element of the atom:entry.
                             XmlNodeType.Element (empty) m:inline   - the empty m:inline element of an expanded null entry.
                             XmlNodeType.EndElement m:inline        - the end element m:inline of an expanded null entry.
            Post-Condition:  Any                                    - The node right after the top-level atom:entry element.
                             XmlNodeType.EndElement atom:feed       - The end element of the parent feed for the entry.
                             XmlNodeType.Element (empty) atom:entry - The empty start tag of the next entry in the parent feed.
                             XmlNodeType.EndElement atom:entry      - The end element of the next entry in the parent feed (if it had no nav. links).
                             XmlNodeType.Element atom:link          - The start tag of the atom:link which represents the first navigation link in the next entry in the parent feed.
                             XmlNodeType.EndElement atom:link       - The end of parent expanded link.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtNavigationLinkStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkStart'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element atom:link          - the atom:link element representing the navigation link.
            Post-Condition: XmlNodeType.Element (empty) atom:link  - the empty atom:link element of a deferred navigation link.
                            XmlNodeType.EndElement atom:link       - the end element atom:link of a deferred navigation link.
                            XmlNodeType.Element atom:entry         - the atom:entry element of the expanded entry.
                            XmlNodeType.Element atom:feed          - the atom:feed element of the expanded feed.
                            XmlNodeType.Element (empty) m:inline   - the empty m:inline element of an expanded null entry.
                            XmlNodeType.EndElement m:inline        - the end element m:inline of an expanded null entry.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtNavigationLinkEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'NavigationLinkEnd'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (empty) atom:link  - the empty atom:link element of a deferred navigation link.
                            XmlNodeType.EndElement atom:link       - the end element atom:link.
            Post-Condition: XmlNodeType.EndElement atom:entry      - the end element atom:entry of the parent entry if there are no more navigation links.
                            XmlNodeType.Element atom:link          - the atom:link element of the next navigation link of the parent entry.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtEntityReferenceLink">
            <summary>
            Implementation of the reader logic when in state 'EntityReferenceLink'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  XmlNodeType.Element (empty) atom:link - the empty atom:link element of an entity reference link.
                            XmlNodeType.EndElement atom:link      - the end element atom:link of the entity reference link.
            Post-Condition: Unchanged                             - the reader doesn't change its position.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadFeedStart">
            <summary>
            Reads the start of a feed and sets up the reader state correctly.
            </summary>
            <remarks>
            Pre-Condition:  XmlNodeType.Element                    - The method will fail if it's not atom:feed.
            Post-Condition: XmlNodeType.Element (empty) atom:feed  - The feed element when reading top-level feed and the feed element is empty.
                            XmlNodeType.EndElement atom:feed       - The end element of the top-level feed (if there were no entries in it).
                            XmlNodeType.Element atom:entry         - if the feed contains an entry (the start tag of the first entry)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadEntryStart">
            <summary>
            Reads the start of an entry and sets up the reader state correctly.
            </summary>
            <remarks>
            Pre-Condition:  XmlNodeType.Element                    - The method will fail if it's not atom:entry.
            Post-Condition: XmlNodeType.Element (empty) atom:entry - The entry element when reading entry and the entry element is empty.
                            XmlNodeType.EndElement atom:entry      - The end element of the entry (if there were no nav. links. in it)
                            XmlNodeType.Element atom:link          - The start tag of the atom:link which represents the first navigation link in the entry.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.EndEntry">
            <summary>
            End the entry.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.StartNavigationLink(Microsoft.Data.OData.Atom.ODataAtomReaderNavigationLinkDescriptor)">
            <summary>
            Starts the navigation link.
            Does metadata validation of the navigation link and sets up the reader to report it.
            </summary>
            <param name="navigationLinkDescriptor">The navigation link descriptor for the navigation link to start.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReadAtNonExpandedNavigationLinkStart">
            <summary>
            Moves the reader from the start state of a non-expanded navigation link.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.EnterScope(Microsoft.Data.OData.ODataReaderState,Microsoft.Data.OData.ODataItem,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope"/> for the specified <paramref name="state"/> and
            with the provided <paramref name="item"/> and pushes it on the stack of scopes.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataReaderState"/> to use for the new scope.</param>
            <param name="item">The item to attach with the state in the new scope.</param>
            <param name="expectedEntityType">The expected type for the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReplaceScope(Microsoft.Data.OData.ODataReaderState)">
            <summary>
            Replaces the current scope with a new <see cref="T:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope"/> with the specified <paramref name="state"/> and
            the item of the current scope.
            </summary>
            <param name="state">The <see cref="T:Microsoft.Data.OData.ODataReaderState"/> to use for the new scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.ReplaceScopeToFeedEnd">
            <summary>
            Replaces the current scope with a new FeedEnd scope and the item of the current scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.CurrentEntryState">
            <summary>
            Returns the current entry state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.CurrentFeedState">
            <summary>
            Returns the current feed state.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope">
            <summary>
            A reader scope; keeping track of the current reader state and an item associated with this state.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.mediaLinkEntry">
            <summary>
            Flag indicating if we have already made a decision about the current Entry (represented by this scope)
            and its being MLE or not.
            If this property have null value, we don't know for sure yet (both are possible), it it has non-null value
            then we already know for sure and if we find something different we should fail.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.atomScopeState">
            <summary>
            Bitfield to track the current state of the ATOM scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.atomEntryMetadata">
            <summary>
            The ATOM entry metadata to fill as we read the content of the entry.
            </summary>
            <remarks>
            This is lazily initialized only when it's actually needed.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.atomFeedMetadata">
            <summary>
            The ATOM feed metadata to fill as we read the content of the entry.
            </summary>
            <remarks>
            This is lazily initialized only when it's actually needed.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.epmCustomReaderValueCache">
            <summary>
            The cache for values read from custom EPM.
            </summary>
            <remarks>
            This is lazily initialized only when it's actually needed.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.#ctor(Microsoft.Data.OData.ODataReaderState,Microsoft.Data.OData.ODataItem,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Constructor creating a new reader scope.
            </summary>
            <param name="state">The reader state of this scope.</param>
            <param name="item">The item attached to this scope.</param>
            <param name="expectedEntityType">The expected type for the scope.</param>
            <remarks>The <paramref name="expectedEntityType"/> has the following meanings for given state:
            Start -               it's the expected base type of the top-level entry or entries in the top-level feed.
            FeedStart -           it's the expected base type of the entries in the feed.
                                  note that it might be a more derived type than the base type of the entity set for the feed.
            EntryStart -          it's the expected base type of the entry. If the entry has no type name specified
                                  this type will be assumed. Otherwise the specified type name must be
                                  the expected type or a more derived type.
            NavigationLinkStart - it's the expected base type the entries in the expanded link (either the single entry
                                  or entries in the expanded feed).
            In all cases the specified type must be an entity type.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.SetAtomScopeState(System.Boolean,Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask)">
            <summary>
            Sets the bit identified by the <paramref name="bitMask"/> if <paramref name="value"/> is true, otherwise clears it.
            </summary>
            <param name="value">Indicates if the <paramref name="bitMask"/> should be set</param>
            <param name="bitMask">Identifies the bit to set in atomScopeState</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.GetAtomScopeState(Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask)">
            <summary>
            Returns true if the bit identified by <paramref name="bitMask"/> is set, false otherwise.
            </summary>
            <param name="bitMask">Identifies the bit to set in atomScopeState</param>
            <returns>True if the bit identified by the <paramref name="bitMask"/> is set, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.ElementEmpty">
            <summary>
            Flag which indicates that the element representing the current state is empty.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.MediaLinkEntry">
            <summary>
            Flag indicating if we have already made a decision about the current Entry (represented by this scope)
            and its being MLE or not.
            If this property has a null value, we don't know for sure yet (both are possible), if it has non-null value
            then we already know for sure and if we find something different we should fail.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.FirstNavigationLinkDescriptor">
            <summary>
            If the reader finds a navigation link to report, but it must first report the parent entry
            it will store the navigation link descriptor in this property. So this will only ever store the first navigation link of an entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.DuplicatePropertyNamesChecker">
            <summary>
            The duplicate property names checker for the entry represented by the current state.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.CachedEpm">
            <summary>
            The EPM information for the entry, or null if there's no EPM for this entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.HasEpmCustomReaderValueCache">
            <summary>
            trye if the EpmCustomReaderValueCache has been initialized; false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.HasAtomEntryMetadata">
            <summary>
            true if the AtomEntryMetadata has been initialized; false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.NavigationProperty">
            <summary>
            The navigation property retrieved from the metadata when reading a navigation link.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#Entry">
            <summary>
            The entry being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#EntityType">
            <summary>
            The entity type for the entry (if available)
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#EntryElementEmpty">
            <summary>
            Flag which indicates that the ATOM entry element representing the entry is empty.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#HasReadLink">
            <summary>
            Flag which indicates whether we have found a read link for this entry (even if it had a null URI value).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#HasEditLink">
            <summary>
            Flag which indicates whether we have found an edit link for this entry (even if it had a null URI value).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#HasEditMediaLink">
            <summary>
            Flag which indicates whether we have found an edit-media link for this entry (even if it had a null URI value).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#HasId">
            <summary>
            Flag which indicates whether we have found an id element for this entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#HasContent">
            <summary>
            Flag which indicates whether we have found a content element for this entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#HasTypeNameCategory">
            <summary>
            Flag which indicates whether we have found a category element for this entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#HasProperties">
            <summary>
            Flag which indicates whether we have found a m:properties element for this entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderFeedState#HasCount">
            <summary>
            Flag which indicates whether we have found a m:count elemnent for this feed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderFeedState#HasNextPageLink">
            <summary>
            Flag which indicates whether we have found a link[@rel='next'] elemnent for this feed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderFeedState#HasReadLink">
            <summary>
            Flag which indicates whether we have found a link[@rel='self'] elemnent for this feed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderFeedState#HasDeltaLink">
            <summary>
            Flag which indicates if a link[@rel='http://docs.oasis-open.org/odata/ns/delta'] element was found.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#AtomEntryMetadata">
            <summary>
            The ATOM entry metadata to fill as we read the content of the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderEntryState#EpmCustomReaderValueCache">
            <summary>
            The cache for values read from custom EPM.
            </summary>
            <remarks>
            This should only be accessed if there's CachedEpm available for this entry.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderFeedState#AtomFeedMetadata">
            <summary>
            The feed metadata to fill as we read the content of a feed.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderFeedState#Feed">
            <summary>
            The feed being read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.Microsoft#Data#OData#Atom#IODataAtomReaderFeedState#FeedElementEmpty">
            <summary>
            Flag which indicates that the ATOM feed element representing the feed is empty.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask">
            <summary>
            An enumeration of the various kinds of properties on an entity reference link collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.None">
            <summary>No state information.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.EmptyElement">
            <summary>Empty element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasReadLink">
            <summary>A read link has been detected for this entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasEditLink">
            <summary>An edit link has been detected for this entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasId">
            <summary>An id link has been detected for this entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasContent">
            <summary>A content element has been detected for this entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasTypeNameCategory">
            <summary>A category element which has the required type name has been detected for this entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasProperties">
            <summary>A m:properties element has been detected for this entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasCount">
            <summary>A m:count link has been detected for this feed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasNextPageLinkInFeed">
            <summary>A link[@rel='next'] link has been detected for this feed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasReadLinkInFeed">
            <summary>A link[@rel='self'] link has been detected for this feed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasEditMediaLink">
            <summary>An edit-media link has been detected for this entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomReader.AtomScope.AtomScopeStateBitMask.HasDeltaLink">
            <summary>A link[@rel='http://docs.oasis-open.org/odata/ns/delta'] has been detected for this entry.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.XmlReaderExtensions">
            <summary>
            Extension methods for the XML reader.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.AssertNotBuffering(Microsoft.Data.OData.Atom.BufferingXmlReader)">
            <summary>
            Asserts that the reader is not buffer.
            </summary>
            <param name="bufferedXmlReader">The <see cref="T:Microsoft.Data.OData.Atom.BufferingXmlReader"/> to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.AssertBuffering(Microsoft.Data.OData.Atom.BufferingXmlReader)">
            <summary>
            Asserts that the reader is buffer.
            </summary>
            <param name="bufferedXmlReader">The <see cref="T:Microsoft.Data.OData.Atom.BufferingXmlReader"/> to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.ReadElementValue(System.Xml.XmlReader)">
            <summary>
            Reads the value of the element as a string.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The string value of the element.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element   - the element to read the value for.
                             XmlNodeType.Attribute - an attribute on the element to read the value for.
            Post-Condition:  Any                   - the node after the element.
                             
            This method is similar to ReadElementContentAsString with one difference:
            - It ignores Whitespace nodes - this is needed for compatiblity, WCF DS ignores insignificant whitespaces
                it does that by setting the IgnoreWhitespace option on reader settings, ODataLib can't do that
                cause it doesn't always control the creation of the XmlReader, so it has to explicitely ignore
                insignificant whitespaces.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.ReadFirstTextNodeValue(System.Xml.XmlReader)">
            <summary>
            Reads the value of the first text, CDATA or significant whitespace node.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The value of the first text, CDATA or significant whitespace node.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element   - the element to read the value for.
            Post-Condition:  Any                   - the node after the element.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.ReadElementContentValue(System.Xml.XmlReader)">
            <summary>
            Reads the value of the element as a string.
            </summary>
            <param name="reader">The reader to read from.</param>
            <returns>The string value of the element.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element   - the element to read the value for.
                             XmlNodeType.Attribute - an attribute on the element to read the value for.
            Post-Condition:  XmlNodeType.Element    - the element was empty.
                             XmlNodeType.EndElement - the element had some value.
                             
            This method is similar to ReadElementContentAsString with two differences:
            - It ignores Whitespace nodes - this is needed for compatiblity, WCF DS ignores insignificant whitespaces
                it does that by setting the IgnoreWhitespace option on reader settings, ODataLib can't do that
                cause it doesn't always control the creation of the XmlReader, so it has to explicitely ignore
                insignificant whitespaces.
            - It leaves the reader positioned on the EndElement node (or the start node if it was empty).
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.SkipInsignificantNodes(System.Xml.XmlReader)">
            <summary>
            Reads from the XML reader skipping insignificant nodes.
            </summary>
            <param name="reader">The XML reader to read from.</param>
            <remarks>Do not use MoveToContent since for backward compatibility reasons we skip over nodes reported as Text which have
            whitespace only content (even though the XmlReader should report those as Whitespace).</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.SkipElementContent(System.Xml.XmlReader)">
            <summary>
            Skips the content of the element and leaves the reader on the end element (or empty start element)
            </summary>
            <param name="reader">The reader to read from.</param>
            <remarks>
            Pre-Condition:   XmlNodeType.Element - the element to read
                             XmlNodeType.Attribute - attribute on the element to read
            Post-Condition:  XmlNodeType.Element - if the element was empty element with no content.
                             XmlNodeType.EndElement - if the element was element with empty content.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.ReadPayloadStart(System.Xml.XmlReader)">
            <summary>
            Reads from the input until the first element is found.
            </summary>
            <param name="reader">The XML reader to read from.</param>
            <remarks>
            Pre-Condition:  XmlNodeType.None    - the reader hasn't been used yet.
            Post-Condition: XmlNodeType.Element - the reader is positioned on the root/first element.
            Note that the method will fail if the top-level contains any significant node other than the root element
            or if no root element is found.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.ReadPayloadEnd(System.Xml.XmlReader)">
            <summary>
            Reads till the end of the input payload.
            </summary>
            <param name="reader">The XML reader to read from.</param>
            <remarks>
            Pre-Condition:  any               - the reader will verify that only insignificant node is present.
            Post-Condition: XmlNodeType.None  - the reader is at the end of the input.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.NamespaceEquals(System.Xml.XmlReader,System.String)">
            <summary>
            Determines if the current node's namespace equals to the specified <paramref name="namespaceUri"/>
            </summary>
            <param name="reader">The XML reader to get the current node from.</param>
            <param name="namespaceUri">The namespace URI to compare, this must be a string already atomized in the <paramref name="reader"/> name table.</param>
            <returns>true if the current node is in the specified namespace; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.LocalNameEquals(System.Xml.XmlReader,System.String)">
            <summary>
            Determines if the current node's local name equals to the specified <paramref name="localName"/>
            </summary>
            <param name="reader">The XML reader to get the current node from.</param>
            <param name="localName">The local name to compare, this must be a string already atomized in the <paramref name="reader"/> name table.</param>
            <returns>true if the current node has the specified local name; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.TryReadEmptyElement(System.Xml.XmlReader)">
            <summary>
            Tries to read the current element as an empty element (no or empty content).
            </summary>
            <param name="reader">The XML reader to read from.</param>
            <returns>true if the reader was on an empty element; false otherwise.</returns>
            <remarks>
            Pre-Condition:   XmlNodeType.Element - the element to read
                             XmlNodeType.Attribute - attribute on the element to read
            Post-Condition:  XmlNodeType.Element - if the element was empty element with no content.
                             XmlNodeType.EndElement - if the element was element with empty content.
                             any other - the first child node of the element, in this case the method returns false.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.TryReadToNextElement(System.Xml.XmlReader)">
            <summary>
            Reads to the next element encountered in an Xml payload.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from.</param>
            <returns>true if the method reached the next element; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.XmlReaderExtensions.IsNullOrWhitespace(System.String)">
            <summary>
            Checks whether the specifies string is null or blank.
            </summary>
            <param name="text">Text to check.</param>
            <returns>true if text is null, empty, or all whitespace characters.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.DuplicatePropertyNamesChecker">
            <summary>
            Helper class to verify that no duplicate properties are specified for entries and complex values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.DuplicatePropertyNamesChecker.propertyAnnotationsProcessedToken">
            <summary>Special value for the property annotations which is used to mark the annotations as processed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.DuplicatePropertyNamesChecker.allowDuplicateProperties">
            <summary>true if duplicate properties are allowed; otherwise false.</summary>
            <remarks>
            See the comment on ODataWriterBehavior.AllowDuplicatePropertyNames or
            ODataReaderBehavior.AllowDuplicatePropertyNames for further details.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.DuplicatePropertyNamesChecker.isResponse">
            <summary>true if we're processing a response; false if it's a request.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.DuplicatePropertyNamesChecker.propertyNameCache">
            <summary>
            A cache of property names to detect duplicate property names. The <see cref="T:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationKind"/> value stored
            for a given property name indicates what should happen if another property with the same name is found.
            See the comments on <see cref="T:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationKind"/> for more details.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="allowDuplicateProperties">true if duplicate properties are allowed; otherwise false.</param>
            <param name="isResponse">true if we're processing a response; false if it's a request.</param>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.CheckForDuplicatePropertyNames(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Check the <paramref name="property"/> for duplicate property names in an entry or complex value.
            If not explicitly allowed throw when duplicate properties are detected.
            If duplicate properties are allowed see the comment on ODataWriterBehavior.AllowDuplicatePropertyNames 
            or ODataReaderBehavior.AllowDuplicatePropertyNames for further details.
            </summary>
            <param name="property">The property to be checked.</param>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.CheckForDuplicatePropertyNamesOnNavigationLinkStart(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Checks the <paramref name="navigationLink"/> for duplicate property names in an entry when the navigation link
            has started but we don't know yet if it's expanded or not.
            </summary>
            <param name="navigationLink">The navigation link to be checked.</param>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.CheckForDuplicatePropertyNames(Microsoft.Data.OData.ODataNavigationLink,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Check the <paramref name="navigationLink"/> for duplicate property names in an entry or complex value.
            If not explicitly allowed throw when duplicate properties are detected.
            If duplicate properties are allowed see the comment on ODataWriterBehavior.AllowDuplicatePropertyNames 
            or ODataReaderBehavior.AllowDuplicatePropertyNames for further details.
            </summary>
            <param name="navigationLink">The navigation link to be checked.</param>
            <param name="isExpanded">true if the link is expanded, false otherwise.</param>
            <param name="isCollection">true if the navigation link is a collection, false if it's a singleton or null if we don't know.</param>
            <returns>The association link with the same name if there already was one.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.CheckForDuplicateAssociationLinkNames(Microsoft.Data.OData.ODataAssociationLink)">
            <summary>
            Check the <paramref name="associationLink"/> for duplicate property names in an entry or complex value.
            If not explicitly allowed throw when duplicate properties are detected.
            If duplicate properties are allowed see the comment on ODataWriterBehavior.AllowDuplicatePropertyNames  
            or ODataReaderBehavior.AllowDuplicatePropertyNames for further details.
            </summary>
            <param name="associationLink">The association link to be checked.</param>
            <returns>The navigation link with the same name as the association link if there's one.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.Clear">
            <summary>
            Clear the internal data structures of the checker so it can be reused.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.AddODataPropertyAnnotation(System.String,System.String,System.Object)">
            <summary>
            Adds an OData annotation to a property.
            </summary>
            <param name="propertyName">The name of the property to add annotation to. string.empty means the annotation is for the current scope.</param>
            <param name="annotationName">The name of the annotation to add.</param>
            <param name="annotationValue">The valud of the annotation to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.AddCustomPropertyAnnotation(System.String,System.String)">
            <summary>
            Adds a custom annotation to a property.
            </summary>
            <param name="propertyName">The name of the property to add annotation to. string.empty means the annotation is for the current scope.</param>
            <param name="annotationName">The name of the annotation to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.GetODataPropertyAnnotations(System.String)">
            <summary>
            Returns OData annotations for the specified property with name <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The name of the property to return the annotations for.</param>
            <returns>Enumeration of pairs of OData annotation name and and the annotation value, or null if there are no OData annotations for the property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.MarkPropertyAsProcessed(System.String)">
            <summary>
            Marks the <paramref name="propertyName"/> property to note that all its annotations were already processed.
            </summary>
            <param name="propertyName">The property name to mark.</param>
            <remarks>
            Properties marked like this will fail if there are more annotations found for them in the payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.GetAllUnprocessedProperties">
            <summary>
            Returns the names of all properties which have not been marked as processed through <see cref="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.MarkPropertyAsProcessed(System.String)"/>.
            </summary>
            <returns>A set of property names.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.ThrowIfPropertyIsProcessed(System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord)">
            <summary>
            Throw if property is processed already.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="duplicationRecord">DuplicationRecord of the property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.IsPropertyUnprocessed(System.Collections.Generic.KeyValuePair{System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord})">
            <summary>
            Indicates whether a property's annotations have not yet been processed.
            </summary>
            <param name="property">The name of the property to check.</param>
            <returns>true if the property associated with the given name has unprocessed annotations.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.GetDuplicationKind(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Decides whether a the given <paramref name="property"/> supports duplicates (if allowed by the settings).
            </summary>
            <param name="property">The property to check.</param>
            <returns>true if the <paramref name="property"/> supports duplicates (if allowed by the settings); otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.GetIsCollectionEffectiveValue(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Determines the effective value for the isCollection flag.
            </summary>
            <param name="isExpanded">true if the navigation link is expanded, false otherwise.</param>
            <param name="isCollection">true if the navigation link is marked as collection, false if it's marked as singletong or null if we don't know.</param>
            <returns>The effective value of the isCollection flag. Note that we can't rely on singleton links which are not expanded since
            those can appear even in cases where the actual navigation property is a collection.
            We allow singleton deferred links for collection properties in requests, as that is one way of expressing a bind operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.ApplyNavigationLinkToDuplicationRecord(Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord,Microsoft.Data.OData.ODataNavigationLink,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Sets the properties on a duplication record for a navigation link.
            </summary>
            <param name="duplicationRecord">The duplication record to modify.</param>
            <param name="navigationLink">The navigation link found for this property.</param>
            <param name="isExpanded">true if the navigation link is expanded, false otherwise.</param>
            <param name="isCollection">true if the navigation link is marked as collection, false if it's marked as singletong or null if we don't know.</param>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.TryGetDuplicationRecord(System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord@)">
            <summary>
            Tries to get an existing duplication record for the specified <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">The property name to look for.</param>
            <param name="duplicationRecord">The existing duplication if one was already found.</param>
            <returns>true if a duplication record already exists, false otherwise.</returns>
            <remarks>This method also initializes the cache if it was not initialized yet.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.CheckNavigationLinkDuplicateNameForExistingDuplicationRecord(System.String,Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord)">
            <summary>
            Checks for duplication of a navigation link against an existing duplication record.
            </summary>
            <param name="propertyName">The name of the navigation link.</param>
            <param name="existingDuplicationRecord">The existing duplication record.</param>
            <remarks>This only performs checks possible without the knowledge of whether the link was expanded or not.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.GetDuplicationRecordToAddPropertyAnnotation(System.String,System.String)">
            <summary>
            Gets a duplication record to use for adding property annotation.
            </summary>
            <param name="propertyName">The name of the property to get the duplication record for.</param>
            <param name="annotationName">The name of the annotation being added (only for error reporting).</param>
            <returns>The duplication record to use. This will never be null.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationKind">
            <summary>
            An enumeration to represent the duplication kind of a given property name.
            </summary>
            <remarks>
            This enumeration is used to determine what should happen if two properties with the same name are detected on an entry or complex value.
            When the first property is found, the initial value is set based on the kind of property found and the general setting to allow or disallow duplicate properties.
            When a second property with the same name is found, the duplication kind can be 'upgraded' (e.g., from association link to navigation property), 'ignored' (e.g.
            when finding the association link for an existing navigation property or when duplicate properties are allowed by the settings) or 'fail' 
            (e.g., when duplicate properties are not allowed).
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationKind.PropertyAnnotationSeen">
            <summary>We don't know enough about the property to determine its duplication kind yet, we've just seen a property annotation for it.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationKind.Prohibited">
            <summary>Duplicates for this property name are not allowed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationKind.PotentiallyAllowed">
            <summary>This kind indicates that duplicates are allowed (if the settings allow duplicates).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationKind.NavigationProperty">
            <summary>A navigation link or association link was reported.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord">
            <summary>
            A record of a single property for duplicate property names checking.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord.#ctor(Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationKind)">
            <summary>
            Constructor.
            </summary>
            <param name="duplicationKind">The duplication kind of the record to create.</param>
        </member>
        <member name="P:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord.DuplicationKind">
            <summary>
            The duplication kind of the record to create.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord.NavigationLink">
            <summary>
            The navigation link if it was already found for this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord.AssociationLink">
            <summary>
            The association link if it was already found for this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord.NavigationPropertyIsCollection">
            <summary>
            true if we know for sure that the navigation property with the property name is a collection,
            false if we know for sure that the navigation property with the property name is a singleton,
            null if we don't know the cardinality of the navigation property for sure (yet).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord.PropertyODataAnnotations">
            <summary>
            Dictionary of OData annotations for the property for which the duplication record is stored.
            </summary>
            <remarks>
            The key of the dictionary is the fully qualified annotation name (i.e. odata.type),
            the value is the parsed value of the annotation (this is annotation specific).
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.DuplicatePropertyNamesChecker.DuplicationRecord.PropertyCustomAnnotations">
            <summary>
            Hashset of custom annotations for the property for which the duplication record is stored.
            </summary>
            <remarks>
            This is just a hashset for now since we don't read custom annotations, we just need to check for duplicates.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ErrorUtils">
            <summary>
            Utility methods serializing the xml error payload
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ErrorUtils.ODataErrorMessageDefaultLanguage">
            <summary>Default language for error messages if not specified.</summary>
            <remarks>
            This constant is included here since this file is compiled into WCF DS Server as well
            so we can't compile in the ODataConstants.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ErrorUtils.GetErrorDetails(Microsoft.Data.OData.ODataError,System.String@,System.String@,System.String@)">
            <summary>
            Extracts error details from an <see cref="T:Microsoft.Data.OData.ODataError"/>.
            </summary>
            <param name="error">The ODataError instance to extract the error details from.</param>
            <param name="code">A data service-defined string which serves as a substatus to the HTTP response code.</param>
            <param name="message">A human readable message describing the error.</param>
            <param name="messageLanguage">The language identifier representing the language the error message is in.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ErrorUtils.WriteXmlError(System.Xml.XmlWriter,Microsoft.Data.OData.ODataError,System.Boolean,System.Int32)">
            <summary>
            Write an error message.
            </summary>
            <param name="writer">The Xml writer to write to.</param>
            <param name="error">The error instance to write.</param>
            <param name="includeDebugInformation">A flag indicating whether error details should be written (in debug mode only) or not.</param>
            <param name="maxInnerErrorDepth">The maximumum number of nested inner errors to allow.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ErrorUtils.WriteXmlError(System.Xml.XmlWriter,System.String,System.String,System.String,Microsoft.Data.OData.ODataInnerError,System.Int32)">
            <summary>
            Write an error message.
            </summary>
            <param name="writer">The Xml writer to write to.</param>
            <param name="code">The code of the error.</param>
            <param name="message">The message of the error.</param>
            <param name="messageLanguage">The language of the message.</param>
            <param name="innerError">Inner error details that will be included in debug mode (if present).</param>
            <param name="maxInnerErrorDepth">The maximumum number of nested inner errors to allow.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ErrorUtils.WriteXmlInnerError(System.Xml.XmlWriter,Microsoft.Data.OData.ODataInnerError,System.String,System.Int32,System.Int32)">
            <summary>
            Writes the inner exception information in debug mode.
            </summary>
            <param name="writer">The Xml writer to write to.</param>
            <param name="innerError">The inner error to write.</param>
            <param name="innerErrorElementName">The local name of the element representing the inner error.</param>
            <param name="recursionDepth">The number of times this method has been called recursively.</param>
            <param name="maxInnerErrorDepth">The maximumum number of nested inner errors to allow.</param>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionDeserializer">
            <summary>
            OData JSON deserializer for collections.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionDeserializer.duplicatePropertyNamesChecker">
            <summary>Cached duplicate property names checker to use if the items are complex values.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionDeserializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonInputContext">The JSON input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionDeserializer.ReadCollectionStart(System.Boolean)">
            <summary>
            Reads the start of a collection; this includes collection-level properties (e.g., the 'results' property) if the version permits it.
            </summary>
            <param name="isResultsWrapperExpected">true if the results wrapper should be in the payload being read; false otherwise.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection-level information. Currently this is only the name of the collection in ATOM.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartArray:    for a V1 collection
                            JsonNodeType.StartObject:   for a &gt;=V2 collection
            Post-Condition: JsonNodeType.StartArray:    the start of the array of the collection items
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionDeserializer.ReadCollectionItem(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.CollectionWithoutExpectedTypeValidator)">
            <summary>
            Reads an item in the collection.
            </summary>
            <param name="expectedItemTypeReference">The expected type of the item to read.</param>
            <param name="collectionValidator">The collection validator instance if no expected item type has been specified; otherwise null.</param>
            <returns>The value of the collection item that was read; this can be an ODataComplexValue, a primitive value or 'null'.</returns>
            <remarks>
            Pre-Condition:  The first node of the item in the collection
                            NOTE: this method will throw if the node is not
                            JsonNodeType.StartObject:    for a complex item
                            JsonNodeType.PrimitiveValue: for a primitive item
            Post-Condition: The reader is positioned on the first node of the next item or an EndArray node if there are no more items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionDeserializer.ReadCollectionEnd(System.Boolean)">
            <summary>
            Reads the end of a collection; this includes collection-level properties if the version permits it.
            </summary>
            <param name="isResultsWrapperExpected">true if the results wrapper should be in the payload being read; false otherwise.</param>
            <remarks>
            Pre-Condition:  EndArray node:      End of the collection content array
            Post-Condition: EndOfInput:         V1 collection
                            EndObject           V1 collection in response
                            EndObject           wrapped collection with no extra properties after the 'results' property
                            Property            wrapped collection with extra properties after the 'results' property
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkDeserializer">
            <summary>
            OData JSON deserializer for entity reference links.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkDeserializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The Verbose JSON input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkDeserializer.ReadEntityReferenceLinks">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkDeserializer.ReadEntityReferenceLink">
            <summary>
            Reads a top-level entity reference link - implementation of the actual functionality.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkDeserializer.ReadEntityReferenceLinkProperties(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.EntityReferenceLinksWrapperPropertyBitMask@)">
            <summary>
            Reads the properties of an entity reference link.
            </summary>
            <param name="entityReferenceLinks">The <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> instance to set the read property values on.</param>
            <param name="propertiesFoundBitField">The bit field with all the properties already read.</param>
            <returns>true if the method found the 'results' property; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntityReferenceLinkDeserializer.ReadSingleEntityReferenceLink">
            <summary>
            Read an entity reference link.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> which was read.</returns>
            <remarks>
            Pre-Condition:  any node   - This method will throw if the node type is not a StartObject node
            Post-Condition: any node
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer">
            <summary>
            OData Verbose JSON deserializer for entries and feeds.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The Verbose JSON input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadFeedStart(Microsoft.Data.OData.ODataFeed,System.Boolean,System.Boolean)">
            <summary>
            Reads the start of a feed; this includes feed-level properties if the version permits it.
            </summary>
            <param name="feed">The <see cref="T:Microsoft.Data.OData.ODataFeed"/> instance to fill with the data read.</param>
            <param name="isResultsWrapperExpected">A flag indicating whether we expect the results wrapper for feeds to be present.</param>
            <param name="isExpandedLinkContent">true if the feed is inside an expanded link.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.StartArray:    for a feed without 'results' wrapper
                            JsonNodeType.StartObject:   for a feed wrapped with 'results' wrapper
            Post-Condition: Any start node              The first item in the feed
                            JsonNodeType.EndArray:      The end of the feed
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadFeedEnd(Microsoft.Data.OData.ODataFeed,System.Boolean,System.Boolean)">
            <summary>
            Reads the end of a feed; this includes feed-level properties if the version permits them.
            </summary>
            <param name="feed">The <see cref="T:Microsoft.Data.OData.ODataFeed"/> instance to fill with the data read.</param>
            <param name="readResultsWrapper">A flag indicating whether we expect the results wrapper for feeds to be present.</param>
            <param name="isExpandedLinkContent">true if the feed is inside an expanded link.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.EndArray
            Post-Condition: JsonNodeType.EndArray   if the feed is not wrapped
                            JsonNodeType.EndObject  if the feed is wrapped
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadEntryStart">
            <summary>
            Reads the start of an entry (non-null)
            </summary>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject            Will fail if it's anything else
            Post-Condition: JsonNodeType.Property               The first property of the entry
                            JsonNodeType.EndObject              The end of the property object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadEntryMetadataPropertyValue(Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState)">
            <summary>
            Reads the entry metadata property.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <remarks>
            This method does not move the reader.
            Pre-Condition:  JsonNodeType.Object             The start object of the __metadata property value.
            Post-Condition: JsonNodeType.EndObject          The end object of the __metadtaa property value.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ValidateEntryMetadata(Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState)">
            <summary>
            Validates entry metadata properties against the model.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <remarks>
            This method must be called only after the ReadEntryMetadata was already called.
            It should be called always, regardless of whether the __metadata property was found ot not.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadEntryContent(Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState,Microsoft.Data.Edm.IEdmNavigationProperty@)">
            <summary>
            Reads the content of an entry until a navigation link is detected.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="navigationProperty">If a navigation link was found this parameter will hold the navigation property for that link, otherwise it's null.</param>
            <returns>A <see cref="T:Microsoft.Data.OData.ODataNavigationLink"/> instance representing the navigation link detected while reading the entry contents; null if no navigation link was detected.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.Property               The property to read
                            JsonNodeType.EndObject              If no (more) properties exist in the entry's content
            Post-Condition: JsonNodeType.EndObject              If no (more) properties exist in the entry's content
                            JsonNodeType.StartObject            The first node of the navigation link property value to read next 
                                                                (deferred link or entry inside expanded link or feed with 'results' wrapper inside expanded link)
                            JsonNodeType.StartArray             feed without 'results' wrapper inside of expanded link
                            JsonNodeType.PrimitiveValue (null)  Expanded null entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadDeferredNavigationLink(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Reads the Url of a non-expanded link and moves the reader forward to the position after the link.
            </summary>
            <param name="navigationLink">The navigation link to set the Url on.</param>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject:    the start of the object representing the deferred link
            Post-Condition: JsonNodeType.Property:       the next property after the deferred link
                            JsonNodeType.EndObject       the end of the owning entry if the deferred link is the last property
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadEntityReferenceLink">
            <summary>
            Reads the entity reference link and moves the reader forward to the position after the link.
            </summary>
            <returns>The entity reference link read from the payload.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.StartObject:    the start of the object representing the entity reference link
            Post-Condition: JsonNodeType.Property:       the next property after the entity reference link
                            JsonNodeType.EndObject:      the end of the owning entry if the entity reference link is the last property
                            JsonNodeType.EndArray:       the end of the owning array (if the entity reference link is part of expanded feed)
                            Any:                         the next item in the owning array (if the entity reference link is part of expanded feed)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.IsDeferredLink(System.Boolean)">
            <summary>
            Analyzes the current navigation property node to determine whether it represents a deferred link.
            </summary>
            <param name="navigationLinkFound">true if we already detected a navigation link and now determine its kind; false if we are detecting a deferred navigation link.</param>
            <returns>true if the current navigation property represents a deferred link; false for an expanded navigation link.</returns>
            <remarks>
            This method does not move the reader.
            Pre-Condition:  The first node of the property value
            Post-Condition: The first node of the property value
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.IsEntityReferenceLink">
            <summary>
            Analyzes the current node to determine whether it represents an entity reference link.
            </summary>
            <returns>true if the current node represents an entity reference link; false is it's an entry or something else.</returns>
            <remarks>
            This method does not move the reader.
            Pre-Condition:  The first node of the property value
            Post-Condition: The first node of the property value
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.AddEntryProperty(Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState,System.String,System.Object)">
            <summary>
            Adds a new property to an entry.
            </summary>
            <param name="entryState">The entry state for the entry to add the property to.</param>
            <param name="propertyName">The name of the property to add.</param>
            <param name="propertyValue">The value of the property to add.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadFeedProperty(Microsoft.Data.OData.ODataFeed,System.String,System.Boolean)">
            <summary>
            Read a feed-level property (e.g., __count, __next, etc.) and check its version compliance. 
            This method fails on properties that are not recognized as feed-level properties.
            </summary>
            <param name="feed">The <see cref="T:Microsoft.Data.OData.ODataFeed"/> instance to fill with the data read.</param>
            <param name="propertyName">The name of the property being read.</param>
            <param name="isExpandedLinkContent">true if the feed is inside an expanded link.</param>
            <remarks>
            Pre-Condition:  The reader is on the first node of the feed-level property's value.
            Post-Condition: JsonNodeType.Property:          the next feed property to read or
                            JsonNodeType.EndObject:         the end of the results wrapper
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadEntryProperty(Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Read an entry-level property and check its version compliance. 
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="edmProperty">The EDM property of the property being read, or null if the property is an open property.</param>
            <remarks>
            Pre-Condition:  The reader is positioned on the first node of the property value
            Post-Condition: JsonNodeType.Property:    the next property of the entry
                            JsonNodeType.EndObject:   the end-object node of the entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadOpenProperty(Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState,System.String)">
            <summary>
            Read an open property.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="propertyName">The name of the open property to read.</param>
            <remarks>
            Pre-Condition:  The reader is positioned on the first node of the property value
            Post-Condition: JsonNodeType.Property:    the next property of the entry
                            JsonNodeType.EndObject:   the end-object node of the entry
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadUndeclaredProperty(Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState,System.String)">
            <summary>
            Read an undeclared property. That is a property which is not declared by the model, but the owning type is not an open type.
            </summary>
            <param name="entryState">The state of the reader for entry to read.</param>
            <param name="propertyName">The name of the open property to read.</param>
            <remarks>
            Pre-Condition:  The reader is positioned on the first node of the property value
            Post-Condition: JsonNodeType.Property:    the next property of the entry
                            JsonNodeType.EndObject:   the end-object node of the entry
            </remarks>
            <returns>A navigation link instance if the propery read is a navigation link which should be reported to the caller.
            Otherwise null if the property was either ignored or read and added to the list of properties on the entry.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadStreamPropertyValue">
            <summary>
            Reads a stream property value.
            </summary>
            <returns>The value of the stream property.</returns>
            <remarks>
            Pre-Condition:  Fails if the current node is not a JsonNodeType.StartObject
            Post-Condition: almost anything - the node after the stream reference (after the EndObject)
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadUriMetadataProperty(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@)">
            <summary>
            Reads the uri property in metadata value.
            </summary>
            <param name="entry">The entry being read.</param>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <remarks>
            Pre-Condition:  first node of the 'uri' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadIdMetadataProperty(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@)">
            <summary>
            Reads the id property in metadata value.
            </summary>
            <param name="entry">The entry being read.</param>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <remarks>
            Pre-Condition:  first node of the 'id' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadETagMetadataProperty(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@)">
            <summary>
            Reads the etag property in metadata value.
            </summary>
            <param name="entry">The entry being read.</param>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <remarks>
            Pre-Condition:  first node of the 'etag' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadMediaSourceMetadataProperty(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@,Microsoft.Data.OData.ODataStreamReferenceValue@)">
            <summary>
            Reads the media_src property in metadata value.
            </summary>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <param name="mediaResource">The media resource value for the entry.</param>
            <remarks>
            Pre-Condition:  first node of the 'media_src' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadEditMediaMetadataProperty(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@,Microsoft.Data.OData.ODataStreamReferenceValue@)">
            <summary>
            Reads the edit_media property in metadata value.
            </summary>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <param name="mediaResource">The media resource value for the entry.</param>
            <remarks>
            Pre-Condition:  first node of the 'edit_media' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadContentTypeMetadataProperty(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@,Microsoft.Data.OData.ODataStreamReferenceValue@)">
            <summary>
            Reads the content_type property in metadata value.
            </summary>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <param name="mediaResource">The media resource value for the entry.</param>
            <remarks>
            Pre-Condition:  first node of the 'content_type' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadMediaETagMetadataProperty(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@,Microsoft.Data.OData.ODataStreamReferenceValue@)">
            <summary>
            Reads the media_etag property in metadata value.
            </summary>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <param name="mediaResource">The media resource value for the entry.</param>
            <remarks>
            Pre-Condition:  first node of the 'media_etag' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadActionsMetadataProperty(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@)">
            <summary>
            Reads the actions property in metadata value.
            </summary>
            <param name="entry">The entry being read.</param>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <remarks>
            Pre-Condition:  first node of the 'actions' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadFunctionsMetadataProperty(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@)">
            <summary>
            Reads the functions property in metadata value.
            </summary>
            <param name="entry">The entry being read.</param>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <remarks>
            Pre-Condition:  first node of the 'functions' property's value
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadPropertiesMetadataProperty(Microsoft.Data.OData.VerboseJson.IODataVerboseJsonReaderEntryState,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonReaderUtils.MetadataPropertyBitMask@)">
            <summary>
            Read the property metadata for the properties of an entry being read.
            </summary>
            <param name="entryState">The entry state for the current reader.</param>
            <param name="metadataPropertiesFoundBitField">The bit fields with all the properties found in metadata value so far.</param>
            <remarks>
            Pre-Condition:  first node of the 'properties' property's value (we will throw if this is not a start object node)
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
                            
            This method will not validate anything against the model because it will read the type name and thus it can't rely
            on knowing the actual type of the entry being read.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadOperationsMetadata(Microsoft.Data.OData.ODataEntry,System.Boolean)">
            <summary>
            Read the 'actions' or 'functions' metadata for the entry being read.
            </summary>
            <param name="entry">The <see cref="T:Microsoft.Data.OData.ODataEntry"/> the 'actions' or 'functions' metadata is read for.</param>
            <param name="isActions">When True the 'actions' metadata is being read, otherwise 'functions' metadata is being read.</param>
            <remarks>
            Pre-Condition:  first node of the 'actions' or 'functions' property's value (we will throw if this is not a start object node)
            Post-Condition: JsonNodeType.Property:      the next metadata property
                            JsonNodeType.EndObject:     the end-object node of the metadata object
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ReadStreamReferenceValue">
            <summary>
            Reads the stream reference metadata from the value of the __mediaresource property.
            </summary>
            <returns>The value of the stream reference with the metadata properties filled.</returns>
            <remarks>
            Pre-Condition:  Fails if the current node is not a JsonNodeType.StartObject
            Post-Condition: Either a property node or an EndObject node.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ResolveUri(System.String)">
            <summary>
            Tries to resolve the payload URI using the custom URI resolver. If the custom resolver fails, it returns the actual URI from the payload.
            </summary>
            <param name="uriFromPayload">the URI to be resolved.</param>
            <returns>A resolved URI or the URI from the payload, if the custom resolver fails.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ValidateNavigationLinkPropertyValue(System.Boolean)">
            <summary>
            Validates that the value of a JSON property can represent navigation link.
            </summary>
            <param name="isCollection">true if the property is entity set reference property; false for a resource reference property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.ShouldEntryPropertyBeSkipped">
            <summary>
            Determines whether a property of an entry should be skipped during reading.
            </summary>
            <returns>true if the current property should be skipped; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.OperationsDeserializerContext">
            <summary>
            Operations deserializer context to pass to JSON operations reader.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.OperationsDeserializerContext.entry">
            <summary>
            The entry to add operations to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.OperationsDeserializerContext.verboseJsonEntryAndFeedDeserializer">
            <summary>
            The deserializer to use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.OperationsDeserializerContext.#ctor(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer)">
            <summary>
            Constructor.
            </summary>
            <param name="entry">The entry to add operations to.</param>
            <param name="verboseJsonEntryAndFeedDeserializer">The deserializer to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.OperationsDeserializerContext.ProcessUriFromPayload(System.String)">
            <summary>
            Given a URI from the payload, this method will try to make it absolute, or fail otherwise.
            </summary>
            <param name="uriFromPayload">The URI string from the payload to process.</param>
            <returns>An absolute URI to report.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.OperationsDeserializerContext.AddActionToEntry(Microsoft.Data.OData.ODataAction)">
            <summary>
            Adds the specified action to the current entry.
            </summary>
            <param name="action">The action whcih is fully populated with the data from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.OperationsDeserializerContext.AddFunctionToEntry(Microsoft.Data.OData.ODataFunction)">
            <summary>
            Adds the specified function to the current entry.
            </summary>
            <param name="function">The function whcih is fully populated with the data from the payload.</param>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonEntryAndFeedDeserializer.OperationsDeserializerContext.JsonReader">
            <summary>
            The JSON reader to read the operations value from.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonErrorDeserializer">
            <summary>
            OData Verbose JSON deserializer for errors.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonErrorDeserializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The Verbose JSON input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonErrorDeserializer.ReadTopLevelError">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonErrorDeserializer.ReadInnerError(System.Int32)">
            <summary>
            Reads an inner error payload.
            </summary>
            <param name="recursionDepth">The number of times this method has been called recursively.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataInnerError"/> representing the read inner error.</returns>
            <remarks>
            Pre-Condition:  any                         - will throw if not StartObject
            Post-Condition: JsonNodeType.Property       - The next property in the error value
                            JsonNodeType.EndObject      - The end of the error value
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext">
            <summary>
            Implementation of the OData input for Verbose JSON OData format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.textReader">
            <summary>The text reader created for the input stream.</summary>
            <remarks>
            The ODataJsonInputContext instance owns the textReader instance and thus disposes it. 
            We further set this field to null when the input is disposed and use it for checks whether the instance has already been disposed.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.jsonReader">
            <summary>The JSON reader to read from.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.TextReader,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>Constructor.</summary>
            <param name="format">The format for this input context.</param>
            <param name="reader">The reader to read data from.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>Constructor.</summary>
            <param name="format">The format for this input context.</param>
            <param name="messageStream">The stream to read data from.</param>
            <param name="encoding">The encoding to use to read the input.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateFeedReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entries in the feed.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateFeedReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entries in the feed.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateEntryReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateEntryReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateCollectionReaderAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Task which when completed returns the newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateParameterReader(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateParameterReaderAsync(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadServiceDocument">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadServiceDocumentAsync">
            <summary>
            Asynchronously read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadProperty(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates an reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadPropertyAsync(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously read the property from the input and 
            return an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadError">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadErrorAsync">
            <summary>
            Asynchronously read a top-level error.
            </summary>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadEntityReferenceLinks(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadEntityReferenceLinksAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously read a set of top-level entity reference links.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadEntityReferenceLink(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads a top-level entity reference link.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadEntityReferenceLinkAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously read a top-level entity reference link.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>Task which when completed returns an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.DetectPayloadKind">
            <summary>
            Detects the payload kind(s) from the message stream.
            </summary>
            <returns>An enumerable of zero, one or more payload kinds that were detected from looking at the payload in the message stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.DisposeImplementation">
            <summary>
            Disposes the input context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateTextReaderForMessageStreamConstructor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Helper method to create a TextReader over the message stream. This is needed by the constructor to dispose the message stream if the creation fails
            since this is called from the constructor in place where exception handling is not possible.
            </summary>
            <param name="messageStream">The stream to read data from.</param>
            <param name="encoding">The encoding to use to read the input.</param>
            <returns>The newly created text reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.VerifyCanCreateParameterReader(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Verifies that CreateParameterReader can be called.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateFeedReaderImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entries in the feed.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateEntryReaderImplementation(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedEntityType">The expected entity type for the entry to be read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateCollectionReaderImplementation(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>Newly create <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.CreateParameterReaderImplementation(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataParameterReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadPropertyImplementation(Microsoft.Data.Edm.IEdmStructuralProperty,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method creates and reads the property from the input and 
            returns an <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.
            </summary>
            <param name="Property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> producing the property to be read.</param>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataProperty"/> representing the read property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadServiceDocumentImplementation">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadErrorImplementation">
            <summary>
            Read a top-level error.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataError"/> representing the read error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadEntityReferenceLinksImplementation">
            <summary>
            Read a set of top-level entity reference links.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/> representing the read links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.ReadEntityReferenceLinkImplementation">
            <summary>
            Reads a top-level entity reference link - implementation of the actual functionality.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> representing the read entity reference link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext.JsonReader">
            <summary>
            Returns the <see cref="T:Microsoft.Data.OData.Json.BufferingJsonReader"/> which is to be used to read the content of the message.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonServiceDocumentDeserializer">
            <summary>
            OData JSON deserializer for service documents.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonServiceDocumentDeserializer.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The Verbose JSON input context to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonServiceDocumentDeserializer.ReadServiceDocument">
            <summary>
            Read a service document. 
            This method reads the service document from the input and returns 
            an <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> that represents the read service document.
            </summary>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataWorkspace"/> representing the read service document.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataInnerError">
            <summary>
            Class representing implementation specific debugging information to help determine the cause of the error.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInnerError.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataInnerError" /> class with default values.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataInnerError.#ctor(System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataInnerError" /> class with exception object.</summary>
            <param name="exception">The <see cref="T:System.Exception" /> used to create the inner error.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInnerError.Message">
            <summary>Gets or sets the error message.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInnerError.TypeName">
            <summary>Gets or sets the type name of this error, for example, the type name of an exception.</summary>
            <returns>The type name of this error.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInnerError.StackTrace">
            <summary>Gets or sets the stack trace for this error.</summary>
            <returns>The stack trace for this error.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataInnerError.InnerError">
            <summary>Gets or sets the nested implementation specific debugging information. </summary>
            <returns>The nested implementation specific debugging information.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionStart">
            <summary>
            OData representation of a top-level collection.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionStart.serializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionStart.Name">
            <summary>Gets or sets the name of the collection (ATOM only).</summary>
            <returns>The name of the collection.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionStart.SerializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader">
            <summary>
            OData collection reader for the Verbose JSON format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader.verboseJsonInputContext">
            <summary>The input to read the payload from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader.verboseJsonCollectionDeserializer">
            <summary>The collection deserializer to use to read from the input.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonInputContext,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor.
            </summary>
            <param name="verboseJsonInputContext">The input to read the payload from.</param>
            <param name="expectedItemTypeReference">The expected type for the items in the collection.</param>
            <param name="listener">If not null, the reader will notify the implementer of the interface of relevant state changes in the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader.ReadAtStartImplementation">
            <summary>
            Implementation of the collection reader logic when in state 'Start'.
            </summary>
            <returns>true if more items can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  JsonNodeType.None:      assumes that the JSON reader has not been used yet when not reading a nested payload.
            Post-Condition: The reader is positioned on the first node of the first item or the EndArray node of an empty item array
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader.ReadAtCollectionStartImplementation">
            <summary>
            Implementation of the reader logic when in state 'CollectionStart'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  The first node of the first item in the collection or the EndArray node of the (empty) item array
                            NOTE: this method will throw if the node is not
                            JsonNodeType.EndArray:       for an empty item array of the collection
                            JsonNodeType.StartObject:    for a complex value as first item
                            JsonNodeType.PrimitiveValue: for a primitive value as first item
            Post-Condition: The reader is positioned on the first node of the second item or an EndArray node if there are no items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader.ReadAtValueImplementation">
            <summary>
            Implementation of the reader logic when in state 'Value'.
            </summary>
            <returns>true if more nodes can be read from the reader; otherwise false.</returns>
            <remarks>
            Pre-Condition:  The first node of the next item in the collection or the EndArray node of the item array
                            NOTE: this method will throw if the node is not
                            JsonNodeType.EndArray:       for the end of the item array of the collection
                            JsonNodeType.StartObject:    for a complex item
                            JsonNodeType.PrimitiveValue: for a primitive item
            Post-Condition: The reader is positioned on the first node of the next item or an EndArray node if there are no items in the collection
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader.ReadAtCollectionEndImplementation">
            <summary>
            Implementation of the reader logic when in state 'CollectionEnd'.
            </summary>
            <returns>false since no more nodes can be read from the reader after the collection ended.</returns>
            <remarks>
            Pre-Condition: JsonNodeType.EndArray        the end of the item array of the collection
            Post-Condition: JsonNodeType.EndOfInput     nothing else to read when not reading a nested payload
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionReader.IsResultsWrapperExpected">
            <summary>
            Set to true if collections are expected to have the 'results' wrapper.
            Collections are only expected to have a results wrapper if
            (a) the protocol version is >= 2 AND
            (b) we are reading a response
            NOTE: OIPI does not specify a format for >= v2 collections in requests; we thus use the v1 format and consequently do not expect a result wrapper.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionReaderState">
            <summary>
            Enumeration of all possible states of an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderState.Start">
            <summary>The reader is at the start; nothing has been read yet.</summary>
            <remarks>In this state, the Item property of the <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> returns null.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderState.CollectionStart">
            <summary>
            The reader has started reading and is reading the start element of the collection wrapper (if any).
            No items have been read.
            </summary>
            <remarks>
            In this state, the Item property of the <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> returns 
            an instance of <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderState.Value">
            <summary>
            The reader read an item from the collection.
            </summary>
            <remarks>In this state, the Item property of the <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> returns the read item (a primitive value, an ODataComplexValue or null).</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderState.CollectionEnd">
            <summary>
            The reader has finished reading and is reading the end element of the collection wrapper (if any).
            All items have been read.
            </summary>
            <remarks>
            In this state, the Item property of the <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> returns the same
            instance of <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> as in state CollectionStart.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderState.Exception">
            <summary>The reader has thrown an exception; nothing can be read from the reader anymore.</summary>
            <remarks>
            In this state, the Item property of the <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> returns null.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataCollectionReaderState.Completed">
            <summary>The reader has completed; nothing can be read anymore.</summary>
            <remarks>
            In this state, the Item property of the <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> returns null.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataErrorException">
            <summary>
            Exception type representing an in-stream error parsed when reading a payload.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataErrorException.state">
            <summary>The <see cref="T:Microsoft.Data.OData.ODataErrorException.ODataErrorExceptionSafeSerializationState"/> value containing <see cref="T:Microsoft.Data.OData.ODataError"/> instance representing the error
            read from the payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataErrorException.#ctor">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataErrorException"/> class with default values.</summary>
            <remarks>
            The Message property is initialized to a system-supplied message
            that describes the error. This message takes into account the
            current system culture. The Error property will be initialized with an empty <see cref="T:Microsoft.Data.OData.ODataError"/> instance.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataErrorException.#ctor(System.String)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataErrorException"/> class with an error message.</summary>
            <param name="message">The plain text error message for this exception.</param>
            <remarks>
            The Error property will be initialized with an empty <see cref="T:Microsoft.Data.OData.ODataError"/> instance.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataErrorException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataErrorException"/> class with an error message and an inner exception.</summary>
            <param name="message">The plain text error message for this exception.</param>
            <param name="innerException">The inner exception that is the cause of this exception to be thrown.</param>
            <remarks>
            The Error property will be initialized with an empty <see cref="T:Microsoft.Data.OData.ODataError"/> instance.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataErrorException.#ctor(Microsoft.Data.OData.ODataError)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataErrorException" /> class with an <see cref="T:Microsoft.Data.OData.ODataError" /> object.</summary>
            <param name="error">The <see cref="T:Microsoft.Data.OData.ODataError" /> instance representing the error read from the payload.</param>
            <remarks>
            The Message property is initialized to a system-supplied message
            that describes the error. This message takes into account the
            current system culture.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataErrorException.#ctor(System.String,Microsoft.Data.OData.ODataError)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataErrorException" /> class with an error message and an <see cref="T:Microsoft.Data.OData.ODataError" /> object.</summary>
            <param name="message">The plain text error message for this exception.</param>
            <param name="error">The <see cref="T:Microsoft.Data.OData.ODataError" /> instance representing the error read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataErrorException.#ctor(System.String,System.Exception,Microsoft.Data.OData.ODataError)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.Data.OData.ODataErrorException" /> class with an error message, an inner exception, and an <see cref="T:Microsoft.Data.OData.ODataError" /> object.</summary>
            <param name="message">The plain text error message for this exception.</param>
            <param name="innerException">The inner exception that is the cause of this exception to be thrown.</param>
            <param name="error">The <see cref="T:Microsoft.Data.OData.ODataError" /> instance representing the error read from the payload.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataErrorException.Error">
            <summary>Gets the <see cref="T:Microsoft.Data.OData.ODataError" /> instance representing the error read from the payload.</summary>
            <returns>The <see cref="T:Microsoft.Data.OData.ODataError" /> instance representing the error read from the payload.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataErrorException.ODataErrorExceptionSafeSerializationState">
            <summary>
            Implement the ISafeSerializationData interface to contain custom exception data in a partially trusted assembly.
            Use this interface in post-ORCAS to replace the Exception.GetObjectData method, which is marked with the SecurityCriticalAttribute.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataErrorException.ODataErrorExceptionSafeSerializationState.System#Runtime#Serialization#ISafeSerializationData#CompleteDeserialization(System.Object)">
            <summary>
            This method is called when deserialization of the exception is complete.
            </summary>
            <param name="obj">The exception object.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataErrorException.ODataErrorExceptionSafeSerializationState.ODataError">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Data.OData.ODataErrorException.ODataErrorExceptionSafeSerializationState.ODataError"/> object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataRawInputContext">
            <summary>
            Implementation of the OData input for RAW OData format (raw value and batch).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawInputContext.BufferSize">
            <summary>Use a buffer size of 4k that is read from the stream at a time.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawInputContext.readerPayloadKind">
            <summary>The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawInputContext.encoding">
            <summary>The encoding to use to read from the batch stream.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawInputContext.stream">
            <summary>The input stream to read the data from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRawInputContext.textReader">
            <summary>The text reader to read non-binary values from.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.#ctor(Microsoft.Data.OData.ODataFormat,System.IO.Stream,System.Text.Encoding,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.IODataUrlResolver,Microsoft.Data.OData.ODataPayloadKind)">
            <summary>Constructor.</summary>
            <param name="format">The format for this input context.</param>
            <param name="messageStream">The stream to read data from.</param>
            <param name="encoding">The encoding to use to read the input.</param>
            <param name="messageReaderSettings">Configuration settings of the OData reader.</param>
            <param name="version">The OData protocol version to be used for reading the payload.</param>
            <param name="readingResponse">true if reading a response message; otherwise false.</param>
            <param name="synchronous">true if the input should be read synchronously; false if it should be read asynchronously.</param>
            <param name="model">The model to use.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs read from the payload.</param>
            <param name="readerPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.CreateBatchReader(System.String)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataBatchReader"/>.
            </summary>
            <param name="batchBoundary">The batch boundary to use.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.CreateBatchReaderAsync(System.String)">
            <summary>
            Asynchronously create a <see cref="T:Microsoft.Data.OData.ODataBatchReader"/>.
            </summary>
            <param name="batchBoundary">The batch boundary to use.</param>
            <returns>Task which when completed returns the newly created <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.ReadValue(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Read a top-level value.
            </summary>
            <param name="expectedPrimitiveTypeReference">The expected primitive type for the value to be read; null if no expected type is available.</param>
            <returns>An <see cref="T:System.Object"/> representing the read value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.ReadValueAsync(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Asynchronously read a top-level value.
            </summary>
            <param name="expectedPrimitiveTypeReference">The expected type reference for the value to be read; null if no expected type is available.</param>
            <returns>Task which when completed returns an <see cref="T:System.Object"/> representing the read value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.DisposeImplementation">
            <summary>
            Disposes the input context.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.CreateBatchReaderImplementation(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.Data.OData.ODataBatchReader"/>.
            </summary>
            <param name="batchBoundary">The batch boundary to use.</param>
            <param name="synchronous">If the reader should be created for synchronous or asynchronous API.</param>
            <returns>The newly created <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.ReadValueImplementation(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Read a top-level value.
            </summary>
            <param name="expectedPrimitiveTypeReference">The expected primitive type for the value to be read; null if no expected type is available.</param>
            <returns>An <see cref="T:System.Object"/> representing the read value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.ReadBinaryValue">
            <summary>
            Read the binary value from the stream.
            </summary>
            <returns>A byte array containing all the data read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRawInputContext.ReadRawValue(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Reads the content of a text reader as string and, if <paramref name="expectedPrimitiveTypeReference"/> is specified and primitive type conversion
            is enabled, converts the string to the expected type.
            </summary>
            <param name="expectedPrimitiveTypeReference">The expected type of the value being read or null if no type conversion should be performed.</param>
            <returns>The raw value that was read from the text reader either as string or converted to the provided <paramref name="expectedPrimitiveTypeReference"/>.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataRawInputContext.Stream">
            <summary>
            The stream of the raw input context.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.PrimitiveConverter">
            <summary>
            Handles serialization and deserialization for a specified set of primitive types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.PrimitiveConverter.geographyTypeConverter">
            <summary>Instance of GeographyTypeConverter to register for all Geography types.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.PrimitiveConverter.geometryTypeConverter">
            <summary>Instance of GeographyTypeConverter to register for all Geography types.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.PrimitiveConverter.primitiveConverter">
            <summary>Set of type converters that implement their own conversion using IPrimitiveTypeConverter.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.PrimitiveConverter.spatialPrimitiveTypeConverters">
            <summary>Set of type converters that are known to this instance which convert values based on the ISpatial type.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.PrimitiveConverter.#ctor(System.Collections.Generic.KeyValuePair{System.Type,Microsoft.Data.OData.IPrimitiveTypeConverter}[])">
            <summary>
            Create a new instance of the converter.
            </summary>
            <param name="spatialPrimitiveTypeConverters">Set of type converters to register for the ISpatial based values.</param>
        </member>
        <member name="M:Microsoft.Data.OData.PrimitiveConverter.TryTokenizeFromXml(System.Xml.XmlReader,System.Type,System.Object@)">
            <summary>
            Try to create an object of type <paramref name="targetType"/> from the value in <paramref name="reader" />.
            </summary>
            <param name="reader">XmlReader to use to read the value.</param>
            <param name="targetType">Expected type of the value in the reader.</param>
            <param name="tokenizedPropertyValue">Object of type <paramref name="targetType"/>, null if no object could be created.</param>
            <returns>True if the value was converted to the specified type, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PrimitiveConverter.TryWriteAtom(System.Object,System.Xml.XmlWriter)">
            <summary>
            Try to write the XML representation of <paramref name="instance"/> to the specified <paramref name="writer"/>
            </summary>
            <param name="instance">Object to convert to XML representation.</param>
            <param name="writer">XmlWriter to use to write the converted value.</param>
            <returns>True if the value was written, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PrimitiveConverter.WriteVerboseJson(System.Object,Microsoft.Data.OData.Json.IJsonWriter,System.String,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Try to write the Verbose JSON representation of <paramref name="instance"/> using a registered primitive type converter
            </summary>
            <param name="instance">Object to convert to JSON representation.</param>
            <param name="jsonWriter">JsonWriter instance to write to.</param>
            <param name="typeName">Type name of the instance. If the type name is null, the type name is not written.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.PrimitiveConverter.WriteJsonLight(System.Object,Microsoft.Data.OData.Json.IJsonWriter,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Try to write the JSON Lite representation of <paramref name="instance"/> using a registered primitive type converter
            </summary>
            <param name="instance">Object to convert to JSON representation.</param>
            <param name="jsonWriter">JsonWriter instance to write to.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.PrimitiveConverter.TryWriteValue(System.Object,System.Action{Microsoft.Data.OData.IPrimitiveTypeConverter})">
            <summary>
            Tries to write the value of object instance using a registered primitive type converter.
            </summary>
            <param name="instance">Object to write.</param>
            <param name="writeMethod">Method to use when writing the value, if a registered converter is found for the type.</param>
            <returns>True if the value was written using a registered primitive type converter, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PrimitiveConverter.TryGetConverter(System.Type,Microsoft.Data.OData.IPrimitiveTypeConverter@)">
            <summary>
            Get the primitive type converter for the given type.
            </summary>
            <param name="type">Clr type whose primitive type converter needs to be returned.</param>
            <param name="primitiveTypeConverter">Converter for the given clr type.</param>
            <returns>True if a converter was found for the given type, otherwise returns false.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.PrimitiveConverter.Instance">
            <summary>PrimitiveConverter instance for use by the Atom and Json readers and writers.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ProjectedPropertiesAnnotation">
            <summary>
            Annotation which stores a list of projected properties for an entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ProjectedPropertiesAnnotation.StarSegment">
            <summary>The special '*' segment indicating that all properties are selected.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ProjectedPropertiesAnnotation.emptyProjectedPropertiesMarker">
            <summary>
            Cached projected properties annotation with no properties projected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ProjectedPropertiesAnnotation.allProjectedPropertiesMarker">
            <summary>
            Cached projected properties annotation with all properties projected.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ProjectedPropertiesAnnotation.projectedProperties">
            <summary>
            A hash set with the projected property names.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ProjectedPropertiesAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ProjectedPropertiesAnnotation" /> class.</summary>
            <param name="projectedPropertyNames">The enumeration of projected property names.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ProjectedPropertiesAnnotation.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ProjectedPropertiesAnnotation.IsPropertyProjected(System.String)">
            <summary>
            Determines if a property is in a list of projected properties.
            </summary>
            <param name="propertyName">The name of the property to lookup.</param>
            <returns>true if the property is projected; false otherwise.</returns>
            <remarks>Note that we allow null and empty property names here for the lookup just so that
            we don't have to validate before we skip them. If we would not skip them, the writing would fail later on anyway.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ProjectedPropertiesAnnotation.Add(System.String)">
            <summary>
            Adds the specified property name to the set of projected properties (if it is not already included).
            </summary>
            <param name="propertyName">The name of the property to include in the set of projected properties.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ProjectedPropertiesAnnotation.Remove(System.String)">
            <summary>
            Removes the specified property name from the set of projected properties.
            </summary>
            <param name="propertyName">The name of the property to remove from the set of projected properties.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ProjectedPropertiesAnnotation.EmptyProjectedPropertiesInstance">
            <summary>
            Projected properties annotation with no properties projected.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ProjectedPropertiesAnnotation.AllProjectedPropertiesInstance">
            <summary>
            Projected properties annotation with all properties projected.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ProjectedPropertiesAnnotation.ProjectedProperties">
            <summary>
            The set of projected property names.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ReaderUtils">
            <summary>
            Class with utility methods for reading OData content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderUtils.CreateNewEntry">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.ODataEntry"/> instance to return to the user.
            </summary>
            <returns>The newly created entry.</returns>
            <remarks>The method populates the Properties property with an empty read only enumeration.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderUtils.CheckForDuplicateNavigationLinkNameAndSetAssociationLink(Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ODataNavigationLink,System.Boolean,System.Nullable{System.Boolean})">
            <summary>Checks for duplicate navigation links and if there already is an association link with the same name
            sets the association link URL on the navigation link.</summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker for the current scope.</param>
            <param name="navigationLink">The navigation link to be checked.</param>
            <param name="isExpanded">true if the link is expanded, false otherwise.</param>
            <param name="isCollection">true if the navigation link is a collection, false if it's a singleton or null if we don't know.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderUtils.CheckForDuplicateAssociationLinkAndUpdateNavigationLink(Microsoft.Data.OData.DuplicatePropertyNamesChecker,Microsoft.Data.OData.ODataAssociationLink)">
            <summary>Checks that for duplicate association links and if there already is a navigation link with the same name
            sets the association link URL on that navigation link.</summary>
            <param name="duplicatePropertyNamesChecker">The duplicate property names checker for the current scope.</param>
            <param name="associationLink">The association link to be checked.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderUtils.GetOrCreateAssociationLinkForNavigationProperty(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Adds an association link to an entry.
            </summary>
            <param name="entry">The entry to get or create the association link for.</param>
            <param name="navigationProperty">The navigation property to get or create the association link for.</param>
            <returns>The association link that we either retrieved or created for the <paramref name="navigationProperty"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderUtils.HasFlag(Microsoft.Data.OData.ODataUndeclaredPropertyBehaviorKinds,Microsoft.Data.OData.ODataUndeclaredPropertyBehaviorKinds)">
            <summary>
            Returns true if the specified <paramref name="flag"/> is set in the <paramref name="undeclaredPropertyBehaviorKinds"/>.
            </summary>
            <param name="undeclaredPropertyBehaviorKinds">The value of the setting to test.</param>
            <param name="flag">The flag to test.</param>
            <returns>true if the flas is present, flase otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderUtils.GetExpectedPropertyName(Microsoft.Data.Edm.IEdmStructuralProperty)">
            <summary>
            Gets the expected property name from the specified property or function import.
            </summary>
            <param name="expectedProperty">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> to get the expected property name for (or null if none is specified).</param>
            <returns>The expected name of the property to be read from the payload.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ReaderValidationUtils">
            <summary>
            Class with utility methods for validating OData content when reading.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateMessageReaderSettings(Microsoft.Data.OData.ODataMessageReaderSettings,System.Boolean)">
            <summary>
            Validates that message reader settings are correct.
            </summary>
            <param name="messageReaderSettings">The message reader settings to validate.</param>
            <param name="readingResponse">true if the settings were specified when reading a response, false when reading a request.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Validates an entity reference link.
            </summary>
            <param name="link">The entity reference link to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateStreamReferenceProperty(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>
            Validates a stream reference property.
            </summary>
            <param name="streamProperty">The stream property to check.</param>
            <param name="structuredType">The owning type of the stream property or null if no metadata is available.</param>
            <param name="streamEdmProperty">The stream property defined by the model.</param>
            <param name="messageReaderSettings">The message reader settings being used.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateNullValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataMessageReaderSettings,System.Boolean,Microsoft.Data.OData.ODataVersion,System.String)">
            <summary>
            Validate a null value.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> used to read the payload.</param>
            <param name="expectedTypeReference">The expected type of the null value.</param>
            <param name="messageReaderSettings">The message reader settings.</param>
            <param name="validateNullValue">true to validate the the null value; false to only check whether the type is supported.</param>
            <param name="version">The version used to read the payload.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataEntry"/> to ensure all required information is specified and valid.
            </summary>
            <param name="entry">The entry to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.FindDefinedProperty(System.String,Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Finds a defined property from the model if one is available.
            The structured type can be null if no metadata is available.
            </summary>
            <param name="propertyName">The name of the property to find.</param>
            <param name="owningStructuredType">The owning type of the property with name <paramref name="propertyName"/> 
            or null if no metadata is available.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> instance representing the property with name <paramref name="propertyName"/> 
            or null if no metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateValuePropertyDefined(System.String,Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.OData.ODataMessageReaderSettings,System.Boolean@)">
            <summary>
            Validates that a property with the specified name exists on a given structured type.
            The structured type can be null if no metadata is available.
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="owningStructuredType">The owning type of the property with name <paramref name="propertyName"/> 
            or null if no metadata is available.</param>
            <param name="messageReaderSettings">The message reader settings being used.</param>
            <param name="ignoreProperty">true if the property should be completely ignored and not parsed/reported, in this case the return value is null.
            false if the property should be parsed and reported as usual.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> instance representing the property with name <paramref name="propertyName"/> 
            or null if no metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateExpectedPropertyName(System.String,System.String)">
            <summary>
            Validates that the expected property name matches the property name read from the payload.
            </summary>
            <param name="expectedPropertyName">The expected property name.</param>
            <param name="payloadPropertyName">The property name read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateLinkPropertyDefined(System.String,Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>
            Validates that a property with the specified name exists on a given structured type.
            The structured type can be null if no metadata is available.
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="owningStructuredType">The owning type of the property with name <paramref name="propertyName"/> 
            or null if no metadata is available.</param>
            <param name="messageReaderSettings">The message reader settings being used.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> instance representing the property with name <paramref name="propertyName"/> 
            or null if no metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateNavigationPropertyDefined(System.String,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>
            Validates that a navigation property with the specified name exists on a given entity type.
            The entity type can be null if no metadata is available.
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="owningEntityType">The owning entity type or null if no metadata is available.</param>
            <param name="messageReaderSettings">The message reader settings being used.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmNavigationProperty"/> instance representing the navigation property with name <paramref name="propertyName"/>
            or null if no metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.GetPrimitiveTypeConversionException(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Exception)">
            <summary>
            Creates an exception used when primitive type conversion fails.
            </summary>
            <param name="targetTypeReference">The target type reference to which the conversion failed.</param>
            <param name="innerException">Possible inner exception with more information about the failure.</param>
            <returns>The exception object to throw.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ResolvePayloadTypeName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmTypeReference,System.String,Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.EdmTypeKind@)">
            <summary>
            Resolved the payload type name to the type.
            </summary>
            <param name="model">The model to use for the resolution.</param>
            <param name="expectedTypeReference">The expected type reference, or null if no expected type is available.</param>
            <param name="payloadTypeName">The payload type name to resolve.</param>
            <param name="expectedTypeKind">The default payload type kind, this is used when the resolution is not possible,
            but the type name is not empty. (Should be either Complex or Entity).</param>
            <param name="readerBehavior">Reader behavior to use for compatibility.</param>
            <param name="version">The version of the payload being read.</param>
            <param name="payloadTypeKind">This is set to the detected payload type kind, or None if the type was not specified.</param>
            <returns>The resolved type. This may be null if either no user-specified model is specified, or the type name is not recognized by the model.</returns>
            <remarks>The method detects the payload kind even if the model does not recognize the type. It figures out primitive and collection types always,
            and uses the <paramref name="expectedTypeKind"/> for the rest.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ResolvePayloadTypeNameAndComputeTargetType(Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmTypeReference,System.String,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion,System.Func{Microsoft.Data.Edm.EdmTypeKind},Microsoft.Data.Edm.EdmTypeKind@,Microsoft.Data.OData.SerializationTypeNameAnnotation@)">
            <summary>
            Resolves and validates the payload type against the expected type and returns the target type.
            </summary>
            <param name="expectedTypeKind">The expected type kind for the value.</param>
            <param name="defaultPrimitivePayloadType">The default payload type if none is specified in the payload;
            for ATOM this is Edm.String, for JSON it is null since there is no payload type name for primitive types in the payload.</param>
            <param name="expectedTypeReference">The expected type reference, or null if no expected type is available.</param>
            <param name="payloadTypeName">The payload type name, or null if no payload type was specified.</param>
            <param name="model">The model to use.</param>
            <param name="messageReaderSettings">The message reader settings to use.</param>
            <param name="version">The version of the payload being read.</param>
            <param name="typeKindFromPayloadFunc">A func to compute the type kind from the payload shape if it could not be determined from the expected type or the payload type.</param>
            <param name="targetTypeKind">The target type kind to be used to read the payload.</param>
            <param name="serializationTypeNameAnnotation">Potentially non-null instance of an annotation to put on the value reported from the reader.</param>
            <returns>
            The target type reference to use for parsing the value.
            If there is no user specified model, this will return null.
            If there is a user specified model, this method never returns null.
            </returns>
            <remarks>
            This method cannot be used for primitive type resolution. Primitive type resolution is format dependent and format specific methods should be used instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ResolveAndValidatePrimitiveTargetType(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.Edm.IEdmType,System.String,Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Resolves the primitive payload type versus the expected type and validates that such combination is allowed.
            </summary>
            <param name="expectedTypeReference">The expected type reference, if any.</param>
            <param name="payloadTypeKind">The kind of the payload type, or None if the detection was not possible.</param>
            <param name="payloadType">The resolved payload type, or null if no payload type was specified.</param>
            <param name="payloadTypeName">The name of the payload type, or null if no payload type was specified.</param>
            <param name="defaultPayloadType">The default payload type if none is specified in the payload;
            for ATOM this is Edm.String, for JSON it is null since there is no payload type name for primitive types in the payload.</param>
            <param name="model">The model to use.</param>
            <param name="messageReaderSettings">The message reader settings to use.</param>
            <param name="version">The version of the payload being read.</param>
            <returns>The target type reference to use for parsing the value. This method never returns null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ResolveAndValidateNonPrimitiveTargetType(Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.Edm.IEdmType,System.String,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Resolves the payload type versus the expected type and validates that such combination is allowed.
            </summary>
            <param name="expectedTypeKind">The expected type kind for the value.</param>
            <param name="expectedTypeReference">The expected type reference, or null if no expected type is available.</param>
            <param name="payloadTypeKind">The payload type kind, this may be the one from the type itself, or one detected without resolving the type.</param>
            <param name="payloadType">The payload type, or null if the payload type was not specified, or it didn't resolve against the model.</param>
            <param name="payloadTypeName">The payload type name, or null if no payload type was specified.</param>
            <param name="model">The model to use.</param>
            <param name="messageReaderSettings">The message reader settings to use.</param>
            <param name="version">The version of the payload being read.</param>
            <returns>
            The target type reference to use for parsing the value.
            If there is no user specified model, this will return null.
            If there is a user specified model, this method never returns null.
            </returns>
            <remarks>
            This method cannot be used for primitive type resolution. Primitive type resolution is format dependent and format specific methods should be used instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateEncodingSupportedInBatch(System.Text.Encoding)">
            <summary>
            Validates that the specified encoding is supported in batch/changeset envelopes (headers, boundaries, preamble, etc.).
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateTypeSupported(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Validates whether the specified type reference is supported in the current version.
            </summary>
            <param name="typeReference">The type reference to check.</param>
            <param name="version">The version currently used.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateFeedOrEntryMetadataUri(Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult,Microsoft.Data.OData.ODataReaderCore.Scope)">
            <summary>
            Validates that the parsed metadata URI from the payload is consistent with the expected
            entity set and entity type when reading a feed or entry payload. This method updates 
            the <paramref name="scope"/> if the metadata URI specifies more derived information.
            </summary>
            <param name="metadataUriParseResult">The parse result of the metadata URI from the payload.</param>
            <param name="scope">The top-level scope representing the reader state.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateEntityReferenceLinkMetadataUri(Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Validates that the parsed metadata URI from the payload is consistent with the expected
            navigation property.
            </summary>
            <param name="metadataUriParseResult">The parse result of the metadata URI from the payload.</param>
            <param name="navigationProperty">The expected navigation property.</param>
            <remarks>This method is used to validate metadata URIs for both singleton entity reference links
            and collections of entity reference links.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateCollectionMetadataUriAndGetPayloadItemTypeReference(Microsoft.Data.OData.JsonLight.ODataJsonLightMetadataUriParseResult,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Validates that the parsed metadata URI from the payload is consistent with the expected
            collection item type when reading collection payloads.
            </summary>
            <param name="metadataUriParseResult">The parse result of the metadata URI from the payload.</param>
            <param name="expectedItemTypeReference">The expected item type of the collection items.</param>
            <returns>The actual item type of the collection items.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateOperationProperty(System.Object,System.String,System.String,System.String)">
            <summary>
            Validates that the property in an operation (an action or a function) is valid.
            </summary>
            <param name="propertyValue">The value of the property.</param>
            <param name="propertyName">The name of the property (used for error reporting).</param>
            <param name="metadata">The metadata value for the operation (used for error reporting).</param>
            <param name="operationsHeader">The header for the operation, either 'actions' or 'functions'.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ResolveAndValidateTargetTypeWithNoExpectedType(Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Resolves the payload type if there's no expected type.
            </summary>
            <param name="expectedTypeKind">The expected type kind for the value.</param>
            <param name="payloadType">The payload type, or null if the payload type was not specified, or it didn't resolve against the model.</param>
            <returns>The target type reference to use for parsing the value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ResolveAndValidateTargetTypeStrictValidationDisabled(Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Resolves the payload type versus the expected type and validates that such combination is allowed when the strict validation is disabled.
            </summary>
            <param name="expectedTypeKind">The expected type kind for the value.</param>
            <param name="expectedTypeReference">The expected type reference, or null if no expected type is available.</param>
            <param name="payloadType">The payload type, or null if the payload type was not specified, or it didn't resolve against the model.</param>
            <returns>The target type reference to use for parsing the value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ResolveAndValidateTargetTypeStrictValidationEnabled(Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Resolves the payload type versus the expected type and validates that such combination is allowed when strict validation is enabled.
            </summary>
            <param name="expectedTypeKind">The expected type kind for the value.</param>
            <param name="expectedTypeReference">The expected type reference, or null if no expected type is available.</param>
            <param name="payloadType">The payload type, or null if the payload type was not specified, or it didn't resolve against the model.</param>
            <returns>The target type reference to use for parsing the value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.VerifyPayloadTypeDefined(System.String,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Verifies that payload type is defined if the payload type name is present.
            </summary>
            <param name="payloadTypeName">The type name from the payload.</param>
            <param name="payloadType">The resolved type from the model.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.VerifyComplexType(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmType,System.Boolean)">
            <summary>
            Verifies that complex type is valid against the expected type.
            </summary>
            <param name="expectedTypeReference">The expected type reference.</param>
            <param name="payloadType">The payload type.</param>
            <param name="failIfNotRelated">true if the method should fail if the <paramref name="payloadType"/> doesn't match the <paramref name="expectedTypeReference"/>;
            false if the method should just return in that case.</param>
            <remarks>
            The method verifies that the <paramref name="payloadType"/> is not a derived complex type of the <paramref name="expectedTypeReference"/>
            and always fails in that case.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.VerifyCollectionComplexItemType(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Verifies that in case of collection types, the item type is valid.
            </summary>
            <param name="expectedTypeReference">The expected type reference.</param>
            <param name="payloadType">The payload type.</param>
            <remarks>
            This method verifies that item type is not a derived complex type, we want to explicitly disallow that case for possible future enablement.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.CreateSerializationTypeNameAnnotation(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Conditionally creates the annotation to put on the read value in order to retain the type name from the payload.
            </summary>
            <param name="payloadTypeName">The payload type name.</param>
            <param name="targetTypeReference">The type reference into which we're going to parse.</param>
            <returns>The annotation to report to the reader for adding on the read value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ComputeTargetTypeKind(Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,System.String,Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.OData.ODataMessageReaderSettings,System.Func{Microsoft.Data.Edm.EdmTypeKind})">
            <summary>
            Computes the type kind to be used to read the payload from the expected type, the payload type and
            possibly the payload shape.
            </summary>
            <param name="expectedTypeReference">The expected type reference used to read the payload value.</param>
            <param name="forEntityValue">true when resolving a type name for an entity value; false for a non-entity value.</param>
            <param name="payloadTypeName">The type name read from the payload.</param>
            <param name="payloadTypeKind">The type kind of the payload value.</param>
            <param name="messageReaderSettings">The message reader settings.</param>
            <param name="typeKindFromPayloadFunc">A func to determine the type kind of the value by analyzing the payload data.</param>
            <returns>The type kind to be used to read the payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.GetExpectedTypeKind(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>
            Gets the expected type kind based on the given <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/>, or EdmTypeKind.None if no specific type should be expected.
            </summary>
            <param name="expectedTypeReference">The expected type reference.</param>
            <param name="messageReaderSettings">The message reader settings.</param>
            <returns>The expected type kind based on the settings and type reference, or EdmTypeKind.None if no specific type should be expected.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ShouldValidatePayloadTypeKind(Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.EdmTypeKind)">
            <summary>
            Determines if the expect value type and the current settings mandate us to validate type kinds of payload values.
            </summary>
            <param name="messageReaderSettings">The message reader settings.</param>
            <param name="expectedValueTypeReference">The expected type reference for the value infered from the model.</param>
            <param name="payloadTypeKind">The type kind of the payload value.</param>
            <returns>true if the payload value kind must be verified, false otherwise.</returns>
            <remarks>This method deals with the strict versus lax behavior, as well as with the behavior when primitive type conversion is disabled.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ValidateNullValueAllowed(Microsoft.Data.Edm.IEdmTypeReference,System.Boolean,Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Validates that the specified <paramref name="expectedValueTypeReference"/> allows null values.
            </summary>
            <param name="expectedValueTypeReference">The expected type for the value, or null if no such type is available.</param>
            <param name="validateNullValue">true to validate the null value; otherwise false.</param>
            <param name="model">The model to use to get the data service version.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable (used for error reporting).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReaderValidationUtils.ThrowNullValueForNonNullableTypeException(Microsoft.Data.Edm.IEdmTypeReference,System.String)">
            <summary>
            Create and throw exception that a null value was found when the expected type is non-nullable.
            </summary>
            <param name="expectedValueTypeReference">The expected type for this value.</param>
            <param name="propertyName">The name of the property whose value is being read, if applicable.</param>
        </member>
        <member name="T:Microsoft.Data.OData.ReadOnlyEnumerable">
            <summary>
            Implementation of IEnumerable which is based on another IEnumerable
            but only exposes readonly access to that collection. This class doesn't implement
            any other public interfaces or public API unlike most other IEnumerable implementations
            which also implement other public interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ReadOnlyEnumerable.sourceEnumerable">
            <summary>
            The IEnumerable to wrap.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerable.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceEnumerable">The enumerable to wrap.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator to iterate through the items.
            </summary>
            <returns>The enumerator object to use.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ReadOnlyEnumerable`1">
            <summary>
            Implementation of IEnumerable&gt;T&lt; which is based on a List&gt;T&lt;
            but only exposes readonly access to that collection. This class doesn't implement
            any other public interfaces or public API unlike most other IEnumerable implementations
            which also implement other public interfaces.
            </summary>
            <typeparam name="T">The type of a single item in the enumeration.</typeparam>
        </member>
        <member name="F:Microsoft.Data.OData.ReadOnlyEnumerable`1.sourceList">
            <summary>
            The IEnumerable to wrap.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ReadOnlyEnumerable`1.EmptyInstance">
            <summary>
            The empty instance of ReadOnlyEnumerableOfT.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerable`1.#ctor">
            <summary>
            Constructor which initializes the enumerable with an empty list storage.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerable`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="sourceList">The list of values to wrap.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns the enumerator to iterate through the items.
            </summary>
            <returns>The enumerator object to use.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerable`1.Empty">
            <summary>
            Gets the empty instance of ReadOnlyEnumerableOfT.
            </summary>
            <returns>Returns the empty instance of ReadOnlyEnumerableOfT.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReadOnlyEnumerable`1.AddToSourceList(`0)">
            <summary>
            This internal method adds <paramref name="itemToAdd"/> to the wrapped source list. From the public's perspective, this enumerable is still readonly.
            </summary>
            <param name="itemToAdd">Item to add to the source list.</param>
        </member>
        <member name="T:Microsoft.Data.OData.SerializationTypeNameAnnotation">
            <summary>
            Annotation which stores the type name to serialize.
            </summary>
            <remarks>
            This annotation will be recognized on ODataEntry, ODataComplexValue, ODataCollectionValue and ODataPrimitiveValue.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.SerializationTypeNameAnnotation.TypeName">
            <summary> Gets or sets the type name to serialize, for the annotated item. </summary>
            <returns>The type name to serialize, for the annotated item.</returns>
            <remarks>
            If this property is null, no type name will be written.
            If this property is non-null, the property value will be used as the type name written to the payload.
            If this annotation is present, it always overrides the type name specified on the annotated item.
            If this annotation is not present, the value of the TypeName property on the ODataEntry, ODataComplexValue or ODataCollectionValue
            is used as the type name in the payload.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.UriUtilsCommon">
            <summary>
            Uri utility methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.UriUtilsCommon.UriToString(System.Uri)">
            <summary>
            Returns the unescaped string representation of the Uri; if the Uri is absolute returns the absolute Uri otherwise the original string.
            </summary>
            <param name="uri">The Uri to convert to a string.</param>
            <returns>For absolute Uris the string representation of the absolute Uri; otherwise the Uri's original string.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.WriterValidationUtils">
            <summary>
            Class with utility methods for validating OData content when writing.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateMessageWriterSettings(Microsoft.Data.OData.ODataMessageWriterSettings,System.Boolean)">
            <summary>
            Validates that message writer settings are correct.
            </summary>
            <param name="messageWriterSettings">The message writer settings to validate.</param>
            <param name="writingResponse">True if we are writing a response.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidatePropertyNotNull(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataProperty"/> for not being null.
            </summary>
            <param name="property">The property to validate for not being null.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidatePropertyName(System.String)">
            <summary>
            Validates a property name to ensure all required information is specified.
            </summary>
            <param name="propertyName">The property name to validate..</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidatePropertyDefined(System.String,Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Validates that a property with the specified name exists on a given structured type.
            The structured type can be null if no metadata is available.
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="owningStructuredType">The owning type of the property with name <paramref name="propertyName"/> 
            or null if no metadata is available.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> instance representing the property with name <paramref name="propertyName"/> 
            or null if no metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateNavigationPropertyDefined(System.String,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Validates that a navigation property with the specified name exists on a given entity type.
            The entity type can be null if no metadata is available.
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="owningEntityType">The owning entity type or null if no metadata is available.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> instance representing the navigation property with name <paramref name="propertyName"/>
            or null if no metadata is available.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateEntryInExpandedLink(Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Validates an entry in an expanded link to make sure the entity types match.
            </summary>
            <param name="entryEntityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> of the entry.</param>
            <param name="parentNavigationPropertyType">The type of the parent navigation property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateAssociationLink(Microsoft.Data.OData.ODataAssociationLink,Microsoft.Data.OData.ODataVersion,System.Boolean)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataAssociationLink"/> to ensure all required information is specified and valid.
            </summary>
            <param name="associationLink">The association link to validate.</param>
            <param name="version">The version of the OData protocol used for checking.</param>
            <param name="writingResponse">true if we are writing a response; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateCanWriteOperation(Microsoft.Data.OData.ODataOperation,System.Boolean)">
            <summary>
            Validates that an <see cref="T:Microsoft.Data.OData.ODataOperation"/> can be written.
            </summary>
            <param name="operation">The operation (an action or a function) to validate.</param>
            <param name="writingResponse">true if writing a response; otherwise false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateFeedAtEnd(Microsoft.Data.OData.ODataFeed,System.Boolean,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataFeed"/> to ensure all required information is specified and valid on the WriteEnd call.
            </summary>
            <param name="feed">The feed to validate.</param>
            <param name="writingRequest">Flag indicating whether the feed is written as part of a request or a response.</param>
            <param name="version">The version of the OData protocol used for checking.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateEntryAtStart(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataEntry"/> to ensure all required information is specified and valid on WriteStart call.
            </summary>
            <param name="entry">The entry to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateEntryAtEnd(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataEntry"/> to ensure all required information is specified and valid on WriteEnd call.
            </summary>
            <param name="entry">The entry to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateStreamReferenceValue(Microsoft.Data.OData.ODataStreamReferenceValue,System.Boolean)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataStreamReferenceValue"/> to ensure all required information is specified and valid.
            </summary>
            <param name="streamReference">The stream reference to validate.</param>
            <param name="isDefaultStream">true if <paramref name="streamReference"/> is the default stream for an entity; false if it is a named stream property value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateStreamReferenceProperty(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.OData.ODataVersion,System.Boolean)">
            <summary>
            Validates a named stream property to ensure it's not null and it's name if correct.
            </summary>
            <param name="streamProperty">The stream reference property to validate.</param>
            <param name="edmProperty">Property metadata to validate against.</param>
            <param name="version">The version of the OData protocol used for checking.</param>
            <param name="writingResponse">true when writing a response; otherwise false.</param>
            <remarks>This does NOT validate the value of the stream property, just the property itself.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateEntityReferenceLinkNotNull(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Validates that the specified <paramref name="entityReferenceLink"/> is not null.
            </summary>
            <param name="entityReferenceLink">The entity reference link to validate.</param>
            <remarks>This should be called only for entity reference links inside the ODataEntityReferenceLinks.Links collection.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Validates an entity reference link instance.
            </summary>
            <param name="entityReferenceLink">The entity reference link to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateNavigationLink(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.Edm.IEdmEntityType,System.Nullable{Microsoft.Data.OData.ODataPayloadKind})">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataNavigationLink"/> to ensure all required information is specified and valid.
            </summary>
            <param name="navigationLink">The navigation link to validate.</param>
            <param name="declaringEntityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> declaring the navigation property; or null if metadata is not available.</param>
            <param name="expandedPayloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> of the expanded content of this navigation link or null for deferred links.</param>
            <returns>The type of the navigation property for this navigation link; or null if no <paramref name="declaringEntityType"/> was specified.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateNavigationLinkUrlPresent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Validates that the specified navigation link has a Url.
            </summary>
            <param name="navigationLink">The navigation link to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateNavigationLinkHasCardinality(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Validates that the sepcified navigation link has cardinality, that is it has the IsCollection value set.
            </summary>
            <param name="navigationLink">The navigation link to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateNullPropertyValue(Microsoft.Data.Edm.IEdmTypeReference,System.String,Microsoft.Data.OData.ODataWriterBehavior,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Validates that the expected property allows null value.
            </summary>
            <param name="expectedPropertyTypeReference">The expected property type or null if we don't have any.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="writerBehavior">The <see cref="T:Microsoft.Data.OData.ODataWriterBehavior"/> instance controlling the behavior of the writer.</param>
            <param name="model">The model to use to get the data service version.</param>
        </member>
        <member name="M:Microsoft.Data.OData.WriterValidationUtils.ValidateEntryId(System.String)">
            <summary>
            Validates the value of the Id property on an entry.
            </summary>
            <param name="id">The id value for an entry to validate.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonReaderExtensions">
            <summary>
            Extension methods for the JSON reader.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadStartObject(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is a StartObject node.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadEndObject(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is an EndObject node.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadStartArray(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is an StartArray node.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadEndArray(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is an EndArray node.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.GetPropertyName(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Verifies that the current node is a property node and returns the property name.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <returns>The property name of the current property node.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadPropertyName(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/>, verifies that it is a Property node and returns the property name.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <returns>The property name of the property node read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadPrimitiveValue(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is a PrimitiveValue node.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <returns>The primitive value read from the reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadStringValue(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is a PrimitiveValue node of type string.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <returns>The string value read from the reader; throws an exception if no string value could be read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadStringValue(Microsoft.Data.OData.Json.JsonReader,System.String)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is a PrimitiveValue node of type string.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <param name="propertyName">The name of the property for which to read the string; used in error messages only.</param>
            <returns>The string value read from the reader; throws an exception if no string value could be read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadDoubleValue(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is a PrimitiveValue node of type double.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <returns>The double value read from the reader; throws an exception if no double value could be read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.SkipValue(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Skips over a JSON value (primitive, object or array).
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <remarks>
            Pre-Condition: JsonNodeType.PrimitiveValue, JsonNodeType.StartArray or JsonNodeType.StartObject
            Post-Condition: JsonNodeType.PrimitiveValue, JsonNodeType.EndArray or JsonNodeType.EndObject
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadNext(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Reads the next node. Use this instead of the direct call to Read since this asserts that there actually is a next node.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <returns>The node type of the node that reader is positioned on after reading.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.IsOnValueNode(Microsoft.Data.OData.Json.JsonReader)">
            <summary>
            Determines if the reader is on a value node.
            </summary>
            <param name="jsonReader">The reader to inspect.</param>
            <returns>true if the reader is on PrimitiveValue, StartObject or StartArray node, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.AssertNotBuffering(Microsoft.Data.OData.Json.BufferingJsonReader)">
            <summary>
            Asserts that the reader is not buffer.
            </summary>
            <param name="bufferedJsonReader">The <see cref="T:Microsoft.Data.OData.Json.BufferingJsonReader"/> to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.AssertBuffering(Microsoft.Data.OData.Json.BufferingJsonReader)">
            <summary>
            Asserts that the reader is buffer.
            </summary>
            <param name="bufferedJsonReader">The <see cref="T:Microsoft.Data.OData.Json.BufferingJsonReader"/> to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.CreateException(System.String)">
            <summary>
            Creates an exception instance that is appropriate for the current library being built.
            Allows the code in this class to be shared between ODataLib and the common spatial library.
            </summary>
            <param name="exceptionMessage">String to use for the exception messag.</param>
            <returns>Exception to be thrown.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ReadNext(Microsoft.Data.OData.Json.JsonReader,Microsoft.Data.OData.Json.JsonNodeType)">
            <summary>
            Reads the next node from the <paramref name="jsonReader"/> and verifies that it is of the expected node type.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to read from.</param>
            <param name="expectedNodeType">The expected <see cref="T:Microsoft.Data.OData.Json.JsonNodeType"/> of the read node.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonReaderExtensions.ValidateNodeType(Microsoft.Data.OData.Json.JsonReader,Microsoft.Data.OData.Json.JsonNodeType)">
            <summary>
            Validates that the reader is positioned on the specified node type.
            </summary>
            <param name="jsonReader">The <see cref="T:Microsoft.Data.OData.Json.JsonReader"/> to use.</param>
            <param name="expectedNodeType">The expected node type.</param>
        </member>
        <member name="T:Microsoft.Data.OData.ODataReaderState">
            <summary>
            Enumeration of all possible states of an <see cref="T:Microsoft.Data.OData.ODataReader"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.Start">
            <summary>The reader is at the start; nothing has been read yet.</summary>
            <remarks>In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns null.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.FeedStart">
            <summary>The start of a feed has been read.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns 
            an <see cref="T:Microsoft.Data.OData.ODataFeed"/> but no properties may be filled in until the FeedEnd state is reached.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.FeedEnd">
            <summary>The end of a feed has been read.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns 
            an <see cref="T:Microsoft.Data.OData.ODataFeed"/> with all properties filled in.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.EntryStart">
            <summary>The start of an entry has been read.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns 
            an <see cref="T:Microsoft.Data.OData.ODataEntry"/> but no properties may be filled in until the EntryEnd state is reached.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.EntryEnd">
            <summary>The end of an entry has been read.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns 
            an <see cref="T:Microsoft.Data.OData.ODataEntry"/> with all properties filled in.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.NavigationLinkStart">
            <summary>The start of a navigation link has been read.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns 
            an <see cref="T:Microsoft.Data.OData.ODataNavigationLink"/> but no properties may be filled in until the LinkEnd state is reached.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.NavigationLinkEnd">
            <summary>The end of a navigation link has been read.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns 
            an <see cref="T:Microsoft.Data.OData.ODataNavigationLink"/> with all properties filled in.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.EntityReferenceLink">
            <summary>An entity reference link was read.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns
            an <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/> which is fully populated.
            Note that there's no End state for this item.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.Exception">
            <summary>The reader has thrown an exception; nothing can be read from the reader anymore.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns null.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataReaderState.Completed">
            <summary>The reader has completed; nothing can be read anymore.</summary>
            <remarks>
            In this state the Item property of the <see cref="T:Microsoft.Data.OData.ODataReader"/> returns null.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchReader">
            <summary>
            Class for reading OData batch messages; also verifies the proper sequence of read calls on the reader.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.IODataBatchOperationListener">
            <summary>
            An interface that allows creators of a <see cref="T:Microsoft.Data.OData.ODataBatchOperationStream"/> to listen for status changes
            of the operation stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataBatchOperationListener.BatchOperationContentStreamRequested">
            <summary>
            This method notifies the implementer of this interface that the content stream for a batch operation has been requested.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataBatchOperationListener.BatchOperationContentStreamRequestedAsync">
            <summary>
            This method notifies the implementer of this interface that the content stream for a batch operation has been requested.
            </summary>
            <returns>
            A task representing any async operation that is running in reaction to the 
            status change (or null if no such action is required).
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.IODataBatchOperationListener.BatchOperationContentStreamDisposed">
            <summary>
            This method notifies the implementer of this interface that the content stream of a batch operation has been disposed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.inputContext">
            <summary>The input context to read the content from.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.batchStream">
            <summary>The batch stream used by the batch reader to devide a batch payload into parts.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.synchronous">
            <summary>True if the writer was created for synchronous operation; false for asynchronous.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.urlResolver">
            <summary>The batch-specific URL resolver that stores the content IDs found in a changeset and supports resolving cross-referencing URLs.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.batchReaderState">
            <summary>The current state of the batch reader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.currentBatchSize">
            <summary>The current size of the batch message, i.e., how many query operations and changesets have been read.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.currentChangeSetSize">
            <summary>The current size of the active changeset, i.e., how many operations have been read for the changeset.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.operationState">
            <summary>An enumeration tracking the state of the current batch operation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.contentIdToAddOnNextRead">
            <summary>The value of the content ID header of the current part.</summary>
            <remarks>
            The content ID header of the current part should only be visible to subsequent parts
            so we can only add it to the URL resolver once we are done with the current part.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.#ctor(Microsoft.Data.OData.ODataRawInputContext,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="inputContext">The input context to read the content from.</param>
            <param name="batchBoundary">The boundary string for the batch structure itself.</param>
            <param name="batchEncoding">The encoding to use to read from the batch stream.</param>
            <param name="synchronous">true if the reader is created for synchronous operation; false for asynchronous.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.Read">
            <summary> Reads the next part from the batch message payload. </summary>
            <returns>True if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.ReadAsync">
            <summary>Asynchronously reads the next part from the batch message payload.</summary>
            <returns>A task that when completed indicates whether more items were read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.CreateOperationRequestMessage">
            <summary>Returns an <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage" /> for reading the content of a batch operation.</summary>
            <returns>A request message for reading the content of a batch operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.CreateOperationRequestMessageAsync">
            <summary>Asynchronously returns an <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage" /> for reading the content of a batch operation.</summary>
            <returns>A task that when completed returns a request message for reading the content of a batch operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.CreateOperationResponseMessage">
            <summary>Returns an <see cref="T:Microsoft.Data.OData.ODataBatchOperationResponseMessage" /> for reading the content of a batch operation.</summary>
            <returns>A response message for reading the content of a batch operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.CreateOperationResponseMessageAsync">
            <summary>Asynchronously returns an <see cref="T:Microsoft.Data.OData.ODataBatchOperationResponseMessage" /> for reading the content of a batch operation.</summary>
            <returns>A task that when completed returns a response message for reading the content of a batch operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.Microsoft#Data#OData#IODataBatchOperationListener#BatchOperationContentStreamRequested">
            <summary>
            This method is called to notify that the content stream for a batch operation has been requested.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.Microsoft#Data#OData#IODataBatchOperationListener#BatchOperationContentStreamRequestedAsync">
            <summary>
            This method is called to notify that the content stream for a batch operation has been requested.
            </summary>
            <returns>
            A task representing any action that is running as part of the status change of the reader; 
            null if no such action exists.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.Microsoft#Data#OData#IODataBatchOperationListener#BatchOperationContentStreamDisposed">
            <summary>
            This method is called to notify that the content stream of a batch operation has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.GetEndBoundaryState">
            <summary>
            Returns the next state of the batch reader after an end boundary has been found.
            </summary>
            <returns>The next state of the batch reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.ReadSynchronously">
            <summary>
            Reads the next part from the batch message payload.
            </summary>
            <returns>true if more information was read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.ReadAsynchronously">
            <summary>
            Asynchronously reads the next part from the batch message payload.
            </summary>
            <returns>A task that when completed indicates whether more information was read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.ReadImplementation">
            <summary>
            Continues reading from the batch message payload.
            </summary>
            <returns>true if more items were read; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.SkipToNextPartAndReadHeaders">
            <summary>
            Skips all data in the stream until the next part is detected; then reads the part's request/response line and headers.
            </summary>
            <returns>The next state of the batch reader after skipping to the next part and reading the part's beginning.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.CreateOperationRequestMessageImplementation">
            <summary>
            Returns the cached <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage"/> for reading the content of an operation 
            in a batch request.
            </summary>
            <returns>The message that can be used to read the content of the batch request operation from.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.CreateOperationResponseMessageImplementation">
            <summary>
            Returns the cached <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage"/> for reading the content of an operation 
            in a batch request.
            </summary>
            <returns>The message that can be used to read the content of the batch request operation from.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.ParseRequestLine(System.String,System.String@,System.Uri@)">
            <summary>
            Parses the request line of a batch operation request.
            </summary>
            <param name="requestLine">The request line as a string.</param>
            <param name="httpMethod">The parsed HTTP method of the request.</param>
            <param name="requestUri">The parsed <see cref="T:System.Uri"/> of the request.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.ParseResponseLine(System.String)">
            <summary>
            Parses the response line of a batch operation response.
            </summary>
            <param name="responseLine">The response line as a string.</param>
            <returns>The parsed status code from the response line.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.VerifyCanCreateOperationRequestMessage(System.Boolean)">
            <summary>
            Verifies that calling CreateOperationRequestMessage if valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.VerifyCanCreateOperationResponseMessage(System.Boolean)">
            <summary>
            Verifies that calling CreateOperationResponseMessage if valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.VerifyCanRead(System.Boolean)">
            <summary>
            Verifies that calling Read is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.VerifyReaderReady">
            <summary>
            Validates that the batch reader is ready to process a new read or create message request.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.VerifyCallAllowed(System.Boolean)">
            <summary>
            Verifies that a call is allowed to the reader.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.IncreaseBatchSize">
            <summary>
            Increases the size of the current batch message; throws if the allowed limit is exceeded.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.IncreaseChangeSetSize">
            <summary>
            Increases the size of the current change set; throws if the allowed limit is exceeded.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.ResetChangeSetSize">
            <summary>
            Resets the size of the current change set to 0.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.ThrowODataException(System.String)">
            <summary>
            Sets the 'Exception' state and then throws an ODataException with the specified error message.
            </summary>
            <param name="errorMessage">The error message for the exception.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchReader.InterceptException``1(System.Func{``0})">
            <summary>
            Catch any exception thrown by the action passed in; in the exception case move the writer into
            state Exception and then rethrow the exception.
            </summary>
            <typeparam name="T">The type of the result returned from the <paramref name="action"/>.</typeparam>
            <param name="action">The action to execute.</param>
            <returns>The result of the <paramref name="action"/>.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchReader.State">
            <summary>Gets the current state of the batch reader.</summary>
            <returns>The current state of the batch reader.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchReader.OperationState">
            <summary>
            An enumeration to track the state of a batch operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.OperationState.None">
            <summary>No action has been performed on the operation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.OperationState.MessageCreated">
            <summary>The batch message for the operation has been created and returned to the caller.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.OperationState.StreamRequested">
            <summary>The stream of the batch operation message has been requested.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchReader.OperationState.StreamDisposed">
            <summary>The stream of the batch operation message has been disposed.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessageReaderSettings">
            <summary>
            Configuration settings for OData message readers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReaderSettings.readerBehavior">
            <summary>
            A instance representing any knobs that control the behavior of the readers
            inside and outside of WCF Data Services.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReaderSettings.atomFormatEntryXmlCustomizationCallback">
            <summary>
            ATOM entry XML customization callback.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettings.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings" /> class with default values.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettings.#ctor(Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataMessageReaderSettings" /> class.</summary>
            <param name="other">The other message reader settings.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettings.SetAtomEntryXmlCustomizationCallback(System.Func{Microsoft.Data.OData.ODataEntry,System.Xml.XmlReader,System.Uri,System.Xml.XmlReader})">
            <summary>Sets the atom entry XML customization callback.</summary>
            <param name="atomEntryXmlCustomizationCallback">The atom entry XML customization callback.</param>
            <remarks>
            This method only affects ATOM format payloads. For payloads of other formats this method has no effect.
            It takes three parameters:
             - ODataEntry entry - which is the entry to be read.
             - XmlReader reader - which is the current XmlReader used by the ODataReader to read the entry. The reader is positioned on the atom:entry start element tag.
                Note that the reader might not be the exact instance of the reader create by the parent entry customization or passed in by other means to the ODataReader,
                the ODataReader sometimes needs to wrap the readers and the wrapped XmlReader might be passed in here.
             - Uri - the current xml:base URI value for the reader. If there is no active xml:base this parameter is passed a null value.
            It returns XmlReader:
             - null - means there's no need for customization and the original XmlReader will be used to read the entry.
             - non-null XmlReader - an XmlReader which the ODataReader will use to read the entry. This reader must be positioned on the atom:entry start element tag.
                The ODataReader will not close or dispose the reader. It will read from it and leave the reader positioned on the atom:entry end element tag
                (or the empty atom:entry start tag).
                Once the ODataReader reports the ODataReaderState.EntryEnd for the entry, it will not use this XmlReader anymore.
                After the ODataReaderState.EntryEnd is reported the parent reader (the parameter to the func) is expected to be positioned on the node AFTER
                the atom:entry end element tag (or after the atom:entry empty start tag).
                Note that this means that the ODataReader will only read till the end tag on the inner reader, but it expects the parent reader to move after the end tag.
                It's the resposibility of the caller to move the parent read after the end tag manually if necessary.
                The func must NOT return the same XmlReader instance as the XmlReader passed to it.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettings.EnableDefaultBehavior">
            <summary>Enables the default behavior.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettings.EnableWcfDataServicesServerBehavior(System.Boolean)">
            <summary>Specifies whether the WCF data services server behavior is enabled.</summary>
            <param name="usesV1Provider">true to use V1 provider; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettings.EnableWcfDataServicesClientBehavior(System.Func{Microsoft.Data.Edm.IEdmType,System.String,Microsoft.Data.Edm.IEdmType},System.String,System.String,System.Func{Microsoft.Data.OData.ODataEntry,System.Xml.XmlReader,System.Uri,System.Xml.XmlReader})">
            <summary>
            Enables the same behavior that the WCF Data Services client has. Also, lets the user set the values for custom data namespace and type scheme.
            </summary>
            <param name="typeResolver">Custom type resolver which takes both expected type and type name.
            This function is used instead of the IEdmModel.FindType if it's specified.
            The first parameter to the function is the expected type (the type inferred from the parent property or specified by the external caller).
            The second parameter is the type name from the payload.
            The function should return the resolved type, or null if no such type was found.</param>
            <param name="odataNamespace">Custom data namespace.</param>
            <param name="typeScheme">Custom type scheme to use when resolving types. This should be validated to be a valid URI, this method will not check that.</param>
            <param name="entryXmlCustomizationCallback">
            If non-null this func will be called when an entry start is found and the entry is to be read.
            It takes three parameters:
             - ODataEntry entry - which is the entry to be read.
             - XmlReader reader - which is the current XmlReader used by the ODataReader to read the entry. The reader is positioned on the atom:entry start element tag.
                Note that the reader might not be the exact instance of the reader create by the parent entry customization or passed in by other means to the ODataReader,
                the ODataReader sometimes needs to wrap the readers and the wrapped XmlReader might be passed in here.
             - Uri - the current xml:base URI value for the reader. If there is no active xml:base this parameter is passed a null value.
            It returns XmlReader:
             - null - means there's no need for customization and the original XmlReader will be used to read the entry.
             - non-null XmlReader - an XmlReader which the ODataReader will use to read the entry. This reader must be positioned on the atom:entry start element tag.
                The ODataReader will not close or dispose the reader. It will read from it and leave the reader positioned on the atom:entry end element tag
                (or the empty atom:entry start tag).
                Once the ODataReader reports the ODataReaderState.EntryEnd for the entry, it will not use this XmlReader anymore.
                After the ODataReaderState.EntryEnd is reported the parent reader (the parameter to the func) is expected to be positioned on the node AFTER
                the atom:entry end element tag (or after the atom:entry empty start tag).
                Note that this means that the ODataReader will only read till the end tag on the inner reader, but it expects the parent reader to move after the end tag.
                It's the resposibility of the caller to move the parent read after the end tag manually if necessary.
                The func must NOT return the same XmlReader instance as the XmlReader passed to it.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettings.EnableWcfDataServicesClientBehavior(System.Func{Microsoft.Data.Edm.IEdmType,System.String,Microsoft.Data.Edm.IEdmType},System.String,System.String,System.Func{Microsoft.Data.OData.ODataEntry,System.Xml.XmlReader,System.Uri,System.Xml.XmlReader},System.Func{Microsoft.Data.Edm.IEdmEntityType,System.Boolean})">
            <summary>
            Enables the same behavior that the WCF Data Services client has. Also, lets the user set the values for custom data namespace and type scheme.
            </summary>
            <param name="typeResolver">Custom type resolver which takes both expected type and type name.
            This function is used instead of the IEdmModel.FindType if it's specified.
            The first parameter to the function is the expected type (the type inferred from the parent property or specified by the external caller).
            The second parameter is the type name from the payload.
            The function should return the resolved type, or null if no such type was found.</param>
            <param name="odataNamespace">Custom data namespace.</param>
            <param name="typeScheme">Custom type scheme to use when resolving types. This should be validated to be a valid URI, this method will not check that.</param>
            <param name="entryXmlCustomizationCallback">
            If non-null this func will be called when an entry start is found and the entry is to be read.
            It takes three parameters:
             - ODataEntry entry - which is the entry to be read.
             - XmlReader reader - which is the current XmlReader used by the ODataReader to read the entry. The reader is positioned on the atom:entry start element tag.
                Note that the reader might not be the exact instance of the reader create by the parent entry customization or passed in by other means to the ODataReader,
                the ODataReader sometimes needs to wrap the readers and the wrapped XmlReader might be passed in here.
             - Uri - the current xml:base URI value for the reader. If there is no active xml:base this parameter is passed a null value.
            It returns XmlReader:
             - null - means there's no need for customization and the original XmlReader will be used to read the entry.
             - non-null XmlReader - an XmlReader which the ODataReader will use to read the entry. This reader must be positioned on the atom:entry start element tag.
                The ODataReader will not close or dispose the reader. It will read from it and leave the reader positioned on the atom:entry end element tag
                (or the empty atom:entry start tag).
                Once the ODataReader reports the ODataReaderState.EntryEnd for the entry, it will not use this XmlReader anymore.
                After the ODataReaderState.EntryEnd is reported the parent reader (the parameter to the func) is expected to be positioned on the node AFTER
                the atom:entry end element tag (or after the atom:entry empty start tag).
                Note that this means that the ODataReader will only read till the end tag on the inner reader, but it expects the parent reader to move after the end tag.
                It's the resposibility of the caller to move the parent read after the end tag manually if necessary.
                The func must NOT return the same XmlReader instance as the XmlReader passed to it.
            </param>
            <param name="shouldQualifyOperations">Callback to determine whether operations bound to a particular entity type must be qualified with a container name when appearing in a $select clause.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReaderSettings.ShouldSkipAnnotation(System.String)">
            <summary>
            Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should be skipped, false otherwise.
            </summary>
            <param name="annotationName">The name of the annotation in question.</param>
            <returns>Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should be skipped, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.BaseUri">
            <summary>Gets or sets the document base URI (used as base for all relative URIs). If this is set, it must be an absolute URI.</summary>
            <returns>The base URI.</returns>
            <remarks>
            Note that for typical OData services this should end with a slash character. For example "http://services.odata.org/OData/OData.svc/" will work as expected,
            that is a relative URI "Products(0)" will correctly combine with the base to produce "http://services.odata.org/OData/OData.svc/Products(0)".
            If the URI would not end with a slash, the last segment is not considered when base and relative URIs are combined.
            So for example this base URI "http://services.odata.org/OData/OData.svc" combined with relative URI "Products(0)" would produce
            "http://services.odata.org/OData/Products(0)", which is typically not the desired result.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.DisablePrimitiveTypeConversion">
            <summary>Gets or sets a value that indicates whether not to convert all primitive values to the type specified in the model or provided as an expected type. Note that values will still be converted to the type specified in the payload itself.</summary>
            <returns>true if primitive values and report values are not converted; false if all primitive values are converted to the type specified in the model or provided as an expected type. The default value is false.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.UndeclaredPropertyBehaviorKinds">
             <summary>Gets or sets the behavior the reader should use when it finds undeclared property.</summary>
             <returns>The behavior the reader should use when it finds undeclared property.</returns>
             <remarks>
             This setting has no effect if there's no model specified for the reader.
             This setting must be set to Default when reading request payloads.
            
             Detailed behavior description:
             ODataUndeclaredPropertyBehaviorKind.Default
               If an undeclared property is found reading fails.
            
             ODataUndeclaredPropertyBehaviorKind.ReportUndeclaredLinkProperty
               ATOM
                 - Undeclared deferred navigation link will be read and reported.
                 - Undeclared expanded navigation link will fail.
                 - Undeclared stream property link (both read and edit) will be read and reported.
                 - Undeclared association link will be read and reported.
                 - Undeclared properties inside m:properties fail.
               Verbose JSON
                 - If an undeclared property is found a detection logic will run:
                   - __deferred value is found - the link will be read and reported as a deferred navigation link.
                   - __mediaresource value is found - the link will be read and reported as a stream property
                   - If nothing from the above matches the reading fails.
                 - Undeclared association links inside __metadata/properties will be read and reported.
               JSON Light
                 - If an undeclared property is found a detection logic will run:
                   - The property has 'odata.navigationLink' or 'odata.associationLink' annotation on it and no value - it will be read as navigation/association link
                   - The property has 'odata.mediaEditLink', 'odata.mediaReadLink', 'odata.mediaContentType' or 'odata.mediaETag' on it and no value
                         - it will be read as a stream property.
                   - Any other property (that is property with a value or property with no annotation mentioned above) will fail.
            
             ODataUndeclaredPropertyBehaviorKind.IgnoreUndeclaredValueProperty
               ATOM
                 - Undeclared property inside m:properties is ignored (not even read).
                 - Undeclared navigation link, stream property link or association link fail.
               Verbose JSON
                 - If an undeclared property is found a detection logic will run:
                   - __deferred value is found - fail as undeclared deferred nav. link.
                   - __mediaresource value is found - fail as undeclared stream property.
                   - All other properties are ignored and not read.
                 - Undeclared association links inside __metadata/properties fail.
               JSON Light
                 - If an undeclared property is found a detection logic will run:
                   - The property has 'odata.navigationLink' or 'odata.associationLink' annotation on it (deferred or expanded navigation link)
                         - fail as undeclared navigation property
                   - The property has 'odata.mediaEditLink', 'odata.mediaReadLink', 'odata.mediaContentType' or 'odata.mediaETag' on it and no value
                         - fail as undeclared stream property.
                   - The property has a value and no annotation mentioned above - the property is ignored and not read.
            
             ODataUndeclaredPropertyBehaviorKind.ReportUndeclaredLinkProperty | ODataUndeclaredPropertyBehaviorKind.IgnoreUndeclaredValueProperty
               ATOM
                 - Undeclared deferred navigation link will be read and reported.
                 - Undeclared expanded navigation link will be read and the navigation link part will be reported,
                   the expanded content will be ignored and not read or reported.
                 - Undeclared stream property link (both read and edit) will be read and reported.
                 - Undeclared association link will be read and reported.
                 - Undeclared properties inside m:properties will be ignored and not read.
               Verbose JSON
                 - If an undeclared property is found a detection logic will run:
                   - __deferred value is found - read and report a deferred navigation link.
                   - __mediaresource value is found - read and report stream property.
                   - All other properties are ignore and not read.
                 - Undeclared association links inside __metadata/properties are read and reported.
               JSON Light
                 - If an undeclared property is found a detection logic will run:
                   - The property has 'odata.navigationLink' or 'odata.associationLink' annotation on it and no value (deferred navigation link)
                         - it will be read as navigation/association link
                   - The property has 'odata.navigationLink' or 'odata.associationLink' annotation on it and with value (expanded navigation link)
                         - it will be read, the navigation and association link will be reported and the content will be ignored.
                   - The property has 'odata.mediaEditLink', 'odata.mediaReadLink', 'odata.mediaContentType' or 'odata.mediaETag' on it and no value
                         - it will be read as a stream property.
                   - The property has a value and no annotation mentioned above - the property is ignored and not read.
            
               Note that there's one difference between ATOM/JSON Light and Verbose JSON. In ATOM and JSON Light expanded links are treated as both
               undeclared link and a value property. The URLs are the link part, the expanded content is the value part.
               In Verbose JSON expanded links are treated as a value property as a whole. Since in JSON expanded links don't actually have
               the link part (the payload doesn't contain the "href") this is not such a big difference.
             </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.DisableMessageStreamDisposal">
            <summary>Gets or sets a value that indicates whether the message stream will not be disposed after finishing writing with the message.</summary>
            <returns>true if the message stream will not be disposed after finishing writing with the message; otherwise false. The default value is false.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.MaxProtocolVersion">
            <summary>Gets or sets the maximum OData protocol version the reader should accept and understand.</summary>
            <returns>The maximum OData protocol version the reader should accept and understand.</returns>
            <remarks>
            If the payload to be read has higher DataServiceVersion than the value specified for this property
            the reader will fail.
            Reader will also not report features which require higher version than specified for this property.
            It may either ignore such features in the payload or fail on them.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.DisableStrictMetadataValidation">
            <summary>
            false - metadata validation is strict, the input must exactly match against the model.
            true - metadata validation is lax, the input doesn't have to match the model in all cases.
            This property has effect only if the metadata model is specified.
            </summary>
            <remarks>
            Strict metadata validation:
              Primitive values: The wire type must be convertible to the expected type.
              Complex values: The wire type must resolve against the model and it must exactly match the expected type.
              Entities: The wire type must resolve against the model and it must be assignable to the expected type.
              Collections: The wire type must exactly match the expected type.
              If no expected type is available we use the payload type.
            Lax metadata validation:
              Primitive values: If expected type is available, we ignore the wire type.
              Complex values: The wire type is used if the model defines it. If the model doesn't define such a type, the expected type is used.
                If the wire type is not equal to the expected type, but it's assignable, we fail because we don't support complex type inheritance.
                If the wire type if not assignable we use the expected type.
              Entities: same as complex values except that if the payload type is assignable we use the payload type. This allows derived entity types.
              Collections: If expected type is available, we ignore the wire type, except we fail if the item type is a derived complex type.
              If no expected type is available we use the payload type and it must resolve against the model.
            If DisablePrimitiveTypeConversion is on, the rules for primitive values don't apply
              and the primitive values are always read with the type from the wire.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.ReaderBehavior">
            <summary>
            The reader behavior that holds all the knobs needed to make the reader
            behave differently inside and outside of WCF Data Services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.AtomEntryXmlCustomizationCallback">
            <summary>
            ATOM entry XML customization callback.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.ReportUndeclaredLinkProperties">
            <summary>
            Whether or not to report any undeclared link properties in the payload. Computed from the UndeclaredPropertyBehaviorKinds enum property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReaderSettings.IgnoreUndeclaredValueProperties">
            <summary>
            Whether or not to ignore any undeclared value properties in the payload. Computed from the UndeclaredPropertyBehaviorKinds enum property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessageReader">
            <summary>
            Reader class used to read all OData payloads (entries, feeds, metadata documents, service documents, etc.).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.message">
            <summary>The message for which the message reader was created.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.readingResponse">
            <summary>A flag indicating whether we are reading a request or a response message.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.settings">
            <summary>The message reader settings to use when reading the message payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.model">
            <summary>The model. Non-null if we do have metadata available.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.version">
            <summary>The <see cref="T:Microsoft.Data.OData.ODataVersion"/> to be used for reading the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.urlResolver">
            <summary>The optional URL resolver to perform custom URL resolution for URLs read from the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.edmTypeResolver">
            <summary>The resolver to use when determining an entity set's element type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.readMethodCalled">
            <summary>Flag to ensure that only a single read method is called on the message reader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.isDisposed">
            <summary>true if Dispose() has been called on this message reader, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.inputContext">
            <summary>The input context used to read the message content.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.readerPayloadKind">
            <summary>The payload kind of the payload to be read with this reader.</summary>
            <remarks>This field is set implicitly when one of the read (or reader creation) methods is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.format">
            <summary>The <see cref="T:Microsoft.Data.OData.ODataFormat"/> of the payload to be read with this reader.</summary>
            <remarks>This field is set implicitly when one of the read (or reader creation) methods is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.contentType">
            <summary>The <see cref="T:Microsoft.Data.OData.MediaType"/> parsed from the content type header.</summary>
            <remarks>This field is set implicitly when one of the read (or reader creation) methods is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.encoding">
            <summary>The <see cref="T:System.Text.Encoding"/> of the payload to be read with this reader.</summary>
            <remarks>This field is set implicitly when one of the read (or reader creation) methods is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.batchBoundary">
            <summary>The batch boundary string if the payload to be read is a batch request or response.</summary>
            <remarks>This is set implicitly when the CreateBatchReader method is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.mediaTypeResolver">
            <summary>The media type resolver to use when interpreting the incoming content type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageReader.payloadKindDetectionFormatStates">
            <summary>Storage for format specific states from payload kind detection.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.#ctor(Microsoft.Data.OData.IODataRequestMessage)">
            <summary>Creates a new <see cref="T:Microsoft.Data.OData.ODataMessageReader" /> for the given request message.</summary>
            <param name="requestMessage">The request message for which to create the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.#ctor(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>Creates a new <see cref="T:Microsoft.Data.OData.ODataMessageReader" /> for the given request message and message reader settings.</summary>
            <param name="requestMessage">The request message for which to create the reader.</param>
            <param name="settings">The message reader settings to use for reading the message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.#ctor(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Creates a new ODataMessageReader for the given request message and message reader settings.
            </summary>
            <param name="requestMessage">The request message for which to create the reader.</param>
            <param name="settings">The message reader settings to use for reading the message payload.</param>
            <param name="model">The model to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.#ctor(Microsoft.Data.OData.IODataResponseMessage)">
            <summary>Creates a new <see cref="T:System.Data.OData.ODataMessageReader" /> for the given response message.</summary>
            <param name="responseMessage">The response message for which to create the reader.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.#ctor(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>Creates a new <see cref="T:Microsoft.Data.OData.ODataMessageReader" /> for the given response message and message reader settings.</summary>
            <param name="responseMessage">The response message for which to create the reader.</param>
            <param name="settings">The message reader settings to use for reading the message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.#ctor(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataMessageReaderSettings,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Creates a new ODataMessageReader for the given response message and message reader settings.
            </summary>
            <param name="responseMessage">The response message for which to create the reader.</param>
            <param name="settings">The message reader settings to use for reading the message payload.</param>
            <param name="model">The model to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.DetectPayloadKind">
            <summary>Determines the potential payload kinds and formats of the payload being read and returns it.</summary>
            <returns>The set of potential payload kinds and formats for the payload being read by this reader.</returns>
            <remarks>When this method is called it first analyzes the content type and determines whether there
            are multiple matching payload kinds registered for the message's content type. If there are, it then
            runs the payload kind detection on all formats that have a matching payload kind registered.
            Note that this method can return multiple results if a payload is valid for multiple payload kinds but
            will always at most return a single result per payload kind.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.DetectPayloadKindAsync">
            <summary>Determines the potential payload kinds and formats of the payload being read and returns it.</summary>
            <returns>The set of potential payload kinds and formats for the payload being read by this reader.</returns>
            <remarks>When this method is called it first analyzes the content type and determines whether there
            are multiple matching payload kinds registered for the message's content type. If there are, it then
            runs the payload kind detection on all formats that have a matching payload kind registered.
            Note that this method can return multiple results if a payload is valid for multiple payload kinds but
            will always at most return a single result per payload kind.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataFeedReader">
            <summary>Creates an <see cref="T:Microsoft.Data.OData.ODataReader" /> to read a feed.</summary>
            <returns>The created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataFeedReader(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="expectedBaseEntityType">The expected base type for the entities in the feed.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataFeedReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base type for the entities in the feed.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataFeedReaderAsync">
            <summary>Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader" /> to read a feed.</summary>
            <returns>A running task for the created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataFeedReaderAsync(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="expectedBaseEntityType">The expected base type for the entities in the feed.</param>
            <returns>A running task for the created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataFeedReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base type for the entities in the feed.</param>
            <returns>A running task for the created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataEntryReader">
            <summary>Creates an <see cref="T:Microsoft.Data.OData.ODataReader" /> to read an entry.</summary>
            <returns>The created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataEntryReader(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entityType">The expected entity type for the entry to be read.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataEntryReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="entityType">The expected entity type for the entry to be read.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataEntryReaderAsync">
            <summary>Asynchronously creates an <see cref="T:System.Data.OData.ODataReader" /> to read an entry.</summary>
            <returns>A running task for the created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataEntryReaderAsync(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entityType">The expected entity type for the entry to be read.</param>
            <returns>A running task for the created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataEntryReaderAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="entityType">The expected entity type for the entry to be read.</param>
            <returns>A running task for the created reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataCollectionReader">
            <summary>Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader" /> to read a collection of primitive or complex values (as result of a service operation invocation).</summary>
            <returns>The created collection reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>The created collection reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataCollectionReaderAsync">
            <summary>Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader" /> to read a collection of primitive or complex values (as result of a service operation invocation).</summary>
            <returns>A running task for the created collection reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataCollectionReaderAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="expectedItemTypeReference">The expected type reference for the items in the collection.</param>
            <returns>A running task for the created collection reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataBatchReader">
            <summary>Creates an <see cref="T:Microsoft.Data.OData.ODataBatchReader" /> to read a batch of requests or responses.</summary>
            <returns>The created batch reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataBatchReaderAsync">
            <summary>Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataBatchReader" /> to read a batch of requests or responses.</summary>
            <returns>A running task for the created batch reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataParameterReader(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> to read the parameters for <paramref name="functionImport"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>The created parameter reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.CreateODataParameterReaderAsync(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> to read the parameters for <paramref name="functionImport"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
            <returns>A running task for the created parameter reader.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadServiceDocument">
            <summary>Reads a service document payload.</summary>
            <returns>The service document read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadServiceDocumentAsync">
            <summary>Asynchronously reads a service document payload.</summary>
            <returns>A task representing the asynchronous operation of reading the service document.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadProperty">
            <summary>Reads an <see cref="T:Microsoft.Data.OData.ODataProperty" /> as message payload.</summary>
            <returns>The property read from the payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadProperty(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Reads an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>The property read from the payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadProperty(Microsoft.Data.Edm.IEdmStructuralProperty)">
            <summary>
            Reads an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The metadata of the property to read.</param>
            <returns>The property read from the payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadPropertyAsync">
            <summary>Asynchronously reads an <see cref="T:Microsoft.Data.OData.ODataProperty" /> as message payload.</summary>
            <returns>A task representing the asynchronous operation of reading the property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadPropertyAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously reads an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
            <returns>A task representing the asynchronous operation of reading the property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadPropertyAsync(Microsoft.Data.Edm.IEdmStructuralProperty)">
            <summary>
            Asynchronously reads an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The metadata of the property to read.</param>
            <returns>A task representing the asynchronous operation of reading the property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadError">
            <summary>Reads an <see cref="T:Microsoft.Data.OData.ODataError" /> as the message payload.</summary>
            <returns>The <see cref="T:Microsoft.Data.OData.ODataError" /> read from the message payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadErrorAsync">
            <summary>Asynchronously reads an <see cref="T:Microsoft.Data.OData.ODataError" /> as the message payload.</summary>
            <returns>A task representing the asynchronous operation of reading the error.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadEntityReferenceLinks">
            <summary>Reads the result of a $links query (entity reference links) as the message payload.</summary>
            <returns>The entity reference links read as message payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadEntityReferenceLinks(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads the result of a $links query (entity reference links) as the message payload.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>The entity reference links read as message payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadEntityReferenceLinksAsync">
            <summary>Asynchronously reads the result of a $links query as the message payload.</summary>
            <returns>A task representing the asynchronous reading of the entity reference links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadEntityReferenceLinksAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously reads the result of a $links query as the message payload.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
            <returns>A task representing the asynchronous reading of the entity reference links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadEntityReferenceLink">
            <summary>Reads a singleton result of a $links query (entity reference link) as the message payload.</summary>
            <returns>The entity reference link read from the message payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadEntityReferenceLink(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Reads a singleton result of a $links query (entity reference link) as the message payload.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>The entity reference link read from the message payload.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadEntityReferenceLinkAsync">
            <summary>Asynchronously reads a singleton result of a $links query (entity reference link) as the message payload.</summary>
            <returns>A running task representing the reading of the entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadEntityReferenceLinkAsync(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously reads a singleton result of a $links query (entity reference link) as the message payload.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference link.</param>
            <returns>A running task representing the reading of the entity reference link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadValue(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Reads a single value as the message body.
            </summary>
            <param name="expectedTypeReference">The expected type reference for the value to be read; null if no expected type is available.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadValueAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously reads a single value as the message body.
            </summary>
            <param name="expectedTypeReference">The expected type reference for the value to be read; null if no expected type is available.</param>
            <returns>A running task representing the reading of the value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadMetadataDocument">
            <summary>Reads the message body as metadata document.</summary>
            <returns>Returns <see cref="T:Microsoft.Data.Edm.IEdmModel" />.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.Dispose">
            <summary><see cref="M:System.IDisposable.Dispose()" /> implementation to cleanup unmanaged resources of the reader. </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.GetFormat">
            <summary>
            Determines the format of the payload being read and returns it.
            </summary>
            <returns>The format of the payload being read by this reader.</returns>
            <remarks>
            The format of the payload is determined when starting to read the message; 
            if this method is called before reading has started it will throw.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ProcessContentType(Microsoft.Data.OData.ODataPayloadKind[])">
            <summary>
            Processes the content type header of the message to determine the format of the payload, the encoding, and the payload kind.
            </summary>
            <param name="payloadKinds">All possible kinds of payload to be read with this message reader; must not include ODataPayloadKind.Unsupported.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.GetContentTypeHeader">
            <summary>
            Gets the content type header of the message and validates that it is present and not empty.
            </summary>
            <returns>The content type header of the message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanCreateODataFeedReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Verify arguments for creation of an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read a feed.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="expectedBaseEntityType">The expected base entity type for the entities in the feed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanCreateODataEntryReader(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Verify arguments for creation of an <see cref="T:Microsoft.Data.OData.ODataReader"/> to read an entry.
            </summary>
            <param name="entitySet">The entity set we are going to read entities for.</param>
            <param name="entityType">The expected entity type for the entry to be read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanCreateODataCollectionReader(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Verify arguments for creation of an <see cref="T:Microsoft.Data.OData.ODataCollectionReader"/> to read a collection of primitive or complex values 
            (as result of a service operation invocation).
            </summary>
            <param name="expectedItemTypeReference">The expected type for the items in the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanCreateODataBatchReader">
            <summary>
            Verify arguments for creation of a batch as the message body.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanCreateODataParameterReader(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Verify arguments for creation of an <see cref="T:Microsoft.Data.OData.ODataParameterReader"/> to read the parameters for <paramref name="functionImport"/>.
            </summary>
            <param name="functionImport">The function import whose parameters are being read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanReadServiceDocument">
            <summary>
            Verify arguments for reading of a service document payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanReadMetadataDocument">
            <summary>
            Verify arguments for reading of a metadata document payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanReadProperty(Microsoft.Data.Edm.IEdmStructuralProperty)">
            <summary>
            Verify arguments for reading of an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="property">The metadata of the property to read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanReadProperty(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Verify arguments for reading of an <see cref="T:Microsoft.Data.OData.ODataProperty"/> as message payload.
            </summary>
            <param name="expectedPropertyTypeReference">The expected type reference of the property to read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanReadError">
            <summary>
            Verify arguments for reading of an <see cref="T:Microsoft.Data.OData.ODataError"/> as the message payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanReadEntityReferenceLinks(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Verify arguments for reading of the result of a $links query (entity reference links) as the message payload.
            </summary>
            <param name="navigationProperty">The navigation property for which to read the entity reference links.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanReadEntityReferenceLink">
            <summary>
            Verify arguments for reading of a singleton result of a $links query (entity reference link) as the message payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyCanReadValue(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Verify arguments for reading of a single value as the message body.
            </summary>
            <param name="expectedTypeReference">The expected type reference for the value to be read; null if no expected type is available.</param>
            <returns>The payload kinds allowed for the given expected type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyReaderNotDisposedAndNotUsed">
            <summary>
            Verifies that the ODataMessageReader has not been used before; an ODataMessageReader can only be used to
            read a single message payload but cannot be reused later.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed. Throws an ObjectDisposedException if the object has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadFromInput``1(System.Func{Microsoft.Data.OData.ODataInputContext,``0},Microsoft.Data.OData.ODataPayloadKind[])">
            <summary>
            Method which creates an input context around the input message and calls a func to read the input.
            </summary>
            <typeparam name="T">The type returned by the read method.</typeparam>
            <param name="readFunc">The read function which will be called over the created input context.</param>
            <param name="payloadKinds">All possible kinds of payload to read.</param>
            <returns>The read value from the input.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.TryGetSinglePayloadKindResultFromContentType(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataPayloadKindDetectionResult}@)">
            <summary>
            Gets all the supported payload kinds for a given content type across all formats and returns them.
            </summary>
            <param name="payloadKindResults">The set of supported payload kinds for the content type of the message.</param>
            <returns>true if no or a single payload kind was found for the content type; false if more than one payload kind was found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ComparePayloadKindDetectionResult(Microsoft.Data.OData.ODataPayloadKindDetectionResult,Microsoft.Data.OData.ODataPayloadKindDetectionResult)">
            <summary>
            Compares two payload kind detection results.
            </summary>
            <param name="first">The first <see cref="T:Microsoft.Data.OData.ODataPayloadKindDetectionResult"/>.</param>
            <param name="second">The second <see cref="T:Microsoft.Data.OData.ODataPayloadKindDetectionResult"/>.</param>
            <returns>-1 if <paramref name="first"/> is considered less than <paramref name="second"/>,
            0 if the kinds are considered equal, 1 if <paramref name="first"/> is considered greater than <paramref name="second"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.GetPayloadKindDetectionTasks(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataPayloadKindDetectionResult},System.Collections.Generic.List{Microsoft.Data.OData.ODataPayloadKindDetectionResult})">
            <summary>
            Get an enumerable of tasks to get the supported payload kinds for all formats.
            </summary>
            <param name="payloadKindsFromContentType">All payload kinds for which we found matches in some format based on the content type.</param>
            <param name="detectionResults">The list of combined detection results after sniffing.</param>
            <returns>A lazy enumerable of tasks to get the supported payload kinds for all formats.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageReader.ReadFromInputAsync``1(System.Func{Microsoft.Data.OData.ODataInputContext,System.Threading.Tasks.Task{``0}},Microsoft.Data.OData.ODataPayloadKind[])">
            <summary>
            Method which asynchronously creates an input context around the input message and calls a func to read the input.
            </summary>
            <typeparam name="T">The type returned by the read method.</typeparam>
            <param name="readFunc">The read function which will be called over the created input context.</param>
            <param name="payloadKinds">All possible kinds of payload to read.</param>
            <returns>A task which when completed return the read value from the input.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReader.Settings">
            <summary>
            The message reader settings to use when reading the message payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageReader.MediaTypeResolver">
            <summary>
            The media type resolver to use when interpreting the incoming content type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonNodeType">
            <summary>
            Enumeration of all JSON node type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonNodeType.None">
            <summary>
            No node - invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonNodeType.StartObject">
            <summary>
            Start of JSON object record, the { character.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonNodeType.EndObject">
            <summary>
            End of JSON object record, the } character.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonNodeType.StartArray">
            <summary>
            Start of JSON array, the [ character.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonNodeType.EndArray">
            <summary>
            End of JSON array, the ] character.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonNodeType.Property">
            <summary>
            Property, the name of the property (the value will be reported as a separate node or nodes)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonNodeType.PrimitiveValue">
            <summary>
            Primitive value, that is either null, true, false, number or string.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonNodeType.EndOfInput">
            <summary>
            End of input reached.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataUtils">
            <summary>
            Utility methods used with the OData library.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataUtils.Version1NumberString">
            <summary>String representation of the version 1.0 of the OData protocol.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataUtils.Version2NumberString">
            <summary>String representation of the version 2.0 of the OData protocol.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataUtils.Version3NumberString">
            <summary>String representation of the version 3.0 of the OData protocol.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SetHeadersForPayload(Microsoft.Data.OData.ODataMessageWriter,Microsoft.Data.OData.ODataPayloadKind)">
            <summary>Sets the content-type and data service version headers on the message used by the message writer.</summary>
            <returns>The content-type and data service version headers on the message used by the message writer.</returns>
            <param name="messageWriter">The message writer to set the headers for.</param>
            <param name="payloadKind">The kind of payload to be written with the message writer.</param>
            <remarks>
            This method can be called if it is important to set all the message headers before calling any of the
            write methods on the <paramref name="messageWriter"/>.
            If it is sufficient to set the headers when the write methods on the <paramref name="messageWriter"/> 
            are called, you don't have to call this method and setting the headers will happen automatically.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.GetReadFormat(Microsoft.Data.OData.ODataMessageReader)">
            <summary>Returns the format used by the message reader for reading the payload.</summary>
            <returns>The format used by the messageReader for reading the payload.</returns>
            <param name="messageReader">The <see cref="T:Microsoft.Data.OData.ODataMessageReader" /> to get the read format from.</param>
            <remarks>This method must only be called once reading has started.
            This means that a read method has been called on the <paramref name="messageReader"/> or that a reader (for entries, feeds, collections, etc.) has been created.
            If the method is called prior to that it will throw.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.LoadODataAnnotations(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Loads the supported, OData-specific serializable annotations into their in-memory representations.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> to process.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.LoadODataAnnotations(Microsoft.Data.Edm.IEdmModel,System.Int32)">
            <summary>
            Loads the supported, OData-specific serializable annotations into their in-memory representations.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> to process.</param>
            <param name="maxEntityPropertyMappingsPerType">The maximum number of entity mapping attributes to be found 
            for an entity type (on the type itself and all its base types).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.LoadODataAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Loads the supported, OData-specific serializable annotations into their in-memory representations.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to process.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.LoadODataAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType,System.Int32)">
            <summary>
            Loads the supported, OData-specific serializable annotations into their in-memory representations.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to process.</param>
            <param name="maxEntityPropertyMappingsPerType">The maximum number of entity mapping attributes to be found 
            for an entity type (on the type itself and all its base types).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SaveODataAnnotations(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Turns the in-memory representations of the supported, OData-specific annotations into their serializable form.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> to process.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SaveODataAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Turns the in-memory representations of the supported, OData-specific annotations into their serializable form.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to process.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.HasDefaultStream(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Checks whether the <paramref name="entityType"/> has a default stream.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to check.</param>
            <returns>true if the entity type has a default stream; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SetHasDefaultStream(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType,System.Boolean)">
            <summary>
            Adds or removes a default stream to/from the <paramref name="entityType"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to modify.</param>
            <param name="hasStream">true to add a default stream to the entity type; false to remove an existing default stream (if any).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.IsDefaultEntityContainer(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityContainer)">
            <summary>
            Checks whether the <paramref name="entityContainer"/> is the default entity container.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="entityContainer">The <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> to check.</param>
            <returns>true if the <paramref name="entityContainer"/> is the default container; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SetIsDefaultEntityContainer(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityContainer,System.Boolean)">
            <summary>
            Adds or removes a default stream to/from the <paramref name="entityContainer"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="entityContainer">The <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> to modify.</param>
            <param name="isDefaultContainer">true to set the <paramref name="entityContainer"/> as the default container; false to remove an existing default container annotation (if any).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.GetMimeType(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Checks whether the <paramref name="annotatable"/> has a MIME type annotation.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to check.</param>
            <returns>The (non-null) value of the MIME type annotation of the <paramref name="annotatable"/> or null if no MIME type annotation exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SetMimeType(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String)">
            <summary>
            Sets the MIME type annotation of the <paramref name="annotatable"/> to <paramref name="mimeType"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to modify.</param>
            <param name="mimeType">The MIME type value to set as annotation value; if null, an existing annotation will be removed.</param>
            <remarks>The MIME type annotation is only supported on service operations and primitive properties for serialization purposes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.GetHttpMethod(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Checks whether the <paramref name="annotatable"/> has an HttpMethod annotation.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to check.</param>
            <returns>The (non-null) value of the HttpMethod annotation of the <paramref name="annotatable"/> or null if no such annotation exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SetHttpMethod(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String)">
            <summary>
            Sets the HttpMethod annotation of the <paramref name="annotatable"/> to <paramref name="httpMethod"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> contatining the annotation.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to modify.</param>
            <param name="httpMethod">The HttpMethod value to set as annotation value; if null, an existing annotation will be removed.</param>
            <remarks>The HttpMethod annotation is only supported on service operations for serialization purposes.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.IsAlwaysBindable(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Gets the value of IsAlwaysBindable annotation on the <paramref name="functionImport"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="functionImport">The <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> to get the annotation from.</param>
            <returns>The value of the annotation if it exists; false otherwise.</returns>
            <exception cref="T:Microsoft.Data.OData.ODataException">Thrown if the IsAlwaysBindable annotation is set to true for a non-bindable <paramref name="functionImport"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SetIsAlwaysBindable(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmFunctionImport,System.Boolean)">
            <summary>
            Sets the value of IsAlwaysBindable annotation of the <paramref name="functionImport"/> to <paramref name="isAlwaysBindable"/>
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="functionImport">The <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/> to set the annotation on.</param>
            <param name="isAlwaysBindable">The value of the annotation to set.</param>
            <exception cref="T:Microsoft.Data.OData.ODataException">Thrown if IsAlwaysBindable is set to true for a non-bindable <paramref name="functionImport"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.NullValueReadBehaviorKind(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Gets the reader behavior for null property value on the specified property.
            </summary>
            <param name="model">The model containing the annotation.</param>
            <param name="property">The property to check.</param>
            <returns>The behavior to use when reading null value for this property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SetNullValueReaderBehavior(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.OData.Metadata.ODataNullValueBehaviorKind)">
            <summary>
            Adds a transient annotation to indicate how null values for the specified property should be read.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="property">The <see cref="T:Microsoft.Data.Edm.IEdmProperty"/> to modify.</param>
            <param name="nullValueReadBehaviorKind">The new behavior for reading null values for this property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.ODataVersionToString(Microsoft.Data.OData.ODataVersion)">
            <summary>Displays the OData version to string representation.</summary>
            <returns>The OData version.</returns>
            <param name="version">The OData version.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.StringToODataVersion(System.String)">
            <summary>Displays a string to OData version representation.</summary>
            <returns>The OData version.</returns>
            <param name="version">The OData version.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.CreateAnnotationFilter(System.String)">
            <summary>
            Translates the <paramref name="annotationFilter"/> to a func that would evalutate whether the filter would match a given annotation name.
            The func would evaluate to true if the <paramref name="annotationFilter"/> matches the annotation name that's passed to the it, and false otherwise.
            </summary>
            <param name="annotationFilter">
            The filter string may be a comma delimited list of any of the following supported patterns:
              "*"        -- Matches all annotation names.
              "ns.*"     -- Matches all annotation names under the namespace "ns".
              "ns.name"  -- Matches only the annotation name "ns.name".
              "-"        -- The exclude operator may be used with any of the supported pattern, for example:
                            "-ns.*"    -- Excludes all annotation names under the namespace "ns".
                            "-ns.name" -- Excludes only the annotation name "ns.name".
            Null or empty filter is equivalent to "-*".
            
            The relative priority of the pattern is base on the relative specificity of the patterns being compared. If pattern1 is under the namespace pattern2,
            pattern1 is more specific than pattern2 because pattern1 matches a subset of what pattern2 matches. We give higher priority to the pattern that is more specific.
            For example:
             "ns.*" has higher priority than "*"
             "ns.name" has higher priority than "ns.*"
             "ns1.name" has same priority as "ns2.*"
            
            Patterns with the exclude operator takes higher precedence than the same pattern without.
            For example: "-ns.name" has higher priority than "ns.name".
            
            Examples:
              "ns1.*,ns.name"       -- Matches any annotation name under the "ns1" namespace and the "ns.name" annotation.
              "*,-ns.*,ns.name"     -- Matches any annotation name outside of the "ns" namespace and only "ns.name" under the "ns" namespace.
            </param>
            <returns>Returns a func which would evaluate to true if the <paramref name="annotationFilter"/> matches the annotation name that's passed to the it,
            and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SaveODataAnnotationsImplementation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Turns the in-memory representations of the supported, OData-specific annotations into their serializable form.
            Assumes that the entity type and the model have been validated.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations.</param>
            <param name="entityType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> to process.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.TryGetBooleanAnnotation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmStructuredType,System.String,System.Boolean,System.Boolean@)">
            <summary>
            Gets a boolean value for the <paramref name="annotationLocalName"/> OData metadata annotation on 
            the <paramref name="structuredType"/>.
            </summary>
            <param name="model">The model containing the annotation.</param>
            <param name="structuredType">The annotatable to get the annotation from.</param>
            <param name="annotationLocalName">The local name of the annotation to get.</param>
            <param name="recursive">true to search the base type hierarchy of the structured type for the annotation; otherwise false.</param>
            <param name="boolValue">true if the annotation exists and has the value 'true'; false if the annotation does not exist or has the value 'false'.</param>
            <returns>true if the annotation with the specified local names exists; otherwise false.</returns>
            <remarks>If the annotation exists but does not have a valid boolean value this method will throw.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.TryGetBooleanAnnotation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String,System.Boolean@)">
            <summary>
            Gets a boolean value for the <paramref name="annotationLocalName"/> OData metadata annotation on 
            the <paramref name="annotatable"/>.
            </summary>
            <param name="model">The model containing the annotation.</param>
            <param name="annotatable">The annotatable to get the annotation from.</param>
            <param name="annotationLocalName">The local name of the annotation to get.</param>
            <param name="boolValue">true if the annotation exists and has the value 'true'; false if the annotation does not exist or has the value 'false'.</param>
            <returns>true if the annotation with the specified local names exists; otherwise false.</returns>
            <remarks>If the annotation exists but does not have a valid boolean value this method wil throw.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtils.SetBooleanAnnotation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String,System.Boolean)">
            <summary>
            Sets the <paramref name="boolValue "/> as value of the <paramref name="annotationLocalName"/> annotation
            on the <paramref name="annotatable"/>.
            </summary>
            <param name="model">The model containing the annotation.</param>
            <param name="annotatable">The annotatable to set the annotation on.</param>
            <param name="annotationLocalName">The local name of the annotation to set.</param>
            <param name="boolValue">The value of the annotation to set.</param>
        </member>
        <member name="T:Microsoft.Data.OData.BufferedReadStream">
            <summary>
            Class which takes an input stream, buffers the entire content asynchronously and exposes it as a stream
            which can be read synchronously.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferedReadStream.buffers">
            <summary>
            List of buffers which store the data.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferedReadStream.inputStream">
            <summary>
            The input stream to read from. This is used only during the buffering and is set to null once we've buffered everything.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferedReadStream.currentBufferIndex">
            <summary>
            Points to the buffer currently being processed.
            When writing into the buffers this points to the last buffer to which the bytes should be written.
            When reading from the buffers this points to the buffer from which we are currently reading.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferedReadStream.currentBufferReadCount">
            <summary>
            Number of bytes read from the current buffer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.#ctor(System.IO.Stream)">
            <summary>
            Private constructor.
            </summary>
            <param name="inputStream">The stream to read from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.Flush">
            <summary>
            Flush the stream to the underlying storage. This operation is not supported by this stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the stream. This operation is not supported by this stream.
            </summary>
            <param name="offset">The offset to seek to.</param>
            <param name="origin">The origin of the seek operation.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This operation is not supported by this stream.
            </summary>
            <param name="value">The length in bytes to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream. This operation is not supported by this stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.BufferStreamAsync(System.IO.Stream)">
            <summary>
            Given the <paramref name="inputStream"/> this method returns a task which will asynchronously
            read the entire content of that stream and return a new synchronous stream from which the data can be read.
            </summary>
            <param name="inputStream">The input stream to asynchronously buffer.</param>
            <returns>A task which returns the buffered stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.ResetForReading">
            <summary>
            Resets the stream to the begining and prepares it for reading.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True if called from Dispose; false if called from the finalizer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.BufferInputStream">
            <summary>
            Returns enumeration of tasks to run to buffer the entire input stream.
            </summary>
            <returns>Enumeration of tasks to run to buffer the input stream.</returns>
            <remarks>This method relies on lazy eval of the enumerator, never enumerate through it synchronously.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.AddNewBuffer">
            <summary>
            Adds a new buffer to the list and makes it the current buffer.
            </summary>
            <returns>The newly added buffer.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.CanRead">
            <summary>
            Determines if the stream can read - this one can
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.CanSeek">
            <summary>
            Determines if the stream can seek - this one cannot
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.CanWrite">
            <summary>
            Determines if the stream can write - this one cannot
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.Length">
            <summary>
            Returns the length of the stream, which this implementation doesn't support.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.Position">
            <summary>
            Gets or sets the position in the stream, this stream doesn't support seeking, so position is also unsupported.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.BufferedReadStream.DataBuffer">
            <summary>
            Class to wrap a byte buffer used to store portion of the buffered data.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferedReadStream.DataBuffer.MinReadBufferSize">
            <summary>
            The minimum size to ask for when reading from underlying stream.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferedReadStream.DataBuffer.BufferSize">
            <summary>
            The size of a buffer to allocate - use 64KB to be aligned which makes it likely that the underlying levels
            will be able to process the request in one go.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.BufferedReadStream.DataBuffer.buffer">
            <summary>
            The byte buffer which stored the data.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.DataBuffer.#ctor">
            <summary>
            Constructor - creates a new buffer;
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.BufferedReadStream.DataBuffer.MarkBytesAsWritten(System.Int32)">
            <summary>
            Marks specified count of bytes as written starting at the OffsetToWriteTo.
            </summary>
            <param name="count">The number of bytes to mark as written.</param>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.DataBuffer.Buffer">
            <summary>
            The byte buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.DataBuffer.OffsetToWriteTo">
            <summary>
            The offset into the buffer to which more data can be written.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.DataBuffer.StoredCount">
            <summary>
            The number of bytes stored in the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.BufferedReadStream.DataBuffer.FreeBytes">
            <summary>
            The number of bytes not yet used in the buffer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Utils">
            <summary>
            Generic  utility methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Utils.TryDispose(System.Object)">
            <summary>
            Calls IDisposable.Dispose() on the argument if it is not null 
            and is an IDisposable.
            </summary>
            <param name="o">The instance to dispose.</param>
            <returns>'True' if IDisposable.Dispose() was called; 'false' otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Utils.FlushAsync(System.IO.Stream)">
            <summary>
            Asynchronously flushes a stream.
            </summary>
            <param name="stream">The stream to flush.</param>
            <returns>Task which represents the pending Flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Utils.StableSort``1(``0[],System.Comparison{``0})">
            <summary>
            Perform a stable sort of the <paramref name="array"/> using the specified <paramref name="comparison"/>.
            </summary>
            <typeparam name="T">The type of the items in the array to sort.</typeparam>
            <param name="array">The array to sort.</param>
            <param name="comparison">The comparison to use to compare items in the array</param>
            <returns>Array of KeyValuePairs where the sequence of Values is the sorted representation of <paramref name="array"/>.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Utils.StableComparer`1">
            <summary>
            Stable comparer of a sequence of key/value pairs where each pair 
            knows its position in the sequence and its value.
            </summary>
            <typeparam name="T">The type of the values in the sequence.</typeparam>
        </member>
        <member name="F:Microsoft.Data.OData.Utils.StableComparer`1.innerComparer">
            <summary>
            The <see cref="T:System.Comparison`1"/> to compare the values.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Utils.StableComparer`1.#ctor(System.Comparison{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="innerComparer">The <see cref="T:System.Comparison`1"/> to compare the values.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Utils.StableComparer`1.Compare(System.Collections.Generic.KeyValuePair{System.Int32,`0},System.Collections.Generic.KeyValuePair{System.Int32,`0})">
            <summary>
            Compares two key/value pairs by first comparing their value. If the values are equal,
            the position in the array determines the relative order (and preserves the original relative order).
            </summary>
            <param name="x">First key/value pair.</param>
            <param name="y">Second key/value pair.</param>
            <returns>
            A value &lt; 0 if <paramref name="x"/> is less than <paramref name="y"/>.
            The value 0 if <paramref name="x"/> is equal to <paramref name="y"/>. Note this only happens when comparing the same items when used in StableSort.
            A value &gt; 0 if <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <remarks>This method will never return the value 0 since the input sequence is constructed in a way
            that all key/value pairs have unique indeces.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.MetadataUtils">
            <summary>
            Class with utility methods for dealing with OData metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.TryGetODataAnnotation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String,System.String@)">
            <summary>
            Returns the annotation in the OData metadata namespace with the specified <paramref name="localName"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotation.</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to get the annotation from.</param>
            <param name="localName">The local name of the annotation to find.</param>
            <param name="value">The value of the annotation in the OData metadata namespace and with the specified <paramref name="localName"/>.</param>
            <returns>true if an annotation with the specified local name was found; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.SetODataAnnotation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String,System.String)">
            <summary>
            Sets the annotation with the OData metadata namespace and the specified <paramref name="localName"/> on the <paramref name="annotatable"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations."/&gt;</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to set the annotation on.</param>
            <param name="localName">The local name of the annotation to set.</param>
            <param name="value">The value of the annotation to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.GetODataAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets all the serializable annotations in the OData metadata namespace on the <paramref name="annotatable"/>.
            </summary>
            <param name="model">The <see cref="T:Microsoft.Data.Edm.IEdmModel"/> containing the annotations."/&gt;</param>
            <param name="annotatable">The <see cref="T:Microsoft.Data.Edm.IEdmElement"/> to get the annotations from.</param>
            <returns>All annotations in the OData metadata namespace; or null if no annotations are found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.GetEdmType(Microsoft.Data.OData.ODataAnnotatable)">
            <summary>
            Gets the EDM type of an OData instance from the <see cref="T:Microsoft.Data.OData.ODataTypeAnnotation"/> of the instance (if available).
            </summary>
            <param name="annotatable">The OData instance to get the EDM type for.</param>
            <returns>The EDM type of the <paramref name="annotatable"/> if available in the <see cref="T:Microsoft.Data.OData.ODataTypeAnnotation"/> annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.ResolveTypeNameForWrite(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Resolves the name of a primitive, complex, entity or collection type to the respective type. Uses the semantics used by writers.
            Thus it implements the strict speced behavior.
            </summary>
            <param name="model">The model to use.</param>
            <param name="typeName">The name of the type to resolve.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the type specified by the <paramref name="typeName"/>;
            or null if no such type could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.ResolveTypeNameForRead(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmType,System.String,Microsoft.Data.OData.ODataReaderBehavior,Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.EdmTypeKind@)">
            <summary>
            Resolves the name of a primitive, complex, entity or collection type to the respective type. Uses the semantics used be readers.
            Thus it can be a bit looser.
            </summary>
            <param name="model">The model to use.</param>
            <param name="expectedType">The expected type for the type name being resolved, or null if none is available.</param>
            <param name="typeName">The name of the type to resolve.</param>
            <param name="readerBehavior">Reader behavior if the caller is a reader, null if no reader behavior is available.</param>
            <param name="version">The version of the payload being read.</param>
            <param name="typeKind">The type kind of the type, if it could be determined. This will be None if we couldn't tell. It might be filled
            even if the method returns null, for example for Collection types with item types which are not recognized.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the type specified by the <paramref name="typeName"/>;
            or null if no such type could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.ResolveTypeName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmType,System.String,System.Func{Microsoft.Data.Edm.IEdmType,System.String,Microsoft.Data.Edm.IEdmType},Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.EdmTypeKind@)">
            <summary>
            Resolves the name of a primitive, complex, entity or collection type to the respective type.
            </summary>
            <param name="model">The model to use.</param>
            <param name="expectedType">The expected type for the type name being resolved, or null if none is available.</param>
            <param name="typeName">The name of the type to resolve.</param>
            <param name="customTypeResolver">Custom type resolver to use, if null the model is used directly.</param>
            <param name="version">The version to use when resolving the type name.</param>
            <param name="typeKind">The type kind of the type, if it could be determined. This will be None if we couldn't tell. It might be filled
            even if the method returns null, for example for Collection types with item types which are not recognized.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmType"/> representing the type specified by the <paramref name="typeName"/>;
            or null if no such type could be found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.CalculateAlwaysBindableOperationsForType(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.OData.Metadata.EdmTypeResolver)">
            <summary>
            Calculates the operations that are always bindable to the given type.
            </summary>
            <param name="bindingType">The binding type in question.</param>
            <param name="model">The model to search for operations.</param>
            <param name="edmTypeResolver">The edm type resolver to get the parameter type.</param>
            <returns>An enumeration of operations that are always bindable to the given type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.LookupTypeOfValueTerm(System.String,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Looks up the given term name in the given model, and returns the term's type if a matching term was found.
            </summary>
            <param name="qualifiedTermName">The name of the term to lookup, including the namespace.</param>
            <param name="model">The model to look in.</param>
            <returns>The type of the term in the model, or null if no matching term was found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.MetadataUtils.GetNullablePayloadTypeReference(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Gets the nullable type reference for a payload type; if the payload type is null, uses Edm.String.
            </summary>
            <param name="payloadType">The payload type to get the type reference for.</param>
            <returns>The nullable <see cref="T:Microsoft.Data.Edm.IEdmTypeReference"/> for the <paramref name="payloadType"/>.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ValidationUtils">
            <summary>
            Class with utility methods for validating OData content (applicable for readers and writers).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ValidationUtils.MaxBoundaryLength">
            <summary>Maximum batch boundary length supported (not includeding leading CRLF or '-').</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ValidationUtils.InvalidCharactersInPropertyNames">
            <summary>The set of characters that are invalid in property names.</summary>
            <remarks>Keep this array in sync with MetadataProviderUtils.InvalidCharactersInPropertyNames in Astoria.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateOpenPropertyValue(System.String,System.Object)">
            <summary>
            Validates that an open property value is supported.
            </summary>
            <param name="propertyName">The name of the open property.</param>
            <param name="value">The value of the open property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateValueTypeKind(Microsoft.Data.Edm.EdmTypeKind,System.String)">
            <summary>
            Validates a type kind for a value type.
            </summary>
            <param name="typeKind">The type kind.</param>
            <param name="typeName">The name of the type (used for error reporting only).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateCollectionTypeName(System.String)">
            <summary>
            Validates that <paramref name="collectionTypeName"/> is a valid type name for a collection and returns its item type name.
            </summary>
            <param name="collectionTypeName">The name of the collection type.</param>
            <returns>The item type name for the <paramref name="collectionTypeName"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateEntityTypeIsAssignable(Microsoft.Data.Edm.IEdmEntityTypeReference,Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Validates that the <paramref name="payloadEntityTypeReference"/> is assignable to the <paramref name="expectedEntityTypeReference"/>
            and fails if it's not.
            </summary>
            <param name="expectedEntityTypeReference">The expected entity type reference, the base type of the entities expected.</param>
            <param name="payloadEntityTypeReference">The payload entity type reference to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateCollectionType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Validates that the <paramref name="typeReference"/> represents a collection type.
            </summary>
            <param name="typeReference">The type reference to validate.</param>
            <returns>The <see cref="T:Microsoft.Data.Edm.IEdmCollectionTypeReference"/> instance representing the collection passed as <paramref name="typeReference"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateCollectionItem(System.Object,System.Boolean)">
            <summary>
            Validates an item of a collection to ensure it is not of collection and stream reference types.
            </summary>
            <param name="item">The collection item.</param>
            <param name="isStreamable">True if the items in the collection are streamable, false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateNullCollectionItem(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.ODataWriterBehavior)">
            <summary>
            Validates a null collection item against the expected type.
            </summary>
            <param name="expectedItemType">The expected item type or null if no expected item type exists.</param>
            <param name="writerBehavior">The <see cref="T:Microsoft.Data.OData.ODataWriterBehavior"/> instance controlling the behavior of the writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateStreamReferenceProperty(Microsoft.Data.OData.ODataProperty,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Validates a stream reference property to ensure it's not null and its name if correct.
            </summary>
            <param name="streamProperty">The stream reference property to validate.</param>
            <param name="edmProperty">Property metadata to validate against.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateAssociationLinkNotNull(Microsoft.Data.OData.ODataAssociationLink)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataAssociationLink"/> to ensure it's not null.
            </summary>
            <param name="associationLink">The association link to ensure it's not null.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateAssociationLinkName(System.String)">
            <summary>
            Validates the name for an association link.
            </summary>
            <param name="associationLinkName">The name of the association link to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateAssociationLink(Microsoft.Data.OData.ODataAssociationLink)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataAssociationLink"/> to ensure all required information is specified and valid.
            </summary>
            <param name="associationLink">The association link to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.IncreaseAndValidateRecursionDepth(System.Int32@,System.Int32)">
            <summary>
            Increases the given recursion depth, and then verifies that it doesn't exceed the recursion depth limit.
            </summary>
            <param name="recursionDepth">The current depth of the payload element hierarchy.</param>
            <param name="maxDepth">The maximum allowed recursion depth.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateOperationNotNull(Microsoft.Data.OData.ODataOperation,System.Boolean)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataOperation"/> to ensure it's not null.
            </summary>
            <param name="operation">The operation to ensure it's not null.</param>
            <param name="isAction">Whether <paramref name="operation"/> is an <see cref="T:Microsoft.Data.OData.ODataAction"/>.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateOperationMetadataNotNull(Microsoft.Data.OData.ODataOperation)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataOperation"/> to ensure its metadata is specified and valid.
            </summary>
            <param name="operation">The operation to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateOperationTargetNotNull(Microsoft.Data.OData.ODataOperation)">
            <summary>
            Validates an <see cref="T:Microsoft.Data.OData.ODataOperation"/> to ensure its target is specified and valid.
            </summary>
            <param name="operation">The operation to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateEntryMetadataResource(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Validates that the specified <paramref name="entry"/> is a valid entry as per the specified type.
            </summary>
            <param name="entry">The entry to validate.</param>
            <param name="entityType">Optional entity type to validate the entry against.</param>
            <param name="model">Model containing the entity type.</param>
            <param name="validateMediaResource">true if the validation of the default MediaResource should be done; false otherwise.</param>
            <remarks>If the <paramref name="entityType"/> is available only entry-level tests are performed, properties and such are not validated.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateIsExpectedPrimitiveType(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Validates that a given primitive value is of the expected (primitive) type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="expectedTypeReference">The expected type for the value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateIsExpectedPrimitiveType(System.Object,Microsoft.Data.Edm.IEdmPrimitiveTypeReference,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Validates that a given primitive value is of the expected (primitive) type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="valuePrimitiveTypeReference">The primitive type reference for the value - some callers have this already, so we save the lookup here.</param>
            <param name="expectedTypeReference">The expected type for the value.</param>
            <remarks>
            Some callers have the primitive type reference already resolved (from the value type)
            so this method is an optimized version to not lookup the primitive type reference again.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateMetadataPrimitiveType(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Validates that the expected primitive type matches the actual primitive type.
            </summary>
            <param name="expectedTypeReference">The expected type.</param>
            <param name="typeReferenceFromValue">The actual type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateResourceCollectionInfo(Microsoft.Data.OData.ODataResourceCollectionInfo)">
            <summary>
            Validates a resource collection.
            </summary>
            <param name="collectionInfo">The resource collection to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateResourceCollectionInfoUrl(System.String)">
            <summary>
            Validates a resource collection Url.
            </summary>
            <param name="collectionInfoUrl">The resource collection url to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateTypeKind(Microsoft.Data.Edm.EdmTypeKind,Microsoft.Data.Edm.EdmTypeKind,System.String)">
            <summary>
            Validates that the observed type kind is the expected type kind.
            </summary>
            <param name="actualTypeKind">The actual type kind to compare.</param>
            <param name="expectedTypeKind">The expected type kind to compare against.</param>
            <param name="typeName">The name of the type to use in the error.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateBoundaryString(System.String)">
            <summary>
            Validates that a boundary delimiter is valid (non-null, less than 70 chars, only valid chars, etc.)
            </summary>
            <param name="boundary">The boundary delimiter to test.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ShouldValidateComplexPropertyNullValue(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Null validation of complex properties will be skipped if edm version is less than v3 and data service version exists.
            In such cases, the provider decides what should be done if a null value is stored on a non-nullable complex property.
            </summary>
            <param name="model">The model containing the complex property.</param>
            <returns>True if complex property should be validated for null values.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.IsValidPropertyName(System.String)">
            <summary>
            Validates that a property name is valid in OData.
            </summary>
            <param name="propertyName">The property name to validate.</param>
            <returns>true if the property name is valid, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidatePropertyName(System.String)">
            <summary>
            Validates a property name to check whether it contains reserved characters.
            </summary>
            <param name="propertyName">The property name to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ValidationUtils.ValidateTotalEntityPropertyMappingCount(Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCache,Microsoft.Data.OData.Metadata.ODataEntityPropertyMappingCollection,System.Int32)">
            <summary>
            Validates that the total number of entity property mapping attributes on the base entity type and the current
            entity type does not exceed the specified security limit.
            </summary>
            <param name="baseCache">The EPM cache of the base entity type or null if no base entity type exists.</param>
            <param name="mappings">The EPM collection of the current entity type.</param>
            <param name="maxMappingCount">The maximum number of mappings allowed for an entity type (on the type itself and all its base types).</param>
            <returns>The total number of entity property mappings for the current entity type.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.WriterUtils">
            <summary>
            Class with utility methods for writing OData content.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.WriterUtils.ShouldSkipProperty(Microsoft.Data.OData.ProjectedPropertiesAnnotation,System.String)">
            <summary>
            Determines if a property should be written or skipped.
            </summary>
            <param name="projectedProperties">The projected properties annotation to use (can be null).</param>
            <param name="propertyName">The name of the property to check.</param>
            <returns>true if the property should be skipped, false to write the property.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.MediaTypeUtils">
            <summary>
            Class with utility methods to work with media types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeUtils.allSupportedPayloadKinds">
            <summary>An array of all the supported payload kinds.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeUtils.encodingUtf8NoPreamble">
            <summary>UTF-8 encoding, without the BOM preamble.</summary>
            <remarks>
            While a BOM preamble on UTF8 is generally benign, it seems that some MIME handlers under IE6 will not 
            process the payload correctly when included.
            
            Because the data service should include the encoding as part of the Content-Type in the response,
            there should be no ambiguity as to what encoding is being used.
            
            For further information, see http://www.unicode.org/faq/utf_bom.html#BOM.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.GetContentTypeFromSettings(Microsoft.Data.OData.ODataMessageWriterSettings,Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.MediaTypeResolver,Microsoft.Data.OData.MediaType@,System.Text.Encoding@)">
            <summary>
            Given the Accept and the Accept-Charset headers of the request message computes the media type, encoding and <see cref="T:Microsoft.Data.OData.ODataFormat"/>
            to be used for the response message.
            </summary>
            <param name="settings">The message writer settings to use for serializing the response payload.</param>
            <param name="payloadKind">The kind of payload to be serialized as part of the response message.</param>
            <param name="mediaTypeResolver">The media type resolver to use when interpreting the content type.</param>
            <param name="mediaType">The media type to be used in the response message.</param>
            <param name="encoding">The encoding to be used in the response message.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.ODataFormat"/> used when serializing the response.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.GetFormatFromContentType(System.String,Microsoft.Data.OData.ODataPayloadKind[],Microsoft.Data.OData.MediaTypeResolver,Microsoft.Data.OData.MediaType@,System.Text.Encoding@,Microsoft.Data.OData.ODataPayloadKind@,System.String@)">
            <summary>
            Determine the <see cref="T:Microsoft.Data.OData.ODataFormat"/> to use for the given <paramref name="contentTypeHeader"/>. If no supported content type
            is found an exception is thrown.
            </summary>
            <param name="contentTypeHeader">The name of the content type to be checked.</param>
            <param name="supportedPayloadKinds">All possiblel kinds of payload that can be read with this content type.</param>
            <param name="mediaTypeResolver">The media type resolver to use when interpreting the content type.</param>
            <param name="mediaType">The media type parsed from the <paramref name="contentTypeHeader"/>.</param>
            <param name="encoding">The encoding from the content type or the default encoding for the <paramref name="mediaType"/>.</param>
            <param name="selectedPayloadKind">
            The payload kind that was selected form the list of <paramref name="supportedPayloadKinds"/> for the 
            specified <paramref name="contentTypeHeader"/>.
            </param>
            <param name="batchBoundary">The batch boundary read from the content type for batch payloads; otherwise null.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.ODataFormat"/> for the <paramref name="contentTypeHeader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.GetPayloadKindsForContentType(System.String,Microsoft.Data.OData.MediaTypeResolver,Microsoft.Data.OData.MediaType@,System.Text.Encoding@)">
            <summary>
            Gets all payload kinds and their corresponding formats that match the specified content type header.
            </summary>
            <param name="contentTypeHeader">The content type header to get the payload kinds for.</param>
            <param name="mediaTypeResolver">The media type resolver to use when interpreting the content type.</param>
            <param name="contentType">The parsed content type as <see cref="T:Microsoft.Data.OData.MediaType"/>.</param>
            <param name="encoding">The encoding from the content type or the default encoding from <see cref="T:Microsoft.Data.OData.MediaType"/>.</param>
            <returns>The list of payload kinds and formats supported for the specified <paramref name="contentTypeHeader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeAndSubtypeAreEqual(System.String,System.String)">
            <summary>
            Checks whether two media types with subtypes (but without parameters) are equal.
            </summary>
            <param name="firstTypeAndSubtype">The first media type and subtype.</param>
            <param name="secondTypeAndSubtype">The second media type and subtype.</param>
            <returns>true if the <paramref name="firstTypeAndSubtype"/> is equal to <paramref name="secondTypeAndSubtype"/>; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeStartsWithTypeAndSubtype(System.String,System.String)">
            <summary>
            Checks whether a media type starts with the expected type and subtype.
            </summary>
            <param name="mediaType">The media type to check.</param>
            <param name="typeAndSubtype">The type and subtype the <paramref name="mediaType"/> should start with.</param>
            <returns>true if the <paramref name="mediaType"/> starts with <paramref name="typeAndSubtype"/>; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeHasParameterWithValue(Microsoft.Data.OData.MediaType,System.String,System.String)">
            <summary>
            Checks whether the specified media type has a parameter with the expected value.
            </summary>
            <param name="mediaType">The media type to check the parameters for.</param>
            <param name="parameterName">The name of the expected parameter.</param>
            <param name="parameterValue">The value of the expected parameter.</param>
            <returns>true if the <paramref name="mediaType"/> has a parameter called <paramref name="parameterName"/> 
            with value <paramref name="parameterValue"/>; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.HasStreamingSetToTrue(Microsoft.Data.OData.MediaType)">
            <summary>
            Determines whether the media type has a 'streaming' parameter with the value 'true'.
            </summary>
            <param name="mediaType">The media type to check.</param>
            <returns>
              <c>true</c> if  the media type has a 'streaming' parameter with the value 'true'; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.CheckMediaTypeForWildCards(Microsoft.Data.OData.MediaType)">
            <summary>
            Checks for wildcard characters in the <see cref="T:Microsoft.Data.OData.MediaType"/>.
            </summary>
            <param name="mediaType">The <see cref="T:Microsoft.Data.OData.MediaType"/> to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.AlterContentTypeForJsonPadding(System.String)">
            <summary>
            JSONP - instead of writing 'application/json', we write 'text/javascript'. In all other ways we pretend it is JSON
            </summary>
            <param name="contentType">Original content-type value string.</param>
            <returns>New content-type value string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.GetFormatFromContentType(System.String,Microsoft.Data.OData.ODataPayloadKind[],Microsoft.Data.OData.MediaTypeResolver,Microsoft.Data.OData.MediaType@,System.Text.Encoding@,Microsoft.Data.OData.ODataPayloadKind@)">
            <summary>
            Determine the <see cref="T:Microsoft.Data.OData.ODataFormat"/> to use for the given <paramref name="contentTypeName"/>. If no supported content type
            is found an exception is thrown.
            </summary>
            <param name="contentTypeName">The name of the content type to be checked.</param>
            <param name="supportedPayloadKinds">All possiblel kinds of payload that can be read with this content type.</param>
            <param name="mediaTypeResolver">The media type resolver to use when interpreting the content type.</param>
            <param name="mediaType">The media type parsed from the <paramref name="contentTypeName"/>.</param>
            <param name="encoding">The encoding from the content type or the default encoding for the <paramref name="mediaType"/>.</param>
            <param name="selectedPayloadKind">
            The payload kind that was selected form the list of <paramref name="supportedPayloadKinds"/> for the 
            specified <paramref name="contentTypeName"/>.
            </param>
            <returns>The <see cref="T:Microsoft.Data.OData.ODataFormat"/> for the <paramref name="contentTypeName"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.ParseContentType(System.String,System.String@)">
            <summary>
            Parses the specified content type header into a media type instance.
            </summary>
            <param name="contentTypeHeader">The content type header to parse.</param>
            <param name="charset">The optional charset specified with the content type.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.MediaType"/> of the parsed <paramref name="contentTypeHeader"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.GetDefaultMediaType(System.Collections.Generic.IList{Microsoft.Data.OData.MediaTypeWithFormat},Microsoft.Data.OData.ODataFormat,Microsoft.Data.OData.ODataFormat@)">
            <summary>
            Gets the default media type for a given payload kind in a given format.
            </summary>
            <param name="supportedMediaTypes">A list of supported media types and formats.</param>
            <param name="specifiedFormat">The user-specified format in which to write the payload (can be null).</param>
            <param name="actualFormat">The default format for the specified payload kind</param>
            <returns>The default media type for the given payload kind and format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.GetEncoding(System.String,Microsoft.Data.OData.ODataPayloadKind,Microsoft.Data.OData.MediaType,System.Boolean)">
            <summary>
            Parses the accepted charsets and matches them against the supported encodings for the given <paramref name="payloadKind"/>.
            </summary>
            <param name="acceptCharsetHeader">The Accept-Charset header of the request.</param>
            <param name="payloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> for which to compute the encoding.</param>
            <param name="mediaType">The media type used to compute the default encoding for the payload.</param>
            <param name="useDefaultEncoding">true if the default encoding should be returned if no acceptable charset is found; otherwise false.</param>
            <returns>The encoding to be used for the response.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MatchMediaTypes(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.MediaType},Microsoft.Data.OData.MediaType[])">
            <summary>
            Matches the supported media types against the list of media types specified in the Accept header or ContentType header of the message. Matching follows the
            rules for media type matching as described in RFC 2616.
            </summary>
            <param name="sourceTypes">The set of media types to be matched against the <paramref name="targetTypes"/>.</param>
            <param name="targetTypes">The set of media types the <paramref name="sourceTypes"/> will be matched against.</param>
            <returns>The best <see cref="T:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo"/> found during the matching process or null if no match was found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.ConvertApplicationJsonInAcceptableMediaTypes(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{Microsoft.Data.OData.MediaType,System.String}})">
            <summary>
            Converts all occurrences of the 'application/json' media type to 'application/json;odata=minimalmetadata'.
            This is necessary because for an accept header 'application/json, application/json;odata=verbose' 
            we want the result to be 'application/json;odata=minimalmetadata' although this is not compliant with the 
            default conneg rules (where application/json;odata=verbose would win).
            </summary>
            <param name="specifiedTypes">The parsed acceptable media types.</param>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeUtils.EncodingUtf8NoPreamble">
            <summary>UTF-8 encoding, without the BOM preamble.</summary>
            <remarks>
            While a BOM preamble on UTF8 is generally benign, it seems that some MIME handlers under IE6 will not 
            process the payload correctly when included.
            
            Because the data service should include the encoding as part of the Content-Type in the response,
            there should be no ambiguity as to what encoding is being used.
            
            For further information, see http://www.unicode.org/faq/utf_bom.html#BOM.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo">
            <summary>
            Class representing the result of matching two <see cref="T:Microsoft.Data.OData.MediaType"/> instances.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.DefaultQualityValue">
            <summary>The default quality value (in the normalized range from 0 .. 1000).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.sourceIndex">
            <summary>Index of the source type in the list of all source types.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.targetIndex">
            <summary>Index of the target type in the list of all target types.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.#ctor(Microsoft.Data.OData.MediaType,Microsoft.Data.OData.MediaType,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceType">The source <see cref="T:Microsoft.Data.OData.MediaType"/> to match against the target type.</param>
            <param name="targetType">The target <see cref="T:Microsoft.Data.OData.MediaType"/> to match against the source type.</param>
            <param name="sourceIndex">Index of the source type in the list of all source types.</param>
            <param name="targetIndex">Index of the target type in the list of all target types.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.CompareTo(Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo)">
            <summary>
            Implementation of <see cref="T:System.IComparable`1"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo"/> to compare against.</param>
            <returns>
            -1 if this instance is a worse match than <paramref name="other"/>.
            0 if both matches are the same.
            1 if <paramref name="other"/> is a better match than this instance.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.ParseQualityValue(System.String)">
            <summary>Selects a quality value for the specified type.</summary>
            <param name="qualityValueText">The text representation of the quality value.</param>
            <returns>The quality value, in range from 0 through 1000.</returns>
            <remarks>See http://tools.ietf.org/html/rfc2616#section-14.1 for further details.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.TryFindMediaTypeParameter(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String@)">
            <summary>
            Tries to find a parameter with the specified <paramref name="parameterName"/> in the given list <paramref name="parameters"/> of parameters.
            Does not include accept extensions (i.e., parameters after the q quality value parameter)
            </summary>
            <param name="parameters">The list of parameters to search.</param>
            <param name="parameterName">The name of the parameter to find.</param>
            <param name="parameterValue">The parameter value of the parameter with the specified <paramref name="parameterName"/>.</param>
            <returns>True if a parameter with the specified <paramref name="parameterName"/> was found; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.IsQualityValueParameter(System.String)">
            <summary>
            Returns a flag indicating whether a given media type parameter name is the Http quality value parameter.
            </summary>
            <param name="parameterName">The parameter name to check.</param>
            <returns>True if the parameter name is for the quality value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.MatchTypes(Microsoft.Data.OData.MediaType,Microsoft.Data.OData.MediaType)">
            <summary>
            Matches the source type against the media type.
            </summary>
            <param name="sourceType">The source <see cref="T:Microsoft.Data.OData.MediaType"/> to match against the target type.</param>
            <param name="targetType">The target <see cref="T:Microsoft.Data.OData.MediaType"/> to match against the source type.</param>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.SourceTypeIndex">
            <summary>
            Index of the source type in the list of all source types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.TargetTypeIndex">
            <summary>
            Index of the target type in the list of all target types.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.MatchingTypeNamePartCount">
            <summary>
            Represents the number of non-* matching type name parts or -1 if not matching at all.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.MatchingParameterCount">
            <summary>
            Represents the number of matching parameters or -1 if neither the source type nor the target type have parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.QualityValue">
            <summary>The quality value of the target type (or -1 if none is specified).</summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.SourceTypeParameterCountForMatching">
            <summary>
            The number of parameters of the source type that are used for comparison. All accept-parameters are ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo.IsMatch">
            <summary>
            true if this <see cref="T:Microsoft.Data.OData.MediaTypeUtils.MediaTypeMatchInfo"/> represents a valid match (i.e., the source and target types match/are compatible); otherwise false.
            </summary>
            <remarks>
            Two types are considered compatible if at least one type name part matches (or we are dealing with a wildcard)
            and all the parameters in the source type have been matched.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataEntityReferenceLinks">
            <summary>
            Represents a collection of entity reference links (the result of a $links query).
            Might include an inline count and a next link.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntityReferenceLinks.serializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinks.Count">
            <summary>Gets or sets the optional inline count of the $links collection.</summary>
            <returns>The optional inline count of the $links collection.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinks.NextPageLink">
            <summary>Gets or sets the optional next link of the $links collection.</summary>
            <returns>The optional next link of the $links collection.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinks.Links">
            <summary>Gets or sets the enumerable of <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink" /> instances representing the links of the referenced entities.</summary>
            <returns>The enumerable of <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink" /> instances.</returns>
            <remarks>These links should be usable to retrieve or modify the referenced entities.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLinks.SerializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLinks"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataEntityReferenceLink">
            <summary>
            Represents an entity reference link (the result of a $link query).
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataItem">
            <summary>
            Base class for Feed and Entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntityReferenceLink.serializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLink.Url">
            <summary>Gets or sets the URI representing the URL of the referenced entity.</summary>
            <returns>The URI representing the URL of the referenced entity.</returns>
            <remarks>This URL should be usable to retrieve or modify the referenced entity.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntityReferenceLink.SerializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataEntityReferenceLink"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.IODataRequestMessage">
            <summary>
            Interface for synchronous OData request messages.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataRequestMessage.GetHeader(System.String)">
            <summary>Returns a value of an HTTP header.</summary>
            <returns>The value of the HTTP header, or null if no such header was present on the message.</returns>
            <param name="headerName">The name of the header to get.</param>
        </member>
        <member name="M:Microsoft.Data.OData.IODataRequestMessage.SetHeader(System.String,System.String)">
            <summary>Sets the value of an HTTP header.</summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value of the HTTP header or 'null' if the header should be removed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.IODataRequestMessage.GetStream">
            <summary>Gets the stream backing for this message.</summary>
            <returns>The stream backing for this message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.IODataRequestMessage.Headers">
            <summary>Gets an enumerable over all the headers for this message.</summary>
            <returns>An enumerable over all the headers for this message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.IODataRequestMessage.Url">
            <summary>Gets or sets the request URL for this request message.</summary>
            <returns>The request URL for this request message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.IODataRequestMessage.Method">
            <summary>Gets or sets the HTTP method used for this request message.</summary>
            <returns>The HTTP method used for this request message.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.IODataResponseMessage">
            <summary>
            Interface for synchronous OData response messages.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataResponseMessage.GetHeader(System.String)">
            <summary>Returns a value of an HTTP header.</summary>
            <returns>The value of the HTTP header, or null if no such header was present on the message.</returns>
            <param name="headerName">The name of the header to get.</param>
        </member>
        <member name="M:Microsoft.Data.OData.IODataResponseMessage.SetHeader(System.String,System.String)">
            <summary>Sets the value of an HTTP header.</summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value of the HTTP header or 'null' if the header should be removed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.IODataResponseMessage.GetStream">
            <summary>Gets the stream backing for this message.</summary>
            <returns>The stream backing for this message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.IODataResponseMessage.Headers">
            <summary>Gets an enumerable over all the headers for this message.</summary>
            <returns>An enumerable over all the headers for this message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.IODataResponseMessage.StatusCode">
            <summary>Gets or sets the result status code of the response message.</summary>
            <returns>The result status code of the response message.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationMessage">
            <summary>
            Implementation class wrapped by the <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage"/> and 
            <see cref="T:Microsoft.Data.OData.ODataBatchOperationResponseMessage"/> implementations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessage">
            <summary>
            Base class for the internal wrappers around IODataRequestMessageAsync and IODataResponseMessageAsync.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessage.writing">
            <summary>true if the message is being written; false when it is read.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessage.disableMessageStreamDisposal">
            <summary>true if the stream returned should ignore dispose calls.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessage.maxMessageSize">
            <summary>The maximum size of the message in bytes (or null if no maximum applies).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessage.useBufferingReadStream">
            <summary>true to use a buffering read stream wrapper around the actual message stream; otherwise false.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessage.bufferingReadStream">
            <summary>The buffering read stream used for payload kind detection; only non-null inside of payload kind detection.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.#ctor(System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Constructs a new ODataMessage.
            </summary>
            <param name="writing">true if the message is being written; false when it is read.</param>
            <param name="disableMessageStreamDisposal">true if the stream returned should ignore dispose calls.</param>
            <param name="maxMessageSize">The maximum size of the message in bytes (or a negative value if no maximum applies).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.GetHeader(System.String)">
            <summary>
            Returns a value of an HTTP header.
            </summary>
            <param name="headerName">The name of the header to get.</param>
            <returns>The value of the HTTP header, or null if no such header was present on the message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of an HTTP header.
            </summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value for the header with name <paramref name="headerName"/>.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.GetStream">
            <summary>
            Get the stream backing this message.
            </summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.GetStreamAsync">
            <summary>
            Asynchronously get the stream backing this message.
            </summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.QueryInterface``1">
            <summary>
            Queries the message for the specified interface type.
            </summary>
            <typeparam name="TInterface">The type of the interface to query for.</typeparam>
            <returns>The instance of the interface asked for or null if it was not implemented by the message.</returns>
            <remarks>We need this method since the input contexts don't get access to the actual instance of the message given to us by the user
            instead they get this class, and thus they can't just cast to get to the interface they want.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.GetStream(System.Func{System.IO.Stream},System.Boolean)">
            <summary>
            Synchronously get the stream backing this message.
            </summary>
            <param name="messageStreamFunc">A function that returns the stream backing the message.</param>
            <param name="isRequest">true if the message is a request message; false for a response message.</param>
            <returns>The <see cref="T:System.IO.Stream"/> backing the message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.GetStreamAsync(System.Func{System.Threading.Tasks.Task{System.IO.Stream}},System.Boolean)">
            <summary>
            Asynchronously get the stream backing this message.
            </summary>
            <param name="streamFuncAsync">A function that returns a task for the stream backing the message.</param>
            <param name="isRequest">true if the message is a request message; false for a response message.</param>
            <returns>A task that when completed returns the stream backing the message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.VerifyCanSetHeader">
            <summary>
            Verifies that setting a header is allowed
            </summary>
            <remarks>
            We allow modifying the headers only if we are writing the message and we are not
            detecting the payload kind.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.ValidateMessageStream(System.IO.Stream,System.Boolean)">
            <summary>
            Validates that a given message stream can be used.
            </summary>
            <param name="stream">The stream to validate.</param>
            <param name="isRequest">true if the message is a request message; false for a response message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.ValidateMessageStreamTask(System.Threading.Tasks.Task{System.IO.Stream},System.Boolean)">
            <summary>
            Validates that a given task providing the message stream can be used.
            </summary>
            <param name="streamTask">The task to validate.</param>
            <param name="isRequest">true if the message is a request message; false for a response message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessage.TryGetBufferingReadStream">
            <summary>
            Gets the buffering read stream if one is available; otherwise returns null.
            </summary>
            <returns>The <see cref="P:Microsoft.Data.OData.ODataMessage.BufferingReadStream"/> currently being used or null if no buffering stream is currently being used.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessage.Headers">
            <summary>
            Returns an enumerable over all the headers for this message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessage.BufferingReadStream">
            <summary>
            true to use a buffering read stream wrapper around the actual message stream; otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessage.UseBufferingReadStream">
            <summary>
            true to use a buffering read stream wrapper around the actual message stream; otherwise false.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationMessage.operationListener">
            <summary>Listener interface to be notified of operation changes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationMessage.urlResolver">
            <summary>The URL resolver to perform custom URL resolution for URLs read or written from/to the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationMessage.contentStreamCreatorFunc">
            <summary>A function to retrieve the content stream for this batch operation message.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationMessage.headers">
            <summary>The set of headers for this operation.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.#ctor(System.Func{System.IO.Stream},Microsoft.Data.OData.ODataBatchOperationHeaders,Microsoft.Data.OData.IODataBatchOperationListener,Microsoft.Data.OData.IODataUrlResolver,System.Boolean)">
            <summary>
            Constructor. Base class constructor to create a message for an operation of a batch request/response.
            </summary>
            <param name="contentStreamCreatorFunc">A function to retrieve the content stream for this batch operation message.</param>
            <param name="headers">The headers of the batch operation message.</param>
            <param name="operationListener">Listener interface to be notified of part changes.</param>
            <param name="urlResolver">The URL resolver to perform custom URL resolution for URLs read or written from/to the payload.</param>
            <param name="writing">true if the request message is being written; false when it is read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.GetHeader(System.String)">
            <summary>
            Returns a value of an HTTP header of this operation.
            </summary>
            <param name="headerName">The name of the header to get.</param>
            <returns>The value of the HTTP header, or null if no such header was present on the message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of an HTTP header of this operation.
            </summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value of the HTTP header or 'null' if the header should be removed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.GetStream">
            <summary>
            Get the stream backing this message.
            </summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.GetStreamAsync">
            <summary>
            Asynchronously get the stream backing this message.
            </summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.QueryInterface``1">
            <summary>
            Queries the message for the specified interface type.
            </summary>
            <typeparam name="TInterface">The type of the interface to query for.</typeparam>
            <returns>The instance of the interface asked for or null if it was not implemented by the message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.ResolveUrl(System.Uri,System.Uri)">
            <summary>
            Method to implement a custom URL resolution scheme.
            This method returns null if not custom resolution is desired.
            If the method returns a non-null URL that value will be used without further validation.
            </summary>
            <param name="baseUri">The (optional) base URI to use for the resolution.</param>
            <param name="payloadUri">The URI read from the payload.</param>
            <returns>
            A <see cref="T:System.Uri"/> instance that reflects the custom resolution of the method arguments
            into a URL or null if no custom resolution is desired; in that case the default resolution is used.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.PartHeaderProcessingCompleted">
            <summary>
            Indicates that the headers and request/response line have been read or written.
            Can be called only once per batch part and headers cannot be modified 
            anymore after this method was called.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationMessage.VerifyNotCompleted">
            <summary>
            Verifies that writing of the message has not been completed; this is called from all methods
            that are only valid to be called before the message content is written or the message
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationMessage.Headers">
            <summary>
            Returns an enumerable over all the headers for this message.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationResponseMessage">
            <summary>
            Message representing an operation in a batch response.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.IODataResponseMessageAsync">
            <summary>
            Interface for asynchronous OData response messages.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataResponseMessageAsync.GetStreamAsync">
            <summary>Asynchronously get the stream backing for this message.</summary>
            <returns>The stream backing for this message.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationResponseMessage.message">
            <summary>
            The actual implementation of the message.
            We don't derive from this class since we want the actual implementation to remain internal
            while this class is public.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationResponseMessage.statusCode">
            <summary>The result status code of the response message.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationResponseMessage.#ctor(System.Func{System.IO.Stream},Microsoft.Data.OData.ODataBatchOperationHeaders,Microsoft.Data.OData.IODataBatchOperationListener,Microsoft.Data.OData.IODataUrlResolver,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="contentStreamCreatorFunc">A function to retrieve the content stream for this batch operation message.</param>
            <param name="headers">The headers of the batch operation message.</param>
            <param name="operationListener">Listener interface to be notified of part changes.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <param name="writing">true if the request message is being written; false when it is read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationResponseMessage.GetHeader(System.String)">
            <summary>Returns a value of an HTTP header of this operation.</summary>
            <returns>The value of the HTTP header, or null if no such header was present on the message.</returns>
            <param name="headerName">The name of the header to get.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationResponseMessage.SetHeader(System.String,System.String)">
            <summary>Sets the value of an HTTP header of this operation.</summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value of the HTTP header or null if the header should be removed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationResponseMessage.GetStream">
            <summary>Gets the stream backing for this message.</summary>
            <returns>The stream backing for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationResponseMessage.GetStreamAsync">
            <summary>Asynchronously get the stream backing for this message.</summary>
            <returns>The stream backing for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationResponseMessage.Microsoft#Data#OData#IODataUrlResolver#ResolveUrl(System.Uri,System.Uri)">
            <summary> Method to implement a custom URL resolution scheme. This method returns null if not custom resolution is desired. If the method returns a non-null URL that value will be used without further validation. </summary>
            <returns> A <see cref="T:System.Uri" /> instance that reflects the custom resolution of the method arguments into a URL or null if no custom resolution is desired; in that case the default resolution is used. </returns>
            <param name="baseUri">The (optional) base URI to use for the resolution.</param>
            <param name="payloadUri">The URI read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationResponseMessage.CreateWriteMessage(System.IO.Stream,Microsoft.Data.OData.IODataBatchOperationListener,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an operation response message that can be used to write the operation content to.
            </summary>
            <param name="outputStream">The output stream underlying the operation message.</param>
            <param name="operationListener">The operation listener.</param>
            <param name="urlResolver">The (optional) URL resolver for the message to create.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataBatchOperationResponseMessage"/> that can be used to write the operation content.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationResponseMessage.CreateReadMessage(Microsoft.Data.OData.ODataBatchReaderStream,System.Int32,Microsoft.Data.OData.ODataBatchOperationHeaders,Microsoft.Data.OData.IODataBatchOperationListener,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an operation response message that can be used to read the operation content from.
            </summary>
            <param name="batchReaderStream">The batch stream underyling the operation response message.</param>
            <param name="statusCode">The status code to use for the operation response message.</param>
            <param name="headers">The headers to use for the operation response message.</param>
            <param name="operationListener">The operation listener.</param>
            <param name="urlResolver">The (optional) URL resolver for the message to create.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataBatchOperationResponseMessage"/> that can be used to read the operation content.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationResponseMessage.StatusCode">
            <summary>Gets or sets the result status code of the response message.</summary>
            <returns>The result status code of the response message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationResponseMessage.Headers">
            <summary>Gets an enumerable over all the headers for this message.</summary>
            <returns>An enumerable over all the headers for this message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationResponseMessage.OperationMessage">
            <summary>
            Returns the actual operation message which is being wrapped.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage">
            <summary>
            Message representing an operation in a batch request.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.IODataRequestMessageAsync">
            <summary>
            Interface for asynchronous OData request messages.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.IODataRequestMessageAsync.GetStreamAsync">
            <summary>Asynchronously get the stream backing for this message.</summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchOperationRequestMessage.message">
            <summary>
            The actual implementation of the message.
            We don't derive from this class since we want the actual implementation to remain internal
            while this class is public.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationRequestMessage.#ctor(System.Func{System.IO.Stream},System.String,System.Uri,Microsoft.Data.OData.ODataBatchOperationHeaders,Microsoft.Data.OData.IODataBatchOperationListener,Microsoft.Data.OData.IODataUrlResolver,System.Boolean)">
            <summary>
            Constructor. Creates a request message for an operation of a batch request.
            </summary>
            <param name="contentStreamCreatorFunc">A function to create the content stream.</param>
            <param name="method">The HTTP method used for this request message.</param>
            <param name="requestUrl">The request Url for this request message.</param>
            <param name="headers">The headers for the this request message.</param>
            <param name="operationListener">Listener interface to be notified of operation changes.</param>
            <param name="urlResolver">The optional URL resolver to perform custom URL resolution for URLs written to the payload.</param>
            <param name="writing">true if the request message is being written; false when it is read.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationRequestMessage.GetHeader(System.String)">
            <summary>Returns a value of an HTTP header of this operation.</summary>
            <returns>The value of the HTTP header, or null if no such header was present on the message.</returns>
            <param name="headerName">The name of the header to get.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationRequestMessage.SetHeader(System.String,System.String)">
            <summary>Sets the value of an HTTP header of this operation.</summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value of the HTTP header or 'null' if the header should be removed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationRequestMessage.GetStream">
            <summary>Gets the stream backing for this message.</summary>
            <returns>The stream backing for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationRequestMessage.GetStreamAsync">
            <summary>Asynchronously get the stream backing for this message.</summary>
            <returns>The stream backing for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationRequestMessage.Microsoft#Data#OData#IODataUrlResolver#ResolveUrl(System.Uri,System.Uri)">
            <summary>Implements a custom URL resolution scheme.</summary>
            <returns>A <see cref="T:System.Uri"/> instance that reflects the custom resolution of the method arguments into a URL or null if no custom resolution is desired; in that case the default resolution is used.</returns>
            <param name="baseUri">The (optional) base URI to use for the resolution.</param>
            <param name="payloadUri">The URI read from the payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationRequestMessage.CreateWriteMessage(System.IO.Stream,System.String,System.Uri,Microsoft.Data.OData.IODataBatchOperationListener,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an operation request message that can be used to write the operation content to.
            </summary>
            <param name="outputStream">The output stream underlying the operation message.</param>
            <param name="method">The HTTP method to use for the message to create.</param>
            <param name="requestUrl">The request URL for the message to create.</param>
            <param name="operationListener">The operation listener.</param>
            <param name="urlResolver">The (optional) URL resolver for the message to create.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage"/> to write the request content to.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchOperationRequestMessage.CreateReadMessage(Microsoft.Data.OData.ODataBatchReaderStream,System.String,System.Uri,Microsoft.Data.OData.ODataBatchOperationHeaders,Microsoft.Data.OData.IODataBatchOperationListener,Microsoft.Data.OData.IODataUrlResolver)">
            <summary>
            Creates an operation request message that can be used to read the operation content from.
            </summary>
            <param name="batchReaderStream">The batch stream underyling the operation response message.</param>
            <param name="method">The HTTP method to use for the message to create.</param>
            <param name="requestUrl">The request URL for the message to create.</param>
            <param name="headers">The headers to use for the operation request message.</param>
            <param name="operationListener">The operation listener.</param>
            <param name="urlResolver">The (optional) URL resolver for the message to create.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage"/> to read the request content from.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationRequestMessage.Headers">
            <summary>Gets an enumerable over all the headers for this message.</summary>
            <returns>An enumerable over all the headers for this message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationRequestMessage.Url">
            <summary>Gets or sets the request URL for this request message.</summary>
            <returns>The request URL for this request message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationRequestMessage.Method">
            <summary>Gets or Sets the HTTP method used for this request message.</summary>
            <returns>The HTTP method used for this request message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchOperationRequestMessage.OperationMessage">
            <summary>
            Returns the actual operation message which is being wrapped.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchWriterUtils">
            <summary>
            Helper methods used by the ODataBatchWriter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriterUtils.CreateBatchBoundary(System.Boolean)">
            <summary>
            Creates a new batch boundary string based on a randomly created GUID.
            </summary>
            <param name="isResponse">A flag indicating whether the boundary should be created for a request or a resonse.</param>
            <returns>The newly created batch boundary as string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriterUtils.CreateChangeSetBoundary(System.Boolean)">
            <summary>
            Creates a new changeset boundary string based on a randomly created GUID.
            </summary>
            <param name="isResponse">A flag indicating whether the boundary should be created for a request or a resonse.</param>
            <returns>The newly created changeset boundary as string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriterUtils.CreateMultipartMixedContentType(System.String)">
            <summary>
            Creates the multipart/mixed content type with the specified boundary (if any).
            </summary>
            <param name="boundary">The boundary to be used for this operation or null if no boundary should be included.</param>
            <returns>The multipart/mixed content type with the specified boundary (if any).</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriterUtils.WriteStartBoundary(System.IO.TextWriter,System.String,System.Boolean)">
            <summary>
            Write the start boundary.
            </summary>
            <param name="writer">Writer to which the boundary needs to be written.</param>
            <param name="boundary">Boundary string.</param>
            <param name="firstBoundary">true if this is the first start boundary.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriterUtils.WriteEndBoundary(System.IO.TextWriter,System.String,System.Boolean)">
            <summary>
            Write the end boundary.
            </summary>
            <param name="writer">Writer to which the end boundary needs to be written.</param>
            <param name="boundary">Boundary string.</param>
            <param name="missingStartBoundary">true if there was no start boundary written before this end boundary.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriterUtils.WriteRequestPreamble(System.IO.TextWriter,System.String,System.Uri)">
            <summary>
            Writes the headers, (optional) Content-ID and the request line
            </summary>
            <param name="writer">Writer to write to.</param>
            <param name="httpMethod">The Http method to be used for this request operation.</param>
            <param name="uri">The Uri to be used for this request operation.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriterUtils.WriteResponsePreamble(System.IO.TextWriter)">
            <summary>
            Writes the headers and response line.
            </summary>
            <param name="writer">Writer to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriterUtils.WriteChangeSetPreamble(System.IO.TextWriter,System.String)">
            <summary>
            Writes the preamble for a change set (e.g., the content-type header).
            </summary>
            <param name="writer">Writer to write to.</param>
            <param name="changeSetBoundary">The boundary string to use for the change set.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo">
            <summary>
            Holds information needed during content serialization/deserialization for
            each EntityPropertyMappingAttribute.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.attribute">
            <summary>
            Private field backing Attribute property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.definingType">
            <summary>
            Private field backing DefiningType property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.actualPropertyType">
            <summary>
            Type whose property is to be read.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.propertyValuePath">
            <summary>
            Path to the property value. Stored as an array of source path segments which describe the path from the entry to the property in question.
            If this mapping is for a non-collection property or for the collection property itself, this path starts at the entity resource (not including the root segment).
            If this mapping is for a collection item property, this path starts at the collection item. In this case empty path is allowed, meaning the item itself.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.isSyndicationMapping">
            <summary>
            Set to true if this info describes mapping to a syndication item, or false if it describes a custom mapping
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.#ctor(System.Data.Services.Common.EntityPropertyMappingAttribute,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates instance of EntityPropertyMappingInfo class.
            </summary>
            <param name="attribute">The <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> corresponding to this object</param>
            <param name="definingType">Type the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> was defined on.</param>
            <param name="actualTypeDeclaringProperty">Type whose property is to be read. This can be different from defining type when inheritance is involved.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.SetPropertyValuePath(Microsoft.Data.OData.Metadata.EpmSourcePathSegment[])">
            <summary>
            Sets path to the source property.
            </summary>
            <param name="path">The path as an array of source path segments.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.DefiningTypesAreEqual(Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo)">
            <summary>Compares the defining type of this info and other EpmInfo object.</summary>
            <param name="other">The other EpmInfo object to compare to.</param>
            <returns>true if the defining types are the same</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.Attribute">
            <summary>
            The <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> corresponding to this object.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.DefiningType">
            <summary>
            Entity type that has the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.ActualPropertyType">
            <summary>
            Entity type whose property is to be read.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.PropertyValuePath">
            <summary>
            Path to the property value. Stored as an array of source path segments which describe the path from the entry to the property in question.
            If this mapping is for a non-collection property or for the collection property itself, this path starts at the entity resource.
            If this mapping is for a collection item property, this path starts at the collection item. In this case empty path is allowed, meaning the item itself.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Metadata.EntityPropertyMappingInfo.IsSyndicationMapping">
            <summary>
            Set to true if this info describes mapping to a syndication item, or false if it describes a custom mapping.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmCustomWriter">
            <summary>
            Writer for the EPM custom-only. Writes the EPM custom mapping properties into XmlWriter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomWriter.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomWriter.WriteEntryEpm(System.Xml.XmlWriter,Microsoft.Data.OData.Metadata.EpmTargetTree,Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.Edm.IEdmEntityTypeReference,Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Writes the custom mapped EPM properties to an XML writer which is expected to be positioned such to write
            a child element of the entry element.
            </summary>
            <param name="writer">The XmlWriter to write to.</param>
            <param name="epmTargetTree">The EPM target tree to use.</param>
            <param name="epmValueCache">The entry properties value cache to use to access the properties.</param>
            <param name="entityType">The type of the entry.</param>
            <param name="atomOutputContext">The output context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomWriter.WriteNamespaceDeclaration(System.Xml.XmlWriter,Microsoft.Data.OData.Metadata.EpmTargetPathSegment,System.String@)">
            <summary>
            Writes a namespace declaration attribute for the namespace required by the target segment.
            </summary>
            <param name="writer">The writer to write the declaration to.</param>
            <param name="targetSegment">The target segment to write the declaration for.</param>
            <param name="alreadyDeclaredPrefix">The name of the prefix if it was already declared.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomWriter.WriteEntryEpm(System.Xml.XmlWriter,Microsoft.Data.OData.Metadata.EpmTargetTree,Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Writes the custom mapped EPM properties to an XML writer which is expected to be positioned such to write
            a child element of the entry element.
            </summary>
            <param name="writer">The XmlWriter to write to.</param>
            <param name="epmTargetTree">The EPM target tree to use.</param>
            <param name="epmValueCache">The entry properties value cache to use to access the properties.</param>
            <param name="entityType">The type of the entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomWriter.WriteElementEpm(System.Xml.XmlWriter,Microsoft.Data.OData.Metadata.EpmTargetPathSegment,Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.Edm.IEdmEntityTypeReference,System.String@)">
            <summary>
            Writes an EPM element target.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="targetSegment">The target segment describing the element to write.</param>
            <param name="epmValueCache">The entry properties value cache to use to access the properties.</param>
            <param name="entityType">The type of the entry.</param>
            <param name="alreadyDeclaredPrefix">The name of the prefix if it was already declared.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomWriter.WriteAttributeEpm(System.Xml.XmlWriter,Microsoft.Data.OData.Metadata.EpmTargetPathSegment,Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.Edm.IEdmEntityTypeReference,System.String@)">
            <summary>
            Writes an EPM attribute target.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="targetSegment">The target segment describing the attribute to write.</param>
            <param name="epmValueCache">The entry properties value cache to use to access the properties.</param>
            <param name="entityType">The type of the entry.</param>
            <param name="alreadyDeclaredPrefix">The name of the prefix if it was already declared.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmCustomWriter.GetEntryPropertyValueAsText(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Given a target segment the method returns the text value of the property mapped to that segment to be used in EPM.
            </summary>
            <param name="targetSegment">The target segment to read the value for.</param>
            <param name="epmValueCache">The entry EPM value cache to use.</param>
            <param name="entityType">The entity type of the entry being processed.</param>
            <returns>The test representation of the value, or the method throws if the text representation was not possible to obtain.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmSyndicationWriter">
            <summary>
            Writer for the EPM syndication-only. Writes the EPM properties into ATOM metadata OM.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.EpmSyndicationWriter.epmTargetTree">
            <summary>The EPM target tree to use.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.EpmSyndicationWriter.entryMetadata">
            <summary>Atom entry metadata to write to.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.#ctor(Microsoft.Data.OData.Metadata.EpmTargetTree,Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Constructor.
            </summary>
            <param name="epmTargetTree">The EPM target tree to use.</param>
            <param name="atomOutputContext">The output context currently in use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.WriteEntryEpm(Microsoft.Data.OData.Metadata.EpmTargetTree,Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.Edm.IEdmEntityTypeReference,Microsoft.Data.OData.Atom.ODataAtomOutputContext)">
            <summary>
            Writes the syndication part of EPM for an entry into ATOM metadata OM.
            </summary>
            <param name="epmTargetTree">The EPM target tree to use.</param>
            <param name="epmValueCache">The entry properties value cache to use to access the properties.</param>
            <param name="type">The type of the entry.</param>
            <param name="atomOutputContext">The output context currently in use.</param>
            <returns>The ATOM metadata OM with the EPM values populated.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.CreateAtomTextConstruct(System.String,System.Data.Services.Common.SyndicationTextContentKind)">
            <summary>
            Creates a text ATOM value.
            </summary>
            <param name="textValue">The text value to use.</param>
            <param name="contentKind">The content kind of the value.</param>
            <returns>The Atom text value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.CreateDateTimeValue(System.Object,System.Data.Services.Common.SyndicationItemProperty,Microsoft.Data.OData.ODataWriterBehavior)">
            <summary>
            Given an object returns the corresponding DateTimeOffset value through conversions.
            </summary>
            <param name="propertyValue">Object containing property value.</param>
            <param name="targetProperty">The target syndication property for the mapping (used for exception messages).</param>
            <param name="writerBehavior">The current settings to control the behavior of the writer.</param>
            <returns>DateTimeOffset after conversion.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.CreateDateTimeStringValue(System.Object,Microsoft.Data.OData.ODataWriterBehavior)">
            <summary>
            Given an object returns the corresponding string representation of the value.
            </summary>
            <param name="propertyValue">Object containing property value.</param>
            <param name="writerBehavior">The current settings to control the behavior of the writer.</param>
            <returns>String representation of the property value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.WriteEntryEpm(Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Writes the syndication part of EPM for an entry into ATOM metadata OM.
            </summary>
            <param name="epmValueCache">The entry properties value cache to use to access the properties.</param>
            <param name="entityType">The type of the entry.</param>
            <returns>The ATOM metadata OM with the EPM values populated.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.WriteParentSegment(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a non-leaf segment which has sub segments.
            </summary>
            <param name="targetSegment">The segment being written</param>
            <param name="epmValueCache">EPM value cache to use to get property values, or a primitive value</param>
            <param name="typeReference">The type of the entry or collection item.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.WritePersonEpm(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes EPM value to a person construct (author or contributor).
            </summary>
            <param name="targetSegment">The target segment which points to either author or contributor element.</param>
            <param name="epmValueCache">EPM value cache to use to get property values, or a primitive value</param>
            <param name="typeReference">The type of the entry or collection item.</param>
            <returns>The person metadata or null if no person metadata should be written for this mapping.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmSyndicationWriter.GetPropertyValueAsText(Microsoft.Data.OData.Metadata.EpmTargetPathSegment,System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Given a target segment the method returns the text value of the property mapped to that segment to be used in EPM.
            </summary>
            <param name="targetSegment">The target segment to read the value for.</param>
            <param name="epmValueCache">EPM value cache to use to get property values, or a primitive value</param>
            <param name="typeReference">The type of the entry or collection item.</param>
            <returns>The test representation of the value, or the method throws if the text representation was not possible to obtain.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomWorkspaceMetadata">
            <summary>
            Atom metadata description for a workspace.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomWorkspaceMetadata.Title">
            <summary>Gets or sets the title of the workspace.</summary>
            <returns>The title of the workspace.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata">
            <summary>
            Atom metadata description for a collection (in a workspace).
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata.Title">
            <summary>Gets or sets the title of the collection.</summary>
            <returns>The title of the collection.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata.Accept">
            <summary>Gets or sets the accept range of media types for this collection.</summary>
            <returns>The accept range of media types for this collection.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata.Categories">
            <summary>Gets or sets the categories for this collection.</summary>
            <returns>The categories for this collection.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmValueCache">
            <summary>
            Caches values of properties and items enumerations so that we only ever enumerate these once even if they were use in EPM.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.EpmValueCache.epmValuesCache">
            <summary>
            Caches either ComplexValue properties enumeration or Collection items enumeration.
            </summary>
            <remarks>The key is the complex value, or collection for the property in question.
            For complex property, the value is a List of ODataProperty which stores the enumeration ODataComplexValue.Properties cache.
            For collection property, the value is a List of object which stores the enumeration ODataCollectionValue.Items cache.
            The items are either EpmCollectionItemCache instances in which case the value of the item is cached inside that instance,
            or it's any other type in which case the value of the item is that instance.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmValueCache.#ctor">
            <summary>
            Creates a new empty cache.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmValueCache.GetComplexValueProperties(Microsoft.Data.OData.Atom.EpmValueCache,Microsoft.Data.OData.ODataComplexValue,System.Boolean)">
            <summary>
            Returns the properties for the specified complex value.
            </summary>
            <param name="epmValueCache">The EPM value cache to use (can be null).</param>
            <param name="complexValue">The complex value to get the properties for.</param>
            <param name="writingContent">If we're writing content of an entry or not.</param>
            <returns>The properties enumeration for the complex value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmValueCache.CacheComplexValueProperties(Microsoft.Data.OData.ODataComplexValue)">
            <summary>
            Caches and returns the properties for the specified complex value.
            </summary>
            <param name="complexValue">The complex value to cache the properties for.</param>
            <returns>The cached properties enumeration for the complex value.</returns>
            <remarks>This method assumes that the complex value's properties are not cached yet.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmValueCache.GetComplexValueProperties(Microsoft.Data.OData.ODataComplexValue,System.Boolean)">
            <summary>
            Returns the properties for the specified complex value.
            </summary>
            <param name="complexValue">The complex value to get the properties for.</param>
            <param name="writingContent">true if we're writing entry content or false when writing out-of-content EPM.</param>
            <returns>The properties enumeration for the complex value.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EntryPropertiesValueCache">
            <summary>
            Caches values of properties enumerations on an entry and then EPM values for the rest of property values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.EntryPropertiesValueCache.entryPropertiesCache">
            <summary>
            Caches the ODataEntry.Properties enumeration.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EntryPropertiesValueCache.#ctor(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Creates a new cache.
            </summary>
            <param name="entry">The entry for which to create the properties cache.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.EntryPropertiesValueCache.EntryProperties">
            <summary>
            Returns enumeration of properties (excluding stream properties) for the entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.EntryPropertiesValueCache.EntryStreamProperties">
            <summary>
            Returns enumeration of stream properties for the entry.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.EpmWriterUtils">
            <summary>
            Helper methods for EPM writers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriterUtils.GetPropertyValueAsText(System.Object)">
            <summary>
            Given a property value returns the text value to be used in EPM.
            </summary>
            <param name="propertyValue">The value of the property.</param>
            <returns>The text representation of the value, or the method throws if the text representation was not possible to obtain.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriterUtils.GetEntityPropertyMapping(Microsoft.Data.OData.Metadata.EpmSourcePathSegment,System.String)">
            <summary>
            Gets the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> for the specified <paramref name="propertyName"/>
            from the <paramref name="epmParentSourcePathSegment"/>.
            </summary>
            <param name="epmParentSourcePathSegment">The EPM source path segment for the parent of the property being written.</param>
            <param name="propertyName">The name of the property to get the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> for.</param>
            <returns>The <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> for the specified <paramref name="propertyName"/> or null if none exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriterUtils.GetEntityPropertyMapping(Microsoft.Data.OData.Metadata.EpmSourcePathSegment)">
            <summary>
            Gets the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> for the specified <paramref name="epmSourcePathSegment"/>.
            </summary>
            <param name="epmSourcePathSegment">The EPM source path segment to get the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> from.</param>
            <returns>The <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> for the specified <paramref name="epmSourcePathSegment"/> or null if none exists.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriterUtils.GetPropertySourcePathSegment(Microsoft.Data.OData.Metadata.EpmSourcePathSegment,System.String)">
            <summary>
            Returns an <see cref="T:Microsoft.Data.OData.Metadata.EpmSourcePathSegment"/> for a given property provided the parent <see cref="T:Microsoft.Data.OData.Metadata.EpmSourcePathSegment"/>.
            </summary>
            <param name="epmParentSourcePathSegment">The parent <see cref="T:Microsoft.Data.OData.Metadata.EpmSourcePathSegment"/> to get the property segment from.</param>
            <param name="propertyName">The name of the property to get the <see cref="T:Microsoft.Data.OData.Metadata.EpmSourcePathSegment"/> for.</param>
            <returns>An <see cref="T:Microsoft.Data.OData.Metadata.EpmSourcePathSegment"/> for a given property provided the parent <see cref="T:Microsoft.Data.OData.Metadata.EpmSourcePathSegment"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriterUtils.CacheEpmProperties(Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.OData.Metadata.EpmSourceTree)">
            <summary>
            Cache all the properties and collection item enumerations needed for EPM processing.
            </summary>
            <param name="propertyValueCache">The property value cache to cache the EPM related properties in.</param>
            <param name="sourceTree">The source tree describing all properties taking part in entity property mappings.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriterUtils.CacheEpmSourcePathSegments(Microsoft.Data.OData.Atom.EpmValueCache,System.Collections.Generic.List{Microsoft.Data.OData.Metadata.EpmSourcePathSegment},System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty})">
            <summary>
            Cache the property and collection item enumerations needed in EPM mappings. We do this for syndication and custom
            mappings.
            </summary>
            <param name="valueCache">The property value cache to use for caching.</param>
            <param name="segments">The source path segments to cache.</param>
            <param name="properties">The <see cref="T:Microsoft.Data.OData.ODataProperty"/> values to compute the segments against.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.EpmWriterUtils.TryGetPropertyValue``1(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataProperty},System.String,``0@)">
            <summary>
            Gets the property value as the requested type.
            </summary>
            <typeparam name="T">The expected type of the property value.</typeparam>
            <param name="properties">The properties to search.</param>
            <param name="propertyName">The name of the property to get the value for.</param>
            <param name="propertyValue">The property value as <typeparamref name="T"/> or null if no property 
            with name <paramref name="propertyName"/> or with the expected type exists.</param>
            <returns>true if a property of the expected type was found; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataEpmMergeUtils">
            <summary>
            Helper methods used to merge Atom metadata from EPM with those specified through annotations.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataEpmMergeUtils.MergeCustomAndEpmEntryMetadata(Microsoft.Data.OData.Atom.AtomEntryMetadata,Microsoft.Data.OData.Atom.AtomEntryMetadata,Microsoft.Data.OData.ODataWriterBehavior)">
            <summary>
            Merges custom and EPM ATOM metadata.
            </summary>
            <param name="customEntryMetadata">The custom ATOM metadata, or null if there were no custom ATOM metadata.</param>
            <param name="epmEntryMetadata">The EPM ATOM metadata, or null if there are no EPM mappings to syndication targets.</param>
            <param name="writerBehavior">The <see cref="T:Microsoft.Data.OData.ODataWriterBehavior"/> instance configuring the writer.</param>
            <returns>The merged ATOM metadata to write to the output.</returns>
            <remarks>The merge means that if one of the sides has null, the other is used, otherwise if both are non-null
            we verify that the values are the same, otherwise we throw.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataEpmMergeUtils.MergeSyndicationMapping``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Merges enumerations of person metadata.
            </summary>
            <param name="customValues">The enumeration of custom person metadata.</param>
            <param name="epmValues">The enumeration of EPM person metadata.</param>
            <typeparam name="T">The type of syndication mapping, one of AtomLinkMetadata, AtomCategoryMetadata, AtomPersonMetadata, </typeparam>
            <returns>The merged enumeration.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataEpmMergeUtils.MergeAtomTextValue(Microsoft.Data.OData.Atom.AtomTextConstruct,Microsoft.Data.OData.Atom.AtomTextConstruct,System.String)">
            <summary>
            Merges ATOM text values.
            </summary>
            <param name="customValue">The custom value.</param>
            <param name="epmValue">The EPM value.</param>
            <param name="propertyName">The name of the ATOM property which holds the text value, used for error reporting.</param>
            <returns>The merged ATOM text value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataEpmMergeUtils.MergeTextValue(System.String,System.String,System.String)">
            <summary>
            Merges text values.
            </summary>
            <param name="customValue">The custom value.</param>
            <param name="epmValue">The EPM value.</param>
            <param name="propertyName">The name of the ATOM property which holds the text value, used for error reporting.</param>
            <returns>The merged text value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataEpmMergeUtils.MergeDateTimeValue(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Merges date time offset values.
            </summary>
            <param name="customValue">The custom value.</param>
            <param name="epmValue">The EPM value.</param>
            <param name="propertyName">The name of the ATOM property which holds the value, used for error reporting.</param>
            <returns>The merged date time offset value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataEpmMergeUtils.TryMergeIfNull``1(``0,``0,``0@)">
            <summary>
            Tries to merge custom and EPM values if one of them is null.
            </summary>
            <typeparam name="T">The type of the value to merge.</typeparam>
            <param name="customValue">The custom value.</param>
            <param name="epmValue">The EPM value.</param>
            <param name="result">The merge value if the merge was possible.</param>
            <returns>true if one of the values was null and thus the other was returned in <paramref name="result"/>;
            false if both were not null and thus full merge will have to be performed.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataEpmMergeUtils.TryMergeIfNull``1(System.Nullable{``0},System.Nullable{``0},System.Nullable{``0}@)">
            <summary>
            Tries to merge custom and EPM values if one of them is null.
            </summary>
            <typeparam name="T">The type of the value to merge.</typeparam>
            <param name="customValue">The custom value.</param>
            <param name="epmValue">The EPM value.</param>
            <param name="result">The merge value if the merge was possible.</param>
            <returns>true if one of the values was null and thus the other was returned in <paramref name="result"/>;
            false if both were not null and thus full merge will have to be performed.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchWriter">
            <summary>
            Class for writing OData batch messages; also verifies the proper sequence of write calls on the writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.rawOutputContext">
            <summary>The output context to write to.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.batchBoundary">
            <summary>The boundary string for the batch structure itself.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.urlResolver">
            <summary>The batch-specific URL resolver that stores the content IDs found in a changeset and supports resolving cross-referencing URLs.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.state">
            <summary>The state the writer currently is in.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.changeSetBoundary">
            <summary>
            The boundary string for the current changeset (only set when writing a changeset, 
            e.g., after WriteStartChangeSet has been called and before WriteEndChangeSet is called).
            </summary>
            <remarks>When not writing a changeset this field is null.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.batchStartBoundaryWritten">
            <summary>
            A flag to indicate whether the batch start boundary has been written or not; important to support writing of empty batches.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.changesetStartBoundaryWritten">
            <summary>
            A flags to indicate whether the current changeset start boundary has been written or not.
            This is false if a changeset has been started by no changeset boundary was written, and true once the first changeset
            boundary for the current changeset has been written.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.currentOperationRequestMessage">
            <summary>The request message for the operation that is currently written if it's a request; 
            or null if no part is written right now or it's a response part.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.currentOperationResponseMessage">
            <summary>The response message for the operation that is currently written if it's a response; 
            or null if no part is written right now or it's a request part.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.currentOperationContentId">
            <summary>
            The value of the Content-ID header of the current operation (or null if no Content-ID header exists).
            </summary>
            <remarks>
            Note that the current Content-ID header is not included immediately in the content ID cache
            since the current content ID will only be visible to subsequent operations.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.currentBatchSize">
            <summary>The current size of the batch message, i.e., how many query operations and changesets have been written.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.currentChangeSetSize">
            <summary>The current size of the active changeset, i.e., how many request have been written for the changeset.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.#ctor(Microsoft.Data.OData.ODataRawOutputContext,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="rawOutputContext">The output context to write to.</param>
            <param name="batchBoundary">The boundary string for the batch structure itself.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteStartBatch">
            <summary>Starts a new batch; can be only called once and as first call.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteStartBatchAsync">
            <summary>Asynchronously starts a new batch; can be only called once and as first call.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteEndBatch">
            <summary>Ends a batch; can only be called after WriteStartBatch has been called and if no other active changeset or operation exist.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteEndBatchAsync">
            <summary>Asynchronously ends a batch; can only be called after WriteStartBatch has been called and if no other active change set or operation exist.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteStartChangeset">
            <summary>Starts a new changeset; can only be called after WriteStartBatch and if no other active operation or changeset exists.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteStartChangesetAsync">
            <summary>Asynchronously starts a new change set; can only be called after WriteStartBatch and if no other active operation or change set exists.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteEndChangeset">
            <summary>Ends an active changeset; this can only be called after WriteStartChangeset and only once for each changeset.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteEndChangesetAsync">
            <summary>Asynchronously ends an active change set; this can only be called after WriteStartChangeset and only once for each change set.</summary>
            <returns>A task instance that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.CreateOperationRequestMessage(System.String,System.Uri)">
            <summary>Creates an <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage" /> for writing an operation of a batch request.</summary>
            <returns>The message that can be used to write the request operation.</returns>
            <param name="method">The Http method to be used for this request operation.</param>
            <param name="uri">The Uri to be used for this request operation.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.CreateOperationRequestMessageAsync(System.String,System.Uri)">
            <summary>Creates a message for asynchronously writing an operation of a batch request.</summary>
            <returns>The message that can be used to asynchronously write the request operation.</returns>
            <param name="method">The HTTP method to be used for this request operation.</param>
            <param name="uri">The URI to be used for this request operation.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.CreateOperationResponseMessage">
            <summary>Creates a message for writing an operation of a batch response.</summary>
            <returns>The message that can be used to write the response operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.CreateOperationResponseMessageAsync">
            <summary>Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataBatchOperationResponseMessage" /> for writing an operation of a batch response.</summary>
            <returns>A task that when completed returns the newly created operation response message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.Flush">
            <summary>Flushes the write buffer to the underlying stream.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.FlushAsync">
            <summary>Flushes the write buffer to the underlying stream asynchronously.</summary>
            <returns>A task instance that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.Microsoft#Data#OData#IODataBatchOperationListener#BatchOperationContentStreamRequested">
            <summary>
            This method is called to notify that the content stream for a batch operation has been requested.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.Microsoft#Data#OData#IODataBatchOperationListener#BatchOperationContentStreamRequestedAsync">
            <summary>
            This method is called to notify that the content stream for a batch operation has been requested.
            </summary>
            <returns>
            A task representing any action that is running as part of the status change of the operation; 
            null if no such action exists.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.Microsoft#Data#OData#IODataBatchOperationListener#BatchOperationContentStreamDisposed">
            <summary>
            This method is called to notify that the content stream of a batch operation has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.Microsoft#Data#OData#IODataOutputInStreamErrorListener#OnInStreamError">
            <summary>
            This method notifies the listener, that an in-stream error is to be written.
            </summary>
            <remarks>
            This listener can choose to fail, if the currently written payload doesn't support in-stream error at this position.
            If the listener returns, the writer should not allow any more writing, since the in-stream error is the last thing in the payload.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.IsErrorState(Microsoft.Data.OData.ODataBatchWriter.BatchWriterState)">
            <summary>
            Determines whether a given writer state is considered an error state.
            </summary>
            <param name="state">The writer state to check.</param>
            <returns>True if the writer state is an error state; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.VerifyCanWriteStartBatch(System.Boolean)">
            <summary>
            Verifies that calling WriteStartBatch is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteStartBatchImplementation">
            <summary>
            Starts a new batch - implementation of the actual functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.VerifyCanWriteEndBatch(System.Boolean)">
            <summary>
            Verifies that calling WriteEndBatch is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteEndBatchImplementation">
            <summary>
            Ends a batch - implementation of the actual functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.VerifyCanWriteStartChangeset(System.Boolean)">
            <summary>
            Verifies that calling WriteStartChangeset is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteStartChangesetImplementation">
            <summary>
            Starts a new changeset - implementation of the actual functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.VerifyCanWriteEndChangeset(System.Boolean)">
            <summary>
            Verifies that calling WriteEndChangeset is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteEndChangesetImplementation">
            <summary>
            Ends an active changeset - implementation of the actual functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.VerifyCanCreateOperationRequestMessage(System.Boolean,System.String,System.Uri)">
            <summary>
            Verifies that calling CreateOperationRequestMessage if valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
            <param name="method">The Http method to be used for this request operation.</param>
            <param name="uri">The Uri to be used for this request operation.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.CreateOperationRequestMessageImplementation(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataBatchOperationRequestMessage"/> for writing an operation of a batch request - implementation of the actual functionality.
            </summary>
            <param name="method">The Http method to be used for this request operation.</param>
            <param name="uri">The Uri to be used for this request operation.</param>
            <returns>The message that can be used to write the request operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.VerifyCanCreateOperationResponseMessage(System.Boolean)">
            <summary>
            Verifies that calling CreateOperationResponseMessage is valid.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.CreateOperationResponseMessageImplementation">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataBatchOperationResponseMessage"/> for writing an operation of a batch response - implementation of the actual functionality.
            </summary>
            <returns>The message that can be used to write the response operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.StartBatchOperationContent">
            <summary>
            Writes all the pending headers and prepares the writer to write a content of the operation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.DisposeBatchWriterAndSetContentStreamRequestedState">
            <summary>
            Disposes the batch writer and set the 'OperationStreamRequested' batch writer state;
            called after the flush operation(s) have completed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.RememberContentIdHeader(System.String)">
            <summary>
            Remember a non-null Content-ID header for change set request operations.
            If a non-null content ID header is specified for a change set request operation, record it in the URL resolver.
            </summary>
            <param name="contentId">The Content-ID header value read from the message.</param>
            <remarks>
            Note that the content ID of this operation will only
            become visible once this operation has been written
            and OperationCompleted has been called on the URL resolver.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.VerifyCanFlush(System.Boolean)">
            <summary>
            Verifies that the writer is in correct state for the Flush operation.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.VerifyCallAllowed(System.Boolean)">
            <summary>
            Verifies that a call is allowed to the writer.
            </summary>
            <param name="synchronousCall">true if the call is to be synchronous; false otherwise.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.InterceptException(System.Action)">
            <summary>
            Catch any exception thrown by the action passed in; in the exception case move the writer into
            state ExceptionThrown and then rethrow the exception.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.SetState(Microsoft.Data.OData.ODataBatchWriter.BatchWriterState)">
            <summary>
            Sets a new writer state; verifies that the transition from the current state into new state is valid.
            </summary>
            <param name="newState">The writer state to transition into.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.ValidateTransition(Microsoft.Data.OData.ODataBatchWriter.BatchWriterState)">
            <summary>
            Verify that the transition from the current state into new state is valid .
            </summary>
            <param name="newState">The new writer state to transition into.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.ValidateWriterReady">
            <summary>
            Validates that the batch writer is ready to process a new write request.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WritePendingMessageData(System.Boolean)">
            <summary>
            Write any pending headers for the current operation message (if any).
            </summary>
            <param name="reportMessageCompleted">
            A flag to control whether after writing the pending data we report writing the message to be completed or not.
            </param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.WriteStartBoundaryForOperation">
            <summary>
            Writes the start boundary for an operation. This is either the batch or the changeset boundary.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.ThrowODataException(System.String)">
            <summary>
            Sets the 'Error' state and then throws an ODataException with the specified error message.
            </summary>
            <param name="errorMessage">The error message for the exception.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.IncreaseBatchSize">
            <summary>
            Increases the size of the current batch message; throws if the allowed limit is exceeded.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.IncreaseChangeSetSize">
            <summary>
            Increases the size of the current change set; throws if the allowed limit is exceeded.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataBatchWriter.ResetChangeSetSize">
            <summary>
            Resets the size of the current change set to 0.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchWriter.CurrentOperationRequestMessage">
            <summary>The request message for the operation that is currently written if it's a request; or null if no operation is written right now or it's a response operation.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchWriter.CurrentOperationResponseMessage">
            <summary>The response message for the operation that is currently written if it's a response; 
            or null if no operation is written right now or it's a request operation.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataBatchWriter.CurrentOperationMessage">
            <summary>The message for the operation that is currently written; or null if no operation is written right now.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState">
            <summary>
            An enumeration representing the current state of the writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.Start">
            <summary>The writer is in initial state; nothing has been written yet.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.BatchStarted">
            <summary>WriteStartBatch has been called.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.ChangeSetStarted">
            <summary>WriteStartChangeSet has been called.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.OperationCreated">
            <summary>CreateOperationRequestMessage/CreateOperationResponseMessage has been called.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.OperationStreamRequested">
            <summary>
            ODataMessage.GetStreamAsync() has been called on an operation which caused a <see cref="T:Microsoft.Data.OData.ODataBatchOperationStream"/> to be created; 
            the batch writer is unusable while an operation is being written.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.OperationStreamDisposed">
            <summary>The stream for writing the content of an operation has been disposed. The batch writer can now be used again.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.ChangeSetCompleted">
            <summary>WriteEndChangeSet has been called.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.BatchCompleted">
            <summary>WriteEndBatch has been called.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataBatchWriter.BatchWriterState.Error">
            <summary>The writer is in error state; nothing can be written anymore except the error payload.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.MediaType">
            <summary>
            Class representing a media type definition.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaType.parameters">
            <summary>Parameters specified on the media type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaType.subType">
            <summary>Sub-type specification (for example, 'plain').</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MediaType.type">
            <summary>Type specification (for example, 'text').</summary>
        </member>
        <member name="M:Microsoft.Data.OData.MediaType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:Microsoft.Data.OData.MediaType"/> read-only instance.
            </summary>
            <param name="type">Type specification (for example, 'text').</param>
            <param name="subType">Sub-type specification (for example, 'plain').</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaType.#ctor(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Initializes a new <see cref="T:Microsoft.Data.OData.MediaType"/> read-only instance.
            </summary>
            <param name="type">Type specification (for example, 'text').</param>
            <param name="subType">Sub-type specification (for example, 'plain').</param>
            <param name="parameters">The parameters specified on the media type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new <see cref="T:Microsoft.Data.OData.MediaType"/> read-only instance.
            </summary>
            <param name="type">Type specification (for example, 'text').</param>
            <param name="subType">Sub-type specification (for example, 'plain').</param>
            <param name="parameters">Parameters specified on the media type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.MediaType.SelectEncoding">
            <summary>
            Selects the encoding appropriate for this media type specification
            (possibly null).
            </summary>
            <returns>
            The encoding explicitly defined on the media type specification, or
            the default encoding for well-known media types.
            </returns>
            <remarks>
            As per http://tools.ietf.org/html/rfc2616#section-3.7, the type, 
            subtype and parameter name attributes are case-insensitive.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.MediaType.ToText">
            <summary>
            Converts the current <see cref="T:Microsoft.Data.OData.MediaType"/> to a string representation suitable for use in a content-type header.
            </summary>
            <returns>The string representation of media type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaType.ToText(System.Text.Encoding)">
            <summary>
            Converts the current <see cref="T:Microsoft.Data.OData.MediaType"/> to a string representation suitable for use in a content-type header.
            </summary>
            <param name="encoding">The encoding to use when converting the media type into text.</param>
            <returns>The string representation of the current media type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.MediaType.EncodingFromName(System.String)">
            <summary>Gets the named encoding if specified.</summary>
            <param name="name">Name (possibly null or empty).</param>
            <returns>
            The named encoding if specified; the encoding for HTTP missing 
            charset specification otherwise.
            </returns>
            <remarks>
            See http://tools.ietf.org/html/rfc2616#section-3.4.1 for details.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.MediaType.FallbackEncoding">
            <summary>Encoding to fall back to an appropriate encoding is not available.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaType.MissingEncoding">
            <summary>Encoding implied by an unspecified encoding value.</summary>
            <remarks>See http://tools.ietf.org/html/rfc2616#section-3.4.1 for details.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.MediaType.FullTypeName">
            <summary>Returns the full media type in standard type/subtype form, without parameters.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaType.SubTypeName">
            <summary>Returns the subtype part of the media type.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaType.TypeName">
            <summary>Returns the type part of the media type.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.MediaType.Parameters">
            <summary>media type parameters</summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter">
            <summary>
            ODataCollectionWriter for the Verbose JSON format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.verboseJsonOutputContext">
            <summary>
            The output context to write to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.verboseJsonCollectionSerializer">
            <summary>
            The Verbose JSON collection serializer to use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Constructor for creating a collection writer to use when writing operation result payloads.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.OData.IODataReaderWriterListener)">
            <summary>
            Constructor for creating a collection writer to use when writing parameter payloads.
            </summary>
            <param name="verboseJsonOutputContext">The output context to write to.</param>
            <param name="expectedItemType">The type reference of the expected item type or null if no expected item type exists.</param>
            <param name="listener">If not null, the writer will notify the implementer of the interface of relevant state changes in the writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.StartCollection(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>
            Start writing a collection.
            </summary>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.EndCollection">
            <summary>
            Finish writing a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonCollectionWriter.WriteCollectionItem(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a collection item (either primitive or complex)
            </summary>
            <param name="item">The collection item to write.</param>
            <param name="expectedItemType">The expected type of the collection item or null if no expected item type exists.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter">
            <summary>
            ODataCollectionWriter for the ATOM format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.atomOutputContext">
            <summary>The output context to write to.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.atomCollectionSerializer">
            <summary>The collection serializer to use for writing.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Constructor.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.StartCollection(Microsoft.Data.OData.ODataCollectionStart)">
            <summary>
            Start writing a collection.
            </summary>
            <param name="collectionStart">The <see cref="T:Microsoft.Data.OData.ODataCollectionStart"/> representing the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.EndCollection">
            <summary>
            Finish writing a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomCollectionWriter.WriteCollectionItem(System.Object,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Writes a collection item (either primitive or complex)
            </summary>
            <param name="item">The collection item to write.</param>
            <param name="expectedItemType">The expected type of the collection item or null if no expected item type exists.</param>
        </member>
        <member name="T:Microsoft.Data.OData.DebugUtils">
            <summary>
            Class with utility methods to help with debug only code.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.DebugUtils.CheckNoExternalCallers">
            <summary>
            Checks that the method which called this helper method
            was not called by any code outside of the Microsoft.Data.OData.dll.
            </summary>
            <remarks>
            The method is only called when in DEBUG builds, since it's quite expensive and we expect
            all our external callers to run DEBUG builds at least sometimes.
            The method is also called when compiling for FxCop analysis, as we run our official FxCop
            pass on RET build and we need to check that all internal methods call this one to check for accessibility
            even though only in debug builds.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.DebugUtils.CheckNoExternalCallers(System.Boolean)">
            <summary>
            Checks that the method which called this helper method
            was not called by any code outside of the Microsoft.Data.OData.dll.
            </summary>
            <param name="checkPublicMethods">Set to true if this check is called from a public method which should also be checked for non-external callers.
            In that case, make sure that the calling method will not get inlined!</param>
            <remarks>
            The method is only called when in DEBUG builds, since it's quite expensive and we expect
            all our external callers to run DEBUG builds at least sometimes.
            The method is also called when compiling for FxCop analysis, as we run our official FxCop
            pass on RET build and we need to check that all internal methods call this one to check for accessibility
            even though only in debug builds.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataPayloadKind">
            <summary>
            Enumeration representing the different kinds of payloads ODatLib can write.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Feed">
            <summary>Payload kind for a feed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Entry">
            <summary>Payload kind for an entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Property">
            <summary>Payload kind for a property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.EntityReferenceLink">
            <summary>Payload kind for an entity reference link.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.EntityReferenceLinks">
            <summary>Payload kind for entity reference links.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Value">
            <summary>Payload kind for a raw value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.BinaryValue">
            <summary>Payload kind for a binary value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Collection">
            <summary>Payload kind for a collection.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.ServiceDocument">
            <summary>Payload kind for a service document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.MetadataDocument">
            <summary>Payload kind for a metadata document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Error">
            <summary>Payload kind for an error.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Batch">
            <summary>Payload kind for a batch.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Parameter">
            <summary>Payload kind for parameters for a service action.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataPayloadKind.Unsupported">
            <summary>Unknown format</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataResourceCollectionInfo">
            <summary>
            Class representing a resource collection in a workspace of a data service.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataResourceCollectionInfo.Url">
            <summary>Gets or sets the URI representing the Unified Resource Locator (URL) to the collection.</summary>
            <returns>The URI representing the Unified Resource Locator (URL) to the collection.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataResourceCollectionInfo.Name">
            <summary>Gets or sets the name of the collection; this is the entity set name in JSON and the HREF in Atom.</summary>
            <returns>The name of the collection.</returns>
            <remarks>
            This property is required when reading and writing the JSON light format, but has no meaning in the Verbose JSON format.
            If present in ATOM, it will be used to populate the title element.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataWorkspace">
            <summary>
            Class representing the a workspace of a data service.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataWorkspace.Collections">
            <summary>Gets or sets the set of collections in the workspace.</summary>
            <returns>The set of collections in the workspace.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Metadata.EdmConstants">
            <summary>
            Constant values used in the EDM.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmNamespace">
            <summary>namespace for edm primitive types.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmBinaryTypeName">
            <summary>edm binary primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmBooleanTypeName">
            <summary>edm boolean primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmByteTypeName">
            <summary>edm byte primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmDateTimeTypeName">
            <summary>edm datetime primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmDateTimeOffsetTypeName">
            <summary>Represents a Time instance as an interval measured in milliseconds from an instance of DateTime.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmDecimalTypeName">
            <summary>edm decimal primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmDoubleTypeName">
            <summary>edm double primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGuidTypeName">
            <summary>edm guid primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmSingleTypeName">
            <summary>edm single primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmSByteTypeName">
            <summary>edm sbyte primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmInt16TypeName">
            <summary>edm int16 primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmInt32TypeName">
            <summary>edm int32 primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmInt64TypeName">
            <summary>edm int64 primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmStringTypeName">
            <summary>edm string primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmTimeTypeName">
            <summary>Represents an interval measured in milliseconds.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmStreamTypeName">
            <summary>edm stream primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeographyTypeName">
            <summary>edm geography primitive type name</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmPointTypeName">
            <summary>Represents a geography Point type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmLineStringTypeName">
            <summary>Represents a geography LineString type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmPolygonTypeName">
            <summary>Represents a geography Polygon type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeographyCollectionTypeName">
            <summary>Represents a geography GeomCollection type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmMultiPolygonTypeName">
            <summary>Represents a geography MultiPolygon type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmMultiLineStringTypeName">
            <summary>Represents a geography MultiLineString type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmMultiPointTypeName">
            <summary>Represents a geography MultiPoint type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeometryTypeName">
            <summary>Represents an arbitrary Geometry type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeometryPointTypeName">
            <summary>Represents a geometry Point type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeometryLineStringTypeName">
            <summary>Represents a geometry LineString type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeometryPolygonTypeName">
            <summary>Represents a geometry Polygon type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeometryCollectionTypeName">
            <summary>Represents a geometry GeomCollection type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeometryMultiPolygonTypeName">
            <summary>Represents a geometry MultiPolygon type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeometryMultiLineStringTypeName">
            <summary>Represents a geometry MultiLineString type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmGeometryMultiPointTypeName">
            <summary>Represents a geometry MultiPoint type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmxVersion1Namespace">
            <summary>The namespace for Edmx V1.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmxVersion2Namespace">
            <summary>The namespace for Edmx V2.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmxVersion3Namespace">
            <summary>The namespace for Edmx V3.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.EdmxName">
            <summary>The element name of the top-level &lt;Edmx&gt; metadata envelope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.HasStreamAttributeName">
            <summary>The attribute name used on entity types to indicate that they are MLEs.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.MimeTypeAttributeName">
            <summary>The attribute name used on service operations and primitive properties to indicate their MIME type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.HttpMethodAttributeName">
            <summary>The attribute name used on service operations to indicate their HTTP method.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.IsAlwaysBindableAttributeName">
            <summary>The attribute name used on a service operation to indicate whether all instances of the binding parameter 
            type can be bound to that service operation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.IsDefaultEntityContainerAttributeName">
            <summary>The attribute name used on an entity container to mark it as the default entity container.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.TrueLiteral">
            <summary>'true' literal</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Metadata.EdmConstants.FalseLiteral">
            <summary>'false' literal</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ReferenceEqualityComparer`1">
            <summary>
            Use this class to compare objects by reference in collections such as 
            dictionary or hashsets.
            </summary>
            <typeparam name="T">Type of objects to compare.</typeparam>
            <remarks>
            Typically accessed statically as eg 
            ReferenceEqualityComparer&lt;Expression&gt;.Instance.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ReferenceEqualityComparer`1.instance">
            <summary>
            Single instance per 'T' for comparison.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ReferenceEqualityComparer`1.#ctor">
            <summary>
            Initializes a new ReferenceEqualityComparer instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether two objects are the same.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>true if both are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Serves as hashing function for collections.
            </summary>
            <param name="obj">Object to hash.</param>
            <returns>
            Hash code for the object; shouldn't change through the lifetime 
            of <paramref name="obj"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Data.OData.ReferenceEqualityComparer`1.Instance">
            <summary>
            Returns a singleton instance for this comparer type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.TypeUtils">
            <summary>
            Utility methods for working with CLR types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.TypeUtils.IsNullableType(System.Type)">
            <summary>Checks whether the specified type is a generic nullable type.</summary>
            <param name="type">Type to check.</param>
            <returns>true if <paramref name="type"/> is nullable; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TypeUtils.GetNonNullableType(System.Type)">
            <summary>Gets a non-nullable version of the specified type.</summary>
            <param name="type">Type to get non-nullable version for.</param>
            <returns>
            <paramref name="type"/> if type is a reference type or a 
            non-nullable type; otherwise, the underlying value type.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.TypeUtils.GetNullableType(System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> can be assigned null. If it is a non-nullable
            value type it creates the corresonding nullable type and returns it.
            </summary>
            <param name="type">The type to check.</param>
            <returns>The <paramref name="type"/> if it allows null or the corresponding nullable type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TypeUtils.TypeAllowsNull(System.Type)">
            <summary>Checks whether the specified <paramref name='type' /> can be assigned null.</summary>
            <param name='type'>Type to check.</param>
            <returns>true if type is a reference type or a Nullable type; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TypeUtils.AreTypesEquivalent(System.Type,System.Type)">
            <summary>
            Determines if two CLR types are equivalent.
            </summary>
            <param name="typeA">First type to compare.</param>
            <param name="typeB">Second type to compare.</param>
            <returns>true if the types are equivalent (they both represent the same type), or false otherwise.</returns>
            <remarks>This method abstracts away the necessity to call Type.IsEquivalentTo method in .NET 4 and higher but 
            use simple reference equality on platforms which don't have that method (like Silverlight).</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomFeedMetadata">
            <summary>
            Type for Atom Syndication Format (Atom) feed annotationsAsArray.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Authors">
            <summary>Gets or sets a collection of authors of a feed.</summary>
            <returns>A collection of authors of a feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Categories">
            <summary>Gets or sets the categories of a feed.</summary>
            <returns>The categories of a feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Contributors">
            <summary>Gets or sets a collection of contributors of a feed.</summary>
            <returns>A collection of contributors of a feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Generator">
            <summary>Gets or sets the generator of a feed.</summary>
            <returns>The generator of a feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Icon">
            <summary>Gets or sets the URI of the icon for a feed.</summary>
            <returns>The URI of the icon for a feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Links">
            <summary>Gets or sets the collection of all Atom link information except for the next page and self links.</summary>
            <returns>The collection of all Atom link information except for the next page and self links.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Logo">
            <summary>Gets or sets the URI for the feed's logo.</summary>
            <returns>The URI for the feed’s logo.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Rights">
            <summary>Gets or sets the rights text of a feed.</summary>
            <returns>The rights text of a feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.SelfLink">
            <summary>Gets or sets the self link of the feed. This link should point to the source of the feed.</summary>
            <returns>The self link of the feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.NextPageLink">
            <summary>Gets the next page link of the feed. This link should point to the next page of results.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.SourceId">
            <summary>Gets or sets the identifier for the feed if used as metadata of an Atom:source element.</summary>
            <returns>The identifier for the feed if used as metadata of an Atom:source element.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Subtitle">
            <summary>Gets or sets the subtitle of a feed.</summary>
            <returns>The subtitle of a feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Title">
            <summary>Gets or sets the title of the feed.</summary>
            <returns>The title of the feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomFeedMetadata.Updated">
            <summary>Gets or sets the date and time of last update to the source.</summary>
            <returns>The date and time of last update to the source.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomEntryMetadata">
            <summary>
            Type for Atom Syndication Format (Atom) entry annotationsAsArray.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomEntryMetadata.publishedString">
            <summary>
            The date/time when the entry was published.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomEntryMetadata.updatedString">
            <summary>
            Date/Time of last update to the source in string format.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Authors">
            <summary>Gets or sets a collection of authors of an entry.</summary>
            <returns>A collection of authors of an entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.CategoryWithTypeName">
            <summary>Gets or sets the ATOM metadata for the category element which stores the type name of the entry.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Categories">
            <summary>Gets or sets the categories of an entry.</summary>
            <returns>The categories of an entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Contributors">
            <summary>Gets or sets a collection of contributors of an entry.</summary>
            <returns>A collection of contributors of an entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.SelfLink">
            <summary>Gets or sets an Atom link metadata for the self link.</summary>
            <returns>An Atom link metadata for the self link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.EditLink">
            <summary>Gets or sets an Atom link metadata for the edit link.</summary>
            <returns>An Atom link metadata for the edit link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Links">
            <summary>Gets or sets the collection of all Atom link information except for the self/edit links and the navigation property links.</summary>
            <returns>The collection of all Atom link information except for the self/edit links and the navigation property links.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Published">
            <summary>Gets or sets the date and time when the entry was published.</summary>
            <returns>The date and time when the entry was published.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Rights">
            <summary>Gets or sets the rights text of an entry.</summary>
            <returns>The rights text of an entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Source">
            <summary>Gets or sets the source of an entry and if the entry was copied from a different stream the property contains the feed metadata of the original feed.</summary>
            <returns>The source of an entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Summary">
            <summary>Gets or sets the summary of the entry.</summary>
            <returns>The summary of the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Title">
            <summary>Gets or sets the title of the entry.</summary>
            <returns>The title of the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.Updated">
            <summary>Gets or sets the date and time of last update to the source.</summary>
            <returns>The date and time of last update to the source.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.PublishedString">
            <summary>
            The date/time when the entry was published.
            </summary>
            <remarks>
            This property is only used in WCF DS client mode (and replaces the 'Published' property then).
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomEntryMetadata.UpdatedString">
            <summary>
            Date/Time of last update to the source in string format.
            </summary>
            <remarks>
            This property is only used in WCF DS client mode (and replaces the 'Updated' property then).
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomLinkMetadata">
            <summary>
            Atom metadata description for a link.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomLinkMetadata.hrefFromEpm">
            <summary>The IRI value coming from EPM.</summary>
            <remarks>We use AtomLinkMetadata class to hold navigation links, association links etc. 
            They convert Href property to string based on baseURI and whether Href is absolute or not.
            Also we do not want to rely on validation done by Uri class, so we are holding EPM values 
            mapped to link/@href on a separate field.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomLinkMetadata.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata" /> class.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomLinkMetadata.#ctor(Microsoft.Data.OData.Atom.AtomLinkMetadata)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata"/> instance to copy the values from; can be null.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomLinkMetadata.Href">
            <summary>Gets or sets the URI of the link.</summary>
            <returns>The URI of the link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomLinkMetadata.Relation">
            <summary>Gets or sets the link's relation type.</summary>
            <returns>The link’s relation type.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomLinkMetadata.MediaType">
            <summary>Gets or sets the media type of the data returned by the link.</summary>
            <returns>The media type of the data returned by the link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomLinkMetadata.HrefLang">
            <summary>Gets or sets the language tag (for example, en-US) of the resource pointed to by the link.</summary>
            <returns>The language tag of the resource pointed to by the link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomLinkMetadata.Title">
            <summary>Gets or sets a human-readable description of the link.</summary>
            <returns>A human-readable description of the link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomLinkMetadata.Length">
            <summary>Gets or sets a hint at the length of the content returned from the link.</summary>
            <returns>A hint at the length of the content returned from the link.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomCategoryMetadata">
            <summary>
            Atom metadata description for a category.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomCategoryMetadata.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.Atom.AtomCategoryMetadata" /> class.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomCategoryMetadata.#ctor(Microsoft.Data.OData.Atom.AtomCategoryMetadata)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Data.OData.Atom.AtomCategoryMetadata"/> instance to copy the values from; can be null.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomCategoryMetadata.Term">
            <summary>Gets or sets the string value identifying the category.</summary>
            <returns>The string value identifying the category.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomCategoryMetadata.Scheme">
            <summary>Gets or sets the URI that indicates the scheme of the category.</summary>
            <returns>The URI that indicates the scheme of the category.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomCategoryMetadata.Label">
            <summary>Gets or sets a human-readable label for display in user interfaces.</summary>
            <returns>A human-readable label.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomPersonMetadata">
            <summary>
            Atom metadata description for a person.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomPersonMetadata.name">
            <summary>The name of the person.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomPersonMetadata.email">
            <summary>The email of the person.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomPersonMetadata.uriFromEpm">
            <summary>The URI value comming from EPM.</summary>
            <remarks>In WCF DS when mapping a property through EPM to person/uri element we convert the value of the property to string
            and then set the syndication APIs Uri property which is also of type string. Syndication API doesn't do any validation on the value
            and just writes it out. So it's risky to try to convert the string to a Uri instance due to the unknown validation the Uri class
            might be doing. Instead we use internal property to set from EPM.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomPersonMetadata.ToAtomPersonMetadata(System.String)">
            <summary> Converts a string to an <see cref="T:Microsoft.Data.OData.Atom.AtomPersonMetadata" /> instance. </summary>
            <returns>The <see cref="T:Microsoft.Data.OData.Atom.AtomPersonMetadata" /> instance created for name.</returns>
            <param name="name">The name used in the person metadata.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomPersonMetadata.op_Implicit(System.String)~Microsoft.Data.OData.Atom.AtomPersonMetadata">
            <summary>
            Implicit conversion from string to <see cref="T:Microsoft.Data.OData.Atom.AtomPersonMetadata"/>.
            </summary>
            <param name="name">The <see cref="T:System.String"/> to convert to an <see cref="T:Microsoft.Data.OData.Atom.AtomPersonMetadata"/>.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.Atom.AtomPersonMetadata"/> result.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomPersonMetadata.Name">
            <summary>Gets or sets the name of the person (required).</summary>
            <returns>The name of the person (required).</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomPersonMetadata.Uri">
            <summary>Gets or sets an IRI associated with the person.</summary>
            <returns>An IRI associated with the person.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomPersonMetadata.Email">
            <summary>Gets or sets an email address associated with the person.</summary>
            <returns>An email address associated with the person.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomPersonMetadata.UriFromEpm">
            <summary>The URI value comming from EPM.</summary>
            <remarks>In WCF DS when mapping a property through EPM to person/uri element we convert the value of the property to string
            and then set the syndication APIs Uri property which is also of type string. Syndication API doesn't do any validation on the value
            and just writes it out. So it's risky to try to convert the string to a Uri instance due to the unknown validation the Uri class
            might be doing. Instead we use internal property to set from EPM.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomGeneratorMetadata">
            <summary>
            Atom metadata description of a content generator.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomGeneratorMetadata.Name">
            <summary>Gets or sets the human readable name of the generator of the content.</summary>
            <returns>The human readable name of the generator of the content.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomGeneratorMetadata.Uri">
            <summary>Gets or sets the (optional) URI describing the generator of the content.</summary>
            <returns>The (optional) URI describing the generator of the content.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.AtomGeneratorMetadata.Version">
            <summary>Gets or sets the (optional) version of the generator.</summary>
            <returns>The (optional) version of the generator.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomUtils">
            <summary>
            Helper methods related to the ATOM Format
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomUtils.MimeApplicationAtomXmlLength">
            <summary>The length of the media type for ATOM payloads (application/atom+xml).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomUtils.MimeApplicationAtomXmlLengthWithSemicolon">
            <summary>The length of the media type for ATOM payloads when terminated by a ';' (application/atom+xml;).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomUtils.MimeApplicationAtomXmlTypeEntryLength">
            <summary>The length of the media type for links referencing a single entry (application/atom+xml;type=entry).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomUtils.MimeApplicationAtomXmlTypeFeedLength">
            <summary>The length of the media type for links referencing a collection of entries (application/atom+xml;type=feed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomUtils.MimeApplicationAtomXmlTypeEntryParameter">
            <summary>Parameter string for the media type for links referencing a single entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomUtils.MimeApplicationAtomXmlTypeFeedParameter">
            <summary>Parameter string for the media type for links referencing a collection of entries.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomUtils.ComputeODataNavigationLinkRelation(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Creates the value for the navigation property's link relation attribute.
            </summary>
            <param name="navigationLink">The link representing the navigation property for which the relation value is created.</param>
            <returns>The relation attribute value for the navigation property's link relation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomUtils.ComputeODataNavigationLinkType(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Creates the value for the navigation property's type attribute.
            </summary>
            <param name="navigationLink">The link representing the navigation property for which the type value is created.</param>
            <returns>The type attribute value for the navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomUtils.ComputeODataAssociationLinkRelation(Microsoft.Data.OData.ODataAssociationLink)">
            <summary>
            Creates the value for the navigation property's association link relation attribute.
            </summary>
            <param name="associationLink">The link representing the navigation property's association for which the relation value is created.</param>
            <returns>The relation attribute value for the navigation property's association link relation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomUtils.ComputeStreamPropertyRelation(Microsoft.Data.OData.ODataProperty,System.Boolean)">
            <summary>
            Creates the value for the stream property's link relation attribute.
            </summary>
            <param name="streamProperty">The stream property to create the relation for.</param>
            <param name="forEditLink">'true' if the relation is computed for an edit link; otherwise 'false'.</param>
            <returns>The relation attribute value for the stream property's link relation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomUtils.UnescapeAtomLinkRelationAttribute(System.String)">
            <summary>
            Unescape the <paramref name="relation"/> attribute value for ATOM link element.
            </summary>
            <param name="relation">ATOM link relation attribute value.</param>
            <returns>
            The unescaped relation attribute string if it's a valid URI.
            null if relation attribute is not a valid URI.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomUtils.GetNameFromAtomLinkRelationAttribute(System.String,System.String)">
            <summary>
            Return name following the specified <paramref name="namespacePrefix"/> in the <paramref name="relation"/>.
            </summary>
            <param name="relation">ATOM link relation attribute value, unescaped parsed URI string.</param>
            <param name="namespacePrefix">Value which the rel attribute should start with.</param>
            <returns>
            The name if the <paramref name="relation"/> starts with the given <paramref name="namespacePrefix"/>.
            If the <paramref name="relation"/> value does not start with the <paramref name="namespacePrefix"/> a null value is returned.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.AtomUtils.IsExactNavigationLinkTypeMatch(System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Determines whether the type of a navigation link has one of the expected standard values.
            </summary>
            <param name="navigationLinkType">The navigation link type to check.</param>
            <param name="hasEntryType">true if the navigation link type has a 'type' parameter with the value 'entry'; otherwise false.</param>
            <param name="hasFeedType">true if the navigation link type has a 'type' parameter with the value 'feed'; otherwise false.</param>
            <returns>true if the navigation link type is the expected application/atom+xml; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataUtils">
            <summary>
            Helper methods used by the OData writer to write ATOM metadata.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataUtils.MergeLinkMetadata(Microsoft.Data.OData.Atom.AtomLinkMetadata,System.String,System.Uri,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata"/> instance by merging the given
            <paramref name="metadata"/> (if any) with the specified <paramref name="href"/>,
            <paramref name="relation"/> and (optional) <paramref name="title"/>.
            </summary>
            <param name="metadata">The metadata to merge with the <paramref name="href"/>, <paramref name="relation"/> and (optional) <paramref name="title"/>.</param>
            <param name="relation">The relation to use in the merged metadata.</param>
            <param name="href">The href to use in the merged metadata.</param>
            <param name="title">The (optional) title to use in the merged metadata.</param>
            <param name="mediaType">The (optional) media type to use in the merged metadata.</param>
            <returns>A new <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata"/> instance created by merging all the arguments.</returns>
            <remarks>
            If the <paramref name="metadata"/> already holds values for <paramref name="href"/>,
            <paramref name="relation"/>, <paramref name="title"/>, or <paramref name="mediaType"/> this method validates that they
            are the same as the ones specified in the method arguments.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterMetadataUtils.MergeCategoryMetadata(Microsoft.Data.OData.Atom.AtomCategoryMetadata,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Data.OData.Atom.AtomCategoryMetadata"/> instance by merging the given
            <paramref name="categoryMetadata"/> (if any) with the specified <paramref name="term"/> and <paramref name="scheme"/>.
            </summary>
            <param name="categoryMetadata">The metadata to merge with the <paramref name="term"/> and <paramref name="scheme"/>.</param>
            <param name="term">The term to use in the merged metadata.</param>
            <param name="scheme">The scheme to use in the merged metadata.</param>
            <returns>A new <see cref="T:Microsoft.Data.OData.Atom.AtomCategoryMetadata"/> instance created by merging all the arguments.</returns>
            <remarks>
            If the <paramref name="categoryMetadata"/> already holds values for <paramref name="term"/> or <paramref name="scheme"/>
            this method validates that they are the same as the ones specified in the method arguments.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomConvert">
            <summary>
            Helper to convert values to strings compliant to the ATOM format
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomConvert.zeroOffset">
            <summary>Used for settings the updated element properly.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Boolean)">
            <summary>
            Converts a boolean to the corresponding ATOM string representation.
            </summary>
            <param name="b">The boolean value to convert.</param>
            <returns>The ATOM strings representing boolean literals.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Byte)">
            <summary>
            Converts a byte to the corresponding ATOM string representation.
            </summary>
            <param name="b">The byte value to convert.</param>
            <returns>The ATOM strings representing the byte value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Decimal)">
            <summary>
            Converts a decimal to the corresponding ATOM string representation.
            </summary>
            <param name="d">The decimal value to convert.</param>
            <returns>The ATOM strings representing the decimal value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.DateTime)">
            <summary>
            Converts the given date/time value to the string appropriate for Atom format
            </summary>
            <param name="dt">The date/time value to convert.</param>
            <returns>The string version of the date/time value in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the given DateTimeOffset value to string appropriate for Atom format.
            </summary>
            <param name="dateTime">Given DateTimeOffset value.</param>
            <returns>Atom format string representation of <paramref name="dateTime"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToAtomString(System.DateTimeOffset)">
            <summary>
            Converts the given DateTimeOffset value to string appropriate for Atom format.
            ToAtomString is used to write values in atom specific elements like updated, etc.
            </summary>
            <param name="dateTime">Given DateTimeOffset value.</param>
            <returns>Atom format string representation of <paramref name="dateTime"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the given timespan value to the string appropriate for Atom format
            </summary>
            <param name="ts">The timespan value to convert.</param>
            <returns>The string version of the timespan value in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Double)">
            <summary>
            Converts the given double value to the string appropriate for Atom format
            </summary>
            <param name="d">The double value to convert.</param>
            <returns>The string version of the double value in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Int16)">
            <summary>
            Converts the given Int16 value to the string appropriate for Atom format
            </summary>
            <param name="i">The Int16 value to convert.</param>
            <returns>The string version of the Int16 value in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Int32)">
            <summary>
            Converts the given Int32 value to the string appropriate for Atom format.
            </summary>
            <param name="i">The Int32 value to convert.</param>
            <returns>The string version of the Int32 in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Int64)">
            <summary>
            Converts the given Int64 value to the string appropriate for Atom format.
            </summary>
            <param name="i">The Int64 value to convert.</param>
            <returns>The string version of the Int64 in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.SByte)">
            <summary>
            Converts the given SByte value to the string appropriate for Atom format.
            </summary>
            <param name="sb">The SByte value to convert.</param>
            <returns>The string version of the SByte in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Byte[])">
            <summary>
            Converts the given byte array value to the string appropriate for Atom format.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>The string version of the byte array in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Single)">
            <summary>
            Converts the given Single value to the string appropriate for Atom format.
            </summary>
            <param name="s">The Single value to convert.</param>
            <returns>The string version of the Single in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomConvert.ToString(System.Guid)">
            <summary>
            Converts the given Guid value to the string appropriate for Atom format.
            </summary>
            <param name="guid">The Guid value to convert.</param>
            <returns>The string version of the Guid in Atom format.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ExtensionMethods">
            <summary>
            Atom specific extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ExtensionMethods.Atom(Microsoft.Data.OData.ODataEntry)">
            <summary>Determines an extension method to get the <see cref="T:Microsoft.Data.OData.Atom.AtomEntryMetadata" /> for an annotatable entry.</summary>
            <returns>An <see cref="T:Microsoft.Data.OData.Atom.AtomEntryMetadata" /> instance or null if no annotation of that type exists.</returns>
            <param name="entry">The entry instance to get the annotation from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ExtensionMethods.Atom(Microsoft.Data.OData.ODataFeed)">
            <summary>Determines an extension method to get the <see cref="T:Microsoft.Data.OData.Atom.AtomFeedMetadata" /> for an annotatable feed.</summary>
            <returns>An <see cref="T:Microsoft.Data.OData.Atom.AtomFeedMetadata" /> instance or null if no annotation of that type exists.</returns>
            <param name="feed">The feed instance to get the annotation from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ExtensionMethods.Atom(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>Determines an extension method to get the <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata" /> for an annotatable navigation link.</summary>
            <returns>An <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata" /> instance or null if no annotation of that type exists.</returns>
            <param name="navigationLink">The navigation link instance to get the annotation from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ExtensionMethods.Atom(Microsoft.Data.OData.ODataWorkspace)">
            <summary>Determines an extension method to get the <see cref="T:System.Data.OData.Atom.AtomWorkspaceMetadata" /> for an annotatable workspace.</summary>
            <returns>An <see cref="T:Microsoft.Data.OData.Atom.AtomWorkspaceMetadata" /> instance or null if no annotation of that type exists.</returns>
            <param name="workspace">The workspace to get the annotation from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ExtensionMethods.Atom(Microsoft.Data.OData.ODataResourceCollectionInfo)">
            <summary>Determines an extension method to get the <see cref="T:Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata" /> for an annotatable (resource) collection.</summary>
            <returns>An <see cref="T:Microsoft.Data.OData.Atom.AtomResourceCollectionMetadata" /> instance or null if no annotation of that type exists.</returns>
            <param name="collection">The (resource) collection to get the annotation from.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ExtensionMethods.Atom(Microsoft.Data.OData.ODataAssociationLink)">
            <summary>Determines an extension method to get the <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata" /> for an annotatable association link.</summary>
            <returns>An <see cref="T:Microsoft.Data.OData.Atom.AtomLinkMetadata" /> instance or null if no annotation of that type exists.</returns>
            <param name="associationLink">The association link to get the annotation from.</param>
        </member>
        <member name="T:Microsoft.Data.OData.AsyncBufferedStream">
            <summary>
            Write-only stream which buffers all synchronous write operations until FlushAsync is called.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AsyncBufferedStream.innerStream">
            <summary>
            The stream being wrapped.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AsyncBufferedStream.bufferQueue">
            <summary>
            Queue of buffers to write.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AsyncBufferedStream.bufferToAppendTo">
            <summary>
            The last buffer in the bufferQueue. This is the buffer we're writing into.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The underlying async stream to wrap. Note that only asynchronous write operation will be invoked on this stream.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.Flush">
            <summary>
            Flush the stream to the underlying storage.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream. This operation is not supported by this stream.
            </summary>
            <param name="buffer">The buffer to read the data to.</param>
            <param name="offset">The offset in the buffer to write to.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the stream. This operation is not supported by this stream.
            </summary>
            <param name="offset">The offset to seek to.</param>
            <param name="origin">The origin of the seek operation.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This operation is not supported by this stream.
            </summary>
            <param name="value">The length in bytes to set.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the stream.
            </summary>
            <param name="buffer">The buffer to get data from.</param>
            <param name="offset">The offset in the buffer to start from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.Clear">
            <summary>
            Clears any internal buffers without writing them to the underlying stream.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.FlushSync">
            <summary>
            Synchronous flush operation. This will flush all buffered bytes to the underlying stream through synchronous writes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.FlushAsync">
            <summary>
            Asynchronous flush operation. This will flush all buffered bytes to the underlying stream through asynchronous writes.
            </summary>
            <returns>The task representing the asynchronous flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.FlushAsyncInternal">
            <summary>
            Asynchronous flush operation. This will flush all buffered bytes to the underlying stream through asynchronous writes.
            </summary>
            <returns>The task representing the asynchronous flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True if called from Dispose; false if called from the finalizer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.QueueNewBuffer">
            <summary>
            Queues a new buffer to the queue of buffers
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.PrepareFlushBuffers">
            <summary>
            Prepares all buffers for flushing and returns the queue of buffers to flush.
            </summary>
            <returns>The queue of buffer to flush.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.FlushBuffersAsync(System.Collections.Generic.Queue{Microsoft.Data.OData.AsyncBufferedStream.DataBuffer})">
            <summary>
            Returns enumeration of tasks to run to flush all pending buffers to the underlying stream.
            </summary>
            <param name="buffers">The queue of buffers that need to be flushed.</param>
            <returns>Enumeration of tasks to run to flush all buffers.</returns>
            <remarks>This method relies on lazy eval of the enumerator, never enumerate through it synchronously.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.AsyncBufferedStream.CanRead">
            <summary>
            Determines if the stream can read - this one cannot
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.AsyncBufferedStream.CanSeek">
            <summary>
            Determines if the stream can seek - this one cannot
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.AsyncBufferedStream.CanWrite">
            <summary>
            Determines if the stream can write - this one can
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.AsyncBufferedStream.Length">
            <summary>
            Returns the length of the stream, which this implementation doesn't support.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.AsyncBufferedStream.Position">
            <summary>
            Gets or sets the position in the stream, this stream doesn't support seeking, so position is also unsupported.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.AsyncBufferedStream.DataBuffer">
            <summary>
            Class to wrap a byte buffer used to store portion of the buffered data.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AsyncBufferedStream.DataBuffer.BufferSize">
            <summary>
            The size of a buffer to allocate (80 KB is the limit for large object heap, so use 79 to be sure to avoid LOB)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AsyncBufferedStream.DataBuffer.buffer">
            <summary>
            The byte buffer used to store the data.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AsyncBufferedStream.DataBuffer.storedCount">
            <summary>
            Number of bytes being stored.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.DataBuffer.#ctor">
            <summary>
            Constructor - creates a new buffer
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.DataBuffer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data into the buffer.
            </summary>
            <param name="data">The buffer containing the data to write.</param>
            <param name="index">The index to start at.</param>
            <param name="count">Number of bytes to write.</param>
            <returns>How many bytes were written.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.DataBuffer.WriteToStream(System.IO.Stream)">
            <summary>
            Writes the buffer to the specified stream.
            </summary>
            <param name="stream">The stream to write the data into.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AsyncBufferedStream.DataBuffer.WriteToStreamAsync(System.IO.Stream)">
            <summary>
            Creates a task which writes the buffer to the specified stream.
            </summary>
            <param name="stream">The stream to write the data into.</param>
            <returns>The task which represent the asynchronous write operation.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.AtomConstants">
            <summary>
            Constant values related to the ATOM format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.XmlNamespacesNamespace">
            <summary>'http://www.w3.org/2000/xmlns/' - namespace for namespace declarations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.XmlNamespace">
            <summary>Attribute use to add xml: namespaces specific attributes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.XmlnsNamespacePrefix">
            <summary> Schema Namespace prefix For xmlns.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.XmlNamespacePrefix">
            <summary> Schema Namespace prefix For xml.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.XmlBaseAttributeName">
            <summary>XML attribute value to indicate the base URI for a document or element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.XmlLangAttributeName">
            <summary>Name of the xml:lang attribute.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.XmlSpaceAttributeName">
            <summary>Name of the xml:space attribute.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.XmlPreserveSpaceAttributeValue">
            <summary>'preserve' value for the xml:space attribute.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataMetadataNamespace">
            <summary>XML namespace for data service annotations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataMetadataNamespacePrefix">
            <summary>XML namespace prefix for data service annotations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataNamespace">
            <summary>XML namespace for data services.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataNamespacePrefix">
            <summary>Prefix for data services namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataETagAttributeName">
            <summary>OData attribute which indicates the etag value for the declaring entry element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataNullAttributeName">
            <summary>OData attribute which indicates the null value for the element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataCountElementName">
            <summary>OData element name for the 'count' element</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataSchemeNamespace">
            <summary>OData scheme namespace for data services category scheme in atom:category elements.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataStreamPropertyMediaResourceSegmentName">
            <summary>OData stream property 'mediaresource' Uri segment name used in named stream link relations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataStreamPropertyEditMediaSegmentName">
            <summary>OData stream property 'edit-media' Uri segment name used in named stream link relations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataStreamPropertyMediaResourceRelatedLinkRelationPrefix">
            <summary>OData stream property prefix for named stream 'mediaresource' related link relations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataStreamPropertyEditMediaRelatedLinkRelationPrefix">
            <summary>OData stream property prefix for named stream 'edit-media' related link relations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataNavigationPropertiesRelatedSegmentName">
            <summary>OData navigation properties 'related' Uri segment name used in navigation link relations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataNavigationPropertiesRelatedLinkRelationPrefix">
            <summary>OData navigation properties prefix for navigation link relations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataNavigationPropertiesAssociationRelatedSegmentName">
            <summary>OData navigation properties 'relatedlinks' Uri segment name used in association link relations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataNavigationPropertiesAssociationLinkRelationPrefix">
            <summary>OData association link prefix for relation attribute.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataInlineElementName">
            <summary>'Inline' - wrapping element for inlined entry/feed content.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataErrorElementName">
            <summary>Name of the error element for Xml error responses.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataErrorCodeElementName">
            <summary>Name of the error code element for Xml error responses.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataErrorMessageElementName">
            <summary>Name of the error message element for Xml error responses.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataInnerErrorElementName">
            <summary>Name of the inner error message element for Xml error responses.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataInnerErrorMessageElementName">
            <summary>Name of the message element in inner errors for Xml error responses.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataInnerErrorTypeElementName">
            <summary>Name of the type element in inner errors for Xml error responses.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataInnerErrorStackTraceElementName">
            <summary>Name of the stack trace element in inner errors for Xml error responses.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataInnerErrorInnerErrorElementName">
            <summary>Name of the inner error element nested in inner errors for Xml error responses.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataCollectionItemElementName">
            <summary>Element name for the items in a collection.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataActionElementName">
            <summary>Element name for m:action.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataFunctionElementName">
            <summary>Element name for m:function.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataOperationMetadataAttribute">
            <summary>Attribute name for m:action|m:function/@metadata.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataOperationTitleAttribute">
            <summary>Attribute name for m:action|m:function/@title.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataOperationTargetAttribute">
            <summary>Attribute name for m:action|m:function/@target.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataLinksElementName">
            <summary>XML element name for the wrapper 'links' element around a sequence of Uris in response to a $links request.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataUriElementName">
            <summary>XML element name for a Uri response to a $links request.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataNextLinkElementName">
            <summary>XML element name for a next link in a response to a $links request.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataAnnotationElementName">
            <summary>XML element name for an annotation in an ATOM payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataAnnotationTargetAttribute">
            <summary>Attribute name for m:annotation/@target.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataAnnotationTermAttribute">
            <summary>Attribute name for m:annotation/@term.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataAnnotationStringAttribute">
            <summary>Attribute name for m:annotation/@string.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataAnnotationBoolAttribute">
            <summary>Attribute name for m:annotation/@bool.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataAnnotationDecimalAttribute">
            <summary>Attribute name for m:annotation/@decimal.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataAnnotationIntAttribute">
            <summary>Attribute name for m:annotation/@int.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.ODataAnnotationFloatAttribute">
            <summary>Attribute name for m:annotation/@float.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomNamespace">
            <summary>Schema namespace for Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomNamespacePrefix">
            <summary>Prefix for the Atom namespace - empty since it is the default namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.NonEmptyAtomNamespacePrefix">
            <summary>Prefix for the Atom namespace used in cases where we need a non-empty prefix.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomEntryElementName">
            <summary>XML element name to mark entry element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomFeedElementName">
            <summary>XML element name to mark feed element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomContentElementName">
            <summary>XML element name to mark content element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomTypeAttributeName">
            <summary>XML element name to mark type attribute in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPropertiesElementName">
            <summary>Element containing property values when 'content' is used for media link entries</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomIdElementName">
            <summary>XML element name to mark id element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomTitleElementName">
            <summary>XML element name to mark title element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomSubtitleElementName">
            <summary>XML element name to mark the subtitle element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomSummaryElementName">
            <summary>XML element name to mark the summary element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishedElementName">
            <summary>XML element name to mark the 'published' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomSourceElementName">
            <summary>XML element name to mark the 'source' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomRightsElementName">
            <summary>XML element name to mark the 'rights' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomLogoElementName">
            <summary>XML element name to mark the 'logo' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomAuthorElementName">
            <summary>XML element name to mark the 'author' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomAuthorNameElementName">
            <summary>XML element name to mark the 'author name' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomContributorElementName">
            <summary>XML element name to mark the 'contributor' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomGeneratorElementName">
            <summary>XML element name to mark the 'generator' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomGeneratorUriAttributeName">
            <summary>XML attribute name of the 'uri' attribute of a 'generator' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomGeneratorVersionAttributeName">
            <summary>XML attribute name of the 'version' attribute of a 'generator' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomIconElementName">
            <summary>XML element name to mark the 'icon' element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPersonNameElementName">
            <summary>XML element name to mark the 'name' element in an Atom person construct.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPersonUriElementName">
            <summary>XML element name to mark the 'uri' element in an Atom person construct.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPersonEmailElementName">
            <summary>XML element name to mark the 'email' element in an Atom person construct.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomUpdatedElementName">
            <summary>'updated' - XML element name for ATOM 'updated' element for entries.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomCategoryElementName">
            <summary>'category' - XML element name for ATOM 'category' element for entries.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomCategoryTermAttributeName">
            <summary>'term' - XML attribute name for ATOM 'term' attribute for categories.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomCategorySchemeAttributeName">
            <summary>'scheme' - XML attribute name for ATOM 'scheme' attribute for categories.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomCategoryLabelAttributeName">
            <summary>'scheme' - XML attribute name for ATOM 'label' attribute for categories.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomEditRelationAttributeValue">
            <summary> Atom link relation attribute value for edit links.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomSelfRelationAttributeValue">
            <summary> Atom link relation attribute value for self links.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomLinkElementName">
            <summary>XML element name to mark link element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomLinkRelationAttributeName">
            <summary>XML attribute name of the link relation attribute in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomLinkTypeAttributeName">
            <summary>XML attribute name of the type attribute of a link in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomLinkHrefAttributeName">
            <summary>XML attribute name of the href attribute of a link in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomLinkHrefLangAttributeName">
            <summary>XML attribute name of the hreflang attribute of a link in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomLinkTitleAttributeName">
            <summary>XML attribute name of the title attribute of a link in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomLinkLengthAttributeName">
            <summary>XML attribute name of the length attribute of a link in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomHRefAttributeName">
            <summary>XML element name to mark href attribute element in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.MediaLinkEntryContentSourceAttributeName">
            <summary>Atom source attribute name for the content of media link entries.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomEditMediaRelationAttributeValue">
            <summary>Atom link relation attribute value for edit-media links.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomNextRelationAttributeValue">
            <summary>XML attribute value of the link relation attribute for next page links in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomDeltaRelationAttributeValue">
            <summary>XML attribute value of the link relation attribute for delta links in Atom.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomAlternateRelationAttributeValue">
            <summary>Link relation: alternate - refers to a substitute for this context.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomRelatedRelationAttributeValue">
            <summary>Link relation: related - identifies a related resource.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomEnclosureRelationAttributeValue">
            <summary>Link relation: enclosure - identifies a related resource that is potentially large and might require special handling.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomViaRelationAttributeValue">
            <summary>Link relation: via - identifies a resource that is the source of the information in the link's context.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomDescribedByRelationAttributeValue">
            <summary>Link relation: describedby - refers to a resource providing information about the link's context.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomServiceRelationAttributeValue">
            <summary>Link relation: service - indicates a URI that can be used to retrieve a service document.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomTextConstructTextKind">
            <summary>Atom metadata text construct kind: plain text</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomTextConstructHtmlKind">
            <summary>Atom metadata text construct kind: html</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomTextConstructXHtmlKind">
            <summary>Atom metadata text construct kind: xhtml</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomWorkspaceDefaultTitle">
            <summary>Default title for service document workspaces.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomTrueLiteral">
            <summary>'true' literal</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomFalseLiteral">
            <summary>'false' literal</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.IanaLinkRelationsNamespace">
            <summary>IANA link relations namespace.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingNamespace">
            <summary>The Atom Publishing Protocol (APP) namespace: 'http://www.w3.org/2007/app'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingServiceElementName">
            <summary>The name of the top-level 'service' element when writing service documents in Xml format.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingWorkspaceElementName">
            <summary>The name of the 'workspace' element when writing service documents in Xml format.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingCollectionElementName">
            <summary>The name of the 'collection' element when writing service documents in Xml format.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingCategoriesElementName">
            <summary>The name of the 'categories' element encountered while reading a service document in XML format.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingAcceptElementName">
            <summary>The name of the 'accept' element encountered while reading a service document in XML format.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingFixedAttributeName">
            <summary>The name of the 'fixed' attribute of an inline categories element in APP.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingFixedYesValue">
            <summary>The value 'yes' of the 'fixed' attribute of an inline categories element in APP.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.AtomPublishingFixedNoValue">
            <summary>The value 'no' of the 'fixed' attribute of an inline categories element in APP.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.GeoRssNamespace">
            <summary>XML namespace for GeoRss format</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.GeoRssPrefix">
            <summary>XML namespace prefix for GeoRss format</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.GmlNamespace">
            <summary>XML namespace for GML format</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.AtomConstants.GmlPrefix">
            <summary>XML namespace prefix for GML format</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.ODataJsonWriterUtils">
            <summary>
            Helper methods used by the OData writer for the JSON format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonWriterUtils.WriteError(Microsoft.Data.OData.Json.IJsonWriter,System.Action{System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataInstanceAnnotation}},Microsoft.Data.OData.ODataError,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Write an error message.
            </summary>
            <param name="jsonWriter">The JSON writer to write the error.</param>
            <param name="writeInstanceAnnotationsDelegate">Action to write the instance annotations.</param>
            <param name="error">The error instance to write.</param>
            <param name="includeDebugInformation">A flag indicating whether error details should be written (in debug mode only) or not.</param>
            <param name="maxInnerErrorDepth">The maximumum number of nested inner errors to allow.</param>
            <param name="writingJsonLight">true if we're writing JSON lite, false if we're writing verbose JSON.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonWriterUtils.WriteMetadataWithTypeName(Microsoft.Data.OData.Json.IJsonWriter,System.String)">
            <summary>
            Writes the __metadata property with the specified type name.
            </summary>
            <param name="jsonWriter">The JSON writer to write to.</param>
            <param name="typeName">The type name to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonWriterUtils.StartJsonPaddingIfRequired(Microsoft.Data.OData.Json.IJsonWriter,Microsoft.Data.OData.ODataMessageWriterSettings)">
            <summary>
            Will write the function's name and start the JSONP scope if we are writing a response and the 
            JSONP function name is not null or empty.
            </summary>
            <param name="jsonWriter">JsonWriter to write to.</param>
            <param name="settings">Writer settings.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonWriterUtils.EndJsonPaddingIfRequired(Microsoft.Data.OData.Json.IJsonWriter,Microsoft.Data.OData.ODataMessageWriterSettings)">
            <summary>
            If we are writing a response and the given Json Padding function name is not null or empty 
            this function will close the JSONP scope.
            </summary>
            <param name="jsonWriter">JsonWriter to write to.</param>
            <param name="settings">Writer settings.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonWriterUtils.UriToUriString(Microsoft.Data.OData.ODataOutputContext,System.Uri,System.Boolean)">
            <summary>
            Returns the string representation of the URI; Converts the URI into an absolute URI if the <paramref name="makeAbsolute"/> parameter is set to true.
            </summary>
            <param name="outputContext">The output context for which to convert the URI.</param>
            <param name="uri">The uri to process.</param>
            <param name="makeAbsolute">true, if the URI needs to be translated into an absolute URI; false otherwise.</param>
            <returns>If the <paramref name="makeAbsolute"/> parameter is set to true, then a string representation of an absolute URI which is either the 
            specified <paramref name="uri"/> if it was absolute, or it's a combination of the BaseUri and the relative <paramref name="uri"/>; 
            otherwise a string representation of the specified <paramref name="uri"/>.
            </returns>
            <remarks>This method will fail if <paramref name="makeAbsolute"/> is set to true and the specified <paramref name="uri"/> is relative and there's no base URI available.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonWriterUtils.WriteError(Microsoft.Data.OData.Json.IJsonWriter,System.String,System.String,System.String,Microsoft.Data.OData.ODataInnerError,System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataInstanceAnnotation},System.Action{System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataInstanceAnnotation}},System.Int32,System.Boolean)">
            <summary>
            Write an error message.
            </summary>
            <param name="jsonWriter">JSON writer.</param>
            <param name="code">The code of the error.</param>
            <param name="message">The message of the error.</param>
            <param name="messageLanguage">The language of the message.</param>
            <param name="innerError">Inner error details that will be included in debug mode (if present).</param>
            <param name="instanceAnnotations">Instance annotations for this error.</param>
            <param name="writeInstanceAnnotationsDelegate">Action to write the instance annotations.</param>
            <param name="maxInnerErrorDepth">The maximumum number of nested inner errors to allow.</param>
            <param name="writingJsonLight">true if we're writing JSON lite, false if we're writing verbose JSON.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.ODataJsonWriterUtils.WriteInnerError(Microsoft.Data.OData.Json.IJsonWriter,Microsoft.Data.OData.ODataInnerError,System.String,System.Int32,System.Int32)">
            <summary>
            Write an inner error property and message.
            </summary>
            <param name="jsonWriter">The JSON writer to write the error to.</param>
            <param name="innerError">Inner error details.</param>
            <param name="innerErrorPropertyName">The property name for the inner error property.</param>
            <param name="recursionDepth">The number of times this method has been called recursively.</param>
            <param name="maxInnerErrorDepth">The maximumum number of nested inner errors to allow.</param>
        </member>
        <member name="T:Microsoft.Data.OData.HttpUtils">
            <summary>
            Class with utility methods to work with HTTP concepts
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ReadMimeType(System.String,System.String@,System.String@)">
            <summary>Reads a Content-Type header and extracts the media type's name (type/subtype) and parameters.</summary>
            <param name="contentType">The Content-Type header.</param>
            <param name="mediaTypeName">The media type in standard type/subtype form, without parameters.</param>
            <param name="mediaTypeCharset">The (optional) charset parameter of the media type.</param>
            <returns>The parameters of the media type not including the 'charset' parameter.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.BuildContentType(Microsoft.Data.OData.MediaType,System.Text.Encoding)">
            <summary>Builds a Content-Type header which includes media type and encoding information.</summary>
            <param name="mediaType">Media type to be used.</param>
            <param name="encoding">Encoding to be used in response, possibly null.</param>
            <returns>The value for the Content-Type header.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.MediaTypesFromString(System.String)">
            <summary>Returns all media types from the specified (non-blank) <paramref name='text' />.</summary>
            <param name='text'>Non-blank text, as it appears on an HTTP Accepts header.</param>
            <returns>An enumerable object with key/value pairs of media type descriptions with their (optional) charset parameter values.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.CompareMediaTypeNames(System.String,System.String)">
            <summary>
            Does an ordinal ignore case comparision of the given media type names.
            </summary>
            <param name="mediaTypeName1">First media type name.</param>
            <param name="mediaTypeName2">Second media type name.</param>
            <returns>returns true if the media type names are the same.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.CompareMediaTypeParameterNames(System.String,System.String)">
            <summary>
            Does an ordinal ignore case comparision of the given MIME type parameter name.
            </summary>
            <param name="parameterName1">First parameter name.</param>
            <param name="parameterName2">Second parameter name.</param>
            <returns>returns true if the parameter names are the same.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.EncodingFromAcceptableCharsets(System.String,Microsoft.Data.OData.MediaType,System.Text.Encoding,System.Text.Encoding)">
            <summary>Gets the best encoding available for the specified charset request.</summary>
            <param name="acceptableCharsets">
            The Accept-Charset header value (eg: "iso-8859-5, unicode-1-1;q=0.8").
            </param>
            <param name="mediaType">The media type used to compute the default encoding for the payload.</param>
            <param name="utf8Encoding">The encoding to use for UTF-8 charsets; we use the one without the BOM.</param>
            <param name="defaultEncoding">The encoding to use if no encoding could be computed from the <paramref name="acceptableCharsets"/> or <paramref name="mediaType"/>.</param>
            <returns>An Encoding object appropriate to the specifed charset request.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ReadQualityValue(System.String,System.Int32@,System.Int32@)">
            <summary>
            Reads the numeric part of a quality value substring, normalizing it to 0-1000
            rather than the standard 0.000-1.000 ranges.
            </summary>
            <param name="text">Text to read qvalue from.</param>
            <param name="textIndex">Index into text where the qvalue starts.</param>
            <param name="qualityValue">After the method executes, the normalized qvalue.</param>
            <remarks>
            For more information, see RFC 2616.3.8.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ValidateHttpMethod(System.String)">
            <summary>
            Validates that the HTTP method string matches one of the supported HTTP methods.
            </summary>
            <param name="httpMethodString">The HTTP method string to validate.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.IsQueryMethod(System.String)">
            <summary>
            Determines whether the given HTTP method is one that is accepted for queries. GET is accepted for queries.
            </summary>
            <param name="httpMethod">The HTTP method to check.</param>
            <returns>True if the given httpMethod is GET.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.GetStatusMessage(System.Int32)">
            <summary>
            Gets the string status message for a given Http response status code.
            </summary>
            <param name="statusCode">The status code to get the status message for.</param>
            <returns>The string status message for the <paramref name="statusCode"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.GetEncodingFromCharsetName(System.String)">
            <summary>
            Returns the encoding object for the specified charset name.
            </summary>
            <param name="charsetName">The of the charset to get the encoding for.</param>
            <returns>The encoding object or null if such encoding is not supported.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ReadTokenOrQuotedStringValue(System.String,System.String,System.Int32@,System.Boolean@,System.Func{System.String,System.Exception})">
            <summary>
            Reads a token or quoted-string value from the header.
            </summary>
            <param name="headerName">Name of the header.</param>
            <param name="headerText">Header text.</param>
            <param name="textIndex">Parsing index in <paramref name="headerText"/>.</param>
            <param name="isQuotedString">Returns true if the value is a quoted-string, false if the value is a token.</param>
            <param name="createException">Func to create the appropriate exception to throw from the given error message.</param>
            <returns>The token or quoted-string value that was read from the header.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.SkipWhitespace(System.String,System.Int32@)">
            <summary>
            Skips whitespace in the specified text by advancing an index to
            the next non-whitespace character.
            </summary>
            <param name="text">Text to scan.</param>
            <param name="textIndex">Index to begin scanning from.</param>
            <returns>true if the end of the string was reached, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.AcceptCharsetParts(System.String)">
            <summary>
            Enumerates each charset part in the specified Accept-Charset header.
            </summary>
            <param name="headerValue">Non-null and non-empty header value for Accept-Charset.</param>
            <returns>
            A (non-sorted) enumeration of CharsetPart elements, which include
            a charset name and a quality (preference) value, normalized to 0-1000.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ReadMediaTypes(System.String)">
            <summary>Reads a media type definition as used in a Content-Type header.</summary>
            <param name="text">Text to read.</param>
            <returns>A list of key/value pairs representing the <see cref="T:Microsoft.Data.OData.MediaType"/>s and their (optional) 'charset' parameters
            parsed from the specified <paramref name="text"/></returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ReadMediaTypeParameter(System.String,System.Int32@,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@,System.String@)">
            <summary>Read a parameter for a media type/range.</summary>
            <param name="text">Text to read from.</param>
            <param name="textIndex">Pointer in text.</param>
            <param name="parameters">Array with parameters to grow as necessary.</param>
            <param name="charset">The (optional) charset parameter value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ReadMediaTypeAndSubtype(System.String,System.Int32@,System.String@,System.String@)">
            <summary>Reads the type and subtype specifications for a media type name.</summary>
            <param name='mediaTypeName'>Text in which specification exists.</param>
            <param name='textIndex'>Pointer into text.</param>
            <param name='type'>Type of media found.</param>
            <param name='subType'>Subtype of media found.</param>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.IsHttpToken(System.Char)">
            <summary>
            Determines whether the specified character is a valid HTTP header token character.
            </summary>
            <param name="c">Character to verify.</param>
            <returns>true if c is a valid HTTP header token character; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.IsValidInQuotedHeaderValue(System.Char)">
            <summary>
            Determines whether the specified character is valid in the quoted header values.
            </summary>
            <param name="c">Character to verify.</param>
            <returns>true if c is a valid in a quoted HTTP header value; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.IsHttpSeparator(System.Char)">
            <summary>
            Determines whether the specified character is a valid HTTP separator.
            </summary>
            <param name="c">Character to verify.</param>
            <returns>true if c is a separator; false otherwise.</returns>
            <remarks>
            See RFC 2616 2.2 for further information.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ReadToken(System.String,System.Int32@)">
            <summary>
            Reads a token on the specified text by advancing an index on it.
            </summary>
            <param name="text">Text to read token from.</param>
            <param name="textIndex">Index for the position being scanned on text.</param>
            <returns>true if the end of the text was reached; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.DigitToInt32(System.Char)">
            <summary>
            Converts the specified character from the ASCII range to a digit.
            </summary>
            <param name="c">Character to convert.</param>
            <returns>
            The Int32 value for c, or -1 if it is an element separator.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.IsHttpElementSeparator(System.Char)">
            <summary>
            Verfies whether the specified character is a valid separator in
            an HTTP header list of element.
            </summary>
            <param name="c">Character to verify.</param>
            <returns>true if c is a valid character for separating elements; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.ReadLiteral(System.String,System.Int32,System.String)">
            <summary>
            "Reads" a literal from the specified string by verifying that
            the exact text can be found at the specified position.
            </summary>
            <param name="text">Text within which a literal should be checked.</param>
            <param name="textIndex">Index in text where the literal should be found.</param>
            <param name="literal">Literal to check at the specified position.</param>
            <returns>true if the end of string is found; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.HttpUtils.CharsetPart">
            <summary>
            Structure to represent a charset name with a quality value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpUtils.CharsetPart.Charset">
            <summary>Name of the charset.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.HttpUtils.CharsetPart.Quality">
            <summary>Charset quality (desirability), normalized to 0-1000.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.HttpUtils.CharsetPart.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new CharsetPart with the specified values.
            </summary>
            <param name="charset">Name of charset.</param>
            <param name="quality">Charset quality (desirability), normalized to 0-1000.</param>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessageWriter">
            <summary>
            Writer class used to write all OData payloads (entries, feeds, metadata documents, service documents, etc.).
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.message">
            <summary>The message for which the message writer was created.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.writingResponse">
            <summary>A flag indicating whether we are writing a request or a response message.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.settings">
            <summary>The message writer settings to use when writing the message payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.model">
            <summary>The model. Non-null if we do have metadata available.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.urlResolver">
            <summary>The optional URL resolver to perform custom URL resolution for URLs written to the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.writeMethodCalled">
            <summary>Flag to ensure that only a single write method is called on the message writer.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.isDisposed">
            <summary>True if Dispose() has been called on this message writer, False otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.outputContext">
            <summary>The output context we're using to write the payload.</summary>
            <remarks>This is null until the first write operation is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.writerPayloadKind">
            <summary>The payload kind of the payload to be written with this writer.</summary>
            <remarks>This is either set via the SetHeadersForPayload method or implicitly when one of the write (or writer creation) methods is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.format">
            <summary>The <see cref="T:Microsoft.Data.OData.ODataFormat"/> of the payload to be written with this writer.</summary>
            <remarks>This is either set via the SetHeadersForPayload method or implicitly when one of the write (or writer creation) methods is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.encoding">
            <summary>The <see cref="T:System.Text.Encoding"/> of the payload to be written with this writer.</summary>
            <remarks>This is either set via the SetHeadersForPayload method or implicitly when one of the write (or writer creation) methods is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.batchBoundary">
            <summary>The batch boundary string if the payload to be written is a batch request or response.</summary>
            <remarks>This is either set via the SetHeadersForPayload method or implicitly when the CreateBatchWriter method is called.</remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.writeErrorCalled">
            <summary>Flag to prevent writing more than one error to the payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.mediaTypeResolver">
            <summary>The media type resolver to use when interpreting the content type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriter.mediaType">
            <summary>The <see cref="T:Microsoft.Data.OData.MediaType"/> of the payload to be written with this writer.</summary>
            <remarks>This is either set via the SetHeadersForPayload method or implicitly when one of the write (or writer creation) methods is called.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.#ctor(Microsoft.Data.OData.IODataRequestMessage)">
            <summary> Creates a new <see cref="T:Microsoft.Data.OData.ODataMessageWriter" /> for the given request message. </summary>
            <param name="requestMessage">The request message for which to create the writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.#ctor(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataMessageWriterSettings)">
            <summary> Creates a new <see cref="T:Microsoft.Data.OData.ODataMessageWriter" /> for the given request message and message writer settings. </summary>
            <param name="requestMessage">The request message for which to create the writer.</param>
            <param name="settings">The message writer settings to use for writing the message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.#ctor(Microsoft.Data.OData.IODataRequestMessage,Microsoft.Data.OData.ODataMessageWriterSettings,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Creates a new ODataMessageWriter for the given request message and message writer settings.
            </summary>
            <param name="requestMessage">The request message for which to create the writer.</param>
            <param name="settings">The message writer settings to use for writing the message payload.</param>
            <param name="model">The model to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.#ctor(Microsoft.Data.OData.IODataResponseMessage)">
            <summary> Creates a new <see cref="T:Microsoft.Data.OData.ODataMessageWriter" /> for the given response message. </summary>
            <param name="responseMessage">The response message for which to create the writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.#ctor(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataMessageWriterSettings)">
            <summary> Creates a new <see cref="T:Microsoft.Data.OData.ODataMessageWriter" /> for the given response message and message writer settings. </summary>
            <param name="responseMessage">The response message for which to create the writer.</param>
            <param name="settings">The message writer settings to use for writing the message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.#ctor(Microsoft.Data.OData.IODataResponseMessage,Microsoft.Data.OData.ODataMessageWriterSettings,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Creates a new ODataMessageWriter for the given response message and message writer settings.
            </summary>
            <param name="responseMessage">The response message for which to create the writer.</param>
            <param name="settings">The message writer settings to use for writing the message payload.</param>
            <param name="model">The model to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataFeedWriter">
            <summary> Creates an <see cref="T:Microsoft.Data.OData.ODataWriter" /> to write a feed. </summary>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataFeedWriter(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <returns>The created writer.</returns>
            <param name="entitySet">The entity set we are going to write entities for.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataFeedWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <returns>The created writer.</returns>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataFeedWriterAsync">
            <summary> Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter" /> to write a feed. </summary>
            <returns>A running task for the created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataFeedWriterAsync(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <returns>A running task for the created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataFeedWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write a feed.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataEntryWriter">
            <summary> Creates an <see cref="T:Microsoft.Data.OData.ODataWriter" /> to write an entry. </summary>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataEntryWriter(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataEntryWriter(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataEntryWriterAsync">
            <summary> Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter" /> to write an entry. </summary>
            <returns>A running task for the created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataEntryWriterAsync(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <returns>A running task for the created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataEntryWriterAsync(Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataWriter"/> to write an entry.
            </summary>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <returns>A running task for the created writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataCollectionWriter">
            <summary> Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter" /> to write a collection of primitive or complex values (as result of a service operation invocation). </summary>
            <returns>The created collection writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataCollectionWriter(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>The created collection writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataCollectionWriterAsync">
            <summary> Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter" /> to write a collection of primitive or complex values (as result of a service operation invocation). </summary>
            <returns>A running task for the created collection writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataCollectionWriterAsync(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataCollectionWriter"/> to write a collection of primitive or complex values (as result of a service operation invocation).
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
            <returns>A running task for the created collection writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataBatchWriter">
            <summary> Creates an <see cref="T:Microsoft.Data.OData.ODataBatchWriter" /> to write a batch of requests or responses. </summary>
            <returns>The created batch writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataBatchWriterAsync">
            <summary> Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataBatchWriter" /> to write a batch of requests or responses. </summary>
            <returns>A running task for the created batch writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataParameterWriter(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>The created parameter writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.CreateODataParameterWriterAsync(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Asynchronously creates an <see cref="T:Microsoft.Data.OData.ODataParameterWriter"/> to write a parameter payload.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
            <returns>A running task for the created parameter writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary> Writes a service document with the specified <paramref name="defaultWorkspace" /> as the message payload. </summary>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteServiceDocumentAsync(Microsoft.Data.OData.ODataWorkspace)">
            <summary> Asynchronously writes a service document with the specified <paramref name="defaultWorkspace" /> as the message payload. </summary>
            <returns>A task representing the asynchronous operation of writing the service document.</returns>
            <param name="defaultWorkspace">The default workspace to write in the service document.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteProperty(Microsoft.Data.OData.ODataProperty)">
            <summary> Writes an <see cref="T:Microsoft.Data.OData.ODataProperty" /> as the message payload. </summary>
            <param name="property">The property to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WritePropertyAsync(Microsoft.Data.OData.ODataProperty)">
            <summary> Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataProperty" /> as the message payload. </summary>
            <returns>A task representing the asynchronous operation of writing the property.</returns>
            <param name="property">The property to write</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteError(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary> Writes an <see cref="T:Microsoft.Data.OData.ODataError" /> as the message payload. </summary>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation"> A flag indicating whether debug information (for example, the inner error from the <paramref name="error" />) should be included in the payload. This should only be used in debug scenarios. </param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteErrorAsync(Microsoft.Data.OData.ODataError,System.Boolean)">
            <summary> Asynchronously writes an <see cref="T:Microsoft.Data.OData.ODataError" /> as the message payload. </summary>
            <returns>A task representing the asynchronous operation of writing the error.</returns>
            <param name="error">The error to write.</param>
            <param name="includeDebugInformation"> A flag indicating whether debug information (for example, the inner error from the <paramref name="error" />) should be included in the payload. This should only be used in debug scenarios. </param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary> Writes the result of a $links query as the message payload. </summary>
            <param name="links">The entity reference links to write as message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteEntityReferenceLinksAsync(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary> Asynchronously writes the result of a $links query as the message payload. </summary>
            <returns>A task representing the asynchronous writing of the entity reference links.</returns>
            <param name="links">The entity reference links to write as message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteEntityReferenceLinksAsync(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes the result of a $links query as the message payload.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
            <returns>A task representing the asynchronous writing of the entity reference links.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary> Writes a singleton result of a $links query as the message payload. </summary>
            <param name="link">The entity reference link to write as the message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The entity reference link to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property for which the entity reference link is being written, or null if none is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteEntityReferenceLinkAsync(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary> Asynchronously writes a singleton result of a $links query as the message payload. </summary>
            <returns>A running task representing the writing of the link.</returns>
            <param name="link">The link result to write as the message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteEntityReferenceLinkAsync(Microsoft.Data.OData.ODataEntityReferenceLink,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Asynchronously writes a singleton result of a $links query as the message payload.
            </summary>
            <param name="link">The link result to write as message payload.</param>
            <param name="entitySet">The entity set of the navigation property.</param>
            <param name="navigationProperty">The navigation property information for the link being written, or null if none is available.</param>
            <returns>A running task representing the writing of the link.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteValue(System.Object)">
            <summary> Writes a single value as the message body. </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteValueAsync(System.Object)">
            <summary> Asynchronously writes a single value as the message body. </summary>
            <returns>A running task representing the writing of the value.</returns>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteMetadataDocument">
            <summary> Writes the metadata document as the message body. </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.Dispose">
            <summary><see cref="M:System.IDisposable.Dispose()" /> implementation to cleanup unmanaged resources of the writer. </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.SetHeaders(Microsoft.Data.OData.ODataPayloadKind)">
            <summary>
            Sets the content-type and data service version headers on the message used by the message writer.
            This method can be called if it is important to set all the message headers before calling any of the
            write (or writer creation) methods on the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/>.
            If it is sufficient to set the headers when the write (or writer creation) methods on the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/>
            are called, you don't have to call this method and setting the headers will happen automatically.
            </summary>
            <param name="payloadKind">The kind of payload to be written with this message writer.</param>
            <returns>The <see cref="T:Microsoft.Data.OData.ODataFormat"/> used for the specified <paramref name="payloadKind"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.SetOrVerifyHeaders(Microsoft.Data.OData.ODataPayloadKind)">
            <summary>
            If no headers have been set, sets the content-type and data service version headers on the message used by the message writer.
            If headers have been set explicitly (via ODataUtils.SetHeaderForPayload) this method verifies that the payload kind used to 
            create the headers is the same as the one being passed in <paramref name="payloadKind"/>.
            </summary>
            <param name="payloadKind">The kind of payload to be written with this message writer.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.EnsureODataVersion">
            <summary>
            Ensures that the version of the OData protocol is set.
            </summary>
            <remarks>
            If a version is specified explicitly on the writer settings, it is used.
            Otherwise the method tries to read the version from the message headers.
            If there is a version header but the value cannot be parsed, we fail.
            If there is no version header, we fall back to the default version.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.EnsureODataFormatAndContentType">
            <summary>
            Ensures that the OData format is computed and set; if needed, sets the content type
            header of the message.
            </summary>
            <remarks>
            This method computes and ensures that a content type exists and computes the 
            OData format from it. If a content type is explicitly specified through 
            <see cref="M:Microsoft.Data.OData.ODataUtils.SetHeadersForPayload(Microsoft.Data.OData.ODataMessageWriter,Microsoft.Data.OData.ODataPayloadKind)"/>
            or <see cref="M:Microsoft.Data.OData.ODataMessageWriterSettings.SetContentType(System.String,System.String)"/> it will be used. If no
            content type is specified in either place, the message headers are checked for
            a content type header.
            If the content type is computed from settings, the content type header is set on the message.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanCreateODataFeedWriter">
            <summary>
            Verifies that feed writer can be created.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanCreateODataEntryWriter">
            <summary>
            Verifies that entry writer can be created.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanCreateODataCollectionWriter(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Verifies that collection writer can be created.
            </summary>
            <param name="itemTypeReference">The item type of the collection being written or null if no metadata is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanCreateODataBatchWriter">
            <summary>
            Verifies that batch writer can be created.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanCreateODataParameterWriter(Microsoft.Data.Edm.IEdmFunctionImport)">
            <summary>
            Verifies that parameter writer can be created.
            </summary>
            <param name="functionImport">The function import whose parameters will be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyODataParameterWriterHeaders">
            <summary>
            Verifies headers for parameter payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanWriteServiceDocument(Microsoft.Data.OData.ODataWorkspace)">
            <summary>
            Verifies that service document can be written.
            </summary>
            <param name="defaultWorkspace">The default workspace to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanWriteProperty(Microsoft.Data.OData.ODataProperty)">
            <summary>
            Verifies that property can be written.
            </summary>
            <param name="property">The property to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanWriteTopLevelError(Microsoft.Data.OData.ODataError)">
            <summary>
            Verifies that top-level error can be written.
            </summary>
            <param name="error">The error to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanWriteInStreamError(Microsoft.Data.OData.ODataError)">
            <summary>
            Verifies that in-stream error can be written.
            </summary>
            <param name="error">The error to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanWriteEntityReferenceLinks(Microsoft.Data.OData.ODataEntityReferenceLinks,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Verifies that entity reference links can be written.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
            <param name="navigationProperty">The navigation property for which the entity reference links are being written, or null if none is available.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyEntityReferenceLinksHeaders(Microsoft.Data.OData.ODataEntityReferenceLinks)">
            <summary>
            Verifies headers for entity reference links.
            </summary>
            <param name="links">The entity reference links to write as message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanWriteEntityReferenceLink(Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Verifies that entity reference link can be written.
            </summary>
            <param name="link">The link result to write as message payload.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanWriteValue(System.Object)">
            <summary>
            Verifies that value can be written.
            </summary>
            <param name="value">The value to write.</param>
            <returns>The payload kind to use when writing this value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyCanWriteMetadataDocument">
            <summary>
            Verifies that metadata document can be written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyMetadataDocumentHeaders">
            <summary>
            Verifies headers for metadata document.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyWriterNotDisposedAndNotUsed">
            <summary>
            Verifies that the ODataMessageWriter has not been disposed and has not been used before. An ODataMessageWriter
            can only be used to write a single message payload but can't be reused later except for writing an in-stream error.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed. Throws an ObjectDisposedException if the object has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.Dispose(System.Boolean)">
            <summary>
            Perform the actual cleanup work.
            </summary>
            <param name="disposing">If 'true' this method is called from user code; if 'false' it is called by the runtime.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.VerifyPayloadKind(Microsoft.Data.OData.ODataPayloadKind)">
            <summary>
            Verifies that, if a payload kind has been set via SetHeaders, the payload kind that
            is being written is the same.
            </summary>
            <param name="payloadKindToWrite">The payload kind that is attempted to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteToOutput(Microsoft.Data.OData.ODataPayloadKind,System.Action,System.Action{Microsoft.Data.OData.ODataOutputContext})">
            <summary>
            Creates an output context and invokes a write operation on it.
            </summary>
            <param name="payloadKind">The payload kind to write.</param>
            <param name="verifyHeaders">Optional action which will be called after the headers has been verified to perform payload specific verification.</param>
            <param name="writeAction">The write operation to invoke on the output.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteToOutput``1(Microsoft.Data.OData.ODataPayloadKind,System.Action,System.Func{Microsoft.Data.OData.ODataOutputContext,``0})">
            <summary>
            Creates an output context and invokes a write operation on it.
            </summary>
            <typeparam name="TResult">The type of the result of the write operation.</typeparam>
            <param name="payloadKind">The payload kind to write.</param>
            <param name="verifyHeaders">Optional action which will be called after the headers has been verified to perform payload specific verification.</param>
            <param name="writeFunc">The write operation to invoke on the output.</param>
            <returns>The result of the write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteToOutputAsync(Microsoft.Data.OData.ODataPayloadKind,System.Action,System.Func{Microsoft.Data.OData.ODataOutputContext,System.Threading.Tasks.Task})">
            <summary>
            Creates an output context and invokes a write operation on it.
            </summary>
            <param name="payloadKind">The payload kind to write.</param>
            <param name="verifyHeaders">Optional action which will be called after the headers has been verified to perform payload specific verification.</param>
            <param name="writeAsyncAction">The write operation to invoke on the output.</param>
            <returns>Task which represents the pending write operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriter.WriteToOutputAsync``1(Microsoft.Data.OData.ODataPayloadKind,System.Action,System.Func{Microsoft.Data.OData.ODataOutputContext,System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates an output context and invokes a write operation on it.
            </summary>
            <typeparam name="TResult">The type of the result of the write operation.</typeparam>
            <param name="payloadKind">The payload kind to write.</param>
            <param name="verifyHeaders">Optional action which will be called after the headers has been verified to perform payload specific verification.</param>
            <param name="writeFunc">The write operation to invoke on the output.</param>
            <returns>Task which represents the pending write operation.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriter.Settings">
            <summary>
            The message writer settings to use when writing the message payload.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriter.MediaTypeResolver">
            <summary>
            The media type resolver to use when interpreting the content type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataResponseMessage">
            <summary>
            Wrapper class around an IODataResponseMessageAsync to isolate our code from the interface implementation.
            </summary>
            <remarks>
            This class also implements the message interface since it is passed to the payload kind
            detection logic on the format implementations and manages the buffering read stream.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.ODataResponseMessage.responseMessage">
            <summary>The response message this class is wrapping.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataResponseMessage.#ctor(Microsoft.Data.OData.IODataResponseMessage,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Constructs an internal wrapper around the <paramref name="responseMessage"/>
            that isolates the internal implementation of the ODataLib from the interface.
            </summary>
            <param name="responseMessage">The response message to wrap.</param>
            <param name="writing">true if the message is being written; false when it is read.</param>
            <param name="disableMessageStreamDisposal">true if the stream returned should ignore dispose calls.</param>
            <param name="maxMessageSize">The maximum size of the message in bytes (or a negative number if no maximum applies).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataResponseMessage.GetHeader(System.String)">
            <summary>
            Returns a value of an HTTP header.
            </summary>
            <param name="headerName">The name of the header to get.</param>
            <returns>The value of the HTTP header, or null if no such header was present on the message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataResponseMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of an HTTP header.
            </summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value of the HTTP header or 'null' if the header should be removed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataResponseMessage.GetStream">
            <summary>
            Get the stream backing this message.
            </summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataResponseMessage.GetStreamAsync">
            <summary>
            Asynchronously get the stream backing this message.
            </summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataResponseMessage.QueryInterface``1">
            <summary>
            Queries the message for the specified interface type.
            </summary>
            <typeparam name="TInterface">The type of the interface to query for.</typeparam>
            <returns>The instance of the interface asked for or null if it was not implemented by the message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataResponseMessage.StatusCode">
            <summary>
            The result status code of the response message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataResponseMessage.Headers">
            <summary>
            Returns an enumerable over all the headers for this message.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataRequestMessage">
            <summary>
            Wrapper class around an IODataRequestMessageAsync to isolate our code from the interface implementation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataRequestMessage.requestMessage">
            <summary>The request message this class is wrapping.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRequestMessage.#ctor(Microsoft.Data.OData.IODataRequestMessage,System.Boolean,System.Boolean,System.Int64)">
            <summary>
            Constructs an internal wrapper around the <paramref name="requestMessage"/>
            that isolates the internal implementation of the ODataLib from the interface.
            </summary>
            <param name="requestMessage">The request message to wrap.</param>
            <param name="writing">true if the request message is being written; false when it is read.</param>
            <param name="disableMessageStreamDisposal">true if the stream returned should ignore dispose calls.</param>
            <param name="maxMessageSize">The maximum size of the message in bytes (or a negative value if no maximum applies).</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRequestMessage.GetHeader(System.String)">
            <summary>
            Returns a value of an HTTP header.
            </summary>
            <param name="headerName">The name of the header to get.</param>
            <returns>The value of the HTTP header, or null if no such header was present on the message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRequestMessage.SetHeader(System.String,System.String)">
            <summary>
            Sets the value of an HTTP header.
            </summary>
            <param name="headerName">The name of the header to set.</param>
            <param name="headerValue">The value of the HTTP header or 'null' if the header should be removed.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRequestMessage.GetStream">
            <summary>
            Synchronously get the stream backing this message.
            </summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRequestMessage.GetStreamAsync">
            <summary>
            Asynchronously get the stream backing this message.
            </summary>
            <returns>The stream for this message.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataRequestMessage.QueryInterface``1">
            <summary>
            Queries the message for the specified interface type.
            </summary>
            <typeparam name="TInterface">The type of the interface to query for.</typeparam>
            <returns>The instance of the interface asked for or null if it was not implemented by the message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataRequestMessage.Url">
            <summary>
            The request Url for this request message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataRequestMessage.Method">
            <summary>
            The HTTP method used for this request message.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataRequestMessage.Headers">
            <summary>
            Returns an enumerable over all the headers for this message.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataAssociationLink">
            <summary>
            Represents an association link.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataAssociationLink.metadataBuilder">
            <summary>the metadata builder for this association link.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataAssociationLink.url">
            <summary>URI representing the Unified Resource Locator (Url) of the link.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataAssociationLink.hasAssociationLinkUrl">
            <summary>true if the association link has been set by the user or seen on the wire or computed by the metadata builder, false otherwise.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataAssociationLink.SetMetadataBuilder(Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder)">
            <summary>
            Sets the metadata builder for this association link.
            </summary>
            <param name="builder">The metadata builder used to compute values from model annotations.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataAssociationLink.Name">
            <summary>Gets or sets the name of the association link.</summary>
            <returns>The name of the associate link.</returns>
            <remarks>This is the name of the navigation property to which the association link belongs.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataAssociationLink.Url">
            <summary>Gets or sets the URI representing the Unified Resource Locator (URL) of the link.</summary>
            <returns>The URI representing the Unified Resource Locator (URL) of the link.</returns>
            <remarks>This URL should point to a resource which can be used to retrieve or modify the association itself
            not the URL to traverse the navigation property.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.ODataError">
            <summary>
            Class representing an error payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataError.VerifySetAnnotation(System.Object)">
            <summary>
            Verifies that <paramref name="annotation"/> can be added as an annotation of this.
            </summary>
            <param name="annotation">Annotation instance.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataError.GetInstanceAnnotationsForWriting">
            <summary>
            Gets the collection of instance annotations from this <see cref="T:Microsoft.Data.OData.ODataError"/> instance.
            </summary>
            <returns>The collection of instance annotations </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataError.AddInstanceAnnotationForReading(System.String,System.Object)">
            <summary>
            Adds an instance annotation from the payload to this <see cref="T:Microsoft.Data.OData.ODataError"/> instance.
            </summary>
            <param name="instanceAnnotationName">The name of the instance annotation.</param>
            <param name="instanceAnnotationValue">The value of the instance annotation.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataError.ErrorCode">
            <summary>Gets or sets the error code to be used in payloads.</summary>
            <returns>The error code to be used in payloads.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataError.Message">
            <summary>Gets or sets the error message.</summary>
            <returns>The error message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataError.MessageLanguage">
            <summary>Gets or sets the language for the exception Message.</summary>
            <returns>The language for the exception Message.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataError.InnerError">
            <summary>Gets or sets the implementation specific debugging information to help determine the cause of the error.</summary>
            <returns>The implementation specific debugging information.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataError.InstanceAnnotations">
            <summary>
            Collection of custom instance annotations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataVersionChecker">
            <summary>
            Utility class to check feature availability in a certain version of OData.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckCount(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether the inline count feature is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckCollectionValueProperties(Microsoft.Data.OData.ODataVersion,System.String)">
            <summary>
            Check whether CollectionValue properties are supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
            <param name="propertyName">The name of the property which holds the collection.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckCollectionValue(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether CollectionValue is supported in the specified version. 
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckNextLink(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether the next link feature is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckDeltaLink(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether the delta link feature is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckStreamReferenceProperty(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether the named streams feature is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckAssociationLinks(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether the association links feature is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckCustomTypeScheme(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether the custom Type Scheme feature is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckCustomDataNamespace(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether the custom Data Namespace feature is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckParameterPayload(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether parameters in the payload are supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckEntityPropertyMapping(Microsoft.Data.OData.ODataVersion,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Check whether the EPM on the specified entity type is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
            <param name="entityType">The entity type to check.</param>
            <param name="model">The model containing annotations for the entity type.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckSpatialValue(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Check whether the spatial value is supported in the specified version.
            </summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataVersionChecker.CheckVersionSupported(Microsoft.Data.OData.ODataVersion,Microsoft.Data.OData.ODataMessageReaderSettings)">
            <summary>
            Checks that the version specified on the request or the response is supported by this library.
            </summary>
            <param name="version">The version to check.</param>
            <param name="messageReaderSettings">The message reader settings specified for the reader.</param>
            <remarks>In internal drops we currently do not support protocol version 3.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.InternalErrorCodes">
            <summary>
            An enumeration that lists the internal errors.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataWriterCore_WriteEnd_UnreachableCodePath">
            <summary>Unreachable codepath in ODataWriterCore.WriteEnd</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataWriterCore_ValidateTransition_UnreachableCodePath">
            <summary>Unreachable codepath in ODataWriterCore.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataWriterCore_Scope_Create_UnreachableCodePath">
            <summary>Unreachable codepath in ODataWriterCore.Scope.Create</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataWriterCore_DuplicatePropertyNamesChecker">
            <summary>Unreachable codepath in ODataWriterCore.DuplicatePropertyNamesChecker.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataWriterCore_ParentNavigationLinkScope">
            <summary>Unreachable codepath in ODataWriterCore.ParentNavigationLinkScope.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataUtils_VersionString_UnreachableCodePath">
            <summary>Unreachable codepath in ODataUtils.VersionString</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataUtilsInternal_ToDataServiceVersion_UnreachableCodePath">
            <summary>Unreachable codepath in ODataUtilsInternal.ToDataServiceVersion</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataUtilsInternal_IsPayloadKindSupported_UnreachableCodePath">
            <summary>Unreachable codepath in ODataUtilsInternal.IsPayloadKindSupported</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataUtils_GetDefaultEncoding_UnreachableCodePath">
            <summary>Unreachable codepath in ODataUtils.GetDefaultEncoding</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataUtils_ParseSerializableEpmAnnotations_UnreachableCodePath">
            <summary>Unreachable codepath in ODataUtils.ParseSerializableEpmAnnotations</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataMessageWriter_WriteProperty">
            <summary>Unreachable codepath in ODataMessageWriter.WriteProperty</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataMessageWriter_WriteEntityReferenceLink">
            <summary>Unreachable codepath in ODataMessageWriter.WriteEntityReferenceLink</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataMessageWriter_WriteEntityReferenceLinks">
            <summary>Unreachable codepath in ODataMessageWriter.WriteEntityReferenceLinks</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataMessageWriter_WriteError">
            <summary>Unreachable codepath in ODataMessageWriter.WriteError</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataMessageWriter_WriteServiceDocument">
            <summary>Unreachable codepath in ODataMessageWriter.WriteServiceDocument</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataMessageWriter_WriteMetadataDocument">
            <summary>Unreachable codepath in ODataMessageWriter.WriteMetadataDocument</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmSyndicationWriter_WriteEntryEpm_ContentTarget">
            <summary>Unreachable codepath in EpmSyndicationWriter.WriteEntryEpm when writing content target.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmSyndicationWriter_CreateAtomTextConstruct">
            <summary>Unreachable codepath in EpmSyndicationWriter.CreateAtomTextConstruct when converting text kind from Syndication enumeration.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmSyndicationWriter_WritePersonEpm">
            <summary>Unreachable codepath in EpmSyndicationWriter.WritePersonEpm.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmSyndicationWriter_WriteParentSegment_TargetSegmentName">
            <summary>Unhandled EpmTargetPathSegment.SegmentName in EpmSyndicationWriter.WriteParentSegment.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataAtomConvert_ToString">
            <summary>Unreachable codepath in ODataAtomConvert.ToString(AtomTextConstructKind)</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataCollectionWriter_CreateCollectionWriter_UnreachableCodePath">
            <summary>Unreachable codepath in ODataCollectionWriter.CreateCollectionWriter</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataCollectionWriterCore_ValidateTransition_UnreachableCodePath">
            <summary>Unreachable codepath in ODataCollectionWriterCore.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataCollectionWriterCore_WriteEnd_UnreachableCodePath">
            <summary>Unreachable codepath in ODataCollectionWriterCore.WriteEnd</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterWriter_CannotCreateParameterWriterForFormat">
            <summary>Unreachable codepath in ODataParameterWriter.CreateParameterWriter</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterWriterCore_ValidateTransition_InvalidTransitionFromStart">
            <summary>Unreachable codepath in ODataParameterWriter.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterWriterCore_ValidateTransition_InvalidTransitionFromCanWriteParameter">
            <summary>Unreachable codepath in ODataParameterWriter.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterWriterCore_ValidateTransition_InvalidTransitionFromActiveSubWriter">
            <summary>Unreachable codepath in ODataParameterWriter.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterWriterCore_ValidateTransition_InvalidTransitionFromCompleted">
            <summary>Unreachable codepath in ODataParameterWriter.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterWriterCore_ValidateTransition_InvalidTransitionFromError">
            <summary>Unreachable codepath in ODataParameterWriter.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterWriterCore_ValidateTransition_UnreachableCodePath">
            <summary>Unreachable codepath in ODataParameterWriter.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterWriterCore_WriteEndImplementation_UnreachableCodePath">
            <summary>Unreachable codepath in ODataParameterWriter.WriteEndImplementation</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.QueryPathValidator_ValidateSegment_Root">
            <summary>Unreachable codepath in ODataPathValidator.ValidateSegment root branch</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.QueryPathValidator_ValidateSegment_NonRoot">
            <summary>Unreachable codepath in ODataPathValidator.ValidateSegment non-root branch</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchWriter_ValidateTransition_UnreachableCodePath">
            <summary>Unreachable codepath in ODataBatchWriter.ValidateTransition</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchWriterUtils_HttpMethod_ToText_UnreachableCodePath">
            <summary>Unreachable codepath in ODataBatchWriter.ToText(this HttpMethod).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReader_ReadImplementation">
            <summary>Unreachable codepath in ODataBatchReader.ReadImplementation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReader_GetEndBoundary_Completed">
            <summary>Unreachable codepath in ODataBatchReader.GetEndBoundary in state Completed.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReader_GetEndBoundary_Exception">
            <summary>Unreachable codepath in ODataBatchReader.GetEndBoundary in state Exception.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReader_GetEndBoundary_UnknownValue">
            <summary>Unreachable codepath in ODataBatchReader.GetEndBoundary because of invalid enum value.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReaderStream_SkipToBoundary">
            <summary>Unreachable codepath in ODataBatchReaderStream.SkipToBoundary.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReaderStream_ReadLine">
            <summary>Unreachable codepath in ODataBatchReaderStream.ReadLine.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReaderStream_ReadWithDelimiter">
            <summary>Unreachable codepath in ODataBatchReaderStream.ReadWithDelimiter.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReaderStreamBuffer_ScanForBoundary">
            <summary>Unreachable codepath in ODataBatchReaderStreamBuffer.ScanForBoundary.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataBatchReaderStreamBuffer_ReadWithLength">
            <summary>Unreachable codepath in ODataBatchReaderStreamBuffer.ReadWithLength.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.JsonReader_Read">
            <summary>Unreachable codepath in JsonReader.Read.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataReader_CreateReader_UnreachableCodePath">
            <summary>Unreachable codepath in ODataReader.CreateReader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataReaderCore_ReadImplementation">
            <summary>Unreachable codepath in ODataReaderCore.ReadImplementation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataReaderCoreAsync_ReadAsynchronously">
            <summary>Unreachable codepath in ODataReaderCoreAsync.ReadAsynchronously.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataVerboseJsonEntryAndFeedDeserializer_ReadFeedProperty">
            <summary>Unreachable codepath in ODataVerboseJsonEntryAndFeedDeserializer.ReadFeedProperty.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataVerboseJsonReader_ReadEntryStart">
            <summary>Unreachable codepath in ODataVerboseJsonReader.ReadEntryStart.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataVerboseJsonPropertyAndValueDeserializer_ReadPropertyValue">
            <summary>Unreachable codepath in ODataVerboseJsonPropertyAndValueDeserializer.ReadPropertyValue.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataCollectionReader_CreateReader_UnreachableCodePath">
            <summary>Unreachable codepath in ODataCollectionReader.CreateReader.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataCollectionReaderCore_ReadImplementation">
            <summary>Unreachable codepath in ODataCollectionReaderCore.ReadImplementation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataCollectionReaderCoreAsync_ReadAsynchronously">
            <summary>Unreachable codepath in ODataCollectionReaderCoreAsync.ReadAsynchronously.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterReaderCore_ReadImplementation">
            <summary>Unreachable codepath in ODataParameterReaderCore.ReadImplementation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterReaderCoreAsync_ReadAsynchronously">
            <summary>Unreachable codepath in ODataParameterReaderCoreAsync.ReadAsynchronously.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataParameterReaderCore_ValueMustBePrimitiveOrComplexOrNull">
            <summary>The value from the parameter reader must be a primitive value, an ODataComplexValue or null</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataAtomReader_ReadAtNavigationLinkStartImplementation">
            <summary>Unreachable codepath in ODataAtomReader.ReadAtNavigationLinkStartImplementation.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataAtomPropertyAndValueDeserializer_ReadNonEntityValue">
            <summary>Unreachable codepath in ODataAtomPropertyAndValueDeserializer.ReadNonEntityValue.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.AtomValueUtils_ConvertStringToPrimitive">
            <summary>Unreachable codepath in AtomValueUtils.ConvertStringToPrimitive.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EdmCoreModel_PrimitiveType">
            <summary>Unreachable codepath in EdmCoreModel.PrimitiveType (unsupported type).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmSyndicationReader_ReadEntryEpm_ContentTarget">
            <summary>Unreachable codepath in EpmSyndicationReader.ReadEntryEpm when reading content target.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmSyndicationReader_ReadParentSegment_TargetSegmentName">
            <summary>Unreachable codepath in EpmSyndicationReader.ReadParentSegment.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmSyndicationReader_ReadPersonEpm">
            <summary>Unreachable codepath in EpmSyndicationReader.ReadPersonEpm.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmReader_SetEpmValueForSegment_TypeKind">
            <summary>Unreachable codepath in EpmReader.SetEpmValueForSegment when found unexpected type kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmReader_SetEpmValueForSegment_StreamProperty">
            <summary>Unreachable codepath in EpmReader.SetEpmValueForSegment when found EPM for a primitive stream property.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ReaderValidationUtils_ResolveAndValidateTypeName_Strict_TypeKind">
            <summary>Unreachable codepath in ReaderValidationUtils.ResolveAndValidateTypeName in the strict branch, unexpected type kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ReaderValidationUtils_ResolveAndValidateTypeName_Lax_TypeKind">
            <summary>Unreachable codepath in ReaderValidationUtils.ResolveAndValidateTypeName in the lax branch, unexpected type kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EpmExtensionMethods_ToAttributeValue_SyndicationItemProperty">
            <summary>Unreachable codepath in EpmExtensionMethods.ToAttributeValue(ODataSyndicationItemProperty) when found unexpected type syndication item property kind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataMetadataFormat_CreateOutputContextAsync">
            <summary>The ODataMetadataFormat.CreateOutputContextAsync was called, but this method is not yet supported.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataMetadataFormat_CreateInputContextAsync">
            <summary>The ODataMetadataFormat.CreateInputContextAsync was called, but this method is not yet supported.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataModelFunctions_UnsupportedMethodOrProperty">
            <summary>An unsupported method or property has been called on the IDictionary implementation of the ODataModelFunctions.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightPropertyAndValueDeserializer_ReadPropertyValue">
            <summary>Unreachable codepath in ODataJsonLightPropertyAndValueDeserializer.ReadPropertyValue.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightPropertyAndValueDeserializer_GetNonEntityValueKind">
            <summary>Unreachable codepath in ODataJsonLightPropertyAndValueDeserializer.GetNonEntityValueKind.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightEntryAndFeedDeserializer_ReadFeedProperty">
            <summary>Unreachable codepath in ODataJsonLightEntryAndFeedDeserializer.ReadFeedProperty.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightReader_ReadEntryStart">
            <summary>Unreachable codepath in ODataJsonLightReader.ReadEntryStart.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightEntryAndFeedDeserializer_ReadTopLevelFeedAnnotations">
            <summary>Unreachable codepath in ODataJsonLightEntryAndFeedDeserializer_ReadTopLevelFeedAnnotations.ReadTopLevelFeedAnnotations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightReader_ReadFeedEnd">
            <summary>Unreachable codepath in ODataJsonLightReader.ReadFeedEnd.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightCollectionDeserializer_ReadCollectionStart">
            <summary>Unreachable codepath in ODataJsonLightCollectionDeserializer.ReadCollectionStart.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightCollectionDeserializer_ReadCollectionStart_TypeKindFromPayloadFunc">
            <summary>Unreachable codepath in ODataJsonLightCollectionDeserializer.ReadCollectionStart.TypeKindFromPayloadFunc.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightCollectionDeserializer_ReadCollectionEnd">
            <summary>Unreachable codepath in ODataJsonLightCollectionDeserializer.ReadCollectionEnd.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightEntityReferenceLinkDeserializer_ReadSingleEntityReferenceLink">
            <summary>Unreachable codepath in ODataJsonLightEntityReferenceLinkDeserializer.ReadSingleEntityReferenceLink.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightEntityReferenceLinkDeserializer_ReadEntityReferenceLinksAnnotations">
            <summary>Unreachable codepath in ODataJsonLightEntityReferenceLinkDeserializer.ReadEntityReferenceLinksAnnotations.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightParameterDeserializer_ReadNextParameter">
            <summary>Unreachable codepath in ODataJsonLightParameterDeserializer.ReadNextParameter.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataJsonLightAnnotationGroupDeserializer_ReadAnnotationGroupDeclaration">
            <summary>Unreachable codepath in ODataJsonLightAnnotationGroupDeserializer.ReadAnnotationGroupDeclaration.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.EdmTypeWriterResolver_GetReturnTypeForFunctionImportGroup">
            <summary>Unreachable codepath in EdmTypeWriterResolver.GetReturnType for function import group.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.InternalErrorCodes.ODataVersionCache_UnknownVersion">
            <summary>Unreachable codepath in the indexer of ODataVersionCache for unknown versions.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter">
            <summary>
            Implementation of the ODataWriter for the Verbose JSON format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.verboseJsonOutputContext">
            <summary>
            The output context to write to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.verboseJsonEntryAndFeedSerializer">
            <summary>
            The JSON entry and feed seriazlizer to use.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.#ctor(Microsoft.Data.OData.VerboseJson.ODataVerboseJsonOutputContext,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="jsonOutputContext">The output context to write to.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="writingFeed">true if the writer is created for writing a feed; false when it is created for writing an entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.StartPayload">
            <summary>
            Starts writing a payload (called exactly once before anything else)
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.EndPayload">
            <summary>
            Ends writing a payload (called exactly once after everything else in case of success)
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.StartEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Start writing an entry.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.EndEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Finish writing an entry.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.StartFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Start writing a feed.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.EndFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Finish writing a feed.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.WriteDeferredNavigationLink(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a deferred (non-expanded) navigation link.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.StartNavigationLinkWithContent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a navigation link with content.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.EndNavigationLinkWithContent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Finish writing a navigation link with content.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.WriteEntityReferenceInNavigationLinkContent(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Write an entity reference link.
            </summary>
            <param name="parentNavigationLink">The parent navigation link which is being written around the entity reference link.</param>
            <param name="entityReferenceLink">The entity reference link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.CreateFeedScope(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new feed scope.
            </summary>
            <param name="feed">The feed for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly create scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.CreateEntryScope(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new entry scope.
            </summary>
            <param name="entry">The entry for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly create scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.WriteFeedCount(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Writes the __count property for a feed if it has not been written yet (and the count is specified on the feed).
            </summary>
            <param name="feed">The feed to write the count for.</param>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.CurrentFeedScope">
            <summary>
            Returns the current VerboseJsonFeedScope.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.VerboseJsonFeedScope">
            <summary>
            A scope for a verbose JSON feed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.VerboseJsonFeedScope.countWritten">
            <summary>true if the __count was already written, false otherwise.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.VerboseJsonFeedScope.#ctor(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new feed scope.
            </summary>
            <param name="feed">The feed for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.VerboseJson.ODataVerboseJsonWriter.VerboseJsonFeedScope.CountWritten">
            <summary>
            true if the __count was already written, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.UriUtils">
            <summary>
            Uri utility methods.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.UriUtils.ExampleMetadataAbsoluteUri">
            <summary>
            An absolute Uri to use as the base Uri for escaping a Uri fragment.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.UriUtils.UriToAbsoluteUri(System.Uri,System.Uri)">
            <summary>
            Returns an absolute URI constructed from the specified base URI and a relative URI
            </summary>
            <param name="baseUri">The base URI to use.</param>
            <param name="relativeUri">The relative URI to use.</param>
            <returns>The absolute URI as a result of combining the base URI with the relative URI.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.UriUtils.EnsureEscapedRelativeUri(System.Uri)">
            <summary>
            A method to ensure that the original string of a relative URI is escaped.
            </summary>
            <param name="uri">The relative <see cref="T:System.Uri"/> to escape.</param>
            <returns>A relative URI instance with guaranteed escaped original string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.UriUtils.EnsureEscapedFragment(System.String)">
            <summary>
            Gets the escaped metadata reference property name.
            </summary>
            <param name="fragmentString">The metadata reference property name in question.</param>
            <returns>The Uri escaped metadata reference property name.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataCollectionValue">
            <summary>
            OData representation of a Collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionValue.TypeName">
            <summary>Gets or sets the type of the collection value.</summary>
            <returns>The type of the collection value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataCollectionValue.Items">
            <summary>Gets or sets the items in the bag value.</summary>
            <returns>The items in the bag value.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataMessageWriterSettings">
            <summary>
            Configuration settings for OData message writers.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.acceptCharSets">
            <summary>
            The acceptable charsets used to the determine the encoding of the message.
            This is a comma separated list of charsets as specified in RFC 2616, Section 14.2
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.acceptMediaTypes">
            <summary>
            The acceptable media types used to determine the content type of the message.
            This is a comma separated list of content types as specified in RFC 2616, Section 14.1
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.format">
            <summary>
            The format to use when writing the payload; this replaces the 'AcceptHeader' and 'AcceptCharSetHeader' 
            fields and uses the default values for the respective format. If null is specified
            the default format and the default media type will be picked depending on the writer these settings are used with.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.useFormat">
            <summary>
            true if the Format property should be used to compute the media type; 
            false if AcceptableMediaTypes and AcceptableCharsets should be used.
            null if neither the format nor the acceptable media types/charsets have been set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.atomFormatStartEntryXmlCustomizationCallback">
            <summary>
            The start ATOM entry callback for XML customization of entries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.atomFormatEndEntryXmlCustomizationCallback">
            <summary>
            The end ATOM entry callback for XML customization of entries.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.writerBehavior">
            <summary>
            An instance representing any knobs that control the behavior of the writers
            inside and outside of WCF Data Services.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.metadataDocumentUri">
            <summary>Stores the base uri for the metadata document along with a select clause.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.shouldIncludeAnnotation">
            <summary>
            Func to evaluate whether an annotation should be writen by the writer. The func should return true if the annotation should
            be writen and false if the annotation should be skipped.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataMessageWriterSettings.alwaysUseDefaultXmlNamespaceForRootElement">
            <summary>
            If set to true, then the root element of each payload will be written in the default (non-prefix-qualified) namespace of the document. 
            All other elements in the same namespace will also not have prefixes.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataMessageWriterSettings" /> class with default settings. </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.#ctor(Microsoft.Data.OData.ODataMessageWriterSettings)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Data.OData.ODataMessageWriterSettings" /> class with specified settings.</summary>
            <param name="other">The specified settings.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.SetContentType(System.String,System.String)">
            <summary>Sets the acceptable media types and character sets from which the content type will be computed when writing the payload.</summary>
            <param name="acceptableMediaTypes">The acceptable media types used to determine the content type of the message. This is a comma separated list of content types as specified in RFC 2616, Section 14.1.</param>
            <param name="acceptableCharSets"> The acceptable charsets to use to determine the encoding of the message. This is a comma separated list of charsets as specified in RFC 2616, Section 14.2 </param>
            <remarks>Calling this method replaces any previously set content-type settings.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.SetContentType(Microsoft.Data.OData.ODataFormat)">
            <summary>Sets the format to be used when writing the payload. This will automatically set a compatible content type header.</summary>
            <param name="payloadFormat">The format to use for writing the payload.</param>
            <remarks>Calling this method replaces any previously set content-type settings.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.SetAtomEntryXmlCustomization(System.Func{Microsoft.Data.OData.ODataEntry,System.Xml.XmlWriter,System.Xml.XmlWriter},System.Action{Microsoft.Data.OData.ODataEntry,System.Xml.XmlWriter,System.Xml.XmlWriter})">
            <summary>Sets the customization XML format for Atom entry.</summary>
            <param name="atomStartEntryXmlCustomizationCallback">The start of the Atom entry XML customization callback.</param>
            <param name="atomEndEntryXmlCustomizationCallback">The end of the Atom entry XML customization callback.</param>
            <remarks>
            Either both <paramref name="atomStartEntryXmlCustomizationCallback"/> and <paramref name="atomEndEntryXmlCustomizationCallback"/> must be null, or both must be non-null.
            The XmlWriter returned by the startEntryXmlCustomizationCallback is not owned by the ODataWriter and it won't be Disposed or Flushed or cleared
            in any way by it. It's the responsibility of the caller to flush/dispose it inside the endEntryXmlCustomizationCallback and also in case of an exception.
            In case an exception is thrown while a new writer is used to write an entry, only the original XmlWriter will be disposed
            and no endEntryXmlCustomizationCallback will be called.
            It's the responsibility of this callback to write the entry payload written to the entryWriter into the parentWriter at this point.
            The ODataWriter assumes that once this callback returns the entry was already written and it will continue onward.
            If expanded entries are being written this callback may get called multiple times without the corresponding end callback in between.
            It's the responsibility of the callback and the caller to be able to handle nested entries.
            This method only applies when writing ATOM format payloads.
            When writing payloads in different formats, this method has no effect.
            param name="atomStartEntryXmlCustomizationCallback"
            If non-null this func will be called when a new (non-null) entry is to be written.
            It takes two parameters:
             - ODataEntry entry - which is the entry to be written.
             - XmlWriter writer - which is the current XmlWriter used by the ODataWriter to write the entry.
            It returns XmlWriter:
             - null - means there's no need to customize the XML for this entry, and thus the original writer will be used to write the entry.
             - non-null XmlWriter - the ODataWriter will use the new returned writer to write the entry.
                 Once the entry has been written the EndEntryXmlCustomizationCallback will be called and the writer will be passed to it.
                 Note that the ODataWriter will not dipose or otherwise clear the writer.
                 The callback must never return the same instance as the writer parameter!
            param name="atomEndEntryXmlCustomizationCallback"
            If non-null this action will be called when a (non-null) entry has been written.
            The action takes three parameters:
             - ODataEntry entry - which is the entry which was written.
             - XmlWriter entryWriter - the XmlWriter used to write the entry. The action must dispose or otherwise clear this writer.
             - XmlWriter parentWriter - the XmlWriter used to write the parent scope of the entry. This is the writer which will be used to write further
                 payload once this action returns.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.EnableDefaultBehavior">
            <summary>Enables the <see cref="T:Microsoft.Data.OData.ODataMessageWriterSettings" /> default behavior.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.EnableWcfDataServicesServerBehavior(System.Boolean)">
            <summary>Specifies whether the WCF data services server behavior is enabled.</summary>
            <param name="usesV1Provider">true if the server uses V1 provider, otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.EnableWcfDataServicesServerBehavior(System.Boolean,System.Boolean)">
            <summary>Specifies whether the WCF data services server behavior is enabled.</summary>
            <param name="usesV1Provider">true if the server uses V1 provider, otherwise, false.</param>
            <param name="alwaysUseDefaultXmlNamespaceForRootElement">true if the server is configured to leave prefixes off all root elements and anything else in the same namespace, otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.EnableWcfDataServicesClientBehavior(System.Func{Microsoft.Data.OData.ODataEntry,System.Xml.XmlWriter,System.Xml.XmlWriter},System.Action{Microsoft.Data.OData.ODataEntry,System.Xml.XmlWriter,System.Xml.XmlWriter},System.String,System.String)">
            <summary>Enables the WCF data services client behavior.</summary>
            <param name="startEntryXmlCustomizationCallback">The start of the entry XML customization callback.</param>
            <param name="endEntryXmlCustomizationCallback">The end of the entry XML customization callback.</param>
            <param name="odataNamespace">The OData namespace.</param>
            <param name="typeScheme">The type scheme.</param>
            <remarks>
            Either both <paramref name="startEntryXmlCustomizationCallback"/> and <paramref name="endEntryXmlCustomizationCallback"/> must be null, or both must be non-null.
            The XmlWriter returned by the startEntryXmlCustomizationCallback is not owned by the ODataWriter and it won't be Disposed or Flushed or cleared
            in any way by it. It's the responsibility of the caller to flush/dispose it inside the endEntryXmlCustomizationCallback and also in case of an exception.
            In case an exception is thrown while a new writer is used to write an entry, only the original XmlWriter will be disposed
            and no endEntryXmlCustomizationCallback will be called.
            It's the responsibility of this callback to write the entry payload written to the entryWriter into the parentWriter at this point.
            The ODataWriter assumes that once this callback returns the entry was already written and it will continue onward.
            If expanded entries are being written this callback may get called multiple times without the corresponding end callback in between.
            It's the responsibility of the callback and the caller to be able to handle nested entries.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.SetMetadataDocumentUri(System.Uri)">
            <summary>Sets the URI of the metadata document.</summary>
            <param name="value">The URI of the metadata document.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.SetMetadataDocumentUri(System.Uri,System.String)">
            <summary>Sets the URI of the metadata document.</summary>
            <param name="value">The URI of the metadata document.</param>
            <param name="selectClause">The select clause.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.HasJsonPaddingFunction">
            <summary>
            Determines if there is a JSON padding function defined.
            </summary>
            <returns>True if the JsonPCallback property is not null or emtpy.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataMessageWriterSettings.ShouldSkipAnnotation(System.String)">
            <summary>
            Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should not be writen, false otherwise.
            </summary>
            <param name="annotationName">The name of the annotation in question.</param>
            <returns>Returns true to indicate that the annotation with the name <paramref name="annotationName"/> should not be writen, false otherwise.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.Version">
            <summary>Gets or sets the OData protocol version to be used for writing payloads. </summary>
            <returns>The OData protocol version to be used for writing payloads.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.BaseUri">
            <summary>Gets or sets the document base URI which is used as base for all relative URIs. </summary>
            <returns>The document base URI which is used as base for all relative URIs.</returns>
            <remarks>
            Note that for typical OData services this should end with a slash character. For example "http://services.odata.org/OData/OData.svc/" will work as expected,
            that is a relative URI "Products(0)" will correctly combine with the base to produce "http://services.odata.org/OData/OData.svc/Products(0)".
            If the URI would not end with a slash, the last segment is not considered when base and relative URIs are combined.
            So for example this base URI "http://services.odata.org/OData/OData.svc" combined with relative URI "Products(0)" would produce
            "http://services.odata.org/OData/Products(0)", which is typically not the desired result.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.DisableMessageStreamDisposal">
            <summary>Gets or sets a value that indicates whether the message stream will not be disposed after finishing writing with the message.</summary>
            <returns>true if the message stream will not be disposed after finishing writing with the message; otherwise false. The default value is false.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.JsonPCallback">
            <summary>Gets or sets a callback function use to wrap the response from server.</summary>
            <returns>The callback function used to wrap the response from server.</returns>
            <remarks>If it has a value and we are writing a JSON response, then we will wrap the entirety of the response in
            the provided function name and parenthesis for JSONP. Otherwise this value is ignored.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.AutoComputePayloadMetadataInJson">
            <summary>
            Gets or sets a value that indicates whether the writer should automatically generate or omit metadata in JSON payloads based on the metadata level.
            </summary>
            <remarks>
            Payload metadata includes the type names of entries and property values as well as any information that may be computed automatically, such as edit links.
            If, for example, ODataEntry.EditLink is not specified, then it will be automatically computed and written out in full metadata mode.
            If ODataEntry.EditLink is specified, then that value will be considered an "override" of the default computed edit link, and will be written out in full and minimal metadata modes. It will not be written in no metadata mode.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.AutoGeneratedUrlsShouldPutKeyValueInDedicatedSegment">
            <summary>
            Gets or sets a value that indicates whether the writer should put key values in their own URI segment when automatically building URIs.
            If this value is false, automatically-generated URLs will take the form "../EntitySet('KeyValue')/..".
            If this value is true, automatically-generated URLs will take the form "../EntitySet/KeyValue/..".
            If this value is not set (null), decision will be made based on the "Com.Microsoft.Data.Services.Conventions.V1.UrlConventions" vocabulary
            annotation on the IEdmEntityContainer, if available. The default behavior is to put key values inside parentheses and not a distinct URL segments.
            This setting only applies to URLs that are automatically generated by the <see cref="T:Microsoft.Data.OData.ODataMessageWriter"/> and does not modify URLs explicitly provided by the user.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.AlwaysUseDefaultXmlNamespaceForRootElement">
            <summary>
            If set to true, then the root element of each payload will be written in the default (non-prefix-qualified) namespace of the document. 
            All other elements in the same namespace will also not have prefixes.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.AcceptableMediaTypes">
            <summary>
            The acceptable media types used to determine the content type of the message.
            This is a comma separated list of content types as specified in RFC 2616, Section 14.1
            </summary>
            <remarks>A null or empty accept header means that all content types are acceptable.</remarks>
            <remarks>For response messages this is usually the 'Accept' header of the request message.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.AcceptableCharsets">
            <summary>
            The acceptable charsets used to the determine the encoding of the message.
            This is a comma separated list of charsets as specified in RFC 2616, Section 14.2
            </summary>
            <remarks>A null or empty accept charset header means that all charsets are acceptable.</remarks>
            <remarks>For response messages this is usually the 'Accept-Charset' header of the request message.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.WriterBehavior">
            <summary>
            The writer behavior that holds all the knobs needed to make the writer
            behave differently inside and outside of WCF Data Services.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.Format">
            <summary>
            The format to use when writing the payload; this replaces the 'AcceptHeader' and 'AcceptCharSetHeader' 
            properties and uses the default values for the respective format. If null is specified
            the default format and the default media type will be picked depending on the writer these settings are used with.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.UseFormat">
            <summary>
            true if the Format property should be used to compute the media type; 
            false if AcceptableMediaTypes and AcceptableCharsets should be used.
            null if neither the format nor the acceptable media types/charsets have been set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.AtomStartEntryXmlCustomizationCallback">
            <summary>
            The start ATOM entry callback for XML customization of entries.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.AtomEndEntryXmlCustomizationCallback">
            <summary>
            The end ATOM entry callback for XML customization of entries.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.MetadataDocumentUri">
            <summary>
            Gets the metadata document URI that has been set on the settings, or null if it has not been set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataMessageWriterSettings.ShouldIncludeAnnotation">
            <summary>
            Func to evaluate whether an annotation should be writen by the writer. The func should return true if the annotation should
            be writen and false if the annotation should be skipped.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.MimeConstants">
            <summary>
            Constant values related to media types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeAny">
            <summary>Media type for requesting any media type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeApplicationType">
            <summary>'application' - media type for application types.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeTextType">
            <summary>'text' - media type for text subtypes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeMultipartType">
            <summary>'multipart' - media type.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeAtomXmlSubType">
            <summary>'atom+xml' - constant for atom+xml subtypes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeAtomSvcXmlSubType">
            <summary>'atomsvc+xml' - constant for atomsvc+xml subtypes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeXmlSubType">
            <summary>'xml' - constant for xml subtypes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeJsonSubType">
            <summary>'json' - constant for JSON subtypes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimePlainSubType">
            <summary>'plain' - constant for text subtypes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeJavaScriptType">
            <summary>'javascript' - constant for javascript subtypes.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeOctetStreamSubType">
            <summary>'octet-stream' subtype.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeMixedSubType">
            <summary>'mixed' subtype.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeHttpSubType">
            <summary>'http' subtype.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeTypeParameterName">
            <summary>Parameter name for 'type' parameters.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeTypeParameterValueEntry">
            <summary>Parameter value for type 'entry'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeTypeParameterValueFeed">
            <summary>Parameter value for type 'feed'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeODataParameterName">
            <summary>Parameter name for 'odata' parameters.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeODataParameterValueVerbose">
            <summary>Parameter value for 'verbose' JSON.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeODataParameterValueFullMetadata">
            <summary>JSON Light parameter value 'fullmetadata'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeODataParameterValueMinimalMetadata">
            <summary>JSON Light parameter value 'minimalmetadata'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeODataParameterValueNoMetadata">
            <summary>JSON Light parameter value 'nometadata'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeStreamingParameterName">
            <summary>Parameter name for 'streaming' parameter.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeStreamingParameterValueTrue">
            <summary>JSON Light streaming parameter value 'true'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeStreamingParameterValueFalse">
            <summary>JSON Light streaming parameter value 'false'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeApplicationXml">
            <summary>Media type for XML bodies.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeApplicationAtomXml">
            <summary>Media type for ATOM payloads.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeApplicationAtomXmlTypeEntry">
            <summary>Media type for links referencing a single entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeApplicationAtomXmlTypeFeed">
            <summary>Media type for links referencing a collection of entries.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeApplicationJson">
            <summary>Media type for JSON payloads.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeApplicationOctetStream">
            <summary>Media type for binary raw content.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeApplicationHttp">
            <summary>Media type for batch parts.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeTextXml">
            <summary>Media type for Xml bodies (deprecated).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeTextPlain">
            <summary>Media type for raw content (except binary).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.TextJavaScript">
            <summary>Media type for javascript content.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeMultipartMixed">
            <summary>Media type for raw content (except binary).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.MimeStar">
            <summary>The '*' wildcard usable in type names and subtype names.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.MimeConstants.Separator">
            <summary>Separator between mediat type and subtype.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomWriterUtils">
            <summary>
            Helper methods used by the OData writer for the ATOM format.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterUtils.CreateXmlWriter(System.IO.Stream,Microsoft.Data.OData.ODataMessageWriterSettings,System.Text.Encoding)">
            <summary>
            Creates an Xml writer over the specified stream, with the provided settings and encoding.
            </summary>
            <param name="stream">The stream to create the XmlWriter over.</param>
            <param name="messageWriterSettings">The OData message writer settings used to control the settings of the Xml writer.</param>
            <param name="encoding">The encoding used for writing.</param>
            <returns>An <see cref="T:System.Xml.XmlWriter"/> instance configured with the provided settings and encoding.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterUtils.WriteError(System.Xml.XmlWriter,Microsoft.Data.OData.ODataError,System.Boolean,System.Int32)">
            <summary>
            Write an error message.
            </summary>
            <param name="writer">The Xml writer to write to.</param>
            <param name="error">The error instance to write.</param>
            <param name="includeDebugInformation">A flag indicating whether error details should be written (in debug mode only) or not.</param>
            <param name="maxInnerErrorDepth">The maximumum number of nested inner errors to allow.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterUtils.WriteETag(System.Xml.XmlWriter,System.String)">
            <summary>
            Write the m:etag attribute with the given string value.
            </summary>
            <param name="writer">The Xml writer to write to.</param>
            <param name="etag">The string value of the ETag.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterUtils.WriteNullAttribute(System.Xml.XmlWriter)">
            <summary>
            Write the m:null attribute with a value of 'true'
            </summary>
            <param name="writer">The Xml writer to write to.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterUtils.WriteRaw(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes raw markup with the given writer, adding the xml:space="preserve" attribute to the element if the markup has leading or trailing whitespace.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="value">A string containing the text to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterUtils.WriteString(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes a string with the given writer, adding the xml:space="preserve" attribute to the element if the string has leading or trailing whitespace.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <param name="value">The string to write as element text content.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterUtils.CreateXmlWriterSettings(Microsoft.Data.OData.ODataMessageWriterSettings,System.Text.Encoding)">
            <summary>
            Creates a new XmlWriterSettings instance using the encoding.
            </summary>
            <param name="messageWriterSettings">Configuration settings of the OData writer.</param>
            <param name="encoding">Encoding to  use in the writer settings.</param>
            <returns>The Xml writer settings to use for this writer.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriterUtils.WritePreserveSpaceAttributeIfNeeded(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes an xml:space="preserve" attribute if the given value starts or ends with whitespace.
            </summary>
            <param name="writer">The writer to use for writing out the attribute string.</param>
            <param name="value">The value to check for insignificant whitespace.</param>
        </member>
        <member name="T:Microsoft.Data.OData.AtomValueUtils">
            <summary>
            Utility methods around writing of ATOM values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.AtomValueUtils.XmlWhitespaceChars">
            <summary>The characters that are considered to be whitespace by XmlConvert.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.AtomValueUtils.WritePrimitiveValue(System.Xml.XmlWriter,System.Object)">
            <summary>
            Converts the given value to the ATOM string representation
            and uses the writer to write it.
            </summary>
            <param name="writer">The writer to write the stringified value.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.AtomValueUtils.ConvertPrimitiveToString(System.Object)">
            <summary>Converts the specified value to a serializable string in ATOM format, or throws an exception if the value cannot be converted.</summary>
            <param name="value">Non-null value to convert.</param>
            <returns>The specified value converted to an ATOM string.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AtomValueUtils.ReadPrimitiveValue(System.Xml.XmlReader,Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Reads a value of an XML element and converts it to the target primitive value.
            </summary>
            <param name="reader">The XML reader to read the value from.</param>
            <param name="primitiveTypeReference">The primitive type reference to convert the value to.</param>
            <returns>The primitive value read.</returns>
            <remarks>This method does not read null values, it only reads the actual element value (not its attributes).</remarks>
            <remarks>
            Pre-Condition:   XmlNodeType.Element   - the element to read the value for.
                             XmlNodeType.Attribute - an attribute on the element to read the value for.
            Post-Condition:  XmlNodeType.Element    - the element was empty.
                             XmlNodeType.EndElement - the element had some value.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.AtomValueUtils.ToString(Microsoft.Data.OData.Atom.AtomTextConstructKind)">
            <summary>
            Converts a given <see cref="T:Microsoft.Data.OData.Atom.AtomTextConstructKind"/> to a string appropriate for Atom format.
            </summary>
            <param name="textConstructKind">The text construct kind to convert.</param>
            <returns>The string version of the text construct format in Atom format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AtomValueUtils.TryConvertPrimitiveToString(System.Object,System.String@)">
            <summary>Converts the specified value to a serializable string in ATOM format.</summary>
            <param name="value">Non-null value to convert.</param>
            <param name="result">The specified value converted to an ATOM string.</param>
            <returns>boolean value indicating conversion successful conversion</returns>
        </member>
        <member name="M:Microsoft.Data.OData.AtomValueUtils.ConvertStringToPrimitive(System.String,Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Converts a string to a primitive value.
            </summary>
            <param name="text">The string text to convert.</param>
            <param name="targetTypeReference">Type to convert the string to.</param>
            <returns>The value converted to the target type.</returns>
            <remarks>This method does not convert null value.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.AtomValueUtils.ConvertXmlBooleanValue(System.String)">
            <summary>
            Reimplementation of XmlConvert.ToBoolean that accepts 'True' and 'False' in addition
            to 'true' and 'false'.
            </summary>
            <param name="text">The string value read from the Xml reader.</param>
            <returns>The converted boolean value.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataConstants">
            <summary>
            Constant values used by the OData or HTTP protocol or OData library.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.MethodGet">
            <summary>
            HTTP method name for GET requests.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.MethodPost">
            <summary>
            HTTP method name for POST requests.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.MethodPut">
            <summary>
            HTTP method name for PUT requests.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.MethodDelete">
            <summary>
            HTTP method name for DELETE requests.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.MethodPatch">
            <summary>
            HTTP method name for PATCH requests.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.MethodMerge">
            <summary>
            Custom HTTP method name for MERGE requests.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.ContentTypeHeader">
            <summary>
            Name of the HTTP content type header.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.DataServiceVersionHeader">
            <summary>
            Name of the OData 'DataServiceVersion' HTTP header.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.ContentIdHeader">
            <summary>
            Name of the HTTP content-ID header.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.ContentLengthHeader">
            <summary>
            Name of the Content-Length HTTP header.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.HttpQValueParameter">
            <summary>
            'q' - HTTP q-value parameter name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.HttpVersionInBatching">
            <summary>Http Version in batching requests and response.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.Charset">
            <summary>'charset' - HTTP parameter name.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.HttpMultipartBoundary">
            <summary>multi-part keyword in content-type to identify batch separator</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.ContentTransferEncoding">
            <summary>Name of the HTTP content transfer encoding header.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.BatchContentTransferEncoding">
            <summary>Content-Transfer-Encoding value for batch payloads.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.ODataDefaultProtocolVersion">
            <summary>The default protocol version to use in ODataLib if none is specified.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.BatchRequestBoundaryTemplate">
            <summary>The template used when computing a batch request boundary.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.BatchResponseBoundaryTemplate">
            <summary>The template used when computing a batch response boundary.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.RequestChangeSetBoundaryTemplate">
            <summary>The template used when computing a request changeset boundary.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.ResponseChangeSetBoundaryTemplate">
            <summary>The template used when computing a response changeset boundary.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.HttpWeakETagPrefix">
            <summary>Weak etags in HTTP must start with W/.
            Look in http://www.ietf.org/rfc/rfc2616.txt?number=2616 section 14.19 for more information.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.HttpWeakETagSuffix">
            <summary>Weak etags in HTTP must end with ".
            Look in http://www.ietf.org/rfc/rfc2616.txt?number=2616 section 14.19 for more information.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.DefaultMaxRecursionDepth">
            <summary>The default maximum allowed recursion depth for recursive payload definitions, such as complex values inside complex values.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.DefaultMaxReadMessageSize">
            <summary>The default maximum number of bytes that should be read from a message.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.DefaultMaxPartsPerBatch">
            <summary>The default maximum number of top-level operations and changesets per batch payload.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.DefulatMaxOperationsPerChangeset">
            <summary>The default maximum number of operations per changeset.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.DefaultMaxEntityPropertyMappingsPerType">
            <summary>The default maximum number of entity property mapping attributes for an entity type (on the type itself and all its base types).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.MaxODataVersion">
            <summary>The maximum recognized OData version by this library.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.UriSegmentSeparator">
            <summary>The '/' (forward slash) which is the URI segment separator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.UriSegmentSeparatorChar">
            <summary>The '/' (forward slash) which is the URI segment separator.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.AssociationLinkSegmentName">
            <summary>The '$links' segment name for constructing association links.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataConstants.DefaultStreamSegmentName">
            <summary>The '$value' segment name for the default stream value.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataUtilsInternal">
            <summary>
            Internal utility methods used in the OData library.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtilsInternal.ToDataServiceVersion(Microsoft.Data.OData.ODataVersion)">
            <summary>
            Converts a given <paramref name="version"/> to its <see cref="T:System.Version"/> representation.
            </summary>
            <param name="version">The <see cref="T:Microsoft.Data.OData.ODataVersion"/> instance to convert.</param>
            <returns>The <see cref="T:System.Version"/> representation of the <paramref name="version"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtilsInternal.SetDataServiceVersion(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.ODataMessageWriterSettings)">
            <summary>
            Sets the 'DataServiceVersion' HTTP header on the message based on the protocol version specified in the settings.
            </summary>
            <param name="message">The message to set the data service version header on.</param>
            <param name="settings">The <see cref="T:Microsoft.Data.OData.ODataMessageWriterSettings"/> determining the protocol version to use.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtilsInternal.GetDataServiceVersion(Microsoft.Data.OData.ODataMessage,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Reads the DataServiceVersion header from the <paramref name="message"/> and parses it.
            If no DataServiceVersion header is found it sets the default version to be used for reading.
            </summary>
            <param name="message">The message to get the data service version header from.</param>
            <param name="defaultVersion">The default version to use if the header was not specified.</param>
            <returns>
            The <see cref="T:Microsoft.Data.OData.ODataVersion"/> retrieved from the DataServiceVersion header of the message.
            The default version if none is specified in the header.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtilsInternal.IsPayloadKindSupported(Microsoft.Data.OData.ODataPayloadKind,System.Boolean)">
            <summary>
            Checks whether a payload kind is supported in a request or a response.
            </summary>
            <param name="payloadKind">The <see cref="T:Microsoft.Data.OData.ODataPayloadKind"/> to check.</param>
            <param name="inRequest">true if the check is for a request; false for a response.</param>
            <returns>true if the <paramref name="payloadKind"/> is valid in a request or response respectively based on <paramref name="inRequest"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtilsInternal.ConcatEnumerables``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concats two enumerables.
            </summary>
            <typeparam name="T">Element type of the enumerable.</typeparam>
            <param name="enumerable1">Enumerable 1 to concat.</param>
            <param name="enumerable2">Enumerable 2 to concat.</param>
            <returns>Returns the combined enumerable.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.ODataUtilsInternal.SelectedProperties(Microsoft.Data.OData.ODataMetadataDocumentUri)">
            <summary>
            Gets the selected properties from the given <paramref name="metadataDocumentUri"/>.
            </summary>
            <param name="metadataDocumentUri">The <see cref="T:Microsoft.Data.OData.ODataMetadataDocumentUri"/> instance to get the selected properties node from.</param>
            <returns>The selected properties node instance.</returns>
            <remarks>This can be a property on <see cref="T:Microsoft.Data.OData.ODataMetadataDocumentUri"/>. Having it as an extension method here so we don't have to do the null check at the call site.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomWriter">
            <summary>
            OData writer for the ATOM format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomWriter.updatedTime">
            <summary>Value for the atom:updated element.</summary>
            <remarks>
            The writer will use the same default value for the atom:updated element in a given payload. While there is no requirement for this,
            it saves us from re-querying the system time and converting it to string every time we write an item.
            </remarks>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomWriter.atomOutputContext">
            <summary>The output context to write to.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomWriter.atomEntryAndFeedSerializer">
            <summary>The serializer to write payload with.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.#ctor(Microsoft.Data.OData.Atom.ODataAtomOutputContext,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean)">
            <summary>
            Constructor creating an OData writer using the ATOM format.
            </summary>
            <param name="atomOutputContext">The output context to write to.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="writingFeed">True if the writer is created for writing a feed; false when it is created for writing an entry.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.VerifyNotDisposed">
            <summary>
            Check if the object has been disposed; called from all public API methods. Throws an ObjectDisposedException if the object
            has already been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.FlushSynchronously">
            <summary>
            Flush the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.FlushAsynchronously">
            <summary>
            Flush the output.
            </summary>
            <returns>Task representing the pending flush operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.StartPayload">
            <summary>
            Start writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.EndPayload">
            <summary>
            Finish writing an OData payload.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.StartEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Start writing an entry.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.EndEntry(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Finish writing an entry.
            </summary>
            <param name="entry">The entry to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.StartFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Start writing a feed.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.EndFeed(Microsoft.Data.OData.ODataFeed)">
            <summary>
            Finish writing a feed.
            </summary>
            <param name="feed">The feed to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.WriteDeferredNavigationLink(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a navigation link.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.StartNavigationLinkWithContent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Start writing a navigation link with content.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.EndNavigationLinkWithContent(Microsoft.Data.OData.ODataNavigationLink)">
            <summary>
            Finish writing a navigation link with content.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.WriteEntityReferenceInNavigationLinkContent(Microsoft.Data.OData.ODataNavigationLink,Microsoft.Data.OData.ODataEntityReferenceLink)">
            <summary>
            Write an entity reference link.
            </summary>
            <param name="parentNavigationLink">The parent navigation link which is being written around the entity reference link.</param>
            <param name="entityReferenceLink">The entity reference link to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.CreateFeedScope(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new feed scope.
            </summary>
            <param name="feed">The feed for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly create scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.CreateEntryScope(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Create a new entry scope.
            </summary>
            <param name="entry">The entry for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
            <returns>The newly create scope.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.WriteInstanceAnnotations(System.Collections.Generic.IEnumerable{Microsoft.Data.OData.ODataInstanceAnnotation},Microsoft.Data.OData.InstanceAnnotationWriteTracker)">
            <summary>
            Writes the collection of <see cref="T:Microsoft.Data.OData.ODataInstanceAnnotation"/> to the ATOM payload.
            </summary>
            <param name="instanceAnnotations">The collection of <see cref="T:Microsoft.Data.OData.ODataInstanceAnnotation"/> to write.</param>
            <param name="tracker">Helper class to track if an annotation has been writen.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.WriteFeedInstanceAnnotations(Microsoft.Data.OData.ODataFeed,Microsoft.Data.OData.Atom.ODataAtomWriter.AtomFeedScope)">
            <summary>
            Writes the collection of <see cref="T:Microsoft.Data.OData.ODataInstanceAnnotation"/> for the given <paramref name="feed"/> to the ATOM payload.
            </summary>
            <param name="feed">The feed to write the <see cref="T:Microsoft.Data.OData.ODataInstanceAnnotation"/> for.</param>
            <param name="currentFeedScope">The current feed scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.WriteEntryContent(Microsoft.Data.OData.ODataEntry,Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.OData.Atom.EntryPropertiesValueCache,Microsoft.Data.OData.Metadata.EpmSourcePathSegment,Microsoft.Data.OData.ProjectedPropertiesAnnotation)">
            <summary>
            Write the content of the given entry.
            </summary>
            <param name="entry">The entry for which to write properties.</param>
            <param name="entryType">The <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> of the entry (or null if not metadata is available).</param>
            <param name="propertiesValueCache">The cache of properties.</param>
            <param name="rootSourcePathSegment">The root of the EPM source tree, if there's an EPM applied.</param>
            <param name="projectedProperties">Set of projected properties, or null if all properties should be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.CheckAndWriteParentNavigationLinkStartForInlineElement">
            <summary>
            Writes the navigation link start atom:link element including the m:inline element if there's a parent navigation link.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.CheckAndWriteParentNavigationLinkEndForInlineElement">
            <summary>
            Writes the navigation link end m:inline and end atom:link elements if there's a parent navigation link.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.WriteNavigationLinkStart(Microsoft.Data.OData.ODataNavigationLink,System.Uri)">
            <summary>
            Writes the navigation link's start element and atom metadata.
            </summary>
            <param name="navigationLink">The navigation link to write.</param>
            <param name="navigationLinkUrlOverride">Url to use for the navigation link. If this is specified the Url property on the <paramref name="navigationLink"/>
            will be ignored. If this parameter is null, the Url from the navigation link is used.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.WriteNavigationLinkEnd">
            <summary>
            Writes custom extensions and the end element for a navigation link
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.StartEntryXmlCustomization(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Determines if XML customization should be applied to the entry and applies it.
            </summary>
            <param name="entry">The entry to apply the customization to.</param>
            <remarks>This method must be called before anything is written for the entry in question.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.EndEntryXmlCustomization(Microsoft.Data.OData.ODataEntry)">
            <summary>
            Ends XML customization for the entry (if one was applied).
            </summary>
            <param name="entry">The entry to end the customization for.</param>
            <remarks>This method must be called after all the XML for a given entry is written.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomWriter.CurrentEntryScope">
            <summary>
            Returns the current AtomEntryScope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomWriter.CurrentFeedScope">
            <summary>
            Returns the current AtomFeedScope.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomElement">
            <summary>
            Enumeration of ATOM element flags, used to keep track of which elements were already written.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomElement.Id">
            <summary>The atom:id element.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomElement.ReadLink">
            <summary>The atom:link with rel='self'.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomElement.EditLink">
            <summary>The atom:link with rel='edit'.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomFeedScope">
            <summary>
            A scope for an feed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomFeedScope.authorWritten">
            <summary>true if the author element was already written, false otherwise.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomFeedScope.#ctor(Microsoft.Data.OData.ODataFeed,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new feed scope.
            </summary>
            <param name="feed">The feed for the new scope.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomFeedScope.AuthorWritten">
            <summary>
            true if the author element was already written, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomEntryScope">
            <summary>
            A scope for an entry in ATOM writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomEntryScope.alreadyWrittenElements">
            <summary>Bit field of the ATOM elements written so far.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomEntryScope.#ctor(Microsoft.Data.OData.ODataEntry,Microsoft.Data.OData.ODataFeedAndEntrySerializationInfo,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,System.Boolean,Microsoft.Data.OData.ODataWriterBehavior,Microsoft.Data.OData.SelectedPropertiesNode)">
            <summary>
            Constructor to create a new entry scope.
            </summary>
            <param name="entry">The entry for the new scope.</param>
            <param name="serializationInfo">The serialization info for the current entry.</param>
            <param name="entitySet">The entity set we are going to write entities for.</param>
            <param name="entityType">The entity type for the entries in the feed to be written (or null if the entity set base type should be used).</param>
            <param name="skipWriting">true if the content of the scope to create should not be written.</param>
            <param name="writingResponse">true if we are writing a response, false if it's a request.</param>
            <param name="writerBehavior">The <see cref="T:Microsoft.Data.OData.ODataWriterBehavior"/> instance controlling the behavior of the writer.</param>
            <param name="selectedProperties">The selected properties of this scope.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomEntryScope.SetWrittenElement(Microsoft.Data.OData.Atom.ODataAtomWriter.AtomElement)">
            <summary>
            Marks the <paramref name="atomElement"/> as written in this entry scope.
            </summary>
            <param name="atomElement">The ATOM element which was written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Atom.ODataAtomWriter.AtomEntryScope.IsElementWritten(Microsoft.Data.OData.Atom.ODataAtomWriter.AtomElement)">
            <summary>
            Determines if the <paramref name="atomElement"/> was already written for this entry scope.
            </summary>
            <param name="atomElement">The ATOM element to test for.</param>
            <returns>true if the <paramref name="atomElement"/> was already written for this entry scope; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataVersion">
            <summary>
            Enumeration representing the OData protocol version.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataVersion.V1">
            <summary>Version 1.0.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataVersion.V2">
            <summary>Version 2.0.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataVersion.V3">
            <summary>Version 3.0.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.IndentedTextWriter">
            <summary>
            Writes text indented as per the indentation level setting
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.IndentedTextWriter.IndentationString">
            <summary>
            The indentation string to prepand to each line for each indentation level.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.IndentedTextWriter.writer">
            <summary>
            The underlying writer to write to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.IndentedTextWriter.enableIndentation">
            <summary>
            Set to true if the writer should actually indent or not.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.IndentedTextWriter.indentLevel">
            <summary>
            Number which specifies the level of indentation. Starts with 0 which means no indentation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.IndentedTextWriter.indentationPending">
            <summary>
            Set to true if indentation should be written before the next string is written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="writer">The underlying writer to wrap.</param>
            <param name="enableIndentation">Set to true if the writer should actually indent or not.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.IncreaseIndentation">
            <summary>
            Increases the level of indentation applied to the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.DecreaseIndentation">
            <summary>
            Decreases the level of indentation applied to the output.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.Close">
            <summary>
            Closes the underlying writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.Flush">
            <summary>
            Clears the buffer of the current writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.Write(System.String)">
            <summary>
            Writes the given string value to the underlying writer.
            </summary>
            <param name="s">String value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.Write(System.Char)">
            <summary>
            Writes the given char value to the underlying writer.
            </summary>
            <param name="value">Char value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.WriteLine">
            <summary>
            Writes a new line.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.InternalCloseOrDispose">
            <summary>
            Closes or disposes the underlying writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.IndentedTextWriter.WriteIndentation">
            <summary>
            Writes the tabs depending on the indent level.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.IndentedTextWriter.Encoding">
            <summary>
            Returns the Encoding for the given writer.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.IndentedTextWriter.NewLine">
            <summary>
            Returns the new line character.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonConstants">
            <summary>
            Constants for the JSON format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataResultsName">
            <summary>
            "results" header for Json data array.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataDataWrapper">
            <summary>
            Text used to start a data object wrapper in JSON.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataDataWrapperPropertyName">
            <summary>
            Data property name of the data object wrapper in JSON.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataEntryIdName">
            <summary>
            "id" header for the id of an Entry. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataName">
            <summary>
            "__metadata" header for Json metadata object
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataUriName">
            <summary>
            "uri" header for the URI identifying the entry being represented.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataTypeName">
            <summary>
            "type" header for the type name of the entity
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataETagName">
            <summary>
            "etag" header for the ETag of an entity
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataMediaResourceName">
            <summary>
            "__mediaresource" property name for the metadata of a stream reference value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataMediaUriName">
            <summary>
            "media_src" header for the MLE read link
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataContentTypeName">
            <summary>
            "content_type" header for the MLE
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataMediaETagName">
            <summary>
            "media_etag" header for the MLE
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataEditMediaName">
            <summary>
            "edit_media" header for the MLE
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataPropertiesName">
            <summary>
            "properties" header for the property metadata
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataMetadataPropertiesAssociationUriName">
            <summary>
            "associationuri" header for the association link url of a navigation property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataCountName">
            <summary>
            "__count" header for the inline count in a feed
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataNextLinkName">
            <summary>
            "__next" header for the next link in a feed
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataDeferredName">
            <summary>
            "__deferred" header for the non-expanded link in an entry
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataNavigationLinkUriName">
            <summary>
            "uri" header for the navigation link URL
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataUriName">
            <summary>
            The name of the property returned for a singleton $links query
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataActionsMetadataName">
            <summary>"actions" header for entry metadata.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataFunctionsMetadataName">
            <summary>"functions" header for entry metadata.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataOperationTitleName">
            <summary>"title" header for "actions" and "functions" metadata.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataOperationMetadataName">
            <summary>"metadata" header for "actions" and "functions" metadata.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataOperationTargetName">
            <summary>"target" header for "actions" and "functions" metadata.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorName">
            <summary>
            "error" header for the error payload
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorCodeName">
            <summary>
            "code" header for the error code property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorMessageName">
            <summary>
            "message" header for the error message property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorMessageLanguageName">
            <summary>
            "lang" header for the error message language property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorMessageValueName">
            <summary>
            "value" header for the error message value property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorInnerErrorName">
            <summary>
            "innererror" header for the inner error property
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorInnerErrorMessageName">
            <summary>
            "message" header for an inner error (for Astoria compatibility)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorInnerErrorTypeNameName">
            <summary>
            "typename" header for an inner error (for Astoria compatibility)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorInnerErrorStackTraceName">
            <summary>
            "stacktrace" header for an inner error (for Astoria compatibility)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataErrorInnerErrorInnerErrorName">
            <summary>
            "internalexception" header for an inner, inner error property (for Astoria compatibility)
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataDateTimeFormat">
            <summary>
            JSON datetime format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataDateTimeOffsetFormat">
            <summary>
            JSON datetime offset format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataDateTimeOffsetPlusSign">
            <summary>
            A plus sign for the date time offset format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ODataServiceDocumentEntitySetsName">
            <summary>
            The fixed property name for the entity sets array in a service document payload.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.JsonTrueLiteral">
            <summary>
            The true value literal.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.JsonFalseLiteral">
            <summary>
            The false value literal.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.JsonNullLiteral">
            <summary>
            The null value literal.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.StartObjectScope">
            <summary>
            Character which starts the object scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.EndObjectScope">
            <summary>
            Character which ends the object scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.StartArrayScope">
            <summary>
            Character which starts the array scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.EndArrayScope">
            <summary>
            Character which ends the array scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.StartPaddingFunctionScope">
            <summary>
            "(" Json Padding Function scope open parens.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.EndPaddingFunctionScope">
            <summary>
            ")" Json Padding Function scope close parens.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ObjectMemberSeparator">
            <summary>
            The separator between object members.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.ArrayElementSeparator">
            <summary>
            The separator between array elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.NameValueSeparator">
            <summary>
            The separator between the name and the value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonConstants.QuoteCharacter">
            <summary>
            The quote character.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonWriter">
            <summary>
            Writer for the JSON format. http://www.json.org
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonWriter.writer">
            <summary>
            Writer to write text into.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonWriter.scopes">
            <summary>
            Scope of the json text - object, array.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonWriter.mustWriteDecimalPointInDoubleValues">
            <summary>
            If true, all double values will be written so that they either have an 'E' for scientific notation or contain a decimal point.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.#ctor(System.IO.TextWriter,System.Boolean,Microsoft.Data.OData.ODataFormat)">
            <summary>
            Creates a new instance of Json writer.
            </summary>
            <param name="writer">Writer to which text needs to be written.</param>
            <param name="indent">If the output should be indented or not.</param>
            <param name="jsonFormat">The json-based format to use when writing.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.StartPaddingFunctionScope">
            <summary>
            Start the padding function scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.EndPaddingFunctionScope">
            <summary>
            End the padding function scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.StartObjectScope">
            <summary>
            Start the object scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.EndObjectScope">
            <summary>
            End the current object scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.StartArrayScope">
            <summary>
            Start the array scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.EndArrayScope">
            <summary>
            End the current array scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteDataWrapper">
            <summary>
            Write the "d" wrapper text.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteDataArrayName">
            <summary>
            Write the "results" header for the data array.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteName(System.String)">
            <summary>
            Write the name for the object property.
            </summary>
            <param name="name">Name of the object property.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WritePaddingFunctionName(System.String)">
            <summary>
            Writes a function name for JSON padding.
            </summary>
            <param name="functionName">Name of the padding function to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Write a boolean value.
            </summary>
            <param name="value">Boolean value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Write an integer value.
            </summary>
            <param name="value">Integer value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Write a float value.
            </summary>
            <param name="value">Float value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Write a short value.
            </summary>
            <param name="value">Short value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Write a long value.
            </summary>
            <param name="value">Long value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Write a double value.
            </summary>
            <param name="value">Double value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Write a Guid value.
            </summary>
            <param name="value">Guid value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Write a decimal value
            </summary>
            <param name="value">Decimal value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.DateTime,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Write a DateTime value
            </summary>
            <param name="value">DateTime value to be written.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.DateTimeOffset,Microsoft.Data.OData.ODataVersion)">
            <summary>
            Writes a DateTimeOffset value
            </summary>
            <param name="value">DateTimeOffset value to be written.</param>
            <param name="odataVersion">The OData protocol version to be used for writing payloads.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value
            </summary>
            <param name="value">TimeSpan value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Write a byte value.
            </summary>
            <param name="value">Byte value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Write an sbyte value.
            </summary>
            <param name="value">SByte value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Write a string value.
            </summary>
            <param name="value">String value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.Flush">
            <summary>
            Clears all buffers for the current writer.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.WriteValueSeparator">
            <summary>
            Writes a separator of a value if it's needed for the next value to be written.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.StartScope(Microsoft.Data.OData.Json.JsonWriter.ScopeType)">
            <summary>
            Start the scope given the scope type.
            </summary>
            <param name="type">The scope type to start.</param>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonWriter.ScopeType">
            <summary>
            Various scope types for Json writer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonWriter.ScopeType.Array">
            <summary>
            Array scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonWriter.ScopeType.Object">
            <summary>
            Object scope.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonWriter.ScopeType.Padding">
            <summary>
            JSON padding function scope.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonWriter.Scope">
            <summary>
            Class representing scope information.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonWriter.Scope.type">
            <summary>
            The type of the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonWriter.Scope.#ctor(Microsoft.Data.OData.Json.JsonWriter.ScopeType)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The type of the scope.</param>
        </member>
        <member name="P:Microsoft.Data.OData.Json.JsonWriter.Scope.StartString">
            <summary>
            What to write at the beginning of this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.JsonWriter.Scope.EndString">
            <summary>
            What to write at teh end of this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.JsonWriter.Scope.ObjectCount">
            <summary>
            Get/Set the object count for this scope.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Json.JsonWriter.Scope.Type">
            <summary>
            Gets the scope type for this scope.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ExceptionUtils">
            <summary>
            Class with utility methods to work with exceptions
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ExceptionUtils.OutOfMemoryType">
            <summary>Type of OutOfMemoryException.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ExceptionUtils.StackOverflowType">
            <summary>Type of StackOverflowException.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ExceptionUtils.ThreadAbortType">
            <summary>Type of ThreadAbortException.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ExceptionUtils.IsCatchableExceptionType(System.Exception)">
            <summary>
            Determines whether the specified exception can be caught and 
            handled, or whether it should be allowed to continue unwinding.
            </summary>
            <param name="e"><see cref="T:System.Exception"/> to test.</param>
            <returns>
            true if the specified exception can be caught and handled; 
            false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Data.OData.ExceptionUtils.CheckArgumentNotNull``1(``0,System.String)">
            <summary>
            Checks the argument value for null and throws <see cref="T:System.ArgumentNullException"/> if it is null.
            </summary>
            <typeparam name="T">Type of the argument, used to force usage only for reference types.</typeparam>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ExceptionUtils.CheckArgumentStringNotEmpty(System.String,System.String)">
            <summary>
            Checks the argument string value empty string and throws <see cref="T:System.ArgumentNullException"/> if it is empty. The value can be null though.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ExceptionUtils.CheckArgumentStringNotNullOrEmpty(System.String,System.String)">
            <summary>
            Checks the argument string value for null or empty string and throws <see cref="T:System.ArgumentNullException"/> if it is null or empty.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ExceptionUtils.CheckIntegerNotNegative(System.Int32,System.String)">
            <summary>
            Checks the <paramref name="value"/> for not being negative and throws <see cref="T:System.ArgumentOutOfRangeException"/> if it is negative.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ExceptionUtils.CheckIntegerPositive(System.Int32,System.String)">
            <summary>
            Checks the <paramref name="value"/> for being greater than zero and throws <see cref="T:System.ArgumentOutOfRangeException"/> if it is not positive.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ExceptionUtils.CheckLongPositive(System.Int64,System.String)">
            <summary>
            Checks the <paramref name="value"/> for being greater than zero and throws <see cref="T:System.ArgumentOutOfRangeException"/> if it is not positive.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ExceptionUtils.CheckArgumentCollectionNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Checks the <paramref name="value"/> for not being empty.
            </summary>
            <param name="value">Argument whose value needs to be checked.</param>
            <param name="parameterName">Name of the argument, used for exception message.</param>
            <typeparam name="T">Type of the collection. It does not matter.</typeparam>
        </member>
        <member name="T:Microsoft.Data.OData.ExceptionUtils.ValidatedNotNullAttribute">
            <summary>
            A workaround to a problem with FxCop which does not recognize the CheckArgumentNotNull method
            as the one which validates the argument is not null.
            </summary>
            <remarks>This has been suggested as a workaround in msdn forums by the VS team. Note that even though this is production code
            the attribute has no effect on anything else.</remarks>
        </member>
        <member name="T:Microsoft.Data.OData.Json.JsonValueUtils">
            <summary>
            Provides helper method for converting data values to and from the OData JSON format.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonValueUtils.JsonDateTimeMinTimeTicks">
            <summary>
            Const tick value for caculating tick values.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonValueUtils.DoubleIndicatingCharacters">
            <summary>
            Characters which, if found inside a number, indicate that the number is a double when no other type information is available.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.Json.JsonValueUtils.SpecialCharToEscapedStringMap">
            <summary>
            Map of special characters to strings.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Boolean)">
            <summary>
            Write a boolean value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">The boolean value to write.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Int32)">
            <summary>
            Write an integer value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">Integer value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Single)">
            <summary>
            Write a float value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">Float value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Int16)">
            <summary>
            Write a short value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">Short value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Int64)">
            <summary>
            Write a long value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">Long value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Double,System.Boolean)">
            <summary>
            Write a double value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">Double value to be written.</param>
            <param name="mustIncludeDecimalPoint">If true, all double values will be written so that they either have an 'E' for scientific notation or contain a decimal point.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Guid)">
            <summary>
            Write a Guid value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">Guid value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Decimal)">
            <summary>
            Write a decimal value
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">Decimal value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.DateTime,Microsoft.Data.OData.ODataJsonDateTimeFormat)">
            <summary>
            Write a DateTime value
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">DateTime value to be written.</param>
            <param name="dateTimeFormat">The format to write out the DateTime value in.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.DateTimeOffset,Microsoft.Data.OData.ODataJsonDateTimeFormat)">
            <summary>
            Write a DateTimeOffset value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">DateTimeOffset value to be written.</param>
            <param name="dateTimeFormat">The format to write out the DateTime value in.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.TimeSpan)">
            <summary>
            Write a TimeSpan value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">TimeSpan value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.Byte)">
            <summary>
            Write a byte value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">Byte value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.SByte)">
            <summary>
            Write an sbyte value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">SByte value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteValue(System.IO.TextWriter,System.String)">
            <summary>
            Write a string value.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="value">String value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteEscapedJsonString(System.IO.TextWriter,System.String)">
            <summary>
            Returns the string value with special characters escaped.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="inputString">Input string value.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.JsonTicksToDateTimeTicks(System.Int64)">
            <summary>
            Converts the number of ticks from the JSON date time format to the one used in .NET DateTime or DateTimeOffset structure.
            </summary>
            <param name="ticks">The ticks to from the JSON date time format.</param>
            <returns>The ticks to use in the .NET DateTime of DateTimeOffset structure.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.WriteQuoted(System.IO.TextWriter,System.String)">
            <summary>
            Write the string value with quotes.
            </summary>
            <param name="writer">The text writer to write the output to.</param>
            <param name="text">String value to be written.</param>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.DateTimeTicksToJsonTicks(System.Int64)">
            <summary>
            Converts the number of ticks from the .NET DateTime or DateTimeOffset structure to the ticks use in the JSON date time format.
            </summary>
            <param name="ticks">The ticks from the .NET DateTime of DateTimeOffset structure.</param>
            <returns>The ticks to use in the JSON date time format.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.GetUniversalDate(System.DateTime)">
            <summary>
            Converts a given date time to its universal date time equivalent.
            </summary>
            <param name="value">The date time to convert to UTC</param>
            <returns>universal date time equivalent of the value.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.Json.JsonValueUtils.CreateSpecialCharToEscapedStringMap">
            <summary>
            Creates the special character to escaped string map.
            </summary>
            <returns>The map of special characters to the corresponding escaped strings.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataComplexValue">
            <summary>
            OData representation of a complex value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataComplexValue.Properties">
            <summary>Gets or sets the properties and values of the complex value.</summary>
            <returns>The properties and values of the complex value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataComplexValue.TypeName">
            <summary>Gets or sets the type of the complex value.</summary>
            <returns>The type of the complex value.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataFeed">
            <summary>
            Describes a collection of entities.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeed.nextPageLink">
            <summary>
            URI representing the next page link.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeed.deltaLink">
            <summary>
            URI representing the delta link.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataFeed.serializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataFeed"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeed.Count">
            <summary>Gets or sets the number of items in the feed.</summary>
            <returns>The number of items in the feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeed.Id">
            <summary>Gets or sets the URI that identifies the entity set represented by the feed.</summary>
            <returns>The URI that identifies the entity set represented by the feed.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeed.NextPageLink">
            <summary>Gets or sets the URI representing the next page link.</summary>
            <returns>The URI representing the next page link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeed.DeltaLink">
            <summary>
            URI representing the delta link.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeed.InstanceAnnotations">
            <summary>
            Collection of custom instance annotations.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataFeed.SerializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataFeed"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataNavigationLink">
            <summary>
            Represents a single link.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataNavigationLink.metadataBuilder">
            <summary>the metadata builder for this navigation link.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataNavigationLink.url">
            <summary>URI representing the Unified Resource Locator (Url) of the link as provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataNavigationLink.hasNavigationLink">
            <summary>true if the navigation link has been set by the user or seen on the wire or computed by the metadata builder, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataNavigationLink.associationLinkUrl">
            <summary>The association link URL for this navigation link as provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataNavigationLink.hasAssociationUrl">
            <summary>true if the association link has been set by the user or seen on the wire or computed by the metadata builder, false otherwise.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataNavigationLink.SetMetadataBuilder(Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder)">
            <summary>
            Sets the metadata builder for this navigation link.
            </summary>
            <param name="builder">The metadata builder used to compute values from model annotations.</param>
        </member>
        <member name="P:Microsoft.Data.OData.ODataNavigationLink.IsCollection">
            <summary>Gets or sets a value that indicates whether the navigation link represents a collection or an entry.</summary>
            <returns>true if the navigation link represents a collection; false if the navigation represents an entry.</returns>
            <remarks>This property is required to have a value for ATOM payloads and is optional for JSON payloads.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataNavigationLink.Name">
            <summary>Gets or sets the name of the link.</summary>
            <returns>The name of the link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataNavigationLink.Url">
            <summary>Gets or sets the URI representing the Unified Resource Locator (URL) of the link.</summary>
            <returns>The URI representing the Unified Resource Locator (URL) of the link.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataNavigationLink.AssociationLinkUrl">
            <summary>The association link URL for this navigation link. </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataStreamReferenceValue">
            <summary>
            Represents a media resource.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataStreamReferenceValue.metadataBuilder">
            <summary>the metadata builder for this OData entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataStreamReferenceValue.edmPropertyName">
            <summary>The name of the named stream this value belongs to; null for the default media resource.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataStreamReferenceValue.editLink">
            <summary>Edit link for media resource.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataStreamReferenceValue.computedEditLink">
            <summary>Edit link for media resource.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataStreamReferenceValue.hasNonComputedEditLink">
            <summary>true if an edit link was provided by the user or seen on the wire, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataStreamReferenceValue.readLink">
            <summary>Read link for media resource.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataStreamReferenceValue.computedReadLink">
            <summary>Read link for media resource.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataStreamReferenceValue.hasNonComputedReadLink">
            <summary>true if a read link was provided by the user or seen on the wire, false otherwise.</summary>
        </member>
        <member name="M:Microsoft.Data.OData.ODataStreamReferenceValue.SetMetadataBuilder(Microsoft.Data.OData.Evaluation.ODataEntityMetadataBuilder,System.String)">
            <summary>
            Sets the metadata builder for this stream reference value.
            </summary>
            <param name="builder">The metadata builder used to compute values from model annotations.</param>
            <param name="propertyName">The property name for the named stream; null for the default media resource.</param>
        </member>
        <member name="M:Microsoft.Data.OData.ODataStreamReferenceValue.GetMetadataBuilder">
            <summary>
            Gets the metadata builder for this stream reference value.
            </summary>
            <returns>The metadata builder used to compute links.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataStreamReferenceValue.EditLink">
            <summary>Gets or sets the edit link for media resource.</summary>
            <returns>The edit link for media resource.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataStreamReferenceValue.ReadLink">
            <summary>Gets or sets the read link for media resource.</summary>
            <returns>The read link for media resource.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataStreamReferenceValue.ContentType">
            <summary>Gets or sets the content media type.</summary>
            <returns>The content media type.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataStreamReferenceValue.ETag">
            <summary>Gets or sets the media resource ETag.</summary>
            <returns>The media resource ETag.</returns>
        </member>
        <member name="T:Microsoft.Data.OData.ODataProperty">
            <summary>
            Represents a single property of an entry.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataProperty.odataValue">
            <summary>
            The value of this property, accessed and set by both <seealso cref="P:Microsoft.Data.OData.ODataProperty.Value"/> and <seealso cref="P:Microsoft.Data.OData.ODataProperty.ODataValue"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataProperty.serializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataProperty"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataProperty.Name">
            <summary>Gets or sets the property name.</summary>
            <returns>The property name.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataProperty.Value">
            <summary>Gets or sets the property value.</summary>
            <returns>The property value.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataProperty.ODataValue">
            <summary>
            Property value, represented as an ODataValue.
            </summary>
            <remarks>
            This value is the same as <see cref="P:Microsoft.Data.OData.ODataProperty.Value"/>, except that primitive types are wrapped 
            in an instance of ODataPrimitiveValue, and null values are represented by an instance of ODataNullValue.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataProperty.SerializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataProperty"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.ODataEntry">
            <summary>
            Represents a single entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.metadataBuilder">
            <summary>the metadata builder for this OData entry.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.etag">
            <summary>The entry ETag, as provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.hasNonComputedETag">
            <summary>true if an etag was provided by the user or seen on the wire, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.id">
            <summary>The Entry ID, as provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.hasNonComputedId">
            <summary>true if an id was provided by the user or seen on the wire, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.editLink">
            <summary>Link used to edit the entry, as provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.hasNonComputedEditLink">
            <summary>true if an edit link was provided by the user or seen on the wire, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.readLink">
            <summary>A link that can be used to read the entry, as provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.hasNonComputedReadLink">
            <summary>true if a read link was provided by the user or seen on the wire, false otherwise.</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.mediaResource">
            <summary>The default media resource of the media link entry, as provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.properties">
            <summary>The entry properties provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.actions">
            <summary>The entry actions provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.functions">
            <summary>The entry functions provided by the user or seen on the wire (never computed).</summary>
        </member>
        <member name="F:Microsoft.Data.OData.ODataEntry.serializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataEntry"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.ETag">
            <summary>Gets or sets the entry ETag.</summary>
            <returns>The entry ETag.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.Id">
            <summary>Gets or sets the Entry identifier.</summary>
            <returns>The Entry identifier.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.EditLink">
            <summary>Gets or sets the link used to edit the entry.</summary>
            <returns>The link used to edit the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.ReadLink">
            <summary>Gets or sets a link that can be used to read the entry.</summary>
            <returns>The link that can be used to read the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.MediaResource">
            <summary>Gets or sets the default media resource of the media link entry.</summary>
            <returns>The default media resource of the media link entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.AssociationLinks">
            <summary>Gets or sets the association links.</summary>
            <returns>The association links.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.Actions">
            <summary>Gets or sets the entity actions.</summary>
            <returns>The entity actions.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.Functions">
            <summary>Gets or sets the entity functions.</summary>
            <returns>The entity functions.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.Properties">
            <summary>Gets or sets the entry properties.</summary>
            <returns>The entry properties.</returns>
            <remarks>
            Non-property content goes to annotations.
            </remarks>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.TypeName">
            <summary>Gets or sets the type name of the entry.</summary>
            <returns>The type name of the entry.</returns>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.InstanceAnnotations">
            <summary>
            Collection of custom instance annotations.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.MetadataBuilder">
            <summary>
            The metadata builder for this OData entry.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.NonComputedId">
            <summary>
            Returns the entry's Id property that has been set directly, and was not computed using the metadata builder.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.HasNonComputedId">
            <summary>
            true if an id was provided by the user or seen on the wire, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.NonComputedEditLink">
            <summary>
            Returns the entry's EditLink property that has been set directly, and was not computed using the metadata builder.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.HasNonComputedEditLink">
            <summary>
            true if an edit link was provided by the user or seen on the wire, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.NonComputedReadLink">
            <summary>
            Returns the entry's ReadLink property that has been set directly, and was not computed using the metadata builder.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.HasNonComputedReadLink">
            <summary>
            true if a read link was provided by the user or seen on the wire, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.NonComputedETag">
            <summary>
            Returns the entry's ETag property that has been set directly, and was not computed using the metadata builder.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.HasNonComputedETag">
            <summary>
            true if an etag was provided by the user or seen on the wire, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.NonComputedMediaResource">
            <summary>Returns the default media resource of the media link entry that has been set directly and was not computed using the metadata builder.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.NonComputedProperties">
            <summary>Returns the entity properties that has been set directly and was not computed using the metadata builder.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.NonComputedActions">
            <summary>Returns the entity actions that has been set directly and was not computed using the metadata builder.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.NonComputedFunctions">
            <summary>Returns the entity functions that has been set directly and was not computed using the metadata builder.</summary>
        </member>
        <member name="P:Microsoft.Data.OData.ODataEntry.SerializationInfo">
            <summary>
            Provides additional serialization information to the <see cref="T:Microsoft.Data.OData.ODataWriter"/> for this <see cref="T:Microsoft.Data.OData.ODataEntry"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.TaskUtils">
            <summary>
            Class with utility methods for working with and implementing Task based APIs
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.TaskUtils.completedTask">
            <summary>
            Already completed task.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.GetCompletedTask``1(``0)">
            <summary>
            Returns an already completed task instance with the specified result.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="value">The value of the result.</param>
            <returns>An already completed task with the specified result.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.GetFaultedTask(System.Exception)">
            <summary>
            Returns an already completed task instance with the specified error.
            </summary>
            <param name="exception">The exception of the faulted result.</param>
            <returns>An already completed task with the specified exception.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.GetFaultedTask``1(System.Exception)">
            <summary>
            Returns an already completed task instance with the specified error.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="exception">The exception of the faulted result.</param>
            <returns>An already completed task with the specified exception.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.GetTaskForSynchronousOperation(System.Action)">
            <summary>
            Returns an already completed task for the specified synchronous operation.
            </summary>
            <param name="synchronousOperation">The synchronous operation to perform.</param>
            <returns>An already completed task. If the <paramref name="synchronousOperation"/> succeeded this will be a successfully completed task,
            otherwise it will be a faulted task holding the exception thrown.</returns>
            <remarks>The advantage of this method over CompletedTask property is that if the <paramref name="synchronousOperation"/> fails
            this method returns a faulted task, instead of throwing exception.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.GetTaskForSynchronousOperation``1(System.Func{``0})">
            <summary>
            Returns an already completed task for the specified synchronous operation.
            </summary>
            <typeparam name="T">The type of the result returned by the operation. This MUST NOT be a Task type.</typeparam>
            <param name="synchronousOperation">The synchronous operation to perform.</param>
            <returns>An already completed task. If the <paramref name="synchronousOperation"/> succeeded this will be a successfully completed task,
            otherwise it will be a faulted task holding the exception thrown.</returns>
            <remarks>The advantage of this method over GetCompletedTask property is that if the <paramref name="synchronousOperation"/> fails
            this method returns a faulted task, instead of throwing exception.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.GetTaskForSynchronousOperationReturningTask(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Returns an already completed task for the specified synchronous operation which returns a task.
            </summary>
            <param name="synchronousOperation">The synchronous operation to perform.</param>
            <returns>The task returned by the <paramref name="synchronousOperation"/> or a faulted task if the operation failed.</returns>
            <remarks>The advantage of this method over direct call is that if the <paramref name="synchronousOperation"/> fails
            this method returns a faulted task, instead of throwing exception.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.GetTaskForSynchronousOperationReturningTask``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns an already completed task for the specified synchronous operation which returns a task.
            </summary>
            <typeparam name="TResult">The type of the task result.</typeparam>
            <param name="synchronousOperation">The synchronous operation to perform.</param>
            <returns>The task returned by the <paramref name="synchronousOperation"/> or a faulted task if the operation failed.</returns>
            <remarks>The advantage of this method over direct call is that if the <paramref name="synchronousOperation"/> fails
            this method returns a faulted task, instead of throwing exception.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWith(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task succeeded.
            </summary>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> succeeded.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWith``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task succeeded.
            </summary>
            <typeparam name="TFollowupTaskResult">The result type of the operation. This MUST NOT be a Task or a type derived from Task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> succeeded.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            This method doesn't support operations which return another Task instance, to use that call FollowOnSuccessWithTask instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWith``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task succeeded.
            </summary>
            <typeparam name="TAntecedentTaskResult">The result type of the antecedent task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> succeeded.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWith``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},``1})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task succeeded.
            </summary>
            <typeparam name="TAntecedentTaskResult">The result type of the antecedent task.</typeparam>
            <typeparam name="TFollowupTaskResult">The result type of the operation. This MUST NOT be a Task or a type derived from Task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> succeeded.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            This method doesn't support operations which return another Task instance, to use that call FollowOnSuccessWithTask instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWithTask(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task succeeded.
            </summary>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> succeeded.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            This method handles operation which returns another task. The method will unwrap and return a task which finishes when both
            the antecedent task, the operation as well as the task returned by that operation finished.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWithTask``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task succeeded.
            </summary>
            <typeparam name="TFollowupTaskResult">The result type of the operation. This MUST NOT be a Task or a type derived from Task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> succeeded.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            This method handles operation which returns another task. The method will unwrap and return a task which finishes when both
            the antecedent task, the operation as well as the task returned by that operation finished.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWithTask``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task succeeded.
            </summary>
            <typeparam name="TAntecedentTaskResult">The result type of the antecedent task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> succeeded.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            This method handles operation which returns another task. The method will unwrap and return a task which finishes when both
            the antecedent task, the operation as well as the task returned by that operation finished.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWithTask``2(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task succeeded.
            </summary>
            <typeparam name="TAntecedentTaskResult">The result type of the antecedent task.</typeparam>
            <typeparam name="TFollowupTaskResult">The result type of the operation. This MUST NOT be a Task or a type derived from Task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> succeeded.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            This method handles operation which returns another task. The method will unwrap and return a task which finishes when both
            the antecedent task, the operation as well as the task returned by that operation finished.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnFaultWith(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task faulted.
            </summary>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> faulted.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnFaultWith``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will only be invoked if the antecendent task faulted.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute if the <paramref name="antecedentTask"/> faulted.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnFaultAndCatchExceptionWith``2(System.Threading.Tasks.Task{``0},System.Func{``1,``0})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="catchBlock"/>
            which will only be invoked if the antecendent task faulted and it failed with exception of type TExceptionType.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <typeparam name="TExceptionType">The exception type to catch.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="catchBlock">The operation to execute if the <paramref name="antecedentTask"/> faulted with an exception of type TExceptionType.</param>
            <returns>A new task which represents the antecedent task followed by a conditional invoke to the operation.</returns>
            <remarks>This method unlike ContinueWith will return a task which will fail if the antecedent task fails and the exception is not of the TExceptionType,
            if the exception type matches, the task will return the value returned by the catchBlock.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowAlwaysWith(System.Threading.Tasks.Task,System.Action{System.Threading.Tasks.Task})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will get called no matter what the result of the antecedent task was.
            </summary>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute after the <paramref name="antecedentTask"/> finished.</param>
            <returns>A new task which represents the antecedent task followed by an invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            Note that the operation may not return any value, since the original result of the antecedent task will be used always.
            Also if the operation fails, the resulting task fails. If both tasks fail, the antecedent task failure is reported only.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowAlwaysWith``1(System.Threading.Tasks.Task{``0},System.Action{System.Threading.Tasks.Task{``0}})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will get called no matter what the result of the antecedent task was.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="operation">The operation to execute after the <paramref name="antecedentTask"/> finished.</param>
            <returns>A new task which represents the antecedent task followed by an invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            Note that the operation may not return any value, since the original result of the antecedent task will be used always.
            Also if the operation fails, the resulting task fails. If both tasks fail, the antecedent task failure is reported only.</remarks>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.IgnoreExceptions(System.Threading.Tasks.Task)">
            <summary>Suppresses default exception handling of a Task that would otherwise reraise the exception on the finalizer thread.</summary>
            <param name="task">The Task to be monitored.</param>
            <returns>The original Task.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.GetTargetScheduler(System.Threading.Tasks.TaskFactory)">
            <summary>Gets the TaskScheduler instance that should be used to schedule tasks.</summary>
            <param name="factory">Factory to get the scheduler for.</param>
            <returns>The scheduler for the specified factory.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.Iterate(System.Threading.Tasks.TaskFactory,System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>Asynchronously iterates through an enumerable of tasks.</summary>
            <param name="factory">The target factory.</param>
            <param name="source">The enumerable containing the tasks to be iterated through.</param>
            <returns>A Task that represents the complete asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWithContinuation``1(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCompletionSource{``0},System.Func{System.Threading.Tasks.Task,``0})">
            <summary>
            The func used as the continuation (the func in the ContinueWith) for FollowOnSuccess implementations.
            </summary>
            <typeparam name="TResult">The type of the result of the operation to follow up with.</typeparam>
            <param name="antecedentTask">The task which just finished.</param>
            <param name="taskCompletionSource">The task completion source to apply the result to.</param>
            <param name="operation">The func to execute as the follow up action in case of success of the <paramref name="antecedentTask"/>.</param>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnSuccessWithImplementation``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0})">
            <summary>
            The implementation helper for FollowOnSuccess methods which don't allow result type of Task.
            </summary>
            <typeparam name="TResult">The type of the result of the followup operation, this MUST NOT be a Task type.</typeparam>
            <param name="antecedentTask">The task to follow with operation.</param>
            <param name="operation">The operation to follow up with.</param>
            <returns>A new Task which wraps both the <paramref name="antecedentTask"/> and the conditional execution of <paramref name="operation"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnFaultWithImplementation``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0},System.Action{System.Threading.Tasks.Task})">
            <summary>
            The implementation helper for FollowOnFault methods.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="antecedentTask">The task to follow with operation in case of fault.</param>
            <param name="getTaskResult">Func which gets a task result value.</param>
            <param name="operation">The operation to follow up with.</param>
            <returns>A new Task which wraps both the <paramref name="antecedentTask"/> and the conditional execution of <paramref name="operation"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowOnFaultAndCatchExceptionWithImplementation``2(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0},System.Func{``1,``0})">
            <summary>
            The implementation helper for FollowOnFaultAndCatchException methods.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <typeparam name="TExceptionType">The type of the exception to catch.</typeparam>
            <param name="antecedentTask">The task to follow with operation in case of fault.</param>
            <param name="getTaskResult">Func which gets a task result value.</param>
            <param name="catchBlock">The operation to follow up with.</param>
            <returns>A new Task which wraps both the <paramref name="antecedentTask"/> and the conditional execution of <paramref name="catchBlock"/>.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.TaskUtils.FollowAlwaysWithImplementation``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task,``0},System.Action{System.Threading.Tasks.Task})">
            <summary>
            Returns a new task which will consist of the <paramref name="antecedentTask"/> followed by a call to the <paramref name="operation"/>
            which will get called no matter what the result of the antecedent task was.
            </summary>
            <typeparam name="TResult">The type of the result of the task.</typeparam>
            <param name="antecedentTask">The task to "append" the operation to.</param>
            <param name="getTaskResult">Function which gets a task result.</param>
            <param name="operation">The operation to execute after the <paramref name="antecedentTask"/> finished.</param>
            <returns>A new task which represents the antecedent task followed by an invoke to the operation.</returns>
            <remarks>
            This method unlike ContinueWith will return a task which will fail if the antecedent task fails, thus it propagates failures.
            Note that the operation may not return any value, since the original result of the antecedent task will be used always.
            Also if the operation fails, the resulting task fails. If both tasks fail, the antecedent task failure is reported only.</remarks>
        </member>
        <member name="P:Microsoft.Data.OData.TaskUtils.CompletedTask">
            <summary>
            Returns already completed task instance.
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.PlatformHelper">
            <summary>
            Helper methods that provide a common API surface on all platforms.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.PlatformHelper.EmptyTypes">
            <summary>
            Use this instead of Type.EmptyTypes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.PlatformHelper.UriSchemeHttp">
            <summary>
            Use this instead of Uri.UriSchemeHttp.
            </summary>
        </member>
        <member name="F:Microsoft.Data.OData.PlatformHelper.UriSchemeHttps">
            <summary>
            Use this instead of Uri.UriSchemeHttps.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetAssembly(System.Type)">
            <summary>
            Replacement for Type.Assembly.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsValueType(System.Type)">
            <summary>
            Replacement for Type.IsValueType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsGenericParameter(System.Type)">
            <summary>
            Replacement for Type.IsGenericParameter.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsAbstract(System.Type)">
            <summary>
            Replacement for Type.IsAbstract.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsGenericType(System.Type)">
            <summary>
            Replacement for Type.IsGenericType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsGenericTypeDefinition(System.Type)">
            <summary>
            Replacement for Type.IsGenericTypeDefinition.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsVisible(System.Type)">
            <summary>
            Replacement for Type.IsVisible.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsInterface(System.Type)">
            <summary>
            Replacement for Type.IsInterface.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsClass(System.Type)">
            <summary>
            Replacement for Type.IsClass.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsEnum(System.Type)">
            <summary>
            Replacement for Type.IsEnum.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetBaseType(System.Type)">
            <summary>
            Replacement for Type.BaseType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.ContainsGenericParameters(System.Type)">
            <summary>
            Replacement for Type.ContainsGenericParameters.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.AsReadOnly``1(``0[])">
            <summary>
            Replacement for Array.AsReadOnly(T[]).
            </summary>
            <typeparam name="T">Type of items in the array.</typeparam>
            <param name="array">Array to use to create the ReadOnlyCollection.</param>
            <returns>ReadOnlyCollection containing the specified array items.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.ConvertStringToDateTime(System.String)">
            <summary>
            Converts a string to a DateTime.
            </summary>
            <param name="text">String to be converted.</param>
            <returns>See documentation for method being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.ConvertStringToDateTimeOffset(System.String)">
            <summary>
            Converts a string to a DateTimeOffset.
            </summary>
            <param name="text">String to be converted.</param>
            <returns>See documentation for method being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.AddSecondsPaddingIfMissing(System.String)">
            <summary>
            Adds the seconds padding as zeros to the date time string if seconds part is missing.
            </summary>
            <param name="text">String that needs seconds padding</param>
            <returns>DateTime string after adding seconds padding</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.ConvertDateTimeToStringInternal(System.DateTime)">
            <summary>
            Converts the DateTime to a string, internal method.
            </summary>
            <param name="dateTime">DateTime to convert to String.</param>
            <returns>Converted String.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.ConvertDateTimeToString(System.DateTime)">
            <summary>
            Converts a DateTime to a string.
            </summary>
            <param name="dateTime">DateTime to be converted.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetTypeOrThrow(System.String)">
            <summary>
            Gets the specified type.
            </summary>
            <param name="typeName">Name of the type to get.</param>
            <exception cref="T:System.TypeLoadException">Throws if the type could not be found.</exception>
            <returns>Type instance that represents the specified type name.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetTypeCode(System.Type)">
            <summary>
            Gets the TypeCode for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>TypeCode representing the specified type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetUnicodeCategory(System.Char)">
            <summary>
            Gets the Unicode Category of the specified character.
            </summary>
            <param name="c">Character to get category of.</param>
            <returns>Category of the character.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsProperty(System.Reflection.MemberInfo)">
            <summary>
            Replacement for usage of MemberInfo.MemberType property.
            </summary>
            <param name="member">MemberInfo on which to access this method.</param>
            <returns>True if the specified member is a property, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsPrimitive(System.Type)">
            <summary>
            Replacement for usage of Type.IsPrimitive property.
            </summary>
            <param name="type">Type on which to access this method.</param>
            <returns>True if the specified type is primitive, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsSealed(System.Type)">
            <summary>
            Replacement for usage of Type.IsSealed property.
            </summary>
            <param name="type">Type on which to access this method.</param>
            <returns>True if the specified type is sealed, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.IsMethod(System.Reflection.MemberInfo)">
            <summary>
            Replacement for usage of MemberInfo.MemberType property.
            </summary>
            <param name="member">MemberInfo on which to access this method.</param>
            <returns>True if the specified member is a method, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.AreMembersEqual(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Compares two methodInfos and returns true if they represent the same method.
            Need this for Windows Phone as the method Infos of the same method are not always instance equivalent.
            </summary>
            <param name="member1">MemberInfo to compare.</param>
            <param name="member2">MemberInfo to compare.</param>
            <returns>True if the specified member is a method, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetPublicProperties(System.Type,System.Boolean)">
            <summary>
            Gets public properties for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="instanceOnly">True if method should return only instance properties, false if it should return both instance and static properties.</param>
            <returns>Enumerable of public properties for the type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetPublicProperties(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets public properties for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="instanceOnly">True if method should return only instance properties, false if it should return both instance and static properties.</param>
            <param name="declaredOnly">True if method should return only properties that are declared on the type, false if it should return properties declared on the type as well as those inherited from any base types.</param>
            <returns>Enumerable of public properties for the type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetInstanceConstructors(System.Type,System.Boolean)">
            <summary>
            Gets instance constructors for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="isPublic">True if method should return only public constructors, false if it should return only non-public constructors.</param>
            <returns>Enumerable of instance constructors for the specified type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetInstanceConstructor(System.Type,System.Boolean,System.Type[])">
            <summary>
            Gets a instance constructor for the type that takes the specified argument types.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="isPublic">True if method should search only public constructors, false if it should search only non-public constructors.</param>
            <param name="argTypes">Array of argument types for the constructor.</param>
            <returns>ConstructorInfo for the constructor with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.TryGetMethod(System.Type,System.String,System.Type[],System.Reflection.MethodInfo@)">
            <summary>
            Tries to the get method from the type, returns null if not found.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>Returns True if found.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetMethod(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a method on the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="name">Name of the method on the type.</param>
            <param name="isPublic">True if method should search only public methods, false if it should search only non-public methods.</param>
            <param name="isStatic">True if method should search only static methods, false if it should search only instance methods.</param>
            <returns>MethodInfo for the method with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetMethod(System.Type,System.String,System.Type[],System.Boolean,System.Boolean)">
            <summary>
            Gets a method on the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="name">Name of the method on the type.</param>
            <param name="types">Argument types for the method.</param>
            <param name="isPublic">True if method should search only public methods, false if it should search only non-public methods.</param>
            <param name="isStatic">True if method should search only static methods, false if it should search only instance methods.</param>
            <returns>MethodInfo for the method with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetPublicStaticMethods(System.Type)">
            <summary>
            Gets all public static methods for a type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>Enumerable of all public static methods for the specified type.</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.GetNonPublicNestedTypes(System.Type)">
            <summary>
            Replacement for Type.GetNestedTypes(BindingFlags.NonPublic)
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>All types nested in the current type</returns>
        </member>
        <member name="M:Microsoft.Data.OData.PlatformHelper.CreateCompiled(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Creates a Compiled Regex expression
            </summary>
            <param name="pattern">Pattern to match.</param>
            <param name="options">Options to use.</param>
            <returns>Regex expression to match supplied patter</returns>
            <remarks>Is marked as compiled option only in platforms otherwise RegexOption.None is used</remarks>
        </member>
        <member name="T:AssemblyRef">
            <summary>
            Sets public key string for friend assemblies.
            </summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKey">
            <summary>ProductPublicKey is an official MS supported public key for external releases.</summary>
        </member>
        <member name="F:AssemblyRef.TestPublicKey">
            <summary>TestPublicKey is an unsupported strong key for testing and internal use only</summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKeyToken">
            <summary>Dont know what this is</summary>
        </member>
        <member name="F:AssemblyRef.OfficialSilverLightPublicKeyToken">
            <summary>Used for comparison with external assemblies for silverlight like Microsoft.VisualBasic.</summary>
        </member>
        <member name="F:AssemblyRef.OfficialDesktopPublicKeyToken">
            <summary>Used for comparison with external assemblies for desktop like Microsoft.VisualBasic.</summary>
        </member>
        <member name="T:Microsoft.Data.OData.TextRes">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = TextRes.GetString(TextRes.MyIdenfitier);
             </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataOutputContext_UnsupportedPayloadKindForFormat(System.Object,System.Object)">
            <summary>
            A string like "The format '{0}' does not support writing a payload of kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataOutputContext_CustomInstanceAnnotationsNotSupportedForFormat(System.Object)">
            <summary>
            A string like "The format '{0}' does not support writing custom instance annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataInputContext_UnsupportedPayloadKindForFormat(System.Object,System.Object)">
            <summary>
            A string like "The format '{0}' does not support reading a payload of kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightSerializer_RelativeUriUsedWithoutMetadataDocumentUriOrMetadata(System.Object)">
            <summary>
            A string like "A relative URI value '{0}' was specified in the data to write, but the metadata document URI or the metadata for the item to be written was not specified for the writer. The metadata document URI and the metadata for the item to be written must be provided to the writer when using relative URI values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriter_RelativeUriUsedWithoutBaseUriSpecified(System.Object)">
            <summary>
            A string like "A relative URI value '{0}' was specified in the data to write, but a base URI was not specified for the writer. A base URI must be set when using relative URI values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriter_StreamPropertiesMustBePropertiesOfODataEntry(System.Object)">
            <summary>
            A string like "The property '{0}' is a stream property, but it is not a property of an ODataEntry instance. In OData, stream properties must be properties of ODataEntry instances."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_InvalidStateTransition(System.Object,System.Object)">
            <summary>
            A string like "An invalid state transition has been detected in an OData writer. Cannot transition from state '{0}' to state '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_InvalidTransitionFromStart(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. The only valid actions in state '{0}' are to write an entry or a feed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_InvalidTransitionFromEntry(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. The only valid action in state '{0}' is to write a navigation link."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_InvalidTransitionFromNullEntry(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. You must first call ODataWriter.WriteEnd to finish writing a null ODataEntry."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_InvalidTransitionFromFeed(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. The only valid action in state '{0}' is to write an entry."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_InvalidTransitionFromExpandedLink(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. The only valid actions in state '{0}' are to write an entry or a feed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_InvalidTransitionFromCompleted(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. Nothing further can be written once the writer has completed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_InvalidTransitionFromError(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. Nothing can be written once the writer entered the error state."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataWriterCore_WriteEndCalledInInvalidState(System.Object)">
            <summary>
            A string like "ODataWriter.WriteEnd was called in an invalid state ('{0}'); WriteEnd is only supported in states 'Entry', 'Feed', 'NavigationLink', and 'NavigationLinkWithContent'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.DuplicatePropertyNamesChecker_DuplicatePropertyNamesNotAllowed(System.Object)">
            <summary>
            A string like "Multiple properties with the name '{0}' were detected in an entry or a complex value. In OData, duplicate property names are not allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.DuplicatePropertyNamesChecker_MultipleLinksForSingleton(System.Object)">
            <summary>
            A string like "Multiple navigation links with the same name '{0}' for a singleton navigation property were detected on an entry. In OData, a singleton navigation property can have only one navigation link."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.DuplicatePropertyNamesChecker_DuplicateAnnotationNotAllowed(System.Object)">
            <summary>
            A string like "Multiple annotations with the name '{0}' were detected. In OData, duplicate annotations are not allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.DuplicatePropertyNamesChecker_DuplicateAnnotationForPropertyNotAllowed(System.Object,System.Object)">
            <summary>
            A string like "Multiple annotations with the name '{0}' were detected for the property with name '{1}'. In OData, duplicate annotations are not allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.DuplicatePropertyNamesChecker_DuplicateAnnotationForInstanceAnnotationNotAllowed(System.Object,System.Object)">
            <summary>
            A string like "Multiple annotations with the name '{0}' were detected for the instance annotation with name '{1}'. In OData, duplicate annotations are not allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.DuplicatePropertyNamesChecker_PropertyAnnotationAfterTheProperty(System.Object,System.Object)">
            <summary>
            A string like "An annotation with name '{0}' for property '{1}' was detected after the property, or after an annotation for another property. In OData, annotations for a property must be in a single group and must appear before the property they annotate."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.AtomValueUtils_CannotConvertValueToAtomPrimitive(System.Object)">
            <summary>
            A string like "Cannot convert a value of type '{0}' to the string representation of an Atom primitive value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonWriter_UnsupportedValueType(System.Object)">
            <summary>
            A string like "The value of type '{0}' is not supported and cannot be converted to a JSON representation."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_MaxProtocolVersionExceeded(System.Object,System.Object)">
            <summary>
            A string like "The version '{0}' specified by the payload is higher than the maximum protocol version '{1}' specified by the ODataMessageReaderSettings.MaxProtocolVersion property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_PropertyNotSupportedForODataVersionGreaterThanX(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' is not supported when ODataVersion is greater than '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_ParameterPayloadNotSupported(System.Object)">
            <summary>
            A string like "Parameters in the payload are only supported in version 3.0 of the OData protocol and higher versions. They are not supported in version {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_AssociationLinksNotSupported(System.Object)">
            <summary>
            A string like "Association links are only supported in version 3.0 of the OData protocol and higher versions. They are not supported in version {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_InlineCountNotSupported(System.Object)">
            <summary>
            A string like "The inline count feature is only supported in version 2.0 of the OData protocol and higher versions. It is not supported in version {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_NextLinkNotSupported(System.Object)">
            <summary>
            A string like "The next link feature is only supported in version 2.0 of the OData protocol and higher versions. It is not supported in version {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_DeltaLinkNotSupported(System.Object)">
            <summary>
            A string like "The delta link feature is only supported in version 3.0 of the OData protocol and higher versions. It is not supported in version {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_CollectionPropertiesNotSupported(System.Object,System.Object)">
            <summary>
            A string like "A collection property '{0}' was detected; Collection properties are only supported in version 3.0 of the OData protocol and higher versions. They are not supported in version {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_CollectionNotSupported(System.Object)">
            <summary>
            A string like "Collection types are only supported in version 3.0 of the OData protocol and higher versions. They are not supported in version {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_StreamPropertiesNotSupported(System.Object)">
            <summary>
            A string like "Stream properties are only supported in version 3.0 of the OData protocol and higher versions. They are not supported in version {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_EpmVersionNotSupported(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The entity property mapping specified on type '{0}' is only supported in version {1} of the OData protocol and higher versions. It is not supported in version {2}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVersionChecker_GeographyAndGeometryNotSupported(System.Object)">
            <summary>
            A string like "Geography and Geometry types are only supported in version 3.0 of the OData protocol and higher versions. They are not supported in version {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_LinkHrefsMustMatch(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' value for the href of a link, which was either specified or computed, does not match the '{1}' value specified in the metadata of the link. When an href is specified in metadata, the href values must match."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_LinkTitlesMustMatch(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' value for the title of a link, which was either specified or computed, does not match the '{1}' value specified in the metadata of the link. When a title is specified in metadata, the titles must match."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_LinkRelationsMustMatch(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' value for the relation of a link, which was either specified or computed, does not match the '{1}' value specified in the metadata of the link. When a relation is specified in metadata, the relations must match."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_LinkMediaTypesMustMatch(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' value for the media type of a link, which was either specified or computed, does not match the '{1}' value specified in the metadata of the link. If a media type is specified in metadata, the media types must match."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_InvalidAnnotationValue(System.Object,System.Object)">
            <summary>
            A string like "An annotation of type string was expected for the '{{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:{0}' annotation, but an annotation of type '{1}' was found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_CategoryTermsMustMatch(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' value for the term of a category, which was either specified or computed, does not match the value '{1}' specified in the ATOM metadata of the category. When a term is specified in Atom metadata, the terms must match."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_CategorySchemesMustMatch(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' value for the scheme of a category, which was either specified or computed, does not match the value '{1}' specified in the ATOM metadata of the category. When a scheme is specified in Atom metadata, the schemes must match."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomMetadataEpmMerge_TextKindConflict(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The text kind '{1}' specified by the atom metadata property '{0}' conflicts with the text kind '{2}' mapped to this property by using entity property mapping. When both the metadata and the entity property mapping specify text kinds, those text kinds must be equal."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomMetadataEpmMerge_TextValueConflict(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The value '{1}' specified by the atom metadata property '{0}' conflicts with the value '{2}' mapped to this property by using entity property mapping. When both the metadata and the entity property mapping specify a value, these values must be equal."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_InvalidContentTypeForWritingRawValue(System.Object)">
            <summary>
            A string like "The content type '{0}' is not supported when writing raw values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_CannotSetHeadersWithInvalidPayloadKind(System.Object)">
            <summary>
            A string like "Cannot set message headers for the invalid payload kind '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_IncompatiblePayloadKinds(System.Object,System.Object)">
            <summary>
            A string like "The payload kind '{0}' used in the last call to ODataUtils.SetHeadersForPayload is incompatible with the payload being written, which is of kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_CannotWriteStreamPropertyAsTopLevelProperty(System.Object)">
            <summary>
            A string like "The stream property '{0}' cannot be written to the payload as a top level property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_InvalidPropertyOwningType(System.Object,System.Object)">
            <summary>
            A string like "The ODataMessageWriter.WriteProperty method was called with an owning type '{0}' of kind '{1}'. The owning type of a property can only be of kind Complex or Entity."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_InvalidPropertyProducingFunctionImport(System.Object)">
            <summary>
            A string like "The ODataMessageWriter.WriteProperty method was called with a producing function import with return type '{0}'. The producing function import for property payloads must return type which is either a primitive, complex, primitive collection of complex collection type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_EntityReferenceLinksWithSingletonNavPropNotAllowed(System.Object)">
            <summary>
            A string like "The navigation property named '{0}' given to ODataMessageWriter.WriteEntityReferenceLinks represents a singleton property. When writing multiple entity reference links, the navigation property must be a collection."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_JsonPaddingOnInvalidContentType(System.Object)">
            <summary>
            A string like "A JsonPaddingFunctionName was specified, but the content-type '{0}' is not supported with Json Padding."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageWriter_NonCollectionType(System.Object)">
            <summary>
            A string like "The type '{0}' specified as the collection's item type is not primitive or complex. An ODataCollectionWriter can only write collections of primitive or complex values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionWriter_CannotCreateCollectionWriterForFormat(System.Object)">
            <summary>
            A string like "Cannot create an ODataCollectionWriter for ODataFormat.{0}. Only ODataFormat.PlainXml and ODataFormat.Json are supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_InvalidTransitionFromStart(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. The only valid actions in state '{0}' are to write the collection or to write nothing at all."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_InvalidTransitionFromCollection(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. The only valid actions in state '{0}' are to write an item or to write the end of the collection."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_InvalidTransitionFromItem(System.Object,System.Object)">
            <summary>
            A string like "Cannot transition from state '{0}' to state '{1}'. The only valid actions in state '{0}' are to write an item or the end of the collection."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_WriteEndCalledInInvalidState(System.Object)">
            <summary>
            A string like "ODataCollectionWriter.WriteEnd was called in an invalid state ('{0}'); WriteEnd is only supported in states 'Start', 'Collection', and 'Item'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_CollectionNameDoesntMatchFunctionImportName(System.Object,System.Object)">
            <summary>
            A string like "A collection with name '{0}' is being written with producing function import name '{1}'. If the producing function import is specified the collection name must be either null or match the name of the function import."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_NonCollectionType(System.Object,System.Object)">
            <summary>
            A string like "The producing function import '{0}' specified for the collection writer returns type '{1}' which is not a collection of primitive or complex values. An ODataCollectionWriter can only write collections of primitive or complex values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatch_InvalidHttpMethodForQueryOperation(System.Object)">
            <summary>
            A string like "An invalid HTTP method '{0}' was detected for a query operation. Query operations only support the HTTP 'GET' method."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatch_InvalidHttpMethodForChangeSetRequest(System.Object)">
            <summary>
            A string like "An invalid HTTP method '{0}' was detected for a request in a change set. Requests in change sets only support the HTTP methods 'POST', 'PUT', 'DELETE', 'MERGE', and 'PATCH'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchOperationHeaderDictionary_KeyNotFound(System.Object)">
            <summary>
            A string like "The header with name '{0}' was not present in the header collection of the batch operation."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchOperationHeaderDictionary_DuplicateCaseInsensitiveKeys(System.Object)">
            <summary>
            A string like "Multiple headers with names that match '{0}', when using a case insensitive comparison, have been added. When case-insensitive header names are used, at most one header can be added for each name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterWriterCore_DuplicatedParameterNameNotAllowed(System.Object)">
            <summary>
            A string like "The parameter '{0}' has already been written. Duplicate parameter names are not allowed in the parameter payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterWriterCore_CannotWriteValueOnNonValueTypeKind(System.Object,System.Object)">
            <summary>
            A string like "The parameter '{0}' is of Edm type kind '{1}'. You cannot call WriteValue on a parameter that is not of Edm type kinds 'Primitive' or 'Complex'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterWriterCore_CannotWriteValueOnNonSupportedValueType(System.Object,System.Object)">
            <summary>
            A string like "The value for parameter '{0}' is of type '{1}'. WriteValue can only write null, ODataComplexValue and primitive types that are not Stream type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterWriterCore_CannotCreateCollectionWriterOnNonCollectionTypeKind(System.Object,System.Object)">
            <summary>
            A string like "The parameter '{0}' is of Edm type kind '{1}'. You cannot call CreateCollectionWriter on a parameter that is not of Edm type kind 'Collection'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterWriterCore_ParameterNameNotFoundInFunctionImport(System.Object,System.Object)">
            <summary>
            A string like "The name '{0}' is not a recognized parameter name for function import '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterWriterCore_MissingParameterInParameterPayload(System.Object,System.Object)">
            <summary>
            A string like "The parameters {0} of the function import '{1}' could not be found when writing the parameter payload. All parameters present in the function import must be written to the parameter payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchWriter_MaxBatchSizeExceeded(System.Object)">
            <summary>
            A string like "The current batch message contains too many parts. Only batch messages with a maximum number of '{0}' query operations and change sets are allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchWriter_MaxChangeSetSizeExceeded(System.Object)">
            <summary>
            A string like "The current change set contains too many operations. Only change sets with a maximum number of '{0}' operations are allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchWriter_DuplicateContentIDsNotAllowed(System.Object)">
            <summary>
            A string like "The content ID '{0}' was found more than once in the same change set. Content IDs have to be unique across all operations of a change set."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchUtils_RelativeUriUsedWithoutBaseUriSpecified(System.Object)">
            <summary>
            A string like "The relative URI '{0}' was specified in a batch operation, but a base URI was not specified for the batch writer or batch reader."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchUtils_RelativeUriStartingWithDollarUsedWithoutBaseUriSpecified(System.Object)">
            <summary>
            A string like "The relative URI '{0}' was specified in a batch operation, but a base URI was not specified for the batch writer or batch reader. When the relative URI is a reference to a content ID, the content ID does not exist in the current change set."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReader_InvalidStateForCreateOperationRequestMessage(System.Object)">
            <summary>
            A string like "The method CreateOperationRequestMessage was called in state '{0}', which is not allowed. CreateOperationRequestMessage can only be called in state 'Operation'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReader_InvalidStateForCreateOperationResponseMessage(System.Object)">
            <summary>
            A string like "The method CreateOperationResponseMessage was called in state '{0}', which is not allowed. CreateOperationResponseMessage can only be called in state 'Operation'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReader_ReadOrReadAsyncCalledInInvalidState(System.Object)">
            <summary>
            A string like "ODataBatchReader.ReadAsync or ODataBatchReader.Read was called in an invalid state. No further calls can be made to the reader in state '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReader_MaxBatchSizeExceeded(System.Object)">
            <summary>
            A string like "The current batch message contains too many parts. A maximum number of '{0}' query operations and change sets are allowed in a batch message."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReader_MaxChangeSetSizeExceeded(System.Object)">
            <summary>
            A string like "The current change set contains too many operations. A maximum number of '{0}' operations are allowed in a change set."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReader_DuplicateContentIDsNotAllowed(System.Object)">
            <summary>
            A string like "The content ID '{0}' was found more than once in the same change set. Content IDs have to be unique across all operations of a change set."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_InvalidHeaderSpecified(System.Object)">
            <summary>
            A string like "The message header '{0}' is invalid. The header value must be of the format '&lt;header name&gt;: &lt;header value&gt;'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_InvalidRequestLine(System.Object)">
            <summary>
            A string like "The request line '{0}' is invalid. The request line at the start of each operation must be of the format 'HttpMethod RequestUrl HttpVersion'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_InvalidResponseLine(System.Object)">
            <summary>
            A string like "The response line '{0}' is invalid. The response line at the start of each operation must be of the format 'HttpVersion StatusCode StatusCodeString'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_InvalidHttpVersionSpecified(System.Object,System.Object)">
            <summary>
            A string like "The HTTP version '{0}' used in a batch operation request or response is not valid. The value must be '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_NonIntegerHttpStatusCode(System.Object)">
            <summary>
            A string like " The HTTP status code '{0}' is invalid. An HTTP status code must be an integer value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_MissingOrInvalidContentEncodingHeader(System.Object,System.Object)">
            <summary>
            A string like "A missing or invalid '{0}' header was found. The '{0}' header must be specified for each batch operation, and its value must be '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_InvalidContentTypeSpecified(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The '{0}' header value '{1}' is invalid. When this is the start of the change set, the value must be '{2}'; otherwise it must be '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_InvalidContentLengthSpecified(System.Object)">
            <summary>
            A string like "The content length header '{0}' is not valid. The content length header must be a valid Int32 literal and must be greater than or equal to 0."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_DuplicateHeaderFound(System.Object)">
            <summary>
            A string like "The header '{0}' was specified multiple times. Each header must appear only once in a batch part."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStream_MultiByteEncodingsNotSupported(System.Object)">
            <summary>
            A string like "Invalid multi-byte encoding '{0}' detected. Multi-byte encodings other than UTF-8 are only supported for operation payloads. They are not supported in batch or change set parts."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataBatchReaderStreamBuffer_BoundaryLineSecurityLimitReached(System.Object)">
            <summary>
            A string like "Too many white spaces after a boundary delimiter and before the terminating line feed. For security reasons, the total number of characters for a boundary including white spaces must not exceed {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_MediaTypeUnspecified(System.Object)">
            <summary>
            A string like "The MIME type '{0}' is invalid or unspecified."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_MediaTypeRequiresSlash(System.Object)">
            <summary>
            A string like "The MIME type '{0}' requires a '/' character between type and subtype, such as 'text/plain'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_MediaTypeRequiresSubType(System.Object)">
            <summary>
            A string like "The MIME type '{0}' requires a subtype definition."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_MediaTypeMissingParameterValue(System.Object)">
            <summary>
            A string like "The MIME type is missing a parameter value for a parameter with the name '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_EscapeCharWithoutQuotes(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because the escape character '{3}' is not inside a quoted-string."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_EscapeCharAtEnd(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because it terminates with the escape character '{3}'. In a quoted-string, the escape characters must always be followed by a character."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_ClosingQuoteNotFound(System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because the closing quote character was not found for the quoted-string."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_InvalidCharacterInQuotedParameterValue(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because the character '{3}' is not allowed in a quoted-string. For more information, see RFC 2616, Sections 3.6 and 2.2."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_MediaTypeRequiresSemicolonBeforeParameter(System.Object)">
            <summary>
            A string like "The MIME type '{0}' requires a semi-colon character (';') before a parameter definition."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_InvalidQualityValueStartChar(System.Object,System.Object)">
            <summary>
            A string like "An invalid quality value was detected in the header string '{0}'; quality values must start with '0' or '1' but not with '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_InvalidQualityValue(System.Object,System.Object)">
            <summary>
            A string like "An invalid quality value '{0}' was detected in the header string '{1}'; quality values must be in the range [0, 1]."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_CannotConvertCharToInt(System.Object)">
            <summary>
            A string like "An error occurred when converting the character '{0}' to an integer."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_MissingSeparatorBetweenCharsets(System.Object)">
            <summary>
            A string like "The separator ',' was missing between charset values in the header '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_InvalidSeparatorBetweenCharsets(System.Object)">
            <summary>
            A string like "A separator character was missing between charset values in the header '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_InvalidCharsetName(System.Object)">
            <summary>
            A string like "An invalid (empty) charset name found in the header '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_UnexpectedEndOfQValue(System.Object)">
            <summary>
            A string like "An unexpected end of the q-Value was detected in the header '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_ExpectedLiteralNotFoundInString(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The expected literal '{0}' was not found at position '{1}' in the string '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_InvalidHttpMethodString(System.Object)">
            <summary>
            A string like "The string '{0}' cannot be converted into a supported HTTP method. The only supported HTTP methods are GET, DELETE, PUT, POST, PATCH and MERGE."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpUtils_NoOrMoreThanOneContentTypeSpecified(System.Object)">
            <summary>
            A string like "The specified content type '{0}' contains either no media type or more than one media type, which is not allowed. You must specify exactly one media type as the content type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpHeaderValueLexer_UnrecognizedSeparator(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because '{3}' is not a recognized separator. The supported separators are ',', ';', and '='."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpHeaderValueLexer_TokenExpectedButFoundQuotedString(System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because a token is expected but a quoted-string is found instead."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpHeaderValueLexer_FailedToReadTokenOrQuotedString(System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because a token or a quoted-string is expected at this position but were not found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpHeaderValueLexer_InvalidSeparatorAfterQuotedString(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because '{3}' is not a valid separator after a quoted-string."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.HttpHeaderValueLexer_EndOfFileAfterSeparator(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An error occurred when parsing the HTTP header '{0}'. The header value '{1}' is incorrect at position '{2}' because the header value should not end with the separator '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MediaType_EncodingNotSupported(System.Object)">
            <summary>
            A string like "The character set '{0}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MediaTypeUtils_DidNotFindMatchingMediaType(System.Object,System.Object)">
            <summary>
            A string like "A supported MIME type could not be found that matches the acceptable MIME types for the request. The supported type(s) '{0}' do not match any of the acceptable MIME types '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MediaTypeUtils_CannotDetermineFormatFromContentType(System.Object,System.Object)">
            <summary>
            A string like "A supported MIME type could not be found that matches the content type of the response. None of the supported type(s) '{0}' matches the content type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MediaTypeUtils_NoOrMoreThanOneContentTypeSpecified(System.Object)">
            <summary>
            A string like "The specified content type '{0}' contains either no media type or more than one media type, which is not allowed. You must specify exactly one media type as the content type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads(System.Object,System.Object)">
            <summary>
            A string like "The content type '{0}' specifies a batch payload; however, the payload either does not include a batch boundary or includes more than one boundary. In OData, batch payload content types must specify exactly one batch boundary in the '{1}' parameter of the content type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EntityPropertyMapping_EpmAttribute(System.Object)">
            <summary>
            A string like "The '{0}' value provided for the EntityPropertyMappingAttribute is not valid."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EntityPropertyMapping_InvalidTargetPath(System.Object)">
            <summary>
            A string like "The TargetName property path '{0}' set in the EntityPropertyMappingAttribute is not valid."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EntityPropertyMapping_TargetNamespaceUriNotValid(System.Object)">
            <summary>
            A string like "The value '{0}' of the targetNamespaceUri parameter provided to the EntityPropertyMappingAttribute does not have a valid URI format."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_InvalidSourcePath(System.Object,System.Object)">
            <summary>
            A string like "The PropertyName property value '{1}' set in the EntityPropertyMappingAttribute on type '{0}' is not valid."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_EndsWithNonPrimitiveType(System.Object)">
            <summary>
            A string like "The property '{0}' provided at the end of the PropertyName property of the EntityPropertyMappingAttribute on a type is not a primitive type or a collection type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_TraversalOfNonComplexType(System.Object)">
            <summary>
            A string like "The property '{0}' provided in the middle of the PropertyName property of the EntityPropertyMappingAttribute on a type is not a complex type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_DuplicateEpmAttributesWithSameSourceName(System.Object,System.Object)">
            <summary>
            A string like "More than one EntityPropertyMappingAttribute on type '{0}' have a 'PropertyName' value '{1}'. In OData, an entity property cannot be mapped more than once."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_MissingPropertyOnType(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is not present."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_MissingPropertyOnInstance(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' defined on type '{1}' is not present in the instance of the type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_StreamPropertyCannotBeMapped(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on the type '{1}' is of the type 'Edm.Stream'. Stream properties cannot be mapped with an entity property mapping."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_SpatialTypeCannotBeMapped(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on the type '{1}' is a spatial type. Spatial type properties cannot be mapped with an entity property mapping."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_OpenPropertySpatialTypeCannotBeMapped(System.Object,System.Object)">
            <summary>
            A string like "The open property '{0}' on the type '{1}' is a spatial type. Spatial type properties cannot be mapped with an entity property mapping."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_OpenComplexPropertyCannotBeMapped(System.Object,System.Object)">
            <summary>
            A string like "The open property '{0}' on the type '{1}' does not have a primitive type. Only open primitive properties can be mapped with an entity property mapping."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSourceTree_CollectionPropertyCannotBeMapped(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on the type '{1}' is a collection. Collection properties cannot be mapped with an entity property mapping."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmTargetTree_InvalidTargetPath_EmptySegment(System.Object)">
            <summary>
            A string like "The TargetName property path '{0}' set in the EntityPropertyMappingAttribute is not valid because it contains an empty segment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmTargetTree_InvalidTargetPath_MixedContent(System.Object,System.Object)">
            <summary>
            A string like "The TargetName property paths '{0}' and '{1}' set in two EntityPropertyMappingAttribute instances are invalid because they would result in mixed content. Mixed content produced by entity property mappings is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmTargetTree_AttributeInMiddle(System.Object)">
            <summary>
            A string like "The attribute identifier '{0}' is provided in the middle of the 'TargetName' property of EntityPropertyMappingAttribute."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmTargetTree_DuplicateEpmAttributesWithSameTargetName(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "More than one EntityPropertyMappingAttribute on the type '{0}' have the same 'TargetName' value '{1}'. The conflicting properties are '{2}' and '{3}'. In OData, target names of entity property mappings must be unique on a given type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSyndicationWriter_DateTimePropertyCanNotBeConverted(System.Object)">
            <summary>
            A string like "The property value corresponding to '{0}' property in SyndicationItemProperty could not be converted to the type DateTimeOffset."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSyndicationWriter_EmptyCollectionMappedToAuthor(System.Object)">
            <summary>
            A string like "The collection property '{0}' has no items but is mapped to the author element. Only non-empty collection properties can be mapped to the author element in an entry."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSyndicationWriter_NullValueForAttributeTarget(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' that is mapped to '{2}' has a 'null' value. Properties that are mapped to attributes cannot be null."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSyndicationWriter_InvalidLinkLengthValue(System.Object)">
            <summary>
            A string like "'{0}' is not a valid value for 'atom:link/@length' attribute. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSyndicationWriter_InvalidValueForLinkRelCriteriaAttribute(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The value '{0}' for the property '{1}' on type '{2}' that is mapped to 'link/@rel' is not valid. Properties that are mapped to 'link/@rel' cannot have values that are Atom-defined simple identifiers, such as alternate, related, self, enclosure, via, describedby, service, edit, or edit-media; cannot be an Atom-defined simple identifier following the IANA namespace, such as 'http://www.iana.org/assignments/relation/edit'; and cannot begin with the namespace 'http://schemas.microsoft.com/ado/2007/08/dataservices'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSyndicationWriter_InvalidValueForCategorySchemeCriteriaAttribute(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The value '{0}' for the property '{1}' on type '{2}' that is mapped to 'category/@scheme' is not valid. Properties that are mapped to 'category/@scheme' must have values that are URIs and cannot begin with the namespace 'http://schemas.microsoft.com/ado/2007/08/dataservices'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpressionLexer_ExpectedLiteralToken(System.Object)">
            <summary>
            A string like "Expected literal type token but found token '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriUtils_InvalidRelativeUriForEscaping(System.Object,System.Object)">
            <summary>
            A string like "The relative URI '{0}' cannot be escaped because it starts with '{1}' and a base URI is not available. Relative URIs without a base URI cannot start with '/', '\\' or '..'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUriUtils_ConvertToUriLiteralUnsupportedType(System.Object)">
            <summary>
            A string like "The type '{0}' is not supported when converting to a URI literal."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUriUtils_ConvertToUriLiteralUnsupportedFormat(System.Object)">
            <summary>
            A string like "The format '{0}' is not supported when converting to a URI literal. The supported formats are ODataFormat.JsonLight and ODataFormat.VerboseJson."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUriUtils_ConvertFromUriLiteralTypeVerificationFailure(System.Object,System.Object)">
            <summary>
            A string like "Type verification failed. Expected type '{0}' but received the value '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUriUtils_ConvertFromUriLiteralNullTypeVerificationFailure(System.Object,System.Object)">
            <summary>
            A string like "Type verification failed. Expected type '{0}' but received non-matching null value with associated type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUriUtils_ConvertFromUriLiteralNullOnNonNullableType(System.Object)">
            <summary>
            A string like "Type verification failed. Expected non-nullable type '{0}' but received a null value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUtils_CannotConvertValueToRawPrimitive(System.Object)">
            <summary>
            A string like "The value of type '{0}' could not be converted to the string representation of a raw primitive value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUtils_DidNotFindDefaultMediaType(System.Object)">
            <summary>
            A string like "A default MIME type could not be found for the requested payload in format '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUtils_UnsupportedVersionHeader(System.Object)">
            <summary>
            A string like "The value '{0}' of the DataServiceVersion HTTP header is invalid. Only '1.0', '2.0' and '3.0' are supported as values for the DataServiceVersion header."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderUtils_EnumerableModified(System.Object)">
            <summary>
            A string like "The value returned by the '{0}' property cannot be modified until the end of the owning entry is reported by the reader."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_NullValueForNonNullableType(System.Object)">
            <summary>
            A string like "A null value was found with the expected type '{0}[Nullable=False]'. The expected type '{0}[Nullable=False]' does not allow null values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_NullNamedValueForNonNullableType(System.Object,System.Object)">
            <summary>
            A string like "A null value was found for the property named '{0}', which has the expected type '{1}[Nullable=False]'. The expected type '{1}[Nullable=False]' does not allow null values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_DerivedComplexTypesAreNotAllowed(System.Object,System.Object)">
            <summary>
            A string like "Complex type '{1}' is a subtype of a base type '{0}'. Derived complex types are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_CannotConvertPrimitiveValue(System.Object)">
            <summary>
            A string like "Cannot convert a primitive value to the expected type '{0}'. See the inner exception for more details."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MessageReaderSettingsBaseUriMustBeNullOrAbsolute(System.Object)">
            <summary>
            A string like "The base URI '{0}' specified in ODataMessageReaderSettings.BaseUri is invalid; it must be either null or an absolute URI."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_UndeclaredPropertyBehaviorKindSpecifiedForOpenType(System.Object,System.Object)">
            <summary>
            A string like "An undeclared property '{0}' was found on type '{1}', which is marked as open; however, either the ODataUndeclaredPropertyBehaviorKinds.IgnoreUndeclaredValueProperty or the ODataUndeclaredPropertyBehaviorKinds.ReportUndeclaredLinkProperty setting is used. The ODataUndeclaredPropertyBehaviorKinds.IgnoreUndeclaredValueProperty or ODataUndeclaredPropertyBehaviorKinds.ReportUndeclaredLinkProperty setting cannot be used with open types."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationInvalidExpectedEntitySet(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the entity set with name '{1}'; however, the name of the expected entity set is '{2}' and does not match the entity set referenced in the metadata URI."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationInvalidExpectedEntityType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the entity type with name '{1}'; however, the name of the expected entity type is '{2}' which is not compatible with the entity type with name '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationNonMatchingPropertyNames(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the property with name '{1}' on type '{2}'; however, the name of the expected property is '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationNonMatchingDeclaringTypes(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the property with name '{1}' on type '{2}'; however, the declaring type of the expected property is '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationNonMatchingCollectionNames(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the function import with name '{1}'; however, the name of the expected producing function import is '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationNonMatchingCollectionItemTypes(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the function import with name '{1}' which returns a collection with item type '{2}'; however, the item type of the collection returned by the expected producing function import is '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationPropertyWithExpectedFunctionImport(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references a property with name '{1}' on type '{2}'; however, a producing function import with name '{3}' was specified."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationFunctionImportWithExpectedProperty(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references a function import with name '{1}'; however, an expected structural property with name '{2}' on type '{3}' was specified."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_NonMatchingCollectionNames(System.Object,System.Object)">
            <summary>
            A string like "The collection name '{0}' was read from the payload; however, the name of the expected producing function import is '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_NonMatchingPropertyNames(System.Object,System.Object)">
            <summary>
            A string like "The property or function import name '{0}' was read from the payload; however, the name of the expected property or function import is '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationNonMatchingPropertyDeclaringTypes(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the property with name '{1}' on type '{2}'; however, the expected property with the same name is declared on type '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationNonMatchingPropertyTypes(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the property with name '{1}' and type '{2}' on declaring type '{3}'; however, the expected property type is '{4}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationNonMatchingFunctionImportNames(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the function import with name '{1}'; however, the name of the expected function import is '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriValidationNonMatchingFunctionImportReturnTypes(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the function import with name '{1}' and return type '{2}'; however, the expected return type is '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_TypeInMetadataUriDoesNotMatchExpectedType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the type '{1}'; however the expected type is '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ReaderValidationUtils_MetadataUriDoesNotReferTypeAssignableToExpectedType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' refers to the item type '{1}' which is not assignable to the expected item type '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageReader_ExpectedTypeSpecifiedWithoutMetadata(System.Object)">
            <summary>
            A string like "The parameter '{0}' is specified with a non-null value, but no metadata is available for the reader. The expected type can only be specified if metadata is made available to the reader."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageReader_EntitySetSpecifiedWithoutMetadata(System.Object)">
            <summary>
            A string like "The parameter '{0}' is specified with a non-null value, but no metadata is available for the reader. The entity set can only be specified if metadata is made available to the reader."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageReader_FunctionImportSpecifiedWithoutMetadata(System.Object)">
            <summary>
            A string like "The parameter '{0}' is specified with a non-null value, but no metadata is available for the reader. The function import can only be specified if metadata is made available to the reader."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageReader_ProducingFunctionImportNonCollectionType(System.Object,System.Object)">
            <summary>
            A string like "The producing function import '{0}' for a collection reader has the return type '{1}'. Only function imports returning collections of primitive or complex values can be specified as the producing function import for a collection reader."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageReader_ExpectedCollectionTypeWrongKind(System.Object)">
            <summary>
            A string like "The expected type for a collection reader is of kind '{0}'. Only types of Primitive or ComplexType kind can be specified as the expected type for a collection reader."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageReader_ExpectedValueTypeWrongKind(System.Object)">
            <summary>
            A string like "The expected type for a value is of kind '{0}'. Only types of Primitive kind can be specified as the expected type for reading a value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageReader_WildcardInContentType(System.Object)">
            <summary>
            A string like "The wildcard '*' was detected in the value '{0}' of the content type header. The value of the content type header cannot contain wildcards."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMessageReader_SingletonNavigationPropertyForEntityReferenceLinks(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' with singleton cardinality on type '{1}' was specified for reading a collection of entity reference links. A navigation property with collection cardinality has to be provided."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMediaTypeUtils_BoundaryMustBeSpecifiedForBatchPayloads(System.Object,System.Object)">
            <summary>
            A string like "The content type '{0}' specifies a batch payload but does not include a batch boundary. In OData, batch payload content types must specify a batch boundary in the '{1}' parameter of the content type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataReaderCore_ReadOrReadAsyncCalledInInvalidState(System.Object)">
            <summary>
            A string like "ODataReader.ReadAsync or ODataReader.Read was called in an invalid state. No further calls can be made to the reader in state '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataReaderCore_NoReadCallsAllowed(System.Object)">
            <summary>
            A string like "Calling Read or ReadAsync on an ODataReader instance is not allowed in state '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReader_CannotReadEntriesOfFeed(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the entries of a feed. A 'StartObject' or 'EndArray' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReader_CannotReadFeedStart(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the start of a feed. A 'StartObject' or 'StartArray' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReader_CannotReadEntryStart(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the start of an entry. A 'StartObject' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_CannotConvertInt32(System.Object)">
            <summary>
            A string like "Cannot convert a value of type 'Edm.Int32' to the expected target type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_CannotConvertDouble(System.Object)">
            <summary>
            A string like "Cannot convert a value of type 'Edm.Double' to the expected target type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_CannotConvertBoolean(System.Object)">
            <summary>
            A string like "Cannot convert a value of type 'Edm.Boolean' to the expected target type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_CannotConvertDateTime(System.Object)">
            <summary>
            A string like "Cannot convert a value of type 'Edm.DateTime' to the expected target type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_CannotConvertDateTimeOffset(System.Object)">
            <summary>
            A string like "Cannot convert a value of type 'Edm.DateTimeOffset' to the expected target type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_MultipleMetadataPropertiesWithSameName(System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found in the value of the '__metadata' property. In OData, the value of the '__metadata' property must have at most one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_MultipleEntityReferenceLinksWrapperPropertiesWithSameName(System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found in an entity reference link wrapper object. In OData, an entity reference link wrapper must have at most one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_MultipleErrorPropertiesWithSameName(System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found in an error or inner error object. In OData, an error or inner error must have at most one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_FeedPropertyWithNullValue(System.Object)">
            <summary>
            A string like "The '{0}' property in a feed wrapper has a null value. In OData, the '{0}' property must have a non-null value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_MediaResourcePropertyWithNullValue(System.Object)">
            <summary>
            A string like "The '{0}' property in the value of the '__mediaresource' property has a null value. In OData, the '{0}' property must have a string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_EntityReferenceLinksInlineCountWithNullValue(System.Object)">
            <summary>
            A string like "The '{0}' property for a collection of entity reference links has a null value. In OData, the '{0}' property must have a non-null string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_EntityReferenceLinksPropertyWithNullValue(System.Object)">
            <summary>
            A string like "The '{0}' property in a collection of entity reference links has a null value. In OData, the '{0}' property must have a non-null string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_MetadataPropertyWithNullValue(System.Object)">
            <summary>
            A string like "The '{0}' property in the value of the '__metadata' property has a null value. In OData, the '{0}' property must have a non-null string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonDeserializer_RelativeUriUsedWithoutBaseUriSpecified(System.Object)">
            <summary>
            A string like "A relative URI value '{0}' was specified in the payload, but no base URI for it was found. If the payload contains a relative URI a base URI must be specified on the reader settings."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonCollectionDeserializer_CannotReadCollectionContentStart(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the items of a collection; however, a 'StartArray' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonEntityReferenceLinkDeserializer_EntityReferenceLinkMustBeObjectValue(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the start of an entity reference link. In OData, entity reference links must be objects."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_CannotReadFeedContentStart(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the entries of a feed; however, a 'StartArray' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_MultipleMetadataPropertiesForStreamProperty(System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found for a stream reference value. In OData, a stream reference value can only contain one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_PropertyInEntryMustHaveObjectValue(System.Object,System.Object)">
            <summary>
            A string like "Found a node of type '{1}' when starting to read the property value, however a node of type 'StartObject' was expected. The '{0}' property of an entry metadata must have an object value. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_CannotReadSingletonNavigationPropertyValue(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the contents of a resource reference navigation link; however, a 'StartObject' node or 'PrimitiveValue' node with null value was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_CannotReadCollectionNavigationPropertyValue(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the contents of an entity set reference navigation link; however, a 'StartObject' or 'StartArray' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedSerializer_AnnotationGroupMemberWithoutName(System.Object)">
            <summary>
            A string like "An annotation group member with an empty name was found for the annotation group with name '{0}'. In OData, annotation group members must have a non-null, non-empty names."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedSerializer_AnnotationGroupMemberWithInvalidValue(System.Object,System.Object,System.Object)">
            <summary>
            A string like "An annotation group member with name '{0}' in annotation group '{1}' has an invalid value. In OData, annotation group member values must be strings; values of type '{2}' are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedSerializer_AnnotationGroupMemberMustBeAnnotation(System.Object,System.Object)">
            <summary>
            A string like "An annotation group member with name '{0}' in annotation group '{1}' is not an annotation. In OData, JSON Light annotation groups can only contain instance and property annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedSerializer_DuplicateAnnotationGroup(System.Object)">
            <summary>
            A string like "Multiple annotation groups with name '{0}' were found in the payload. In OData, annotation group names must be unique for the entire payload and the same annotation group instance has to be used for its declaration and when referencing it."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedSerializer_ActionsAndFunctionsGroupMustSpecifyTarget(System.Object)">
            <summary>
            A string like "Multiple operations have the same 'Metadata' property value of '{0}'. The 'Target' property value of these operations must be set to a non-null value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedSerializer_ActionsAndFunctionsGroupMustNotHaveDuplicateTarget(System.Object,System.Object)">
            <summary>
            A string like "Multiple operations have the same 'Metadata' property value of '{0}' and the same 'Target' property value of '{1}'. When multiple operations have the same 'Metadata' property value, their 'Target' property values must be unique."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonErrorDeserializer_TopLevelErrorWithInvalidProperty(System.Object)">
            <summary>
            A string like "A property with name '{0}' was found in the error object when reading a top-level error. In OData, a top-level error object must have exactly one property with name 'error'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonErrorDeserializer_TopLevelErrorMessageValueWithInvalidProperty(System.Object)">
            <summary>
            A string like "A property with name '{0}' was found in the message value of a top-level error. In OData, the message value of a top-level error value can only have properties with name 'lang' or 'value'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataVerboseJsonErrorDeserializer_TopLevelErrorValueWithInvalidProperty(System.Object)">
            <summary>
            A string like "A property with name '{0}' was found in the error value of a top-level error. In OData, a top-level error value can only have properties with name 'code', 'message', or 'innererror'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_CannotReadPropertyValue(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read a value of a property; however, a 'PrimitiveValue' or 'StartObject' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_MultiplePropertiesInCollectionWrapper(System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found in a collection. In OData, a collection can only have one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_InvalidTypeName(System.Object)">
            <summary>
            A string like "The 'type' property value '{0}' is not a valid type name. The value of the 'type' property must be a non-empty string."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_InvalidPrimitiveTypeName(System.Object)">
            <summary>
            A string like "The 'type' property value '{0}' is not valid. The type name can only be specified when the primitive property is a spatial property. Please make sure that the type name is either a spatial type name or a non-primitive type name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_MetadataPropertyMustHaveObjectValue(System.Object)">
            <summary>
            A string like "Found a node of type '{0}' when starting to read the property value; however, a node of type 'StartObject' was expected. The '__metadata' property must have an object value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionReaderCore_ReadOrReadAsyncCalledInInvalidState(System.Object)">
            <summary>
            A string like "ODataCollectionReader.ReadAsync or ODataCollectionReader.Read was called in an invalid state. No further calls can be made to the reader in state '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataCollectionReaderCore_ExpectedItemTypeSetInInvalidState(System.Object,System.Object)">
            <summary>
            A string like "The current state of the collection reader is '{0}'; however, the expected item type of a collection reader can only be set in state '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterReaderCore_ReadOrReadAsyncCalledInInvalidState(System.Object)">
            <summary>
            A string like "ODataParameterReader.ReadAsync or ODataParameterReader.Read was called in an invalid state. No further calls can be made to the reader in state '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterReaderCore_SubReaderMustBeCreatedAndReadToCompletionBeforeTheNextReadOrReadAsyncCall(System.Object,System.Object)">
            <summary>
            A string like "ODataParameterReader.ReadAsync or ODataParameterReader.Read was called in the '{0}' state. '{1}' must be called in this state, and the created reader must be in the 'Completed' state before the next ODataParameterReader.ReadAsync or ODataParameterReader.Read can be called."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterReaderCore_SubReaderMustBeInCompletedStateBeforeTheNextReadOrReadAsyncCall(System.Object,System.Object)">
            <summary>
            A string like "ODataParameterReader.ReadAsync or ODataParameterReader.Read was called in the '{0}' state and '{1}' was called but the created reader is not in the 'Completed' state. The created reader must be in 'Completed' state before the next ODataParameterReader.ReadAsync or ODataParameterReader.Read can be called."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterReaderCore_InvalidCreateReaderMethodCalledForState(System.Object,System.Object)">
            <summary>
            A string like "You cannot call the method '{0}' in state '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterReaderCore_CreateReaderAlreadyCalled(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' method has already been called for the parameter '{1}'. Only one create reader method call is allowed for each entry, feed, or collection parameter."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterReaderCore_ParameterNameNotInMetadata(System.Object,System.Object)">
            <summary>
            A string like "The parameter '{0}' in the request payload is not a valid parameter for the function import '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterReaderCore_DuplicateParametersInPayload(System.Object)">
            <summary>
            A string like "Multiple parameters with the name '{0}' were found in the request payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataParameterReaderCore_ParametersMissingInPayload(System.Object,System.Object)">
            <summary>
            A string like "One or more parameters of the function import '{0}' are missing from the request payload. The missing parameters are: {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonParameterReader_UnsupportedPrimitiveParameterType(System.Object,System.Object)">
            <summary>
            A string like "The parameter '{0}' is of the '{1}' primitive type, which is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonParameterReader_UnsupportedParameterTypeKind(System.Object,System.Object)">
            <summary>
            A string like "The parameter '{0}' is of an unsupported type kind '{1}'. The supported type kinds are Primitive, Complex, Primitive Collection and Complex Collection."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonParameterReader_NullCollectionExpected(System.Object,System.Object)">
            <summary>
            A string like "When trying to read a null collection parameter value in verbose JSON, a node of type '{0}' with the value '{1}' was read from the JSON reader; however, a 'null' value was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonInputContext_FunctionImportCannotBeNullForCreateParameterReader(System.Object)">
            <summary>
            A string like "The parameter '{0}' is specified with a null value. For JSON, the '{0}' argument to the 'CreateParameterReader' method cannot be null."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonCollectionReader_CannotReadWrappedCollectionStart(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the start of a collection with a collection wrapper object. A 'StartObject' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonCollectionReader_CannotReadCollectionStart(System.Object)">
            <summary>
            A string like "When trying to read the start of a collection without a collection wrapper object, a node of type '{0}' was read from the JSON reader; however, a 'StartArray' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_ActionsAndFunctionsMustSpecifyMetadata(System.Object)">
            <summary>
            A string like "The 'Metadata' property on an {0} must be set to a non-null value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_ActionsAndFunctionsMustSpecifyTarget(System.Object)">
            <summary>
            A string like "The 'Target' property on an {0} must be set to a non-null value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_EnumerableContainsANullItem(System.Object)">
            <summary>
            A string like "The '{0}' enumerable contains a null item. This enumerable cannot contain null items."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_PropertyDoesNotExistOnType(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' does not exist on type '{1}'. Make sure to only use property names that are defined by the type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_NonPrimitiveTypeForPrimitiveValue(System.Object)">
            <summary>
            A string like "A primitive value was specified; however, a value of the non-primitive type '{0}' was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_UnsupportedPrimitiveType(System.Object)">
            <summary>
            A string like "Unsupported primitive type. A primitive type could not be determined for an instance of type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_IncompatiblePrimitiveItemType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An incompatible primitive type '{0}[Nullable={1}]' was found for an item that was expected to be of type '{2}[Nullable={3}]'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_InvalidCollectionTypeName(System.Object)">
            <summary>
            A string like "Type name '{0}' is an invalid collection type name; a collection type name must be in the format 'Collection(&lt;itemTypeName&gt;)'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_UnrecognizedTypeName(System.Object)">
            <summary>
            A string like "A type named '{0}' could not be resolved by the model. When a model is available, each type name must resolve to a valid type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_IncorrectTypeKind(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Incompatible type kinds were found. The type '{0}' was found to be of kind '{2}' instead of the expected kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_IncorrectTypeKindNoTypeName(System.Object,System.Object)">
            <summary>
            A string like "Incompatible type kinds were found. Found type kind '{0}' instead of the expected kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_IncorrectValueTypeKind(System.Object,System.Object)">
            <summary>
            A string like "A value with type '{0}' was found, which is of kind '{1}'. Value can only be of kind 'Primitive', 'Complex' or 'Collection'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_MismatchPropertyKindForStreamProperty(System.Object)">
            <summary>
            A string like "The property '{0}' cannot be a stream property because it is not of kind EdmPrimitiveTypeKind.Stream."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_InvalidEtagValue(System.Object)">
            <summary>
            A string like "The ETag value '{0}' is not valid. An ETag value must be a quoted string or 'W/' followed by a quoted string. Refer to HTTP RFC 2616 for details on valid ETag formats."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_IncompatibleType(System.Object,System.Object)">
            <summary>
            A string like "A value was encountered that has a type name that is incompatible with the metadata. The value specified its type as '{0}', but the type specified in the metadata is '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_OpenCollectionProperty(System.Object)">
            <summary>
            A string like "An open collection property '{0}' was found. In OData, open collection properties are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_OpenStreamProperty(System.Object)">
            <summary>
            A string like "An open stream property '{0}' was found. In OData, open stream properties are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_InvalidCollectionTypeReference(System.Object)">
            <summary>
            A string like "An invalid collection type kind '{0}' was found. In OData, collection types must be of kind 'Collection'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_EntryWithMediaResourceAndNonMLEType(System.Object)">
            <summary>
            A string like "An entry with type '{0}' was found with a media resource, but this entity type is not a media link entry (MLE). When the type is not an MLE entity, the entry cannot have a media resource."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_EntryWithoutMediaResourceAndMLEType(System.Object)">
            <summary>
            A string like "An entry with type '{0}' was found without a media resource, but this entity type is a media link entry (MLE). When the type is an MLE entity, the entry must have a media resource."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_EntryTypeNotAssignableToExpectedType(System.Object,System.Object)">
            <summary>
            A string like "An entry with type '{0}' was found, but it is not assignable to the expected type '{1}'. The type specified in the entry must be equal to either the expected type or a derived type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_OpenNavigationProperty(System.Object,System.Object)">
            <summary>
            A string like "A navigation property with name '{0}' was found on type '{1}', however this property was not declared. Open navigation properties are not supported; all navigation properties must be declared in metadata."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_NavigationPropertyExpected(System.Object,System.Object,System.Object)">
            <summary>
            A string like "A property with name '{0}' on type '{1}' has kind '{2}', but it is expected to be of kind 'Navigation'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_InvalidBatchBoundaryDelimiterLength(System.Object,System.Object)">
            <summary>
            A string like "The boundary delimiter '{0}' is invalid. A boundary delimiter must be non-null, be non-empty, and have a maximum of {1} characters."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_RecursionDepthLimitReached(System.Object)">
            <summary>
            A string like "The maximum recursion depth limit was reached. The depth of nested values in a single property cannot exceed {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_MaxDepthOfNestedEntriesExceeded(System.Object)">
            <summary>
            A string like "The depth limit for entries in nested expanded navigation links was reached. The number of nested expanded entries cannot exceed {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_NullCollectionItemForNonNullableType(System.Object)">
            <summary>
            A string like "A null value was found in a collection, but the expected collection item type '{0}' does not allow null values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_PropertiesMustNotContainReservedChars(System.Object,System.Object)">
            <summary>
            A string like "The property name '{0}' is invalid; property names must not contain any of the reserved characters {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_MaxNumberOfEntityPropertyMappingsExceeded(System.Object,System.Object)">
            <summary>
            A string like "The maximum number of entity property mappings allowed on an entity type and all its base types has been exceeded. A total of {0} entity property mappings were found, but a maximum of {1} entity property mappings are allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ValidationUtils_InvalidMetadataReferenceProperty(System.Object)">
            <summary>
            A string like "Encountered a property '{0}' that was expected to be a reference to a location in the $metadata document but does not contain a '#' character or is otherwise not a valid metadata reference property. A metadata reference property must contain a '#' and be a valid absolute URI or begin with a '#' and be a valid URI fragment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_PropertyNameDoesntMatchFunctionImportName(System.Object,System.Object)">
            <summary>
            A string like "A top level property with name '{0}' and a producing function import with name '{1}' is being written. If the producing function import is specified the property name must be either null or must match the function import name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_ResourceCollectionMustHaveUniqueName(System.Object)">
            <summary>
            A string like "A duplicate value '{0}' was detected as the name of a resource collection. Resource collections must have unique names in a given workspace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_MessageWriterSettingsBaseUriMustBeNullOrAbsolute(System.Object)">
            <summary>
            A string like "The base URI '{0}' specified in ODataMessageWriterSettings.BaseUri is invalid; it must either be null or an absolute URI."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_EntryTypeInExpandedLinkNotCompatibleWithNavigationPropertyType(System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' of an entry in an expanded link is not compatible with the element type '{1}' of the expanded link. Entries in an expanded link must have entity types that are assignable to the element type of the expanded link."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_ExpandedLinkIsCollectionTrueWithEntryContent(System.Object)">
            <summary>
            A string like "The ODataNavigationLink with the URL value '{0}' specifies in its 'IsCollection' property that its payload is a feed, but the actual payload is an entry."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_ExpandedLinkIsCollectionFalseWithFeedContent(System.Object)">
            <summary>
            A string like "The ODataNavigationLink with the URL value '{0}' specifies in its 'IsCollection' property that its payload is an entry, but the actual payload is a feed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_ExpandedLinkIsCollectionTrueWithEntryMetadata(System.Object)">
            <summary>
            A string like "The ODataNavigationLink with the URL value '{0}' specifies in its 'IsCollection' property that its payload is a feed, but the metadata declares it as an entry."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_ExpandedLinkIsCollectionFalseWithFeedMetadata(System.Object)">
            <summary>
            A string like "The ODataNavigationLink with the URL value '{0}' specifies in its 'IsCollection' property that its payload is an entry, but the metadata declares it as feed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_ExpandedLinkWithFeedPayloadAndEntryMetadata(System.Object)">
            <summary>
            A string like "The content of the ODataNavigationLink with the URL value '{0}' is a feed, but the metadata declares it as an entry."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_ExpandedLinkWithEntryPayloadAndFeedMetadata(System.Object)">
            <summary>
            A string like "The content of the ODataNavigationLink with the URL value '{0}' is an entry, but the metadata declares it as feed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_CollectionPropertiesMustNotHaveNullValue(System.Object)">
            <summary>
            A string like "The collection property '{0}' has a null value, which is not allowed. In OData, collection properties cannot have null values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_NonNullablePropertiesMustNotHaveNullValue(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}[Nullable=False]' of type '{1}' has a null value, which is not allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_StreamPropertiesMustNotHaveNullValue(System.Object)">
            <summary>
            A string like "The stream property '{0}' has a null value, which is not allowed. In OData, stream properties cannot have null values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_OperationInRequest(System.Object)">
            <summary>
            A string like "An action or a function with metadata '{0}' was detected when writing a request; actions and functions are only supported in responses."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_AssociationLinkInRequest(System.Object)">
            <summary>
            A string like "An association link with name '{0}' could not be written to the request payload. Association links are only supported in responses."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_StreamPropertyInRequest(System.Object)">
            <summary>
            A string like "An stream property with name '{0}' could not be written to the request payload. Stream properties are only supported in responses."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_MessageWriterSettingsMetadataDocumentUriMustBeNullOrAbsolute(System.Object)">
            <summary>
            A string like "The metadata document URI '{0}' specified in ODataMessageWriterSettings.MetadataDocumentUri is invalid; it must be either null or an absolute URI."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_NavigationLinkMustSpecifyUrl(System.Object)">
            <summary>
            A string like "The ODataNavigationLink.Url property on an navigation link '{0}' is null. The ODataNavigationLink.Url property must be set to a non-null value that represents the entity or entities the navigation link references."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.WriterValidationUtils_NavigationLinkMustSpecifyIsCollection(System.Object)">
            <summary>
            A string like "The ODataNavigationLink.IsCollection property on a navigation link '{0}' is null. The ODataNavigationLink.IsCollection property must be specified when writing a link into a request."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.XmlReaderExtension_InvalidNodeInStringValue(System.Object)">
            <summary>
            A string like "An XML node of type '{0}' was found in a string value. An element with a string value can only contain Text, CDATA, SignificantWhitespace, Whitespace or Comment nodes."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.XmlReaderExtension_InvalidRootNode(System.Object)">
            <summary>
            A string like "An XML node of type '{0}' was found at the root level. The root level of an OData payload must contain a single XML element and no text nodes."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomInputContext_NonEmptyElementWithNullAttribute(System.Object)">
            <summary>
            A string like "The element '{0}' has non-empty content, an attribute with name {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:null, and value of 'true'. When an element has an attribute with name {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:null and value 'true', it must be empty."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMetadataInputContext_ErrorReadingMetadata(System.Object)">
            <summary>
            A string like "The metadata document could not be read from the message content.\r\n{0}"
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMetadataOutputContext_ErrorWritingMetadata(System.Object)">
            <summary>
            A string like "The metadata document could not be written as specified.\r\n{0}"
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_InvalidKeepInContentOnType(System.Object,System.Object)">
            <summary>
            A string like "The value of the '{0}' attribute on type '{1}' is not allowed. Supported values are 'true' or 'false'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_InvalidKeepInContentOnProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The value of the '{0}' attribute on property '{1}' of type '{2}' is not allowed. Supported values are 'true' or 'false'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_InvalidTargetTextContentKindOnType(System.Object,System.Object)">
            <summary>
            A string like "The value of the '{0}' attribute on type '{1}' is not allowed. Supported values are 'text', 'html' and 'xhtml'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_InvalidTargetTextContentKindOnProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The value of the '{0}' attribute on property '{1}' of type '{2}' is not allowed. Supported values are 'text', 'html' and 'xhtml'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_MissingAttributeOnType(System.Object,System.Object)">
            <summary>
            A string like "The required '{0}' attribute is missing on type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_MissingAttributeOnProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The required '{0}' attribute is missing on property '{1}' on type '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_AttributeNotAllowedForCustomMappingOnType(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' attribute is not allowed on type '{1}' when a property is mapped to a non-AtomPub element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_AttributeNotAllowedForCustomMappingOnProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The '{0}' attribute is not allowed on property '{1}' on type '{2}' when the property is mapped to a non-AtomPub element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_AttributeNotAllowedForAtomPubMappingOnType(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' attribute is not allowed on type '{1}' when a property is mapped to an AtomPub element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_AttributeNotAllowedForAtomPubMappingOnProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The '{0}' attribute is not allowed on property '{1}' on type '{2}' when the property is mapped to an AtomPub element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmExtensionMethods_CannotConvertEdmAnnotationValue(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The value for the annotation with namespace '{0}' and local name '{1}' is of type '{2}'. Only string values are supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomReader_FeedNavigationLinkForResourceReferenceProperty(System.Object)">
            <summary>
            A string like "A navigation link '{0}' was found with type 'feed', but its matching navigation property is of kind EntityReference. A navigation link with type 'feed' must match a navigation property of kind EntitySetReference."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomDeserializer_RelativeUriUsedWithoutBaseUriSpecified(System.Object)">
            <summary>
            A string like "A relative URI value '{0}' was specified in the payload, but no base URI for it was found. When the payload contains a relative URI, there must be an xml:base in the payload or else a base URI must specified in the reader settings."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomCollectionDeserializer_WrongCollectionItemElementName(System.Object,System.Object)">
            <summary>
            A string like "A child element of the collection was named '{0}'. Each child element representing the value of the collection must be named 'element', and each must belong to the '{1}' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomCollectionDeserializer_TopLevelCollectionElementWrongNamespace(System.Object,System.Object)">
            <summary>
            A string like "A root element in namespace '{0}' was found. A top-level collection must have the root element in the '{1}' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomPropertyAndValueDeserializer_TopLevelPropertyElementWrongNamespace(System.Object,System.Object)">
            <summary>
            A string like "A root element in namespace '{0}' was found. A top-level property payload must have the root element in the '{1}' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomPropertyAndValueDeserializer_NonEmptyElementWithNullAttribute(System.Object)">
            <summary>
            A string like "The element '{0}' has non-empty content, an attribute with name {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:null, and value of 'true'. When an element has an attribute with name {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:null and a value of 'true', it must be empty."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomPropertyAndValueDeserializer_InvalidCollectionElement(System.Object,System.Object)">
            <summary>
            A string like "The element with name '{0}' is not a valid collection item. The name of the collection item element must be 'element' and it must belong to the '{1}' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomPropertyAndValueDeserializer_NavigationPropertyInProperties(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' was found in the {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:properties element, and it is declared as a navigation property. Navigation properties in ATOM must be represented as {{http://www.w3.org/2005/Atom}}:link elements."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomPropertyAndValueSerializer_NullValueNotAllowedForInstanceAnnotation(System.Object,System.Object)">
            <summary>
            A string like "Writing null value for the instance annotation '{0}' is not allowed. The instance annotation '{0}' has the expected type '{1}[Nullable=False]'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_ElementExpected(System.Object)">
            <summary>
            A string like "A node of type '{0}' was found where a node of type 'Element' was expected. An entry must be represented as an XML element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_EntryElementWrongName(System.Object,System.Object)">
            <summary>
            A string like "An element with name '{0}' in namespace '{1}' was found; however, an entry was expected. An entry must be represented as an {{http://www.w3.org/2005/Atom}}:entry element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_ContentWithWrongType(System.Object)">
            <summary>
            A string like "The 'type' attribute on element {{http://www.w3.org/2005/Atom}}:content is either missing or has an invalid value '{0}'. Only 'application/xml' and 'application/atom+xml' are supported as the value of the 'type' attribute on the {{http://www.w3.org/2005/Atom}}:content element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_ContentWithInvalidNode(System.Object)">
            <summary>
            A string like "An XML node '{0}' was found in the {{http://www.w3.org/2005/Atom}}:content element. The only valid child nodes of the {{http://www.w3.org/2005/Atom}}:content element are insignificant nodes and the {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:properties element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_FeedElementWrongName(System.Object,System.Object)">
            <summary>
            A string like "An element with name '{0}' in namespace '{1}' was found; however, a feed was expected. A feed must be represented as a {{http://www.w3.org/2005/Atom}}:feed element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_UnknownElementInInline(System.Object)">
            <summary>
            A string like "An element with name '{0}' in namespace 'http://www.w3.org/2005/Atom' was found inside the {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:inline element. Only 'entry' and 'feed' elements from the 'http://www.w3.org/2005/Atom' namespace, or elements from other namespaces are allowed inside the {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:inline element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_MultipleExpansionsInInline(System.Object)">
            <summary>
            A string like "Another expanded '{0}' was found in {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:inline, but it already contains an expanded feed or entry. Only one expanded feed or expanded entry is allowed in the {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:inline element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_StreamPropertyWithMultipleEditLinks(System.Object)">
            <summary>
            A string like "Multiple edit links were found for the stream property '{0}'. Only one edit link is allowed for a given stream property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_StreamPropertyWithMultipleReadLinks(System.Object)">
            <summary>
            A string like "Multiple read links were found for the stream property '{0}'. Only one read link is allowed for a given stream property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_StreamPropertyWithMultipleContentTypes(System.Object)">
            <summary>
            A string like "Multiple content type values were found for the stream property '{0}'. When a stream property is represented as two {{http://www.w3.org/2005/Atom}}:link elements that both have the 'type' attribute, then both values must be the same."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_StreamPropertyDuplicatePropertyName(System.Object)">
            <summary>
            A string like "Found a stream property '{0}', but there is already another property with the same name on the entity. The stream property name cannot conflict with the name of another property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_OperationMissingMetadataAttribute(System.Object)">
            <summary>
            A string like "The 'metadata' attribute on the {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:{0} element is missing."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_OperationMissingTargetAttribute(System.Object)">
            <summary>
            A string like "The 'target' attribute on the {{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:{0} element is missing."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_MultipleLinksInEntry(System.Object)">
            <summary>
            A string like "Multiple 'link' elements with a relation of '{0}' were found on an entry. In OData, at most one link element with a '{0}' relation is allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_MultipleLinksInFeed(System.Object)">
            <summary>
            A string like "Multiple 'link' elements with a relation of '{0}' were found on a feed. In OData, at most one link element with a '{0}' relation is allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_DuplicateElements(System.Object,System.Object)">
            <summary>
            A string like "Duplicate '{{{0}}}:{1}' elements were found. In OData, at most one '{{{0}}}:{1}' element is allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_InvalidTypeAttributeOnAssociationLink(System.Object)">
            <summary>
            A string like "The value of the 'type' attribute on the association link for the navigation property '{0}' is invalid. The value of the 'type' attribute on an association link must be 'application/xml'. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_AnnotationWithNonDotTarget(System.Object,System.Object)">
            <summary>
            A string like "Encountered an 'annotation' element with a 'target' attribute value of '{0}' and a term name of '{1}'. When an 'annotation' element occurs as a direct child of an 'entry' or 'feed' element, it must have either no 'target' attribute or a 'target' attribute with a value of '.'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentDeserializer_ServiceDocumentRootElementWrongNameOrNamespace(System.Object,System.Object)">
            <summary>
            A string like "A root element with name '{0}' was found in namespace '{1}'. The root element of a service document must be named 'service' and it must belong to the 'http://www.w3.org/2007/app' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentDeserializer_UnexpectedElementInServiceDocument(System.Object)">
            <summary>
            A string like "An element with name '{0}' was found in namespace 'http://www.w3.org/2007/app'. With the exception of extension elements, a service document can contain only a single {{http://www.w3.org/2007/app}}:workspace element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentDeserializer_UnexpectedElementInWorkspace(System.Object)">
            <summary>
            A string like "An element with name '{0}' was found in namespace 'http://www.w3.org/2007/app'. A workspace element can only contain the {{http://www.w3.org/2005/Atom}}:title element, extension elements, and the {{http://www.w3.org/2007/app}}:collection element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentDeserializer_UnexpectedElementInResourceCollection(System.Object)">
            <summary>
            A string like "An element with name '{0}' was fond in namespace 'http://www.w3.org/2007/app'. A {{http://www.w3.org/2007/app}}:collection element can only contain the {{http://www.w3.org/2005/Atom}}:title element, extension elements, and the {{http://www.w3.org/2007/app}}:accept or {{http://www.w3.org/2007/app}}:categories element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntryMetadataDeserializer_InvalidTextConstructKind(System.Object,System.Object)">
            <summary>
            A string like "The type attribute with value '{0}' was fond on an Atom text construct element with local name '{1}'. The type attribute must be missing or else it must have a value 'text', 'html' or 'xhtml'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomMetadataDeserializer_MultipleSingletonMetadataElements(System.Object,System.Object)">
            <summary>
            A string like "Multiple '{0}' elements were found inside a '{1}' element. A '{1}' element cannot contain more than one '{0}' element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomErrorDeserializer_InvalidRootElement(System.Object,System.Object)">
            <summary>
            A string like "The element with name '{0}' in namespace '{1}' is not a valid root element for an error. The root element of an error must be 'error' and must belong to the 'http://schemas.microsoft.com/ado/2007/08/dataservices/metadata' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomErrorDeserializer_MultipleErrorElementsWithSameName(System.Object)">
            <summary>
            A string like "Multiple '{{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:{0}' elements were found in a top-level error value. In OData, the value of a top-level error value can have no more than one '{{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:{0}' element"
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomErrorDeserializer_MultipleInnerErrorElementsWithSameName(System.Object)">
            <summary>
            A string like "Multiple '{{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:{0}' elements were found in an inner error value. In OData, the value of an inner error value can have at most one '{{http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}}:{0}' element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntityReferenceLinkDeserializer_InvalidEntityReferenceLinkStartElement(System.Object,System.Object)">
            <summary>
            A string like "The element with name '{0}' in namespace '{1}' is not a valid start element for an entity reference link. The start element of an entity reference link must be 'uri' and it must belong to the 'http://schemas.microsoft.com/ado/2007/08/dataservices' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntityReferenceLinkDeserializer_InvalidEntityReferenceLinksStartElement(System.Object,System.Object)">
            <summary>
            A string like "The element with name '{0}' in namespace '{1}' is not a valid start element for entity reference links. The start element of entity reference links must be 'links' and it must belong to the 'http://schemas.microsoft.com/ado/2007/08/dataservices' namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomEntityReferenceLinkDeserializer_MultipleEntityReferenceLinksElementsWithSameName(System.Object,System.Object)">
            <summary>
            A string like "Multiple '{{{0}}}:{1}' elements were found in an entity reference links element. In OData, the value of an entity reference links element must have at most one '{{{0}}}:{1}' element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmReader_OpenComplexOrCollectionEpmProperty(System.Object)">
            <summary>
            A string like "The entity property mapping with source path '{0}' uses an open complex or collection property. Open complex or collection properties cannot be read through entity property mapping."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EpmSyndicationReader_MultipleValuesForNonCollectionProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Multiple values were found for the non-collection property '{0}' on type '{1}' that is mapped to '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentMetadataDeserializer_InvalidFixedAttributeValue(System.Object)">
            <summary>
            A string like "A 'fixed' attribute with the value '{0}' was found on a 'categories' element.  When the 'fixed' attribute is not missing, it must have a value of either 'yes' or 'no'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentMetadataDeserializer_MultipleTitleElementsFound(System.Object)">
            <summary>
            A string like "Multiple 'title' elements were found inside a '{0}' element. A '{0}' element can only contain a single {{http://www.w3.org/2005/Atom}}:title element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentMetadataSerializer_ResourceCollectionNameAndTitleMismatch(System.Object,System.Object)">
            <summary>
            A string like "The specified resource collection name '{0}' does not match the specified title '{1}' as set in AtomResourceCollectionMetadata.Title."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.CollectionWithoutExpectedTypeValidator_InvalidItemTypeKind(System.Object)">
            <summary>
            A string like "An invalid item type kind '{0}' was found. Items in a collection can only be of type kind 'Primitive' or 'Complex', but not of type kind '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeKind(System.Object,System.Object)">
            <summary>
            A string like "An item of type kind '{0}' was found in a collection that otherwise has items of type kind '{1}'. In OData, all items in a collection must have the same type kind."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.CollectionWithoutExpectedTypeValidator_IncompatibleItemTypeName(System.Object,System.Object)">
            <summary>
            A string like "An item with type name '{0}' was found in a collection of items with type name '{1}'. In OData, all items in a collection must have the same type name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.FeedWithoutExpectedTypeValidator_IncompatibleTypes(System.Object,System.Object)">
            <summary>
            A string like "An entry of type '{0}' was found in a feed that otherwise has entries of type '{1}'. In OData, all entries in a feed must have a common base type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MessageStreamWrappingStream_ByteLimitExceeded(System.Object,System.Object)">
            <summary>
            A string like "The maximum number of bytes allowed to be read from the stream has been exceeded. After the last read operation, a total of {0} bytes has been read from the stream; however a maximum of {1} bytes is allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataUtils_ResolveTypeName(System.Object)">
            <summary>
            A string like "The custom type resolver set in ODataMessageWriterSettings.EnableWcfDataServicesClientBehavior returned 'null' when resolving the type '{0}'. When a custom type resolver is specified, it cannot return null."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EdmValueUtils_UnsupportedPrimitiveType(System.Object)">
            <summary>
            A string like "The type '{0}' was found for a primitive value. In OData, the type '{0}' is not a supported primitive type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EdmValueUtils_IncorrectPrimitiveTypeKind(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Incompatible primitive type kinds were found. The type '{0}' was found to be of kind '{2}' instead of the expected kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EdmValueUtils_IncorrectPrimitiveTypeKindNoTypeName(System.Object,System.Object)">
            <summary>
            A string like "Incompatible primitive type kinds were found. Found type kind '{0}' instead of the expected kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EdmValueUtils_CannotConvertTypeToClrValue(System.Object)">
            <summary>
            A string like "A value with primitive kind '{0}' cannot be converted into a primitive object value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataEdmStructuredValue_UndeclaredProperty(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' is not declared on the non-open type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataModelAnnotationEvaluator_AmbiguousAnnotationTerm(System.Object,System.Object)">
            <summary>
            A string like "Multiple annotations for term '{0}' were found on element '{1}'. Only a single annotation for the term '{0}' can be specified."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataModelAnnotationEvaluator_AmbiguousAnnotationTermWithQualifier(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Multiple annotations for term '{0}' with qualifier '{1}' were found on element '{2}'. Only a single annotation for the term '{0}' with the qualifier '{1}' can be specified."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataModelAnnotationEvaluator_AnnotationTermWithInvalidQualifier(System.Object,System.Object,System.Object)">
            <summary>
            A string like "An annotation for term '{0}' with an invalid qualifier '{1}' was found on element '{2}'. Only a single annotation for the term '{0}' without any qualifier can be specified."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataModelAnnotationEvaluator_AnnotationTermWithUnsupportedQualifier(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An annotation for term '{0}' with an invalid qualifier '{1}' was found on element '{2}'. A single annotation for the term '{0}' with the qualifier '{3}' is expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMetadataBuilder_MissingEntitySetUri(System.Object)">
            <summary>
            A string like "The entity set '{0}' doesn't have the 'OData.EntitySetUri' annotation. This annotation is required."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMetadataBuilder_MissingSegmentForEntitySetUriSuffix(System.Object,System.Object)">
            <summary>
            A string like "The entity set '{0}' has a URI '{1}' which has no path segments. An entity set URI suffix cannot be appended to a URI without path segments."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataMetadataBuilder_MissingEntityInstanceUri(System.Object)">
            <summary>
            A string like "Neither the 'OData.EntityInstanceUri' nor the 'OData.EntitySetUriSuffix' annotation was found for entity set '{0}'. One of these annotations is required."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_EntityTypeMustBeCompatibleWithEntitySetBaseType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The entity type '{0}' is not compatible with the base type '{1}' of the provided entity set '{2}'. When an entity type is specified for an OData feed or entry reader, it has to be the same or a subtype of the base type of the specified entity set."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_FunctionImportCannotBeNullForCreateParameterReader(System.Object)">
            <summary>
            A string like "The parameter '{0}' is specified with a null value. For JSON Light, the '{0}' argument to the 'CreateParameterReader' method cannot be null."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightDeserializer_RequiredPropertyNotFound(System.Object,System.Object)">
            <summary>
            A string like "The required property '{0}' was not found at the expected position in the payload. Instead, found a property named '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightDeserializer_OnlyODataTypeAnnotationCanTargetInstanceAnnotation(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The annotation '{0}' was targeting the instance annotation '{1}'. Only the '{2}' annotation is allowed to target an instance annotation."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightDeserializer_AnnotationTargetingInstanceAnnotationWithoutValue(System.Object,System.Object)">
            <summary>
            A string like "The annotation '{0}' is found targeting the instance annotation '{1}'. However the value for the instance annotation '{1}' is not found immediately after. In JSON Light, an annotation targeting an instance annotation must be immediately followed by the value of the targeted instance annotation."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriBuilder_ValidateDerivedType(System.Object,System.Object)">
            <summary>
            A string like "The base type '{0}' of the entity set specified for writing a JSON Light payload is not assignable from the specified entity type '{1}'. When an entity type is specified it has to be the same or derived from the base type of the entity set."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_UnexpectedAnnotationProperties(System.Object)">
            <summary>
            A string like "The annotation '{0}' was found. This annotation is either not recognized or not expected at the current position."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_UnexpectedPropertyAnnotation(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' has a property annotation '{1}'. This annotation is either not recognized or not expected at the current position."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_UnexpectedODataPropertyAnnotation(System.Object)">
            <summary>
            A string like "An OData property annotation '{0}' was found. This property annotation is either not recognized or not expected at the current position."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_UnexpectedProperty(System.Object)">
            <summary>
            A string like "A property with name '{0}' was found. This property is either not recognized or not expected at the current position."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_InvalidTopLevelPropertyName(System.Object,System.Object)">
            <summary>
            A string like "A top-level property with name '{0}' was found in the payload; however, property and collection payloads must always have a top-level property with name '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_InvalidTypeName(System.Object)">
            <summary>
            A string like "The 'odata.type' instance annotation value '{0}' is not a valid type name. The value of the 'odata.type' instance annotation must be a non-empty string."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_InvalidPrimitiveTypeName(System.Object)">
            <summary>
            A string like "The 'odata.type' instance annotation value '{0}' is not valid. The type name can only be specified when the primitive property is a spatial property. Please make sure that the type name is either a spatial type name or a non-primitive type name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_TopLevelPropertyAnnotationWithoutProperty(System.Object)">
            <summary>
            A string like "One or more property annotations for property '{0}' were found in the top-level property or collection payload without the property to annotate. Top-level property and collection payloads must contain a single property, with optional annotations for this property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_ComplexValuePropertyAnnotationWithoutProperty(System.Object)">
            <summary>
            A string like "One or more property annotations for property '{0}' were found in the complex value without the property to annotate. Complex values must only contain property annotations for existing properties."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_ComplexValueWithPropertyTypeAnnotation(System.Object)">
            <summary>
            A string like "A complex property with an '{0}' property annotation was found. Complex properties must not have the '{0}' property annotation, instead the '{0}' should be specified as an instance annotation in the complex value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_UnexpectedDataPropertyAnnotation(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' has a property annotation '{1}'. Primitive, complex, collection or open properties can only have an 'odata.type' property annotation."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_TypePropertyAfterValueProperty(System.Object,System.Object)">
            <summary>
            A string like "The property with name '{0}' was found after the data property with name '{1}'. If a type is specified for a data property, it must appear before the data property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_ODataTypeAnnotationInPrimitiveValue(System.Object)">
            <summary>
            A string like "An '{0}' annotation was read inside a JSON object representing a primitive value; type annotations for primitive values have to be property annotations of the owning property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_TopLevelPropertyWithPrimitiveNullValue(System.Object,System.Object)">
            <summary>
            A string like "A top-level property with an invalid primitive null value was found. In OData, top-level properties with null value have to be serialized as JSON object with an '{0}' annotation that has the value '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_UnexpectedMetadataReferenceProperty(System.Object)">
            <summary>
            A string like "Encountered a metadata reference property '{0}' in a scope other than an entry. In OData, a property name with a '#' character indicates a reference into the metadata and is only supported for describing operations bound to an entry."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_NoPropertyAndAnnotationAllowedInNullPayload(System.Object)">
            <summary>
            A string like "The property with name '{0}' was found in a null payload. In OData, no properties or OData annotations can appear in a null payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_EdmNullInMetadataUriWithoutNullValueInPayload(System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the null value; however the payload is not a null value payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightReaderUtils_AnnotationWithNullValue(System.Object)">
            <summary>
            A string like "The '{0}' instance or property annotation has a null value. In OData, the '{0}' instance or property annotation must have a non-null string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightReaderUtils_InvalidValueForODataNullAnnotation(System.Object,System.Object)">
            <summary>
            A string like "An '{0}' annotation was found with an invalid value. In OData, the only valid value for the '{0}' annotation is '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonLightInstanceAnnotationWriter_DuplicateAnnotationNameInCollection(System.Object)">
            <summary>
            A string like "The InstanceAnnotations collection has more than one instance annotations with the name '{0}'. All instance annotation names must be unique within the collection."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_ServiceDocumentUriMustNotHaveFragment(System.Object)">
            <summary>
            A string like "The metadata URI '{0}' was found in a service document payload. Metadata URIs for service documents must not have a fragment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_MetadataUriDoesNotMatchExpectedPayloadKind(System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' is not valid for the expected payload kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidEntitySetNameOrTypeName(System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the entity set or type '{1}'. However, no entity set or type with name '{1}' is declared in the metadata."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidPropertyName(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the property '{1}' on type '{2}'. However, type '{2}' does not declare a property with name '{1}' and is not an open type. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidEntityWithTypeCastUriSuffix(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' ends with the suffix '{1}'. However, a metadata URI containing an entity set and type cast must either have no suffix or end in '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidEntityTypeInTypeCast(System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' includes a type cast to entity type '{1}'. However, no entity type '{1}' is declared in the metadata."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_IncompatibleEntityTypeInTypeCast(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' includes a type cast to entity type '{1}'. However, the entity type '{1}' is not a subtype of the entity type '{2}' which is the base type of the entity set with name '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidEntityReferenceLinkUriSuffix(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' ends with the suffix '{1}'. However, a metadata URI for an entity reference link containing a collection navigation property must end in '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidPropertyForEntityReferenceLinkUri(System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the property with name '{1}'. However, a metadata URI for an entity reference link must reference a navigation property which '{1}' is not."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidSingletonNavPropertyForEntityReferenceLinkUri(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the singleton navigation property with name '{1}'. However, when a metadata URI for an entity reference link ends in '{2}' it must reference a collection navigation property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_FragmentWithInvalidNumberOfParts(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' has a fragment with '{1}' parts. However, valid metadata URIs must have at most '{2}' parts."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidEntitySetOrFunctionImportName(System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the entity set or function import '{1}'. However, no entity set or function import with name '{1}' is declared in the metadata."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidPayloadKindWithSelectQueryOption(System.Object)">
            <summary>
            A string like "A '$select' query option was found for the payload kind '{0}'. In OData, a '$select' query option is only supported for payload kinds 'Entry' and 'Feed'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidAssociationLink(System.Object)">
            <summary>
            A string like "The metadata URI '{0}' has $links in an invalid position. The Metadata URI must specify the entity set, optional type segment, $links, a navigation property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_InvalidEntitySetName(System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the entity set '{1}'. However, no entity set name '{1}' is declared in the metadata."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_EntryInstanceAnnotationPrecededByProperty(System.Object)">
            <summary>
            A string like "The '{0}' instance annotation in an entry object is preceded by a property or property annotation. In OData, the '{0}' instance annotation must be before any property or property annotation in an entry object."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_CannotReadFeedContentStart(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the start of the content of a feed; however, a node of type 'StartArray' was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_ExpectedFeedPropertyNotFound(System.Object)">
            <summary>
            A string like "Did not find the required '{0}' property for the expected feed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_InvalidNodeTypeForItemsInFeed(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the entries of a feed; however, a node of type 'StartObject' or 'EndArray' was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_InvalidPropertyAnnotationInTopLevelFeed(System.Object)">
            <summary>
            A string like "A property annotation for a property with name '{0}' was found when reading a top-level feed. No property annotations, only instance annotations are allowed when reading top-level feeds."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_InvalidPropertyInTopLevelFeed(System.Object,System.Object)">
            <summary>
            A string like "A property with name '{0}' was found when reading a top-level feed. No properties other than the feed property with name '{1}' are allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_PropertyWithoutValueWithWrongType(System.Object,System.Object)">
            <summary>
            A string like "A property '{0}' which only has property annotations in the payload but no property value is declared to be of type '{1}'. In OData, only navigation properties and named streams can be represented as properties without values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_OpenPropertyWithoutValue(System.Object)">
            <summary>
            A string like "A property '{0}' which only has property annotations in the payload but no property value is an open property. In OData, open property must be represented as a property with value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_UnexpectedStreamPropertyAnnotation(System.Object,System.Object)">
            <summary>
            A string like "The stream property '{0}' has a property annotation '{1}'. Stream property can only have the 'odata.mediaEditLink', 'odata.mediaReadLink', 'odata.mediaETag' and 'odata.mediaContentType' property annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_StreamPropertyWithValue(System.Object)">
            <summary>
            A string like "A stream property '{0}' has a value in the payload. In OData, stream property must not have a value, it must only use property annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_UnexpectedDeferredLinkPropertyAnnotation(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' has a property annotation '{1}'. Deferred navigation links can only have the 'odata.navigationLinkUrl' and 'odata.associationLinkUrl' property annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_CannotReadSingletonNavigationPropertyValue(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the contents of a resource reference navigation link; however, a 'StartObject' node or 'PrimitiveValue' node with null value was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_CannotReadCollectionNavigationPropertyValue(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the contents of an entity set reference navigation link; however, a 'StartArray' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_UnexpectedExpandedSingletonNavigationLinkPropertyAnnotation(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' has a property annotation '{1}'. Expanded entry navigation links can only have the 'odata.navigationLinkUrl' and 'odata.associationLinkUrl' property annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_UnexpectedExpandedCollectionNavigationLinkPropertyAnnotation(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' has a property annotation '{1}'. Expanded feed navigation links can only have the 'odata.navigationLinkUrl', 'odata.associationLinkUrl' and 'odata.nextLink' property annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_DuplicateExpandedFeedAnnotation(System.Object,System.Object)">
            <summary>
            A string like "Multiple property annotations '{0}' were found when reading the expanded navigation link '{1}'. Only a single property annotation '{0}' can be specified for an expanded navigation link."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_UnexpectedPropertyAnnotationAfterExpandedFeed(System.Object,System.Object)">
            <summary>
            A string like "A property annotation '{0}' was found after the property '{1}' it is annotating. Only the 'odata.nextLink' property annotation can be used after the property it is annotating."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_AnnotationGroupMemberWithoutName(System.Object)">
            <summary>
            A string like "An annotation group member with an empty name was found for the annotation group with name '{0}'. In OData, annotation group members must have a non-null, non-empty names."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_AnnotationGroupMemberWithInvalidValue(System.Object,System.Object,System.Object)">
            <summary>
            A string like "An annotation group member with name '{0}' in annotation group '{1}' has an invalid value. In OData, annotation group member values must be strings; values of type '{2}' are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_UnexpectedNavigationLinkInRequestPropertyAnnotation(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' has a property annotation '{1}'. Navigation links in request payloads can only have the '{2}' property annotation."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_ArrayValueForSingletonBindPropertyAnnotation(System.Object,System.Object)">
            <summary>
            A string like "The resource reference navigation property '{0}' has a property annotation '{1}' with an array value. Resource reference navigation properties can only have a property annotation '{1}' with a string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_StringValueForCollectionBindPropertyAnnotation(System.Object,System.Object)">
            <summary>
            A string like "The resource set reference navigation property '{0}' has a property annotation '{1}' with a string value. Resource set reference navigation properties can only have a property annotation '{1}' with an array value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_EmptyBindArray(System.Object)">
            <summary>
            A string like "The value of '{0}' property annotation is an empty array. The '{0}' property annotation must have a non-empty array as its value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_NavigationPropertyWithoutValueAndEntityReferenceLink(System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' has no expanded value and no '{1}' property annotation. Navigation property in request without expanded value must have the '{1}' property annotation."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_SingletonNavigationPropertyWithBindingAndValue(System.Object,System.Object)">
            <summary>
            A string like "The resource reference navigation property '{0}' has both the '{1}' property annotation as well as a value. Resource reference navigation properties can have either '{1}' property annotations or values, but not both."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_PropertyWithoutValueWithUnknownType(System.Object)">
            <summary>
            A string like "An undeclared property '{0}' which only has property annotations in the payload but no property value was found in the payload. In OData, only declared navigation properties and declared named streams can be represented as properties without values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_InvalidFunctionImportName(System.Object,System.Object)">
            <summary>
            A string like "The metadata URI '{0}' references the function import '{1}'. However, no or multiple function imports with name '{1}' are declared in the metadata."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_FunctionImportIsNotActionOrFunction(System.Object)">
            <summary>
            A string like "Encountered the function import '{0}' which can not be resolved to an ODataAction or ODataFunction."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_MultipleOptionalPropertiesInOperation(System.Object,System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found for an operation '{1}'. In OData, an operation can have at most one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_MultipleTargetPropertiesInOperation(System.Object)">
            <summary>
            A string like "Multiple 'target' properties were found for an operation '{0}'. In OData, an operation must have exactly one 'target' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_OperationMissingTargetProperty(System.Object)">
            <summary>
            A string like "Multiple target bindings encountered for the operation '{0}' but the 'target' property was not found in an operation value. To differentiate between multiple target bindings, each operation value must have exactly one 'target' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightValidationUtils_OperationPropertyCannotBeNull(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' property of the operation '{1}' cannot have a null value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightValidationUtils_OpenMetadataReferencePropertyNotSupported(System.Object,System.Object)">
            <summary>
            A string like "Encountered a reference into metadata '{0}' which does not refer to the known metadata url '{1}'. Open metadata reference properties are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightDeserializer_RelativeUriUsedWithouODataMetadataAnnotation(System.Object,System.Object)">
            <summary>
            A string like "A relative URI value '{0}' was specified in the payload, but the {1} annotation is missing from the payload. The payload must only contain absolute URIs or the {1} annotation must be on the payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntryMetadataContext_MetadataAnnotationMustBeInPayload(System.Object)">
            <summary>
            A string like "The {0} annotation is missing from the payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightCollectionDeserializer_ExpectedCollectionPropertyNotFound(System.Object)">
            <summary>
            A string like "When trying to read the start of a collection, the expected collection property with name '{0}' was not found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightCollectionDeserializer_CannotReadCollectionContentStart(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the items of a collection; however, a 'StartArray' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightCollectionDeserializer_CannotReadCollectionEnd(System.Object)">
            <summary>
            A string like "A property or annotation for a property with name '{0}' or an instance annotation with name '{0}' was found after reading the items of a top-level collection. No additional properties or annotations are allowed after the collection property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightCollectionDeserializer_InvalidCollectionTypeName(System.Object)">
            <summary>
            A string like "An 'odata.type' annotation with value '{0}' was found for a top-level collection payload; however, top-level collections must specify a collection type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_EntityReferenceLinkMustBeObjectValue(System.Object)">
            <summary>
            A string like "A node of type '{0}' was read from the JSON reader when trying to read the start of an entity reference link. In JSON Light, entity reference links must be objects."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_PropertyAnnotationForEntityReferenceLink(System.Object)">
            <summary>
            A string like "A property annotation with name '{0}' was detected when reading an entity reference link; entity reference links do not support property annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_InvalidAnnotationInEntityReferenceLink(System.Object)">
            <summary>
            A string like "An instance annotation with name '{0}' or a property annotation for the property with name '{0}' was found when reading an entity reference link. No OData property or instance annotations are allowed when reading entity reference links."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_InvalidPropertyInEntityReferenceLink(System.Object,System.Object)">
            <summary>
            A string like "A property with name '{0}' was found when reading an entity reference link. No properties other than the entity reference link property with name '{1}' are allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_MissingEntityReferenceLinkProperty(System.Object)">
            <summary>
            A string like "The required property '{0}' for an entity reference link was not found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_MultipleUriPropertiesInEntityReferenceLink(System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found in an entity reference link object; however, a single '{0}' property was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_EntityReferenceLinkUrlCannotBeNull(System.Object)">
            <summary>
            A string like "The '{0}' property of an entity reference link object cannot have a null value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_InvalidEntityReferenceLinksPropertyFound(System.Object,System.Object)">
            <summary>
            A string like "A property with name '{0}' or a property annotation for a property with name '{0}' was found when trying to read a collection of entity reference links; however, a property with name '{1}' was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_InvalidPropertyAnnotationInEntityReferenceLinks(System.Object)">
            <summary>
            A string like "A property annotation for a property with name '{0}' was found when reading an entity reference links payload. No property annotations, only instance annotations are allowed when reading entity reference links."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_ExpectedEntityReferenceLinksPropertyNotFound(System.Object)">
            <summary>
            A string like "Did not find the required '{0}' property for an entity reference links payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonOperationsDeserializerUtils_OperationPropertyCannotBeNull(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The '{0}' property of an operation '{1}' in '{2}' cannot have a null value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonOperationsDeserializerUtils_OperationsPropertyMustHaveObjectValue(System.Object,System.Object)">
            <summary>
            A string like "Found a node of type '{1}' when starting to read the '{0}' operations value, however a node of type 'StartObject' was expected. The '{0}' operations value must have an object value. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonOperationsDeserializerUtils_RepeatMetadataValue(System.Object,System.Object)">
            <summary>
            A string like "The '{0}' operations object can only have one property for each distinct metadata; however, a duplicate of metadata '{1}' was found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonOperationsDeserializerUtils_MetadataMustHaveArrayValue(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Found a node of type '{1}' when starting to read the value of the '{0}' property in '{2}'; however, a node of type 'StartArray' was expected. The value of each property in the '{2}' operations object must be an array value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonOperationsDeserializerUtils_OperationMetadataArrayExpectedAnObject(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Found a node of type '{1}' when reading an item in the array value of the '{0}' property; however, a node of type 'StartObject' was expected. The items in the array value for the '{0}' property in the '{2}' operations object must be object values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonOperationsDeserializerUtils_MultipleOptionalPropertiesInOperation(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found for an operation '{1}' in '{2}'. In OData, an operation can have at most one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonOperationsDeserializerUtils_MultipleTargetPropertiesInOperation(System.Object,System.Object)">
            <summary>
            A string like "Multiple 'target' properties were found for an operation '{0}' in '{1}'. In OData, an operation must have exactly one 'target' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonOperationsDeserializerUtils_OperationMissingTargetProperty(System.Object,System.Object)">
            <summary>
            A string like "The 'target' property was not found in an operation '{0}' in '{1}'. In OData, an operation must have exactly one 'target' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_DuplicatePropertiesInServiceDocument(System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found in a service document. In OData, a service document must have exactly one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_DuplicatePropertiesInResourceCollection(System.Object)">
            <summary>
            A string like "Multiple '{0}' properties were found in a resource collection in a service document. In OData, a resource collection must have exactly one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_MissingValuePropertyInServiceDocument(System.Object)">
            <summary>
            A string like "No '{0}' property was found for a service document. In OData, a service document must have exactly one '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_MissingRequiredPropertyInResourceCollection(System.Object)">
            <summary>
            A string like "Encountered a resource collection without a '{0}' property. In service documents, resource collections must contain a '{0}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_PropertyAnnotationInServiceDocument(System.Object,System.Object)">
            <summary>
            A string like "An unrecognized property annotation '{0}' was found in a '{1}' object in a service document. OData property annotations are not allowed in workspaces."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_InstanceAnnotationInServiceDocument(System.Object,System.Object)">
            <summary>
            A string like "An unrecognized instance annotation '{0}' was found in a '{1}' object in a service document. OData instance annotations are not allowed in workspaces."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_PropertyAnnotationInResourceCollection(System.Object)">
            <summary>
            A string like "An unrecognized property annotation '{0}' was found in a resource collection in a service document. OData property annotations are not allowed in resource collections."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_InstanceAnnotationInResourceCollection(System.Object)">
            <summary>
            A string like "An unrecognized instance annotation '{0}' was found in a resource collection in a service document. OData instance annotations are not allowed in resource collections."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_UnexpectedPropertyInResourceCollection(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Encountered unexpected property '{0}' in a resource collection. In service documents, resource collections may only have '{1}' and '{2}' properties."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_UnexpectedPropertyInServiceDocument(System.Object,System.Object)">
            <summary>
            A string like "Encountered unexpected property '{0}' in a service document. The top level object of a service document may only have a '{1}' property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentDeserializer_PropertyAnnotationWithoutProperty(System.Object)">
            <summary>
            A string like "Encountered a property annotation for the property '{0}' which wasn't immediately followed by the property. Property annotations must occur directly before the property being annotated."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightParameterDeserializer_PropertyAnnotationWithoutPropertyForParameters(System.Object)">
            <summary>
            A string like "One or more property annotations for property '{0}' were found in a parameter payload without the property to annotate. Parameter payloads must not contain property annotations for properties that are not in the payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightParameterDeserializer_UnsupportedPrimitiveParameterType(System.Object,System.Object)">
            <summary>
            A string like "The parameter '{0}' is of the '{1}' primitive type, which is not supported in JSON Light."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightParameterDeserializer_NullCollectionExpected(System.Object,System.Object)">
            <summary>
            A string like "When trying to read a null collection parameter value in JSON Light, a node of type '{0}' with the value '{1}' was read from the JSON reader; however, a primitive 'null' value was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightParameterDeserializer_UnsupportedParameterTypeKind(System.Object,System.Object)">
            <summary>
            A string like "The parameter '{0}' is of an unsupported type kind '{1}'. Only primitive, complex, primitive collection and complex collection types are supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightErrorDeserializer_PropertyAnnotationNotAllowedInErrorPayload(System.Object)">
            <summary>
            A string like "An OData property annotation '{0}' was found in an error payload; however, error payloads do not support OData property annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightErrorDeserializer_InstanceAnnotationNotAllowedInErrorPayload(System.Object)">
            <summary>
            A string like "An OData instance annotation '{0}' was found in an error payload; however, error payloads do not support OData instance annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightErrorDeserializer_PropertyAnnotationWithoutPropertyForError(System.Object)">
            <summary>
            A string like "One or more property annotations for property '{0}' were found in an error payload without the property to annotate. Error payloads must not contain property annotations for properties that are not in the payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataJsonLightErrorDeserializer_TopLevelErrorValueWithInvalidProperty(System.Object)">
            <summary>
            A string like "A property with name '{0}' was found in the error value of a top-level error. In OData, a top-level error value can only have properties with name 'code', 'message', or 'innererror', or custom instance annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataConventionalUriBuilder_EntityTypeWithNoKeyProperties(System.Object)">
            <summary>
            A string like "The entity type '{0}' has no key properties. Entity types must define at least one key property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataConventionalUriBuilder_NullKeyValue(System.Object,System.Object)">
            <summary>
            A string like "The key property '{0}' on type '{1}' has a null value. Key properties must not have null values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataEntryMetadataContext_EntityTypeWithNoKeyProperties(System.Object)">
            <summary>
            A string like "An ODataEntry of type '{0}' is found without key properties. When writing without a user model, each entry must contain at least one property whose 'ODataProperty.SerializationInfo.PropertyKind' set to 'ODataPropertyKind.Key'. When writing with a user model, the entity type '{0}' defined in the model must define at least one key property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataEntryMetadataContext_NullKeyValue(System.Object,System.Object)">
            <summary>
            A string like "The key property '{0}' on type '{1}' has a null value. Key properties must not have null values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataEntryMetadataContext_KeyOrETagValuesMustBePrimitiveValues(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is a non-primitive value. All key and etag properties must be of primitive types."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EdmValueUtils_NonPrimitiveValue(System.Object,System.Object)">
            <summary>
            A string like "The primitive property '{0}' on type '{1}' has a value which is not a primitive value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.EdmValueUtils_PropertyDoesntExist(System.Object,System.Object)">
            <summary>
            A string like "The entity instance value of type '{0}' doesn't have a value for property '{1}'. To compute an entity's metadata, its key and concurrency-token property values must be provided."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonLightAnnotationGroupDeserializer_InvalidAnnotationFoundInsideAnnotationGroup(System.Object)">
            <summary>
            A string like "Encountered an annotation group containing a property '{0}' which is not a valid annotation name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonLightAnnotationGroupDeserializer_InvalidAnnotationFoundInsideNamedAnnotationGroup(System.Object,System.Object)">
            <summary>
            A string like "Encountered an annotation group named '{0}' containing a property '{1}' which is not a valid annotation name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonLightAnnotationGroupDeserializer_UndefinedAnnotationGroupReference(System.Object)">
            <summary>
            A string like "Encountered a reference to an annotation group named '{0}', but no annotation group with that name has been defined at this point in the payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonLightAnnotationGroupDeserializer_MultipleAnnotationGroupsWithSameName(System.Object)">
            <summary>
            A string like "Encountered multiple annotation group named '{0}'. Annotation group names must be unique within a payload."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataPrimitiveValue_CannotCreateODataPrimitiveValueFromUnsupportedValueType(System.Object)">
            <summary>
            A string like "An ODataPrimitiveValue was instantiated with a value of type '{0}'. ODataPrimitiveValue can only wrap values which can be represented as primitive EDM types."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataInstanceAnnotation_NeedPeriodInName(System.Object)">
            <summary>
            A string like "'{0}' is an invalid instance annotation name. An instance annotation name must contain a period that is not at the start or end of the name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataInstanceAnnotation_ReservedNamesNotAllowed(System.Object,System.Object)">
            <summary>
            A string like "'{0}' is a reserved instance annotation name because it starts with '{1}'. Reserved names are not allowed for custom instance annotations."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataInstanceAnnotation_BadTermName(System.Object)">
            <summary>
            A string like "'{0}' is an invalid instance annotation name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.AtomInstanceAnnotation_AttributeValueNotationUsedWithIncompatibleType(System.Object,System.Object)">
            <summary>
            A string like "The value of the 'type' attribute on an 'annotation' element was '{0}', which is incompatible with the '{1}' attribute."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.AtomInstanceAnnotation_AttributeValueNotationUsedOnNonEmptyElement(System.Object)">
            <summary>
            A string like "Encountered the attribute '{0}' on a non-empty 'annotation' element. If attribute value notation is used to specify the annotation's value, then there can be no body to the element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.AnnotationFilterPattern_InvalidPatternMissingDot(System.Object)">
            <summary>
            A string like "The pattern '{0}' is not a valid pattern to match an annotation. It must contain at least one '.' separating the namespace and the name segments of an annotation."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.AnnotationFilterPattern_InvalidPatternEmptySegment(System.Object)">
            <summary>
            A string like "The pattern '{0}' is not a valid pattern to match an annotation. It must not contain a namespace or name segment that is empty."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.AnnotationFilterPattern_InvalidPatternWildCardInSegment(System.Object)">
            <summary>
            A string like "The pattern '{0}' is not a supported pattern to match an annotation. It must not contain '*' as part of a segment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.AnnotationFilterPattern_InvalidPatternWildCardMustBeInLastSegment(System.Object)">
            <summary>
            A string like "The pattern '{0}' is not a supported pattern to match an annotation. '*' must be the last segment of the pattern."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataQueryUtils_DidNotFindServiceOperation(System.Object)">
            <summary>
            A string like "A service operation with name '{0}' could not be found in the provided model."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataQueryUtils_FoundMultipleServiceOperations(System.Object)">
            <summary>
            A string like "Found multiple service operations with name '{0}' in a single entity container. Service operation overloads are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataQueryUtils_DidNotFindEntitySet(System.Object)">
            <summary>
            A string like "An entity set with name '{0}' could not be found in the provided model."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.BinaryOperatorQueryNode_InvalidOperandType(System.Object,System.Object)">
            <summary>
            A string like "Only operands with primitive types are allowed in binary operators. Found operand types '{0}' and '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.BinaryOperatorQueryNode_OperandsMustHaveSameTypes(System.Object,System.Object)">
            <summary>
            A string like "Both operands of a binary operators must have the same type. Found different operand types '{0}' and '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SyntacticTree_UriMustBeAbsolute(System.Object)">
            <summary>
            A string like "The specified URI '{0}' must be absolute."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SyntacticTree_InvalidSkipQueryOptionValue(System.Object)">
            <summary>
            A string like "Invalid value '{0}' for $skip query option found. The $skip query option requires a non-negative integer value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SyntacticTree_InvalidTopQueryOptionValue(System.Object)">
            <summary>
            A string like "Invalid value '{0}' for $top query option found. The $top query option requires a non-negative integer value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SyntacticTree_InvalidInlineCountQueryOptionValue(System.Object,System.Object)">
            <summary>
            A string like "Invalid value '{0}' for $inlinecount query option found. Valid values are '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.QueryOptionUtils_QueryParameterMustBeSpecifiedOnce(System.Object)">
            <summary>
            A string like "Query option '{0}' was specified more than once, but it must be specified at most once."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriBuilder_NotSupportedClrLiteral(System.Object)">
            <summary>
            A string like "The CLR literal of type '{0}' is not supported to be written as a Uri part."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriBuilder_NotSupportedQueryToken(System.Object)">
            <summary>
            A string like "QueryToken '{0}' is not supported to be written as a Uri part."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryExpressionParser_ExpressionExpected(System.Object,System.Object)">
            <summary>
            A string like "Expression expected at position {0} in '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryExpressionParser_OpenParenExpected(System.Object,System.Object)">
            <summary>
            A string like "'(' expected at position {0} in '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryExpressionParser_CloseParenOrCommaExpected(System.Object,System.Object)">
            <summary>
            A string like "')' or ',' expected at position {0} in '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryExpressionParser_CloseParenOrOperatorExpected(System.Object,System.Object)">
            <summary>
            A string like "')' or operator expected at position {0} in '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryExpressionParser_CannotCreateStarTokenFromNonStar(System.Object)">
            <summary>
            A string like "Expecting a Star token but got: '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryExpressionParser_RangeVariableAlreadyDeclared(System.Object)">
            <summary>
            A string like "The range variable '{0}' has already been declared."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryPathParser_RequestUriDoesNotHaveTheCorrectBaseUri(System.Object,System.Object)">
            <summary>
            A string like "The URI '{0}' is not valid because it is not based on '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryPathParser_InvalidKeyValueLiteral(System.Object)">
            <summary>
            A string like "The key value '{0}' was not recognized as a valid literal."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.PropertyInfoTypeAnnotation_CannotFindProperty(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Unable to find property '{2}' on the instance type '{1}' of the structured type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_UnsupportedQueryTokenKind(System.Object)">
            <summary>
            A string like "An unsupported query token kind '{0}' was found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_RootSegmentResourceNotFound(System.Object)">
            <summary>
            A string like "Could not find an entity set for root segment '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_KeyValueApplicableOnlyToEntityType(System.Object)">
            <summary>
            A string like "Type '{0}' is not an entity type. Key value can only be applied to an entity type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_PropertyNotDeclared(System.Object,System.Object)">
            <summary>
            A string like "Could not find a property named '{1}' on type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_PropertyNotDeclaredOrNotKeyInKeyValue(System.Object,System.Object)">
            <summary>
            A string like "Property '{0}' is not declared on type '{1}' or is not a key property. Only key properties can be used in key lookups."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_UnnamedKeyValueOnTypeWithMultipleKeyProperties(System.Object)">
            <summary>
            A string like "An unnamed key value was used in a key lookup on a type '{0}' which has more than one key property. Unnamed key value can only be used on a type with one key property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_DuplicitKeyPropertyInKeyValues(System.Object)">
            <summary>
            A string like "A key property '{0}' was found twice in a key lookup. Each key property can be specified just once in a key lookup."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_NotAllKeyPropertiesSpecifiedInKeyValues(System.Object)">
            <summary>
            A string like "A key lookup on type '{0}' didn't specify values for all key properties. All key properties must be specified in a key lookup."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_CannotConvertToType(System.Object,System.Object)">
            <summary>
            A string like "Expression of type '{0}' cannot be converted to type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_NonQueryableServiceOperationWithKeyLookup(System.Object)">
            <summary>
            A string like "Segment '{0}' which is a service operation returning non-queryable result has a key lookup. Only service operations returning queryable results can have a key lookup applied to them."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_QueryServiceOperationOfNonEntityType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Service operation '{0}' of kind '{1}' returns type '{2}' which is not an entity type. Service operations of kind QueryWithMultipleResults or QueryWithSingleResult can only return entity types."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_ServiceOperationParameterMissing(System.Object,System.Object)">
            <summary>
            A string like "Service operation '{0}' is missing the required parameter '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_ServiceOperationParameterInvalidType(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The parameter '{0}' with value '{1}' for the service operation '{2}' is not a valid literal of type '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_MultiValuePropertyNotSupportedInExpression(System.Object)">
            <summary>
            A string like "The MultiValue property '{0}' cannot be used in $filter or $orderby query expression. MultiValue properties are not supported with these query options."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_BinaryOperatorOperandNotSingleValue(System.Object)">
            <summary>
            A string like "The operand for a binary operator '{0}' is not a single value. Binary operators require both operands to be single values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_UnaryOperatorOperandNotSingleValue(System.Object)">
            <summary>
            A string like "The operand for a unary operator '{0}' is not a single value. Unary operators require the operand to be a single value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_PropertyAccessSourceNotSingleValue(System.Object)">
            <summary>
            A string like "The parent value for a property access of a property '{0}' is not a single value. Property access can only be applied to a single value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_IncompatibleOperandsError(System.Object,System.Object,System.Object)">
            <summary>
            A string like "A binary operator with incompatible types was detected. Found operand types '{0}' and '{1}' for operator kind '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_IncompatibleOperandError(System.Object,System.Object)">
            <summary>
            A string like "A unary operator with an incompatible type was detected. Found operand type '{0}' for operator kind '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_UnknownFunction(System.Object)">
            <summary>
            A string like "An unknown function with name '{0}' was found. This may also be a key lookup on a navigation property, which is not allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_FunctionArgumentNotSingleValue(System.Object)">
            <summary>
            A string like "The argument for an invocation of a function with name '{0}' is not a single value. All arguments for this function must be single values."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_NoApplicableFunctionFound(System.Object,System.Object)">
            <summary>
            A string like "No function signature for the function with name '{0}' matches the specified arguments. The function signatures considered are: {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_UnsupportedSystemQueryOption(System.Object)">
            <summary>
            A string like "The system query option '{0}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_BoundNodeCannotBeNull(System.Object)">
            <summary>
            A string like "A token of kind '{0}' was bound to the value null; this is invalid. A query token must always be bound to a non-null query node."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_TopRequiresNonNegativeInteger(System.Object)">
            <summary>
            A string like "The value '{0}' is not a non-negative integer value. In OData, the $top query option must specify a non-negative integer value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_SkipRequiresNonNegativeInteger(System.Object)">
            <summary>
            A string like "The value '{0}' is not a non-negative integer value. In OData, the $skip query option must specify a non-negative integer value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_ServiceOperationWithoutResultKind(System.Object)">
            <summary>
            A string like " The service operation '{0}' does not have an associated result kind. Without a result kind, a service operation cannot be bound."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_HierarchyNotFollowed(System.Object,System.Object)">
            <summary>
            A string like "Encountered invalid type cast. '{0}' is not assignable from '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_ParameterNotInScope(System.Object)">
            <summary>
            A string like "The parameter '{0}' is not in scope."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_CastOrIsOfExpressionWithWrongNumberOfOperands(System.Object)">
            <summary>
            A string like "The Cast or IsOf expression has an invalid number of operands: number of operands is '{0}' and it should be 1 or 2."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_SpatialLengthFunctionWithInvalidArgs(System.Object)">
            <summary>
            A string like "The geo.length function has an invalid number of operands: number of operands is '{0}' and it should be 1."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_SpatialIntersectsFunctionWithInvalidArgs(System.Object)">
            <summary>
            A string like "The geo.intersects function has an invalid number of operands: number of operands is '{0}' and it should be 2."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_OperatorNotSupportedInThisVersion(System.Object)">
            <summary>
            A string like "The operator '{0}' is not supported in this release. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_KeywordNotSupportedInThisRelease(System.Object)">
            <summary>
            A string like "'{0}' queries are not supported in this release."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_IllegalSegmentType(System.Object)">
            <summary>
            A string like "Can only bind segments that are Navigation, Structural, Complex, or Collections. We found a segment '{0}' that isn't any of those. Please revise the query."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.MetadataBinder_QueryOptionNotApplicable(System.Object)">
            <summary>
            A string like "The '{0}' option cannot be applied to the query path. '{0}' can only be applied to a collection of entities. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.FunctionCallBinder_CannotFindASuitableOverload(System.Object,System.Object)">
            <summary>
            A string like "Cannot find a suitable overload for function '{0}' that takes '{1}' arguments."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.FunctionCallBinder_NonSingleValueParent(System.Object)">
            <summary>
            A string like "Cannot compose function '{0}' to a parent doesn't represent a single value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.FunctionCallBinder_FoundInvalidFunctionImports(System.Object)">
            <summary>
            A string like "Found a function import for '{0}', but it is invalid for Filter/Orderby."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.FunctionCallBinder_BuiltInFunctionMustHaveHaveNullParent(System.Object)">
            <summary>
            A string like "Found a built-in function '{0}' with a parent token. Built-in functions cannot have parent tokens. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.FunctionCallBinder_CallingFunctionOnOpenProperty(System.Object)">
            <summary>
            A string like "Found a function '{0}' on an open property. Functions on open properties are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataUriParser_InvalidInlineCount(System.Object)">
            <summary>
            A string like "'{0}' is not a valid InlineCount option."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.CastBinder_ChildTypeIsNotEntity(System.Object)">
            <summary>
            A string like "The child type '{0}' in a cast was not an entity type. Casts can only be performed on entity types."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.BatchReferenceSegment_InvalidContentID(System.Object)">
            <summary>
            A string like "Invalid content-id '{0}' for batch reference segment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SelectExpandBinder_UnknownPropertyType(System.Object)">
            <summary>
            A string like "Property '{0}' is of an unrecognized EdmPropertyKind."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SelectExpandBinder_CantFindProperty(System.Object)">
            <summary>
            A string like "Cant find the property '{0}' in the model."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SelectionItemBinder_NoExpandForSelectedProperty(System.Object)">
            <summary>
            A string like "Only properties specified in $expand can be traversed in $select query options. Selected item was '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SelectionItemBinder_NonEntityTypeSegment(System.Object)">
            <summary>
            A string like "Found a type segment '{0}' that isn't an entity type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SelectExpandPathBinder_FollowNonTypeSegment(System.Object)">
            <summary>
            A string like "Trying to follow type segments on a segment that isn't a type. Segment was '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SelectPropertyVisitor_SystemTokenInSelect(System.Object)">
            <summary>
            A string like "Found a system token, '{0}', while parsing a select clause."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.SelectPropertyVisitor_InvalidSegmentInSelectPath(System.Object)">
            <summary>
            A string like "Found an invalid segment, '{0}', while parsing a select clause."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpandItemBinder_CannotFindType(System.Object)">
            <summary>
            A string like "The type '{0}' is not defined in the model."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpandItemBinder_PropertyIsNotANavigationProperty(System.Object,System.Object)">
            <summary>
            A string like "Property '{0}' on type '{1}' is not a navigation property. Only navigation properties can be expanded."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.Nodes_NonentityParameterQueryNodeWithEntityType(System.Object)">
            <summary>
            A string like "An entity type '{0}' was given to NonEntityParameterQueryNode. Use EntityParameterQueryNode instead."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.Nodes_EntityCollectionServiceOperationRequiresEntityReturnType(System.Object)">
            <summary>
            A string like "An EntityCollectionServiceOperationQueryNode was provided with a IEdmFunctionImport with return type '{0}', which is not an entity type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.Nodes_PropertyAccessShouldBeNonEntityProperty(System.Object)">
            <summary>
            A string like "A node of this kind requires the associated property to be a structural, non-collection type, but property '{0}' is not structural."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.Nodes_PropertyAccessTypeShouldNotBeCollection(System.Object)">
            <summary>
            A string like "A node of this kind requires the associated property to be a structural, non-collection type, but property '{0}' is a collection."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.Nodes_PropertyAccessTypeMustBeCollection(System.Object)">
            <summary>
            A string like "A node of this kind requires the associated property to be a structural, collection type, but property '{0}' is not a collection."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriSelectParser_TermIsNotValid(System.Object)">
            <summary>
            A string like "Term '{0}' is not valid in a $select or $expand expression."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriSelectParser_FunctionsAreNotAllowed(System.Object)">
            <summary>
            A string like "Functions are not allowed in a $select expression, but one was found in the expression '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriSelectParser_InvalidTopOption(System.Object)">
            <summary>
            A string like "Top option must be an integer, its set to '{0}' instead."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriSelectParser_InvalidSkipOption(System.Object)">
            <summary>
            A string like "Skip option must be an integer, its set to '{0}' instead."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriSelectParser_SystemTokenInSelectExpand(System.Object,System.Object)">
            <summary>
            A string like "Found system token '{0}' in select or expand clause '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriParser_UriMustBeAbsolute(System.Object)">
            <summary>
            A string like "The URI '{0}' must be an absolute URI."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriParser_ExpandCountExceeded(System.Object,System.Object)">
            <summary>
            A string like "The result of parsing $expand contained at least {0} items, but the maximum allowed is {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriParser_ExpandDepthExceeded(System.Object,System.Object)">
            <summary>
            A string like "The result of parsing $expand was at least {0} items deep, but the maximum allowed is {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.PathParser_ServiceOperationWithoutResultKindAttribute(System.Object)">
            <summary>
            A string like "The service operation '{0}' is missing a ODataServiceOperationResultKind attribute."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.PathParser_ServiceOperationsWithSameName(System.Object)">
            <summary>
            A string like "Multiple Service Operations with the name '{0}' were found. There can only be one Service Operation with a given name in a model."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.PathParser_LinksNotSupported(System.Object)">
            <summary>
            A string like "The request URI is not valid. $links cannot be applied to the segment '{0}' since $links can only follow an entity segment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.PathParser_TypeMustBeRelatedToSet(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' does not inherit from and is not a base type of '{1}'. The type of '{2}' must be related to the Type of the EntitySet."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataExpandPath_InvalidExpandPathSegment(System.Object)">
            <summary>
            A string like "Found a segment of type '{0} in an expand path, but only NavigationProperty and Type segments are allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ODataSelectPath_InvalidSelectPathSegmentType(System.Object)">
            <summary>
            A string like "Found a segment of type '{0} in a select path, but only TypeSegment, NavigationPropertySegment, PropertySegment, OperationSegment or OpenPropertySegments are allowed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_EntitySetNotSpecified(System.Object)">
            <summary>
            A string like "The Entity Set of the operation '{0}' is not specified. This is most likely an error in the IEdmModel."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_TargetEntitySetNotFound(System.Object)">
            <summary>
            A string like "The target Entity Set of Navigation Property '{0}' could not be found. This is most likely an error in the IEdmModel."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_FoundInvalidFunctionImport(System.Object)">
            <summary>
            A string like "The function overloads matching '{0}' are invalid. This is most likely an error in the IEdmModel."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.FunctionOverloadResolver_NoSingleMatchFound(System.Object,System.Object)">
            <summary>
            A string like "Unable to resolve function overloads to a single function. There was more than one function in the model with name '{0}' and parameter names '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.FunctionOverloadResolver_MultipleActionOverloads(System.Object)">
            <summary>
            A string like "Multiple action overloads were found with the same binding parameter for '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_CannotSpecifyAfterPostLinkSegment(System.Object,System.Object)">
            <summary>
            A string like "The request URI is not valid. The segment '{0}' is not valid. Since the uri contains the '{1}' segment, there must be only one segment specified after that."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_MustBeLeafSegment(System.Object)">
            <summary>
            A string like "The request URI is not valid. The segment '{0}' must be the last segment in the URI because it is one of the following: $batch, $value, $metadata, a collection property, a named media resource, a service operation that does not return a value, or a service action."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_LinkSegmentMustBeFollowedByEntitySegment(System.Object,System.Object)">
            <summary>
            A string like "The request URI is not valid. The segment '{0}' must refer to a navigation property since the previous segment identifier is '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_MissingSegmentAfterLink(System.Object)">
            <summary>
            A string like "The request URI is not valid. There must a segment specified after the '{0}' segment and the segment must refer to a entity resource."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_CountNotSupported(System.Object)">
            <summary>
            A string like "The request URI is not valid, $count cannot be applied to the segment '{0}' since $count can only follow a resource segment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_CannotQuerySingletons(System.Object,System.Object)">
            <summary>
            A string like "The request URI is not valid, since the segment '{0}' refers to a singleton, and the segment '{1}' can only follow a resource collection."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_CannotQueryCollections(System.Object)">
            <summary>
            A string like "The request URI is not valid. Since the segment '{0}' refers to a collection, this must be the last segment in the request URI. All intermediate segments must refer to a single resource."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_SegmentDoesNotSupportKeyPredicates(System.Object)">
            <summary>
            A string like "The request URI is not valid. The segment '{0}' cannot include key predicates, however it may end with empty parenthesis."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_ValueSegmentAfterScalarPropertySegment(System.Object,System.Object)">
            <summary>
            A string like "The segment '{1}' in the request URI is not valid. The segment '{0}' refers to a primitive property, function, or service operation, so the only supported value from the next segment is '$value'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_InvalidTypeIdentifier_UnrelatedType(System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' specified in the URI is neither a base type nor a sub-type of the previously-specified type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ResourceType_ComplexTypeCannotBeOpen(System.Object)">
            <summary>
            A string like "Complex types can not be marked as 'Open'. Error occurred for type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.OpenNavigationPropertiesNotSupportedOnOpenTypes(System.Object)">
            <summary>
            A string like "Open navigation properties are not supported on OpenTypes. Property name: '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.DataServiceConfiguration_ResponseVersionIsBiggerThanProtocolVersion(System.Object,System.Object)">
            <summary>
            A string like "The response requires that version {0} of the protocol be used, but the MaxProtocolVersion of the data service is set to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.BadRequest_KeyCountMismatch(System.Object)">
            <summary>
            A string like "The number of keys specified in the URI does not match number of key properties for the resource '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_ResourceNotFound(System.Object)">
            <summary>
            A string like "Resource not found for the segment '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_BatchedActionOnEntityCreatedInSameChangeset(System.Object)">
            <summary>
            A string like "Batched service action '{0}' cannot be invoked because it was bound to an entity created in the same changeset."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.RequestUriProcessor_IEnumerableServiceOperationsCannotBeFurtherComposed(System.Object)">
            <summary>
            A string like "Resource Not Found - '{0}' refers to a service operation or function which does not allow further composition."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.General_InternalError(System.Object)">
            <summary>
            A string like "An internal error '{0}' occurred."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExceptionUtils_CheckIntegerNotNegative(System.Object)">
            <summary>
            A string like "A non-negative integer value was expected, but the value '{0}' is not a valid non-negative integer."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExceptionUtils_CheckIntegerPositive(System.Object)">
            <summary>
            A string like "A positive integer value was expected, but the value '{0}' is not a valid positive integer."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExceptionUtils_CheckLongPositive(System.Object)">
            <summary>
            A string like "A positive long value was expected; however, the value '{0}' is not a valid positive long value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpressionToken_IdentifierExpected(System.Object)">
            <summary>
            A string like "An identifier was expected at position {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpressionLexer_UnterminatedStringLiteral(System.Object,System.Object)">
            <summary>
            A string like "There is an unterminated string literal at position {0} in '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpressionLexer_InvalidCharacter(System.Object,System.Object,System.Object)">
            <summary>
            A string like "Syntax error: character '{0}' is not valid at position {1} in '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpressionLexer_SyntaxError(System.Object,System.Object)">
            <summary>
            A string like "Syntax error at position {0} in '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpressionLexer_UnterminatedLiteral(System.Object,System.Object)">
            <summary>
            A string like "There is an unterminated literal at position {0} in '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.ExpressionLexer_DigitExpected(System.Object,System.Object)">
            <summary>
            A string like "A digit was expected at position {0} in '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.UriQueryExpressionParser_UnrecognizedLiteral(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "Unrecognized '{0}' literal '{1}' at '{2}' in '{3}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReader_UnexpectedComma(System.Object)">
            <summary>
            A string like "Invalid JSON. An unexpected comma was found in scope '{0}'. A comma is only valid between properties of an object or between elements of an array."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReader_UnexpectedToken(System.Object)">
            <summary>
            A string like "Invalid JSON. Unexpected token '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReader_MissingColon(System.Object)">
            <summary>
            A string like "Invalid JSON. A colon character ':' is expected after the property name '{0}', but none was found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReader_UnrecognizedEscapeSequence(System.Object)">
            <summary>
            A string like "Invalid JSON. An unrecognized escape sequence '{0}' was found in a JSON string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReader_InvalidNumberFormat(System.Object)">
            <summary>
            A string like "Invalid JSON. The value '{0}' is not a valid number."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReader_MissingComma(System.Object)">
            <summary>
            A string like "Invalid JSON. A comma character ',' was expected in scope '{0}'. Every two elements in an array and properties of an object must be separated by commas."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReader_InvalidPropertyNameOrUnexpectedComma(System.Object)">
            <summary>
            A string like "Invalid JSON. The property name '{0}' is not valid. The name of a property cannot be empty."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReaderExtensions_UnexpectedNodeDetected(System.Object,System.Object)">
            <summary>
            A string like "An unexpected '{1}' node was found when reading from the JSON reader. A '{0}' node was expected."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReaderExtensions_CannotReadPropertyValueAsString(System.Object,System.Object)">
            <summary>
            A string like "Cannot read the value '{0}' for the property '{1}' as a quoted JSON string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReaderExtensions_CannotReadValueAsString(System.Object)">
            <summary>
            A string like "Cannot read the value '{0}' as a quoted JSON string value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Strings.JsonReaderExtensions_CannotReadValueAsDouble(System.Object)">
            <summary>
            A string like "Cannot read the value '{0}' as a double numeric value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExceptionUtils_ArgumentStringEmpty">
            <summary>
            A string like "Value cannot be empty."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataRequestMessage_AsyncNotAvailable">
            <summary>
            A string like "An asynchronous operation was requested on an IODataRequestMessage instance. For asynchronous operations to succeed, the request message instance must implement IODataRequestMessageAsync."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataRequestMessage_StreamTaskIsNull">
            <summary>
            A string like "The IODataRequestMessageAsync.GetStreamAsync method returned null. An asynchronous method that returns a task can never return null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataRequestMessage_MessageStreamIsNull">
            <summary>
            A string like "The IODataRequestMessage.GetStream or IODataRequestMessageAsync.GetStreamAsync method returned a null stream value. The message can never return a null stream."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataResponseMessage_AsyncNotAvailable">
            <summary>
            A string like "An asynchronous operation was requested on an IODataResponseMessage instance. For asynchronous operations to succeed, the response message instance must implement IODataResponseMessageAsync."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataResponseMessage_StreamTaskIsNull">
            <summary>
            A string like "The IODataResponseMessageAsync.GetStreamAsync method returned null. An asynchronous method that returns a task can never return null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataResponseMessage_MessageStreamIsNull">
            <summary>
            A string like "The IODataResponseMessage.GetStream or IODataResponseMessageAsync.GetStreamAsync method returned a null stream value. The message can never return a null stream."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.AsyncBufferedStream_WriterDisposedWithoutFlush">
            <summary>
            A string like "A writer or stream has been disposed with data still in the buffer. You must call Flush or FlushAsync before calling Dispose when some data has already been written."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_OnlyTopLevelFeedsSupportInlineCount">
            <summary>
            A string like "Only a top-level feed can have the 'ODataFeed.Count' property value specified. Expanded links do not support inline counts."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_InlineCountInRequest">
            <summary>
            A string like "The ODataFeed.Count must be null for request payloads. Inline counts are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_CannotWriteTopLevelFeedWithEntryWriter">
            <summary>
            A string like "Cannot write a top-level feed with a writer that was created to write a top-level entry."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_CannotWriteTopLevelEntryWithFeedWriter">
            <summary>
            A string like "Cannot write a top-level entry with a writer that was created to write a top-level feed."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_SyncCallOnAsyncWriter">
            <summary>
            A string like "A synchronous operation was called on an asynchronous writer. Calls on a writer instance must be either all synchronous or all asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_AsyncCallOnSyncWriter">
            <summary>
            A string like "An asynchronous operation was called on a synchronous writer. Calls on a writer instance must be either all synchronous or all asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_EntityReferenceLinkWithoutNavigationLink">
            <summary>
            A string like "An entity reference link was written without a surrounding navigation link. The WriteEntityReferenceLink or WriteEntityReferenceLinkAsync methods can only be used when writing the content of a navigation link."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_EntityReferenceLinkInResponse">
            <summary>
            A string like "An entity reference link was written into a response. The WriteEntityReferenceLink or WriteEntityReferenceLinkAsync methods can only be used when writing a request."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_DeferredLinkInRequest">
            <summary>
            A string like "A deferred link was written into a request. In requests, each navigation link must have a feed, entry, or entity reference link written into it."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_MultipleItemsInNavigationLinkContent">
            <summary>
            A string like "More than one item was written into the content of a navigation link. In OData, a navigation link can only contain more than one item in its content when it is a navigation link, ODataNavigationLink.IsCollection set to true, and the writer is writing a request."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataWriterCore_DeltaLinkNotSupportedOnExpandedFeed">
            <summary>
            A string like "The ODataFeed.DeltaLink property must be null for expanded feeds. Delta link is not supported on expanded feeds."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataException_GeneralError">
            <summary>
            A string like "An error occurred while processing the OData message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataErrorException_GeneralError">
            <summary>
            A string like "An error was read from the payload. See the 'Error' property for more details."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataUriParserException_GeneralError">
            <summary>
            A string like "An error occurred while parsing part of the URI."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataVersionChecker_ProtocolVersion3IsNotSupported">
            <summary>
            A string like "Version 3.0 of the OData protocol is not supported by this library. Please use version 1.0 or 2.0 instead."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomCollectionWriter_CollectionNameMustNotBeNull">
            <summary>
            A string like "An ODataCollectionStart with a 'null' name was passed to the ATOM collection writer. In ATOM, an ODataCollectionStart cannot have a 'null' name."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriter_StartEntryXmlCustomizationCallbackReturnedSameInstance">
            <summary>
            A string like "The startEntryXmlCustomizationCallback set in ODataMessageWriterSettings.EnableWcfDataServicesClientBehavior can never return the same XmlWriter instance that was provided in its parameter."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_AuthorMetadataMustNotContainNull">
            <summary>
            A string like "A null value was detected in the 'AtomEntryMetadata.Authors' enumerable; the author metadata does not support null values."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_CategoryMetadataMustNotContainNull">
            <summary>
            A string like "A null value was detected in the 'AtomEntryMetadata.Categories' enumerable; the category metadata does not support null values."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_ContributorMetadataMustNotContainNull">
            <summary>
            A string like "A null value was detected in the 'AtomEntryMetadata.Contributors' enumerable; the contributor metadata does not support null values."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_LinkMetadataMustNotContainNull">
            <summary>
            A string like "A null value was detected in the 'AtomEntryMetadata.Links' enumerable; the link metadata does not support null values."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_LinkMustSpecifyHref">
            <summary>
            A string like "The 'AtomLinkMetadata.Href' property is required and cannot be null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_CategoryMustSpecifyTerm">
            <summary>
            A string like "The 'AtomCategoryMetadata.Term' property is required and cannot be null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriterMetadataUtils_CategoriesHrefWithOtherValues">
            <summary>
            A string like "The 'AtomCategoriesMetadata.Href' property can only be set when no other property is set. When the 'Href' property is not null, the categories cannot have any 'Fixed' or 'Scheme' values, and the 'Categories' collection must be null or empty."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_WriterAlreadyUsed">
            <summary>
            A string like "The ODataMessageWriter has already been used to write a message payload. An ODataMessageWriter can only be used once to write a payload for a given message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_EntityReferenceLinksInRequestNotAllowed">
            <summary>
            A string like "Top-level entity reference link collection payloads are not allowed in requests."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_ErrorPayloadInRequest">
            <summary>
            A string like "An error cannot be written to a request payload. Errors are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_ServiceDocumentInRequest">
            <summary>
            A string like "A service document cannot be written to request payloads. Service documents are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_MetadataDocumentInRequest">
            <summary>
            A string like "A metadata document cannot be written to request payloads. Metadata documents are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_CannotWriteNullInRawFormat">
            <summary>
            A string like "Cannot write the value 'null' in raw format."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_WriteErrorAlreadyCalled">
            <summary>
            A string like "The WriteError method or the WriteErrorAsync method on the ODataMessageWriter has already been called to write an error payload. Only a single error payload can be written with each ODataMessageWriter instance."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_CannotWriteInStreamErrorForRawValues">
            <summary>
            A string like "The WriteError method or the WriteErrorAsync method on ODataMessageWriter cannot be called after the WriteValue method or the WriteValueAsync method is called. In OData, writing an in-stream error for raw values is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_CannotWriteMetadataWithoutModel">
            <summary>
            A string like "No model was specified in the ODataMessageWriterSettings; a model has to be provided in the ODataMessageWriterSettings in order to write a metadata document."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriter_CannotSpecifyFunctionImportWithoutModel">
            <summary>
            A string like "No model was specified in the ODataMessageWriterSettings; a model has to be provided in the ODataMessageWriterSettings when CreateODataParameterWriter is called with a non-null function import."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageWriterSettings_MessageWriterSettingsXmlCustomizationCallbacksMustBeSpecifiedBoth">
            <summary>
            A string like "Both startEntryXmlCustomizationCallback and endEntryXmlCustomizationCallback must be either null or non-null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_SyncCallOnAsyncWriter">
            <summary>
            A string like "A synchronous operation was called on an asynchronous collection writer. All calls on a collection writer instance must be either synchronous or asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_AsyncCallOnSyncWriter">
            <summary>
            A string like "An asynchronous operation was called on a synchronous collection writer. All calls on a collection writer instance must be either synchronous or asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataCollectionWriterCore_CollectionsMustNotHaveEmptyName">
            <summary>
            A string like "An ODataCollectionStart with an empty name was passed to the collection writer. An ODataCollectionStart cannot have an empty name."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterWriter_InStreamErrorNotSupported">
            <summary>
            A string like "Writing an in-stream error is not supported when writing a parameter payload."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterWriter_CannotCreateParameterWriterOnResponseMessage">
            <summary>
            A string like "CreateParameterWriter was called on a response message. A parameter payload is only allowed in a request message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterWriterCore_SyncCallOnAsyncWriter">
            <summary>
            A string like "A synchronous operation was called on an asynchronous parameter writer. All calls on a parameter writer instance must be either synchronous or asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterWriterCore_AsyncCallOnSyncWriter">
            <summary>
            A string like "An asynchronous operation was called on a synchronous parameter writer. All calls on a parameter writer instance must be either synchronous or asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterWriterCore_CannotWriteStart">
            <summary>
            A string like "WriteStart can only be called once, and it must be called before writing anything else."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterWriterCore_CannotWriteParameter">
            <summary>
            A string like "WriteValue and CreateCollectionWriter can only be called after WriteStart and before WriteEnd; they cannot be called until the previously created sub-writer is completed."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterWriterCore_CannotWriteEnd">
            <summary>
            A string like "WriteEnd can only be called after WriteStart and after the previously created sub-writer has completed."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterWriterCore_CannotWriteInErrorOrCompletedState">
            <summary>
            A string like "The writer is in either the 'Error' or 'Completed' state. No further writes can be performed on this writer."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_FlushOrFlushAsyncCalledInStreamRequestedState">
            <summary>
            A string like "ODataBatchWriter.Flush or ODataBatchWriter.FlushAsync was called while a stream being used to write operation content, obtained from the operation message by using GetStream or GetStreamAsync, was still active. This is not allowed. ODataBatchWriter.Flush or ODataBatchWriter.FlushAsync can only be called when an active stream for the operation content does not exist."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_CannotCompleteBatchWithActiveChangeSet">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. You cannot call ODataBatchWriter.WriteEndBatch with an active change set; you must first call ODataBatchWriter.WriteEndChangeset."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_CannotStartChangeSetWithActiveChangeSet">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. You cannot call ODataBatchWriter.WriteStartChangeset with an active change set; you must first call ODataBatchWriter.WriteEndChangeset."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_CannotCompleteChangeSetWithoutActiveChangeSet">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. You cannot call ODataBatchWriter.WriteEndChangeset without an active change set; you must first call ODataBatchWriter.WriteStartChangeset."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_InvalidTransitionFromStart">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. After creating the writer, the only valid methods are ODataBatchWriter.WriteStartBatch and ODataBatchWriter.FlushAsync."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_InvalidTransitionFromBatchStarted">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. After calling WriteStartBatch, the only valid methods on ODataBatchWriter are WriteStartChangeset, CreateOperationRequestMessage, CreateOperationResponseMessage, WriteEndBatch, and FlushAsync."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_InvalidTransitionFromChangeSetStarted">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. After calling WriteStartChangeset, the only valid methods on ODataBatchWriter are CreateOperationRequestMessage, CreateOperationResponseMessage, WriteEndChangeset, and FlushAsync."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_InvalidTransitionFromOperationCreated">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. After calling CreateOperationRequestMessage or CreateOperationResponseMessage, the only valid methods on ODataBatchWriter are WriteStartChangeset, WriteEndChangeset, WriteEndBatch, and FlushAsync."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_InvalidTransitionFromOperationContentStreamRequested">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. You cannot use the batch writer while another writer is writing the content of an operation. Dispose the stream for the operation before continuing to use the ODataBatchWriter."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_InvalidTransitionFromOperationContentStreamDisposed">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. After writing the content of an operation, the only valid methods on ODataBatchWriter are CreateOperationRequestMessage, CreateOperationResponseMessage, WriteStartChangeset, WriteEndChangeset, WriteEndBatch and FlushAsync."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_InvalidTransitionFromChangeSetCompleted">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. After calling WriteEndChangeset, the only valid methods on ODataBatchWriter are CreateOperationRequestMessage, CreateOperationResponseMessage, WriteStartChangeset, WriteEndBatch, and FlushAsync."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_InvalidTransitionFromBatchCompleted">
            <summary>
            A string like "An invalid method call on ODataBatchWriter was detected. You can only call ODataBatchWriter.FlushAsync after ODataBatchWriter.WriteEndBatch has been called."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_CannotCreateRequestOperationWhenWritingResponse">
            <summary>
            A string like "When writing a batch response, you cannot create a batch operation request message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_CannotCreateResponseOperationWhenWritingRequest">
            <summary>
            A string like "When writing a batch request, you cannot create a batch operation response message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_SyncCallOnAsyncWriter">
            <summary>
            A string like "A synchronous operation was called on an asynchronous batch writer. Calls on a batch writer instance must be either all synchronous or all asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_AsyncCallOnSyncWriter">
            <summary>
            A string like "An asynchronous operation was called on a synchronous batch writer. Calls on a batch writer instance must be either all synchronous or all asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchWriter_CannotWriteInStreamErrorForBatch">
            <summary>
            A string like "The WriteError and WriteErrorAsync methods on ODataMessageWriter cannot be called when a batch is being written by using ODataBatchWriter. In OData, writing an in-stream error for a batch payload is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchOperationMessage_VerifyNotCompleted">
            <summary>
            A string like "An attempt to change the properties of the message or to retrieve the payload stream for the message has failed. Either the payload stream has already been requested or the processing of the message has been completed. In both cases, no more changes can be made to the message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchOperationStream_Disposed">
            <summary>
            A string like "Cannot access a closed stream."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReader_CannotCreateRequestOperationWhenReadingResponse">
            <summary>
            A string like "When reading a batch response, you cannot create a batch operation request message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReader_CannotCreateResponseOperationWhenReadingRequest">
            <summary>
            A string like "When reading a batch request, you cannot create a batch operation response message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReader_OperationRequestMessageAlreadyCreated">
            <summary>
            A string like "A request message for the operation has already been created. You cannot create a request message for the same operation multiple times."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReader_OperationResponseMessageAlreadyCreated">
            <summary>
            A string like "A response message for the operation has already been created. You cannot create a response message for the same operation multiple times."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReader_CannotUseReaderWhileOperationStreamActive">
            <summary>
            A string like "You cannot use a batch reader while the stream for the content of an operation is still active. You must first dispose the operation stream before further calls to the batch reader are made."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReader_SyncCallOnAsyncReader">
            <summary>
            A string like "A synchronous operation was called on an asynchronous batch reader. Calls on a batch reader instance must be either all synchronous or all asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReader_AsyncCallOnSyncReader">
            <summary>
            A string like "An asynchronous operation was called on a synchronous batch reader. Calls on a batch reader instance must be either all synchronous or all asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReader_NoMessageWasCreatedForOperation">
            <summary>
            A string like "An operation was detected, but no message was created for it. You must create a message for every operation found in a batch or change set."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReaderStream_MissingContentTypeHeader">
            <summary>
            A string like "The 'Content-Type' header is missing. The 'Content-Type' header must be specified for each MIME part of a batch message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReaderStream_NestedChangesetsAreNotSupported">
            <summary>
            A string like "Nested change sets in a batch payload are not supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataBatchReaderStream_UnexpectedEndOfInput">
            <summary>
            A string like "Encountered an unexpected end of input while reading the batch payload."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.HttpUtils_MediaTypeMissingParameterName">
            <summary>
            A string like "The MIME type is missing a parameter name for a parameter definition."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.HttpUtils_ContentTypeMissing">
            <summary>
            A string like "The value for the Content-Type header is missing."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataUriUtils_ConvertFromUriLiteralTypeRefWithoutModel">
            <summary>
            A string like "An IEdmTypeReference must be provided with a matching IEdmModel. No model was provided."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataUtils_CannotSaveAnnotationsToBuiltInModel">
            <summary>
            A string like "A built-in model was detected when trying to save annotations. Annotations can only be saved to a user-defined model."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataUtils_UnsupportedVersionNumber">
            <summary>
            A string like "An invalid enum value was specified for the version number."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataUtils_NullValueForMimeTypeAnnotation">
            <summary>
            A string like "The MIME type annotation must not have a null value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataUtils_NullValueForHttpMethodAnnotation">
            <summary>
            A string like "The HTTP method annotation must not have a null value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataUtils_IsAlwaysBindableAnnotationSetForANonBindableFunctionImport">
            <summary>
            A string like "The 'IsAlwaysBindable' annotation cannot be set to 'true' for a non-bindable function import."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataUtils_UnexpectedIsAlwaysBindableAnnotationInANonBindableFunctionImport">
            <summary>
            A string like "The 'IsAlwaysBindable' annotation was found with a 'true' value in a non-bindable function import. The 'IsAlwaysBindable' annotation cannot be 'true' for a non-bindable function import."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ReaderValidationUtils_EntityReferenceLinkMissingUri">
            <summary>
            A string like "No URI value was found for an entity reference link. A single URI value was expected."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ReaderValidationUtils_ValueWithoutType">
            <summary>
            A string like "A value without a type name was found and no expected type is available. When the model is specified, each value in the payload must have a type which can be either specified in the payload, explicitly by the caller or implicitly inferred from the parent value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ReaderValidationUtils_EntryWithoutType">
            <summary>
            A string like "An entry without a type name was found, but no expected type was specified. To allow entries without type information, the expected type must also be specified when the model is specified."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ReaderValidationUtils_UndeclaredPropertyBehaviorKindSpecifiedOnRequest">
            <summary>
            A string like "The ODataMessageReaderSettings.UndeclaredPropertyBehaviorKinds is not set to ODataUndeclaredPropertyBehaviorKinds.None. When reading request payloads, the ODataMessageReaderSettings.UndeclaredPropertyBehaviorKinds property must be set to ODataUndeclaredPropertyBehaviorKinds.None; other values are not supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_ReaderAlreadyUsed">
            <summary>
            A string like "The ODataMessageReader has already been used to read a message payload. An ODataMessageReader can only be used once to read a payload for a given message."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_ErrorPayloadInRequest">
            <summary>
            A string like "A top-level error cannot be read from request payloads. Top-level errors are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_ServiceDocumentInRequest">
            <summary>
            A string like "A service document cannot be read from request payloads. Service documents are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_MetadataDocumentInRequest">
            <summary>
            A string like "A metadata document cannot be read from request payloads. Metadata documents are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_ExpectedPropertyTypeEntityCollectionKind">
            <summary>
            A string like "The expected type for property reading is of entity collection kind. Top-level properties can only be of primitive, complex, primitive collection or complex collection kind."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_ExpectedPropertyTypeEntityKind">
            <summary>
            A string like "The expected type for property reading is of entity kind. Top-level properties cannot be of entity type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_ExpectedPropertyTypeStream">
            <summary>
            A string like "The expected type for property reading is Edm.Stream. Top-level properties cannot be of stream type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_NoneOrEmptyContentTypeHeader">
            <summary>
            A string like "A missing or empty content type header was found when trying to read a message. The content type header is required."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_EntityReferenceLinksInRequestNotAllowed">
            <summary>
            A string like "Top-level entity reference link collection payloads are not allowed in requests."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_GetFormatCalledBeforeReadingStarted">
            <summary>
            A string like "GetFormat was called before reading was started. GetFormat can only be called after a read method was called or a reader was created."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_DetectPayloadKindMultipleTimes">
            <summary>
            A string like "DetectPayloadKind or DetectPayloadKindAsync was called more than once; DetectPayloadKind or DetectPayloadKindAsync can only be called once."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_PayloadKindDetectionRunning">
            <summary>
            A string like "Payload kind detection has not completed. Read or create methods cannot be called on the ODataMessageReader before payload kind detection is complete."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_PayloadKindDetectionInServerMode">
            <summary>
            A string like "The ODataMessageReader is using the server behavior for WCF Data Services, as specified in its settings. Payload kind detection is not supported when using the WCF Data services server behavior."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessageReader_ParameterPayloadInResponse">
            <summary>
            A string like "A parameter payload cannot be read from a response payload. Parameter payloads are only supported in requests."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataMessage_MustNotModifyMessage">
            <summary>
            A string like "An attempt was made to modify the message. The message cannot be modified."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataReaderCore_SyncCallOnAsyncReader">
            <summary>
            A string like "A synchronous operation was called on an asynchronous reader. Calls on a reader instance must be either all synchronous or all asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataReaderCore_AsyncCallOnSyncReader">
            <summary>
            A string like "An asynchronous operation was called on a synchronous reader. Calls on a reader instance must be either all synchronous or all asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonReader_ParsingWithoutMetadata">
            <summary>
            A string like "Parsing JSON feeds or entries without model is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonReaderUtils_CannotConvertInt64OrDecimal">
            <summary>
            A string like "Primitive values of type 'Edm.Decimal' and 'Edm.Int64' must be quoted in the payload. Make sure the value is quoted."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonDeserializer_DataWrapperPropertyNotFound">
            <summary>
            A string like "The top-level data wrapper object does not have a property 'd'. In JSON responses, a top-level data wrapper object with a 'd' property is expected."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonDeserializer_DataWrapperMultipleProperties">
            <summary>
            A string like "Multiple 'd' properties were found in the top-level data wrapper object. In JSON, the top-level data wrapper object is expected to have a single 'd' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonCollectionDeserializer_MissingResultsPropertyForCollection">
            <summary>
            A string like "Did not find the required 'results' property on the object wrapping a collection in protocol version 2.0 and greater."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonCollectionDeserializer_MultipleResultsPropertiesForCollection">
            <summary>
            A string like "Multiple 'results' properties were found for a collection. In OData, a collection cannot have more than one 'results' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntityReferenceLinkDeserializer_ExpectedEntityReferenceLinksResultsPropertyNotFound">
            <summary>
            A string like "Did not find the required 'results' property on the object wrapping an entity reference link in protocol version 2.0 and greater."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntityReferenceLinkDeserializer_MultipleUriPropertiesInEntityReferenceLink">
            <summary>
            A string like "Multiple 'uri' properties were found in an entity reference link object; however, a single 'uri' property was expected."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntityReferenceLinkDeserializer_EntityReferenceLinkUriCannotBeNull">
            <summary>
            A string like "The 'uri' property of an entity reference link object cannot have a null value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_ExpectedFeedResultsPropertyNotFound">
            <summary>
            A string like "Did not find the required 'results' property on the object wrapping a feed."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_MultipleMetadataPropertiesInEntryValue">
            <summary>
            A string like "Multiple '__metadata' properties were found in an entry. In OData, an entry can only contain one '__metadata' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_MultipleUriPropertiesInDeferredLink">
            <summary>
            A string like "Multiple 'uri' properties were found in the deferred link object; however, a single 'uri' property was expected."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_DeferredLinkUriCannotBeNull">
            <summary>
            A string like "The 'uri' property of a deferred link object cannot have a null value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_DeferredLinkMissingUri">
            <summary>
            A string like "The 'uri' property was not found in a deferred link object. A single 'uri' property is expected."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_CannotReadNavigationPropertyValue">
            <summary>
            A string like "A 'PrimitiveValue' node with non-null value was found when trying to read the value of a navigation property; however, a 'StartArray' node, a 'StartObject' node, or a 'PrimitiveValue' node with null value was expected."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_MultipleFeedResultsPropertiesFound">
            <summary>
            A string like "Found multiple 'results' properties in the object wrapping a feed in protocol version 2.0 and greater. In OData, the feed wrapping object can only contain a single 'results' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_CannotParseStreamReference">
            <summary>
            A string like "Could not parse an expected stream reference value. In OData, a stream reference value must be a JSON object with a single property called '__mediaresource'."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonEntryAndFeedDeserializer_StreamPropertyInRequest">
            <summary>
            A string like "A stream property was found in a JSON request payload. Stream properties are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedSerializer_AnnotationGroupWithoutName">
            <summary>
            A string like "An annotation group with a null or empty name was found for an entry. In OData, annotation groups must have a non-null, non-empty name that is unique across the entire payload."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedSerializer_AnnotationGroupInRequest">
            <summary>
            A string like "A JSON Light annotation group was detected when writing a request payload. In OData, JSON Light annotation groups are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_TopLevelPropertyWithoutMetadata">
            <summary>
            A string like "Parsing a JSON top-level property without a model is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_InvalidTopLevelPropertyPayload">
            <summary>
            A string like "Either zero or more than one top-level properties were found. A top-level property must be represented as a JSON object with exactly one property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_MultipleMetadataPropertiesInComplexValue">
            <summary>
            A string like "Multiple '__metadata' properties were found in a complex value. In OData, a complex value can only have one '__metadata' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonPropertyAndValueDeserializer_CollectionWithoutResults">
            <summary>
            A string like "A collection was found without the 'results' property. In OData, each collection must be represented as a JSON object with a property 'results'."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonServiceDocumentDeserializer_MultipleEntitySetsPropertiesForServiceDocument">
            <summary>
            A string like "Multiple 'EntitySets' properties were found for a service document. In OData, a service document must have exactly one 'EntitySets' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonServiceDocumentDeserializer_NoEntitySetsPropertyForServiceDocument">
            <summary>
            A string like "No 'EntitySets' property was found for a service document. In OData, a service document must have exactly one 'EntitySets' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataCollectionReaderCore_SyncCallOnAsyncReader">
            <summary>
            A string like "A synchronous operation was called on an asynchronous collection reader. All calls on a collection reader instance must be either synchronous or asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataCollectionReaderCore_AsyncCallOnSyncReader">
            <summary>
            A string like "An asynchronous operation was called on a synchronous collection reader. All calls on a collection reader instance must be either synchronous or asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterReaderCore_SyncCallOnAsyncReader">
            <summary>
            A string like "A synchronous operation was called on an asynchronous parameter reader. All calls on a parameter reader instance must be either synchronous or asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataParameterReaderCore_AsyncCallOnSyncReader">
            <summary>
            A string like "An asynchronous operation was called on a synchronous parameter reader. All calls on a parameter reader instance must be either synchronous or asynchronous."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonCollectionReader_ParsingWithoutMetadata">
            <summary>
            A string like "Parsing JSON collections without model is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_AssociationLinkMustSpecifyName">
            <summary>
            A string like "The 'Name' property on an ODataAssociationLink must be set to a non-empty string."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_AssociationLinkMustSpecifyUrl">
            <summary>
            A string like "The 'Url' property on an ODataAssociationLink must be set to a non-null value that represents the association or associations the link references."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_TypeNameMustNotBeEmpty">
            <summary>
            A string like "An empty type name was found; the name of a type cannot be an empty string."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_ResourceCollectionMustSpecifyUrl">
            <summary>
            A string like "The 'Url' property on a resource collection must be set to a non-null value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_ResourceCollectionUrlMustNotBeNull">
            <summary>
            A string like "A resource collection without a Url was detected; a resource collection must have a non-null Url value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_NonStreamingCollectionElementsMustNotBeNull">
            <summary>
            A string like "A null value was detected in the items of a collection property value; non-streaming instances of collection types do not support null values as items."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_LinkMustSpecifyName">
            <summary>
            A string like "The 'Name' property on an ODataNavigationLink must be set to a non-empty string."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_NestedCollectionsAreNotSupported">
            <summary>
            A string like "Nested collection instances are not allowed."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_StreamReferenceValuesNotSupportedInCollections">
            <summary>
            A string like "An ODataStreamReferenceValue item was found in a collection property value, which is not allowed. Collection properties can only have primitive and complex values as items."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ValidationUtils_WorkspaceCollectionsMustNotContainNullItem">
            <summary>
            A string like "A null value was detected when enumerating the collections in a workspace. Workspace collections cannot be null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomWriter_FeedsMustHaveNonEmptyId">
            <summary>
            A string like "An ODataFeed without an ID was detected; in OData, a Feed must have a non-null, non-empty ID value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_PropertyMustNotBeNull">
            <summary>
            A string like "The 'ODataEntry.Properties' enumerable contains a null item. This enumerable cannot contain null items."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_PropertiesMustHaveNonEmptyName">
            <summary>
            A string like "An ODataProperty instance without a name was detected; an ODataProperty must have a non-null, non-empty name."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_MissingTypeNameWithMetadata">
            <summary>
            A string like "No TypeName was found for an ODataComplexValue of an open property, ODataEntry or custom instance annotation, even though metadata was specified. If a model is passed to the writer, each complex value on an open property, entry or custom instance annotation must have a type name."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_NextPageLinkInRequest">
            <summary>
            A string like "The ODataFeed.NextPageLink must be null for request payloads. A next link is only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_DefaultStreamWithContentTypeWithoutReadLink">
            <summary>
            A string like "A default stream ODataStreamReferenceValue was detected with a 'ContentType' property but without a ReadLink value. In OData, a default stream must either have both a content type and a read link, or neither of them."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_DefaultStreamWithReadLinkWithoutContentType">
            <summary>
            A string like "A default stream ODataStreamReferenceValue was detected with a 'ReadLink' property but without a ContentType value. In OData, a default stream must either have both a content type and a read link, or neither of them."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_StreamReferenceValueMustHaveEditLinkOrReadLink">
            <summary>
            A string like "An ODataStreamReferenceValue was detected with null values for both EditLink and ReadLink. In OData, a stream resource must have at least an edit link or a read link."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_StreamReferenceValueMustHaveEditLinkToHaveETag">
            <summary>
            A string like "An ODataStreamReferenceValue was detected with an ETag but without an edit link. In OData, a stream resource must have an edit link to have an ETag."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_StreamReferenceValueEmptyContentType">
            <summary>
            A string like "An ODataStreamReferenceValue was detected with an empty string 'ContentType' property. In OData, a stream resource must either have a non-empty content type or it must be null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_EntriesMustHaveNonEmptyId">
            <summary>
            A string like "An entry with an empty ID value was detected. In OData, an entry must either a non-empty ID value or no ID value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_EntityReferenceLinkUrlMustNotBeNull">
            <summary>
            A string like "An ODataEntityReferenceLink with a null Url was detected; an ODataEntityReferenceLink must have a non-null Url."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_EntityReferenceLinksLinkMustNotBeNull">
            <summary>
            A string like "The 'ODataEntityReferenceLinks.Links' enumerable contains a null item. This enumerable cannot contain null items."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.WriterValidationUtils_MessageWriterSettingsJsonPaddingOnRequestMessage">
            <summary>
            A string like "A JSON Padding function was specified on ODataMessageWriterSettings when trying to write a request message. JSON Padding is only for writing responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomReader_MediaLinkEntryMismatch">
            <summary>
            A string like "An Atom entry can be either a regular entry or a media link entry (MLE). This means that there cannot be data in both the {http://www.w3.org/2005/Atom}:content element, which indicates a regular entry, and the {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}:properties element, which indicates an MLE. "
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomReader_ExpandedFeedInEntryNavigationLink">
            <summary>
            A string like "An expanded feed was found in a navigation link of type entry; however, only an expanded entry can occur in a navigation link of type entry."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomReader_ExpandedEntryInFeedNavigationLink">
            <summary>
            A string like "An expanded entry was found in a navigation link of type feed; however, only an expanded feed can occur in a navigation link of type feed."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomReader_DeferredEntryInFeedNavigationLink">
            <summary>
            A string like "A deferred entry was found in a navigation link of type feed; however, only a deferred feed can occur in a navigation link of type feed."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomReader_EntryXmlCustomizationCallbackReturnedSameInstance">
            <summary>
            A string like "The entryXmlCustomizationCallback set in ODataMessageReaderSettings.EnableWcfDataServicesClientBehavior can never return the same XmlReader instance that was provided in its parameter."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomReaderUtils_InvalidTypeName">
            <summary>
            A string like "Found a value with type name ''. Type name cannot be an empty string."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomCollectionDeserializer_TypeOrNullAttributeNotAllowed">
            <summary>
            A string like "The root element of the collection cannot contain the {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}:type attribute or the {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}:null attribute."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.EdmLibraryExtensions_CollectionItemCanBeOnlyPrimitiveOrComplex">
            <summary>
            A string like "Only collection properties that contain primitive types or complex types are supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_ContentWithSourceLinkIsNotEmpty">
            <summary>
            A string like "The element {http://www.w3.org/2005/Atom}:content has non-empty content, and it has an attribute with name 'src'. When the {http://www.w3.org/2005/Atom}:content element has the 'src' attribute, it cannot also have content."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_MultipleInlineElementsInLink">
            <summary>
            A string like "Multiple {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}:inline elements were found in a {http://www.w3.org/2005/Atom}:link element. Each {http://www.w3.org/2005/Atom}:link element can contain no more than one {http://schemas.microsoft.com/ado/2007/08/dataservices/metadata}:inline child element."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_StreamPropertyWithEmptyName">
            <summary>
            A string like "Found a stream property link with empty name. In OData, a stream property must have a non-empty name."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_EncounteredAnnotationInNestedFeed">
            <summary>
            A string like "Encountered an 'annotation' element inside a nested feed. Annotations are not currently supported for nested feeds."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomEntryAndFeedDeserializer_EncounteredDeltaLinkInNestedFeed">
            <summary>
            A string like "Encountered a 'Delta Link' element inside a nested feed. Delta Links are not supported for nested feeds."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentDeserializer_MissingWorkspaceElement">
            <summary>
            A string like "The service document is missing the 'workspace' element. A service document must contain a single {http://www.w3.org/2007/app}:workspace element."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentDeserializer_MultipleWorkspaceElementsFound">
            <summary>
            A string like "Multiple 'workspace' elements were found inside the service document. A service document must contain a single {http://www.w3.org/2007/app}:workspace element."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAtomServiceDocumentMetadataDeserializer_MultipleAcceptElementsFoundInCollection">
            <summary>
            A string like "Multiple 'accept' elements were found inside a 'collection' element. A 'collection' element can only contain a single {http://www.w3.org/2007/app}:accept element."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_MetadataDocumentUriMissing">
            <summary>
            A string like "The ODataMessageReaderSettings used to read a JSON Light payload do not specify a metadata document URI. For reading JSON Light payloads a metadata document URI is required."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_PayloadKindDetectionForRequest">
            <summary>
            A string like "ODataMessageReader.DetectPayloadKind was called for a request payload. Payload kind detection is only supported for responses in JSON Light."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_NoEntitySetForRequest">
            <summary>
            A string like "Parsing JSON Light feeds or entries in requests without entity set is not supported. Pass in the entity set as a parameter to ODataMessageReader.CreateODataEntryReader or ODataMessageReader.CreateODataFeedReader method."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_FunctionImportOrItemTypeRequiredForCollectionReaderInRequests">
            <summary>
            A string like "An attempt to read a collection request payload without specifying a producing function import or collection item type was detected. When reading collection payloads in requests, a producing function import or expected item type has to be provided."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_NavigationPropertyRequiredForReadEntityReferenceLinkInRequests">
            <summary>
            A string like "An attempt to read an entity reference link in a request without specifying a navigation property was detected. When reading entity reference link payloads in requests, a navigation property has to be provided."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_ModelRequiredForReading">
            <summary>
            A string like "Parsing JSON Light payloads without a model is only supported for error payloads."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_BaseUriMustBeNonNullAndAbsolute">
            <summary>
            A string like "The 'BaseUri' on the 'ODataMessageReaderSettings' must be set to a non-null absolute URI to read JSON Light format."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_ItemTypeRequiredForCollectionReaderInRequests">
            <summary>
            A string like "An attempt to read a collection request payload without specifying a collection item type was detected. When reading collection payloads in requests, an expected item type has to be provided."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightInputContext_NoItemTypeSpecified">
            <summary>
            A string like "In JSON the item type must be specified when creating a collection writer."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightDeserializer_MetadataLinkNotFoundAsFirstProperty">
            <summary>
            A string like "The required instance annotation 'odata.metadata' was not found at the beginning of a response payload."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightWriter_EntityReferenceLinkAfterFeedInRequest">
            <summary>
            A string like "An attempt to write an entity reference link inside a navigation link after a feed has been written inside the same navigation link in a request was detected. In JSON Light requests, all entity reference links inside a navigation link have to be written before all feeds inside the same navigation link."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightWriter_InstanceAnnotationNotSupportedOnExpandedFeed">
            <summary>
            A string like "The ODataFeed.InstanceAnnotations collection must be empty for expanded feeds. Custom instance annotations are not supported on expanded feeds."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightOutputContext_MetadataDocumentUriMissing">
            <summary>
            A string like "The ODataMessageWriterSettings used to write a JSON Light payload do not specify a metadata document URI. For writing JSON Light payloads a metadata document URI is required."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueSerializer_NoExpectedTypeOrTypeNameSpecifiedForComplexValueRequest">
            <summary>
            A string like "Neither an expected type nor a type name in the OData object model was provided for a complex value. When writing a request payload, either an expected type or a type name has to be specified."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueSerializer_NoExpectedTypeOrTypeNameSpecifiedForCollectionValueInRequest">
            <summary>
            A string like "Neither an expected type nor a type name in the OData object model was provided for a collection property. When writing a request payload, either an expected type or a type name has to be specified."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightServiceDocumentSerializer_ResourceCollectionMustSpecifyName">
            <summary>
            A string like "Found a resource collection without a name. When writing a service document in JSON Light, the Name property of a resource collection must not be null or empty."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataFeedAndEntryTypeContext_MetadataOrSerializationInfoMissing">
            <summary>
            A string like "When writing a JSON response, a user model must be specified and the entity set and entity type must be passed to the ODataMessageWriter.CreateEntryWriter method or the ODataFeedAndEntrySerializationInfo must be set on the ODataEntry or ODataFeed that is being writen."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataFeedAndEntryTypeContext_ODataEntryTypeNameMissing">
            <summary>
            A string like "When writing a JSON response in full metadata mode with ODataMessageWriterSettings.AutoComputePayloadMetadataInJson set to true, a user model must be specified and the entity set and entity type must be passed to the ODataMessageWriter.CreateEntryWriter method or the ODataEntry.TypeName must be set."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriBuilder_TypeNameMissingForTopLevelCollectionWhenWritingResponsePayload">
            <summary>
            A string like "The collection type name for the top level collection is unknown. When writing a JSON response, the item type must be passed to the ODataMessageWriter.CreateCollectionWriter method or the ODataCollectionStartSerializationInfo must be set on the ODataCollectionStart."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriBuilder_EntitySetOrNavigationPropertyMissingForTopLevelEntityReferenceLinkResponse">
            <summary>
            A string like "The entity set name or navigation property name for the top level entity reference link is unknown. When writing a JSON response, the entity set and navigation property must be passed to the ODataMessageWriter.WriteEntityReferenceLink method or the ODataEntityReferenceLinkSerializationInfo must be set on the ODataEntityReferenceLink."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriBuilder_EntitySetOrNavigationPropertyMissingForTopLevelEntityReferenceLinksResponse">
            <summary>
            A string like "The entity set name or navigation property name for the top level entity reference link collection is unknown. When writing a JSON response, the entity set and navigation property must be passed to the ODataMessageWriter.WriteEntityReferenceLinks method or the ODataEntityReferenceLinksSerializationInfo must be set on the ODataEntityReferenceLinks."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_InvalidTopLevelPropertyPayload">
            <summary>
            A string like "No top-level properties were found. A top-level property or collection in JSON Light must be represented as a JSON object with exactly one property which is not an annotation."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightPropertyAndValueDeserializer_ComplexTypeAnnotationNotFirst">
            <summary>
            A string like "The 'odata.type' instance annotation in a complex object is not the first property of the object. In OData, the 'odata.type' instance annotation must be the first property of the complex object."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonReaderCoreUtils_CannotReadSpatialPropertyValue">
            <summary>
            A string like "The value specified for the spatial property was not valid. You must specify a valid spatial value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_NullMetadataDocumentUri">
            <summary>
            A string like "A null metadata URI was found in the payload. Metadata URIs must not be null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_NoModel">
            <summary>
            A string like "No model was specified for the ODataMessageReader. A message reader requires a model for JSON Light payload to be specified in the ODataMessageReader constructor."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightMetadataUriParser_ModelResolverReturnedNull">
            <summary>
            A string like "The IODataJsonLightModelResolver or IODataJsonLightModelResolverAsync returned a null or a core model. The model resolver must return a valid user model."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_EntryTypeAnnotationNotFirst">
            <summary>
            A string like "The 'odata.type' instance annotation in an entry object is preceded by an invalid property. In OData, the 'odata.type' instance annotation must be either the first property in the JSON object or the second if the 'odata.metadata' instance annotation is present."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_FeedPropertyAnnotationForTopLevelFeed">
            <summary>
            A string like "A property annotation was found for a top-level feed; however, top-level feeds only support instance annotations."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_StreamPropertyInRequest">
            <summary>
            A string like "A stream property was found in a JSON Light request payload. Stream properties are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_CannotReadNavigationPropertyValue">
            <summary>
            A string like "A 'PrimitiveValue' node with non-null value was found when trying to read the value of a navigation property; however, a 'StartArray' node, a 'StartObject' node, or a 'PrimitiveValue' node with null value was expected."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_AnnotationGroupWithoutName">
            <summary>
            A string like "An annotation group with a null or empty name was found for an entry. In OData, annotation groups must have a non-null, non-empty name that is unique across the whole payload."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_AnnotationGroupInRequest">
            <summary>
            A string like "A JSON Light annotation group was detected when writing a request payload. In OData, JSON Light annotation groups are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_MetadataReferencePropertyInRequest">
            <summary>
            A string like "A metadata reference property was found in a JSON Light request payload. Metadata reference properties are only supported in responses."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_EncounteredAnnotationGroupInUnexpectedPosition">
            <summary>
            A string like "An annotation group was found at an unexpected position in the payload. Annotation groups must be the first property of the object they are annotating and may not be nested."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntryAndFeedDeserializer_EntryTypeAlreadySpecified">
            <summary>
            A string like "Encountered an entry with a type defined in an annotation group and in the entry body. The type of an entry may only be specified once."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightEntityReferenceLinkDeserializer_PropertyAnnotationForEntityReferenceLinks">
            <summary>
            A string like "A property annotation was found for entity reference links; however, entity reference links only support instance annotations."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightParameterDeserializer_PropertyAnnotationForParameters">
            <summary>
            A string like "An OData property annotation was found for a parameter payload; however, parameter payloads do not support OData property annotations."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SelectedPropertiesNode_StarSegmentNotLastSegment">
            <summary>
            A string like "When parsing a select clause a '*' segment was found before last segment of a property path. In OData, a '*' segment can only appear as last segment of a property path."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SelectedPropertiesNode_StarSegmentAfterTypeSegment">
            <summary>
            A string like "When parsing a select clause a '*' segment was found immediately after a type segment in a property path. In OData, a '*' segment cannot appear following a type segment."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.JsonLightAnnotationGroupDeserializer_AnnotationGroupDeclarationWithoutName">
            <summary>
            A string like "Encountered an annotation group declaration for which there was no 'name' property. All annotation group declarations must specify a non-empty name in the 'name' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.JsonLightAnnotationGroupDeserializer_EncounteredMultipleNameProperties">
            <summary>
            A string like "Encountered multiple 'name' properties within a single annotation group declaration. An annotation group must contain exactly one 'name' property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataPrimitiveValue_CannotCreateODataPrimitiveValueFromNull">
            <summary>
            A string like "Cannot create an ODataPrimitiveValue from null; use ODataNullValue instead."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataAnnotatable_InstanceAnnotationsOnlyOnODataError">
            <summary>
            A string like "An InstanceAnnotationCollection was set on an object other than ODataError. Currently, instance annotations are only supported on ODataError."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataInstanceAnnotation_ValueCannotBeODataStreamReferenceValue">
            <summary>
            A string like "The value of an instance annotation cannot be of type ODataStreamReferenceValue."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightValueSerializer_MissingTypeNameOnComplex">
            <summary>
            A string like "A type name was not provided for an instance of ODataComplexValue."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataJsonLightValueSerializer_MissingTypeNameOnCollection">
            <summary>
            A string like "A type name was not provided for an instance of ODataCollectionValue."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.AtomInstanceAnnotation_MissingTermAttributeOnAnnotationElement">
            <summary>
            A string like "Encountered an 'annotation' element without a 'term' attribute. All 'annotation' elements must have a 'term' attribute."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.AtomInstanceAnnotation_MultipleAttributeValueNotationAttributes">
            <summary>
            A string like "Encountered an 'annotation' element with more than one attribute from following set: 'int', 'string', 'decimal', 'float', and 'bool'. Only one such attribute may appear on an 'annotation' element."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.JsonFullMetadataLevel_MissingEntitySet">
            <summary>
            A string like "If ODataMessageWriterSettings.AutoComputePayloadMetadataInJson is set to true, the entity set must be specified when writing JSON with full metadata."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataQueryUtils_CannotSetMetadataAnnotationOnPrimitiveType">
            <summary>
            A string like "Setting a metadata annotation on a primitive type is not supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SyntacticTree_MaxDepthInvalid">
            <summary>
            A string like "The maximum depth setting must be a number greater than zero."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.UriQueryExpressionParser_TooDeep">
            <summary>
            A string like "Recursion depth exceeded allowed limit."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.UriQueryExpressionParser_RepeatedVisitor">
            <summary>
            A string like "Invalid to redefine visitor in nested Any/All queries."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.UriQueryPathParser_SyntaxError">
            <summary>
            A string like "Bad Request: there was an error in the query syntax."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.UriQueryPathParser_TooManySegments">
            <summary>
            A string like "Too many segments in URI."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SelectionItemBinder_NonNavigationPathToken">
            <summary>
            A string like "Inner or start path segments must be navigation properties in $select."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SelectTreeNormalizer_NonPathProperty">
            <summary>
            A string like "Found a non-path property in a select token."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExpandItem_NonEntityNavProp">
            <summary>
            A string like "Cannot construct an ExpandItem from a navigation property whose type is not an entity."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_UnsupportedExtensionToken">
            <summary>
            A string like "An unsupported extension query token was found."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_FilterExpressionNotSingleValue">
            <summary>
            A string like "The $filter expression must evaluate to a single boolean value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_OrderByExpressionNotSingleValue">
            <summary>
            A string like "The $orderby expression must evaluate to a single value of primitive type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_PropertyAccessWithoutParentParameter">
            <summary>
            A string like "A PropertyAccessQueryToken without a parent was encountered outside of $filter or $orderby expression. The PropertyAccessQueryToken without a parent token is only allowed inside $filter or $orderby expressions."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_BuiltInFunctionSignatureWithoutAReturnType">
            <summary>
            A string like "Found a Built in function without a Function Signature."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_MustBeCalledOnRoot">
            <summary>
            A string like "Encountered Root segment in non-root location."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_NoTypeSupported">
            <summary>
            A string like "A segment without an associated type was given as input."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_LambdaParentMustBeCollection">
            <summary>
            A string like "Any/All may only be used following a collection."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_NullNavigationProperty">
            <summary>
            A string like "The navigation property must not be null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_NavigationPropertyNotFollowingSingleEntityType">
            <summary>
            A string like "A navigation property can only follow single entity nodes."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_AnyAllExpressionNotSingleValue">
            <summary>
            A string like "The Any/All query expression must evaluate to a single boolean value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_CastOrIsOfFunctionWithoutATypeArgument">
            <summary>
            A string like "Cast or IsOf Function must have a type in its arguments."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_CastOrIsOfCollectionsNotSupported">
            <summary>
            A string like "The Cast and IsOf functions do not support collection arguments or types."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_SpatialLengthFunctionWithoutASingleValueArg">
            <summary>
            A string like "The geo.length function was called with a non-single-value operand."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_SpatialLengthFunctionWithOutLineStringArg">
            <summary>
            A string like "The geo.length function was called with a non-LineString operand."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_SpatialIntersectsFunctionWithoutASingleValueArg">
            <summary>
            A string like "The geo.intersects function was called with a non-single-value operand."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_SpatialIntersectsFunctionWithInvalidArgTypes">
            <summary>
            A string like "The geo.intersects function was called with invalid arg types."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_NonValidTypeArgument">
            <summary>
            A string like "Type argument with an invalid type name."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.MetadataBinder_CollectionOpenPropertiesNotSupportedInThisRelease">
            <summary>
            A string like "Collection open properties are not supported in this release."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.FunctionCallParser_DuplicateParameterName">
            <summary>
            A string like "Parameter names must be unique. There is most likely an error in the model."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SelectionItemBinder_NonPathSelectToken">
            <summary>
            A string like "Found a property token that isn't a path in the select syntactic tree."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SelectPropertyVisitor_DisparateTypeSegmentsInSelectExpand">
            <summary>
            A string like "Any selection that is expanded must have the same type qualifier on both selection and expansion."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SelectExpandClause_CannotDeleteFromAllSelection">
            <summary>
            A string like "Cannot delete selection items from an AllSelection, please create the SelectExpandClause with a Partial Selection instead."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SegmentFactory_LinksSegmentNotFollowedByNavProp">
            <summary>
            A string like "Links segments must always be followed by a navigation property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExpandItemBinder_TraversingANonNormalizedTree">
            <summary>
            A string like "Trying to traverse a non-normalized expand tree."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExpandItemBinder_TypeSegmentNotFollowedByPath">
            <summary>
            A string like "Found a path within a select or expand query option that isn't ended by a non-type segment."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExpandItemBinder_PathTooDeep">
            <summary>
            A string like "Trying to parse a type segment path that is too long."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.Nodes_CollectionNavigationNode_MustHaveSingleMultiplicity">
            <summary>
            A string like "The navigation property must have a target multiplicity of 'One' or 'ZeroOrOne' to create a SingleNavigationNode."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.Nodes_CollectionNavigationNode_MustHaveManyMultiplicity">
            <summary>
            A string like "The navigation property must have a target multiplicity of 'Many' to create a CollectionNavigationNode."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.Nodes_NonStaticEntitySetExpressionsAreNotSupportedInThisRelease">
            <summary>
            A string like "Only static Entity Set reference expressions are supported currently."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.Nodes_CollectionFunctionCallNode_ItemTypeMustBePrimitiveOrComplex">
            <summary>
            A string like "An instance of CollectionFunctionCallNode can only be created with a primitive or complex collection type. For functions returning a collection of entities, use EntityCollectionFunctionCallNode instead."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.Nodes_EntityCollectionFunctionCallNode_ItemTypeMustBeAnEntity">
            <summary>
            A string like "An instance of EntityCollectionFunctionCallNode can only be created with an entity collection type. For functions returning a collection of primitive or complex values, use CollectionFunctionCallNode instead."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExpandTreeNormalizer_CallAddTermsOnUnexpandedTerms">
            <summary>
            A string like "Only call AddTerms on ExpandTermTokens that have already been expanded by ExpandTerm."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExpandTreeNormalizer_NonPathInPropertyChain">
            <summary>
            A string like "Found a segment that isn't a path while parsing the path within a select or expand query option."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.UriParser_NeedServiceRootForThisOverload">
            <summary>
            A string like "A service root URI must be provided to the ODataUriParser in order to use this method."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.UriParser_NegativeLimit">
            <summary>
            A string like "The limit must be greater than or equal to zero"
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.PathParser_FunctionsAreNotSupported">
            <summary>
            A string like "Functions are not supported in this version. Only Actions and Service Operations are supported."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.PathParser_CannotUseValueOnCollection">
            <summary>
            A string like "$value cannot be applied to a collection."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataFeed_MustNotContainBothNextPageLinkAndDeltaLink">
            <summary>
            A string like "A feed may contain a next page link, a delta link or neither, but must not contain both."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataExpandPath_OnlyLastSegmentMustBeNavigationProperty">
            <summary>
            A string like "The last segment, and only the last segment, must be a navigation property in $expand."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataSelectPath_CannotEndInTypeSegment">
            <summary>
            A string like "The last segment in a $select cannot be a TypeSegment."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataSelectPath_OperationSegmentCanOnlyBeLastSegment">
            <summary>
            A string like "An operation can only be the last segment in $select."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ODataSelectPath_NavPropSegmentCanOnlyBeLastSegment">
            <summary>
            A string like "A navigation property can only be the last segment in $select."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.OperationSegment_ReturnTypeForMultipleOverloads">
            <summary>
            A string like "No type could be computed for this Segment since there were multiple possible operations with varying return types."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.OperationSegment_CannotReturnNull">
            <summary>
            A string like "The return type from the operation is not possible with the given entity set."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SingleValueFunctionCallNode_FunctionImportsWithLegacyConstructor">
            <summary>
            A string like "Please construct this SingleValueFunctionCallNode using the IEnumerable&lt;IEdmFunctionImport&gt; overload before accessing FunctionImports."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SingleEntityFunctionCallNode_CallFunctionImportsUsingLegacyConstructor">
            <summary>
            A string like "Please construct this SingleEntityFunctionCallNode using the IEnumerable&lt;IEdmFunctionImport&gt; overload before accessing FunctionImports."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SegmentArgumentParser_TryConvertValuesForNamedValues">
            <summary>
            A string like "Calling the wrong overload to convert named values to type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SegmentArgumentParser_TryConvertValuesToNonPrimitive">
            <summary>
            A string like "Cannot use a non-primitive type as a parameter."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.SegmentArgumentParser_TryConvertValuesForPositionalValues">
            <summary>
            A string like "Calling the wrong overload to convert positional values to type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.RequestUriProcessor_EmptySegmentInRequestUrl">
            <summary>
            A string like "Empty segment encountered in request URL. Please make sure that a valid request URL is specified."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.RequestUriProcessor_SyntaxError">
            <summary>
            A string like "Bad Request - Error in query syntax."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.RequestUriProcessor_CountOnRoot">
            <summary>
            A string like "The request URI is not valid, the segment $count cannot be applied to the root of the service."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.BadRequest_ValuesCannotBeReturnedForSpatialTypes">
            <summary>
            A string like "$value must not be specified for spatial values."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.BadRequest_ResourceCanBeCrossReferencedOnlyForBindOperation">
            <summary>
            A string like "Error processing request stream. In batch mode, a resource can be cross-referenced only for bind/unbind operations. "
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.RequestUriProcessor_KeysMustBeNamed">
            <summary>
            A string like "Segments with multiple key values must specify them in 'name=value' form."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.RequestUriProcessor_Forbidden">
            <summary>
            A string like "Forbidden"
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.RequestUriProcessor_OperationSegmentBoundToANonEntityType">
            <summary>
            A string like "Found an operation bound to a non-entity type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExceptionUtils_ArgumentStringNullOrEmpty">
            <summary>
            A string like "Value cannot be null or empty."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.ExpressionLexer_UnbalancedBracketExpression">
            <summary>
            A string like "Found an unbalanced bracket expression."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.JsonReader_MultipleTopLevelValues">
            <summary>
            A string like "Invalid JSON. More than one value was found at the root of the JSON content. JSON content can only have one value at the root level, which is an array, an object or a primitive value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.JsonReader_EndOfInputWithOpenScope">
            <summary>
            A string like "Invalid JSON. Unexpected end of input was found in JSON content. Not all object and array scopes were closed."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.JsonReader_UnrecognizedToken">
            <summary>
            A string like "Invalid JSON. A token was not recognized in the JSON content."
            </summary>
        </member>
        <member name="P:Microsoft.Data.OData.Strings.JsonReader_UnexpectedEndOfString">
            <summary>
            A string like "Invalid JSON. Unexpected end of input reached while processing a JSON string value."
            </summary>
        </member>
        <member name="T:Microsoft.Data.OData.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:Microsoft.Data.OData.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
    </members>
</doc>

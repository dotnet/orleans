<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Studios.StudiosNebula.Configuration</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Azure.AzureBlobSetting`1">
            <summary>
            <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSetting`1"/> that uses Azure as the backing store. 
            By default class will use <see cref="P:Microsoft.Studios.StudiosNebula.Configuration.Azure.AzureStorageProxy.Default"/> for storage proxy.
            </summary>
            <typeparam name="T"></typeparam>
            <example>
             public readonly AzureBlobSetting&lt;SerializeMe&gt; BlobWithBackup = new AzureBlobSetting&lt;SerializeMe&gt;("blobpath")
                   .ResourceBackup("Microsoft.Studios.StudiosNebula.Configuration.Test.Serialized.SerializeMe1.xml").WithStorage(SomeOtherStorage);
            </example>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase">
            <summary>
            Non-Generic base for BlobSetting. Allows Config to act on BlobSettings without everything
            being generic.
            </summary>
        </member>
        <member name="F:Microsoft.Studios.StudiosNebula.Configuration.SettingBase.UseConfigOverrideProvider">
            <summary>
            Used to decide whether or not to check for overridden values.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingBase.ParseXNode(System.Xml.Linq.XNode)">
            <summary>
            Returns an object built by parsing the XML. Does not change _value.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingBase.TryParse(System.Xml.Linq.XNode)">
            <summary>
            Parses the xml and sets _value.
            </summary>
            <returns>true if successful. False otherwise.</returns>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingBase.SettingsKey">
            <summary>
            Internally exposed SettingsKey that exposes the SettingsGroup+PropertyName for this setting.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Setting`2.ToXNode(`0)">
            <summary>
            Generates XML for the passed in value. This method does not change _value.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Setting`2.ToXNode">
            <summary>
            Generate XML for the current _value.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Setting`2.Parse(System.Xml.Linq.XNode)">
            <summary>
            Base Parse method for parsing the XNode that lives inside the Value Element.
            It is expected that this method will throw exceptions for any failure.
            This does not set _value, merely returns a parsed object for this type.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Setting`2.ParseXNode(System.Xml.Linq.XNode)">
            <summary>
            Wrapper used to call the Setting specific version of Parse(). 
            This exists as a mean to expose Parse() functionality, which is templated, from SettingBase which
            is not.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Setting`2.TryParse(System.Xml.Linq.XNode)">
            <summary>
            Tries to parse the XNode passed in. Sets _value.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Setting`2.GetValueOverrideOrDefault">
            <summary>
            Checks the OverrideManager for an overridden value for this setting. Otherwise returns default.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Setting`2.Override(`0,Microsoft.Studios.StudiosNebula.Configuration.CfgEnvironment,Microsoft.Studios.StudiosNebula.Configuration.CfgRole,Microsoft.Studios.StudiosNebula.Configuration.CfgService)">
            <summary>
            ultimate override for settings
            </summary>
            <param name="val">override value for the specific target</param>
            <param name="env">use val on the specified environment, use null for all environment</param>
            <param name="cfgService">use val on the specified component, use null for all components</param>
            <param name="cfgRole">use val on the specified role, use null for all roles</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.IStorageProvider.IsPreviewInstance">
            <summary>
            Returns true if the instance represents a preview 
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.IStorageProvider.PreviewDateTimeUtc">
            <summary>
            Returns the UTC date time for the preview
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.IStorageProvider.StorageProxy">
            <summary>
            Gets the storage proxy used for getting streams for updates
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.IStorageProvider.SupportsPreview">
            <summary>
            Returns true if the SettingsGroup supports preview
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase.CopyResourceAndBlobObject(Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase)">
            <summary>
            Copies _blobObject, _resourcePath, and _assembly from the passed in BlobSettingBase.
            </summary>
            <param name="bs"></param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase.SetTestOverrideStorageProxy(Microsoft.Studios.StudiosNebula.Configuration.Storage.ISettingsStorageProxy)">
            <summary>
            Use for test to override storage
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase.BlobObjectIsNull">
            <summary>
            Used to check if we still need to initialize this object.
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase.StorageProxy">
            <summary>
            Gets the storage proxy used for getting streams for updates
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase.IsPreviewInstance">
            <summary>
            Returns true if the instance represents a preview 
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase.PreviewDateTimeUtc">
            <summary>
            Returns the UTC date time for the preview
            </summary>
        </member>
        <member name="E:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase.BlobChanged">
            <summary>
            Fired when the underlying blob object changes
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSetting`1.ResolveEmbeddedResource(System.Reflection.Assembly)">
            <summary>
            Will resolve the embedded resource from the passed in assembly.
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSetting`1.TryUpdateFromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Will attempt to update the BlobObject by deserializing from the passed in stream.
            Returns true iff we successfully update the object. False if we failed or did
            not meet the conditions to update.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSetting`1.TryUpdateFromStream(System.IO.Stream)">
            <summary>
            Will attempt to update the BlobObject by deserializing from the passed in stream.
            Returns true iff we successfully update the object. False if we failed or did
            not meet the conditions to update.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSetting`1.TryUpdateFromResourceBackup">
            <summary>
            Returns true if BlobObject was updated via resourcebackup. False if we could not update it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSetting`1.ResourceBackup(System.String)">
            <summary>
            Specifies a location for the embedded resource to be used as a backup
            for the xml from blob store. 
            </summary>
            <param name="resourcePath"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSetting`1.IsLoadedFromResourceBackup">
            <summary>
            Indicates whether we've loaded the blobsetting from resource backup.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Azure.AzureSettingsGroup`1">
            <summary>
            Settings group backed by Azure Blob Storage
            </summary>
            <typeparam name="TSelf"></typeparam>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.GetValue(System.String)">
            <summary>
            Returns the object for given setting key
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.SetBlobSettingFromStream(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            DEPRECATED: Use standard test hook instead. To be removed once test code is cleaned up.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.SetValueAsync(System.String,System.String,System.Boolean)">
            <summary>
            String wrapper for SetValue, passes the string in as XText.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.SetValueAsync(System.String,System.Xml.Linq.XNode,System.Boolean)">
            <summary>
            Set value of a setting from a String.
            </summary>
            <param name="setting"></param>
            Name of the setting
            <param name="value"></param>
            New value of the setting in string form
            <param name="throwErrors"></param>
            True if it should throw exceptions for parse failures. False if it should log and proceed.
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.ConfigSettingChangeAsync(System.Object,Microsoft.Studios.StudiosNebula.Configuration.SettingChangeEventArgs)">
            <summary>
            Will try to push updates to a single Setting using the
            SettingChangeEventArgs passed in.
            
            Will throw Exception if it fails to set the setting.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.UpdateFromStorage(System.Boolean)">
            <summary>
            Signals to the settings group to update contents from storage
            </summary>
            <param name="force">if set to <c>true</c> forces an update from storage.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.UpdateSettings(Microsoft.Studios.StudiosNebula.Configuration.XML.SettingsGroupUpdate)">
            <summary>
            Update the settings group with the given changes
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.SettingsGroupName">
            <summary>
            Will return the Name of this SettingsGroup. 
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup.SettingsGroupType">
            <summary>
            Gets the type of SettingsGroup, for a class that inherits SettingsGroup,
            will return typeof(class)
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.GetInstanceAsync(System.Nullable{System.Boolean})">
            <summary>
            Returns the initialized singleton instance unless preview is requested. 
            If preview is requested in <see cref="P:Microsoft.Studios.StudiosNebula.Configuration.Config.PreviewManager"/> then 
            another instance that is not the preview instance will be returned.
            </summary>
            <remarks>
            Race condition here for multiple preview instances is unlikely in orleans with it's thread model. 
            other implementation may need to worry more about two threads getting here at once. Threading concerns
            should be addressed in the <seealso cref="T:Microsoft.Studios.StudiosNebula.Configuration.Preview.IPreviewStateManager"/> implementation.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.OnInstanceCreatedAsync">
            <summary>
            After the instance is created register the instance with the Config instance and call settings changed event
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.InitializeSettings">
            <summary>
            Called when we first access a class. Will read all the fields and cache them into a settings cache
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.ConfigSettingChangeAsync(System.Object,Microsoft.Studios.StudiosNebula.Configuration.SettingChangeEventArgs)">
            <summary>
            Will try to push updates to a single Setting using the
            SettingChangeEventArgs passed in.
            
            Will throw Exception if it fails to set the setting.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.CallAllSettingChangedAsync">
            <summary>
            For all UpdateableSettings in this that have a SettingChange handler
            defined, we will call it to initialize dependent fields.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.GetValue(System.String)">
            <summary>
            Returns the object for given setting key
            </summary>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.SetValueAsync(System.String,System.String,System.Boolean)">
            <summary>
            String wrapper for SetValue, passes the string in as XText.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.SetValueAsync(System.String,System.Xml.Linq.XNode,System.Boolean)">
            <summary>
            Set value of a setting from a String.
            </summary>
            <param name="setting"></param>
            Name of the setting
            <param name="value"></param>
            New value of the setting in string form
            <param name="throwErrors"></param>
            True if it should throw exceptions for parse failures. False if it should log and proceed.
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.SetBlobSettingFromStream(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            DEPRECATED: Use standard test hook instead. To be removed once test code is cleaned up.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.TestResetInstance">
            <summary>
            Resets the Instance to null. Used for testing only.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.SetTestOverrideStorageProxy(Microsoft.Studios.StudiosNebula.Configuration.Storage.ISettingsStorageProxy)">
            <summary>
            Use for test to override storage
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.UpdateFromStorage(System.Boolean)">
            <summary>
            Signals to the settings group to update contents from storage
            </summary>
            <param name="force">if set to <c>true</c> forces an update from storage.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.UpdateSettings(Microsoft.Studios.StudiosNebula.Configuration.XML.SettingsGroupUpdate)">
            <summary>
            Update the settings group with the given changes
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.CreatePreviewInstance">
            <summary>
            Task to create a new instance of the settings group and initialize it from storage with preview settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.GetPreviewKey">
            <summary>
            preview manager will need additional logic in a real implementation 
            to join this key and the request together to form a single cache.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.Instance">
            <summary>
            Blocking call to get the initialized instance of the settings group or a preview instance is preview is requested
            </summary>
            <remarks>
            Avoid events that fire on settings initialization that re-enter into this. It will cause a deadlock.
            </remarks>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.SettingsGroupType">
            <summary>
            Gets the type of SettingsGroup, for a class that inherits SettingsGroup,
            will return typeof(class)
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.SettingsGroupName">
            <summary>
            Will return the Name of this SettingsGroup. 
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.RegisterForAutomaticUpdates">
            <summary>
            Determines if settings group should automatically be registered with <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.Config"/> for automatic updates
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.StorageProxy">
            <summary>
            Returns the storage proxy used by the settings group
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.IsPreviewInstance">
            <summary>
            Returns true if the instance represents a preview 
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup`1.PreviewDateTimeUtc">
            <summary>
            Returns the UTC date time for the preview
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.CertificateHelper.GetCertificateFromThumbprint(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Boolean)">
            <summary>
            Perferred overload to use
            </summary>
            <param name="thumbprint"></param>
            <param name="storeName"></param>
            <param name="validOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.CertificateHelper.GetCertificateFromThumbprint(System.String,System.String,System.Boolean)">
            <summary>
            Backcompat overload
            </summary>
            <param name="thumbprint"></param>
            <param name="storeName"></param>
            <param name="validOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.CertificateHelper.GetCertificateFromThumbprint(System.String,System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Boolean)">
            <summary>
            Backcompat overload
            </summary>
            <param name="thumbprint"></param>
            <param name="storeName"></param>
            <param name="certStore"></param>
            <param name="validOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.CertificateHelper.GetCertificateFromThumbprint(System.String,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.Boolean)">
            <summary>
            Attempts to read a certificate out of the specified certificate store and return it to the caller
            </summary>
            <param name="thumbprint">The certificate's thumbprint</param>
            <param name="storeName">The cert store name</param>
            <param name="certStore">The certificate store to attempt to find the cert in</param>
            <param name="validOnly">Indicates if only valid certs will be returned</param>
            <returns>The found certificate or null if the cert was not found</returns>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.CfgEnvironment">
            <summary>
            Class to represent Environment Overrides for Settings objects (ex. IntegerSetting, StringSetting etc.)
            
            specified in overrides by using one of the static fields. 
            
                public readonly IntegerSetting = new IntegerSetting(0)
                        .Override(CfgEnvironment.Production);
                                  ^ Environment override.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.CfgRole">
            <summary>
            Class to represent Role Overrides for Settings objects (ex. IntegerSetting, StringSetting etc.)
            
            specified in overrides by using one of the static fields. 
            
                public readonly IntegerSetting = new IntegerSetting(0)
                        .Override(CfgEnvironment.Production, CfgRole.OrleansSiloWorker);
                                                             ^ Role Override.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.CfgService">
            <summary>
            Class to represent Service Overrides for Settings objects (ex. IntegerSetting, StringSetting etc.)
            
            specified in overrides by using one of the static fields. 
            
                public readonly IntegerSetting = new IntegerSetting(0)
                        .Override(CfgEnvironment.Production, CfgRole.OrleansSiloWorker, CfgService.Groups);
                                                                                        ^ Service Override.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Config">
            <summary>
            No explicit initialization is required by the component
            to get configuration information. The current environment name, role, and service name
            are detected automatically by the class. These will be consumed by Settings
            objects to determine which override to use.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1">
            <summary>
            Base class to help with the negotiation of settings &amp; updates.
            Automagically wires up singleton, ConfigurationSettingsChanged event, etc.
            </summary>
            <typeparam name="T">The subclass.  Used for singleton <see cref="P:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.Instance"/> property and its instantiation.</typeparam>
        </member>
        <member name="F:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.LazyInstance">
            <summary>
            Singleton handle of the Configuration subclass.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.ResetInstance">
            <summary>
            Test hook only; this essentially does a complete reset of the configuration object.  this is required sometimes
            because there are complex objects (careerdefinition) that are only hydrated loaded once
            </summary>
            <returns>a new instance of ConfigurationBase&lt;T&gt;</returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.GetConfigValue(System.String)">
            <summary>
            Test hook funciton to get a configuration value based on the property name
            </summary>
            <param name="propertyName">Name of the property in the Config object to get</param>
            <returns>string value of the property</returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.HydrateSetting(System.String)">
            <summary>
            Hydrates the setting.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.GetSetting(System.String,System.String@)">
            <summary>
            Gets the setting with the <paramref name="settingName"/>, and populating the backingstore <paramref name="privateSettingValue"/> if new.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="privateSettingValue">The private setting value.</param>
            <returns>The setting value.</returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.UpdateSetting(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Updates a setting.
            </summary>
            <param name="pair">The key value pair.</param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ConfigBase`1.ConfigurationSettingsChanged(System.Object,Microsoft.Studios.StudiosNebula.Configuration.ConfigurationSettingChangedEventArgs)">
            <summary>
            Handles the ConfigurationSettingsChanged event of the <see cref="P:Microsoft.Studios.StudiosNebula.Configuration.ConfigManager.Instance"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.ConfigurationSettingChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Microsoft.Studios.StudiosNebula.Configuration.Config.refreshTimer">
            This is the timer that triggers update request for Settings. Uses <see cref="F:Microsoft.Studios.StudiosNebula.Configuration.CoreSettings.ConfigUpdateInterval"/> for the value.
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.RegisterSettingsGroupAsync(Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup)">
            <summary>
            Adds the specified xml to the check for updates. The config xml should live in the XmlContainer
            specified in your environment.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.UnRegisterSettingsGroup(Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup)">
            <summary>
            To be used for test settingsGroups to unregister with config.
            </summary>
            <param name="settingsGroup"></param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.SetRefreshTimerSingleExecuteOverride(System.TimeSpan)">
            <summary>
            Allows the current settings refresh interval to be overridden for a single cycle.
            </summary>
            <param name="refreshTime">The time by which to delay refreshing.</param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.RecreateRefreshTimer(System.Nullable{System.TimeSpan})">
            <summary>
            Recreates the refresh timer if time is not null and not 0, the timer will
            update once after time expires, then reset to the configured time in <see cref="F:Microsoft.Studios.StudiosNebula.Configuration.CoreSettings.ConfigUpdateInterval"/>
            After the update the timer resets to its configurated timespan.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.CheckForUpdatesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Iterates through config.xml's checking for newer versions in blob store.
            If a newer version is found - update configs with those values.
            </summary>
            <param name="force">if set to <c>true</c> force updates of settings groups from storage.</param>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.UpdateSetting(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            This setting is called by the event handler from the main config class when a config update is detected.  
            It will check to see if we know what this config setting is, and if so, regenerate our config objects.
            </summary>
            <param name="pair">The KV pair for the setting in question</param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.UpdateConfigFromXmlAsync(System.IO.Stream)">
            <summary>
            Deserializes and pushes updates from the passed in stream. Can throw XmlException if 
            deserialization fails.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.FindBestOverride(System.Collections.Generic.IEnumerable{Microsoft.Studios.StudiosNebula.Configuration.XML.SettingOverride})">
            <summary>
            Iterates through the overrides and returns the best one. Will return null if no overrides
            match the current environment settings.
            </summary>
            <param name="overrides"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.GetCurrentEnvironment">
            <summary>
            Environment discovery.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.GetCurrentServiceName">
            <summary>
            Service discovery.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.IsTestEnvironment">
            <summary>
            Returns true if current environment is production, otherwise false
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Config.GetOverrideCount(System.String,System.String,System.String)">
            <summary>
            Checks how well the passed in override values match with the current environment.
            Will return -1 if any are unequal, 0 if none are specified, and 1-3 if one or
            more of the passed in values match.
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Config.TestUpdateFunc">
            <summary>
            Test hook used to override the update function. Can be used to test timer overrides
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Config.PreviewManager">
            <summary>
            Gets or set the preview manager used for the configuration system.
            This should be initialized when the system is initialized
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Config.AzureRootContainer">
            <summary>
            Configured with Microsoft.Studios.StudiosNebula.Configuration.AzureRootContainer in the app settings or cscfg for the application.
            This allows the system to prefix a constant path to storage systems. It's up to the storage proxy to use the value
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.ExponentialRetryWithMinAndMaxBackoff">
            <summary>
            Represents a retry policy that performs a specified number of retries, using a randomized exponential backoff scheme to determine the interval between retries.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ExponentialRetryWithMinAndMaxBackoff.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry"/> class.
            
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ExponentialRetryWithMinAndMaxBackoff.#ctor(System.TimeSpan,System.Int32,System.TimeSpan,System.TimeSpan,System.Action{System.Int32,System.Int32,System.Exception,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry"/> class using the specified delta and maximum number of retries.
            
            </summary>
            <param name="deltaBackoff">The backoff interval between retries.</param><param name="maxAttempts">The maximum number of retry attempts.</param>
            <param name="minBackoff">Minimum backoff interval</param>
            <param name="maxBackoff">Maximum backoff interval</param>
            <param name="onRetry">A custom action to perform in the case of a retry</param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ExponentialRetryWithMinAndMaxBackoff.ShouldRetry(System.Int32,System.Int32,System.Exception,System.TimeSpan@,Microsoft.WindowsAzure.Storage.OperationContext)">
            <summary>
            Determines if the operation should be retried and how long to wait until the next retry.
            
            </summary>
            <param name="currentRetryCount">The number of retries for the given operation. A value of zero signifies this is the first error encountered.</param><param name="statusCode">The status code for the last operation.</param><param name="lastException">An <see cref="T:System.Exception"/> object that represents the last exception encountered.</param><param name="retryInterval">The interval to wait until the next retry.</param><param name="operationContext">An <see cref="T:Microsoft.WindowsAzure.Storage.OperationContext"/> object for tracking the current operation.</param>
            <returns>
            <c>true</c> if the operation should be retried; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ExponentialRetryWithMinAndMaxBackoff.CreateInstance">
            <summary>
            Generates a new retry policy for the current request attempt.
            
            </summary>
            
            <returns>
            An <see cref="T:Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy"/> object that represents the retry policy for the current request attempt.
            </returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.EnumerableExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a null IEnumerable into an empty IEnumerable of the same type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Extensions.SafeExtensions">
            <summary>
            A set of extensions that wrap standard error checking around common functionality
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.SafeExtensions.SafeDispose(System.IDisposable)">
            <summary>
            Calls dispose on the passed IDisposable unless it is null.
            </summary>
            <param name="disposable">The IDisposable to call dispose on.</param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.SafeExtensions.SafeToString(System.Object,System.String)">
            <summary>
            Call ToString on an object and return the value. If the target object is null, return the passed valueIfNull value.
            </summary>
            <param name="target">The object to call ToString against.</param>
            <param name="valueIfNull">The value to return if the target object is null. Defaults to the string &lt;null&gt;</param>
            <returns>The string</returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.SafeExtensions.SafeToString(System.Exception,System.String)">
            <summary>
            Call ToString on an Exception and return the value. If the target object is null, return the passed valueIfNull value. If the Exception is an AggregateException, flatten it first.
            </summary>
            <param name="target">The object to call ToString against.</param>
            <param name="valueIfNull">The value to return if the target object is null. Defaults to the string &lt;null&gt;</param>
            <returns>The string</returns>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Preconditions">
            <summary>
            Used to validate function parameters
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.PreviewUnavailableException">
            <summary>
            Exception used when storage proxy returns an empty stream for preview
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Preview.DefaultPreviewStateManager">
            <summary>
            Config system does not have a default preview implementation. 
            This class always returns false for <see cref="M:Microsoft.Studios.StudiosNebula.Configuration.Preview.DefaultPreviewStateManager.GetIsPreviewRequested"/>
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Preview.IPreviewStateManager">
            <summary>
            Manages the state of preview for settings groups
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Preview.IPreviewStateManager.GetIsPreviewRequested">
            <summary>
            Returns true if preview is requested. 
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Preview.IPreviewStateManager.GetPreviewDateUtc">
            <summary>
            Returns the preview date
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Preview.IPreviewStateManager.GetOrAddPreview``1(System.String,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            If an instance of the given type and string was registered then return the instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="instanceCreator">The instance creator.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ConfigManager.GetSetting``1(System.String,``0,System.Action{System.Exception})">
            <summary>
            Gets the specified setting from the configuration system.
            </summary>
            <typeparam name="T">The setting type.</typeparam>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <param name="failHandler">The default value.</param>
            <returns>The <typeparamref name="T"/> value.</returns>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.ConfigManager.IsInAzure">
            <summary>
            Used to check if you're in an Azure environment. Will capture exceptions sometimes thrown
            when doing these checks on machines without Azure installed.
            </summary>
        </member>
        <member name="F:Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.X509Certificate2Wrapper.EmptyThumbprint">
            <summary>
            A way to specify that the thumbprint, and therefore the X509Certificate, is basically empty
            This enables us to selectively attempt to load the actual X509Certificate2 object from the cert store
            And handle any failures from that load vs. the scenario where we purposely specify nothing for an optional certificate
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroupUpdateManager.UpdateConfigFromXml(System.IO.Stream)">
            <summary>
            Deserializes and pushes updates from the passed in stream. Can throw XmlException if 
            deserialization fails.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroupUpdateManager.UpdateSettings(Microsoft.Studios.StudiosNebula.Configuration.XML.SettingsGroupUpdate)">
            <summary>
            Reads in passed in settings and will update them where appropriate.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroupUpdateManager.WriteSettingsAndNotify(System.Collections.Generic.Dictionary{Microsoft.Studios.StudiosNebula.Configuration.SettingsKey,System.Xml.Linq.XNode})">
            <summary>
            Will write new values into the settingsCache and notify listeners
            of updated values. This will effectively update the SettingsGroup.Instance with
            new values as well.
            </summary>
            <param name="newSettings"></param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroupUpdateManager.UpdateBlobSettingAsync(Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase,System.Boolean)">
            <summary>
            If online - will check blob store for an update to this BlobSettingBase.
            </summary>
            <param name="blobSetting">The blob to update.</param>
            <param name="force">if set to <c>true</c> then the date time will be altered to force a refresh from storage</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroupUpdateManager.CacheSettings(System.Collections.Generic.Dictionary{Microsoft.Studios.StudiosNebula.Configuration.SettingsKey,System.Xml.Linq.XNode})">
            <summary>
            Caches new values for settings into the SettingsCache.
            </summary>
            <param name="settings"> (string,string) representation of new settings. Key
                                        is the setting name, value is the new value.
            </param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroupUpdateManager.RegisterBlobSetting(Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase,System.Boolean)">
            <summary>
            Adds a BlobSettingBase to the dictionary and will cause it to be updated periodically from blob store (if online).
            </summary>
            <param name="blobSetting">The BLOB setting.</param>
            <param name="updateFromStorage">if set to <c>true</c> update blob from storage.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.SettingsGroupUpdateManager.ReplaceBlobSetting(Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase,Microsoft.Studios.StudiosNebula.Configuration.SettingsDefinitions.BlobSettingBase)">
            <summary>
            When replacing a blobsetting we need to make sure the dictionary gets updated properly. 
            This method will remove the old blobsetting from the dictionary and add in the new.
            Old objects that are properly deserialized will be copied to the new AzureBlobSetting,
            but in the dictionary they will have DateTime.Min as their timestamp, and will
            be updated by the new blob location if available.
            It will also copy over the assembly and resource backups if they are available.
            </summary>
            <param name="oldBlob"></param>
            <param name="newBlob"></param>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.SettingsKey">
            <summary>
            Represents a setting. Is a combination of SettingsGroup name and the name of the variable itself.
            </summary>
        </member>
        <member name="F:Microsoft.Studios.StudiosNebula.Configuration.Extensions.ConfigStorageExtensions.RootContainer">
            <summary>
            Defines the root container
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.ConfigStorageExtensions.TrySplitContainerNameAndBlobName(System.String,System.String,System.String@,System.String@)">
            <summary>
            Attempts to split the path into a container and blob name.
            </summary>
            <param name="blobPath">Full path to blob</param>
            <param name="delimiter">What we are using to split the path</param>
            <param name="containerName">Resulting containerName, is $root if empty</param>
            <param name="blobName">Resulting blobName</param>
            <returns>Whether it was successful</returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.ConfigStorageExtensions.GetBlobDirectoryReference(Microsoft.WindowsAzure.Storage.Blob.CloudBlobClient,System.String)">
            <summary>
            Gets an instance of CloudBlobDirectory class from the specified virtual directory name.
            Note that directory name should inclide container name, ex: containername/dirName
            </summary>
            <param name="blobClient">Blob client</param>
            <param name="directoryName">Directory name including container name</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Storage.ISettingsStorageProxy">
            <summary>
            Storage proxy used to communicate with backing store for new settings files.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Storage.ISettingsStorageProxy.GetStreamIfNewerAsync(System.String,System.DateTime)">
            <summary>
            Get a stream for a file if it's been modified since the provided time
            </summary>
            <param name="resourcePath">Relative path to the file</param>
            <param name="lastUpdateTimeUtc">Time local file was last fetched</param>
            <returns>
            A <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.Storage.IStorageResponse"/> with the stream, status code and last modified date in UTC
            </returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Storage.ISettingsStorageProxy.GetPreviewStreamAsync(System.String,System.DateTime)">
            <summary>
            Get a stream for a file at the given date 
            If there's no expected change for the file at that given time the current version should be returned.
            </summary>
            <param name="resourcePath">Relative path to the file</param>
            <param name="viewDateUtc">Time local file was last fetched</param>
            <returns>
            A <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.Storage.IStorageResponse"/> with the stream, status code and optionally a date time for when the file will be changed.
            If the status code is OK the stream should not be null.
            </returns>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Storage.IStorageResponse">
            <summary>
            Represents a response back from storage proxy
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Storage.IStorageResponse.StatusCode">
            <summary>
            Returns the status code of storage provider
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Storage.IStorageResponse.Stream">
            <summary>
            Returns a stream to the requested resource
            Can be null if the resource has not been updated or other error conditions occured 
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Storage.IStorageResponse.LastModifiedUtc">
            <summary>
            The servers last modified time in UTC for the resource
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Storage.IStorageResponse.ResourceUrl">
            <summary>
            Optional path to resource that was returned. 
            Can be useful if storage modifies the the path of the resource
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Storage.StorageResponse.CreateEmpty(System.String,System.Net.HttpStatusCode)">
            <summary>
            Helper method for creating an empty response, will throw an exception if the status code is Ok
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Storage.StorageResponse.StatusCode">
            <summary>
            Returns the status code of storage provider
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Storage.StorageResponse.Stream">
            <summary>
            Returns a stream to the requested resource
            Can be null if the resource has not been updated or other error conditions occured
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Storage.StorageResponse.LastModifiedUtc">
            <summary>
            The servers last modified time in UTC for the resource
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.Storage.StorageResponse.ResourceUrl">
            <summary>
            Optional path to resource that was returned.
            Can be useful if storage modifies the the path of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.Extensions.TaskHelper">
            <summary>
            TODO: consider merge with the TaskHelpers elsewhere Dispatcher.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.TaskHelper.FireAndForget(System.Threading.Tasks.Task)">
            <summary>
            Use this function to remove warnings if you plan on firing an asynchronous event but do not wish to await it
            
            WARNING:
            A task that is FireAndForget should handle all of the error cases. 
            The logging done in this method is only in place to help us detect coding errors where a FireAndForget Task is not properly handling it's errors. 
            You should not write code that relies on this logging behavior as a way to log errors.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.TaskHelper.WithTimeout(System.Threading.Tasks.Task,System.TimeSpan)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeSpan">Amount of time to wait before timing out</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The completed task</returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.TaskHelper.WithTimeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            <summary>
            This will apply a timeout delay to the task, allowing us to exit early
            </summary>
            <param name="taskToComplete">The task we will timeout after timeSpan</param>
            <param name="timeSpan">Amount of time to wait before timing out</param>
            <exception cref="T:System.TimeoutException">If we time out we will get this exception</exception>
            <returns>The value of the completed task</returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.TaskHelper.FromException(System.Threading.Tasks.TaskFactory,System.Exception)">
            <summary>
            Creates a Task that has completed in the Faulted state with the specified exception.
            Inspired by ParallelExtensions
            </summary>
            <param name="factory">The target TaskFactory.</param><param name="exception">The exception with which the Task should fault.</param>
            <returns>
            The completed Task.
            </returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Extensions.TaskHelper.FromException``1(System.Threading.Tasks.TaskFactory,System.Exception)">
            <summary>
            Creates a Task that has completed in the Faulted state with the specified exception.
            Inspired by ParallelExtensions
            </summary>
            <typeparam name="TResult">Specifies the type of payload for the new Task.</typeparam><param name="factory">The target TaskFactory.</param><param name="exception">The exception with which the Task should fault.</param>
            <returns>
            The completed Task.
            </returns>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.Timers.AsyncTimer.Dispose">
            <summary>
            Stops the timer
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.TypeConverterHelper.AutoConvertFromString``1(System.String)">
            <summary>
            Attempt to find converter for and convert to type T.
            Will throw is input is not valid.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.TypeConverterHelper.AutoConvertToString``1(``0)">
            <summary>
            Using typeconverter, convert T to a string. Can throw NotSupportedException
            from the ConvertToInvariantString operation.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.ConfigOverrideException">
            <summary>
            Exception thrown from anything involving the ConfigValueOverrides. Should never
            be used in a production environment.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.ConfigValueOverrideGenerator">
            <summary>
            Generator to be used by tests to generate compact XML for overriding Config values.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.ConfigValueOverrideGenerator.AddOverride(Microsoft.Studios.StudiosNebula.Configuration.SettingBase,System.Object)">
            <summary>
            Helper method to add settings to the generator.
            </summary>
            <param name="setting">A Setting you wish to override.</param>
            <param name="value">Value to override with.</param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.ConfigValueOverrideGenerator.AddOverride``1(Microsoft.Studios.StudiosNebula.Configuration.SettingsGroup{``0},System.String,System.Object)">
            <summary>
            A helper method to add settings to the generator when the setting field on the settings group is private.
            </summary>
            <typeparam name="T">
            The type of the settings group.
            </typeparam>
            <param name="settingsGroup">
            The settings group.
            </param>
            <param name="settingName">
            The setting name.
            </param>
            <param name="value">
            The setting override value.
            </param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.ConfigValueOverrideGenerator.Generate">
            <summary>
            Uses CompactXmlGenerator to generate xml appropriate for a header. Throws if content has newlines.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.ConfigValueOverrideManager.TEST_ClearConfigOverrideProvider">
            <summary>
            Only to be used in Test environments to clear the override provider. 
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.ConfigValueOverrideManager.TryGetBlobObjectOverrideAsync``1(Microsoft.Studios.StudiosNebula.Configuration.SettingsKey,Microsoft.Studios.StudiosNebula.Configuration.Storage.ISettingsStorageProxy,System.Func{System.IO.Stream,``0})">
            <summary>
            Checks for a BlobSettingOverride and, if found, will download and deserialize the blob.
            Will throw if blob doesn't exist or doesn't deserialize properly.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.IConfigValueOverrideProvider">
            <summary>
            Interface used by Config to check for override data.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.IConfigValueOverrideProvider.GetOverrides">
            <summary>
            Returns a string that contains configxml data.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.OfflineConfigOverrideContext">
            <summary>
            Use this if you wish to override settings in a BVT/offline environment. Preferred usage is:
            
            using (new OfflineConfigOverrideContext(overrideData))
            {
                // Test for overridden values.
            }
            
            Note that you cannot nest these, as they interact with the Singleton ConfigValueOverrideManager, which does not allow
            multiple overrideproviders at this time. 
            
            Do not use in functional/evt/production code.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.ValueOverride.OfflineConfigValueOverrideProvider">
            <summary>
            A Simple override provider that can be used to test the IConfigValueOverrideProvider in an offline scenario.
            Just set OverrideData to the xml you wish to use. See ConfigValueOverrideGenerator to help with generation.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.LoadFrom(System.IO.Stream)">
            <summary>
            Parses the xml for SettingUpdate information. Throws XmlException.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.LoadFrom(System.String)">
            <summary>
            Parses the xml for SettingUpdate information. Throws XmlException.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.ParseConfigUpdate(System.Xml.Linq.XElement)">
            <summary>
            Parses all update information from the passed in XElement.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.ParseSettingsGroupUpdate(System.Xml.Linq.XElement)">
            <summary>
            Parses a SettingGroupUpdate from the passed in settingsGroup XElement, and all child 
            SettingUpdates and overrides.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.ParseSettingUpdate(System.Xml.Linq.XElement)">
            <summary>
            Parses a SettingUpdate object from the Setting XElement passed in.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.GetValueNode(System.Xml.Linq.XElement)">
            <summary>
            Takes a given Element, finds the Value Element, and parses its contents to an XNode.
              - Priority is given to Elements, if the Value element contains any other elements this
                    function will assume that the First XElement in its children is the desired value.
              - If no element is found, we look for a non empty XText inside and trim whitespace from
                    beginning and end. 
              - rootElement can be a Setting, or SettingOverride element.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.GetRequiredElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the child element of the rootElement passed in with the name == expectedChildElementName. 
            Will throw XmlException if this element is not found.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.GetRequiredAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the value of the attribute of the element passed in.
            Throws XmlException if the attribute does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XmlConfigProvider.GetOptionalAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the value of the attribute of the element passed in.
            Returns null if the attribute does not exist.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.CompactXmlGenerator">
            <summary>
            Used to generate Compact XML for the ValueOverride header.
            
            This XML is almost the same as what is generated by the regular ConfigXmlGenerator, however this does 
            not include any overrides, descriptions, or xml formatting. Will also throw if we get over the MaxSize specified
            in the class.
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigXmlGenerator">
            <summary>
            Class used to generate config xml from a .Net assembly
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigXmlGenerator.Generate(System.String,System.String,System.String,System.String)">
            <summary>
            Generates config xml for the specified assembly.
            </summary>
            <param name="assemblyLocation">The assembly location.</param>
            <param name="xmlOutputRootFolder">The XML output root folder where generated files will be placed. Sub folders will be 
            created depending on the folders specified in <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigXmlOutputFolderAttribute"/> of each <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup"/> in the file.</param>
            <param name="xmlOutputFileName">Name of the XML output file, should not be a fully qualified path.</param>
            <param name="buildLabel">The build label.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigXmlOutputFolderAttribute">
            <summary>
            Attribute allows <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.ISettingsGroup"/> implementations to define the folder that should be used for Config Xml generation
            </summary>
        </member>
        <member name="P:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigXmlOutputFolderAttribute.Directory">
            <summary>
            The lowercase folder name to generate xml files
            </summary>
        </member>
        <member name="T:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.SettingDefinition">
            <summary>
            Settings use an XElement or XText to store their values.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigReflector.LoadTypeFrom(System.Type,System.Type[])">
            <summary>
            try loading the type class from the target assembly first,
            if not found, fall back to local assembly
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigReflector.PrintLabelAndTimeStamp(System.String,System.Xml.XmlTextWriter)">
            <summary>
            Outputs the ConfigVersion, MachineName, GenerationTime, and (if nonempty) BuildLabel elements to the xml.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigReflector.ListSettings(System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo},System.Object,System.Xml.XmlTextWriter)">
            <summary>
            Iterates through all simple settings and outputs them to xml.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigReflector.NewSetting(Microsoft.Studios.StudiosNebula.Configuration.SettingBase)">
            <summary>
            Sets the ClientData on the SettingsBase passed in to a new SettingDefinition
            </summary>
            <param name="settingBase"></param>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigReflector.NewSettingOverride(Microsoft.Studios.StudiosNebula.Configuration.SettingBase,System.Xml.Linq.XNode,System.String,System.String,System.String)">
            <summary>
            When we get an override add information to the SettingDefinition.
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.SymbolResolver.GetSourceLoc(System.Reflection.Module,System.Int32,System.String@,System.Int32@)">
            <summary>
            Get a string representing the source location for the given method
            </summary>
        </member>
        <member name="M:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.XmlOutputFolderHelper.GetConfigXmlFolder(System.Type)">
            <summary>
            Gets the configuration XML folder from the <see cref="T:Microsoft.Studios.StudiosNebula.Configuration.XML.Generation.ConfigXmlOutputFolderAttribute"/>
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Type must be a class that implements ISettingsGroup</exception>
        </member>
    </members>
</doc>

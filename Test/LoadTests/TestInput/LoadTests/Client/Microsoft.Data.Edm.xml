<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Data.Edm</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Data.Edm.Csdl.CsdlLocation">
            <summary>
            Defines a location in a XML file.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmLocation">
            <summary>
            Represents the location of an Edm item.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmLocation.ToString">
            <summary>
            Gets a string representation of the location.
            </summary>
            <returns>A string representation of the location.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.CsdlLocation.ToString">
            <summary>
            Gets a string representation of the location.
            </summary>
            <returns>A string representation of the location.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.CsdlLocation.LineNumber">
            <summary>
            Gets the line number in the file.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.CsdlLocation.LinePosition">
            <summary>
            Gets the position in the line.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.EdmParseException">
            <summary>
            Exception type representing a failure to parse an EDM document. Carries the set of errors along with it.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmParseException.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Csdl.EdmParseException"/> class.
            </summary>
            <param name="parseErrors">The errors encountered while parsing.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmParseException.#ctor(System.Collections.Generic.List{Microsoft.Data.Edm.Validation.EdmError})">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Data.Edm.Csdl.EdmParseException"/> class from being created.
            </summary>
            <param name="parseErrors">The parse errors.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmParseException.ConstructMessage(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError})">
            <summary>
            Constructs an appropriate exception message from the set of parsing errors.
            </summary>
            <param name="parseErrors">The parse errors.</param>
            <returns>The exception message.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.EdmParseException.Errors">
            <summary>
            Gets the set of errors that were encountered while parsing.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.EdmxTarget">
            <summary>
            Specifies what target of an EDMX file.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.EdmxTarget.EntityFramework">
            <summary>
            The target is Entity Framework.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.EdmxTarget.OData">
            <summary>
            The target is OData.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.EdmValueParser">
            <summary>
            Contains xml parsing methods for Edm.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlExpressionBase">
            <summary>
            Common base type for a CSDL expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlElement">
            <summary>
            Common base class for CSDL elements.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlCollectionExpression">
            <summary>
            Represents a CSDL Collection expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlEnumMember">
            <summary>
            Represents a CSDL enumeration type member.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlNamedElement">
            <summary>
            Common base class for all named CSDL elements.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlElementWithDocumentation">
            <summary>
            Base class for CSDL elements that have documentation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlEnumMember.Value">
            <summary>
            Gets or sets the underlying type value of the member.
            Value can be null only during deserialization of the declaring enumeration type.
            When the type's deserialization is complete, all its members get their values assigned.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlEnumType">
            <summary>
            Represents a CSDL enumeration type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlPathExpression">
            <summary>
            Represents a CSDL Path expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlVocabularyAnnotationBase">
            <summary>
            Common base type for a CSDL type or value annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlAnnotations">
            <summary>
            Represents a CSDL Annotations element.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlCollectionType">
            <summary>
            Represents a CSDL collection type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.ICsdlTypeExpression">
            <summary>
            Represents an inline type expression, such as <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlCollectionType"/>, <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlRowType"/> and <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlEntityReferenceType"/> 
            in the context of <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlExpressionTypeReference"/>.
            Note that nominal type declarations, such as entity, complex, association and primitive types, are not considered to be type expressions in the context
            of <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlExpressionTypeReference"/> - these types are handled in <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlNamedTypeReference"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlConstantExpression">
            <summary>
            Represents a CSDL constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlPropertyValue">
            <summary>
            Represents a CSDL property value in an annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlRecordExpression">
            <summary>
            Represents a CSDL Record expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlPrimitiveTypeReference">
            <summary>
            Represents a reference to a CSDL primitive type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlNamedTypeReference">
            <summary>
            Represents a CSDL type reference based on a type referenced by name.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlTypeReference">
            <summary>
            Base type for the two kinds of type reference: <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlNamedTypeReference"/> and <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlExpressionTypeReference"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadEnumType">
            <summary>
            Represents a semantically invalid EDM enumeration type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadElement">
            <summary>
            Represents an invalid EDM element.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmElement">
            <summary>
            Common base interface for all EDM elements.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmCheckable">
            <summary>
            Defines an Edm component who is invalid or whose validity is unknown at construction
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmCheckable.Errors">
            <summary>
            Gets an error if one exists with the current object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmVocabularyAnnotatable">
            <summary>
            Represents an element that can be targeted by Vocabulary Annotations
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmType">
            <summary>
            Represents the definition of an EDM type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEnumType">
            <summary>
            Represents a definition of an EDM enumeration type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmSchemaType">
            <summary>
            Represents an EDM type defined in an EDM schema.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmSchemaElement">
            <summary>
            Common base interface for all named children of EDM schemata.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmNamedElement">
            <summary>
            Common base interface for all named EDM elements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmNamedElement.Name">
            <summary>
            Gets the name of this element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmSchemaElement.SchemaElementKind">
            <summary>
            Gets the kind of this schema element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmSchemaElement.Namespace">
            <summary>
            Gets the namespace this schema element belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEnumType.UnderlyingType">
            <summary>
            Gets the underlying type of this enumeration type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEnumType.Members">
            <summary>
            Gets the members of this enumeration type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEnumType.IsFlags">
            <summary>
            Gets a value indicating whether the enumeration type can be treated as a bit field.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmElement">
            <summary>
            Common base class for all EDM elements.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmTerm">
            <summary>
            Term to which an annotation can bind.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmTerm.TermKind">
            <summary>
            Gets the kind of a term.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEntityType">
            <summary>
            Represents a definition of an EDM entity type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmStructuredType">
            <summary>
            Common base interface for definitions of EDM structured types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmStructuredType.FindProperty(System.String)">
            <summary>
            Searches for a structural or navigation property with the given name in this type and all base types and returns null if no such property exists.
            </summary>
            <param name="name">The name of the property being found.</param>
            <returns>The requested property, or null if no such property exists.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStructuredType.IsAbstract">
            <summary>
            Gets a value indicating whether this type is abstract.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStructuredType.IsOpen">
            <summary>
            Gets a value indicating whether this type is open.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStructuredType.BaseType">
            <summary>
            Gets the base type of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStructuredType.DeclaredProperties">
            <summary>
            Gets the properties declared immediately within this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEntityType.DeclaredKey">
            <summary>
            Gets the structural properties of the entity type that make up the entity key.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsElement">
            <summary>
            Common base class for CsdlSemantics classes that have Annotations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmLocatable">
            <summary>
            Interface for all EDM elements that can be located.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmLocatable.Location">
            <summary>
            Gets the location of this element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsElement.AllocateAndAdd``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Allocates a new list if needed, and adds the item to the list.
            </summary>
            <typeparam name="T">Type of the list.</typeparam>
            <param name="list">List to add the item to.</param>
            <param name="item">Item being added.</param>
            <returns>List containing then new item.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmExpression">
            <summary>
            Represents an EDM expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmApplyExpression">
            <summary>
            Represents an EDM function application expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmApplyExpression.AppliedFunction">
            <summary>
            Gets the applied function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmApplyExpression.Arguments">
            <summary>
            Gets the arguments to the function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmAssertTypeExpression">
            <summary>
            Represents an EDM type assertion expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmAssertTypeExpression.Operand">
            <summary>
            Gets the expression for which the type is asserted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmAssertTypeExpression.Type">
            <summary>
            Gets the asserted type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsCollectionExpression">
            <summary>
            Provides semantics for a Csdl collection expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmCollectionExpression">
            <summary>
            Represents an EDM multi-value construction expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmCollectionExpression.DeclaredType">
            <summary>
            Gets the declared type of the collection, or null if there is no declared type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmCollectionExpression.Elements">
            <summary>
            Gets the constructed element values.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsDateTimeOffsetConstantExpression">
            <summary>
            Provides semantics for a Csdl datetime with offset constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmDateTimeOffsetConstantExpression">
            <summary>
            Represents an EDM datetime with offset constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmDateTimeOffsetValue">
            <summary>
            Represents an EDM datetime with offset value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmPrimitiveValue">
            <summary>
            Represents an EDM primitive value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmValue">
            <summary>
            Represents an EDM value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmValue.Type">
            <summary>
            Gets the type of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmDateTimeOffsetValue.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsDirectValueAnnotationsManager">
            <summary>
            Provides a CSDL-specific annotations manager.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager">
            <summary>
            Direct-value annotations manager provides services for setting and getting transient annotations on elements.
            </summary>
            <remarks>
            An object representing transient annotations is in one of these states:
               1) Null, if the element has no transient annotations.
               2) An EdmAnnotation, if the element has exactly one annotation.
               3) A list of EdmAnnotation, if the element has more than one annotation.
            If the speed of annotation lookup for elements with many annotations becomes a concern, another option
            including a dictionary is possible.
            </remarks>
        </member>
        <member name="T:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager">
            <summary>
            Manages getting and setting direct value annotations on EDM elements.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager.GetDirectValueAnnotations(Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets annotations associated with an element.
            </summary>
            <param name="element">The annotated element.</param>
            <returns>The direct value annotations for the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager.SetAnnotationValue(Microsoft.Data.Edm.IEdmElement,System.String,System.String,System.Object)">
            <summary>
            Sets an annotation value for an EDM element. If the value is null, no annotation is added and an existing annotation with the same name is removed.
            </summary>
            <param name="element">The annotated element.</param>
            <param name="namespaceName">Namespace that the annotation belongs to.</param>
            <param name="localName">Name of the annotation within the namespace.</param>
            <param name="value">The value of the annotation.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager.SetAnnotationValues(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding})">
            <summary>
            Sets a set of annotation values. If a supplied value is null, no annotation is added and an existing annotation with the same name is removed.
            </summary>
            <param name="annotations">The annotations to set</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager.GetAnnotationValue(Microsoft.Data.Edm.IEdmElement,System.String,System.String)">
            <summary>
            Retrieves an annotation value for an EDM element. Returns null if no annotation with the given name exists for the given element.
            </summary>
            <param name="element">The annotated element.</param>
            <param name="namespaceName">Namespace that the annotation belongs to.</param>
            <param name="localName">Local name of the annotation.</param>
            <returns>Returns the annotation value that corresponds to the provided name. Returns null if no annotation with the given name exists for the given element. </returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager.GetAnnotationValues(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding})">
            <summary>
            Retrieves a set of annotation values. For each requested value, returns null if no annotation with the given name exists for the given element.
            </summary>
            <param name="annotations">The set of requested annotations</param>
            <returns>Returns values that correspond to the provided annotations. A value is null if no annotation with the given name exists for the given element.</returns>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.annotationsDictionary">
            <summary>
            Keeps track of transient annotations on elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.annotationsDictionaryLock">
            <summary>
            Used for locking during updates to the annotations dictionary;
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.unsortedElements">
            <summary>
            Elements for which normal comparison failed to produce a valid result, arbitrarily ordered to enable stable comparisons.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.unsortedElementsLock">
            <summary>
            Used for locking during updates to the unsorted elements list.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.GetDirectValueAnnotations(Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets annotations associated with an element.
            </summary>
            <param name="element">The annotated element.</param>
            <returns>The immediate value annotations for the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.SetAnnotationValue(Microsoft.Data.Edm.IEdmElement,System.String,System.String,System.Object)">
            <summary>
            Sets an annotation value for an EDM element. If the value is null, no annotation is added and an existing annotation with the same name is removed.
            </summary>
            <param name="element">The annotated element.</param>
            <param name="namespaceName">Namespace that the annotation belongs to.</param>
            <param name="localName">Name of the annotation within the namespace.</param>
            <param name="value">New annotation to set.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.SetAnnotationValues(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding})">
            <summary>
            Sets a set of annotation values. If a supplied value is null, no annotation is added and an existing annotation with the same name is removed.
            </summary>
            <param name="annotations">The annotations to set</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.GetAnnotationValue(Microsoft.Data.Edm.IEdmElement,System.String,System.String)">
            <summary>
            Retrieves an annotation value for an EDM element. Returns null if no annotation with the given name exists for the given element.
            </summary>
            <param name="element">The annotated element.</param>
            <param name="namespaceName">Namespace that the annotation belongs to.</param>
            <param name="localName">Local name of the annotation.</param>
            <returns>Returns the annotation that corresponds to the provided name. Returns null if no annotation with the given name exists for the given element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.GetAnnotationValues(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding})">
            <summary>
            Retrieves a set of annotation values. For each requested value, returns null if no annotation with the given name exists for the given element.
            </summary>
            <param name="annotations">The set of requested annotations</param>
            <returns>Returns values that correspond to the provided annotations. A value is null if no annotation with the given name exists for the given element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.GetAttachedAnnotations(Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Retrieves the annotations that are directly attached to an element.
            </summary>
            <param name="element">The element in question.</param>
            <returns>The annotations that are directly attached to an element (outside the control of the manager).</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager.GetTransientAnnotations(Microsoft.Data.Edm.IEdmElement,Microsoft.Data.Edm.Internal.VersioningDictionary{Microsoft.Data.Edm.IEdmElement,System.Object})">
            <summary>
            Retrieves the transient annotations for an EDM element.
            </summary>
            <param name="element">The annotated element.</param>
            <param name="annotationsDictionary">The dictionary for looking up the element's annotations.</param>
            <returns>The transient annotations for the element, in a form managed by the annotations manager.</returns>
            <remarks>This method is static to guarantee that the annotations dictionary is not fetched more than once per lookup operation.</remarks>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmEntitySetReferenceExpression">
            <summary>
            Represents an EDM entity set reference expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmEntitySetReferenceExpression.ReferencedEntitySet">
            <summary>
            Gets the referenced entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmEnumMemberReferenceExpression">
            <summary>
            Represents an EDM enumeration member reference expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmEnumMemberReferenceExpression.ReferencedEnumMember">
            <summary>
            Gets the referenced enum member.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmFunctionReferenceExpression">
            <summary>
            Represents an EDM function reference expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmFunctionReferenceExpression.ReferencedFunction">
            <summary>
            Gets the referenced function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsGuidConstantExpression">
            <summary>
            Provides semantics for a Csdl guid constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmGuidConstantExpression">
            <summary>
            Represents an EDM guid constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmGuidValue">
            <summary>
            Represents an EDM integer value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmGuidValue.Value">
            <summary>
            Gets the definition of this guid value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsBinaryConstantExpression">
            <summary>
            Provides semantics for a Csdl binary constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmBinaryConstantExpression">
            <summary>
            Represents an EDM binary constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmBinaryValue">
            <summary>
            Represents an EDM binary value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmBinaryValue.Value">
            <summary>
            Gets the definition of this binary value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmIfExpression">
            <summary>
            Represents an EDM if expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmIfExpression.TestExpression">
            <summary>
            Gets the test expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmIfExpression.TrueExpression">
            <summary>
            Gets the expression to evaluate if <see cref="P:Microsoft.Data.Edm.Expressions.IEdmIfExpression.TestExpression"/> evaluates to true.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmIfExpression.FalseExpression">
            <summary>
            Gets the expression to evaluate if <see cref="P:Microsoft.Data.Edm.Expressions.IEdmIfExpression.TestExpression"/> evaluates to false.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmIsTypeExpression">
            <summary>
            Represents an EDM type test expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmIsTypeExpression.Operand">
            <summary>
            Gets the expression whose type is to be tested.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmIsTypeExpression.Type">
            <summary>
            Gets the type to be tested against.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmLabeledExpression">
            <summary>
            Represents an EDM labeled expression element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmLabeledExpression.Expression">
            <summary>
            Gets the underlying expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmLabeledExpressionReferenceExpression">
            <summary>
            Represents a reference to an EDM labeled expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmLabeledExpressionReferenceExpression.ReferencedLabeledExpression">
            <summary>
            Gets the referenced expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsDirectValueAnnotation">
            <summary>
            Provides semantics for a CsdlDirectValueAnnotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation">
            <summary>
            Represents an EDM annotation with an immediate value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation.NamespaceUri">
            <summary>
            Gets the namespace Uri of the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation.Value">
            <summary>
            Gets the value of this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsEnumMember">
            <summary>
            Provides semantics for a CsdlEnumMember.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEnumMember">
            <summary>
            Represents a definition of an EDM enumeration type member.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEnumMember.Value">
            <summary>
            Gets the value of this enumeration type member.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEnumMember.DeclaringType">
            <summary>
            Gets the type that this member belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsEnumTypeDefinition">
            <summary>
            Provides semantics for CsdlEnumType.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsTypeDefinition">
            <summary>
            Common base class for the semantics of EDM types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlTypeAnnotation">
            <summary>
            Represents a CSDL type annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlValueAnnotation">
            <summary>
            Represents a CSDL value annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlValueTerm">
            <summary>
            Represents a CSDL value term.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsAnnotations">
            <summary>
            Provides semantics for an out-of-line CSDL Annotations.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsBooleanConstantExpression">
            <summary>
            Provides semantics for a Csdl Bool constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmBooleanConstantExpression">
            <summary>
            Represents an EDM boolean constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmBooleanValue">
            <summary>
            Represents an EDM boolean value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmBooleanValue.Value">
            <summary>
            Gets a value indicating whether the value of this boolean value is true or false.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsCollectionTypeDefinition">
            <summary>
            Provides semantics for CsdlCollectionType.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmCollectionType">
            <summary>
            Represents a definition of an EDM collection type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmCollectionType.ElementType">
            <summary>
            Gets the element type of this collection.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsTypeExpression">
            <summary>
            Provides semantics for <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlExpressionTypeReference"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmTypeReference">
            <summary>
            Represents a references to a type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmTypeReference.IsNullable">
            <summary>
            Gets a value indicating whether this type is nullable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmTypeReference.Definition">
            <summary>
            Gets the definition to which this type refers.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmCollectionTypeReference">
            <summary>
            Represents references to EDM Collection types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsDateTimeConstantExpression">
            <summary>
            Provides semantics for a Csdl DateTime constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmDateTimeConstantExpression">
            <summary>
            Represents an EDM datetime constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmDateTimeValue">
            <summary>
            Represents an EDM datetime value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmDateTimeValue.Value">
            <summary>
            Gets the definition of this datetime value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsDecimalConstantExpression">
            <summary>
            Provides semantics for a Csdl Decimal constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmDecimalConstantExpression">
            <summary>
            Represents an EDM decimal constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmDecimalValue">
            <summary>
            Represents an EDM decimal value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmDecimalValue.Value">
            <summary>
            Gets the definition of this decimal value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsFloatingConstantExpression">
            <summary>
            Provides semantics for a Csdl Float constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmFloatingConstantExpression">
            <summary>
            Represents an EDM floating constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmFloatingValue">
            <summary>
            Represents an EDM floating point value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmFloatingValue.Value">
            <summary>
            Gets the definition of this floating value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsIntConstantExpression">
            <summary>
            Provides semantics for a Csdl Int constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmIntegerConstantExpression">
            <summary>
            Represents an EDM integer constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmIntegerValue">
            <summary>
            Represents an EDM integer value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmIntegerValue.Value">
            <summary>
            Gets the definition of this integer value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsNamedTypeReference">
            <summary>
            Provides semantics for CsdlNamedTypeReference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsNullExpression">
            <summary>
            Provides semantics for a Csdl null constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmNullExpression">
            <summary>
            Represents an EDM null expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmNullValue">
            <summary>
            Represents an EDM null value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmParameterReferenceExpression">
            <summary>
            Represents an EDM parameter reference expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmParameterReferenceExpression.ReferencedParameter">
            <summary>
            Gets the referenced parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsPathExpression">
            <summary>
            Provides semantics for a Csdl Path expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmPathExpression">
            <summary>
            Represents an EDM path expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmPathExpression.Path">
            <summary>
            Gets the path as a decomposed qualified name. "A.B/C/D.E" is { "A.B", "C", "D.E" }.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsPropertyConstructor">
            <summary>
            Provides semantics for a CsdlPropertyValue used in a record expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmPropertyConstructor">
            <summary>
            Represents an EDM property constructor specified as part of a EDM construction record expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmPropertyConstructor.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmPropertyConstructor.Value">
            <summary>
            Gets the expression for the value of the property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmPropertyReferenceExpression">
            <summary>
            Represents an EDM property reference expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmPropertyReferenceExpression.Base">
            <summary>
            Gets the expression for the structured value containing the referenced property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmPropertyReferenceExpression.ReferencedProperty">
            <summary>
            Gets the referenced property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsPropertyValueBinding">
            <summary>
            Provides semantics for a CsdlPropertyValue used in a type annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Annotations.IEdmPropertyValueBinding">
            <summary>
            Represents a property binding specified as part of an EDM type annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmPropertyValueBinding.BoundProperty">
            <summary>
            Gets the property that is given a value by the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmPropertyValueBinding.Value">
            <summary>
            Gets the expression producing the value of the annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmStructuralProperty">
            <summary>
            Represents an EDM structural (i.e. non-navigation) property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmProperty">
            <summary>
            Represents an EDM property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmProperty.PropertyKind">
            <summary>
            Gets the kind of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmProperty.Type">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmProperty.DeclaringType">
            <summary>
            Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStructuralProperty.DefaultValueString">
            <summary>
            Gets the default value of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStructuralProperty.ConcurrencyMode">
            <summary>
            Gets the concurrency mode of this property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsRecordExpression">
            <summary>
            Provides semantics for a Csdl Record expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmRecordExpression">
            <summary>
            Represents an EDM record construction expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmRecordExpression.DeclaredType">
            <summary>
            Gets the declared type of the record, or null if there is no declared type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmRecordExpression.Properties">
            <summary>
            Gets the constructed property values.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsPrimitiveTypeReference">
            <summary>
            Provides the semantics of a reference to an EDM primitive type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmPrimitiveTypeReference">
            <summary>
            Represents references to primitive types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsPrimitiveTypeReference.definition">
            <summary>
            This doesn't need the full caching mechanism because the computation is cheap, and the likelyhood of computing a primitive type reference without needing its definition is remote.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmSpatialTypeReference">
            <summary>
            Represents a reference to an EDM spatial type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmSpatialTypeReference.SpatialReferenceIdentifier">
            <summary>
            Gets the Spatial Reference Identifier of this spatial type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsStringConstantExpression">
            <summary>
            Provides semantics for a Csdl String constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmStringConstantExpression">
            <summary>
            Represents an EDM string constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmStringValue">
            <summary>
            Represents an EDM string value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmStringValue.Value">
            <summary>
            Gets the definition of this string value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsTimeConstantExpression">
            <summary>
            Provides semantics for a Csdl DateTime constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmTimeConstantExpression">
            <summary>
            Represents an EDM time constant expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmTimeValue">
            <summary>
            Represents an EDM time value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmTimeValue.Value">
            <summary>
            Gets the definition of this time value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsVocabularyAnnotation">
            <summary>
            Common base class for CsdlSemanticsTypeAnnotation and CsdlSemanticsValueAnnotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation">
            <summary>
            Represents an EDM vocabulary annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation.Qualifier">
            <summary>
            Gets the qualifier used to discriminate between multiple bindings of the same property or type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation.Term">
            <summary>
            Gets the term bound by the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation.Target">
            <summary>
            Gets the element the annotation applies to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsVocabularyAnnotation.TargetBindingContext">
            <summary>
            Gets the type to use as a binding context for expressions in the annotation. If the target of the annotation
            is an entity type, that is the binding context. If the target is an entity set, the binding context is the
            element type of the set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsTypeAnnotation">
            <summary>
            Provides semantics for a CsdlTypeAnnotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Annotations.IEdmTypeAnnotation">
            <summary>
            Represents an EDM type annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmTypeAnnotation.PropertyValueBindings">
            <summary>
            Gets the value annotations for the properties of the type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsValueAnnotation">
            <summary>
            Provides semantics for a CsdlValueAnnotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Annotations.IEdmValueAnnotation">
            <summary>
            Represents an EDM value annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmValueAnnotation.Value">
            <summary>
            Gets the expression producing the value of the annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsValueTerm">
            <summary>
            Provides semantics for a CsdlValueTerm.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmValueTerm">
            <summary>
            Represents an EDM value term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmValueTerm.Type">
            <summary>
            Gets the type of this term.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociation">
            <summary>
            Represents a definition of an EDM association type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociation.Namespace">
            <summary>
            Gets the namespace this association belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociation.End1">
            <summary>
            Gets the first end of the association.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociation.End2">
            <summary>
            Gets the second end of the association.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociation.ReferentialConstraint">
            <summary>
            Gets the referential constraint of the association.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationEnd">
            <summary>
            Represents an end of an EDM association.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationEnd.DeclaringAssociation">
            <summary>
            Gets the declaring association of this association end.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationEnd.EntityType">
            <summary>
            Gets the entity type of this end of the association.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationEnd.Multiplicity">
            <summary>
            Gets this end's multiplicity.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationEnd.OnDelete">
            <summary>
            Gets the action to execute on the deletion of this association end.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationSet">
            <summary>
            Represents an EDM association set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationSet.Association">
            <summary>
            Gets the association of this association set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationSet.End1">
            <summary>
            Gets the first end of this association set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationSet.End2">
            <summary>
            Gets the second end of this association set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationSetEnd">
            <summary>
            Represents one of the ends of an EDM association set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationSetEnd.Role">
            <summary>
            Gets the association end that describes the role of this association set end.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.IEdmAssociationSetEnd.EntitySet">
            <summary>
            Gets the entity set this association set end corresponds to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.Internal.Serialization.SerializationValidator.TypeReferenceTargetMustHaveValidName">
            <summary>
            Validates that a type reference refers to a type that can be represented in CSDL.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.Internal.Serialization.SerializationValidator.EntityReferenceTargetMustHaveValidName">
            <summary>
            Validates that a type reference refers to a type that can be represented in CSDL.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.Internal.Serialization.SerializationValidator.EntitySetTypeMustHaveValidName">
            <summary>
            Validates that an entity set refers to a type that can be represented in CSDL.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.Internal.Serialization.SerializationValidator.StructuredTypeBaseTypeMustHaveValidName">
            <summary>
            Validates that a structured type's base type can be represented in CSDL.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.Internal.Serialization.SerializationValidator.NavigationPropertyVerifyAssociationName">
            <summary>
            Validates that association names can be represented in CSDL.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.Internal.Serialization.SerializationValidator.VocabularyAnnotationOutOfLineMustHaveValidTargetName">
            <summary>
            Validates that vocabulary annotations serialized out of line have a serializable target name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.Internal.Serialization.SerializationValidator.VocabularyAnnotationMustHaveValidTermName">
            <summary>
            Validates that vocabulary annotations have a serializable term name.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.EdmVocabularyAnnotationSerializationLocation">
            <summary>
            Represents whether a vocabulary annotation should be serialized within the element it applies to or in a seperate section of the CSDL.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.EdmVocabularyAnnotationSerializationLocation.Inline">
            <summary>
            The annotation should be serialized within the element being annotated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.EdmVocabularyAnnotationSerializationLocation.OutOfLine">
            <summary>
            The annotation should be serialized in a seperate section.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Data.Edm.IEdmModel"/> interfaces that are useful to serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetEdmxVersion(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the value for the EDMX version of the <paramref name="model"/>.
            </summary>
            <param name="model">Model the version has been set for.</param>
            <returns>The version.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetEdmxVersion(Microsoft.Data.Edm.IEdmModel,System.Version)">
            <summary>
            Sets a value of EDMX version attribute of the <paramref name="model"/>.
            </summary>
            <param name="model">The model the version should be set for.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetNamespacePrefixMappings(Microsoft.Data.Edm.IEdmModel,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets an annotation on the IEdmModel to notify the serializer of preferred prefix mappings for xml namespaces.
            </summary>
            <param name="model">Reference to the calling object.</param>
            <param name="mappings">XmlNamespaceManage containing mappings between namespace prefixes and xml namespaces.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetNamespacePrefixMappings(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the preferred prefix mappings for xml namespaces from an IEdmModel
            </summary>
            <param name="model">Reference to the calling object.</param>
            <returns>Namespace prefixes that exist on the model.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetDataServiceVersion(Microsoft.Data.Edm.IEdmModel,System.Version)">
            <summary>
            Sets a value for the DataServiceVersion attribute in an EDMX artifact.
            </summary>
            <param name="model">The model the attribute should be set for.</param>
            <param name="version">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetDataServiceVersion(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the value for the DataServiceVersion attribute used during EDMX serialization.
            </summary>
            <param name="model">Model the attribute has been set for.</param>
            <returns>Value of the attribute.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetMaxDataServiceVersion(Microsoft.Data.Edm.IEdmModel,System.Version)">
            <summary>
            Sets a value for the MaxDataServiceVersion attribute in an EDMX artifact.
            </summary>
            <param name="model">The model the attribute should be set for.</param>
            <param name="version">The value of the attribute.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetMaxDataServiceVersion(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the value for the MaxDataServiceVersion attribute used during EDMX serialization.
            </summary>
            <param name="model">Model the attribute has been set for</param>
            <returns>Value of the attribute.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetSerializationLocation(Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation,Microsoft.Data.Edm.IEdmModel,System.Nullable{Microsoft.Data.Edm.Csdl.EdmVocabularyAnnotationSerializationLocation})">
            <summary>
            Sets the location an annotation should be serialized in.
            </summary>
            <param name="annotation">The annotation the location is being specified for.</param>
            <param name="model">Model containing the annotation.</param>
            <param name="location">The location the annotation should appear.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetSerializationLocation(Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the location an annotation should be serialized in.
            </summary>
            <param name="annotation">Reference to the calling annotation.</param>
            <param name="model">Model containing the annotation.</param>
            <returns>The location the annotation should be serialized at.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetSchemaNamespace(Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation,Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Sets the schema an annotation should appear in.
            </summary>
            <param name="annotation">The annotation the schema should be set for.</param>
            <param name="model">Model containing the annotation.</param>
            <param name="schemaNamespace">The schema the annotation belongs in.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetSchemaNamespace(Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the schema an annotation should be serialized in.
            </summary>
            <param name="annotation">Reference to the calling annotation.</param>
            <param name="model">Model containing the annotation.</param>
            <returns>Name of the schema the annotation belongs to.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetAssociationName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty,System.String)">
            <summary>
            Sets the name used for the association serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <param name="associationName">The association name.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetAssociationName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the name used for the association serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <returns>The association name.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetAssociationNamespace(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty,System.String)">
            <summary>
            Sets the namespace used for the association serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <param name="associationNamespace">The association namespace.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetAssociationNamespace(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the namespace used for the association serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <returns>The association namespace.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetAssociationFullName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the fully-qualified name used for the association serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <returns>The fully-qualified association name.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetAssociationAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation},System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation},System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation},System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation})">
            <summary>
            Sets the annotations for the association serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <param name="annotations">The association annotations.</param>
            <param name="end1Annotations">The annotations for association end 1.</param>
            <param name="end2Annotations">The annotations for association end 2.</param>
            <param name="constraintAnnotations">The annotations for the referential constraint.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetAssociationAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation}@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation}@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation}@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation}@)">
            <summary>
            Gets the annotations associated with the association serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <param name="annotations">The association annotations.</param>
            <param name="end1Annotations">The annotations for association end 1.</param>
            <param name="end2Annotations">The annotations for association end 2.</param>
            <param name="constraintAnnotations">The annotations for the referential constraint.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetAssociationEndName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty,System.String)">
            <summary>
            Sets the name used for the association end serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <param name="association">The association end name.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetAssociationEndName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the name used for the association end serialized for a navigation property.
            </summary>
            <param name="model">Model containing the navigation property.</param>
            <param name="property">The navigation property.</param>
            <returns>The association end name.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetAssociationSetName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.String)">
            <summary>
            Sets the name used for the association set serialized for a navigation property of an entity set.
            </summary>
            <param name="model">Model containing the entity set.</param>
            <param name="entitySet">The entity set</param>
            <param name="property">The navigation property.</param>
            <param name="associationSet">The association set name.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetAssociationSetName(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the name used for the association set serialized for a navigation property of an entity set.
            </summary>
            <param name="model">Model containing the entity set.</param>
            <param name="entitySet">The entity set.</param>
            <param name="property">The navigation property.</param>
            <returns>The association set name.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetAssociationSetAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation},System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation},System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation})">
            <summary>
            Sets the annotations for the association set serialized for a navigation target of an entity set.
            </summary>
            <param name="model">Model containing the entity set.</param>
            <param name="entitySet">The entity set.</param>
            <param name="property">The navigation property.</param>
            <param name="annotations">The association set annotations.</param>
            <param name="end1Annotations">The annotations for association set end 1.</param>
            <param name="end2Annotations">The annotations for association set end 2.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetAssociationSetAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmEntitySet,Microsoft.Data.Edm.IEdmNavigationProperty,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation}@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation}@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation}@)">
            <summary>
            Gets the annotations associated with the association serialized for a navigation target of an entity set.
            </summary>
            <param name="model">Model containing the entity set.</param>
            <param name="entitySet">The entity set.</param>
            <param name="property">The navigation property.</param>
            <param name="annotations">The association set annotations.</param>
            <param name="end1Annotations">The annotations for association set end 1.</param>
            <param name="end2Annotations">The annotations for association set end 2.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetPrimary(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the primary end of a pair of partnered navigation properties, selecting the principal end if there is one and making a stable, arbitrary choice otherwise.
            </summary>
            <param name="property">The navigation property.</param>
            <returns>The primary end between the navigation property and its partner.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetIsValueExplicit(Microsoft.Data.Edm.IEdmEnumMember,Microsoft.Data.Edm.IEdmModel,System.Nullable{System.Boolean})">
            <summary>
            Sets an annotation indicating whether the value of an enum member should be explicitly serialized.
            </summary>
            <param name="member">Member to set the annotation on.</param>
            <param name="model">Model containing the member.</param>
            <param name="isExplicit">If the value of the enum member should be explicitly serialized</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.IsValueExplicit(Microsoft.Data.Edm.IEdmEnumMember,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets an annotation indicating whether the value of an enum member should be explicitly serialized.
            </summary>
            <param name="member">The member the annotation is on.</param>
            <param name="model">Model containing the member.</param>
            <returns>Whether the member should have its value serialized.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetIsSerializedAsElement(Microsoft.Data.Edm.Values.IEdmValue,Microsoft.Data.Edm.IEdmModel,System.Boolean)">
            <summary>
            Sets an annotation indicating if the value should be serialized as an element.
            </summary>
            <param name="value">Value to set the annotation on.</param>
            <param name="model">Model containing the value.</param>
            <param name="isSerializedAsElement">Value indicating if the value should be serialized as an element.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.IsSerializedAsElement(Microsoft.Data.Edm.Values.IEdmValue,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets an annotation indicating if the value should be serialized as an element.
            </summary>
            <param name="value">Value the annotation is on.</param>
            <param name="model">Model containing the value.</param>
            <returns>Value indicating if the string should be serialized as an element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.SetNamespaceAlias(Microsoft.Data.Edm.IEdmModel,System.String,System.String)">
            <summary>
            Sets the serialization alias for a given namespace
            </summary>
            <param name="model">Model that will be serialized.</param>
            <param name="namespaceName">The namespace to set the alias for.</param>
            <param name="alias">The alias for that namespace.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.SerializationExtensionMethods.GetNamespaceAlias(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Gets the serialization alias for a given namespace.
            </summary>
            <param name="model">Model that will be serialized.</param>
            <param name="namespaceName">Namespace the alias is needed for.</param>
            <returns>The alias of the given namespace, or null if one does not exist.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlFunctionReturnType">
            <summary>
            Represents a CSDL function return type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.EdmxReader">
            <summary>
            Provides EDMX parsing services for EDM models.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.EdmxReader.targetParsed">
            <summary>
            True when either Runtime or DataServices node have been processed.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxReader.TryParse(System.Xml.XmlReader,Microsoft.Data.Edm.IEdmModel@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Returns an IEdmModel for the given EDMX artifact.
            </summary>
            <param name="reader">XmlReader containing the EDMX artifact.</param>
            <param name="model">The model generated by parsing</param>
            <param name="errors">Errors reported while parsing.</param>
            <returns>Success of the parse operation.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxReader.Parse(System.Xml.XmlReader)">
            <summary>
            Returns an IEdmModel for the given EDMX artifact.
            </summary>
            <param name="reader">XmlReader containing the EDMX artifact.</param>
            <returns>The model generated by parsing.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxReader.TryParse(System.Xml.XmlReader,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmModel@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Returns an IEdmModel for the given EDMX artifact.
            </summary>
            <param name="reader">XmlReader containing the EDMX artifact.</param>
            <param name="reference">Model to be referenced by the created model.</param>
            <param name="model">The model generated by parsing</param>
            <param name="errors">Errors reported while parsing.</param>
            <returns>Success of the parse operation.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxReader.Parse(System.Xml.XmlReader,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Returns an IEdmModel for the given EDMX artifact.
            </summary>
            <param name="reader">XmlReader containing the EDMX artifact.</param>
            <param name="referencedModel">Model to be referenced by the created model.</param>
            <returns>The model generated by parsing.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxReader.TryParse(System.Xml.XmlReader,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmModel},Microsoft.Data.Edm.IEdmModel@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Returns an IEdmModel for the given EDMX artifact.
            </summary>
            <param name="reader">XmlReader containing the EDMX artifact.</param>
            <param name="references">Models to be referenced by the created model.</param>
            <param name="model">The model generated by parsing</param>
            <param name="errors">Errors reported while parsing.</param>
            <returns>Success of the parse operation.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxReader.Parse(System.Xml.XmlReader,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmModel})">
            <summary>
            Returns an IEdmModel for the given EDMX artifact.
            </summary>
            <param name="reader">XmlReader containing the EDMX artifact.</param>
            <param name="referencedModels">Models to be referenced by the created model.</param>
            <returns>The model generated by parsing.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxReader.TryParseVersion(System.String,System.Version@)">
            <summary>
            <see cref="T:System.Version"/>.TryParse does not exist on all platforms, so implementing it here.
            </summary>
            <param name="input">Input string.</param>
            <param name="version">Parsed version.</param>
            <returns>False in case of failure.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxReader.ParseElement(System.String,System.Collections.Generic.Dictionary{System.String,System.Action})">
            <summary>
            All parse functions start with the reader pointing at the start tag of an element, and end after consuming the ending tag for the element.
            </summary>
            <param name="elementName">The current element name to be parsed.</param>
            <param name="elementParsers">The parsers for child elements of the current element.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.EdmxWriter">
            <summary>
            Provides EDMX serialization services for EDM models.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.EdmxWriter.TryWriteEdmx(Microsoft.Data.Edm.IEdmModel,System.Xml.XmlWriter,Microsoft.Data.Edm.Csdl.EdmxTarget,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Outputs an EDMX artifact to the provided XmlWriter.
            </summary>
            <param name="model">Model to be written.</param>
            <param name="writer">XmlWriter the generated EDMX will be written to.</param>
            <param name="target">Target implementation of the EDMX being generated.</param>
            <param name="errors">Errors that prevented successful serialization, or no errors if serialization was successfull. </param>
            <returns>A value indicating whether serialization was successful.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEntityReferenceTypeReference">
            <summary>
            Represents references to entity reference types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmFunctionBase">
            <summary>
            Represents the common base type of EDM functions and function imports.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmFunctionBase.FindParameter(System.String)">
            <summary>
            Searches for a parameter with the given name, and returns null if no such parameter exists.
            </summary>
            <param name="name">The name of the parameter being found.</param>
            <returns>The requested parameter or null if no such parameter exists.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionBase.ReturnType">
            <summary>
            Gets the return type of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionBase.Parameters">
            <summary>
            Gets the collection of parameters for this function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmFunctionImport">
            <summary>
            Represents an EDM function import.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEntityContainerElement">
            <summary>
            Represents the common elements of all EDM entity container elements.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEntityContainerElement.ContainerElementKind">
            <summary>
            Gets the kind of element of this container element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEntityContainerElement.Container">
            <summary>
            Gets the container that contains this element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionImport.IsSideEffecting">
            <summary>
            Gets a value indicating whether this function import has side-effects.
            <see cref="P:Microsoft.Data.Edm.IEdmFunctionImport.IsSideEffecting"/> cannot be set to true if <see cref="P:Microsoft.Data.Edm.IEdmFunctionImport.IsComposable"/> is set to true.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionImport.IsComposable">
            <summary>
            Gets a value indicating whether this functon import can be composed inside expressions.
            <see cref="P:Microsoft.Data.Edm.IEdmFunctionImport.IsComposable"/> cannot be set to true if <see cref="P:Microsoft.Data.Edm.IEdmFunctionImport.IsSideEffecting"/> is set to true.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionImport.IsBindable">
            <summary>
            Gets a value indicating whether this function import can be used as an extension method for the type of the first parameter of this function import.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionImport.EntitySet">
            <summary>
            Gets the entity set containing entities returned by this function import.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmEntitySetReferenceExpression">
            <summary>
            Represents an EDM entity set reference expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmEntitySetReferenceExpression.#ctor(Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmEntitySetReferenceExpression"/> class.
            </summary>
            <param name="referencedEntitySet">Referenced entity set.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmEntitySetReferenceExpression.ReferencedEntitySet">
            <summary>
            Gets the referenced entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmEntitySetReferenceExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression">
            <summary>
            Represents an EDM path expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression"/> class.
            </summary>
            <param name="path">Path string containing segments seperated by '/'. For example: "A.B/C/D.E/Func1(NS.T,NS.T2)/P1".</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression"/> class.
            </summary>
            <param name="path">Path segments.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression"/> class.
            </summary>
            <param name="path">Path segments.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression.Path">
            <summary>
            Gets the path as a decomposed qualified name. "A.B/C/D.E/Func1(NS.T,NS.T2)/P1" is { "A.B", "C", "D.E", "Func1(NS.T,NS.T2)", "P1" }.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmPathExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmRowTypeReference">
            <summary>
            Represents references to row types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmStructuredTypeReference">
            <summary>
            Represents references to EDM structured types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.Internal.Serialization.EdmModelSchemaSeparationSerializationVisitor.ProcessEntityContainer(Microsoft.Data.Edm.IEdmEntityContainer)">
            <summary>
            When we see an entity container, we see if it has <see cref="F:Microsoft.Data.Edm.Csdl.CsdlConstants.SchemaNamespaceAnnotation"/>.
            If it does, then we attach it to that schema, otherwise we attached to the first existing schema.
            If there are no schemas, we create the one named "Default" and attach container to it.
            </summary>
            <param name="element">The entity container being processed.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmToClrConversion.TryCreateObjectInstance">
            <summary>
            Represents a delegate for creating an instance of CLR type based on <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> and <see cref="T:System.Type"/>.
            The delegate can be used to create CLR instances of polymorphic types.
            </summary>
            <param name="edmValue">The <see cref="T:Microsoft.Data.Edm.Values.IEdmStructuredValue"/> for which the <paramref name="objectInstance"/> needs to be created.</param>
            <param name="clrType">The expected CLR type of the object instance. In case of polymorphic properties and collections this may be a base type.</param>
            <param name="converter">The converter instance calling this delegate.</param>
            <param name="objectInstance">The output parameter returning a CLR object instance created for the <paramref name="edmValue"/>.</param>
            <param name="objectInstanceInitialized">The output parameter returning true if all properties of the created <paramref name="objectInstance"/> are initialized.
            False if properties of the created instance should be initialized using the default <see cref="T:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter"/> logic.</param>
            <returns>True if the delegate produced a desired <paramref name="objectInstance"/>.
            If delegate returns false, the default <see cref="T:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter"/> logic will be applied to create and populate a CLR object instance.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter">
            <summary>
            <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> to CLR value converter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.#ctor(Microsoft.Data.Edm.EdmToClrConversion.TryCreateObjectInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter"/> class.
            </summary>
            <param name="tryCreateObjectInstanceDelegate">The delegate customizing conversion of structured values.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrValue``1(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a CLR value of the specified type.
            Supported values for <typeparamref name="T"/> are: 
                CLR primitive types such as <see cref="T:System.String"/> and <see cref="T:System.Int32"/>,
                CLR enum types,
                <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
                <see cref="T:System.Collections.Generic.ICollection`1"/>,
                <see cref="T:System.Collections.Generic.IList`1"/>,
                CLR classes with default constructors and public properties with setters and collection properties of the following shapes:
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> EnumerableProperty  { get; set; },
                <see cref="T:System.Collections.Generic.ICollection`1"/> CollectionProperty  { get; set; },
                <see cref="T:System.Collections.Generic.IList`1"/> ListProperty  { get; set; },
                <see cref="T:System.Collections.Generic.ICollection`1"/> CollectionProperty { get { return this.nonNullCollection; } },
                <see cref="T:System.Collections.Generic.IList`1"/> ListProperty { get { return this.nonNullList; } }.
            </summary>
            <typeparam name="T">The CLR type.</typeparam>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>A CLR value converted from <paramref name="edmValue"/>.</returns>
            <remarks>This method performs boxing and unboxing for value types. Use value-type specific methods such as <see cref="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrString(Microsoft.Data.Edm.Values.IEdmValue)"/> to avoid boxing and unboxing.</remarks>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrValue(Microsoft.Data.Edm.Values.IEdmValue,System.Type)">
            <summary>
            Converts <paramref name="edmValue"/> to a CLR value of the specified type.
            Supported values for <paramref name="clrType"/> are: 
                CLR primitive types such as <see cref="T:System.String"/> and <see cref="T:System.Int32"/>,
                CLR enum types,
                <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
                <see cref="T:System.Collections.Generic.ICollection`1"/>,
                <see cref="T:System.Collections.Generic.IList`1"/>,
                CLR classes with default constructors and public properties with setters and collection properties of the following shapes:
                <see cref="T:System.Collections.Generic.IEnumerable`1"/> EnumerableProperty  { get; set; },
                <see cref="T:System.Collections.Generic.ICollection`1"/> CollectionProperty  { get; set; },
                <see cref="T:System.Collections.Generic.IList`1"/> ListProperty  { get; set; },
                <see cref="T:System.Collections.Generic.ICollection`1"/> CollectionProperty { get { return this.nonNullCollection; } },
                <see cref="T:System.Collections.Generic.IList`1"/> ListProperty { get { return this.nonNullList; } }.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <param name="clrType">The CLR type.</param>
            <returns>A CLR value converted from <paramref name="edmValue"/>.</returns>
            <remarks>This method performs boxing and unboxing for value types. Use value-type specific methods such as <see cref="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrString(Microsoft.Data.Edm.Values.IEdmValue)"/> to avoid boxing and unboxing.</remarks>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.RegisterConvertedObject(Microsoft.Data.Edm.Values.IEdmStructuredValue,System.Object)">
            <summary>
            Registers the <paramref name="clrObject"/> corresponding to the <paramref name="edmValue"/>.
            All subsequent conversions from this <paramref name="edmValue"/> performed by this instance of <see cref="T:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter"/> will return the specified
            <paramref name="clrObject"/>. Registration is required to support graph consistency and loops during conversion process. 
            This method should be called inside the <see cref="T:Microsoft.Data.Edm.EdmToClrConversion.TryCreateObjectInstance"/> delegate if the delegate is calling back into <see cref="T:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter"/>
            in order to populate properties of the <paramref name="clrObject"/>.
            </summary>
            <param name="edmValue">The EDM value.</param>
            <param name="clrObject">The CLR object.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrByteArray(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a CLR byte array value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted byte array.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmBinaryValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrString(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.String"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted string.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmStringValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrBoolean(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted boolean.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmBooleanValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrInt64(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted integer.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmIntegerValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrChar(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Char"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted char.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmIntegerValue"/>.</exception>
            <exception cref="T:System.OverflowException">Exception is thrown if <paramref name="edmValue"/> cannot be converted to <see cref="T:System.Char"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrByte(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted byte.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmIntegerValue"/>.</exception>
            <exception cref="T:System.OverflowException">Exception is thrown if <paramref name="edmValue"/> cannot be converted to <see cref="T:System.Byte"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrInt16(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted integer.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmIntegerValue"/>.</exception>
            <exception cref="T:System.OverflowException">Exception is thrown if <paramref name="edmValue"/> cannot be converted to <see cref="T:System.Int16"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrInt32(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted integer.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmIntegerValue"/>.</exception>
            <exception cref="T:System.OverflowException">Exception is thrown if <paramref name="edmValue"/> cannot be converted to <see cref="T:System.Int32"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrDouble(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Double"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted double.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmFloatingValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrSingle(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Single"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted single.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmFloatingValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrDecimal(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted decimal.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmDecimalValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrDateTime(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted DateTime.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmDateTimeValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrTime(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted Time.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmTimeValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.AsClrDateTimeOffset(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Converts <paramref name="edmValue"/> to a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="edmValue">The EDM value to be converted.</param>
            <returns>Converted DateTimeOffset.</returns>
            <exception cref="T:System.InvalidCastException">Exception is thrown if <paramref name="edmValue"/> is not <see cref="T:Microsoft.Data.Edm.Values.IEdmDateTimeOffsetValue"/>.</exception>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.FindProperty(System.Type,System.String)">
            <summary>
            Searches the <paramref name="clrObjectType"/> for a property with the <paramref name="propertyName"/>.
            Handles the case of multiple properties with the same name (declared via C# "new") by choosing the one on the deepest derived type.
            </summary>
            <param name="clrObjectType">The clr object type.</param>
            <param name="propertyName">The property name.</param>
            <returns>The property or null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.GetEdmValueInterfaceName(Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Used for error messages only.
            </summary>
            <param name="edmValue">The EDM value.</param>
            <returns>The EDM value interface name.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmToClrConversion.EdmToClrConverter.CastHelper">
            <summary>
            The class contains method that are called thru reflection to produce values of correct CLR types.
            For example if one has an int value and a clr type represnting an enum : int, there is no other way to convert the int
            to the enum type object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator">
            <summary>
            Expression evaluator capable of producing CLR values.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator">
            <summary>
            Expression evaluator.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator.#ctor(System.Collections.Generic.IDictionary{Microsoft.Data.Edm.IEdmFunction,System.Func{Microsoft.Data.Edm.Values.IEdmValue[],Microsoft.Data.Edm.Values.IEdmValue}})">
            <summary>
            Initializes a new instance of the EdmExpressionEvaluator class.
            </summary>
            <param name="builtInFunctions">Builtin functions dictionary to the evaluators for the functions.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator.#ctor(System.Collections.Generic.IDictionary{Microsoft.Data.Edm.IEdmFunction,System.Func{Microsoft.Data.Edm.Values.IEdmValue[],Microsoft.Data.Edm.Values.IEdmValue}},System.Func{System.String,Microsoft.Data.Edm.Values.IEdmValue[],Microsoft.Data.Edm.Values.IEdmValue})">
            <summary>
            Initializes a new instance of the EdmExpressionEvaluator class.
            </summary>
            <param name="builtInFunctions">Builtin functions dictionary to the evaluators for the functions.</param>
            <param name="lastChanceFunctionApplier">Function to call to evaluate an application of a function with no static binding.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator.Evaluate(Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Evaluates an expression with no value context.
            </summary>
            <param name="expression">Expression to evaluate. The expression must not contain paths, because no context for evaluating a path is supplied.</param>
            <returns>The value that results from evaluating the expression in the context of the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator.Evaluate(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.Values.IEdmStructuredValue)">
            <summary>
            Evaluates an expression in the context of a value.
            </summary>
            <param name="expression">Expression to evaluate.</param>
            <param name="context">Value to use as context in evaluating the expression. Cannot be null if the expression contains paths.</param>
            <returns>The value that results from evaluating the expression in the context of the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator.Evaluate(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Evaluates an expression in the context of a value and a target type.
            </summary>
            <param name="expression">Expression to evaluate.</param>
            <param name="context">Value to use as context in evaluating the expression. Cannot be null if the expression contains paths.</param>
            <param name="targetType">Type to which the result value is expected to conform.</param>
            <returns>The value that results from evaluating the expression in the context of the supplied value, asserted to be of the target type.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmDelayedValue">
            <summary>
            Represents a lazily computed value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmDelayedValue.Value">
            <summary>
            Gets the data stored in this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmPropertyValue">
            <summary>
            Represents a value of an EDM property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmPropertyValue.Name">
            <summary>
            Gets the name of the property this value is associated with.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmCollectionValue">
            <summary>
            Represents an EDM collection value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmCollectionValue.Elements">
            <summary>
            Gets the values stored in this collection.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator.#ctor(System.Collections.Generic.IDictionary{Microsoft.Data.Edm.IEdmFunction,System.Func{Microsoft.Data.Edm.Values.IEdmValue[],Microsoft.Data.Edm.Values.IEdmValue}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator"/> class.
            </summary>
            <param name="builtInFunctions">Builtin functions dictionary to the evaluators for the functions.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator.#ctor(System.Collections.Generic.IDictionary{Microsoft.Data.Edm.IEdmFunction,System.Func{Microsoft.Data.Edm.Values.IEdmValue[],Microsoft.Data.Edm.Values.IEdmValue}},System.Func{System.String,Microsoft.Data.Edm.Values.IEdmValue[],Microsoft.Data.Edm.Values.IEdmValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator"/> class.
            </summary>
            <param name="builtInFunctions">Builtin functions dictionary to the evaluators for the functions.</param>
            <param name="lastChanceFunctionApplier">Function to call to evaluate an application of a function with no static binding.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator.EvaluateToClrValue``1(Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Evaluates an expression with no value context.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="expression">Expression to evaluate. The expression must not contain paths, because no context for evaluating a path is supplied.</param>
            <returns>The value that results from evaluating the expression in the context of the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator.EvaluateToClrValue``1(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.Values.IEdmStructuredValue)">
            <summary>
            Evaluates an expression in the context of a value.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="expression">Expression to evaluate.</param>
            <param name="context">Value to use as context in evaluating the expression.</param>
            <returns>The value that results from evaluating the expression in the context of the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator.EvaluateToClrValue``1(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Evaluates an expression in the context of a value and a target type.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="expression">Expression to evaluate.</param>
            <param name="context">Value to use as context in evaluating the expression.</param>
            <param name="targetType">Type to which the result value is expected to conform.</param>
            <returns>The value that results from evaluating the expression in the context of the supplied value, asserted to be of the targetType.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator.EdmToClrConverter">
            <summary>
            Gets or sets an instance of <see cref="P:Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator.EdmToClrConverter"/> that is used to produce CLR values during evaluation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmElementComparer">
            <summary>
            Contains IsEquivalentTo() extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmElementComparer.IsEquivalentTo(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Returns true if the compared type is semantically equivalent to this type.
            Schema types (<see cref="T:Microsoft.Data.Edm.IEdmSchemaType"/>) are compared by their object refs.
            </summary>
            <param name="thisType">Type being compared.</param>
            <param name="otherType">Type being compared to.</param>
            <returns>Equivalence of the two types.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmElementComparer.IsEquivalentTo(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if the compared type reference is semantically equivalent to this type reference.
            Schema types (<see cref="T:Microsoft.Data.Edm.IEdmSchemaType"/>) are compared by their object refs.
            </summary>
            <param name="thisType">Type reference being compared.</param>
            <param name="otherType">Type referenced being compared to.</param>
            <returns>Equivalence of the two type references.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmElementComparer.IsFunctionSignatureEquivalentTo(Microsoft.Data.Edm.IEdmFunctionBase,Microsoft.Data.Edm.IEdmFunctionBase)">
            <summary>
            Returns true if function signatures are semantically equivalent.
            Signature includes function name (<see cref="T:Microsoft.Data.Edm.IEdmNamedElement"/>) and its parameter types.
            </summary>
            <param name="thisFunction">Reference to the calling object.</param>
            <param name="otherFunction">Function being compared to.</param>
            <returns>Equivalence of signatures of the two functions.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmElementComparer.IsEquivalentTo(Microsoft.Data.Edm.IEdmFunctionParameter,Microsoft.Data.Edm.IEdmFunctionParameter)">
            <summary>
            Returns true if the compared function parameter is semantically equivalent to this function parameter.
            </summary>
            <param name="thisParameter">Reference to the calling object.</param>
            <param name="otherParameter">Function parameter being compared to.</param>
            <returns>Equivalence of the two function parameters.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmNavigationTargetMapping">
            <summary>
            Represents a mapping from an EDM navigation property to an entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmNavigationTargetMapping.NavigationProperty">
            <summary>
            Gets the navigation property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmNavigationTargetMapping.TargetEntitySet">
            <summary>
            Gets the target entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding">
            <summary>
            Represents the combination of an EDM annotation with an immediate value and the element to which it is attached.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding.Element">
            <summary>
            Gets the element to which the annotation is attached
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding.NamespaceUri">
            <summary>
            Gets the namespace URI of the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding.Name">
            <summary>
            Gets the local name of this annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding.Value">
            <summary>
            Gets the value of this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.Memoizer`2">
            <summary>
            Remembers the result of evaluating an expensive function so that subsequent
            evaluations are faster. Thread-safe.
            </summary>
            <typeparam name="TArg">Type of the argument to the function.</typeparam>
            <typeparam name="TResult">Type of the function result.</typeparam>
        </member>
        <member name="M:Microsoft.Data.Edm.Internal.Memoizer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructs the memoizer.
            </summary>
            <param name="function">Required. Function whose values are being cached.</param>
            <param name="argComparer">Optional. Comparer used to determine if two functions arguments are the same.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Internal.Memoizer`2.Evaluate(`0)">
            <summary>
            Evaluates the wrapped function for the given argument. If the function has already
            been evaluated for the given argument, returns cached value. Otherwise, the value
            is computed and returned.
            </summary>
            <param name="arg">Function argument.</param>
            <returns>Function result.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.Memoizer`2.Result">
            <summary>
            Encapsulates a 'deferred' result. The result is constructed with a delegate (must not 
            be null) and when the user requests a value the delegate is invoked and stored.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo">
            <summary>
            Represents an EDM navigation property info used during construction of navigation properties.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo.Name">
            <summary>
            Gets or sets the name of this navigation property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo.Target">
            <summary>
            Gets or sets the entity type that this navigation property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo.TargetMultiplicity">
            <summary>
            Gets or sets multiplicity of the navigation target.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo.DependentProperties">
            <summary>
            Gets or sets the dependent properties of the association this navigation property expresses.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo.ContainsTarget">
            <summary>
            Gets or sets a value indicating whether the navigation target is contained inside the navigation source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo.OnDelete">
            <summary>
            Gets or sets the action to take when an instance of the declaring type is deleted.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmNavigationTargetMapping">
            <summary>
            Represents a mapping from an EDM navigation property to an entity set.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmNavigationTargetMapping.#ctor(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Creates a new navigation target mapping.
            </summary>
            <param name="navigationProperty">The navigation property.</param>
            <param name="targetEntitySet">The entity set that the navigation propertion targets.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationTargetMapping.NavigationProperty">
            <summary>
            Gets the navigation property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationTargetMapping.TargetEntitySet">
            <summary>
            Gets the target entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmTimeConstant">
            <summary>
            Represents an EDM time constant.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmValue">
            <summary>
            Represents an EDM value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmValue.#ctor(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the EdmValue class.
            </summary>
            <param name="type">Type of the value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmValue.Type">
            <summary>
            Gets the type of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmTimeConstant.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmTimeConstant"/> class.
            </summary>
            <param name="value">Time value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmTimeConstant.#ctor(Microsoft.Data.Edm.IEdmTemporalTypeReference,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmTimeConstant"/> class.
            </summary>
            <param name="type">Type of the Time.</param>
            <param name="value">Time value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmTimeConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmTimeConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmTimeConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.AmbiguousBinding`1">
            <summary>
            Represents a name binding to more than one item.
            </summary>
            <typeparam name="TElement">Type of the ambiguous element.</typeparam>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEntityContainer">
            <summary>
            Represents an EDM entity container.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmEntityContainer.FindEntitySet(System.String)">
            <summary>
            Searches for an entity set with the given name in this entity container and returns null if no such set exists.
            </summary>
            <param name="setName">The name of the element being found.</param>
            <returns>The requested element, or null if the element does not exist.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmEntityContainer.FindFunctionImports(System.String)">
            <summary>
            Searches for function imports with the given name in this entity container and returns null if no such function import exists.
            </summary>
            <param name="functionName">The name of the function import being found.</param>
            <returns>A group of the requested function imports, or an empty enumerable  if no such function import exists.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEntityContainer.Elements">
            <summary>
            Gets a collection of the elements of this entity container.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEntitySet">
            <summary>
            Represents an EDM entity set.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmEntitySet.FindNavigationTarget(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Finds the entity set that a navigation property targets.
            </summary>
            <param name="navigationProperty">The navigation property.</param>
            /// <returns>The entity set that the navigation propertion targets, or null if no such entity set exists.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEntitySet.ElementType">
            <summary>
            Gets the entity type contained in this entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEntitySet.NavigationTargets">
            <summary>
            Gets the navigation targets of this entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmFunction">
            <summary>
            Represents an EDM function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunction.DefiningExpression">
            <summary>
            Gets the defining expression of this function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.AmbiguousLabeledExpressionBinding">
            <summary>
            Represents a labeled expression binding to more than one item.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Internal.AmbiguousPropertyBinding.PropertyKind">
            <summary>
            Gets the kind of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Internal.AmbiguousPropertyBinding.DeclaringType">
            <summary>
            Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.AmbiguousTypeBinding">
            <summary>
            Represents a name binding to more than one item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.AmbiguousValueTermBinding">
            <summary>
            Represents a name binding to more than one item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadBinaryTypeReference">
            <summary>
            Represents a reference to a semantically invalid EDM binary type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmBinaryTypeReference">
            <summary>
            Represents a reference to an EDM binary type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmPrimitiveTypeReference">
            <summary>
            Represents a reference to an EDM primitive type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmTypeReference">
            <summary>
            Represents a reference to an EDM type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmTypeReference.#ctor(Microsoft.Data.Edm.IEdmType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmTypeReference"/> class.
            </summary>
            <param name="definition">Type that describes this value.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmTypeReference.ToString">
            <summary>
            Returns the text representation of the current object.
            </summary>
            <returns>The text representation of the current object.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmTypeReference.IsNullable">
            <summary>
            Gets a value indicating whether this type is nullable.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmTypeReference.Definition">
            <summary>
            Gets the definition to which this type refers.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmPrimitiveTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmPrimitiveTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmBinaryTypeReference">
            <summary>
            Represents a reference to an EDM binary type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmBinaryTypeReference.IsFixedLength">
            <summary>
            Gets a value indicating whether this type specifies fixed length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmBinaryTypeReference.IsUnbounded">
            <summary>
            Gets a value indicating whether this type specifies the maximum allowed length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmBinaryTypeReference.MaxLength">
            <summary>
            Gets the maximum length of this type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmBinaryTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmBinaryTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmBinaryTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmBinaryTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
            <param name="isUnbounded">Denotes whether the max length is the maximum allowed value.</param>
            <param name="maxLength">Maximum length of a value of this type.</param>
            <param name="isFixedLength">Denotes whether the length can vary. </param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmBinaryTypeReference.IsFixedLength">
            <summary>
            Gets a value indicating whether this type specifies fixed length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmBinaryTypeReference.IsUnbounded">
            <summary>
            Gets a value indicating whether this type specifies the maximum allowed length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmBinaryTypeReference.MaxLength">
            <summary>
            Gets the maximum length of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadCollectionType">
            <summary>
            Represents a semantically invalid EDM collection type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadComplexType">
            <summary>
            Represents a semantically invalid EDM complex type definition.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadNamedStructuredType">
            <summary>
            Represents a semantically invalid EDM named structured type definition.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadStructuredType">
            <summary>
            Represents a semantically invalid EDM structured type definition.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmComplexType">
            <summary>
            Represents a definition of an EDM complex type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmComplexTypeReference">
            <summary>
            Represents a reference to an EDM complex type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmComplexTypeReference">
            <summary>
            Represents references to EDM complex types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmComplexTypeReference.#ctor(Microsoft.Data.Edm.IEdmComplexType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmComplexTypeReference"/> class.
            </summary>
            <param name="complexType">The type definition this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadDecimalTypeReference">
            <summary>
            Represents a reference to a semantically invalid EDM decimal type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmDecimalTypeReference">
            <summary>
            Represents a reference to an EDM decimal type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmDecimalTypeReference">
            <summary>
            Represents a reference to an EDM decimal type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmDecimalTypeReference.Precision">
            <summary>
            Gets the precision of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmDecimalTypeReference.Scale">
            <summary>
            Gets the scale of this type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmDecimalTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmDecimalTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmDecimalTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmDecimalTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
            <param name="precision">Precision of values with this type.</param>
            <param name="scale">Scale of values with this type.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmDecimalTypeReference.Precision">
            <summary>
            Gets the precision of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmDecimalTypeReference.Scale">
            <summary>
            Gets the scale of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadEntityContainer">
            <summary>
            Represents a semantically invalid EDM entity container.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Internal.BadEntityContainer.SchemaElementKind">
            <summary>
            Gets the kind of this schema element.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadEntityReferenceType">
            <summary>
            Represents a semantically invalid EDM entity reference type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEntityReferenceType">
            <summary>
            Represents a definition of an EDM entity reference type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmEntityReferenceType.EntityType">
            <summary>
            Gets the entity type pointed to by this entity reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadEntitySet">
            <summary>
            Represents a semantically invalid EDM entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadEntityType">
            <summary>
            Represents a semantically invalid EDM entity type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEntityTypeReference">
            <summary>
            Represents a reference to an EDM entity type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEntityTypeReference">
            <summary>
            Represents references to entity types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityTypeReference.#ctor(Microsoft.Data.Edm.IEdmEntityType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEntityTypeReference"/> class.
            </summary>
            <param name="entityType">The definition refered to by this reference.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadEnumMember">
            <summary>
            Represents a semantically invalid EDM enumeration type member.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadLabeledExpression">
            <summary>
            Represents a semantically invalid EDM labeled expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadPrimitiveType">
            <summary>
            Represents a semantically invalid EDM primitive type definition.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmPrimitiveType">
            <summary>
            Represents a definition of an EDM primitive type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmPrimitiveType.PrimitiveKind">
            <summary>
            Gets the primitive kind of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadPrimitiveTypeReference">
            <summary>
            Represents a reference to a semantically invalid EDM primitive type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Internal.BadPrimitiveValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadProperty">
            <summary>
            Represents a semantically invalid EDM property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadRowType">
            <summary>
            Represents a semantically invalid EDM row type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmRowType">
            <summary>
            Represents a definition of an EDM row type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadSpatialTypeReference">
            <summary>
            Represents a reference to a semantically invalid EDM spatial type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmSpatialTypeReference">
            <summary>
            Represents a reference to an EDM spatial type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmSpatialTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmSpatialTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmSpatialTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmSpatialTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
            <param name="spatialReferenceIdentifier">Spatial Reference Identifier for the spatial type being created.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmSpatialTypeReference.SpatialReferenceIdentifier">
            <summary>
            Gets the precision of this temporal type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadStringTypeReference">
            <summary>
            Represents a reference to a semantically invalid EDM string type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmStringTypeReference">
            <summary>
            Represents a reference to an EDM string type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmStringTypeReference">
            <summary>
            Represents a reference to an EDM string type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStringTypeReference.IsFixedLength">
            <summary>
            Gets a value indicating whether this string type specifies fixed length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStringTypeReference.IsUnbounded">
            <summary>
            Gets a value indicating whether this string type specifies the maximum allowed length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStringTypeReference.MaxLength">
            <summary>
            Gets the maximum length of this string type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStringTypeReference.IsUnicode">
            <summary>
            Gets a value indicating whether this string type supports unicode encoding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmStringTypeReference.Collation">
            <summary>
            Gets a string representing the collation of this string type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStringTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmStringTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStringTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmStringTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
            <param name="isUnbounded">Denotes whether the max length is the maximum allowed value.</param>
            <param name="maxLength">Maximum length of a value of this type.</param>
            <param name="isFixedLength">Denotes whether the length can vary. </param>
            <param name="isUnicode">Denotes if string is encoded using Unicode.</param>
            <param name="collation">Indicates the collation string to be used by the underlying store.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStringTypeReference.IsFixedLength">
            <summary>
            Gets a value indicating whether this string type specifies fixed length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStringTypeReference.IsUnbounded">
            <summary>
            Gets a value indicating whether this string type specifies the maximum allowed length.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStringTypeReference.MaxLength">
            <summary>
            Gets the maximum length of this string type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStringTypeReference.IsUnicode">
            <summary>
            Gets a value indicating whether this string type supports unicode encoding.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStringTypeReference.Collation">
            <summary>
            Gets a string representing the collation of this string type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.BadTemporalTypeReference">
            <summary>
            Represents a reference to a semantically invalid EDM temporal (Time, DateTime, DateTimeOffset) type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmTemporalTypeReference">
            <summary>
            Represents a reference to an EDM temporal (Time, DateTime, DateTimeOffset) type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmTemporalTypeReference">
            <summary>
            Represents a reference to an EDM temporal (Time, DateTime, DateTimeOffset) type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmTemporalTypeReference.Precision">
            <summary>
            Gets the precision of this temporal type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmTemporalTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmTemporalTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmTemporalTypeReference.#ctor(Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmTemporalTypeReference"/> class.
            </summary>
            <param name="definition">The type this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
            <param name="precision">Precision of values with this type.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmTemporalTypeReference.Precision">
            <summary>
            Gets the precision of this temporal type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.CyclicComplexType">
            <summary>
            Represents an EDM complex type that cannot be determined due to a cyclic reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.CyclicEntityContainer">
            <summary>
            Represents an EDM entity container that cannot be determined due to a cyclic reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Internal.CyclicEntityType">
            <summary>
            Represents an EDM entity type that cannot be determined due to a cyclic reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.VersioningDictionary`2">
            <summary>
            Provides a dictionary that is thread safe by virtue of being immutable.
            Any update returns a new dictionary (which, for efficiency, may share some of the state of the old one).
            </summary>
            <typeparam name="TKey">Key type of the dictionary.</typeparam>
            <typeparam name="TValue">Value type of the dictionary.</typeparam>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.VersioningList`1">
            <summary>
            Provides a list that is thread safe by virtue of being immutable.
            "Mutating" operations return a new list (which, for efficiency, may share some of the state of the old one).
            </summary>
            <typeparam name="TElement">Element type of the list.</typeparam>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.VersioningTree`2">
            <summary>
            Provides an approximately-balanced binary search tree that is thread safe by virtue of being immutable.
            Updates return a new tree (which, for efficiency, may share some state with the old one).
            </summary>
            <typeparam name="TKey">Key type of the tree.</typeparam>
            <typeparam name="TValue">Value type of the tree.</typeparam>
        </member>
        <member name="M:Microsoft.Data.Edm.Internal.VersioningTree`2.#ctor(`0,`1,Microsoft.Data.Edm.Internal.VersioningTree{`0,`1},Microsoft.Data.Edm.Internal.VersioningTree{`0,`1})">
            <summary>
            Initializes a new instance of VersioningTree.
            </summary>
            <param name="key">The key of the tree node.</param>
            <param name="value">The value of the tree node.</param>
            <param name="leftChild">A tree with all keys less than the key of the tree node. May be null.</param>
            <param name="rightChild">A tree with all keys greater than the key of the tree node. May be null.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding">
            <summary>
            Represents the combination of an EDM annotation with an immediate value and the element to which it is attached.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding.#ctor(Microsoft.Data.Edm.IEdmElement,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding"/> class.
            </summary>
            <param name="element">Element to which the annotation is attached.</param>
            <param name="namespaceUri">Namespace URI of the annotation.</param>
            <param name="name">Name of the annotation within the namespace.</param>
            <param name="value">Value of the annotation</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding.#ctor(Microsoft.Data.Edm.IEdmElement,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding"/> class.
            </summary>
            <param name="element">Element to which the annotation is attached.</param>
            <param name="namespaceUri">Namespace URI of the annotation.</param>
            <param name="name">Name of the annotation within the namespace.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding.Element">
            <summary>
            Gets the element to which the annotation is attached.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding.NamespaceUri">
            <summary>
            Gets the namespace Uri of the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding.Name">
            <summary>
            Gets the local name of the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationBinding.Value">
            <summary>
            Gets the value of this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Annotations.EdmTypedDirectValueAnnotationBinding`1">
            <summary>
            Represents the combination of an EDM annotation with an immediate value and the element to which it is attached.
            </summary>
            <typeparam name="T">Type of the annotation value.</typeparam>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmNamedElement">
            <summary>
            Common base class for all named EDM elements.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmNamedElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmNamedElement"/> class.
            </summary>
            <param name="name">Name of the element.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNamedElement.Name">
            <summary>
            Gets the name of this element.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmTypedDirectValueAnnotationBinding`1.#ctor(Microsoft.Data.Edm.IEdmElement,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmTypedDirectValueAnnotationBinding`1"/> class.
            </summary>
            <param name="element">Element to which the annotation is attached.</param>
            <param name="value">Value of the annotation</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmTypedDirectValueAnnotationBinding`1.Element">
            <summary>
            Gets the element to which the annotation is attached.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmTypedDirectValueAnnotationBinding`1.NamespaceUri">
            <summary>
            Gets the namespace Uri of the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmTypedDirectValueAnnotationBinding`1.Value">
            <summary>
            Gets the value of this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.ObjectLocation">
            <summary>
            Defines an object as a location of itself.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ObjectLocation.ToString">
            <summary>
            Gets a string representation of the location.
            </summary>
            <returns>A string representation of the location.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Validation.ObjectLocation.Object">
            <summary>
            Gets the object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.ExpressionTypeChecker">
            <summary>
            Collection of extension methods to assert that an expression is of the required type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ExpressionTypeChecker.TryAssertType(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.IEdmTypeReference,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Determines if the type of an expression is compatible with the provided type
            </summary>
            <param name="expression">The expression to assert the type of.</param>
            <param name="type">The type to assert the expression as.</param>
            <param name="discoveredErrors">Errors produced if the expression does not match the specified type.</param>
            <returns>A value indicating whether the expression is valid for the given type or not.</returns>
            <remarks>If the expression has an associated type, this function will check that it matches the expected type and stop looking further. 
            If an expression claims a type, it must be validated that the type is valid for the expression. If the expression does not claim a type
            this method will attempt to check the validity of the expression itself with the asserted type.</remarks>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ExpressionTypeChecker.TryAssertType(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.IEdmType,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Determines if the type of an expression is compatible with the provided type
            </summary>
            <param name="expression">The expression to assert the type of.</param>
            <param name="type">The type to assert the expression as.</param>
            <param name="context">The context paths are to be evaluated in.</param>
            <param name="matchExactly">A value indicating whether the expression must match the asserted type exactly, or simply be compatible.</param>
            <param name="discoveredErrors">Errors produced if the expression does not match the specified type.</param>
            <returns>A value indicating whether the expression is valid for the given type or not.</returns>
            <remarks>If the expression has an associated type, this function will check that it matches the expected type and stop looking further. 
            If an expression claims a type, it must be validated that the type is valid for the expression. If the expression does not claim a type
            this method will attempt to check the validity of the expression itself with the asserted type.</remarks>
        </member>
        <member name="T:Microsoft.Data.Edm.ToTraceStringExtensionMethods">
            <summary>
            Contains ToTraceString() extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.ToTraceStringExtensionMethods.ToTraceString(Microsoft.Data.Edm.IEdmSchemaType)">
            <summary>
            Returns the text representation of the current object.
            </summary>
            <param name="schemaType">Reference to the calling object.</param>
            <returns>The text representation of the current object.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ToTraceStringExtensionMethods.ToTraceString(Microsoft.Data.Edm.IEdmSchemaElement)">
            <summary>
            Returns the text representation of the current object.
            </summary>
            <param name="schemaElement">Reference to the calling object.</param>
            <returns>The text representation of the current object.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ToTraceStringExtensionMethods.ToTraceString(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Returns the text representation of the current object.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The text representation of the current object.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ToTraceStringExtensionMethods.ToTraceString(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns the text representation of the current object.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The text representation of the current object.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ToTraceStringExtensionMethods.ToTraceString(Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Returns the text representation of the current object.
            </summary>
            <param name="property">Reference to the calling object.</param>
            <returns>The text representation of the current object.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmEnumValue">
            <summary>
            Represents an EDM enumeration type value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmEnumValue.Value">
            <summary>
            Gets the underlying type value of the enumeration type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmEnumTypeReference">
            <summary>
            Represents references to EDM enumeration types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.IEdmValueTermReferenceExpression">
            <summary>
            Represents an EDM value term reference expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmValueTermReferenceExpression.Base">
            <summary>
            Gets the expression for the structured value containing the referenced term property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmValueTermReferenceExpression.Term">
            <summary>
            Gets the referenced value term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Expressions.IEdmValueTermReferenceExpression.Qualifier">
            <summary>
            Gets the optional qualifier.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmTermKind">
            <summary>
            Defines EDM term kinds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTermKind.None">
            <summary>
            Represents a term with unknown or error kind.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTermKind.Type">
            <summary>
            Represents a term implementing <see cref="T:Microsoft.Data.Edm.IEdmStructuredType"/> and <see cref="T:Microsoft.Data.Edm.IEdmSchemaType"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTermKind.Value">
            <summary>
            Represents a term implementing <see cref="T:Microsoft.Data.Edm.IEdmValueTerm"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.IEdmStructuredValue">
            <summary>
            Represents an EDM structured value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Values.IEdmStructuredValue.FindPropertyValue(System.String)">
            <summary>
            Finds the value corresponding to the provided property name.
            </summary>
            <param name="propertyName">Property to find the value of.</param>
            <returns>The found property, or null if no property was found.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Values.IEdmStructuredValue.PropertyValues">
            <summary>
            Gets the property values of this structured value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Values.EdmValueKind">
            <summary>
            Defines Edm values
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Binary">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmBinaryValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Boolean">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmBooleanValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Collection">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmCollectionValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.DateTimeOffset">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmDateTimeOffsetValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.DateTime">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmDateTimeValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Decimal">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmDecimalValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Enum">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmEnumValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Floating">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmFloatingValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Guid">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmGuidValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Integer">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmIntegerValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Null">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmNullValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.String">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmStringValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Structured">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmStructuredValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.Time">
            <summary>
            Represents a value implementing <see cref="T:Microsoft.Data.Edm.Values.IEdmTimeValue"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Values.EdmValueKind.None">
            <summary>
            Represents a value with an unknown or error kind.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Expressions.EdmExpressionKind">
            <summary>
            Defines EDM expression kinds.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.None">
            <summary>
            Represents an expression with unknown or error kind.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.BinaryConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmBinaryConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.BooleanConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmBooleanConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.DateTimeConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmDateTimeConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.DateTimeOffsetConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmDateTimeOffsetConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.DecimalConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmDecimalConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.FloatingConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmFloatingConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.GuidConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmGuidConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.IntegerConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmIntegerConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.StringConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmStringConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.TimeConstant">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmTimeConstantExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.Null">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmNullExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.Record">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmRecordExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.Collection">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmCollectionExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.Path">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmPathExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.ParameterReference">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmParameterReferenceExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.FunctionReference">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmFunctionReferenceExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.PropertyReference">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmPropertyReferenceExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.ValueTermReference">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmValueTermReferenceExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.EntitySetReference">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmEntitySetReferenceExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.EnumMemberReference">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmEnumMemberReferenceExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.If">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmIfExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.AssertType">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmAssertTypeExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.IsType">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmIsTypeExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.FunctionApplication">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmApplyExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.LabeledExpressionReference">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmLabeledExpressionReferenceExpression"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Expressions.EdmExpressionKind.Labeled">
            <summary>
            Represents an expression implementing <see cref="T:Microsoft.Data.Edm.Expressions.IEdmLabeledExpression"/>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.CsdlConstants">
            <summary>
            Constants for CSDL XML.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.CsdlConstants.EdmxVersionAnnotation">
            <summary>
            The local name of the annotation that stores EDMX version of a model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.CsdlConstants.EdmxVersion1">
            <summary>
            Version 1.0 of EDMX. Corresponds to EDMX namespace "http://schemas.microsoft.com/ado/2007/06/edmx".
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.CsdlConstants.EdmxVersion2">
            <summary>
            Version 2.0 of EDMX. Corresponds to EDMX namespace "http://schemas.microsoft.com/ado/2008/10/edmx".
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.CsdlConstants.EdmxVersion3">
            <summary>
            Version 3.0 of EDMX. Corresponds to EDMX namespace "http://schemas.microsoft.com/ado/2009/11/edmx".
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Csdl.CsdlConstants.EdmxVersionLatest">
            <summary>
            The current latest version of EDMX.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlDirectValueAnnotation">
            <summary>
            Represents a CSDL annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlAssociation">
            <summary>
            Represents a CSDL association.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlAssociationEnd">
            <summary>
            Represents a CSDL association end.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlAssociationSet">
            <summary>
            Represents a CSDL association set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlAssociationSetEnd">
            <summary>
            Represents a CSDL association set end.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlBinaryTypeReference">
            <summary>
            Represents a reference to a CSDL Binary type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlComplexType">
            <summary>
            Represents a CSDL complex type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlNamedStructuredType">
            <summary>
            Common base class for CSDL entity and complex types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlStructuredType">
            <summary>
            Common base class for CSDL entity, complex, and row Types.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlDecimalTypeReference">
            <summary>
            Represents a reference to a CSDL decimal type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlDocumentation">
            <summary>
            Represents a CSDL documentation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlEntityContainer">
            <summary>
            Represents a CSDL entity container.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlEntityReferenceType">
            <summary>
            Represents a CSDL entity reference type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlEntitySet">
            <summary>
            Represents a CSDL Entity Set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlEntityType">
            <summary>
            Represents a CSDL entity type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlExpressionTypeReference">
            <summary>
            Represents a CSDL type reference based on a type expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlFunction">
            <summary>
            Represents a CSDL function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlFunctionBase">
            <summary>
            Represents a base class for CSDL functions and function imports.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlFunctionImport">
            <summary>
            Represents a CSDL function import.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlFunctionParameter">
            <summary>
            Represents a CSDL function parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlKey">
            <summary>
            Represents a CSDL key.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlModel">
            <summary>
            Represents a CSDL model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlNavigationProperty">
            <summary>
            Represents a CSDL navigation property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlOnDelete">
            <summary>
            Represents a CSDL "on delete" action.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlProperty">
            <summary>
            Represents a CSDL property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlPropertyReference">
            <summary>
            Represents a CSDL property reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlReferentialConstraint">
            <summary>
            Represents a CSDL referential constraint.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlReferentialConstraintRole">
            <summary>
            Represents a CSDL referential constraint role.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlRowType">
            <summary>
            Represents a CSDL row type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlSchema">
            <summary>
            Represents a CSDL schema.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlStringTypeReference">
            <summary>
            Represents a reference to a CSDL String type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlTemporalTypeReference">
            <summary>
            Represents a reference to a CSDL temporal type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlUsing">
            <summary>
            Represents a CSDL Using.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Common.XmlDocumentParser">
            <summary>
            Base class for parsers of XML documents
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.CsdlDocumentParser">
            <summary>
            CSDL document parser.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.CsdlParser">
            <summary>
            Provides for the loading and conversion of one or more CSDL XML readers into Entity Data Model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsAssociation">
            <summary>
            Provides semantics for a CsdlAssociation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsAssociationEnd">
            <summary>
            Provides semantics for a CsdlAssociationEnd.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsAssociationSet">
            <summary>
            Provides semantics for a CsdlAssociationSet.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsAssociationSetEnd">
            <summary>
            Provides semantics for a CsdlAssociationSetEnd.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsBinaryTypeReference">
            <summary>
            Provides the semantics of a reference to an EDM Binary type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsComplexTypeDefinition">
            <summary>
            Provides semantics for CsdlComplexType.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsStructuredTypeDefinition">
            <summary>
            Provides semantics for CsdlStructuredType.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsDecimalTypeReference">
            <summary>
            Provides the semantics of a reference to an EDM Decimal type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsDocumentation">
            <summary>
            Provides semantics for CsdlDocumentation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmDocumentation">
            <summary>
            Represents an EDM documentation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmDocumentation.Summary">
            <summary>
            Gets a summary of this documentation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmDocumentation.Description">
            <summary>
            Gets a long description of this documentation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsEntityContainer">
            <summary>
            Provides semantics for CsdlEntityContainer.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsEntityReferenceTypeDefinition">
            <summary>
            Provides semantics for CsdlEntityTypeReference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsEntitySet">
            <summary>
            Provides semantics for CsdlEntitySet.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsEntityTypeDefinition">
            <summary>
            Provides semantics for CsdlEntityType.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsFunction">
            <summary>
            Provides semantics for a CsdlFunction.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsFunctionParameter">
            <summary>
            Provides semantics for a CsdlFunctionParameter.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmFunctionParameter">
            <summary>
            Represents a parameter of an EDM function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionParameter.Type">
            <summary>
            Gets the type of this function parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionParameter.DeclaringFunction">
            <summary>
            Gets the function or function import that declared this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmFunctionParameter.Mode">
            <summary>
            Gets the mode of this function parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsModel">
            <summary>
            Provides semantics for CsdlMetadataModel.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmModelBase">
            <summary>
            Represents an EDM model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmModel">
            <summary>
            Semantic representation of an EDM model.
            </summary>
            <remarks>
            This interface, and all interfaces reachable from it, preserve certain invariants:
               -- The backing implementation of an element can be loaded or created on demand.
               -- No direct element mutation occurs through the interfaces.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmModel.FindDeclaredEntityContainer(System.String)">
            <summary>
            Searches for an entity container with the given name in this model and returns null if no such entity container exists.
            </summary>
            <param name="name">The name of the entity container being found.</param>
            <returns>The requested entity container, or null if no such entity container exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmModel.FindDeclaredType(System.String)">
            <summary>
            Searches for a type with the given name in this model and returns null if no such type exists.
            </summary>
            <param name="qualifiedName">The qualified name of the type being found.</param>
            <returns>The requested type, or null if no such type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmModel.FindDeclaredFunctions(System.String)">
            <summary>
            Searches for functions with the given name in this model and returns an empty enumerable if no such function exists.
            </summary>
            <param name="qualifiedName">The qualified name of the function being found.</param>
            <returns>A set of functions sharing the specified qualified name, or an empty enumerable if no such function exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmModel.FindDeclaredValueTerm(System.String)">
            <summary>
            Searches for a value term with the given name in this model and returns null if no such value term exists.
            </summary>
            <param name="qualifiedName">The qualified name of the value term being found.</param>
            <returns>The requested value term, or null if no such value term exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmModel.FindDeclaredVocabularyAnnotations(Microsoft.Data.Edm.IEdmVocabularyAnnotatable)">
            <summary>
            Searches for vocabulary annotations specified by this model.
            </summary>
            <param name="element">The annotated element.</param>
            <returns>The vocabulary annotations for the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.IEdmModel.FindDirectlyDerivedTypes(Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Finds a list of types that derive directly from the supplied type.
            </summary>
            <param name="baseType">The base type that derived types are being searched for.</param>
            <returns>A list of types from this model that derive directly from the given type.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmModel.SchemaElements">
            <summary>
            Gets the collection of schema elements that are contained in this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmModel.VocabularyAnnotations">
            <summary>
            Gets the collection of vocabulary annotations that are contained in this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmModel.ReferencedModels">
            <summary>
            Gets the collection of models referred to by this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmModel.DirectValueAnnotationsManager">
            <summary>
            Gets the model's annotations manager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmModel},Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotationsManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmModelBase"/> class.
            </summary>
            <param name="referencedModels">Models to which this model refers.</param>
            <param name="annotationsManager">Annotations manager for the model to use.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.FindDeclaredEntityContainer(System.String)">
            <summary>
            Searches for an entity container with the given name in this model and returns null if no such entity container exists.
            </summary>
            <param name="name">The name of the entity container being found.</param>
            <returns>The requested entity container, or null if no such entity container exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.FindDeclaredType(System.String)">
            <summary>
            Searches for a type with the given name in this model and returns null if no such type exists.
            </summary>
            <param name="qualifiedName">The qualified name of the type being found.</param>
            <returns>The requested type, or null if no such type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.FindDeclaredValueTerm(System.String)">
            <summary>
            Searches for a value term with the given name in this model and returns null if no such value term exists.
            </summary>
            <param name="qualifiedName">The qualified name of the value term being found.</param>
            <returns>The requested value term, or null if no such value term exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.FindDeclaredFunctions(System.String)">
            <summary>
            Searches for a function with the given name in this model and returns null if no such function exists.
            </summary>
            <param name="qualifiedName">The qualified name of the function being found.</param>
            <returns>A group of functions sharing the specified qualified name, or an empty enumerable if no such function exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.FindDeclaredVocabularyAnnotations(Microsoft.Data.Edm.IEdmVocabularyAnnotatable)">
            <summary>
            Searches for vocabulary annotations specified by this model or a referenced model for a given element.
            </summary>
            <param name="element">The annotated element.</param>
            <returns>The vocabulary annotations for the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.FindDirectlyDerivedTypes(Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Finds a list of types that derive directly from the supplied type.
            </summary>
            <param name="baseType">The base type that derived types are being searched for.</param>
            <returns>A list of types that derive directly from the base type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.RegisterElement(Microsoft.Data.Edm.IEdmSchemaElement)">
            <summary>
            Adds a schema element to this model.
            </summary>
            <param name="element">The element to register.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModelBase.AddReferencedModel(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Adds a model reference to this model.
            </summary>
            <param name="model">The model to reference.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmModelBase.SchemaElements">
            <summary>
            Gets the collection of schema elements that are contained in this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmModelBase.VocabularyAnnotations">
            <summary>
            Gets the collection of vocabulary annotations that are contained in this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmModelBase.ReferencedModels">
            <summary>
            Gets the collection of models referred to by this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmModelBase.DirectValueAnnotationsManager">
            <summary>
            Gets the model's annotations manager.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsModel.FindAssociation(System.String)">
            <summary>
            Searches for an association with the given name in this model and returns null if no such association exists.
            </summary>
            <param name="qualifiedName">The qualified name of the type being found.</param>
            <returns>The requested association, or null if no such type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsModel.FindDeclaredVocabularyAnnotations(Microsoft.Data.Edm.IEdmVocabularyAnnotatable)">
            <summary>
            Searches for vocabulary annotations specified by this model.
            </summary>
            <param name="element">The annotated element.</param>
            <returns>The vocabulary annotations for the element.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsModel.Errors">
            <summary>
            Gets an error if one exists with the current object.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsNavigationProperty">
            <summary>
            Provides semantics for a CsdlNavigationProperty.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.IEdmNavigationProperty">
            <summary>
            Represents an EDM navigation property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmNavigationProperty.Partner">
            <summary>
            Gets the partner of this navigation property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmNavigationProperty.OnDelete">
            <summary>
            Gets the action to execute on the deletion of this end of a bidirectional association.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmNavigationProperty.IsPrincipal">
            <summary>
            Gets whether this navigation property originates at the principal end of an association.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmNavigationProperty.DependentProperties">
            <summary>
            Gets the dependent properties of this navigation property, returning null if this is the principal end or if there is no referential constraint.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget">
            <summary>
            Gets a value indicating whether the navigation target is contained inside the navigation source.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.BadAssociationEnd">
            <summary>
            Represents a semantically invalid EDM association end.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsNavigationProperty.SilentPartner">
            <summary>
            Represents a navigation property synthesized for an association end that does not have a corresponding navigation property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.AmbiguousAssociationBinding">
            <summary>
            Represents a name binding to more than one item.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Annotations.EdmPropertyValueBinding">
            <summary>
            Represents a property binding specified as part of an EDM type annotation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmPropertyValueBinding.#ctor(Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmPropertyValueBinding"/> class.
            </summary>
            <param name="boundProperty">Property that is given a value by the annotation.</param>
            <param name="value">Expression producing the value of the annotation.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmPropertyValueBinding.BoundProperty">
            <summary>
            Gets the property that is given a value by the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmPropertyValueBinding.Value">
            <summary>
            Gets the expression producing the value of the annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Annotations.EdmTypeAnnotation">
            <summary>
            Represents an EDM type annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Annotations.EdmVocabularyAnnotation">
            <summary>
            Represents an EDM annotation with an immediate value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmVocabularyAnnotation.#ctor(Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmTerm,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmVocabularyAnnotation"/> class.
            </summary>
            <param name="target">Element the annotation applies to.</param>
            <param name="term">Term bound by the annotation.</param>
            <param name="qualifier">Qualifier used to discriminate between multiple bindings of the same property or type.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmVocabularyAnnotation.Target">
            <summary>
            Gets the element the annotation applies to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmVocabularyAnnotation.Term">
            <summary>
            Gets the term bound by the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmVocabularyAnnotation.Qualifier">
            <summary>
            Gets the qualifier used to discriminate between multiple bindings of the same property or type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmTypeAnnotation.#ctor(Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmTerm,Microsoft.Data.Edm.Annotations.IEdmPropertyValueBinding[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmTypeAnnotation"/> class.
            </summary>
            <param name="target">Element the annotation applies to.</param>
            <param name="term">Term bound by the annotation.</param>
            <param name="propertyValueBindings">Value annotations for the properties of the type.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmTypeAnnotation.#ctor(Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmTerm,System.String,Microsoft.Data.Edm.Annotations.IEdmPropertyValueBinding[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmTypeAnnotation"/> class.
            </summary>
            <param name="target">Element the annotation applies to.</param>
            <param name="term">Term bound by the annotation.</param>
            <param name="qualifier">Qualifier used to discriminate between multiple bindings of the same property or type.</param>
            <param name="propertyValueBindings">Value annotations for the properties of the type.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmTypeAnnotation.#ctor(Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmTerm,System.String,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmPropertyValueBinding})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmTypeAnnotation"/> class.
            </summary>
            <param name="target">Element the annotation applies to.</param>
            <param name="term">Term bound by the annotation.</param>
            <param name="qualifier">Qualifier used to discriminate between multiple bindings of the same property or type.</param>
            <param name="propertyValueBindings">Value annotations for the properties of the type.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmTypeAnnotation.PropertyValueBindings">
            <summary>
            Gets the value annotations for the properties of the type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Annotations.EdmValueAnnotation">
            <summary>
            Represents an EDM value annotation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmValueAnnotation.#ctor(Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmTerm,Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmValueAnnotation"/> class.
            </summary>
            <param name="target">Element the annotation applies to.</param>
            <param name="term">Term bound by the annotation.</param>
            <param name="value">Expression producing the value of the annotation.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmValueAnnotation.#ctor(Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmTerm,System.String,Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmValueAnnotation"/> class.
            </summary>
            <param name="target">Element the annotation applies to.</param>
            <param name="term">Term bound by the annotation.</param>
            <param name="qualifier">Qualifier used to discriminate between multiple bindings of the same property or type.</param>
            <param name="value">Expression producing the value of the annotation.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmValueAnnotation.Value">
            <summary>
            Gets the expression producing the value of the annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.BadAssociation">
            <summary>
            Represents a semantically invalid EDM association.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEnumMember">
            <summary>
            Represents a member of an EDM enumeration type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEnumMember.#ctor(Microsoft.Data.Edm.IEdmEnumType,System.String,Microsoft.Data.Edm.Values.IEdmPrimitiveValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEnumMember"/> class.
            </summary>
            <param name="declaringType">The type that declares this member.</param>
            <param name="name">Name of this enumeration member.</param>
            <param name="value">Value of this enumeration member.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumMember.DeclaringType">
            <summary>
            Gets the type that this member belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumMember.Value">
            <summary>
            Gets the value of this enumeration type member.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEnumType">
            <summary>
            Represents the definition of an Edm enumeration type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmType">
            <summary>
            Represents the definition of an EDM type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmType.ToString">
            <summary>
            Returns the text representation of the current object.
            </summary>
            <returns>The text representation of the current object.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEnumType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEnumType"/> class with <see cref="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Int32"/> underlying type.
            </summary>
            <param name="namespaceName">Namespace this enumeration type belongs to.</param>
            <param name="name">Name of this enumeration type.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEnumType.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEnumType"/> class with <see cref="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Int32"/> underlying type.
            </summary>
            <param name="namespaceName">Namespace this enumeration type belongs to.</param>
            <param name="name">Name of this enumeration type.</param>
            <param name="isFlags">A value indicating whether the enumeration type can be treated as a bit field.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEnumType.#ctor(System.String,System.String,Microsoft.Data.Edm.EdmPrimitiveTypeKind,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEnumType"/> class with <see cref="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Int32"/> underlying type.
            </summary>
            <param name="namespaceName">Namespace this enumeration type belongs to.</param>
            <param name="name">Name of this enumeration type.</param>
            <param name="underlyingType">The underlying type of this enumeration type.</param>
            <param name="isFlags">A value indicating whether the enumeration type can be treated as a bit field.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEnumType.#ctor(System.String,System.String,Microsoft.Data.Edm.IEdmPrimitiveType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEnumType"/> class.
            </summary>
            <param name="namespaceName">Namespace this enumeration type belongs to.</param>
            <param name="name">Name of this enumeration type.</param>
            <param name="underlyingType">The underlying type of this enumeration type.</param>
            <param name="isFlags">A value indicating whether the enumeration type can be treated as a bit field.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEnumType.AddMember(Microsoft.Data.Edm.IEdmEnumMember)">
            <summary>
            Adds a new member to this enum type.
            </summary>
            <param name="member">The member to add.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEnumType.AddMember(System.String,Microsoft.Data.Edm.Values.IEdmPrimitiveValue)">
            <summary>
            Creates and adds a new member to this enum type.
            </summary>
            <param name="name">Name of the member.</param>
            <param name="value">Value of the member.</param>
            <returns>Created member.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumType.SchemaElementKind">
            <summary>
            Gets the kind of this schema element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumType.Namespace">
            <summary>
            Gets the namespace this schema element belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumType.Name">
            <summary>
            Gets the name of this enumeration type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumType.UnderlyingType">
            <summary>
            Gets the underlying type of this enumeration type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumType.Members">
            <summary>
            Gets the members of this enumeration type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEnumType.IsFlags">
            <summary>
            Gets a value indicating whether the enumeration type can be treated as a bit field.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmEnumMemberReferenceExpression">
            <summary>
            Represents an EDM enumeration member reference expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmEnumMemberReferenceExpression.#ctor(Microsoft.Data.Edm.IEdmEnumMember)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmEnumMemberReferenceExpression"/> class.
            </summary>
            <param name="referencedEnumMember">Referenced enum member.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmEnumMemberReferenceExpression.ReferencedEnumMember">
            <summary>
            Gets the referenced enum member.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmEnumMemberReferenceExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression">
            <summary>
            Represents an EDM labeled expression reference expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression"/> class with non-initialized <see cref="P:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression.ReferencedLabeledExpression"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmLabeledExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression"/> class.
            This constructor will not allow changing <see cref="P:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression.ReferencedLabeledExpression"/> property after the EdmLabeledExpressionReferenceExpression instance has been constructed.
            </summary>
            <param name="referencedLabeledExpression">Referenced labeled element.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression.ReferencedLabeledExpression">
            <summary>
            Gets or sets the referenced labeled element.
            The referenced labeled element can be initialized only once either using the <see cref="M:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmLabeledExpression)"/> constructor or by assigning value directly to this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpressionReferenceExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmNullExpression">
            <summary>
            Represents an EDM null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.Values.EdmNullExpression.Instance">
            <summary>
            Singleton <see cref="T:Microsoft.Data.Edm.Library.Values.EdmNullExpression"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmNullExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmNullExpression"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmNullExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmNullExpression.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmParameterReferenceExpression">
            <summary>
            Represents an EDM parameter reference expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmParameterReferenceExpression.#ctor(Microsoft.Data.Edm.IEdmFunctionParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmParameterReferenceExpression"/> class.
            </summary>
            <param name="referencedParameter">Referenced parameter</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmParameterReferenceExpression.ReferencedParameter">
            <summary>
            Gets the referenced parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmParameterReferenceExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.UnresolvedFunction">
            <summary>
            Represents information about an EDM function that failed to resolve.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmEnumValue">
            <summary>
            Represents an EDM enumeration type value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmEnumValue.#ctor(Microsoft.Data.Edm.IEdmEnumTypeReference,Microsoft.Data.Edm.IEdmEnumMember)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmEnumValue"/> class. 
            </summary>
            <param name="type">A reference to the enumeration type that describes this value.</param>
            <param name="member">The enumeration type value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmEnumValue.#ctor(Microsoft.Data.Edm.IEdmEnumTypeReference,Microsoft.Data.Edm.Values.IEdmPrimitiveValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmEnumValue"/> class. 
            </summary>
            <param name="type">A reference to the enumeration type that describes this value.</param>
            <param name="value">The underlying type value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmEnumValue.Value">
            <summary>
            Gets the underlying type value of the enumeration type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmEnumValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmBinaryConstant">
            <summary>
            Represents an EDM binary constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmBinaryConstant.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmBinaryConstant"/> class.
            </summary>
            <param name="value">Integer value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmBinaryConstant.#ctor(Microsoft.Data.Edm.IEdmBinaryTypeReference,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmBinaryConstant"/> class.
            </summary>
            <param name="type">Type of the integer.</param>
            <param name="value">Integer value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmBinaryConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmBinaryConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmBinaryConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmBooleanConstant">
            <summary>
            Represents an EDM boolean constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmBooleanConstant.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmBooleanConstant"/> class.
            </summary>
            <param name="value">Boolean value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmBooleanConstant.#ctor(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmBooleanConstant"/> class.
            </summary>
            <param name="type">Type of the boolean.</param>
            <param name="value">Boolean value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmBooleanConstant.Value">
            <summary>
            Gets a value indicating whether the value of this boolean value is true or false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmBooleanConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmBooleanConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmDateTimeConstant">
            <summary>
            Represents an EDM datetime constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmDateTimeConstant.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmDateTimeConstant"/> class.
            </summary>
            <param name="value">DateTime value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmDateTimeConstant.#ctor(Microsoft.Data.Edm.IEdmTemporalTypeReference,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmDateTimeConstant"/> class.
            </summary>
            <param name="type">Type of the DateTime.</param>
            <param name="value">DateTime value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDateTimeConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDateTimeConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDateTimeConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmDateTimeOffsetConstant">
            <summary>
            Represents an EDM datetime with offset constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmDateTimeOffsetConstant.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmDateTimeOffsetConstant"/> class.
            </summary>
            <param name="value">DateTimeOffset value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmDateTimeOffsetConstant.#ctor(Microsoft.Data.Edm.IEdmTemporalTypeReference,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmDateTimeOffsetConstant"/> class.
            </summary>
            <param name="type">Type of the DateTimeOffset.</param>
            <param name="value">DateTimeOffset value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDateTimeOffsetConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDateTimeOffsetConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDateTimeOffsetConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmDecimalConstant">
            <summary>
            Represents an EDM decimal constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmDecimalConstant.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmDecimalConstant"/> class.
            </summary>
            <param name="value">Decimal value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmDecimalConstant.#ctor(Microsoft.Data.Edm.IEdmDecimalTypeReference,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmDecimalConstant"/> class.
            </summary>
            <param name="type">Type of the decimal.</param>
            <param name="value">Decimal value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDecimalConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDecimalConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmDecimalConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEnumTypeReference">
            <summary>
            Represents a reference to an EDM enumeration type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEnumTypeReference.#ctor(Microsoft.Data.Edm.IEdmEnumType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEnumTypeReference"/> class.
            </summary>
            <param name="enumType">The definition refered to by this reference.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression">
            <summary>
            Represents an EDM value term reference expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.IEdmValueTerm)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression"/> class.
            </summary>
            <param name="baseExpression">Expression for the structured value containing the referenced term property.</param>
            <param name="term">Referenced value term.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.IEdmValueTerm,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression"/> class.
            </summary>
            <param name="baseExpression">Expression for the structured value containing the referenced term property.</param>
            <param name="term">Referenced value term.</param>
            <param name="qualifier">Qualifier.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression.Base">
            <summary>
            Gets the expression for the structured value containing the referenced term property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression.Term">
            <summary>
            Gets the referenced value term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression.Qualifier">
            <summary>
            Gets the optional qualifier.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmValueTermReferenceExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression">
            <summary>
            Represents an EDM record construction expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmPropertyConstructor[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression"/> class.
            </summary>
            <param name="properties">Property constructors.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression.#ctor(Microsoft.Data.Edm.IEdmStructuredTypeReference,Microsoft.Data.Edm.Expressions.IEdmPropertyConstructor[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression"/> class.
            </summary>
            <param name="declaredType">Declared type of the record.</param>
            <param name="properties">Property constructors.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Expressions.IEdmPropertyConstructor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression"/> class.
            </summary>
            <param name="properties">Property constructors.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression.#ctor(Microsoft.Data.Edm.IEdmStructuredTypeReference,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Expressions.IEdmPropertyConstructor})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression"/> class.
            </summary>
            <param name="declaredType">Optional declared type of the record.</param>
            <param name="properties">Property constructors.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression.DeclaredType">
            <summary>
            Gets the declared type of the record, or null if there is no declared type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression.Properties">
            <summary>
            Gets the constructed property values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmRecordExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmPropertyConstructor">
            <summary>
            Represents an EDM property constructor specified as part of a EDM record construction expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmPropertyConstructor.#ctor(System.String,Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmPropertyConstructor"/> class.
            </summary>
            <param name="name">Property name.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmPropertyConstructor.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmPropertyConstructor.Value">
            <summary>
            Gets the expression for the value of the property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmPropertyReferenceExpression">
            <summary>
            Represents an EDM property reference expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmPropertyReferenceExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmPropertyReferenceExpression"/> class.
            </summary>
            <param name="baseExpression">Expression for the structured value containing the referenced property.</param>
            <param name="referencedProperty">Referenced property.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmPropertyReferenceExpression.Base">
            <summary>
            Gets the expression for the structured value containing the referenced property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmPropertyReferenceExpression.ReferencedProperty">
            <summary>
            Gets the referenced property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmPropertyReferenceExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmIsTypeExpression">
            <summary>
            Represents an EDM type test expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmIsTypeExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmIsTypeExpression"/> class.
            </summary>
            <param name="operand">Expression whose type is to be tested.</param>
            <param name="type">Type to test.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmIsTypeExpression.Operand">
            <summary>
            Gets the expression whose type is to be tested.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmIsTypeExpression.Type">
            <summary>
            Gets the type to be tested against.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmIsTypeExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression">
            <summary>
            Represents an EDM if expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression"/> class.
            </summary>
            <param name="testExpression">Test expression</param>
            <param name="trueExpression">Expression to evaluate if <paramref name="testExpression"/> evaluates to true.</param>
            <param name="falseExpression">Expression to evaluate if <paramref name="testExpression"/> evaluates to false.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression.TestExpression">
            <summary>
            Gets the test expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression.TrueExpression">
            <summary>
            Gets the expression to evaluate if <see cref="P:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression.TestExpression"/> evaluates to true.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression.FalseExpression">
            <summary>
            Gets the expression to evaluate if <see cref="P:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression.TestExpression"/> evaluates to false.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmIfExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmFunctionReferenceExpression">
            <summary>
            Represents an EDM function reference expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmFunctionReferenceExpression.#ctor(Microsoft.Data.Edm.IEdmFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmFunctionReferenceExpression"/> class.
            </summary>
            <param name="referencedFunction">Referenced function</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmFunctionReferenceExpression.ReferencedFunction">
            <summary>
            Gets the referenced function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmFunctionReferenceExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression">
            <summary>
            Represents an EDM function application expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression.#ctor(Microsoft.Data.Edm.IEdmFunction,Microsoft.Data.Edm.Expressions.IEdmExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression"/> class.
            </summary>
            <param name="appliedFunction">Function to apply.</param>
            <param name="arguments">Application arguments. Value may be null, in which case it is treated as an empty enumerable.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression.#ctor(Microsoft.Data.Edm.IEdmFunction,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Expressions.IEdmExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression"/> class.
            </summary>
            <param name="appliedFunction">Function to apply.</param>
            <param name="arguments">Application arguments. Value may be null, in which case it is treated as an empty enumerable.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmExpression,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Expressions.IEdmExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression"/> class.
            </summary>
            <param name="appliedFunction">Function to apply.</param>
            <param name="arguments">Application arguments. Value may be null, in which case it is treated as an empty enumerable.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression.AppliedFunction">
            <summary>
            Gets the applied function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression.Arguments">
            <summary>
            Gets the arguments to the function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmApplyExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpression">
            <summary>
            Represents an EDM labeled expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpression.#ctor(System.String,Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpression"/> class.
            </summary>
            <param name="name">Label of the expression.</param>
            <param name="expression">Underlying expression.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpression.Name">
            <summary>
            Gets the label.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpression.Expression">
            <summary>
            Gets the underlying expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmLabeledExpression.ExpressionKind">
            <summary>
            Gets the expression kind.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression">
            <summary>
            Represents an EDM multi-value construction expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression"/> class.
            </summary>
            <param name="elements">The constructed element values.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression.#ctor(Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.Expressions.IEdmExpression[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression"/> class.
            </summary>
            <param name="declaredType">Declared type of the collection.</param>
            <param name="elements">The constructed element values.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Expressions.IEdmExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression"/> class.
            </summary>
            <param name="elements">The constructed element values.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression.#ctor(Microsoft.Data.Edm.IEdmTypeReference,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Expressions.IEdmExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression"/> class.
            </summary>
            <param name="declaredType">Declared type of the collection.</param>
            <param name="elements">The constructed element values.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression.DeclaredType">
            <summary>
            Gets the declared type of the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression.Elements">
            <summary>
            Gets the constructed element values.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmCollectionExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Expressions.EdmAssertTypeExpression">
            <summary>
            Represents an EDM type assertion expression.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Expressions.EdmAssertTypeExpression.#ctor(Microsoft.Data.Edm.Expressions.IEdmExpression,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Expressions.EdmAssertTypeExpression"/> class.
            </summary>
            <param name="operand">Expression for which the type is asserted.</param>
            <param name="type">Type to assert.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmAssertTypeExpression.Operand">
            <summary>
            Gets the expression for which the type is asserted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmAssertTypeExpression.Type">
            <summary>
            Gets the asserted type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Expressions.EdmAssertTypeExpression.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmFloatingConstant">
            <summary>
            Represents an EDM floating point constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmFloatingConstant.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmFloatingConstant"/> class.
            </summary>
            <param name="value">Floating point value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmFloatingConstant.#ctor(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmFloatingConstant"/> class.
            </summary>
            <param name="type">Type of the floating point.</param>
            <param name="value">Floating point value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmFloatingConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmFloatingConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmFloatingConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmGuidConstant">
            <summary>
            Represents an EDM guid constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmGuidConstant.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmGuidConstant"/> class.
            </summary>
            <param name="value">Integer value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmGuidConstant.#ctor(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmGuidConstant"/> class.
            </summary>
            <param name="type">Type of the integer.</param>
            <param name="value">Integer value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmGuidConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmGuidConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmGuidConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmValueTerm">
            <summary>
            Represents an EDM value term.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmValueTerm.#ctor(System.String,System.String,Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.Edm.Library.EdmValueTerm"/> class.
            The new value term will be of the nullable primitive <paramref name="type"/>.
            </summary>
            <param name="namespaceName">Namespace of the term.</param>
            <param name="name">Name of the term.</param>
            <param name="type">Type of the term.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmValueTerm.#ctor(System.String,System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmValueTerm"/> class.
            </summary>
            <param name="namespaceName">Namespace of the term.</param>
            <param name="name">Name of the term.</param>
            <param name="type">Type of the term.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmValueTerm.Namespace">
            <summary>
            Gets the namespace of this term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmValueTerm.TermKind">
            <summary>
            Gets the kind of this term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmValueTerm.Type">
            <summary>
            Gets the type of this term.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmValueTerm.SchemaElementKind">
            <summary>
            Gets the schema element kind of this term.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmCollectionType">
            <summary>
            Represents a definition of an EDM collection type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCollectionType.#ctor(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmCollectionType"/> class.
            </summary>
            <param name="elementType">The type of the elements in this collection.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmCollectionType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmCollectionType.ElementType">
            <summary>
            Gets the element type of this collection type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmCollectionTypeReference">
            <summary>
            Represents a reference to an EDM collection type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCollectionTypeReference.#ctor(Microsoft.Data.Edm.IEdmCollectionType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmCollectionTypeReference"/> class.
            </summary>
            <param name="collectionType">The type definition this reference refers to.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmCollectionValue">
            <summary>
            Represents an EDM collection value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmCollectionValue.#ctor(Microsoft.Data.Edm.IEdmCollectionTypeReference,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Values.IEdmDelayedValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmCollectionValue"/> class. 
            </summary>
            <param name="type">A reference to a collection type that describes this collection value</param>
            <param name="elements">The collection of values stored in this collection value</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmCollectionValue.Elements">
            <summary>
            Gets the values stored in this collection.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmCollectionValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsProperty">
            <summary>
            Provides semantics for a CsdlProperty.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsReferentialConstraint">
            <summary>
            Provides semantics for a CsdlReferentialConstraint.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsRowTypeDefinition">
            <summary>
            Provides semantics for CsdlRowType.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsSchema">
            <summary>
            Provides semantics for CsdlSchema.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsSchema.ComputeLabeledExpressions">
            <summary>
            All of the labeled expressions in a schema are collected into a dictionary so that references to them can be bound.
            The elements of the dictionary are Csdl objects and not CsdlSemantics objects because the semantics objects are not created
            until and unless necessary. 
            </summary>
            <returns>A dictionary containing entries for all labeled expressions in the schema.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsSchema.LabeledExpressions">
            <summary>
            Gets the labeled element expressions dictionary.
            Each value in the dictionary is either a <see cref="T:Microsoft.Data.Edm.Csdl.Internal.Parsing.Ast.CsdlLabeledExpression"/> or a list of same.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsStringTypeReference">
            <summary>
            Provides the semantics of a reference to an EDM String type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.CsdlSemanticsTemporalTypeReference">
            <summary>
            Provides the semantics of a reference to an EDM temporal type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.ExtensionMethods">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Data.Edm.IEdmModel"/> interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetEdmVersion(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the value for the EDM version of the <paramref name="model"/>.
            </summary>
            <param name="model">Model the version has been set for.</param>
            <returns>The version.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.SetEdmVersion(Microsoft.Data.Edm.IEdmModel,System.Version)">
            <summary>
            Sets a value of EDM version attribute of the <paramref name="model"/>.
            </summary>
            <param name="model">The model the version should be set for.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindType(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Searches for a type with the given name in this model and all referenced models and returns null if no such type exists.
            </summary>
            <param name="model">The model to search.</param>
            <param name="qualifiedName">The qualified name of the type being found.</param>
            <returns>The requested type, or null if no such type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindValueTerm(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Searches for a value term with the given name in this model and all referenced models and returns null if no such value term exists.
            </summary>
            <param name="model">The model to search.</param>
            <param name="qualifiedName">The qualified name of the value term being found.</param>
            <returns>The requested value term, or null if no such value term exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindFunctions(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Searches for functions with the given name in this model and all referenced models and returns an empty enumerable if no such functions exist.
            </summary>
            <param name="model">The model to search.</param>
            <param name="qualifiedName">The qualified name of the functions being found.</param>
            <returns>The requested functions.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindEntityContainer(Microsoft.Data.Edm.IEdmModel,System.String)">
            <summary>
            Searches for an entity container with the given name in this model and all referenced models and returns null if no such entity container exists.
            </summary>
            <param name="model">The model to search.</param>
            <param name="qualifiedName">The qualified name of the entity container being found.</param>
            <returns>The requested entity container, or null if no such entity container exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.EntityContainers(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets the entity containers belonging to this model.
            </summary>
            <param name="model">Model to search for entity containers.</param>
            <returns>Entity containers belonging to this model.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindVocabularyAnnotationsIncludingInheritedAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable)">
            <summary>
            Gets an annotatable element's vocabulary annotations defined in a specific model and models referenced by that model.
            </summary>
            <param name="model">The model to search.</param>
            <param name="element">Element to check for annotations.</param>
            <returns>Annotations attached to the element (or, if the element is a type, to its base types) by this model or by models referenced by this model.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindVocabularyAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable)">
            <summary>
            Gets an annotatable element's vocabulary annotations defined in a specific model and models referenced by that model.
            </summary>
            <param name="model">The model to search.</param>
            <param name="element">Element to check for annotations.</param>
            <returns>Annotations attached to the element by this model or by models referenced by this model.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindVocabularyAnnotations``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmTerm)">
            <summary>
            Gets an annotatable element's vocabulary annotations that bind a particular term.
            </summary>
            <typeparam name="T">Type of the annotation being returned.</typeparam>
            <param name="model">Model to search.</param>
            <param name="element">Element to check for annotations.</param>
            <param name="term">Term to search for.</param>
            <returns>Annotations attached to the element by this model or by models referenced by this model that bind the term.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindVocabularyAnnotations``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmTerm,System.String)">
            <summary>
            Gets an annotatable element's vocabulary annotations that bind a particular term.
            </summary>
            <typeparam name="T">Type of the annotation being returned.</typeparam>
            <param name="model">Model to search.</param>
            <param name="element">Element to check for annotations.</param>
            <param name="term">Term to search for.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <returns>Annotations attached to the element by this model or by models referenced by this model that bind the term with the given qualifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindVocabularyAnnotations``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,System.String)">
            <summary>
            Gets an annotatable element's vocabulary annotations that bind a particular term.
            </summary>
            <typeparam name="T">Type of the annotation being returned.</typeparam>
            <param name="model">Model to search.</param>
            <param name="element">Element to check for annotations.</param>
            <param name="termName">Name of the term to search for.</param>
            <returns>Annotations attached to the element by this model or by models referenced by this model that bind the term.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindVocabularyAnnotations``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,System.String,System.String)">
            <summary>
            Gets an annotatable element's vocabulary annotations that bind a particular term.
            </summary>
            <typeparam name="T">Type of the annotation being returned.</typeparam>
            <param name="model">Model to search.</param>
            <param name="element">Element to check for annotations.</param>
            <param name="termName">Name of the term to search for.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <returns>Annotations attached to the element by this model or by models referenced by this model that bind the term with the given qualifier.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetPropertyValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a property of a term type that has been applied to the type of a value.
            </summary>
            <param name="model">Model to search for type annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="property">Property to evaluate.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the property evaluated against the supplied value, or null if no relevant type annotation exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetPropertyValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmProperty,System.String,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a property of a term type that has been applied to the type of a value.
            </summary>
            <param name="model">Model to search for type annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="property">Property to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the property evaluated against the supplied value, or null if no relevant type annotation exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetPropertyValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmProperty,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a property of a term type that has been applied to the type of a value.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for type annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="property">Property to evaluate.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the property evaluated against the supplied value, or default(<typeparamref name="T"/>) if no relevant type annotation exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetPropertyValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmProperty,System.String,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a property of a term type that has been applied to the type of a value.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for type annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="property">Property to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the property evaluated against the supplied value, or default(<typeparamref name="T"/>) if no relevant type annotation exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,System.String,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a vocabulary term that has been applied to the type of a value.
            </summary>
            <param name="model">Model to search for term annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="termName">Name of the term to evaluate.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,System.String,System.String,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a vocabulary term that has been applied to the type of a value.
            </summary>
            <param name="model">Model to search for term annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="termName">Name of the term to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmValueTerm,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a vocabulary term that has been applied to the type of a value.
            </summary>
            <param name="model">Model to search for term annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="term">Term to evaluate.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmValueTerm,System.String,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a vocabulary term that has been applied to the type of a value.
            </summary>
            <param name="model">Model to search for term annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="term">Term to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,System.String,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a vocabulary term that has been applied to the type of a value.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for term annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="termName">Name of the term to evaluate.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,System.String,System.String,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a vocabulary term that has been applied to the type of a value.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for term annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="termName">Name of the term to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmValueTerm,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a vocabulary term that has been applied to the type of a value.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for term annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="term">Term to evaluate.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Values.IEdmStructuredValue,Microsoft.Data.Edm.IEdmValueTerm,System.String,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a vocabulary term that has been applied to the type of a value.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for term annotations.</param>
            <param name="context">Value to use as context in evaluation.</param>
            <param name="term">Term to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,System.String,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a vocabulary term that has been applied to an element.
            </summary>
            <param name="model">Model to search for term annotations.</param>
            <param name="element">Annotated element.</param>
            <param name="termName">Name of the term to evaluate.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,System.String,System.String,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a vocabulary term that has been applied to an element.
            </summary>
            <param name="model">Model to search for term annotations.</param>
            <param name="element">Annotated element.</param>
            <param name="termName">Name of the term to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmValueTerm,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a vocabulary term that has been applied to an element.
            </summary>
            <param name="model">Model to search for term annotations.</param>
            <param name="element">Annotated element.</param>
            <param name="term">Term to evaluate.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmValueTerm,System.String,Microsoft.Data.Edm.Evaluation.EdmExpressionEvaluator)">
            <summary>
            Gets the <see cref="T:Microsoft.Data.Edm.Values.IEdmValue"/> of a vocabulary term that has been applied to an element.
            </summary>
            <param name="model">Model to search for term annotations.</param>
            <param name="element">Annotated element.</param>
            <param name="term">Term to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="expressionEvaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,System.String,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a vocabulary term that has been applied to an element.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for term annotations.</param>
            <param name="element">Annotated element.</param>
            <param name="termName">Name of the term to evaluate.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,System.String,System.String,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a vocabulary term that has been applied to an element.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for term annotations.</param>
            <param name="element">Annotated element.</param>
            <param name="termName">Name of the term to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmValueTerm,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a vocabulary term that has been applied to an element.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for term annotations.</param>
            <param name="element">Annotated element.</param>
            <param name="term">Term to evaluate.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetTermValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmValueTerm,System.String,Microsoft.Data.Edm.Evaluation.EdmToClrEvaluator)">
            <summary>
            Gets the CLR value of a vocabulary term that has been applied to an element.
            </summary>
            <typeparam name="T">The CLR type of the value to be returned.</typeparam>
            <param name="model">Model to search for term annotations.</param>
            <param name="element">Annotated element.</param>
            <param name="term">Term to evaluate.</param>
            <param name="qualifier">Qualifier to apply.</param>
            <param name="evaluator">Evaluator to use to perform expression evaluation.</param>
            <returns>Value of the term evaluated against the supplied value.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetDocumentation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets documentation for a specified element.
            </summary>
            <param name="model">The model containing the documentation.</param>
            <param name="element">The element.</param>
            <returns>Documentation that exists on the element. Otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.SetDocumentation(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,Microsoft.Data.Edm.IEdmDocumentation)">
            <summary>
            Sets documentation for a specified element.
            </summary>
            <param name="model">The model containing the documentation.</param>
            <param name="element">The element.</param>
            <param name="documentation">Documentation to set.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetAnnotationValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String,System.String)">
            <summary>
            Gets an annotation value corresponding to the given namespace and name provided.
            </summary>
            <param name="model">The model containing the annotation.</param>
            <param name="element">The annotated element.</param>
            <param name="namespaceName">Namespace of the annotation.</param>
            <param name="localName">Name of the annotation inside the namespace.</param>
            <returns>The requested annotation value, if it exists. Otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetAnnotationValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String,System.String)">
            <summary>
            Gets an annotation value corresponding to the given namespace and name provided.
            </summary>
            <typeparam name="T">Type of the annotation being returned.</typeparam>
            <param name="model">The model containing the annotation.</param>
            <param name="element">The annotated element.</param>
            <param name="namespaceName">Namespace of the annotation.</param>
            <param name="localName">Name of the annotation inside the namespace.</param>
            <returns>The requested annotation value, if it exists. Otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetAnnotationValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets an annotation value from an annotatable element.
            </summary>
            <typeparam name="T">Type of the annotation being returned.</typeparam>
            <param name="model">The model containing the annotation.</param>
            <param name="element">The annotated element.</param>
            <returns>The requested annotation, if it exists. Otherwise, null.</returns>
            <remarks>
            Strongly-typed wrappers for unnamed annotations keyed by CLR type.
            </remarks>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.SetAnnotationValue(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,System.String,System.String,System.Object)">
            <summary>
            Sets an annotation value for an EDM element. If the value is null, no annotation is added and an existing annotation with the same name is removed.
            </summary>
            <param name="model">The model containing the annotation.</param>
            <param name="element">The annotated element.</param>
            <param name="namespaceName">Namespace that the annotation belongs to.</param>
            <param name="localName">Name of the annotation within the namespace.</param>
            <param name="value">Value of the new annotation.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.SchemaElementsAcrossModels(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets all schema elements from the model, and models referenced by it.
            </summary>
            <param name="model">Model to search for elements</param>
            <returns>Schema elements from the model, and models referenced by it.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindAllDerivedTypes(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Finds a list of types that derive from the supplied type directly or indirectly, and across models.
            </summary>
            <param name="model">The model types are being found on.</param>
            <param name="baseType">The base type that derived types are being searched for.</param>
            <returns>A list of types that derive from the type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.SetAnnotationValue``1(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement,``0)">
            <summary>
            Sets an annotation value on an annotatable element.
            </summary>
            <typeparam name="T">Type of the annotation being set.</typeparam>
             <param name="model">The model containing the annotation.</param>
            <param name="element">The annotated element.</param>
            <param name="value">Value of the new annotation.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetAnnotationValues(Microsoft.Data.Edm.IEdmModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding})">
            <summary>
            Retrieves a set of annotation values. For each requested value, returns null if no annotation with the given name exists for the given element.
            </summary>
            <param name="model">The model in which to find the annotations.</param>
            <param name="annotations">The set of requested annotations.</param>
            <returns>Returns values that correspond to the provided annotations. A value is null if no annotation with the given name exists for the given element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.SetAnnotationValues(Microsoft.Data.Edm.IEdmModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationBinding})">
            <summary>
            Sets a set of annotation values. If a supplied value is null, no annotation is added and an existing annotation with the same name is removed.
            </summary>
            <param name="model">The model in which to set the annotations.</param>
            <param name="annotations">The annotations to set.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.DirectValueAnnotations(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets the direct value annotations for an element.
            </summary>
            <param name="model">The model containing the annotations.</param>
            <param name="element">The annotated element.</param>
            <returns>The immediate value annotations of the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.Location(Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets the location of this element.
            </summary>
            <param name="item">Reference to the calling object.</param>
            <returns>The location of the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.VocabularyAnnotations(Microsoft.Data.Edm.IEdmVocabularyAnnotatable,Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Gets an annotatable element's vocabulary annotations as seen from a particular model.
            </summary>
            <param name="element">Reference to the calling object.</param>
            <param name="model">Model to check for annotations.</param>
            <returns>Annotations attached to the element by the model or by models referenced by the model.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FullName(Microsoft.Data.Edm.IEdmSchemaElement)">
            <summary>
            Gets the full name of the element.
            </summary>
            <param name="element">Reference to the calling object.</param>
            <returns>The full name of the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.EntitySets(Microsoft.Data.Edm.IEdmEntityContainer)">
            <summary>
            Returns entity sets belonging to an IEdmEntityContainer.
            </summary>
            <param name="container">Reference to the calling object.</param>
            <returns>Entity sets belonging to an IEdmEntityContainer.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FunctionImports(Microsoft.Data.Edm.IEdmEntityContainer)">
            <summary>
            Returns function imports belonging to an IEdmEntityContainer.
            </summary>
            <param name="container">Reference to the calling object.</param>
            <returns>Function imports belonging to an IEdmEntityContainer.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.TypeKind(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Gets the type kind of the type references definition.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The type kind of the reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FullName(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Gets the full name of the definition referred to by the type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The full name of this references definition.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.PrimitiveDefinition(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Gets the definition of this primitive type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>Definition of this primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.PrimitiveKind(Microsoft.Data.Edm.IEdmPrimitiveTypeReference)">
            <summary>
            Gets the primitive kind of the definition referred to by this type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>Primitive kind of the definition of this reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.Properties(Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Gets all properties of the structured type definition and its base types.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>Properties of this type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.DeclaredStructuralProperties(Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Gets all structural properties declared in the IEdmStructuredTypeDefinition.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>All structural properties declared in the IEdmStructuredTypeDefinition.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.StructuralProperties(Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Gets the structural properties declared in this type definition and all base types.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The structural properties declared in this type definition and all base types.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.StructuredDefinition(Microsoft.Data.Edm.IEdmStructuredTypeReference)">
            <summary>
            Gets the definition of this structured type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The definition of this structured type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.IsAbstract(Microsoft.Data.Edm.IEdmStructuredTypeReference)">
            <summary>
            Returns true if the definition of this reference is abstract.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>If the definition of this reference is abstract.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.IsOpen(Microsoft.Data.Edm.IEdmStructuredTypeReference)">
            <summary>
            Returns true if the definition of this reference is open.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>If the definition of this reference is open.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.BaseType(Microsoft.Data.Edm.IEdmStructuredTypeReference)">
            <summary>
            Returns the base type of the definition of this reference. 
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The base type of the definition of this reference. </returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.DeclaredStructuralProperties(Microsoft.Data.Edm.IEdmStructuredTypeReference)">
            <summary>
            Gets all structural properties declared in the definition of this reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>All structural properties declared in the definition of this reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.StructuralProperties(Microsoft.Data.Edm.IEdmStructuredTypeReference)">
            <summary>
            Gets all structural properties declared in the definition of this reference and all its base types.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>All structural properties declared in the definition of this reference and all its base types.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindProperty(Microsoft.Data.Edm.IEdmStructuredTypeReference,System.String)">
            <summary>
            Finds a property from the definition of this reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <param name="name">Name of the property to find.</param>
            <returns>The requested property if it exists. Otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.BaseEntityType(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Gets the base type of this entity type definition.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The base type of this entity type definition.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.DeclaredNavigationProperties(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Gets the navigation properties declared in this entity definition.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The navigation properties declared in this entity definition.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.NavigationProperties(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Get the navigation properties declared in this entity type and all base types.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The navigation properties declared in this entity type and all base types.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.Key(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Gets the declared key of the most defined entity with a declared key present.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>Key of this type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.HasDeclaredKeyProperty(Microsoft.Data.Edm.IEdmEntityType,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Checks whether the given entity type has the <paramref name="property"/> as one of the key properties.
            </summary>
            <param name="entityType">Given entity type.</param>
            <param name="property">Property to be searched for.</param>
            <returns><c>true</c> if the type or base types has given property declared as key. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.EntityDefinition(Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Gets the definition of this entity reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The definition of this entity reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.BaseEntityType(Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Gets the base type of the definition of this reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The base type of the definition of this reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.Key(Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Gets the entity key of the definition of this reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The entity key of the definition of this reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.NavigationProperties(Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Gets the navigation properties declared in the definition of this reference and its base types.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The navigation properties declared in the definition of this reference and its base types.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.DeclaredNavigationProperties(Microsoft.Data.Edm.IEdmEntityTypeReference)">
            <summary>
            Gets the navigation properties declared in the definition of this reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The navigation properties declared in the definition of this reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindNavigationProperty(Microsoft.Data.Edm.IEdmEntityTypeReference,System.String)">
            <summary>
            Finds a navigation property declared in the definition of this reference by name.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <param name="name">Name of the navigation property to find.</param>
            <returns>The requested navigation property if it exists. Otherwise, null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.BaseComplexType(Microsoft.Data.Edm.IEdmComplexType)">
            <summary>
            Gets the base type of this references definition.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The base type of this references definition.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.ComplexDefinition(Microsoft.Data.Edm.IEdmComplexTypeReference)">
            <summary>
            Gets the definition of this reference typed as an IEdmComplexTypeDefinition.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The definition of this reference typed as an IEdmComplexTypeDefinition.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.BaseComplexType(Microsoft.Data.Edm.IEdmComplexTypeReference)">
            <summary>
            Gets the base type of this reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The base type of this reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.EntityReferenceDefinition(Microsoft.Data.Edm.IEdmEntityReferenceTypeReference)">
            <summary>
            Gets the definition of this entity reference type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The definition of this entity reference type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.EntityType(Microsoft.Data.Edm.IEdmEntityReferenceTypeReference)">
            <summary>
            Gets the entity type referred to by the definition of this entity reference type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The entity type referred to by the definition of this entity reference type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.CollectionDefinition(Microsoft.Data.Edm.IEdmCollectionTypeReference)">
            <summary>
            Gets the definition of this collection reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The definition of this collection reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.ElementType(Microsoft.Data.Edm.IEdmCollectionTypeReference)">
            <summary>
            Gets the element type of the definition of this collection reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The element type of the definition of this collection reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.EnumDefinition(Microsoft.Data.Edm.IEdmEnumTypeReference)">
            <summary>
            Gets the definition of this enumeration reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The definition of this enumeration reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.Multiplicity(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the multiplicity of this end of a bidirectional relationship between this navigation property and its partner.
            </summary>
            <param name="property">Reference to the calling object.</param>
            <returns>The multiplicity of this end of the relationship.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.ToEntityType(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the entity type targeted by this navigation property.
            </summary>
            <param name="property">Reference to the calling object.</param>
            <returns>The entity type targeted by this navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.DeclaringEntityType(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Gets the entity type declaring this navigation property.
            </summary>
            <param name="property">Reference to the calling object.</param>
            <returns>The entity type that declares this navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.RowDefinition(Microsoft.Data.Edm.IEdmRowTypeReference)">
            <summary>
            Gets the definition of this row type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The definition of this row type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindPropertyBinding(Microsoft.Data.Edm.Annotations.IEdmTypeAnnotation,Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Gets the binding of a property of the type term of a type annotation.
            </summary>
            <param name="annotation">Annotation to search.</param>
            <param name="property">Property to search for.</param>
            <returns>The binding of the property in the type annotation, or null if no binding exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindPropertyBinding(Microsoft.Data.Edm.Annotations.IEdmTypeAnnotation,System.String)">
            <summary>
            Gets the binding of a property of the type term of a type annotation.
            </summary>
            <param name="annotation">Annotation to search.</param>
            <param name="propertyName">Name of the property to search for.</param>
            <returns>The binding of the property in the type annotation, or null if no binding exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.ValueTerm(Microsoft.Data.Edm.Annotations.IEdmValueAnnotation)">
            <summary>
            Gets the value term of this value annotation.
            </summary>
            <param name="annotation">Reference to the calling object.</param>
            <returns>The value term of this value annotation.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.TryGetStaticEntitySet(Microsoft.Data.Edm.IEdmFunctionImport,Microsoft.Data.Edm.IEdmEntitySet@)">
            <summary>
            Analyzes <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/>.EntitySet expression and returns a static <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> reference if available.
            </summary>
            <param name="functionImport">The function import containing the entity set expression.</param>
            <param name="entitySet">The static entity set of the function import.</param>
            <returns>True if the entity set expression of the <paramref name="functionImport"/> contains a static reference to an <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/>, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.TryGetRelativeEntitySetPath(Microsoft.Data.Edm.IEdmFunctionImport,Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmFunctionParameter@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmNavigationProperty}@)">
            <summary>
            Analyzes <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/>.EntitySet expression and returns a relative path to an <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/> if available.
            The path starts with the <paramref name="parameter"/> and may have optional sequence of <see cref="T:Microsoft.Data.Edm.IEdmNavigationProperty"/> and type casts segments.
            </summary>
            <param name="functionImport">The function import containing the entity set expression.</param>
            <param name="model">The model containing the function import.</param>
            <param name="parameter">The function import parameter from which the relative entity set path starts.</param>
            <param name="path">The optional sequence of navigation properties.</param>
            <returns>True if the entity set expression of the <paramref name="functionImport"/> contains a relative path an <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/>, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.FindProperty(Microsoft.Data.Edm.Expressions.IEdmRecordExpression,System.String)">
            <summary>
            Finds a property of a record expression.
            </summary>
            <param name="expression">The record expression.</param>
            <param name="name">Name of the property to find.</param>
            <returns>The property, if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.ExtensionMethods.GetPathSegmentEntityType(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            This method is only used for the function import entity set path parsing.
            </summary>
            <param name="segmentType">The type of the segment.</param>
            <returns>Non-null entity type that may be bad.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.CsdlWriter">
            <summary>
            Provides CSDL serialization services for EDM models.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.CsdlWriter.TryWriteCsdl(Microsoft.Data.Edm.IEdmModel,System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Outputs a CSDL artifact to the provided writer.
            </summary>
            <param name="model">Model to be written.</param>
            <param name="writer">XmlWriter the generated CSDL will be written to.</param>
            <param name="errors">Errors that prevented successful serialization, or no errors if serialization was successful. </param>
            <returns>A value indicating whether serialization was successful.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.CsdlWriter.TryWriteCsdl(Microsoft.Data.Edm.IEdmModel,System.Func{System.String,System.Xml.XmlWriter},System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Outputs a CSDL artifact to the provided writers.
            </summary>
            <param name="model">Model to be written.</param>
            <param name="writerProvider">A delegate that takes in a schema namespace name and returns an XmlWriter to write the schema to.</param>
            <param name="errors">Errors that prevented successful serialization, or no errors if serialization was successful. </param>
            <returns>A value indicating whether serialization was successful.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.CsdlReader">
            <summary>
            Provides CSDL parsing services for EDM models.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.CsdlReader.TryParse(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},Microsoft.Data.Edm.IEdmModel@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
             Returns an IEdmModel for the given CSDL artifacts.
            </summary>
            <param name="readers">Collection of XmlReaders containing the CSDL artifacts.</param>
            <param name="model">The model generated by parsing.</param>
            <param name="errors">Errors reported while parsing.</param>
            <returns>Success of the parse operation.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.CsdlReader.TryParse(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.IEdmModel@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
             Returns an IEdmModel for the given CSDL artifacts.
            </summary>
            <param name="readers">Collection of XmlReaders containing the CSDL artifacts.</param>
            <param name="reference">Model to be references by the created model.</param>
            <param name="model">The model generated by parsing.</param>
            <param name="errors">Errors reported while parsing.</param>
            <returns>Success of the parse operation.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Csdl.CsdlReader.TryParse(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmModel},Microsoft.Data.Edm.IEdmModel@,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
             Returns an IEdmModel for the given CSDL artifacts.
            </summary>
            <param name="readers">Collection of XmlReaders containing the CSDL artifacts.</param>
            <param name="references">Models to be references by the created model.</param>
            <param name="model">The model generated by parsing.</param>
            <param name="errors">Errors reported while parsing.</param>
            <returns>Success of the parse operation.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmPrimitiveTypeKind">
            <summary>
            Enumerates the kinds of Edm Primitives.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.None">
            <summary>
            Represents a primitive type of unknown kind.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Binary">
            <summary>
            Represents a Binary type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Boolean">
            <summary>
            Represents a Boolean type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Byte">
            <summary>
            Represents a Byte type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.DateTime">
            <summary>
            Represents a DateTime type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.DateTimeOffset">
            <summary>
            Represents a DateTimeOffset type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Decimal">
            <summary>
            Represents a Decimal type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Double">
            <summary>
            Represents a Double type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Guid">
            <summary>
            Represents a Guid type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Int16">
            <summary>
            Represents a Int16 type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Int32">
            <summary>
            Represents a Int32 type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Int64">
            <summary>
            Represents a Int64 type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.SByte">
            <summary>
            Represents a SByte type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Single">
            <summary>
            Represents a Single type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.String">
            <summary>
            Represents a String type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Stream">
            <summary>
            Represents a Stream type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Time">
            <summary>
            Represents a Time type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Geography">
            <summary>
            Represents an arbitrary Geography type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeographyPoint">
            <summary>
            Represents a geography Point type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeographyLineString">
            <summary>
            Represents a geography LineString type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeographyPolygon">
            <summary>
            Represents a geography Polygon type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeographyCollection">
            <summary>
            Represents a geography GeographyCollection type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeographyMultiPolygon">
            <summary>
            Represents a geography MultiPolygon type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeographyMultiLineString">
            <summary>
            Represents a geography MultiLineString type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeographyMultiPoint">
            <summary>
            Represents a geography MultiPoint type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.Geometry">
            <summary>
            Represents an arbitrary Geometry type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeometryPoint">
            <summary>
            Represents a geometry Point type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeometryLineString">
            <summary>
            Represents a geometry LineString type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeometryPolygon">
            <summary>
            Represents a geometry Polygon type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeometryCollection">
            <summary>
            Represents a geometry GeometryCollection type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeometryMultiPolygon">
            <summary>
            Represents a geometry MultiPolygon type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeometryMultiLineString">
            <summary>
            Represents a geometry MultiLineString type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPrimitiveTypeKind.GeometryMultiPoint">
            <summary>
            Represents a geometry MultiPoint type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmConcurrencyMode">
            <summary>
            Enumerates the EDM property concurrency modes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmConcurrencyMode.None">
            <summary>
            Denotes a property that should be used for optimistic concurrency checks.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmConcurrencyMode.Fixed">
            <summary>
            Denotes a property that should not be used for optimistic concurrency checks.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.Cache`2">
            <summary>
            Provides a caching mechanism for semantic properties.
            </summary>
            <typeparam name="TContainer">Type of the element that contains the cached property</typeparam>
            <typeparam name="TProperty">Type of the cached property</typeparam>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.CacheHelper">
            <summary>
            Helper for Cache class.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmContainerElementKind">
            <summary>
            Defines EDM container element types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmContainerElementKind.None">
            <summary>
            Represents an element where the container kind is unknown or in error.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmContainerElementKind.EntitySet">
            <summary>
            Represents an element implementing <see cref="T:Microsoft.Data.Edm.IEdmEntitySet"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmContainerElementKind.FunctionImport">
            <summary>
            Represents an element implementing <see cref="T:Microsoft.Data.Edm.IEdmFunctionImport"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmFunctionParameterMode">
            <summary>
            Enumerates the modes of parameters of EDM functions.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmFunctionParameterMode.None">
            <summary>
            Denotes that a parameter with an unknown or error directionality.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmFunctionParameterMode.In">
            <summary>
            Denotes that a parameter is used for input.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmFunctionParameterMode.Out">
            <summary>
            Denotes that a parameter is used for output.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmFunctionParameterMode.InOut">
            <summary>
            Denotes that a parameter is used for input and output.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmMultiplicity">
            <summary>
            Enumerates the multiplicities of EDM navigation properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmMultiplicity.Unknown">
            <summary>
            The Multiplicity of the association end is unknown.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmMultiplicity.ZeroOrOne">
            <summary>
            The Multiplicity of the association end is zero or one.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmMultiplicity.One">
            <summary>
            The Multiplicity of the association end is one.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmMultiplicity.Many">
            <summary>
            The Multiplicity of the association end is many.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmOnDeleteAction">
            <summary>
            Enumerates the actions EDM can apply on deletes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmOnDeleteAction.None">
            <summary>
            Take no action on delete.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmOnDeleteAction.Cascade">
            <summary>
            On delete also delete items on the other end of the association.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmPropertyKind">
            <summary>
            Defines EDM property types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPropertyKind.Structural">
            <summary>
            Represents a property implementing <see cref="T:Microsoft.Data.Edm.IEdmStructuralProperty"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPropertyKind.Navigation">
            <summary>
            Represents a property implementing <see cref="T:Microsoft.Data.Edm.IEdmNavigationProperty"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmPropertyKind.None">
            <summary>
            Represents a property with an unknown or error kind.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmSchemaElementKind">
            <summary>
            Defines EDM schema element types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmSchemaElementKind.None">
            <summary>
            Represents a schema element with unknown or error kind.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmSchemaElementKind.TypeDefinition">
            <summary>
            Represents a schema element implementing <see cref="T:Microsoft.Data.Edm.IEdmSchemaType"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmSchemaElementKind.Function">
            <summary>
            Represents a schema element implementing <see cref="T:Microsoft.Data.Edm.IEdmFunction"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmSchemaElementKind.ValueTerm">
            <summary>
            Represents a schema element implementing <see cref="T:Microsoft.Data.Edm.IEdmValueTerm"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmSchemaElementKind.EntityContainer">
            <summary>
            Represents a schema element implementing <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/>
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmTypeKind">
            <summary>
            Defines EDM metatypes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTypeKind.None">
            <summary>
            Represents a type with an unknown or error kind.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTypeKind.Primitive">
            <summary>
            Represents a type implementing <see cref="T:Microsoft.Data.Edm.IEdmPrimitiveType"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTypeKind.Entity">
            <summary>
            Represents a type implementing <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTypeKind.Complex">
            <summary>
            Represents a type implementing <see cref="T:Microsoft.Data.Edm.IEdmComplexType"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTypeKind.Row">
            <summary>
            Represents a type implementing <see cref="T:Microsoft.Data.Edm.IEdmRowType"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTypeKind.Collection">
            <summary>
            Represents a type implementing <see cref="T:Microsoft.Data.Edm.IEdmCollectionType"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTypeKind.EntityReference">
            <summary>
            Represents a type implementing <see cref="T:Microsoft.Data.Edm.IEdmEntityReferenceType"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.EdmTypeKind.Enum">
            <summary>
            Represents a type implementing <see cref="T:Microsoft.Data.Edm.IEdmEnumType"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.IDependencyTrigger">
            <summary>
            Interface describing anything that can be depended upon in tracking semantic changes in an EDM model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.IDependent">
            <summary>
            Interface describing anything that can be dependent on a dependency trigger in tracking semantic changes in an EDM model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Internal.IFlushCaches">
            <summary>
            Interface describing anything that can have cached data that might need flushing.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmComplexType">
            <summary>
            Represents a definition of an EDM complex type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmStructuredType">
            <summary>
            Common base class for definitions of EDM structured types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuredType.#ctor(System.Boolean,System.Boolean,Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmStructuredType"/> class.
            </summary>
            <param name="isAbstract">Denotes a structured type that cannot be instantiated.</param>
            <param name="isOpen">Denotes if the type is open.</param>
            <param name="baseStructuredType">Base type of the type</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuredType.AddProperty(Microsoft.Data.Edm.IEdmProperty)">
            <summary>
            Adds the <paramref name="property"/> to this type.
            <see cref="P:Microsoft.Data.Edm.IEdmProperty.DeclaringType"/> of the <paramref name="property"/> must be this type.
            </summary>
            <param name="property">The property being added.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuredType.AddStructuralProperty(System.String,Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Creates and adds a nullable structural property to this type.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <returns>Created structural property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuredType.AddStructuralProperty(System.String,Microsoft.Data.Edm.EdmPrimitiveTypeKind,System.Boolean)">
            <summary>
            Creates and adds a nullable structural property to this type.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="isNullable">Flag specifying if the property is nullable.</param>
            <returns>Created structural property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuredType.AddStructuralProperty(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates and adds a structural property to this type.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <returns>Created structural property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuredType.AddStructuralProperty(System.String,Microsoft.Data.Edm.IEdmTypeReference,System.String,Microsoft.Data.Edm.EdmConcurrencyMode)">
            <summary>
            Creates and adds a structural property to this type.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">The default value of this property.</param>
            <param name="concurrencyMode">The concurrency mode of this property.</param>
            <returns>Created structural property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuredType.FindProperty(System.String)">
            <summary>
            Searches for a structural or navigation property with the given name in this type and all base types and returns null if no such property exists.
            </summary>
            <param name="name">The name of the property being found.</param>
            <returns>The requested property, or null if no such property exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuredType.ComputePropertiesDictionary">
            <summary>
            Computes the the cached dictionary of properties for this type definition.
            </summary>
            <returns>Dictionary of properties keyed by their name.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStructuredType.IsAbstract">
            <summary>
            Gets a value indicating whether this type is abstract.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStructuredType.IsOpen">
            <summary>
            Gets a value indicating whether this type is open.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStructuredType.DeclaredProperties">
            <summary>
            Gets the properties declared immediately within this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStructuredType.BaseType">
            <summary>
            Gets the base type of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStructuredType.PropertiesDictionary">
            <summary>
            Gets a dictionary of the properties in this type definition for faster lookup.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmComplexType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmComplexType"/> class.
            </summary>
            <param name="namespaceName">The namespace this type belongs to.</param>
            <param name="name">The name of this type within its namespace.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmComplexType.#ctor(System.String,System.String,Microsoft.Data.Edm.IEdmComplexType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmComplexType"/> class.
            Note: Complex type inheritance is not supported in EDM version 3.0 and above.
            </summary>
            <param name="namespaceName">The namespace this type belongs to.</param>
            <param name="name">The name of this type within its namespace.</param>
            <param name="baseType">The base type of this complex type.</param>
            <param name="isAbstract">Denotes whether this complex type is abstract.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmComplexType.SchemaElementKind">
            <summary>
            Gets the schema element kind of this element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmComplexType.Namespace">
            <summary>
            Gets the namespace of this element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmComplexType.Name">
            <summary>
            Gets the name of this element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmComplexType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmComplexType.TermKind">
            <summary>
            Gets the kind of this term.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmDocumentation">
            <summary>
            Represents an EDM documentation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmDocumentation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmDocumentation"/> class.
            </summary>
            <param name="summary">Summary of the documentation.</param>
            <param name="description">The documentation contents.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmDocumentation.Summary">
            <summary>
            Gets summary of this documentation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmDocumentation.Description">
            <summary>
            Gets documentation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEntityContainer">
            <summary>
            Represents an EDM entity container.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityContainer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEntityContainer"/> class.
            </summary>
            <param name="namespaceName">Namespace of the entity container.</param>
            <param name="name">Name of the entity container.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityContainer.AddElement(Microsoft.Data.Edm.IEdmEntityContainerElement)">
            <summary>
            Adds an entity container element to this entity container.
            </summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityContainer.AddEntitySet(System.String,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Creates and adds an entity set to this entity container.
            </summary>
            <param name="name">Name of the entity set.</param>
            <param name="elementType">The entity type of the elements in this entity set.</param>
            <returns>Created entity set.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityContainer.AddFunctionImport(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates and adds a function import to this entity container.
            </summary>
            <param name="name">Name of the function import.</param>
            <param name="returnType">Return type of the function import.</param>
            <returns>Created function import.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityContainer.AddFunctionImport(System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Creates and adds a function import to this entity container.
            </summary>
            <param name="name">Name of the function import.</param>
            <param name="returnType">Return type of the function import.</param>
            <param name="entitySet">An entity set containing entities returned by this function import. 
            The two expression kinds supported are <see cref="T:Microsoft.Data.Edm.Expressions.IEdmEntitySetReferenceExpression"/> and <see cref="T:Microsoft.Data.Edm.Expressions.IEdmPathExpression"/>.</param>
            <returns>Created function import.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityContainer.AddFunctionImport(System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.Expressions.IEdmExpression,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates and adds a function import to this entity container.
            </summary>
            <param name="name">Name of the function import.</param>
            <param name="returnType">Return type of the function import.</param>
            <param name="entitySet">An entity set containing entities returned by this function import. 
            The two expression kinds supported are <see cref="T:Microsoft.Data.Edm.Expressions.IEdmEntitySetReferenceExpression"/> and <see cref="T:Microsoft.Data.Edm.Expressions.IEdmPathExpression"/>.</param>
            <param name="sideEffecting">A value indicating whether this function import has side-effects.</param>
            <param name="composable">A value indicating whether this functon import can be composed inside expressions.</param>
            <param name="bindable">A value indicating whether this function import can be used as an extension method for the type of the first parameter of this function import.</param>
            <returns>Created function import.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityContainer.FindEntitySet(System.String)">
            <summary>
            Searches for an entity set with the given name in this entity container and returns null if no such set exists.
            </summary>
            <param name="setName">The name of the element being found.</param>
            <returns>The requested element, or null if the element does not exist.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityContainer.FindFunctionImports(System.String)">
            <summary>
            Searches for function imports with the given name in this entity container and returns null if no such function import exists.
            </summary>
            <param name="functionName">The name of the function import being found.</param>
            <returns>A group of the requested function imports, or an empty enumerable if no such function import exists.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityContainer.Elements">
            <summary>
            Gets a collection of the elements of this entity container.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityContainer.Namespace">
            <summary>
            Gets the namespace of this entity container.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityContainer.Name">
            <summary>
            Gets the name of this entity container.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityContainer.SchemaElementKind">
            <summary>
            Gets the kind of this schema element.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEntityReferenceType">
            <summary>
            Represents a definition of an EDM entity reference type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityReferenceType.#ctor(Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEntityReferenceType"/> class.
            </summary>
            <param name="entityType">The entity referred to by this entity reference.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityReferenceType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityReferenceType.EntityType">
            <summary>
            Gets the entity type pointed to by this entity reference.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEntitySet">
            <summary>
            Represents an EDM entity set.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntitySet.#ctor(Microsoft.Data.Edm.IEdmEntityContainer,System.String,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEntitySet"/> class.
            </summary>
            <param name="container">An <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> containing this entity set.</param>
            <param name="name">Name of the entity set.</param>
            <param name="elementType">The entity type of the elements in this entity set.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntitySet.AddNavigationTarget(Microsoft.Data.Edm.IEdmNavigationProperty,Microsoft.Data.Edm.IEdmEntitySet)">
            <summary>
            Adds a navigation target, specifying the destination entity set of a navigation property of an entity in this entity set.
            </summary>
            <param name="property">The navigation property the target is being set for.</param>
            <param name="target">The destination entity set of the specified navigation property.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntitySet.FindNavigationTarget(Microsoft.Data.Edm.IEdmNavigationProperty)">
            <summary>
            Finds the entity set that a navigation property targets.
            </summary>
            <param name="property">The navigation property.</param>
            /// <returns>The entity set that the navigation propertion targets, or null if no such entity set exists.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntitySet.ElementType">
            <summary>
            Gets the entity type contained in this entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntitySet.ContainerElementKind">
            <summary>
            Gets the kind of element of this container element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntitySet.Container">
            <summary>
            Gets the container of this entity set.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntitySet.NavigationTargets">
            <summary>
            Gets the navigation targets of this entity set.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEntityType">
            <summary>
            Represents a definition of an EDM entity type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEntityType"/> class.
            </summary>
            <param name="namespaceName">Namespace the entity belongs to.</param>
            <param name="name">Name of the entity.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.#ctor(System.String,System.String,Microsoft.Data.Edm.IEdmEntityType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEntityType"/> class.
            </summary>
            <param name="namespaceName">Namespace the entity belongs to.</param>
            <param name="name">Name of the entity.</param>
            <param name="baseType">The base type of this entity type.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.#ctor(System.String,System.String,Microsoft.Data.Edm.IEdmEntityType,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEntityType"/> class.
            </summary>
            <param name="namespaceName">Namespace the entity belongs to.</param>
            <param name="name">Name of the entity.</param>
            <param name="baseType">The base type of this entity type.</param>
            <param name="isAbstract">Denotes an entity that cannot be instantiated.</param>
            <param name="isOpen">Denotes if the type is open.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.AddKeys(Microsoft.Data.Edm.IEdmStructuralProperty[])">
            <summary>
            Adds the <paramref name="keyProperties"/> to the key of this entity type.
            </summary>
            <param name="keyProperties">The key properties.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.AddKeys(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmStructuralProperty})">
            <summary>
            Adds the <paramref name="keyProperties"/> to the key of this entity type.
            </summary>
            <param name="keyProperties">The key properties.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.AddUnidirectionalNavigation(Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo)">
            <summary>
            Creates and adds a unidirectional navigation property to this type.
            Default partner property is created, but not added to the navigation target type.
            </summary>
            <param name="propertyInfo">Information to create the navigation property.</param>
            <returns>Created navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.AddUnidirectionalNavigation(Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo,Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo)">
            <summary>
            Creates and adds a unidirectional navigation property to this type.
            Navigation property partner is created, but not added to the navigation target type.
            </summary>
            <param name="propertyInfo">Information to create the navigation property.</param>
            <param name="partnerInfo">Information to create the partner navigation property.</param>
            <returns>Created navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.AddBidirectionalNavigation(Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo,Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo)">
            <summary>
            Creates and adds a navigation property to this type and adds its navigation partner to the navigation target type.
            </summary>
            <param name="propertyInfo">Information to create the navigation property.</param>
            <param name="partnerInfo">Information to create the partner navigation property.</param>
            <returns>Created navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityType.FixUpDefaultPartnerInfo(Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo,Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo)">
            <summary>
            The puspose of this method is to make sure that some of the <paramref name="partnerInfo"/> fields are set to valid partner defaults.
            For example if <paramref name="partnerInfo"/>.Target is null, it will be set to this entity type. If <paramref name="partnerInfo"/>.TargetMultiplicity
            is unknown, it will be set to 0..1, etc.
            Whenever this method applies new values to <paramref name="partnerInfo"/>, it will return a copy of it (thus won't modify the original).
            If <paramref name="partnerInfo"/> is null, a new info object will be produced.
            </summary>
            <param name="propertyInfo">Primary navigation property info.</param>
            <param name="partnerInfo">Partner navigation property info. May be null.</param>
            <returns>Partner info.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityType.DeclaredKey">
            <summary>
            Gets the structural properties of the entity type that make up the entity key.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityType.SchemaElementKind">
            <summary>
            Gets the kind of this schema element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityType.Namespace">
            <summary>
            Gets the namespace this schema element belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityType.Name">
            <summary>
            Gets the name of this element.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityType.TermKind">
            <summary>
            Gets the term kind of the entity type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmFunction">
            <summary>
            Represents an EDM function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmFunctionBase">
            <summary>
            Represents a base class for EDM functions and function imports.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionBase.#ctor(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmFunctionBase"/> class.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="returnType">The return type of the function.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionBase.FindParameter(System.String)">
            <summary>
            Searches for a parameter with the given name in this function and returns null if no such parameter exists.
            </summary>
            <param name="name">The name of the parameter to be found.</param>
            <returns>The requested parameter, or null if no such parameter exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionBase.AddParameter(System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Creates and adds a parameter to this function (as the last parameter).
            </summary>
            <param name="name">The name of the parameter being added.</param>
            <param name="type">The type of the parameter being added.</param>
            <returns>Created parameter.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionBase.AddParameter(System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.EdmFunctionParameterMode)">
            <summary>
            Creates and adds a parameter to this function (as the last parameter).
            </summary>
            <param name="name">The name of the parameter being added.</param>
            <param name="type">The type of the parameter being added.</param>
            <param name="mode">Mode of the parameter.</param>
            <returns>Created parameter.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionBase.AddParameter(Microsoft.Data.Edm.IEdmFunctionParameter)">
            <summary>
            Adds a parameter to this function (as the last parameter).
            </summary>
            <param name="parameter">The parameter being added.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionBase.ReturnType">
            <summary>
            Gets the return type of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionBase.Parameters">
            <summary>
            Gets the parameters of this function.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunction.#ctor(System.String,System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmFunction"/> class.
            </summary>
            <param name="namespaceName">Namespace of the function.</param>
            <param name="name">Name of the function.</param>
            <param name="returnType">Return type of the function.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunction.#ctor(System.String,System.String,Microsoft.Data.Edm.IEdmTypeReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmFunction"/> class.
            </summary>
            <param name="namespaceName">Namespace of the function.</param>
            <param name="name">Name of the function.</param>
            <param name="returnType">Return type of the function.</param>
            <param name="definingExpression">Defining expression of the function (for example an eSQL expression).</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunction.DefiningExpression">
            <summary>
            Gets the defining expression of this function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunction.SchemaElementKind">
            <summary>
            Gets the element kind of this function, which is always Function.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunction.Namespace">
            <summary>
            Gets the namespace of this function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmFunctionImport">
            <summary>
            Represents an EDM function import.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionImport.#ctor(Microsoft.Data.Edm.IEdmEntityContainer,System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.Edm.Library.EdmFunctionImport"/> class (side-effecting, non-composable, non-bindable).
            </summary>
            <param name="container">An <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> containing this function import.</param>
            <param name="name">Name of the function import.</param>
            <param name="returnType">Return type of the function import.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionImport.#ctor(Microsoft.Data.Edm.IEdmEntityContainer,System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.Expressions.IEdmExpression)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.Edm.Library.EdmFunctionImport"/> class (side-effecting, non-composable, non-bindable).
            </summary>
            <param name="container">An <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> containing this function import.</param>
            <param name="name">Name of the function import.</param>
            <param name="returnType">Return type of the function import.</param>
            <param name="entitySet">An entity set containing entities returned by this function import. 
            The two expression kinds supported are <see cref="T:Microsoft.Data.Edm.Expressions.IEdmEntitySetReferenceExpression"/> and <see cref="T:Microsoft.Data.Edm.Expressions.IEdmPathExpression"/>.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionImport.#ctor(Microsoft.Data.Edm.IEdmEntityContainer,System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.Expressions.IEdmExpression,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Data.Edm.Library.EdmFunctionImport"/> class.
            </summary>
            <param name="container">An <see cref="T:Microsoft.Data.Edm.IEdmEntityContainer"/> containing this function import.</param>
            <param name="name">Name of the function import.</param>
            <param name="returnType">Return type of the function import.</param>
            <param name="entitySet">An entity set containing entities returned by this function import. 
            The two expression kinds supported are <see cref="T:Microsoft.Data.Edm.Expressions.IEdmEntitySetReferenceExpression"/> and <see cref="T:Microsoft.Data.Edm.Expressions.IEdmPathExpression"/>.</param>
            <param name="isSideEffecting">A value indicating whether this function import has side-effects.</param>
            <param name="isComposable">A value indicating whether this functon import can be composed inside expressions.</param>
            <param name="isBindable">A value indicating whether this function import can be used as an extension method for the type of the first parameter of this function import.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionImport.IsSideEffecting">
            <summary>
            Gets a value indicating whether this function import has side-effects.
            <see cref="P:Microsoft.Data.Edm.Library.EdmFunctionImport.IsSideEffecting"/> cannot be set to true if <see cref="P:Microsoft.Data.Edm.Library.EdmFunctionImport.IsComposable"/> is set to true.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionImport.IsComposable">
            <summary>
            Gets a value indicating whether this functon import can be composed inside expressions.
            <see cref="P:Microsoft.Data.Edm.Library.EdmFunctionImport.IsComposable"/> cannot be set to true if <see cref="P:Microsoft.Data.Edm.Library.EdmFunctionImport.IsSideEffecting"/> is set to true.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionImport.IsBindable">
            <summary>
            Gets a value indicating whether this function import can be used as an extension method for the type of the first parameter of this function import.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionImport.EntitySet">
            <summary>
            Gets the entity set containing entities returned by this function import.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionImport.ContainerElementKind">
            <summary>
            Gets the kind of this function, which is always FunctionImport.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionImport.Container">
            <summary>
            Gets the container of this function.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmFunctionParameter">
            <summary>
            Represents an EDM function parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionParameter.#ctor(Microsoft.Data.Edm.IEdmFunctionBase,System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmFunctionParameter"/> class.
            </summary>
            <param name="declaringFunction">Declaring function of the parameter.</param>
            <param name="name">Name of the parameter.</param>
            <param name="type">Type of the parameter.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmFunctionParameter.#ctor(Microsoft.Data.Edm.IEdmFunctionBase,System.String,Microsoft.Data.Edm.IEdmTypeReference,Microsoft.Data.Edm.EdmFunctionParameterMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmFunctionParameter"/> class.
            </summary>
            <param name="declaringFunction">Declaring function of the parameter.</param>
            <param name="name">Name of the parameter.</param>
            <param name="type">Type of the parameter.</param>
            <param name="mode">Mode of the parameter.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionParameter.Type">
            <summary>
            Gets the type of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionParameter.DeclaringFunction">
            <summary>
            Gets the function or function import that declared this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmFunctionParameter.Mode">
            <summary>
            Gets the mode of this parameter.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmModel">
            <summary>
            Represents an EDM model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmModel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModel.AddReferencedModel(Microsoft.Data.Edm.IEdmModel)">
            <summary>
            Adds a model reference to this model.
            </summary>
            <param name="model">The model to reference.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModel.AddElement(Microsoft.Data.Edm.IEdmSchemaElement)">
            <summary>
            Adds a schema element to this model.
            </summary>
            <param name="element">Element to be added.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModel.AddElements(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmSchemaElement})">
            <summary>
            Adds a collection of schema elements to this model.
            </summary>
            <param name="newElements">Elements to be added.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModel.AddVocabularyAnnotation(Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation)">
            <summary>
            Adds a vocabulary annotation to this model.
            </summary>
            <param name="annotation">The annotation to be added.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModel.FindDeclaredVocabularyAnnotations(Microsoft.Data.Edm.IEdmVocabularyAnnotatable)">
            <summary>
            Searches for vocabulary annotations specified by this model.
            </summary>
            <param name="element">The annotated element.</param>
            <returns>The vocabulary annotations for the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmModel.FindDirectlyDerivedTypes(Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Finds a list of types that derive directly from the supplied type.
            </summary>
            <param name="baseType">The base type that derived types are being searched for.</param>
            <returns>A list of types from this model that derive directly from the given type.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmModel.SchemaElements">
            <summary>
            Gets the collection of schema elements that are contained in this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmModel.VocabularyAnnotations">
            <summary>
            Gets the collection of vocabulary annotations that are contained in this model.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmNavigationProperty">
            <summary>
            Represents an EDM navigation property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmProperty">
            <summary>
            Represents an EDM property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmProperty.#ctor(Microsoft.Data.Edm.IEdmStructuredType,System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmProperty"/> class.
            </summary>
            <param name="declaringType">The type that declares this property.</param>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmProperty.Type">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmProperty.DeclaringType">
            <summary>
            Gets the type that this property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmProperty.PropertyKind">
            <summary>
            Gets the kind of this property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmNavigationProperty.CreateNavigationPropertyWithPartner(Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo,Microsoft.Data.Edm.Library.EdmNavigationPropertyInfo)">
            <summary>
            Creates two navigation properties representing an association between two entity types.
            </summary>
            <param name="propertyInfo">Information to create the navigation property.</param>
            <param name="partnerInfo">Information to create the partner navigation property.</param>
            <returns>Created navigation property.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmNavigationProperty.CreateNavigationPropertyWithPartner(System.String,Microsoft.Data.Edm.IEdmTypeReference,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmStructuralProperty},System.Boolean,Microsoft.Data.Edm.EdmOnDeleteAction,System.String,Microsoft.Data.Edm.IEdmTypeReference,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.IEdmStructuralProperty},System.Boolean,Microsoft.Data.Edm.EdmOnDeleteAction)">
            <summary>
            Creates two navigation properties representing an association between two entity types.
            </summary>
            <param name="propertyName">Navigation property name.</param>
            <param name="propertyType">Type of the navigation property.</param>
            <param name="dependentProperties">Dependent properties of the navigation source.</param>
            <param name="containsTarget">A value indicating whether the navigation source logically contains the navigation target.</param>
            <param name="onDelete">Action to take upon deletion of an instance of the navigation source.</param>
            <param name="partnerPropertyName">Navigation partner property name.</param>
            <param name="partnerPropertyType">Type of the navigation partner property.</param>
            <param name="partnerDependentProperties">Dependent properties of the navigation target.</param>
            <param name="partnerContainsTarget">A value indicating whether the navigation target logically contains the navigation source.</param>
            <param name="partnerOnDelete">Action to take upon deletion of an instance of the navigation target.</param>
            <returns>Navigation property.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationProperty.PropertyKind">
            <summary>
            Gets the kind of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationProperty.ContainsTarget">
            <summary>
            Gets a value indicating whether the navigation target is contained inside the navigation source.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationProperty.DependentProperties">
            <summary>
            Gets the dependent properties of the association this navigation property expresses.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationProperty.IsPrincipal">
            <summary>
            Gets a value indicating whether this navigation property is from the principal end of the association.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationProperty.DeclaringEntityType">
            <summary>
            Gets the entity type that this navigation property belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationProperty.OnDelete">
            <summary>
            Gets the action to take when an instance of the declaring type is deleted.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmNavigationProperty.Partner">
            <summary>
            Gets the partner of this navigation property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmIntegerConstant">
            <summary>
            Represents an EDM integer constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmIntegerConstant.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmIntegerConstant"/> class.
            </summary>
            <param name="value">Integer value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmIntegerConstant.#ctor(Microsoft.Data.Edm.IEdmPrimitiveTypeReference,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmIntegerConstant"/> class.
            </summary>
            <param name="type">Type of the integer.</param>
            <param name="value">Integer value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmIntegerConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmIntegerConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmIntegerConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmPropertyValue">
            <summary>
            Represents a value of an EDM property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmPropertyValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmPropertyValue"/> class with non-initialized <see cref="P:Microsoft.Data.Edm.Library.Values.EdmPropertyValue.Value"/> property.
            This constructor allows setting <see cref="P:Microsoft.Data.Edm.Library.Values.EdmPropertyValue.Value"/> property once after <see cref="T:Microsoft.Data.Edm.Library.Values.EdmPropertyValue"/> has been constructed.
            </summary>
            <param name="name">Name of the property for which this provides a value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmPropertyValue.#ctor(System.String,Microsoft.Data.Edm.Values.IEdmValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmPropertyValue"/> class.
            This constructor will not allow changing <see cref="P:Microsoft.Data.Edm.Library.Values.EdmPropertyValue.Value"/> property after the EdmPropertyValue instance has been constructed.
            </summary>
            <param name="name">Name of the property for which this provides a value.</param>
            <param name="value">Value of the property.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmPropertyValue.Name">
            <summary>
            Gets the name of the property for which this provides a value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmPropertyValue.Value">
            <summary>
            Gets or sets the value of the property.
            The value can be initialized only once either using the <see cref="M:Microsoft.Data.Edm.Library.Values.EdmPropertyValue.#ctor(System.String,Microsoft.Data.Edm.Values.IEdmValue)"/> constructor or by assigning value directly to this property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmStructuralProperty">
            <summary>
            Represents an EDM structural (i.e. non-navigation) property.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuralProperty.#ctor(Microsoft.Data.Edm.IEdmStructuredType,System.String,Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmStructuralProperty"/> class.
            </summary>
            <param name="declaringType">The type that declares this property.</param>
            <param name="name">Name of the property.</param>
            <param name="type">The type of the property.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmStructuralProperty.#ctor(Microsoft.Data.Edm.IEdmStructuredType,System.String,Microsoft.Data.Edm.IEdmTypeReference,System.String,Microsoft.Data.Edm.EdmConcurrencyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmStructuralProperty"/> class.
            </summary>
            <param name="declaringType">The type that declares this property.</param>
            <param name="name">Name of the property.</param>
            <param name="type">The type of the property.</param>
            <param name="defaultValueString">The default value of this property.</param>
            <param name="concurrencyMode">The concurrency mode of this property.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStructuralProperty.DefaultValueString">
            <summary>
            Gets the default value of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStructuralProperty.ConcurrencyMode">
            <summary>
            Gets the concurrency mode of this property.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmStructuralProperty.PropertyKind">
            <summary>
            Gets the kind of this property.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmRowType">
            <summary>
            Represents a definition of an EDM row type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmRowType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmRowType"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmRowType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmStringConstant">
            <summary>
            Represents an EDM string constant.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmStringConstant.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmStringConstant"/> class.
            </summary>
            <param name="value">String value represented by this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmStringConstant.#ctor(Microsoft.Data.Edm.IEdmStringTypeReference,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmStringConstant"/> class.
            </summary>
            <param name="type">Type of the string.</param>
            <param name="value">String value represented by this value.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmStringConstant.Value">
            <summary>
            Gets the definition of this value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmStringConstant.ExpressionKind">
            <summary>
            Gets the kind of this expression.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmStringConstant.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Values.EdmStructuredValue">
            <summary>
            Represents an EDM structured value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmStructuredValue.#ctor(Microsoft.Data.Edm.IEdmStructuredTypeReference,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Values.IEdmPropertyValue})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Values.EdmStructuredValue"/> class.
            </summary>
            <param name="type">Type that describes this value.</param>
            <param name="propertyValues">Child values of this value.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Values.EdmStructuredValue.FindPropertyValue(System.String)">
            <summary>
            Retrieves the value corresponding to the given property name. Returns null if no such value exists.
            </summary>
            <param name="propertyName">The property that describes the value being found.</param>
            <returns>The requested value, or null if no such value exists.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmStructuredValue.PropertyValues">
            <summary>
            Gets the property values of this structured value.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Values.EdmStructuredValue.ValueKind">
            <summary>
            Gets the kind of this value.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotation">
            <summary>
            Represents an EDM annotation with an immediate native value.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotation.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotation"/> class.
            </summary>
            <param name="namespaceUri">Namespace URI of the annotation.</param>
            <param name="name">Name of the annotation within the namespace.</param>
            <param name="value">Value of the annotation</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotation"/> class.
            </summary>
            <param name="namespaceUri">Namespace URI of the annotation.</param>
            <param name="name">Name of the annotation within the namespace.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotation.NamespaceUri">
            <summary>
            The namespace Uri of the annotation.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.Annotations.EdmDirectValueAnnotation.Value">
            <summary>
            Gets the value of this annotation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Csdl.Internal.CsdlSemantics.UnresolvedType">
            <summary>
            Represents information about an EDM type definition that failed to resolve.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmEntityReferenceTypeReference">
            <summary>
            Represents a reference to an EDM entity reference type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmEntityReferenceTypeReference.#ctor(Microsoft.Data.Edm.IEdmEntityReferenceType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmEntityReferenceTypeReference"/> class.
            </summary>
            <param name="entityReferenceType">The definition referred to by this reference.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmEntityReferenceTypeReference.EntityReferenceDefinition">
            <summary>
            Gets the entity reference definition to which this type refers.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmConstants">
            <summary>
            Contains constant values that apply to the EDM model, regardless of source (for CSDL/EDMX specific constants see <see cref="T:Microsoft.Data.Edm.Csdl.CsdlConstants"/>).
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.DocumentationUri">
            <summary>
            The URI of annotations that will be serialized as documentation elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.DocumentationAnnotation">
            <summary>
            The local name of annotations that will be serialized as documentation elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.InternalUri">
            <summary>
            The URI of annotations that are internal and will not be serialized.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.DataServiceVersion">
            <summary>
            The local name of the annotation that stores the data services version attribute for EDMX serialization.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.MaxDataServiceVersion">
            <summary>
            The local name of the annotation that stores the max data services version attribute for EDMX serialization.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.EdmVersionAnnotation">
            <summary>
            The local name of the annotation that stores EDM version of a model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.EdmVersion1">
            <summary>
            Version 1.0 of EDM. Corresponds to CSDL namespace "http://schemas.microsoft.com/ado/2006/04/edm".
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.EdmVersion1_1">
            <summary>
            Version 1.1 of EDM. Corresponds to CSDL namespace "http://schemas.microsoft.com/ado/2007/05/edm".
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.EdmVersion1_2">
            <summary>
            Version 1.2 of EDM. Corresponds to CSDL namespace "http://schemas.microsoft.com/ado/2008/01/edm".
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.EdmVersion2">
            <summary>
            Version 2.0 of EDM. Corresponds to CSDL namespaces "http://schemas.microsoft.com/ado/2008/09/edm" and "http://schemas.microsoft.com/ado/2009/08/edm".
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.EdmVersion3">
            <summary>
            Version 3.0 of EDM. Corresponds to CSDL namespace "http://schemas.microsoft.com/ado/2009/11/edm".
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmConstants.EdmVersionLatest">
            <summary>
            The current latest version of EDM.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.IEdmValidCoreModelElement">
            <summary>
            This is a marker interface for core model elements that do not require validation.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmCoreModel">
            <summary>
            Provides predefined declarations relevant to EDM semantics.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Library.EdmCoreModel.Instance">
            <summary>
            The default core EDM model.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetCollection(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Gets a reference to a non-atomic collection type definition.
            </summary>
            <param name="elementType">Type of elements in the collection.</param>
            <returns>A new non-atomic collection type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.FindDeclaredType(System.String)">
            <summary>
            Searches for a type with the given name in this model and returns null if no such type exists.
            </summary>
            <param name="qualifiedName">The qualified name of the type being found.</param>
            <returns>The requested type, or null if no such type exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.FindDeclaredValueTerm(System.String)">
            <summary>
            Searches for a value term with the given name in this model and returns null if no such value term exists.
            </summary>
            <param name="qualifiedName">The qualified name of the value term being found.</param>
            <returns>The requested value term, or null if no such value term exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.FindDeclaredFunctions(System.String)">
            <summary>
            Searches for functions with the given name in this model and returns an empty enumerable if no such function exists.
            </summary>
            <param name="qualifiedName">The qualified name of the function being found.</param>
            <returns>A set functions sharing the specified qualified name, or an empty enumerable if no such function exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.FindDeclaredEntityContainer(System.String)">
            <summary>
            Searches for an entity container with the given name in this model and returns null if no such entity container exists.
            </summary>
            <param name="name">The name of the entity container being found.</param>
            <returns>The requested entity container, or null if no such entity container exists.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetPrimitiveType(Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Gets primitive type by kind.
            </summary>
            <param name="kind">Kind of the primitive type.</param>
            <returns>Primitive type definition.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetPrimitiveTypeKind(System.String)">
            <summary>
            Gets the EdmPrimitiveTypeKind by the type name.
            </summary>
            <param name="typeName">Name of the type to look up.</param>
            <returns>EdmPrimitiveTypeKind of the type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetPrimitive(Microsoft.Data.Edm.EdmPrimitiveTypeKind,System.Boolean)">
            <summary>
            Gets a reference to a primitive type of the specified kind.
            </summary>
            <param name="kind">Primitive kind of the type reference being created.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetInt16(System.Boolean)">
            <summary>
            Gets a reference to the Int16 primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetInt32(System.Boolean)">
            <summary>
            Gets a reference to the Int32 primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetInt64(System.Boolean)">
            <summary>
            Gets a reference to the Int64 primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetBoolean(System.Boolean)">
            <summary>
            Gets a reference to the Boolean primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetByte(System.Boolean)">
            <summary>
            Gets a reference to the Byte primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetSByte(System.Boolean)">
            <summary>
            Gets a reference to the SByte primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetGuid(System.Boolean)">
            <summary>
            Gets a reference to the Guid primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetDateTime(System.Boolean)">
            <summary>
            Gets a reference to a datetime primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new datetime type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetDateTimeOffset(System.Boolean)">
            <summary>
            Gets a reference to a datetime with offset primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new datetime with offset type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetTime(System.Boolean)">
            <summary>
            Gets a reference to a time primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new time type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetDecimal(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets a reference to a decimal primitive type definition.
            </summary>
            <param name="precision">Precision of values of this type.</param>
            <param name="scale">Scale of values of this type.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new decimal type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetDecimal(System.Boolean)">
            <summary>
            Gets a reference to a decimal primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new decimal type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetSingle(System.Boolean)">
            <summary>
            Gets a reference to a single primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new decimal type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetDouble(System.Boolean)">
            <summary>
            Gets a reference to a double primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new decimal type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetStream(System.Boolean)">
            <summary>
            Gets a reference to a stream primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new stream type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetTemporal(Microsoft.Data.Edm.EdmPrimitiveTypeKind,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets a reference to a temporal primitive type definition.
            </summary>
            <param name="kind">Primitive kind of the type reference being created.</param>
            <param name="precision">Precision of values of this type.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new temporal type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetTemporal(Microsoft.Data.Edm.EdmPrimitiveTypeKind,System.Boolean)">
            <summary>
            Gets a reference to a temporal primitive type definition.
            </summary>
            <param name="kind">Primitive kind of the type reference being created.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new temporal type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetBinary(System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets a reference to a binary primitive type definition.
            </summary>
            <param name="isUnbounded">Flag specifying if max length is unbounded.</param>
            <param name="maxLength">Maximum length of the type.</param>
            <param name="isFixedLength">Flag specifying if the type will have a fixed length.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new binary type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetBinary(System.Boolean)">
            <summary>
            Gets a reference to a binary primitive type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new binary type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetSpatial(Microsoft.Data.Edm.EdmPrimitiveTypeKind,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets a reference to a spatial primitive type definition.
            </summary>
            <param name="kind">Primitive kind of the type reference being created.</param>
            <param name="spatialReferenceIdentifier">Spatial Reference Identifier for the spatial type being created.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new spatial type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetSpatial(Microsoft.Data.Edm.EdmPrimitiveTypeKind,System.Boolean)">
            <summary>
            Gets a reference to a spatial primitive type definition.
            </summary>
            <param name="kind">Primitive kind of the type reference being created.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new spatial type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetString(System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Boolean)">
            <summary>
            Gets a reference to a string primitive type definition.
            </summary>
            <param name="isUnbounded">Flag specifying if max length is the maximum allowable value.</param>
            <param name="maxLength">Maximum length of the type.</param>
            <param name="isFixedLength">Flag specifying if the type will have a fixed length.</param>
            <param name="isUnicode">Flag specifying if the type should support unicode encoding.</param>
            <param name="collation">String representing how data should be ordered.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new string type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.GetString(System.Boolean)">
            <summary>
            Gets a reference to a binary string type definition.
            </summary>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A new string type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.FindDeclaredVocabularyAnnotations(Microsoft.Data.Edm.IEdmVocabularyAnnotatable)">
            <summary>
            Searches for vocabulary annotations specified by this model or a referenced model for a given element.
            </summary>
            <param name="element">The annotated element.</param>
            <returns>The vocabulary annotations for the element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmCoreModel.FindDirectlyDerivedTypes(Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Finds a list of types that derive from the supplied type.
            </summary>
            <param name="baseType">The base type that derived types are being searched for.</param>
            <returns>A list of types that derive from the type.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmCoreModel.Namespace">
            <summary>
            Gets the namespace of this core model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmCoreModel.SchemaElements">
            <summary>
            Gets the types defined in this core model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmCoreModel.VocabularyAnnotations">
            <summary>
            Gets the vocabulary annotations defined in this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmCoreModel.ReferencedModels">
            <summary>
            Gets the collection of models referred to by this model.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmCoreModel.DirectValueAnnotationsManager">
            <summary>
            Gets the model's annotations manager.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Library.EdmCoreModel.EdmValidCoreModelPrimitiveType.TypeKind">
            <summary>
            Gets the kind of this type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Library.EdmRowTypeReference">
            <summary>
            Represents a reference to an EDM row type.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Library.EdmRowTypeReference.#ctor(Microsoft.Data.Edm.IEdmRowType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Data.Edm.Library.EdmRowTypeReference"/> class.
            </summary>
            <param name="rowType">Type that describes this value.</param>
            <param name="isNullable">Denotes whether the type can be nullable.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.EdmTypeSemantics">
            <summary>
            Provides semantics of the predefined EDM types.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsCollection(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a collection.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a collection.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsEntity(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to an entity type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to an entity type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsEntityReference(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to an entity type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to an entity type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsComplex(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a complex type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a complex type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsEnum(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to an enumeration type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to an enumeration type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsRow(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a row type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a row type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsStructured(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a structured type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a structured type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsStructured(Microsoft.Data.Edm.EdmTypeKind)">
            <summary>
            Returns true if this type kind represents a structured type.
            </summary>
            <param name="typeKind">Reference to the calling object.</param>
            <returns>This kind refers to a structured type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsPrimitive(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a primitive type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a primitive type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsBinary(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a binary type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a binary type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsBoolean(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a boolean type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a boolean type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsTemporal(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a temporal type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a temporal type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsTemporal(Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Returns true if this type kind represents a temporal type.
            </summary>
            <param name="typeKind">Reference to the calling object.</param>
            <returns>This kind refers to a temporal type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsDateTime(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a DateTime type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a DateTime type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsTime(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a time type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a time type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsDateTimeOffset(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a DateTimeOffset type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a DateTimeOffset type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsDecimal(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a decimal type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a decimal type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsFloating(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a floating point type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a floating point type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsSingle(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a single type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a single type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsDouble(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a double type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a double type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsGuid(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a GUID type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a GUID type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsSignedIntegral(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a signed integral type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a signed integral type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsSByte(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to an SByte type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to an SByte type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsInt16(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to an Int16 type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to an Int16 type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsInt32(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to an Int32 type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to an Int32 type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsInt64(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to an Int64 type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to an Int64 type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsIntegral(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to an integer type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to an integer type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsIntegral(Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Returns true if this primitive type kind represents an integer type.
            </summary>
            <param name="primitiveTypeKind">Type reference.</param>
            <returns>This kind refers to an integer type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsByte(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a byte type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a byte type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsString(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a string type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a string type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsStream(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a stream type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a stream type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsSpatial(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns true if this reference refers to a spatial type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This reference refers to a spatial type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsSpatial(Microsoft.Data.Edm.IEdmType)">
            <summary>
            Returns true if this definition refers to a spatial type.
            </summary>
            <param name="type">Type reference.</param>
            <returns>This definition refers to a spatial type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsSpatial(Microsoft.Data.Edm.EdmPrimitiveTypeKind)">
            <summary>
            Returns true if this type kind represents a spatial type.
            </summary>
            <param name="typeKind">Type reference.</param>
            <returns>This kind refers to a spatial type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsPrimitive(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a primitive type, this will return a valid primitive type reference to the type definition. Otherwise, it will return a bad primitive type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid primitive type reference if the definition of the reference is of a primitive type. Otherwise a bad primitive type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsCollection(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a collection type, this will return a valid collection type reference to the type definition. Otherwise, it will return a bad collection type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid collection type reference if the definition of the reference is of a collection type. Otherwise a bad collection type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsStructured(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a structured type, this will return a valid structured type reference to the type definition. Otherwise, it will return a bad structured type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid structured type reference if the definition of the reference is of a structured type. Otherwise a bad structured type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsEnum(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of an enumeration type, this will return a valid enumeration type reference to the type definition. Otherwise, it will return a bad enumeration type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid enumeration type reference if the definition of the reference is of an enumeration type. Otherwise a bad enumeration type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsEntity(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of an entity type, this will return a valid entity type reference to the type definition. Otherwise, it will return a bad entity type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid entity type reference if the definition of the reference is of an entity type. Otherwise a bad entity type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsEntityReference(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of an entity reference type, this will return a valid entity reference type reference to the type definition. Otherwise, it will return a bad entity reference type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid entity reference type reference if the definition of the reference is of an entity reference type. Otherwise a bad entity reference type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsComplex(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a complex type, this will return a valid complex type reference to the type definition. Otherwise, it will return a bad complex type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid complex type reference if the definition of the reference is of a complex type. Otherwise a bad complex type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsRow(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a row type, this will return a valid row type reference to the type definition. Otherwise, it will return a bad row type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid row type reference if the definition of the reference is of a row type. Otherwise a bad row type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsSpatial(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a spatial type, this will return a valid spatial type reference to the type definition. Otherwise, it will return a bad spatial type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid spatial type reference if the definition of the reference is of a spatial type. Otherwise a bad spatial type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsTemporal(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a temporal type, this will return a valid temporal type reference to the type definition. Otherwise, it will return a bad temporal type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid temporal type reference if the definition of the reference is of a temporal type. Otherwise a bad temporal type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsDecimal(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a decimal type, this will return a valid decimal type reference to the type definition. Otherwise, it will return a bad decimal type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid decimal type reference if the definition of the reference is of a decimal type. Otherwise a bad decimal type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsString(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a string type, this will return a valid string type reference to the type definition. Otherwise, it will return a bad string type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid string type reference if the definition of the reference is of a string type. Otherwise a bad string type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.AsBinary(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            If this reference is of a binary type, this will return a valid binary type reference to the type definition. Otherwise, it will return a bad binary type reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>A valid binary type reference if the definition of the reference is of a binary type. Otherwise a bad binary type reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.PrimitiveKind(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Returns the primitive kind of the definition of this reference.
            </summary>
            <param name="type">Reference to the calling object.</param>
            <returns>The primitive kind of the definition of this reference.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.ApplyType(Microsoft.Data.Edm.IEdmRowType,System.Boolean)">
            <summary>
            Returns a reference to this row type definition.
            </summary>
            <param name="rowType">Reference to the calling object.</param>
            <param name="isNullable">Flag specifying if the referenced type should be nullable.</param>
            <returns>A reference to this row type definition.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.InheritsFrom(Microsoft.Data.Edm.IEdmStructuredType,Microsoft.Data.Edm.IEdmStructuredType)">
            <summary>
            Determines if the potential base type is in the inheritance hierarchy of the type being tested.
            </summary>
            <param name="type">Type to be tested for derivation from the other type.</param>
            <param name="potentialBaseType">The potential base type of the type being tested.</param>
            <returns>True if and only if the type inherits from the potential base type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.EdmTypeSemantics.IsOrInheritsFrom(Microsoft.Data.Edm.IEdmType,Microsoft.Data.Edm.IEdmType)">
            <summary>
            Determines if a type is equivalent to or derived from another type.
            </summary>
            <param name="thisType">Type to be tested for equivalence to or derivation from the other type.</param>
            <param name="otherType">Type that is the other type.</param>
            <returns>True if and only if the thisType is equivalent to or inherits from otherType.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.EdmError">
            <summary>
            Represents a reportable error in EDM
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.EdmError.#ctor(Microsoft.Data.Edm.EdmLocation,Microsoft.Data.Edm.Validation.EdmErrorCode,System.String)">
            <summary>
            Initializes a new instance of the EdmError class.
            </summary>
            <param name="errorLocation">The location where the error occurred.</param>
            <param name="errorCode">An integer code representing the error.</param>
            <param name="errorMessage">A human readable message describing the error.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.EdmError.ToString">
            <summary>
            Gets a string representation of the error.
            </summary>
            <returns>A string representation of the error.</returns>
        </member>
        <member name="P:Microsoft.Data.Edm.Validation.EdmError.ErrorLocation">
            <summary>
            Gets the location of the error in the file in which it occurred.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Validation.EdmError.ErrorCode">
            <summary>
            Gets an integer code representing the error.
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Validation.EdmError.ErrorMessage">
            <summary>
            Gets a human readable string describing the error.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.EdmValidator">
            <summary>
            Collection of validation methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.EdmValidator.Validate(Microsoft.Data.Edm.IEdmModel,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Validate the <see cref="T:Microsoft.Data.Edm.IEdmModel"/> and all of its properties using the current version of the model.
            If the model has no version, <see cref="F:Microsoft.Data.Edm.Library.EdmConstants.EdmVersionLatest"/> is used.
            </summary>
            <param name="root">The root of the model to be validated.</param>
            <param name="errors">Errors encountered while validating the model.</param>
            <returns>True if model is valid, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.EdmValidator.Validate(Microsoft.Data.Edm.IEdmModel,System.Version,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Validate the <see cref="T:Microsoft.Data.Edm.IEdmModel"/> and all of its properties given certain version.
            </summary>
            <param name="root">The root of the model to be validated.</param>
            <param name="version">Version of Edm to validate against.</param>
            <param name="errors">Errors encountered while validating the model.</param>
            <returns>True if model is valid, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.EdmValidator.Validate(Microsoft.Data.Edm.IEdmModel,Microsoft.Data.Edm.Validation.ValidationRuleSet,System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.EdmError}@)">
            <summary>
            Validate the <see cref="T:Microsoft.Data.Edm.IEdmModel"/> and all of its properties given certain version.
            </summary>
            <param name="root">The root of the model to be validated.</param>
            <param name="ruleSet">Custom rule set to validate against.</param>
            <param name="errors">Errors encountered while validating the model.</param>
            <returns>True if model is valid, otherwise false.</returns>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.Internal.InterfaceValidator.ConcreteTypeInterfaceVisitors">
            <summary>
            This is a thread-safe cache of object type to interface visitors which is shared between all instances of the validator.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.ValidationContext">
            <summary>
            Context that records errors reported by validation rules.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationContext.IsBad(Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Method returns true if the <paramref name="element"/> is known to have structural errors associated with it.
            </summary>
            <param name="element">The element to test.</param>
            <returns>True if the <paramref name="element"/> has structural errors associated with it.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationContext.AddError(Microsoft.Data.Edm.EdmLocation,Microsoft.Data.Edm.Validation.EdmErrorCode,System.String)">
            <summary>
            Register an error with the validation context.
            </summary>
            <param name="location">Location of the error.</param>
            <param name="errorCode">Value representing the error.</param>
            <param name="errorMessage">Message text discribing the error.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationContext.AddError(Microsoft.Data.Edm.Validation.EdmError)">
            <summary>
            Register an error with the validation context.
            </summary>
            <param name="error">Error to register.</param>
        </member>
        <member name="P:Microsoft.Data.Edm.Validation.ValidationContext.Model">
            <summary>
            Gets the model being validated.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.ValidationExtensionMethods">
            <summary>
            Contains IsBad() and Errors() extension methods.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationExtensionMethods.IsBad(Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Returns true if this element contains errors returned by the <see cref="M:Microsoft.Data.Edm.Validation.ValidationExtensionMethods.Errors(Microsoft.Data.Edm.IEdmElement)"/> method.
            </summary>
            <param name="element">Reference to the calling object.</param>
            <returns>This element is an invalid element.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationExtensionMethods.Errors(Microsoft.Data.Edm.IEdmElement)">
            <summary>
            Gets the errors, if any, that belong to this element or elements that this element contains. For example errors for a structural type include the errors of the type itself and errors of its declared properties.
            The method does not analyze elements referenced by this element. For example errors of a property do not include errors from its type.
            </summary>
            <param name="element">Reference to the calling object.</param>
            <returns>Any errors that belong to this element or elements that element contains.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationExtensionMethods.TypeErrors(Microsoft.Data.Edm.IEdmTypeReference)">
            <summary>
            Gets the errors, if any, that belong to this type reference or its definition.
            </summary>
            <param name="type">The type reference.</param>
            <returns>Any errors that belong to this type reference or its definition.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.ValidationRules">
            <summary>
            Built in Edm validation rules.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ElementDirectValueAnnotationFullNameMustBeUnique">
            <summary>
            Validates that no direct value annotations share the same name and namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NamedElementNameMustNotBeEmptyOrWhiteSpace">
            <summary>
            Validates that a name is not empty or whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NamedElementNameIsTooLong">
            <summary>
            Validates that an element name is not too long according to the CSDL spec.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NamedElementNameIsNotAllowed">
            <summary>
            Validates that an element name matches the allowed pattern of names according to the CSDL spec.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.SchemaElementNamespaceMustNotBeEmptyOrWhiteSpace">
            <summary>
            Validates that an element namespace is not empty or whitespace.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.SchemaElementNamespaceIsTooLong">
            <summary>
            Validates that an element namespace is not too long according to the CSDL spec.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.SchemaElementNamespaceIsNotAllowed">
            <summary>
            Validates that an element namespace matches the allowed pattern of namespaces according to the CSDL spec.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.SchemaElementSystemNamespaceEncountered">
            <summary>
            Validates that an element namespace is not a reserved system namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.SchemaElementMustNotHaveKindOfNone">
            <summary>
            A schema element without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityContainerElementMustNotHaveKindOfNone">
            <summary>
            An entity container element without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityContainerDuplicateEntityContainerMemberName">
            <summary>
            Validates that there are no duplicate names in an entity container.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetTypeHasNoKeys">
            <summary>
            Validates that there is no entity set whose entity type has no key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetInaccessibleEntityType">
            <summary>
            Validates that the entity type of an entity set can be found from the model being validated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetCanOnlyBeContainedByASingleNavigationProperty">
            <summary>
            Validates that an entity set can only have a single navigation property targetting it that has Contains set to true.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetNavigationMappingMustBeBidirectional">
            <summary>
            Validates that if a navigation property is traversed to another entity set, and then the navigation properties partner is traversed, the destination will be the source entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetAssociationSetNameMustBeValid">
            <summary>
            Validates an association set's name is correct
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetNavigationPropertyMappingsMustBeUnique">
            <summary>
            Validates that no navigation property is mapped to two different entity sets.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetRecursiveNavigationPropertyMappingsMustPointBackToSourceEntitySet">
            <summary>
            Validates that if a navigation property mapping is of recursive containment, the mapping points back to the source entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetNavigationPropertyMappingMustPointToValidTargetForProperty">
            <summary>
            Validates that the target of a navigation property mapping is valid for the target type of the property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StructuredTypeInvalidMemberNameMatchesTypeName">
            <summary>
            Validates that a type does not have a property with the same name as that type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StructuredTypePropertyNameAlreadyDefined">
            <summary>
            Validates that there are not duplicate properties in a type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StructuredTypeBaseTypeMustBeSameKindAsDerivedKind">
            <summary>
            Validates that the base type of a complex type is complex, and the base type of an entity type is an entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StructuredTypeInaccessibleBaseType">
            <summary>
            Validates that the base type of a structured type can be found from the model being validated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StructuredTypePropertiesDeclaringTypeMustBeCorrect">
            <summary>
            Validates that the declaring type of a property contains that property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.OpenTypesNotSupported">
            <summary>
            Open types are supported only in version 1.2 and after version 2.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.OnlyEntityTypesCanBeOpen">
            <summary>
            Open types are supported only on entity types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EnumTypeEnumsNotSupportedBeforeV3">
            <summary>
            Raises an error if an enum type is found.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EnumTypeEnumMemberNameAlreadyDefined">
            <summary>
            Validates that there are not duplicate enum members in an enum.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EnumMustHaveIntegerUnderlyingType">
            <summary>
            Raises an error if the underlying type of an enum type is not an integer type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EnumMemberValueMustHaveSameTypeAsUnderlyingType">
            <summary>
            Raises an error if the type of an enum member doesn't match the underlying type of the enum it belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityTypeDuplicatePropertyNameSpecifiedInEntityKey">
            <summary>
            Validates that there are not duplicate properties in an entity key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityTypeInvalidKeyNullablePart">
            <summary>
            Validates that no part of an entity key is nullable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityTypeEntityKeyMustBeScalar">
            <summary>
            Validates that all parts of an entity key are scalar.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityTypeEntityKeyMustNotBeBinaryBeforeV2">
            <summary>
            Validates that no part of an entity key is a binary primitive type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityTypeInvalidKeyKeyDefinedInBaseClass">
            <summary>
            Validates that a key is not defined if there is already a key in the base type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityTypeKeyMissingOnEntityType">
            <summary>
            Validates that the entity type has a key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityTypeKeyPropertyMustBelongToEntity">
            <summary>
            Validates that all properties in the key of an entity blong to that entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.EntityReferenceTypeInaccessibleEntityType">
            <summary>
            Validates that the entity type wrapped in this entity reference can be found through the model being validated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.TypeMustNotHaveKindOfNone">
            <summary>
            A type without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.PrimitiveTypeMustNotHaveKindOfNone">
            <summary>
            A primtive type without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ComplexTypeInvalidAbstractComplexType">
            <summary>
            Validates that a complex type is not abstract.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ComplexTypeInvalidPolymorphicComplexType">
            <summary>
            Validates that a complex type does not inherit.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ComplexTypeMustContainProperties">
            <summary>
            Validates that a complex type contains at least one property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.RowTypeBaseTypeMustBeNull">
            <summary>
            Validates that a row type does not have a base type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.RowTypeMustContainProperties">
            <summary>
            Validates that a row type contains at least one property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StructuralPropertyNullableComplexType">
            <summary>
            Validates that any property with a complex type is not nullable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StructuralPropertyInvalidPropertyType">
            <summary>
            Validates that the property is of an allowed type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StructuralPropertyInvalidPropertyTypeConcurrencyMode">
            <summary>
            Validates that if the concurrency mode of a property is fixed, the type is primitive.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyInvalidOperationMultipleEndsInAssociation">
            <summary>
            Validates that only one end of an association has an OnDelete operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyCorrectType">
            <summary>
            Validates that the type of a navigation property corresponds to the other end of the association and the multiplicity of the other end.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyDuplicateDependentProperty">
            <summary>
            Validates that the dependent properties of a navigation property contain no duplicates.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyPrincipalEndMultiplicity">
            <summary>
            Validates multiplicity of the principal end:
            0..1 - if some dependent properties are nullable, 
               1 - if some dependent properties are not nullable.
               * - not allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyDependentEndMultiplicity">
            <summary>
            Validates that if the dependent properties are equivalent to the key of the dependent end, the multiplicity of the dependent end cannot be 1
            Validates multiplicity of the dependent end according to the following rules:
            0..1, 1 - if dependent properties represent the dependent end key.
                  * - if dependent properties don't represent the dependent end key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyDependentPropertiesMustBelongToDependentEntity">
            <summary>
            Validates that all dependent properties of a navigation property belong to the dependent entity type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyInvalidToPropertyInRelationshipConstraintBeforeV2">
            <summary>
            Validates that all dependent properties are a subset of the dependent entity types key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyEndWithManyMultiplicityCannotHaveOperationsSpecified">
            <summary>
            Validates that the navigation property does not have both a multiplicity of many and an OnDelete operation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyContainsTargetNotSupportedBeforeV3">
            <summary>
            Validates that <see cref="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget"/> is not set prior to V3.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyWithRecursiveContainmentTargetMustBeOptional">
            <summary>
            Validates that if a navigation property has <see cref="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget"/> = true and the target entity type is the same as 
            the declaring type of the property, then the multiplicity of the target of navigation is 0..1 or Many.
            This depends on there being a targetting cycle. Because of the rule <see cref="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetNavigationMappingMustBeBidirectional"/>, we know that either this is always true, or there will be an error
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyWithRecursiveContainmentSourceMustBeFromZeroOrOne">
            <summary>
            Validates that if a navigation property has <see cref="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget"/> = true and the target entity type is the same as 
            the declaring type of the property, then the multiplicity of the source of navigation is Zero-Or-One.
            This depends on there being a targetting cycle. Because of the rule <see cref="F:Microsoft.Data.Edm.Validation.ValidationRules.EntitySetNavigationMappingMustBeBidirectional"/>, we know that either this is always true, or there will be an error
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyWithNonRecursiveContainmentSourceMustBeFromOne">
            <summary>
            Validates that if a navigation property has <see cref="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget"/> = true and the target entity type is defferent than
            the declaring type of the property, then the multiplicity of the source of navigation is One.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyEntityMustNotIndirectlyContainItself">
            <summary>
            Validates that if an entity does not directly contain itself, it cannot contain itself through a containment loop.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyTypeMismatchRelationshipConstraint">
            <summary>
            Validates that each pair of properties between the dependent properties and the principal ends key are of the same type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyAssociationNameIsValid">
            <summary>
            Validates that an association name is valid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.NavigationPropertyAssociationEndNameIsValid">
            <summary>
            Validates that an association end name is valid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.PropertyMustNotHaveKindOfNone">
            <summary>
            A property without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionsNotSupportedBeforeV2">
            <summary>
            Raises an error if a function is found.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionOnlyInputParametersAllowedInFunctions">
            <summary>
            Validates that no function parameters are output parameters.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportUnsupportedReturnTypeV1">
            <summary>
            Validates that a function import has an allowed return type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportUnsupportedReturnTypeAfterV1">
            <summary>
            Validates that a function import has an allowed return type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportReturnEntitiesButDoesNotSpecifyEntitySet">
            <summary>
            Validates that if a function import specifies an entity or collection of entities as its return type, it must also specify an entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportEntitySetExpressionIsInvalid">
            <summary>
            Validates that the entity set of a function import is defined using a path or an entity set reference expression.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportEntityTypeDoesNotMatchEntitySet">
            <summary>
            Validates that the return type of a function import must match the type of the entity set of the function.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ComposableFunctionImportMustHaveReturnType">
            <summary>
            Validates that if a function import is composable, it must have a return type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportParametersIncorrectTypeBeforeV3">
            <summary>
            Validates that the type of a function imports parameter is correct.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportIsSideEffectingNotSupportedBeforeV3">
            <summary>
            Validates that a function import is not sideeffecting.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportIsComposableNotSupportedBeforeV3">
            <summary>
            Validates that a function import is not composable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportIsBindableNotSupportedBeforeV3">
            <summary>
            Validates that a function is not bindable.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportComposableFunctionImportCannotBeSideEffecting">
            <summary>
            Validates that if a function is composable, it is not also sideeffecting.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportBindableFunctionImportMustHaveParameters">
            <summary>
            Validates that if a function is bindable, it must have parameters.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionImportParametersCannotHaveModeOfNone">
            <summary>
            Validates that no function import parameters have mode of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionBaseParameterNameAlreadyDefinedDuplicate">
            <summary>
            Validates that a function does not have multiple parameters with the same name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.TypeReferenceInaccessibleSchemaType">
            <summary>
            Validates that a type reference refers to a type that can be found through the model being validated.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StreamTypeReferencesNotSupportedBeforeV3">
            <summary>
            References to EDM stream type are not supported before version 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.SpatialTypeReferencesNotSupportedBeforeV3">
            <summary>
            References to EDM spatial types are not supported before version 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.DecimalTypeReferenceScaleOutOfRange">
            <summary>
            Validates that the scale is between 0 and the precision of the decimal type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.DecimalTypeReferencePrecisionOutOfRange">
            <summary>
            Validates that the precision is between 0 and the max precision of the decimal type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StringTypeReferenceStringMaxLengthNegative">
            <summary>
            Validates that the max length of a string is not negative.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.StringTypeReferenceStringUnboundedNotValidForMaxLength">
            <summary>
            Validates that IsUnbounded cannot be true if MaxLength is non-null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.BinaryTypeReferenceBinaryMaxLengthNegative">
            <summary>
            Validates that the max length of a binary type is not negative.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.BinaryTypeReferenceBinaryUnboundedNotValidForMaxLength">
            <summary>
            Validates that isUnbounded cannot be true if MaxLength is non-null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.TemporalTypeReferencePrecisionOutOfRange">
            <summary>
            Validates that the precision is between 0 and the max precision of the temporal type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ModelDuplicateSchemaElementNameBeforeV3">
            <summary>
            Validates every schema element in the current model (except for entity containers) is unique across all referenced models.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ModelDuplicateSchemaElementName">
            <summary>
            Validates every schema element in the current model is unique across all referenced models.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ModelDuplicateEntityContainerName">
            <summary>
            Validates that there are not duplicate properties in an entity key.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ImmediateValueAnnotationElementAnnotationIsValid">
            <summary>
            Validates that an immediate value annotation has a name and a namespace.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ImmediateValueAnnotationElementAnnotationHasNameAndNamespace">
            <summary>
            Validates that an immediate value annotation that is flagged to be serialized as an element can be serialized safely.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.DirectValueAnnotationHasXmlSerializableName">
            <summary>
            Validates that the name of a direct value annotation can safely be serialized as XML.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.VocabularyAnnotationsNotSupportedBeforeV3">
            <summary>
            Vocabulary annotations are not supported before EDM 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.VocabularyAnnotationInaccessibleTarget">
            <summary>
            Validates that a vocabulary annotations target can be found through the model containing the annotation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ValueAnnotationAssertCorrectExpressionType">
            <summary>
            Validates that if a value annotation declares a type, the expression for that annotation has the correct type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ValueAnnotationInaccessibleTerm">
            <summary>
            Validates that a vocabulary annotations term can be found through the model containing the annotation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.TypeAnnotationInaccessibleTerm">
            <summary>
            Validates that a vocabulary annotations term can be found through the model containing the annotation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.TypeAnnotationAssertMatchesTermType">
            <summary>
            Validates that a type annotation implements its term type properly.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.PropertyValueBindingValueIsCorrectType">
            <summary>
            Validates that the value of a property value binding is the correct type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.ValueTermsNotSupportedBeforeV3">
            <summary>
            Value terms are not supported before EDM 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.TermMustNotHaveKindOfNone">
            <summary>
            A term without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.IfExpressionAssertCorrectTestType">
            <summary>
            Validates that an if expression has a boolean condition.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.CollectionExpressionAllElementsCorrectType">
            <summary>
            Validates that all properties of a collection expression are of the correct type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.RecordExpressionPropertiesMatchType">
            <summary>
            Validates that if a value record expression declares a type, the property types are correct.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.FunctionApplicationExpressionParametersMatchAppliedFunction">
            <summary>
            Validates the types of a function application are correct.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.VocabularyAnnotatableNoDuplicateAnnotations">
            <summary>
            Validates that there are no annotations that share the same term and qualifier.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.ValidationRules.PrimitiveValueValidForType">
            <summary>
            Validates that if a primitive value declares a type, the value is acceptable for the type.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.ValidationRule">
            <summary>
            A semantic validation rule.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.ValidationRule`1">
            <summary>
            A validation rule that is valid for a specific type.
            </summary>
            <typeparam name="TItem">Type that the rule is valid for.</typeparam>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationRule`1.#ctor(System.Action{Microsoft.Data.Edm.Validation.ValidationContext,`0})">
            <summary>
            Initializes a new instance of the ValidationRule class.
            </summary>
            <param name="validate">Action to perform the validation.</param>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.ValidationRuleSet">
            <summary>
            A set of rules to run during validation.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationRuleSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.ValidationRule},System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.ValidationRule})">
            <summary>
            Initializes a new instance of the ValidationRuleSet class.
            </summary>
            <param name="baseSet">Ruleset whose rules should be contained in this set.</param>
            <param name="newRules">Additional rules to add to the set.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationRuleSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Data.Edm.Validation.ValidationRule})">
            <summary>
            Initializes a new instance of the ValidationRuleSet class.
            </summary>
            <param name="rules">Rules to be contained in this ruleset.</param>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationRuleSet.GetEdmModelRuleSet(System.Version)">
            <summary>
            Gets the default validation ruleset for the given version.
            </summary>
            <param name="version">The EDM version being validated.</param>
            <returns>The set of rules to validate that the model conforms to the given version.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationRuleSet.GetEnumerator">
            <summary>
            Gets all of the rules in this ruleset.
            </summary>
            <returns>All of the rules in this ruleset.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.Validation.ValidationRuleSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets all of the rules in this ruleset.
            </summary>
            <returns>All of the rules in this ruleset.</returns>
        </member>
        <member name="T:Microsoft.Data.Edm.Validation.EdmErrorCode">
            <summary>
            EdmLib validation error codes
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidErrorCodeValue">
            <summary>
            Invalid error code
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.StreamTypeReferencesNotSupportedBeforeV3">
            <summary>
            References to EDM stream type are not supported before version 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.SpatialTypeReferencesNotSupportedBeforeV3">
            <summary>
            References to EDM spatial types are not supported before version 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.XmlError">
            <summary>
            An exception was thrown by the underlying xml reader.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.UnexpectedXmlNodeType">
            <summary>
            Encountered an XML node that was never used
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.UnexpectedXmlAttribute">
            <summary>
            Encountered an XML attribute that was never used
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.UnexpectedXmlElement">
            <summary>
            Encountered an XML element that was never used
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.TextNotAllowed">
            <summary>
            Text was found in a location it was not allowed in
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EmptyFile">
            <summary>
            An empty file was provided to the parser
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.MissingAttribute">
            <summary>
            An XML element was missing a required attribute
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidName">
            <summary>
            Invalid Name
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.MissingType">
            <summary>
            An XML attribute or element representing EDM type is missing.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.AlreadyDefined">
            <summary>
            Element name is already defined in this context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidVersionNumber">
            <summary>
            The specified version number is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidBoolean">
            <summary>
            Malformed boolean value.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadProperty">
            <summary>
            The property contains an error.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidPropertyType">
            <summary>
            The type of this property is invalid for the given context.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.PrecisionOutOfRange">
            <summary> 
            Precision out of range 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ScaleOutOfRange">
            <summary> 
            Scale out of range 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NameTooLong">
            <summary>
            Name is too long.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidAssociation">
            <summary>
            The provided association is invalid
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadNavigationProperty">
            <summary>
            Navigation property contains errors.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidKey">
            <summary>
            Entity key is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InterfaceCriticalPropertyValueMustNotBeNull">
            <summary>
            The value of the property must not be null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InterfaceCriticalKindValueMismatch">
            <summary>
            An object with an interface kind property does not implement the interface corresponding to the value of that property.
            For example this error will be reported for an object that implements <see cref="T:Microsoft.Data.Edm.IEdmType"/> interface with kind property reporting <see cref="T:Microsoft.Data.Edm.EdmTypeKind"/>.Entity, 
            but does not implement <see cref="T:Microsoft.Data.Edm.IEdmEntityType"/> interface.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InterfaceCriticalKindValueUnexpected">
            <summary>
            The value of an interface kind property is not semantically valid. A semantically valid model must not contain elements of kind 'None'.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InterfaceCriticalEnumerableMustNotHaveNullElements">
            <summary>
            An enumeration property must not contain null elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InterfaceCriticalEnumPropertyValueOutOfRange">
            <summary>
            The value of the enum type property is out of range.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InterfaceCriticalNavigationPartnerInvalid">
            <summary>
            If property P1 is a navigation property and P2 is its parnter, then partner property of P2 must be P1.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InterfaceCriticalCycleInTypeHierarchy">
            <summary>
            A chain of base types is cyclic.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidMultiplicity">
            <summary>
            Multiplicity value was malformed
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidAction">
            <summary>
            The value for the Action attribute is invalid or not allowed in the current context
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidOnDelete">
            <summary>
            An error occured processing the OnDelete element
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedComplexType">
            <summary>
            No complex type with that name exists.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidEndEntitySet">
            <summary>
            The extent name used in the EntittyContainerType End does not match the name of any of the EntityContainerProperties in the containing EntityContainer
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportEntitySetExpressionIsInvalid">
            <summary>
            Function import specifies an entity set expression which is not supported in this context. Function import entity set expression can be either an entity set reference or a path starting with a function import parameter and traversing navigation properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntitySetNavigationPropertyMappingMustPointToValidTargetForProperty">
            <summary>
            The target entity set must be able to hold an entity that is valid for the navigation property of a mapping.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidRoleInRelationshipConstraint">
            <summary>
            Invalid role value in the relationship constraint
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidPropertyInRelationshipConstraint">
            <summary>
            Invalid Property in relationship constraint
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.TypeMismatchRelationshipConstraint">
            <summary> 
            Type mismatch between ToProperty and FromProperty in the relationship constraint
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidMultiplicityOfPrincipalEnd">
            <summary> 
            Invalid multiplicty of the principal end of a navigation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.MismatchNumberOfPropertiesInRelationshipConstraint">
            <summary> 
            The number of properties in the FromProperty and ToProperty in the relationship constraint must be identical
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidMultiplicityOfDependentEnd">
            <summary> 
            Invalid multiplicty of the dependent end of a navigation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.OpenTypeNotSupported">
            <summary>
            Open types are supported only in version 1.2 and after version 2.0. Only entity types can be open.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.VocabularyAnnotationsNotSupportedBeforeV3">
            <summary>
            Vocabulary annotations are not supported before EDM 3.0
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.SameRoleReferredInReferentialConstraint">
            <summary> 
            Same role referred in the ToRole and FromRole of a referential constraint 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntityKeyMustBeScalar">
            <summary> 
            Properties that are part of entity key must be of scalar type
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntityKeyMustNotBeBinary">
            <summary> 
            Binary type properties which are part of entity key are currently supported before V2.0 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EndWithManyMultiplicityCannotHaveOperationsSpecified">
            <summary>
            End with * multiplicity cannot have operations specified
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntitySetTypeHasNoKeys">
            <summary>
            EntitySet type has no keys
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidConcurrencyMode">
            <summary>
            ConcurrencyMode value was malformed
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ConcurrencyRedefinedOnSubtypeOfEntitySetType">
            <summary>
            Conurency can't change for any sub types of an EntitySet type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportUnsupportedReturnType">
            <summary>
            In version 1.0 function import can have no return type or return a collection of scalars or a collection of entities.
            In all other versions function import can have no return type or return a scalar, a complex type, an entity type or a collection of those.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ComposableFunctionImportCannotBeSideEffecting">
            <summary>
            Composable function import cannot be side-effecting.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportReturnsEntitiesButDoesNotSpecifyEntitySet">
            <summary>
            Function import specifies entity type return but no entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportEntityTypeDoesNotMatchEntitySet">
            <summary>
            Function import specifies entity type that does not derive from element type of entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportSpecifiesEntitySetButDoesNotReturnEntityType">
            <summary>
            Function import specifies a binding to an entity set but does not return entities.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ComposableFunctionImportMustHaveReturnType">
            <summary>
            A composable function import must have return type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.SimilarRelationshipEnd">
            <summary>
            Same Entity Set Taking part in the same role of the relationship set in two different relationship sets
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DuplicatePropertySpecifiedInEntityKey">
            <summary>
            Entity key refers to the same property twice
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NullableComplexTypeProperty">
            <summary> 
            Nullable complex Type not supported in version 1.0 and 2.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.KeyMissingOnEntityType">
            <summary>
            No Key defined on Entity Type 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.SystemNamespaceEncountered">
            <summary>
            Need not specify system namespace in using 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidNamespaceName">
            <summary> 
            Invalid qualification specified for type 
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EnumMemberValueOutOfRange">
            <summary>
            The value for an enumeration type member is ouf of range.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DuplicateEntityContainerMemberName">
            <summary>
            The entity container name has already been assigned to a different entity container.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidAbstractComplexType">
            <summary>
            Complex types were not allowed to be abstract here.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidPolymorphicComplexType">
            <summary>
            Complex types cannot have base types in this version.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NavigationPropertyEntityMustNotIndirectlyContainItself">
            <summary>
            A navigation property without direct containment cannot contain its declaring entity indirectly.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntitySetRecursiveNavigationPropertyMappingsMustPointBackToSourceEntitySet">
            <summary>
            If a navigation property mapping is of a recursive navigation property, the mapping must point back to the same entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadAmbiguousElementBinding">
            <summary>
            Name collision makes this name ambiguous.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedType">
            <summary>
            Could not find a type with this name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedPrimitiveType">
            <summary>
            Could not find a primitive type with this name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadCyclicComplex">
            <summary>
            This complex type is part of a cycle.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadCyclicEntityContainer">
            <summary>
            This Entity Container is bad because some part of its extends hierarchy is part of a cycle.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadCyclicEntity">
            <summary>
            This entity type is part of a cycle.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.TypeSemanticsCouldNotConvertTypeReference">
            <summary>
            Could not convert type reference to the requested type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ConstructibleEntitySetTypeInvalidFromEntityTypeRemoval">
            <summary>
            This entity set became invalid because the entity that it was of the type of was removed from the model.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedEntityContainer">
            <summary>
            Could not find an EntityContainer with that name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedEntitySet">
            <summary>
            Could not find an EntitySet with that name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedProperty">
            <summary>
            Could not find a property with that name
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadNonComputableAssociationEnd">
            <summary>
            Could not find an association end with that name
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NavigationPropertyTypeInvalidBecauseOfBadAssociation">
            <summary>
            Type of the navigation property was invalid because the association of the navigation property was invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntityMustHaveEntityBaseType">
            <summary>
            The base type of an entity must also be an entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ComplexTypeMustHaveComplexBaseType">
            <summary>
            The base type of a complex type must also be complex.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedFunction">
            <summary>
            Could not find a function with this name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.RowTypeMustNotHaveBaseType">
            <summary>
            Rows cannot have base types.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.AssociationSetEndRoleMustBelongToSetElementType">
            <summary>
            The role of an association set end must be an association end belonging to the association type that defines the associaiton set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.KeyPropertyMustBelongToEntity">
            <summary>
            Every property in an entity key must be a property of the entity.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ReferentialConstraintPrincipalEndMustBelongToAssociation">
            <summary>
            The principal end of a referential constraint must be one of the ends of the association that defined the referential constraint.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DependentPropertiesMustBelongToDependentEntity">
            <summary>
            Dependent properties of a referential constraint must belong to the dependent entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DeclaringTypeMustBeCorrect">
            <summary>
            If a structured type declares a property, that properties declaring type must be the declaring structured type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionsNotSupportedBeforeV2">
            <summary>
            Functions are not supported before version 2.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ValueTermsNotSupportedBeforeV3">
            <summary>
            Value terms are not supported before EDM 3.0
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidNavigationPropertyType">
            <summary>
            Navigation property has a type that is not an entity or collection of entities.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.UnderlyingTypeIsBadBecauseEnumTypeIsBad">
            <summary>
            Underlying type of the enumeration type is bad because the enumeration type is bad.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidAssociationSetEndSetWrongType">
            <summary>
            The type of the entity set on this association end is inconsistent with the association end.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.OnlyInputParametersAllowedInFunctions">
            <summary>
            Only function parameters with mode of In are allowed in function imports.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ComplexTypeMustHaveProperties">
            <summary>
            Complex types must contain at least one property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportParameterIncorrectType">
            <summary>
            Unsupported function import parameter type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.RowTypeMustHaveProperties">
            <summary>
            A row type must contain at least one property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DuplicateDependentProperty">
            <summary>
            A referential constraint cannot have multiple dependent properties with the same name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BindableFunctionImportMustHaveParameters">
            <summary>
            Bindable function import must have at least one parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportSideEffectingNotSupportedBeforeV3">
            <summary>
            Function imports with side-effecting setting are not supported before version 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportComposableNotSupportedBeforeV3">
            <summary>
            Function imports with composable setting are not supported before version 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.FunctionImportBindableNotSupportedBeforeV3">
            <summary>
            Function imports with bindable setting are not supported before version 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.MaxLengthOutOfRange">
            <summary>
            Max length is out of range.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.PathExpressionHasNoEntityContext">
            <summary>
            Binding context for Path expression does not supply an entity type
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidSrid">
            <summary>
            Invalid value for SRID
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidMaxLength">
            <summary>
            Invalid value for max length
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidLong">
            <summary>
            Invalid value for long
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidInteger">
            <summary>
            Invalid value for integer
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidAssociationSet">
            <summary>
            Invalid association set
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidParameterMode">
            <summary>
            Invalid parameter mode
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedEntityType">
            <summary>
            No entity type with that name exists.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidValue">
            <summary>
            Value is invalid
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidBinary">
            <summary>
            Binary value is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidFloatingPoint">
            <summary>
            Floating point value is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidDateTime">
            <summary>
            DateTime value is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidDateTimeOffset">
            <summary>
            DateTimeOffset value is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidDecimal">
            <summary>
            Decimal value is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidGuid">
            <summary>
            Guid value is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidTypeKindNone">
            <summary>
            The type kind None is not semantically valid. A semantically valid model must not contain elements of type kind None.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidIfExpressionIncorrectNumberOfOperands">
            <summary>
            The if expression is invalid because it does not have 3 elements.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EnumsNotSupportedBeforeV3">
            <summary>
            Enums were present in a model with a version below 3.0
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EnumMemberTypeMustMatchEnumUnderlyingType">
            <summary>
            The type of an enum member value must match the underlying of the parent enum.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidIsTypeExpressionIncorrectNumberOfOperands">
            <summary>
            The IsType expression is invalid because it does not have 1 element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidTypeName">
            <summary>
            The type name is not fully qualified and not a primitive.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidQualifiedName">
            <summary>
            The term name is not fully qualified.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NoReadersProvided">
            <summary>
            No model was parsed because no XmlReaders were provided.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NullXmlReader">
            <summary>
            Model could not be parsed because one of the XmlReaders was null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.IsUnboundedCannotBeTrueWhileMaxLengthIsNotNull">
            <summary>
            IsUnbounded cannot be true if MaxLength is non-null.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidElementAnnotation">
            <summary>
            ImmediateValueAnnotation is invalid as an element annotation.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidLabeledElementExpressionIncorrectNumberOfOperands">
            <summary>
            The LabeledElement expression is invalid because it does not have 1 element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedLabeledElement">
            <summary>
            Could not find a LabeledElement with that name
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedEnumMember">
            <summary>
            Could not find a enum member with that name
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidAssertTypeExpressionIncorrectNumberOfOperands">
            <summary>
            The AssertType expression is invalid because it does not have 1 element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedParameter">
            <summary>
            Could not find a Parameter with that name
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NavigationPropertyWithRecursiveContainmentTargetMustBeOptional">
            <summary>
            A navigation property with <see cref="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget"/> = true must point to an optional target.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NavigationPropertyWithRecursiveContainmentSourceMustBeFromZeroOrOne">
            <summary>
            If a navigation property has <see cref="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget"/> = true and the target entity type is the same as 
            the declaring type of the property, then the multiplicity of the source of navigation is Zero-Or-One.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NavigationPropertyWithNonRecursiveContainmentSourceMustBeFromOne">
            <summary>
            If a navigation property has <see cref="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget"/> = true and the target entity type is defferent than
            the declaring type of the property, then the multiplicity of the source of navigation is One.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NavigationPropertyContainsTargetNotSupportedBeforeV3">
            <summary>
            Navigation properties with <see cref="P:Microsoft.Data.Edm.IEdmNavigationProperty.ContainsTarget"/> setting are not supported before version 3.0.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ImpossibleAnnotationsTarget">
            <summary>
            The annotation target path cannot possibly refer to an annotable element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.CannotAssertNullableTypeAsNonNullableType">
            <summary>
            A nullable type is not valid if a non-nullable type is required.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.CannotAssertPrimitiveExpressionAsNonPrimitiveType">
            <summary>
            The expression is a primitive constant, and cannot be valid for an non-primitive type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ExpressionPrimitiveKindNotValidForAssertedType">
            <summary>
            The primitive type is not valid for the requested type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NullCannotBeAssertedToBeANonNullableType">
            <summary>
            Null is not valid in a non nullable expression.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ExpressionNotValidForTheAssertedType">
            <summary>
            The expression is not valid for the asserted type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.CollectionExpressionNotValidForNonCollectionType">
            <summary>
            A collection expression is not valid for a non-collection type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.RecordExpressionNotValidForNonStructuredType">
            <summary>
            A record expression is not valid for a non-structured type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.RecordExpressionMissingRequiredProperty">
            <summary>
            The record expression does not have all of the properties required for the specified type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.RecordExpressionHasExtraProperties">
            <summary>
            The record expression's type is not open, but the record expression has extra properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DuplicateAnnotation">
            <summary>
            Target has multiple annotations with the same term and same qualifier.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.IncorrectNumberOfArguments">
            <summary>
            Function application has wrong number of arguments for the function being applied.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DuplicateAlias">
            <summary>
            Is it invalid to have multiple using statements with the same alias in a single schema element.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ReferencedTypeMustHaveValidName">
            <summary>
            A model cannot be serialized to CSDL if it has references to types without fully qualified names.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.SingleFileExpected">
            <summary>
            The model could not be serialized because multiple schemas were produced and only a single output stream was found.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.UnknownEdmxVersion">
            <summary>
            The Edmx version is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.UnknownEdmVersion">
            <summary>
            The EdmVersion is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NoSchemasProduced">
            <summary>
            Nothing was written because no schemas were produced.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DuplicateEntityContainerName">
            <summary>
            Model has multiple entity containers with the same name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.ContainerElementContainerNameIncorrect">
            <summary>
            The container name of a container element must be the full name of the container entity container.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.PrimitiveConstantExpressionNotValidForNonPrimitiveType">
            <summary>
            A primitive constant expression is not valid for a non-primitive type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.IntegerConstantValueOutOfRange">
            <summary>
            The value of the integer constant is out of range for the asserted type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.StringConstantLengthOutOfRange">
            <summary>
            The length of the string constant is too large for the asserted type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BinaryConstantLengthOutOfRange">
            <summary>
            The length of the binary constant is too large for the asserted type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidFunctionImportParameterMode">
            <summary>
            None is not a valid mode for a function import parameter.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.TypeMustNotHaveKindOfNone">
            <summary>
            A type without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.PrimitiveTypeMustNotHaveKindOfNone">
            <summary>
            A primitive type without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.PropertyMustNotHaveKindOfNone">
            <summary>
            A property without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.TermMustNotHaveKindOfNone">
            <summary>
            A term without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.SchemaElementMustNotHaveKindOfNone">
            <summary>
            A schema element without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntityContainerElementMustNotHaveKindOfNone">
            <summary>
            An entity container element without other errors must not have kind of none.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BinaryValueCannotHaveEmptyValue">
            <summary>
            A binary value must have content.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntitySetCanOnlyBeContainedByASingleNavigationProperty">
            <summary>
            There can only be a single navigation property mapping with containment that targets a particular entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InconsistentNavigationPropertyPartner">
            <summary>
            The navigation properties partner does not point back to the correct type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntitySetCanOnlyHaveSingleNavigationPropertyWithContainment">
            <summary>
            An entity set can only have one navigation property with containment.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EntitySetNavigationMappingMustBeBidirectional">
            <summary>
            If a navigation property is traversed from an entity set, and then it's partner is traversed from the target of the first mapping, the destination should be the originating entity set.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DuplicateNavigationPropertyMapping">
            <summary>
            There can only be a single mapping from a given EntitySet with a particular navigation property.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.AllNavigationPropertiesMustBeMapped">
            <summary>
            An entity set must have a mapping for all of the navigation properties in its element type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.TypeAnnotationMissingRequiredProperty">
            <summary>
            Type annotation does not have a property binding for all required properties.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.TypeAnnotationHasExtraProperties">
            <summary>
            Type annotation has a property binding for a non-existant property and its type is not open.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidTime">
            <summary>
            Time value is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidPrimitiveValue">
            <summary>
            The primitive type is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.EnumMustHaveIntegerUnderlyingType">
            <summary>
            An Enum type must have an underlying type of integer.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedTerm">
            <summary>
            Could not find a term with this name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadPrincipalPropertiesInReferentialConstraint">
            <summary>
            The principal properties of a referential constraint must match the key of the referential constraint.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.DuplicateDirectValueAnnotationFullName">
            <summary>
            A direct value annotation with the same name and namespace already exists.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.NoEntitySetsFoundForType">
            <summary>
            AssociationSetEnd cannot infer an entity set because no set exists of the given type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.CannotInferEntitySetWithMultipleSetsPerType">
            <summary>
            AssociationSetEnd cannot infer an entity set because more than one set exists of the given type.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidEntitySetPath">
            <summary>
            Invalid entity set path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.InvalidEnumMemberPath">
            <summary>
            Invalid enum member path.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.QualifierMustBeSimpleName">
            <summary>
            An annotation qualifier must be a simple name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedEnumType">
            <summary>
            Enum type could not be resolved.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.BadUnresolvedTarget">
            <summary>
            Could not find a target with this name.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.Validation.EdmErrorCode.PathIsNotValidForTheGivenContext">
            <summary>
            Path cannot be resolved in the given context.
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.PlatformHelper">
            <summary>
            Helper methods that provide a common API surface on all platforms.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.PlatformHelper.EmptyTypes">
            <summary>
            Use this instead of Type.EmptyTypes.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.PlatformHelper.UriSchemeHttp">
            <summary>
            Use this instead of Uri.UriSchemeHttp.
            </summary>
        </member>
        <member name="F:Microsoft.Data.Edm.PlatformHelper.UriSchemeHttps">
            <summary>
            Use this instead of Uri.UriSchemeHttps.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetAssembly(System.Type)">
            <summary>
            Replacement for Type.Assembly.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsValueType(System.Type)">
            <summary>
            Replacement for Type.IsValueType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsGenericParameter(System.Type)">
            <summary>
            Replacement for Type.IsGenericParameter.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsAbstract(System.Type)">
            <summary>
            Replacement for Type.IsAbstract.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsGenericType(System.Type)">
            <summary>
            Replacement for Type.IsGenericType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsGenericTypeDefinition(System.Type)">
            <summary>
            Replacement for Type.IsGenericTypeDefinition.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsVisible(System.Type)">
            <summary>
            Replacement for Type.IsVisible.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsInterface(System.Type)">
            <summary>
            Replacement for Type.IsInterface.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsClass(System.Type)">
            <summary>
            Replacement for Type.IsClass.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsEnum(System.Type)">
            <summary>
            Replacement for Type.IsEnum.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetBaseType(System.Type)">
            <summary>
            Replacement for Type.BaseType.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.ContainsGenericParameters(System.Type)">
            <summary>
            Replacement for Type.ContainsGenericParameters.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.AsReadOnly``1(``0[])">
            <summary>
            Replacement for Array.AsReadOnly(T[]).
            </summary>
            <typeparam name="T">Type of items in the array.</typeparam>
            <param name="array">Array to use to create the ReadOnlyCollection.</param>
            <returns>ReadOnlyCollection containing the specified array items.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.ConvertStringToDateTime(System.String)">
            <summary>
            Converts a string to a DateTime.
            </summary>
            <param name="text">String to be converted.</param>
            <returns>See documentation for method being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.ConvertStringToDateTimeOffset(System.String)">
            <summary>
            Converts a string to a DateTimeOffset.
            </summary>
            <param name="text">String to be converted.</param>
            <returns>See documentation for method being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.AddSecondsPaddingIfMissing(System.String)">
            <summary>
            Adds the seconds padding as zeros to the date time string if seconds part is missing.
            </summary>
            <param name="text">String that needs seconds padding</param>
            <returns>DateTime string after adding seconds padding</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.ConvertDateTimeToStringInternal(System.DateTime)">
            <summary>
            Converts the DateTime to a string, internal method.
            </summary>
            <param name="dateTime">DateTime to convert to String.</param>
            <returns>Converted String.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.ConvertDateTimeToString(System.DateTime)">
            <summary>
            Converts a DateTime to a string.
            </summary>
            <param name="dateTime">DateTime to be converted.</param>
            <returns>See documentation for property being accessed in the body of the method.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetTypeOrThrow(System.String)">
            <summary>
            Gets the specified type.
            </summary>
            <param name="typeName">Name of the type to get.</param>
            <exception cref="T:System.TypeLoadException">Throws if the type could not be found.</exception>
            <returns>Type instance that represents the specified type name.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetTypeCode(System.Type)">
            <summary>
            Gets the TypeCode for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>TypeCode representing the specified type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetUnicodeCategory(System.Char)">
            <summary>
            Gets the Unicode Category of the specified character.
            </summary>
            <param name="c">Character to get category of.</param>
            <returns>Category of the character.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsProperty(System.Reflection.MemberInfo)">
            <summary>
            Replacement for usage of MemberInfo.MemberType property.
            </summary>
            <param name="member">MemberInfo on which to access this method.</param>
            <returns>True if the specified member is a property, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsPrimitive(System.Type)">
            <summary>
            Replacement for usage of Type.IsPrimitive property.
            </summary>
            <param name="type">Type on which to access this method.</param>
            <returns>True if the specified type is primitive, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsSealed(System.Type)">
            <summary>
            Replacement for usage of Type.IsSealed property.
            </summary>
            <param name="type">Type on which to access this method.</param>
            <returns>True if the specified type is sealed, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.IsMethod(System.Reflection.MemberInfo)">
            <summary>
            Replacement for usage of MemberInfo.MemberType property.
            </summary>
            <param name="member">MemberInfo on which to access this method.</param>
            <returns>True if the specified member is a method, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.AreMembersEqual(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Compares two methodInfos and returns true if they represent the same method.
            Need this for Windows Phone as the method Infos of the same method are not always instance equivalent.
            </summary>
            <param name="member1">MemberInfo to compare.</param>
            <param name="member2">MemberInfo to compare.</param>
            <returns>True if the specified member is a method, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetPublicProperties(System.Type,System.Boolean)">
            <summary>
            Gets public properties for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="instanceOnly">True if method should return only instance properties, false if it should return both instance and static properties.</param>
            <returns>Enumerable of public properties for the type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetPublicProperties(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets public properties for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="instanceOnly">True if method should return only instance properties, false if it should return both instance and static properties.</param>
            <param name="declaredOnly">True if method should return only properties that are declared on the type, false if it should return properties declared on the type as well as those inherited from any base types.</param>
            <returns>Enumerable of public properties for the type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetInstanceConstructors(System.Type,System.Boolean)">
            <summary>
            Gets instance constructors for the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="isPublic">True if method should return only public constructors, false if it should return only non-public constructors.</param>
            <returns>Enumerable of instance constructors for the specified type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetInstanceConstructor(System.Type,System.Boolean,System.Type[])">
            <summary>
            Gets a instance constructor for the type that takes the specified argument types.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="isPublic">True if method should search only public constructors, false if it should search only non-public constructors.</param>
            <param name="argTypes">Array of argument types for the constructor.</param>
            <returns>ConstructorInfo for the constructor with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.TryGetMethod(System.Type,System.String,System.Type[],System.Reflection.MethodInfo@)">
            <summary>
            Tries to the get method from the type, returns null if not found.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>Returns True if found.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetMethod(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a method on the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="name">Name of the method on the type.</param>
            <param name="isPublic">True if method should search only public methods, false if it should search only non-public methods.</param>
            <param name="isStatic">True if method should search only static methods, false if it should search only instance methods.</param>
            <returns>MethodInfo for the method with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetMethod(System.Type,System.String,System.Type[],System.Boolean,System.Boolean)">
            <summary>
            Gets a method on the specified type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <param name="name">Name of the method on the type.</param>
            <param name="types">Argument types for the method.</param>
            <param name="isPublic">True if method should search only public methods, false if it should search only non-public methods.</param>
            <param name="isStatic">True if method should search only static methods, false if it should search only instance methods.</param>
            <returns>MethodInfo for the method with the specified characteristics if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetPublicStaticMethods(System.Type)">
            <summary>
            Gets all public static methods for a type.
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>Enumerable of all public static methods for the specified type.</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.GetNonPublicNestedTypes(System.Type)">
            <summary>
            Replacement for Type.GetNestedTypes(BindingFlags.NonPublic)
            </summary>
            <param name="type">Type on which to call this helper method.</param>
            <returns>All types nested in the current type</returns>
        </member>
        <member name="M:Microsoft.Data.Edm.PlatformHelper.CreateCompiled(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Creates a Compiled Regex expression
            </summary>
            <param name="pattern">Pattern to match.</param>
            <param name="options">Options to use.</param>
            <returns>Regex expression to match supplied patter</returns>
            <remarks>Is marked as compiled option only in platforms otherwise RegexOption.None is used</remarks>
        </member>
        <member name="T:AssemblyRef">
            <summary>
            Sets public key string for friend assemblies.
            </summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKey">
            <summary>ProductPublicKey is an official MS supported public key for external releases.</summary>
        </member>
        <member name="F:AssemblyRef.TestPublicKey">
            <summary>TestPublicKey is an unsupported strong key for testing and internal use only</summary>
        </member>
        <member name="F:AssemblyRef.ProductPublicKeyToken">
            <summary>Dont know what this is</summary>
        </member>
        <member name="F:AssemblyRef.OfficialSilverLightPublicKeyToken">
            <summary>Used for comparison with external assemblies for silverlight like Microsoft.VisualBasic.</summary>
        </member>
        <member name="F:AssemblyRef.OfficialDesktopPublicKeyToken">
            <summary>Used for comparison with external assemblies for desktop like Microsoft.VisualBasic.</summary>
        </member>
        <member name="T:Microsoft.Data.Edm.EntityRes">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = EntityRes.GetString(EntityRes.MyIdenfitier);
             </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Annotations_DocumentationPun(System.Object)">
            <summary>
            A string like "Annotations in the 'Documentation' namespace must implement 'IEdmDocumentation', but '{0}' does not."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Annotations_TypeMismatch(System.Object,System.Object)">
            <summary>
            A string like "Annotation of type '{0}' cannot be interpreted as '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Constructable_TargetMustBeStock(System.Object)">
            <summary>
            A string like "Navigation target entity type must be '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.TypeSemantics_CouldNotConvertTypeReference(System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' could not be converted to be a '{1}' type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueWriter_NonSerializableValue(System.Object)">
            <summary>
            A string like "The value writer cannot write a value of kind '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Edm_Evaluator_NoTermTypeAnnotationOnType(System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' must have a single type annotation with term type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Edm_Evaluator_NoValueAnnotationOnType(System.Object,System.Object)">
            <summary>
            A string like "Type '{0}' must have a single value annotation with term '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Edm_Evaluator_NoValueAnnotationOnElement(System.Object)">
            <summary>
            A string like "Element must have a single value annotation with term '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Edm_Evaluator_UnrecognizedExpressionKind(System.Object)">
            <summary>
            A string like "Expression with kind '{0}' cannot be evaluated."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Edm_Evaluator_UnboundFunction(System.Object)">
            <summary>
            A string like "Function '{0}' is not present in the execution environment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Edm_Evaluator_UnboundPath(System.Object)">
            <summary>
            A string like "Path segment '{0}' has no binding in the execution environment."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Edm_Evaluator_FailedTypeAssertion(System.Object)">
            <summary>
            A string like "Value fails to match type '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_SystemNamespaceEncountered(System.Object)">
            <summary>
            A string like "The namespace '{0}' is a system namespace and cannot be used by non-system types. Please choose a different namespace."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EntitySetTypeHasNoKeys(System.Object,System.Object)">
            <summary>
            A string like "The entity set '{0}' is based on type '{1}' that has no keys defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicateEndName(System.Object)">
            <summary>
            A string like "An end with the name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicatePropertyNameSpecifiedInEntityKey(System.Object,System.Object)">
            <summary>
            A string like "The key specified in entity type '{0}' is not valid. Property '{1}' is referenced more than once in the key element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidComplexTypeAbstract(System.Object)">
            <summary>
            A string like "The complex type '{0}' is marked as abstract. Abstract complex types are only supported in version 1.1 EDM models."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidComplexTypePolymorphic(System.Object)">
            <summary>
            A string like "The complex type '{0}' has a base type specified. Complex type inheritance is only supported in version 1.1 EDM models."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidKeyNullablePart(System.Object,System.Object)">
            <summary>
            A string like "The key part '{0}' for type '{1}' is not valid. All parts of the key must be non nullable."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EntityKeyMustBeScalar(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' in entity type '{1}' is not valid. All properties that are part of the entity key must be of primitive type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidKeyKeyDefinedInBaseClass(System.Object,System.Object)">
            <summary>
            A string like "The key usage is not valid. '{0}' cannot define keys because one of its base classes '{1}' defines keys."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_KeyMissingOnEntityType(System.Object)">
            <summary>
            A string like "The entity type '{0}' has no key defined. Define the key for this entity type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_BadNavigationPropertyUndefinedRole(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The navigation property '{0}' is not valid. The role '{1}' is not defined in relationship '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_BadNavigationPropertyRolesCannotBeTheSame(System.Object)">
            <summary>
            A string like "The navigation property '{0}'is not valid. The from role and to role are the same."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_BadNavigationPropertyCouldNotDetermineType(System.Object)">
            <summary>
            A string like "The navigation property type could not be determined from the role '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EndWithManyMultiplicityCannotHaveOperationsSpecified(System.Object)">
            <summary>
            A string like "The navigation property '{0}' cannot have 'OnDelete' specified since its multiplicity is '*'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EndNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each name and plural name in a relationship must be unique. '{0}' is already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_SameRoleReferredInReferentialConstraint(System.Object)">
            <summary>
            A string like "In relationship '{0}', the principal and dependent role of the referential constraint refers to the same role in the relationship type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NavigationPropertyPrincipalEndMultiplicityUpperBoundMustBeOne(System.Object)">
            <summary>
            A string like "The principal navigation property '{0}' has an invalid multiplicity. Valid values for the multiplicity of a principal end are '0..1' or '1'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityOfPrincipalEndDependentPropertiesAllNonnullable(System.Object,System.Object)">
            <summary>
            A string like "The multiplicity of the principal end '{0}' is not valid. Because all dependent properties of the end '{1}' are non-nullable, the multiplicity of the principal end must be '1'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityOfPrincipalEndDependentPropertiesAllNullable(System.Object,System.Object)">
            <summary>
            A string like "The multiplicity of the principal end '{0}' is not valid. Because all dependent properties of the end '{1}' are nullable, the multiplicity of the principal end must be '0..1'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityOfDependentEndMustBeZeroOneOrOne(System.Object)">
            <summary>
            A string like "The multiplicity of the dependent end '{0}' is not valid. Because the dependent properties represent the dependent end key, the multiplicity of the dependent end must be '0..1' or '1'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMultiplicityOfDependentEndMustBeMany(System.Object)">
            <summary>
            A string like "The multiplicity of the dependent end '{0}' is not valid. Because the dependent properties don't represent the dependent end key, the the multiplicity of the dependent end must be '*'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidToPropertyInRelationshipConstraint(System.Object,System.Object)">
            <summary>
            A string like "The properties referred by the dependent role '{0}' must be a subset of the key of the entity type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_TypeMismatchRelationshipConstraint(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The types of all properties in the dependent role of a referential constraint must be the same as the corresponding property types in the principal role. The type of property '{0}' on entity '{1}' does not match the type of property '{2}' on entity '{3}' in the referential constraint '{4}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraintDependentEnd(System.Object,System.Object)">
            <summary>
            A string like "There is no property with name '{0}' defined in the type referred to by role '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidPropertyInRelationshipConstraintPrimaryEnd(System.Object,System.Object)">
            <summary>
            A string like "The principal end properties in the referential constraint of the association '{0}' do not match the key of the type referred to by role '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NullableComplexTypeProperty(System.Object)">
            <summary>
            A string like "The property '{0}' is of a complex type and is nullable. Nullable complex type properties are not supported in EDM versions 1.0 and 2.0."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidPropertyType(System.Object)">
            <summary>
            A string like "A property cannot be of type '{0}'. The property type must be a complex, a primitive or an enum type, or a collection of complex, primitive, or enum types."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ComposableFunctionImportCannotBeSideEffecting(System.Object)">
            <summary>
            A string like "The function import '{0}' cannot be composable and side-effecting at the same time."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_BindableFunctionImportMustHaveParameters(System.Object)">
            <summary>
            A string like "The bindable function import '{0}' must have at least one parameter."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportWithUnsupportedReturnTypeV1(System.Object)">
            <summary>
            A string like "The return type is not valid in function import '{0}'. In version 1.0 a function import can have no return type or return a collection of scalar values or a collection of entities."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportWithUnsupportedReturnTypeAfterV1(System.Object)">
            <summary>
            A string like "The return type is not valid in function import '{0}'. The function import can have no return type or return a scalar, a complex type, an entity type or a collection of those."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportReturnEntitiesButDoesNotSpecifyEntitySet(System.Object)">
            <summary>
            A string like "The function import '{0}' returns entities but does not specify an entity set."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportEntityTypeDoesNotMatchEntitySet(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The function import '{0}' returns entities of type '{1}' that cannot exist in the entity set '{2}' specified for the function import."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportEntityTypeDoesNotMatchEntitySet2(System.Object,System.Object)">
            <summary>
            A string like "The function import '{0}' returns entities of type '{1}' that cannot be returned by the entity set path specified for the function import."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportEntitySetExpressionKindIsInvalid(System.Object,System.Object)">
            <summary>
            A string like "The function import '{0}' specifies an entity set expression of kind {1} which is not supported in this context. Function import entity set expression can be either an entity set reference or a path starting with a function import parameter and traversing navigation properties."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportEntitySetExpressionIsInvalid(System.Object)">
            <summary>
            A string like "The function import '{0}' specifies an entity set expression which is not valid. Function import entity set expression can be either an entity set reference or a path starting with a function import parameter and traversing navigation properties."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportSpecifiesEntitySetButNotEntityType(System.Object)">
            <summary>
            A string like "The function import '{0}' specifies an entity set but does not return entities."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ComposableFunctionImportMustHaveReturnType(System.Object)">
            <summary>
            A string like "The composable function import '{0}' must specify a return type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ParameterNameAlreadyDefinedDuplicate(System.Object)">
            <summary>
            A string like "Each parameter name in a function must be unique. The parameter name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicateEntityContainerMemberName(System.Object)">
            <summary>
            A string like "Each member name in an EntityContainer must be unique. A member with name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_SchemaElementNameAlreadyDefined(System.Object)">
            <summary>
            A string like "An element with the name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidMemberNameMatchesTypeName(System.Object)">
            <summary>
            A string like "The member name '{0}' cannot be used in a type with the same name. Member names cannot be the same as their enclosing type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_PropertyNameAlreadyDefined(System.Object)">
            <summary>
            A string like "Each property name in a type must be unique. Property name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_KeyPropertyMustBelongToEntity(System.Object,System.Object)">
            <summary>
            A string like "The key property '{0}' must belong to the entity '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DependentPropertiesMustBelongToDependentEntity(System.Object,System.Object)">
            <summary>
            A string like "The dependent property '{0}' must belong to the dependent entity '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DeclaringTypeMustBeCorrect(System.Object)">
            <summary>
            A string like "The property '{0}' cannot belong to a type other than its declaring type. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InaccessibleType(System.Object)">
            <summary>
            A string like "The named type '{0}' could not be found from the model being validated."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_AmbiguousType(System.Object)">
            <summary>
            A string like "The named type '{0}' is ambiguous from the model being validated."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidNavigationPropertyType(System.Object)">
            <summary>
            A string like "The type of the navigation property '{0}' is invalid. The navigation target type must be an entity type or a collection of entity type. The navigation target entity type must match the declaring type of the partner property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NavigationPropertyWithRecursiveContainmentTargetMustBeOptional(System.Object)">
            <summary>
            A string like "The target multiplicity of the navigation property '{0}' is invalid. If a navigation property has 'ContainsTarget' set to true and declaring entity type of the property is the same or inherits from the target entity type, then the property represents a recursive containment and it must have an optional target represented by a collection or a nullable entity type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NavigationPropertyWithRecursiveContainmentSourceMustBeFromZeroOrOne(System.Object)">
            <summary>
            A string like "The source multiplicity of the navigation property '{0}' is invalid. If a navigation property has 'ContainsTarget' set to true and declaring entity type of the property is the same or inherits from the target entity type, then the property represents a recursive containment and the multiplicity of the navigation source must be zero or one."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NavigationPropertyWithNonRecursiveContainmentSourceMustBeFromOne(System.Object)">
            <summary>
            A string like "The source multiplicity of the navigation property '{0}' is invalid. If a navigation property has 'ContainsTarget' set to true and declaring entity type of the property is not the same as the target entity type, then the property represents a non-recursive containment and the multiplicity of the navigation source must be exactly one."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_OnlyInputParametersAllowedInFunctions(System.Object,System.Object)">
            <summary>
            A string like "The mode of the parameter '{0}' in the function '{1}' is invalid. Only input parameters are allowed in functions."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidFunctionImportParameterMode(System.Object,System.Object)">
            <summary>
            A string like "The mode of the parameter '{0}' in the function import '{1}' is invalid."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportParameterIncorrectType(System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' of parameter '{1}' is invalid. A function import parameter must be one of the following types: A simple type or complex type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ComplexTypeMustHaveProperties(System.Object)">
            <summary>
            A string like "The complex type '{0}' is invalid. A complex type must contain at least one property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicateDependentProperty(System.Object,System.Object)">
            <summary>
            A string like "The dependent property '{0}' of navigation property '{1}' is a duplicate."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidPropertyTypeConcurrencyMode(System.Object)">
            <summary>
            A string like "A property with a fixed concurrency mode cannot be of type '{0}'. The property type must be a primitive type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EntityKeyMustNotBeBinaryBeforeV2(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' in entity type '{1}' is not valid. Binary types are not allowed in entity keys before version 2.0."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EnumMemberTypeMustMatchEnumUnderlyingType(System.Object)">
            <summary>
            A string like "The type of the value of enum member '{0}' must match the underlying type of the parent enum."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EnumMemberNameAlreadyDefined(System.Object)">
            <summary>
            A string like "Each member name of an enum type must be unique. Enum member name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_CannotAssertNullableTypeAsNonNullableType(System.Object)">
            <summary>
            A string like "Cannot assert the nullable type '{0}' as a non-nullable type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ExpressionPrimitiveKindCannotPromoteToAssertedType(System.Object,System.Object)">
            <summary>
            A string like "Cannot promote the primitive type '{0}' to the specified primitive type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_RecordExpressionMissingProperty(System.Object)">
            <summary>
            A string like "The record expression does not have a constructor for a property named '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_RecordExpressionHasExtraProperties(System.Object)">
            <summary>
            A string like "The type of the record expression is not open and does not contain a property named '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicateAnnotation(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The annotated element '{0}' has multiple annotations with the term '{1}' and the qualifier '{2}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_IncorrectNumberOfArguments(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The function application provides '{0}' arguments, but the function '{1}' expects '{2}' arguments."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicateEntityContainerName(System.Object)">
            <summary>
            A string like "Each entity container name in a function must be unique. The name '{0}' is already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_StringConstantLengthOutOfRange(System.Object,System.Object)">
            <summary>
            A string like "The value of the string constant is '{0}' characters long, but the max length of its type is '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_BinaryConstantLengthOutOfRange(System.Object,System.Object)">
            <summary>
            A string like "The value of the binary constant is '{0}' characters long, but the max length of its type is '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_TermMustNotHaveKindOfNone(System.Object)">
            <summary>
            A string like "A term without other errors must not have kind of none. The kind of term '{0}' is none."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_SchemaElementMustNotHaveKindOfNone(System.Object)">
            <summary>
            A string like "A schema element without other errors must not have kind of none. The kind of schema element '{0}' is none."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_PropertyMustNotHaveKindOfNone(System.Object)">
            <summary>
            A string like "A property without other errors must not have kind of none. The kind of property '{0}' is none."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_PrimitiveTypeMustNotHaveKindOfNone(System.Object)">
            <summary>
            A string like "A primitive type without other errors must not have kind of none. The kind of primitive type '{0}' is none."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EntityContainerElementMustNotHaveKindOfNone(System.Object)">
            <summary>
            A string like "An entity container element without other errors must not have kind of none. The kind of entity container element '{0}' is none."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_DuplicateNavigationPropertyMapping(System.Object,System.Object)">
            <summary>
            A string like "The entity set '{0}' should have only a single mapping for the property '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EntitySetNavigationMappingMustBeBidirectional(System.Object,System.Object)">
            <summary>
            A string like "The mapping of the entity set '{0}' and navigation property '{1}' is invalid because the navigation property mapping must have a mapping with the navigation property's partner that points back to the originating entity set. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EntitySetCanOnlyBeContainedByASingleNavigationProperty(System.Object)">
            <summary>
            A string like "The entity set '{0}' is invalid because it is contained by more than one navigation property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_TypeAnnotationMissingRequiredProperty(System.Object)">
            <summary>
            A string like "The type annotation is missing a binding for the property '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_TypeAnnotationHasExtraProperties(System.Object)">
            <summary>
            A string like "They type of the type annotation is not open, and does not contain a property named '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EnumMustHaveIntegralUnderlyingType(System.Object)">
            <summary>
            A string like "The underlying type of '{0}' is not valid. The underlying type of an enum type must be an integral type. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InaccessibleTerm(System.Object)">
            <summary>
            A string like "The term '{0}' could not be found from the model being validated."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InaccessibleTarget(System.Object)">
            <summary>
            A string like "The target '{0}' could not be found from the model being validated."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ElementDirectValueAnnotationFullNameMustBeUnique(System.Object,System.Object)">
            <summary>
            A string like "An element already has a direct value annotation with the namespace '{0}' and name '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NoEntitySetsFoundForType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The association set '{0}' cannot assume an entity set for the role '{2}' because there are no entity sets for the role type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_CannotInferEntitySetWithMultipleSetsPerType(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The association set '{0}' must specify an entity set for the role '{2}' because there are multiple entity sets for the role type '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EntitySetRecursiveNavigationPropertyMappingsMustPointBackToSourceEntitySet(System.Object,System.Object)">
            <summary>
            A string like "Because the navigation property '{0}' is recursive, the mapping from the entity set '{1}' must point back to itself."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NavigationPropertyEntityMustNotIndirectlyContainItself(System.Object)">
            <summary>
            A string like "The navigation property '{0}' is invalid because it indirectly contains itself."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_PathIsNotValidForTheGivenContext(System.Object)">
            <summary>
            A string like "The path cannot be resolved in the given context. The segment '{0}' failed to resolve."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EntitySetNavigationPropertyMappingMustPointToValidTargetForProperty(System.Object,System.Object)">
            <summary>
            A string like "The entity set '{1}' is not a valid destination for the navigation property '{0}' because it cannot hold an element of the target entity type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmModel_NameIsTooLong(System.Object)">
            <summary>
            A string like "The specified name must not be longer than 480 characters: '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmModel_NameIsNotAllowed(System.Object)">
            <summary>
            A string like "The specified name is not allowed: '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmModel_NamespaceNameIsTooLong(System.Object)">
            <summary>
            A string like "The specified name must not be longer than 480 characters: '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_EdmModel_NamespaceNameIsNotAllowed(System.Object)">
            <summary>
            A string like "The specified namespace name is not allowed: '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_PropertyMustNotBeNull(System.Object,System.Object)">
            <summary>
            A string like "The value of the property '{0}.{1}' must not be null."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_EnumPropertyValueOutOfRange(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The property '{0}.{1}' of type '{2}' has value '{3}' that is not a valid enum member."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_InterfaceKindValueMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "An object with the value '{0}' of the '{1}.{2}' property must implement '{3}' interface."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_TypeRefInterfaceTypeKindValueMismatch(System.Object,System.Object)">
            <summary>
            A string like "An object implementing '{0}' interface has type definition of kind '{1}'. The type reference interface must match to the kind of the  definition."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_InterfaceKindValueUnexpected(System.Object,System.Object,System.Object)">
            <summary>
            A string like "The value '{0}' of the property '{1}.{2}' is not semantically valid. A semantically valid model must not contain elements of kind '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_EnumerableMustNotHaveNullElements(System.Object,System.Object)">
            <summary>
            A string like "The value of the enumeration the property '{0}.{1}' contains a null element. Enumeration properties must not contain null elements."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_NavigationPartnerInvalid(System.Object)">
            <summary>
            A string like "The partner of the navigation property '{0}' must not be the same property, and must point back to the navigation property."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_InterfaceCriticalCycleInTypeHierarchy(System.Object)">
            <summary>
            A string like "The chain of base types of type '{0}' is cyclic."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Serializer_NonInlineFunctionImportReturnType(System.Object)">
            <summary>
            A string like "The function import '{0}' could not be serialized because its return type cannot be represented inline."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Serializer_ReferencedTypeMustHaveValidName(System.Object)">
            <summary>
            A string like "A referenced type can not be serialized with an invalid name. The name '{0}' is invalid."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Serializer_OutOfLineAnnotationTargetMustHaveValidName(System.Object)">
            <summary>
            A string like "The annotation can not be serialized with an invalid target name. The name '{0}' is invalid."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_EmptyFile(System.Object)">
            <summary>
            A string like "{0} does not contain a schema definition, or the XmlReader provided started at the end of the file."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_MissingAttribute(System.Object,System.Object)">
            <summary>
            A string like "Required schema attribute '{0}' is not present on element '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_TextNotAllowed(System.Object)">
            <summary>
            A string like "The current schema element does not support text '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_UnexpectedAttribute(System.Object)">
            <summary>
            A string like "The attribute '{0}' was not expected in the given context."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_UnexpectedElement(System.Object)">
            <summary>
            A string like "The schema element '{0}' was not expected in the given context."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_UnusedElement(System.Object)">
            <summary>
            A string like "Unused schema element: '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_UnexpectedNodeType(System.Object)">
            <summary>
            A string like "Unexpected XML node type: {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_UnexpectedRootElement(System.Object,System.Object)">
            <summary>
            A string like "The element '{0}' was unexpected for the root element. The root element should be {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_UnexpectedRootElementWrongNamespace(System.Object,System.Object)">
            <summary>
            A string like "The namespace '{0}' is invalid. The root element is expected to belong to one of the following namespaces: '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.XmlParser_UnexpectedRootElementNoNamespace(System.Object)">
            <summary>
            A string like "The root element has no namespace. The root element is expected to belong to one of the following namespaces: '{0}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidAlias(System.Object)">
            <summary>
            A string like "The alias '{0}' is not a valid simple name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidDeleteAction(System.Object)">
            <summary>
            A string like "The delete action '{0}' is not valid. Action must be: 'None', 'Cascade', or 'Restrict'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidAssociationIncorrectNumberOfEnds(System.Object)">
            <summary>
            A string like "The association '{0}' is not valid. Associations must contain exactly two end elements."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidAssociationSetIncorrectNumberOfEnds(System.Object)">
            <summary>
            A string like "The association set '{0}' is not valid. Association sets must contain at most two end elements."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidConcurrencyMode(System.Object)">
            <summary>
            A string like "The concurrency mode '{0}' is not valid. Concurrency mode must be: 'None', or 'Fixed'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidParameterMode(System.Object)">
            <summary>
            A string like "Parameter mode '{0}' is not valid. Parameter mode must be: 'In', 'Out', or 'InOut'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidEndRoleInRelationshipConstraint(System.Object,System.Object)">
            <summary>
            A string like "There is no Role with name '{0}' defined in relationship '{1}'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidMultiplicity(System.Object)">
            <summary>
            A string like "The multiplicity '{0}' is not valid. Multiplicity must be: '*', '0..1', or '1'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidTypeName(System.Object)">
            <summary>
            A string like "The type name '{0}' is invalid. The type name must be that of a primitive type, a fully qualified name or an inline 'Collection' or 'Ref' type."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidQualifiedName(System.Object)">
            <summary>
            A string like "The qualified name '{0}' is invalid. A qualified name must have a valid namespace or alias, and a valid name."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidEntitySetPath(System.Object)">
            <summary>
            A string like "'{0}' is not a valid entity set path."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlParser_InvalidEnumMemberPath(System.Object)">
            <summary>
            A string like "'{0}' is not a valid enum member path."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlSemantics_ImpossibleAnnotationsTarget(System.Object)">
            <summary>
            A string like "The annotation target '{0}' could not be resolved because it cannot refer to an annotatable element."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.CsdlSemantics_DuplicateAlias(System.Object,System.Object)">
            <summary>
            A string like "The schema '{0}' contains the alias '{1}' more than once."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmxParser_BodyElement(System.Object)">
            <summary>
            A string like "Unexpected {0} element while parsing Edmx. Edmx is expected to have at most one of 'Runtime' or 'DataServices' elements."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmParseException_ErrorsEncounteredInEdmx(System.Object)">
            <summary>
            A string like "Encountered the following errors when parsing the EDMX document: \r\n{0}"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidBoolean(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid boolean. The value must be 'true' or 'false'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidInteger(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid integer. The value must be a valid 32 bit integer."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidLong(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid integer. The value must be a valid 64 bit integer."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidFloatingPoint(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid floating point value. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidMaxLength(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid integer. The value must be a valid 32 bit integer or 'Max'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidSrid(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid SRID. The value must either be a 32 bit integer or 'Variable'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidGuid(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid Guid. "
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidDecimal(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid decimal."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidDateTimeOffset(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid date time offset value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidDateTime(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid date time value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidTime(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid time value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.ValueParser_InvalidBinary(System.Object)">
            <summary>
            A string like "The value '{0}' is not a valid binary value. The value must be a hexadecimal string and must not be prefixed by '0x'."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_Multiplicity(System.Object)">
            <summary>
            A string like "Invalid multiplicity: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_SchemaElementKind(System.Object)">
            <summary>
            A string like "Invalid schema element kind: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_TypeKind(System.Object)">
            <summary>
            A string like "Invalid type kind: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_PrimitiveKind(System.Object)">
            <summary>
            A string like "Invalid primitive kind: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_ContainerElementKind(System.Object)">
            <summary>
            A string like "Invalid container element kind: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_EdmxTarget(System.Object)">
            <summary>
            A string like "Invalid edmx target: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_FunctionParameterMode(System.Object)">
            <summary>
            A string like "Invalid function parameter mode: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_ConcurrencyMode(System.Object)">
            <summary>
            A string like "Invalid concurrency mode: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_PropertyKind(System.Object)">
            <summary>
            A string like "Invalid property kind: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_TermKind(System.Object)">
            <summary>
            A string like "Invalid term kind: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.UnknownEnumVal_ExpressionKind(System.Object)">
            <summary>
            A string like "Invalid expression kind: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_AmbiguousElementBinding(System.Object)">
            <summary>
            A string like "The name '{0}' is ambiguous."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedType(System.Object)">
            <summary>
            A string like "The type '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedComplexType(System.Object)">
            <summary>
            A string like "The complex type '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedEntityType(System.Object)">
            <summary>
            A string like "The entity type '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedPrimitiveType(System.Object)">
            <summary>
            A string like "The primitive type '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedFunction(System.Object)">
            <summary>
            A string like "The function '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_AmbiguousFunction(System.Object)">
            <summary>
            A string like "The function '{0}' could not be resolved because more than one function could be used for this application."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_FunctionParametersDontMatch(System.Object)">
            <summary>
            A string like "The function '{0}' could not be resolved because none of the functions with that name take the correct set of parameters."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedEntitySet(System.Object)">
            <summary>
            A string like "The entity set '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedEntityContainer(System.Object)">
            <summary>
            A string like "The entity container '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedEnumType(System.Object)">
            <summary>
            A string like "The enum type '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedEnumMember(System.Object)">
            <summary>
            A string like "The enum member '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedProperty(System.Object)">
            <summary>
            A string like "The property '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedParameter(System.Object)">
            <summary>
            A string like "The parameter '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UnresolvedLabeledElement(System.Object)">
            <summary>
            A string like "The labeled element '{0}' could not be found."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_CyclicEntity(System.Object)">
            <summary>
            A string like "The entity '{0}' is invalid because its base type is cyclic."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_CyclicComplex(System.Object)">
            <summary>
            A string like "The complex type '{0}' is invalid because its base type is cyclic."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_CyclicEntityContainer(System.Object)">
            <summary>
            A string like "The entity container '{0}' is invalid because its extends hierarchy is cyclic."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.Bad_UncomputableAssociationEnd(System.Object)">
            <summary>
            A string like "The association end '{0}' could not be computed."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmToClr_UnsupportedTypeCode(System.Object)">
            <summary>
            A string like "Conversion of EDM values to a CLR type with type code {0} is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmToClr_IEnumerableOfTPropertyAlreadyHasValue(System.Object,System.Object)">
            <summary>
            A string like "Cannot initialize a property '{0}' on an object of type '{1}'. The property already has a value."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmToClr_StructuredPropertyDuplicateValue(System.Object)">
            <summary>
            A string like "An EDM structured value contains multiple values for the property '{0}'. Conversion of an EDM structured value with duplicate property values is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmToClr_CannotConvertEdmValueToClrType(System.Object,System.Object)">
            <summary>
            A string like "Conversion of an EDM value of the type '{0}' to the CLR type '{1}' is not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmToClr_CannotConvertEdmCollectionValueToClrType(System.Object)">
            <summary>
            A string like "Conversion of an edm collection value to the CLR type '{0}' is not supported. EDM collection values can be converted to System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt; or System.Collections.Generic.ICollection&lt;T&gt;."
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Strings.EdmToClr_TryCreateObjectInstanceReturnedWrongObject(System.Object,System.Object)">
            <summary>
            A string like "The type '{0}' of the object returned by the TryCreateObjectInstance delegate is not assignable to the expected type '{1}'."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmPrimitive_UnexpectedKind">
            <summary>
            A string like "Unexpected primitive type kind."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.Constructable_VocabularyAnnotationMustHaveTarget">
            <summary>
            A string like "The annotation must have non-null target."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.Constructable_EntityTypeOrCollectionOfEntityTypeExpected">
            <summary>
            A string like "An entity type or a collection of an entity type is expected."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_CannotUseElementWithTypeNone">
            <summary>
            A string like "An element with type 'None' cannot be used in a model."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmEntityContainer_CannotUseElementWithTypeNone">
            <summary>
            A string like "An element with type 'None' cannot be used in an entity container."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.ValueHasAlreadyBeenSet">
            <summary>
            A string like "Value has already been set."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.PathSegmentMustNotContainSlash">
            <summary>
            A string like "Path segments must not contain '/' character."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidOperationMultipleEndsInAssociation">
            <summary>
            A string like "An on delete action can only be specified on one end of an association."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_MismatchNumberOfPropertiesinRelationshipConstraint">
            <summary>
            A string like "The number of properties in the dependent and principal role in a relationship constraint must be exactly identical."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_BaseTypeMustHaveSameTypeKind">
            <summary>
            A string like "The base type kind of a structured type must be the same as its derived type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_RowTypeMustNotHaveBaseType">
            <summary>
            A string like "Row types cannot have a base type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionsNotSupportedBeforeV2">
            <summary>
            A string like "Functions are not supported prior to version 2.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportSideEffectingNotSupportedBeforeV3">
            <summary>
            A string like "The 'SideEffecting' setting of function imports is not supported before version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportComposableNotSupportedBeforeV3">
            <summary>
            A string like "The 'Composable' setting of function imports is not supported before version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_FunctionImportBindableNotSupportedBeforeV3">
            <summary>
            A string like "The 'Bindable' setting of function imports is not supported before version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NavigationPropertyContainsTargetNotSupportedBeforeV3">
            <summary>
            A string like "The 'ContainsTarget' setting of navigation properties is not supported before version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_RowTypeMustHaveProperties">
            <summary>
            A string like "The row type is invalid. A row must contain at least one property."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ScaleOutOfRange">
            <summary>
            A string like "The scale value can range from 0 through the specified precision value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_PrecisionOutOfRange">
            <summary>
            A string like "Precision cannot be negative."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_StringMaxLengthOutOfRange">
            <summary>
            A string like "The max length facet specifies the maximum length of an instance of the string type. For unicode equal to 'true', the max length can range from 1 to 2^30, or if 'false', 1 to 2^31."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_MaxLengthOutOfRange">
            <summary>
            A string like "Max length can range from 1 to 2^31."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_EnumsNotSupportedBeforeV3">
            <summary>
            A string like "Enums are not supported prior to version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ValueTermsNotSupportedBeforeV3">
            <summary>
            A string like "Value terms are not supported prior to version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_VocabularyAnnotationsNotSupportedBeforeV3">
            <summary>
            A string like "Vocabulary annotations are not supported prior to version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_OpenTypesSupportedOnlyInV12AndAfterV3">
            <summary>
            A string like "Open types are supported only in version 1.2 and after version 2.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_OpenTypesSupportedForEntityTypesOnly">
            <summary>
            A string like "Only entity types can be open types."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_IsUnboundedCannotBeTrueWhileMaxLengthIsNotNull">
            <summary>
            A string like "The string reference is invalid because if 'IsUnbounded' is true 'MaxLength' must be null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidElementAnnotationMismatchedTerm">
            <summary>
            A string like "The declared name and namespace of the annotation must match the name and namespace of its xml value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidElementAnnotationValueInvalidXml">
            <summary>
            A string like "The value of an annotation marked to be serialized as an xml element must have a well-formed xml value."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidElementAnnotationNotIEdmStringValue">
            <summary>
            A string like "The value of an annotation marked to be serialized as an xml element must be IEdmStringValue."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_InvalidElementAnnotationNullNamespaceOrName">
            <summary>
            A string like "The value of an annotation marked to be serialized as an xml element must be a string representing an xml element with non-empty name and namespace."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_NullCannotBeAssertedToBeANonNullableType">
            <summary>
            A string like "Null value cannot have a non-nullable type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ExpressionNotValidForTheAssertedType">
            <summary>
            A string like "The type of the expression is incompatible with the asserted type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_CollectionExpressionNotValidForNonCollectionType">
            <summary>
            A string like "A collection expression is incompatible with a non-collection type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_PrimitiveConstantExpressionNotValidForNonPrimitiveType">
            <summary>
            A string like "A primitive expression is incompatible with a non-primitive type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_RecordExpressionNotValidForNonStructuredType">
            <summary>
            A string like "A record expression is incompatible with a non-structured type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_StreamTypeReferencesNotSupportedBeforeV3">
            <summary>
            A string like "References to EDM stream type are not supported before version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_SpatialTypeReferencesNotSupportedBeforeV3">
            <summary>
            A string like "References to EDM spatial types are not supported before version 3.0."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_ExpressionPrimitiveKindNotValidForAssertedType">
            <summary>
            A string like "The primitive expression is not compatible with the asserted type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_IntegerConstantValueOutOfRange">
            <summary>
            A string like "The value of the integer constant is out of range for the asserted type."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Semantic_TypeMustNotHaveKindOfNone">
            <summary>
            A string like "A type without other errors must not have kind of none."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_MissingName">
            <summary>
            A string like "The name is missing or not valid."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmModel_Validator_Syntactic_MissingNamespaceName">
            <summary>
            A string like "The namespace name is missing or not valid."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.Serializer_SingleFileExpected">
            <summary>
            A string like "Single file provided but model cannot be serialized into single file."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.Serializer_UnknownEdmVersion">
            <summary>
            A string like "Unknown Edm version."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.Serializer_UnknownEdmxVersion">
            <summary>
            A string like "Unknown Edmx version."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.Serializer_NoSchemasProduced">
            <summary>
            A string like "No CSDL is written because no schema elements could be produced. This is likely because the model is empty."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.XmlParser_EmptySchemaTextReader">
            <summary>
            A string like "The source XmlReader does not contain a schema definition or started at the end of the file."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_AssociationHasAtMostOneConstraint">
            <summary>
            A string like "Associations may have at most one constraint. Multiple constraints were specified for this association."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_MissingTypeAttributeOrElement">
            <summary>
            A string like "An XML attribute or sub-element representing an EDM type is missing."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_ReferentialConstraintRequiresOneDependent">
            <summary>
            A string like "Referential constraints requires one dependent role. Multiple dependent roles were specified for this referential constraint."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_ReferentialConstraintRequiresOnePrincipal">
            <summary>
            A string like "Referential constraints requires one principal role. Multiple principal roles were specified for this referential constraint."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_InvalidIfExpressionIncorrectNumberOfOperands">
            <summary>
            A string like "If expression must contain 3 operands, the first being a boolean test, the second being being evaluated if the first is true, and the third being evaluated if the first is false."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_InvalidIsTypeExpressionIncorrectNumberOfOperands">
            <summary>
            A string like "The IsType expression must contain 1 operand."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_InvalidAssertTypeExpressionIncorrectNumberOfOperands">
            <summary>
            A string like "The AssertType expression must contain 1 operand."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_InvalidLabeledElementExpressionIncorrectNumberOfOperands">
            <summary>
            A string like "The LabeledElement expression must contain 1 operand."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_NoReadersProvided">
            <summary>
            A string like "A model could not be produced because no XML readers were provided."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlParser_NullXmlReader">
            <summary>
            A string like "A model could not be produced because one of the XML readers was null."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlSemantics_ReferentialConstraintMismatch">
            <summary>
            A string like " There was a mismatch in the principal and dependent ends of the referential constraint."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.CsdlSemantics_EnumMemberValueOutOfRange">
            <summary>
            A string like "The enumeration member value exceeds the range of its data type 'http://www.w3.org/2001/XMLSchema:long'."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmxParser_EdmxVersionMismatch">
            <summary>
            A string like "The EDMX version specified in the 'Version' attribute does not match the version corresponding to the namespace of the 'Edmx' element."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmxParser_EdmxDataServiceVersionInvalid">
            <summary>
            A string like "The specified value of data service version is invalid."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmxParser_EdmxMaxDataServiceVersionInvalid">
            <summary>
            A string like "The specified value of max data service version is invalid."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.RuleSet_DuplicateRulesExistInRuleSet">
            <summary>
            A string like "The same rule cannot be in the same rule set twice."
            </summary>
        </member>
        <member name="P:Microsoft.Data.Edm.Strings.EdmToClr_StructuredValueMappedToNonClass">
            <summary>
            A string like "Conversion of an EDM structured value is supported only to a CLR class."
            </summary>
        </member>
        <member name="T:Microsoft.Data.Edm.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:Microsoft.Data.Edm.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
    </members>
</doc>

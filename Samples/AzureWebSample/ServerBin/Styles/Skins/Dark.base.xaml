<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:xcg="clr-namespace:XCGControls;assembly=XCGControls">

    <!-- XCGControls Details -->

    <Style x:Key="HeaderTopBorder" TargetType="{x:Type Border}">
        <Setter Property="Height" Value="44"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Color="#99666666" Offset=".5"/>
                    <GradientStop Color="Transparent" Offset=".8"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Color="#99000000" Offset=".5"/>
                    <GradientStop Color="#66000000" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="WindowFrameBackground" StartPoint="0.102759,-0.0431519" EndPoint="0.802759,0.913967">
        <GradientStop Color="#FF333333" Offset="0" />
        <GradientStop Color="#FF666666" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="WindowHeaderBackground" StartPoint="0.102759,-0.0431519" EndPoint="0.802759,0.913967">
        <GradientStop Color="#FF808593" Offset="0" />
        <GradientStop Color="#FFE8EBEC" Offset="1" />
    </LinearGradientBrush>

    <Style x:Key="WindowHeaderText" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="10,0,0,0" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="28" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="Foreground" Value="#ffffff" />
    </Style>

    <Style x:Key="WindowHeaderBoldText" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="#FFFFD800" />
    </Style>

    <Style x:Key="WindowFrameMainContentPanel" TargetType="{x:Type Panel}">
        <Setter Property="Margin" Value="10" />
    </Style>

    <!-- Menu Elements -->

    <Style x:Key="Menu" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#ffaaaaaa" />
        <Setter Property="Margin" Value="5,0,0,0" />
    </Style>

    <Style x:Key="MenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>

                            <!-- ContentPresenter to show an Icon if needed -->
                            <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                            <!-- Glyph is a checkmark if needed for a checkable menu -->
                            <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                            </Grid>

                            <!-- Content for the menu text etc -->
                            <ContentPresenter Grid.Column="1"
                                              Margin="{TemplateBinding Padding}"
                                              x:Name="HeaderHost"
                                              RecognizesAccessKey="True"
                                              ContentSource="Header"/>

                            <!-- Content for the menu IGT -->
                            <ContentPresenter Grid.Column="2"
                                              Margin="8,1,8,1"
                                              x:Name="IGTHost"
                                              ContentSource="InputGestureText"
                                              VerticalAlignment="Center"/>

                            <!-- Arrow drawn path which points to the next level of the menu -->
                            <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                            </Grid>

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2" Background="#ff333333">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">

                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>

                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="0,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- If no Icon is present the we collapse the Icon Content -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- The GlyphPanel contains the CheckMark -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="LightGray" TargetName="Border"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ff666666"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SkinsMenu" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItem}">
        <Setter Property="Header" Value="Skins" />
        <Setter Property="ItemsSource" Value="{Binding Path=AvailableSkins, RelativeSource={RelativeSource AncestorType=xcg:WindowBase}}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItem}">
                    <Setter Property="Header" Value="{Binding Name}" />
                    <Setter Property="Command" Value="{x:Static xcg:WindowBase.ChangeSkinCommand}" />
                    <Setter Property="CommandParameter" Value="{Binding}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Separator" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Rectangle Height="1" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource Menu}" />
    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItem}" />
    <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource Separator}" />

    <!-- Content Panels -->

    <LinearGradientBrush x:Key="ContentPanelBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#ff696969"/>
        <GradientStop Offset=".1" Color="#ff808080"/>
        <GradientStop Offset=".3" Color="#ff999999"/>
        <GradientStop Offset=".9" Color="#ff808080"/>
        <GradientStop Offset="1" Color="#ff696969"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ContentTextForeground" Color="#ffdddddd" />

    <Style x:Key="ContentPanelOuterBorder" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="BorderBrush" Value="#99000000" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{StaticResource ContentPanelBackground}" />
    </Style>

    <Style x:Key="ContentPanelInnerBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="#aa777777" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="CornerRadius" Value="4" />
    </Style>

    <Style x:Key="ContentText" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ResourceKey= ContentTextForeground}" />
    </Style>

    <!-- Splitter -->

    <SolidColorBrush x:Key="SplitterHandleForeground" Color="#aaffffff" />
    <SolidColorBrush x:Key="SplitterHandleBackground" Color="#33ffffff" />
    <SolidColorBrush x:Key="SplitterBackground" Color="Transparent" />

    <Style x:Key="SplitterHandleDash" TargetType="{x:Type Ellipse}">
        <Setter Property="Fill" Value="{StaticResource SplitterHandleBackground}"/>
        <Setter Property="Width" Value="3"/>
        <Setter Property="Height" Value="3"/>
    </Style>

    <Style x:Key="SplitterHandleDot" TargetType="{x:Type Ellipse}">
        <Setter Property="Fill" Value="{StaticResource SplitterHandleForeground}"/>
        <Setter Property="Width" Value="3"/>
        <Setter Property="Height" Value="3"/>
    </Style>

    <Style x:Key="HorizontalSplitter" TargetType="{x:Type xcg:Splitter}">
        <Setter Property="Height" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{StaticResource SplitterBackground}">
                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Orientation="Horizontal">
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDot}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDot}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDot}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDot}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalSplitter" TargetType="{x:Type xcg:Splitter}">
        <Setter Property="Width" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Background="{StaticResource SplitterBackground}">
                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDot}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDot}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDot}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDot}"/>
                            <Ellipse Style="{StaticResource SplitterHandleDash}"/>
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="ForegroundSplitterHandleForeground" Color="#aaffffff" />
    <SolidColorBrush x:Key="ForegroundSplitterHandleBackground" Color="#33ffffff" />
    <LinearGradientBrush x:Key="ForegroundSplitterBackground" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="#66444444" />
        <GradientStop Offset=".3" Color="#66909090" />
        <GradientStop Offset="1" Color="#99444444" />
    </LinearGradientBrush>

    <Style x:Key="ForegroundSplitterHandleDash" TargetType="{x:Type Ellipse}" BasedOn="{StaticResource SplitterHandleDash}">
        <Setter Property="Fill" Value="{StaticResource ForegroundSplitterHandleBackground}"/>
    </Style>

    <Style x:Key="ForegroundSplitterHandleDot" TargetType="{x:Type Ellipse}" BasedOn="{StaticResource SplitterHandleDot}">
        <Setter Property="Fill" Value="{StaticResource ForegroundSplitterHandleForeground}"/>
    </Style>

    <Style x:Key="ForegroundHorizontalSplitter" TargetType="{x:Type xcg:Splitter}" BasedOn="{StaticResource HorizontalSplitter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Border Background="{StaticResource ForegroundSplitterBackground}" CornerRadius="4">
                            <Border.LayoutTransform>
                                <RotateTransform Angle="90" />
                            </Border.LayoutTransform>
                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDot}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDot}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDot}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDot}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                            </StackPanel>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ForegroundVerticalSplitter" TargetType="{x:Type xcg:Splitter}" BasedOn="{StaticResource VerticalSplitter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <Border Background="{StaticResource ForegroundSplitterBackground}" CornerRadius="4">
                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDot}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDot}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDot}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDot}"/>
                                <Ellipse Style="{StaticResource ForegroundSplitterHandleDash}"/>
                            </StackPanel>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabControl -->
    
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border x:Name="Border" CornerRadius="4 4 0 0" BorderBrush="#ff333333" SnapsToDevicePixels="True">
                            <TextBlock Foreground="{DynamicResource ContentForegroundColor}" FontSize="12">
                                <ContentPresenter ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10 2 10 2" />
                            </TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#ff606060" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1 1 1 0" />
                            <Setter TargetName="Border" Property="Margin" Value="0 -2 3 0" />
                            <Setter TargetName="Border" Property="TextBlock.Foreground" Value="#ffdddddd" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#ff808080" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1" />
                            <Setter TargetName="Border" Property="Margin" Value="0 0 3 0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid Margin="-3 0 -3 0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <TabPanel Panel.ZIndex="1" Margin="0 0 0 -1" IsItemsHost="True">
                            <TabPanel.Background>
                                <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                                    <GradientStop Offset=".4" Color="#00000000" />
                                    <GradientStop Offset="1" Color="#55000000" />
                                </LinearGradientBrush>
                            </TabPanel.Background>
                        </TabPanel>
                        <Border Grid.Row="1" BorderBrush="#ff333333" BorderThickness="1" CornerRadius="0 0 3 3" Margin="0 0 0 -3" SnapsToDevicePixels="True">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                                    <GradientStop Offset="0" Color="#ff606060" />
                                    <GradientStop Offset="0.05" Color="#cc606060" />
                                    <GradientStop Offset="0.2" Color="#99606060" />
                                    <GradientStop Offset="1" Color="#66222222" />
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border Margin="3">
                                <ContentPresenter ContentSource="SelectedContent" />
                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TreeView, ListBox, TextBox, etc. -->

    <SolidColorBrush x:Key="InputFieldBackground" Color="#dd444444" />
    <SolidColorBrush x:Key="InputFieldBorder" Color="#99111111" />

    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{StaticResource InputFieldBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputFieldBorder}" />
    </Style>

    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ContentTextForeground}" />
    </Style>

    <Style TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource InputFieldBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputFieldBorder}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ContentTextForeground}" />
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource InputFieldBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource InputFieldBorder}" />
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ContentTextForeground}" />
    </Style>
    
    <!-- Buttons -->
    
    <Style TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" CornerRadius="6" BorderBrush="#99333333" BorderThickness="1">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <GradientStop Offset=".3" Color="#ffaaaaaa" />
                                <GradientStop Offset="1" Color="#ff606060" />
                            </LinearGradientBrush>
                        </Border.Background>
                        <ContentPresenter x:Name="Content" HorizontalAlignment="Center" VerticalAlignment="Center"
                                          Margin="10,2,10,2" TextBlock.Foreground="#ff111111" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset=".3" Color="#ffcccccc" />
                                        <GradientStop Offset="1" Color="#ff808080" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset=".3" Color="#ff999999" />
                                        <GradientStop Offset="1" Color="#ff606060" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="#aaaaaaaa" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity" Value=".3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollBars -->

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <ControlTemplate.Resources>
                        <Style x:Key="RepeatButton" TargetType="{x:Type RepeatButton}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Grid Height="10" Width="10">
                                            <Border CornerRadius="3" Margin="2" Background="#66999999" />
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid Background="Transparent" x:Name="Grid" Width="14">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="10"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="10"/>
                        </Grid.RowDefinitions>
                        
                        <Border Grid.RowSpan="3" CornerRadius="5" Background="#11000000" />
                        
                        <RepeatButton Grid.Row="0" Command="ScrollBar.LineUpCommand" Style="{StaticResource RepeatButton}" />
                        
                        <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageUpCommand" Opacity="0" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Margin="1,0,1,0" Background="Transparent">
                                    <Thumb.Template>
                                        <ControlTemplate>
                                            <Border CornerRadius="5" Background="#dd999999" />
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageDownCommand" Opacity="0" />
                            </Track.IncreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2" Command="ScrollBar.LineDownCommand" Style="{StaticResource RepeatButton}" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="Grid" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />
                            <Setter TargetName="PART_Track" Property="IsDirectionReversed" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- ToolBars -->
    
    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    
    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="#ff808080" />
    </Style>

</ResourceDictionary>